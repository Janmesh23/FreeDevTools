{
  "category": "gaming-and-game-development",
  "categoryDisplay": "Gaming and Game Development",
  "description": "",
  "totalRepositories": 67,
  "repositories": {
    "AllAboutAI-YT--mcpgame": {
      "owner": "AllAboutAI-YT",
      "name": "mcpgame",
      "url": "https://github.com/AllAboutAI-YT/mcpgame",
      "imageUrl": "/freedevtools/mcp/pfp/AllAboutAI-YT.webp",
      "description": "Multi-player control panel game featuring a virtual house environment with interactive elements like an image-generating TV and a computer terminal for accessing MCP systems. It enables real-time communication and user interaction within a detailed 3D setting.",
      "stars": 8,
      "forks": 5,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-15T21:59:02Z",
      "readme_content": "# MCPGame\n\nA multi-player control panel game with Node.js backend featuring a virtual house environment with interactive elements.\n\n## Features\n\n- Immersive first-person 3D virtual house with outdoor environment\n- Beautifully detailed house with interior and exterior features\n- Interactive door to enter and exit the house\n- Garden area with trees, plants, and decorative elements\n- Interactive TV with image generation capabilities\n- Computer terminal for accessing MCP systems\n- Realistic movement and collision detection\n- Real-time server communication\n\n## Setup\n\n1. Install dependencies:\n```\nnpm install\n```\n\n2. Run the server:\n```\nnpm start\n```\nOr for development with auto-restart:\n```\nnpm run dev\n```\n\nThe server will start on port 3002.\n\n## Game Controls\n\n- **Movement**: WASD keys\n- **Look around**: Mouse movement (click on game to enable)\n- **Interact**: Press ENTER when near interactive objects\n- **Exit interfaces**: ESC key\n- **Exit mouse lock**: ESC key\n\n## Interactive Elements\n\n### Outdoor Environment\n- Explore the terrain with trees and garden beds\n- Follow the path to the house entrance\n- Press ENTER when near the door to enter/exit the house\n\n### TV System\n- Approach the TV and press ENTER to access the remote control\n- Generate images that will display on the TV screen\n- Type a prompt for image generation in the terminal interface\n\n### MCP Terminal\n- Find the computer desk and press ENTER to access the terminal\n- Send commands to the MCP system\n- Access various virtual tools (email, web search, etc.)\n\n## Technical Details\n\n- Built with Three.js for 3D rendering\n- First-person camera with pointer lock controls\n- Outdoor environment with procedurally placed trees\n- Express.js server for backend communication\n- Canvas library for image generation\n- RESTful API for server communication\n\n# MCP Game Image System\n\nThis document explains how the image display system works in the MCP Game.\n\n## Overview\n\nThe system displays existing images from the `server/openai-server/public/image` directory on the TV in the virtual house. Instead of generating new images, which was causing 500 Internal Server errors, the system now checks for existing images in the specified directory.\n\n## How It Works\n\n1. The TV in the virtual house displays images that exist in the `server/openai-server/public/image` directory.\n2. The system checks for new images every 10 seconds.\n3. When a user requests a new image through the TV remote interface, the system selects a random image from the directory.\n\n## Adding New Images\n\nTo add new images to the TV:\n\n1. Place image files (jpg, jpeg, png, gif, webp) in the `server/openai-server/public/image` directory.\n2. The system will automatically detect and display them.\n3. Files should be a reasonable size for web display (recommended: 800x450 pixels).\n\n## Usage\n\n1. Approach the TV in the virtual house.\n2. Press Enter to access the TV remote control interface.\n3. Type any command related to displaying images.\n4. The system will select and display an image from the available ones in the directory.\n\n## Troubleshooting\n\n- If no images are displayed, check if the `server/openai-server/public/image` directory exists and contains image files.\n- Make sure the server is running on the correct port (default: 3002).\n- Check the browser console for any error messages related to image loading.\n\n## Technical Details\n\n- The system no longer attempts to generate images directly, avoiding the 500 Internal Server errors.\n- Images are selected randomly from the directory when requested.\n- The system provides appropriate feedback when no images are available.\n\n# Connecting to MCP Backend Server\n\nThe MCPGame can connect to an external MCP Backend Server to enable advanced AI functionality for the terminal and TV interactions.\n\n## Configuration\n\n1. Open the `main.js` file and locate the configuration section at the top:\n\n```javascript\n// --- Configuration ---\nconst MCP_BACKEND_URL = 'http://localhost:3001'; // MCP Terminal backend connection\nconst IMAGE_SERVER_URL = 'http://localhost:3002'; // Image server connection\n```\n\n2. Update the `MCP_BACKEND_URL` to point to your MCP Backend Server:\n   - For local development: `http://localhost:PORT` (replace PORT with your backend port)\n   - For production: Use the full URL to your deployed backend server\n\n## Required API Endpoints\n\nYour MCP Backend Server should implement these endpoints:\n\n1. `GET /api/status` - Returns the status of the MCP system\n2. `POST /api/query` - Accepts user queries and returns AI responses\n\n## Response Format\n\nThe query endpoint should return JSON in this format:\n\n```json\n{\n  \"response\": \"Text to display in the terminal\",\n  \"spokenResponse\": \"Optional text for voice synthesis\" \n}\n```\n\n## Testing the Connection\n\n1. Start your MCP Backend Server\n2. Start the MCPGame server (`node server.js`)\n3. Open the game in a browser\n4. Interact with the computer terminal in the virtual house\n5. The game will connect to your MCP Backend Server when you use the terminal ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gaming",
        "mcpgame",
        "interactive",
        "gaming game",
        "virtual house",
        "panel game"
      ],
      "category": "gaming-and-game-development"
    },
    "CoderGamester--mcp-unity": {
      "owner": "CoderGamester",
      "name": "mcp-unity",
      "url": "https://github.com/CoderGamester/mcp-unity",
      "imageUrl": "/freedevtools/mcp/pfp/CoderGamester.webp",
      "description": "Enhances the Unity Editor by integrating MCP clients, streamlining the development workflow with various tools and data sources.",
      "stars": 1004,
      "forks": 122,
      "license": "MIT License",
      "language": "C#",
      "updated_at": "2025-10-04T07:27:09Z",
      "readme_content": "# MCP Unity Editor (Game Engine)\n\n[![](https://badge.mcpx.dev?status=on 'MCP Enabled')](https://modelcontextprotocol.io/introduction)\n[![](https://img.shields.io/badge/Unity-000000?style=flat&logo=unity&logoColor=white 'Unity')](https://unity.com/releases/editor/archive)\n[![](https://img.shields.io/badge/Node.js-339933?style=flat&logo=nodedotjs&logoColor=white 'Node.js')](https://nodejs.org/en/download/)\n[![](https://img.shields.io/github/stars/CoderGamester/mcp-unity 'Stars')](https://github.com/CoderGamester/mcp-unity/stargazers)\n[![](https://img.shields.io/github/last-commit/CoderGamester/mcp-unity 'Last Commit')](https://github.com/CoderGamester/mcp-unity/commits/main)\n[![](https://img.shields.io/badge/License-MIT-red.svg 'MIT License')](https://opensource.org/licenses/MIT)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/CoderGamester/mcp-unity)](https://archestra.ai/mcp-catalog/codergamester__mcp-unity)\n\n| [üá∫üá∏English](README.md) | [üá®üá≥ÁÆÄ‰Ωì‰∏≠Êñá](README_zh-CN.md) | [üáØüáµÊó•Êú¨Ë™û](README-ja.md) |\n|----------------------|---------------------------------|----------------------|\n\n```        \n                              ,/(/.   *(/,                                  \n                          */(((((/.   *((((((*.                             \n                     .*((((((((((/.   *((((((((((/.                         \n                 ./((((((((((((((/    *((((((((((((((/,                     \n             ,/(((((((((((((/*.           */(((((((((((((/*.                \n            ,%%#((/((((((*                    ,/(((((/(#&@@(                \n            ,%%##%%##((((((/*.             ,/((((/(#&@@@@@@(                \n            ,%%######%%##((/(((/*.    .*/(((//(%@@@@@@@@@@@(                \n            ,%%####%#(%%#%%##((/((((((((//#&@@@@@@&@@@@@@@@(                \n            ,%%####%(    /#%#%%%##(//(#@@@@@@@%,   #@@@@@@@(                \n            ,%%####%(        *#%###%@@@@@@(        #@@@@@@@(                \n            ,%%####%(           #%#%@@@@,          #@@@@@@@(                \n            ,%%##%%%(           #%#%@@@@,          #@@@@@@@(                \n            ,%%%#*              #%#%@@@@,             *%@@@(                \n            .,      ,/##*.      #%#%@@@@,     ./&@#*      *`                \n                ,/#%#####%%#/,  #%#%@@@@, ,/&@@@@@@@@@&\\.                    \n                 `*#########%%%%###%@@@@@@@@@@@@@@@@@@&*¬¥                   \n                    `*%%###########%@@@@@@@@@@@@@@&*¬¥                        \n                        `*%%%######%@@@@@@@@@@&*¬¥                            \n                            `*#%%##%@@@@@&*¬¥                                 \n                               `*%#%@&*¬¥                                     \n                                                       \n     ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó         ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó\n     ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó        ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù\n     ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù        ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë    ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù \n     ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù         ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë     ‚ïö‚ñà‚ñà‚ïî‚ïù  \n     ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë             ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë      ‚ñà‚ñà‚ïë   \n     ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù              ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù      ‚ïö‚ïê‚ïù   \n```       \n\nMCP Unity is an implementation of the Model Context Protocol for Unity Editor, allowing AI assistants to interact with your Unity projects. This package provides a bridge between Unity and a Node.js server that implements the MCP protocol, enabling AI agents like Claude, Windsurf, and Cursor to execute operations within the Unity Editor.\n\n<a href=\"https://glama.ai/mcp/servers/@CoderGamester/mcp-unity\">\n  <img width=\"400\" height=\"200\" src=\"https://glama.ai/mcp/servers/@CoderGamester/mcp-unity/badge\" alt=\"Unity MCP server\" />\n</a>\n\n## Features\n\n### IDE Integration - Package Cache Access\n\nMCP Unity provides automatic integration with VSCode-like IDEs (Visual Studio Code, Cursor, Windsurf) by adding the Unity `Library/PackedCache` folder to your workspace. This feature:\n\n- Improves code intelligence for Unity packages\n- Enables better autocompletion and type information for Unity packages\n- Helps AI coding assistants understand your project's dependencies\n\n### MCP Server Tools\n\nThe following tools are available for manipulating and querying Unity scenes and GameObjects via MCP:\n\n- `execute_menu_item`: Executes Unity menu items (functions tagged with the MenuItem attribute)\n  > **Example prompt:** \"Execute the menu item 'GameObject/Create Empty' to create a new empty GameObject\"\n\n- `select_gameobject`: Selects game objects in the Unity hierarchy by path or instance ID\n  > **Example prompt:** \"Select the Main Camera object in my scene\"\n\n- `update_gameobject`: Updates a GameObject's core properties (name, tag, layer, active/static state), or creates the GameObject if it does not exist\n  > **Example prompt:** \"Set the Player object's tag to 'Enemy' and make it inactive\"\n\n- `update_component`: Updates component fields on a GameObject or adds it to the GameObject if it does not contain the component\n  > **Example prompt:** \"Add a Rigidbody component to the Player object and set its mass to 5\"\n\n- `add_package`: Installs new packages in the Unity Package Manager\n  > **Example prompt:** \"Add the TextMeshPro package to my project\"\n\n- `run_tests`: Runs tests using the Unity Test Runner\n  > **Example prompt:** \"Run all the EditMode tests in my project\"\n\n- `send_console_log`: Send a console log to Unity\n  > **Example prompt:** \"Send a console log to Unity Editor\"\n\n- `add_asset_to_scene`: Adds an asset from the AssetDatabase to the Unity scene\n  > **Example prompt:** \"Add the Player prefab from my project to the current scene\"\n\n- `create_prefab`: Creates a prefab with optional MonoBehaviour script and serialized field values\n  > **Example prompt:** \"Create a prefab named 'Player' from the 'PlayerController' script\"\n\n### MCP Server Resources\n\n- `unity://menu-items`: Retrieves a list of all available menu items in the Unity Editor to facilitate `execute_menu_item` tool\n  > **Example prompt:** \"Show me all available menu items related to GameObject creation\"\n\n- `unity://scenes-hierarchy`: Retrieves a list of all game objects in the current Unity scene hierarchy\n  > **Example prompt:** \"Show me the current scenes hierarchy structure\"\n\n- `unity://gameobject/{id}`: Retrieves detailed information about a specific GameObject by instance ID or object path in the scene hierarchy, including all GameObject components with it's serialized properties and fields\n  > **Example prompt:** \"Get me detailed information about the Player GameObject\"\n\n- `unity://logs`: Retrieves a list of all logs from the Unity console\n  > **Example prompt:** \"Show me the recent error messages from the Unity console\"\n\n- `unity://packages`: Retrieves information about installed and available packages from the Unity Package Manager\n  > **Example prompt:** \"List all the packages currently installed in my Unity project\"\n\n- `unity://assets`: Retrieves information about assets in the Unity Asset Database\n  > **Example prompt:** \"Find all texture assets in my project\"\n\n- `unity://tests/{testMode}`: Retrieves information about tests in the Unity Test Runner\n  > **Example prompt:** \"List all available tests in my Unity project\"\n\n## Requirements\n- Unity 2022.3 or later - to [install the server](#install-server)\n- Node.js 18 or later - to [start the server](#start-server)\n- npm 9 or later - to [debug the server](#debug-server)\n\n> [!IMPORTANT]\n> **Project Path Cannot Contain Spaces**\n>\n> It is crucial that the file path to your Unity project **does not contain any spaces**.\n> If your project path includes spaces, the MCP Client (e.g., Cursor, Claude, Windsurf) will fail to connect to the MCP Unity server.\n>\n> **Examples:**\n> -   ‚úÖ **Works:** `C:\\Users\\YourUser\\Documents\\UnityProjects\\MyAwesomeGame`\n> -   ‚ùå **Fails:** `C:\\Users\\Your User\\Documents\\Unity Projects\\My Awesome Game`\n>\n> Please ensure your project is located in a path without spaces before proceeding with the installation.\n\n## <a name=\"install-server\"></a>Installation\n\nInstalling this MCP Unity Server is a multi-step process:\n\n### Step 1: Install Node.js \n> To run MCP Unity server, you'll need to have Node.js 18 or later installed on your computer:\n\n\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Windows</span></summary>\n\n1. Visit the [Node.js download page](https://nodejs.org/en/download/)\n2. Download the Windows Installer (.msi) for the LTS version (recommended)\n3. Run the installer and follow the installation wizard\n4. Verify the installation by opening PowerShell and running:\n   ```bash\n   node --version\n   ```\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">macOS</span></summary>\n\n1. Visit the [Node.js download page](https://nodejs.org/en/download/)\n2. Download the macOS Installer (.pkg) for the LTS version (recommended)\n3. Run the installer and follow the installation wizard\n4. Alternatively, if you have Homebrew installed, you can run:\n   ```bash\n   brew install node@18\n   ```\n5. Verify the installation by opening Terminal and running:\n   ```bash\n   node --version\n   ```\n</details>\n\n### Step 2: Install Unity MCP Server package via Unity Package Manager\n1. Open the Unity Package Manager (Window > Package Manager)\n2. Click the \"+\" button in the top-left corner\n3. Select \"Add package from git URL...\"\n4. Enter: `https://github.com/CoderGamester/mcp-unity.git`\n5. Click \"Add\"\n\n![package manager](https://github.com/user-attachments/assets/a72bfca4-ae52-48e7-a876-e99c701b0497)\n\n### Step 3: Configure AI LLM Client\n\n<details open>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Option 1: Configure using Unity Editor</span></summary>\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Click on the \"Configure\" button for your AI LLM client as shown in the image below\n\n\n\n4. Confirm the configuration installation with the given popup\n\n![image](https://github.com/user-attachments/assets/b1f05d33-3694-4256-a57b-8556005021ba)\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Option 2: Configure Manually</span></summary>\n\nOpen the MCP configuration file of your AI client (e.g. claude_desktop_config.json in Claude Desktop) and copy the following text:\n\n> Replace `ABSOLUTE/PATH/TO` with the absolute path to your MCP Unity installation or just copy the text from the Unity Editor MCP Server window (Tools > MCP Unity > Server Window).\n\n```json\n{\n   \"mcpServers\": {\n       \"mcp-unity\": {\n          \"command\": \"node\",\n          \"args\": [\n             \"ABSOLUTE/PATH/TO/mcp-unity/Server~/build/index.js\"\n          ]\n       }\n   }\n}\n```\n\n</details>\n\n## <a name=\"start-server\"></a>Start Unity Editor MCP Server\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Click \"Start Server\" to start the WebSocket server\n4. Open Claude Desktop or your AI Coding IDE (e.g. Cursor IDE, Windsurf IDE, etc.) and start executing Unity tools\n   \n![connect](https://github.com/user-attachments/assets/2e266a8b-8ba3-4902-b585-b220b11ab9a2)\n\n> When the AI client connects to the WebSocket server, it will automatically show in the green box in the window\n\n## Optional: Set WebSocket Port\nBy default, the WebSocket server runs on port '8090'. You can change this port in two ways:\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Change the \"WebSocket Port\" value to your desired port number\n4. Unity will setup the system environment variable UNITY_PORT to the new port number\n5. Restart the Node.js server\n6. Click again on \"Start Server\" to reconnect the Unity Editor web socket to the Node.js MCP Server\n\n## Optional: Set Timeout\n\nBy default, the timeout between the MCP server and the WebSocket is 10 seconds.\nYou can change depending on the OS you are using:\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Change the \"Request Timeout (seconds)\" value to your desired timeout seconds\n4. Unity will setup the system environment variable UNITY_REQUEST_TIMEOUT to the new timeout value\n5. Restart the Node.js server\n6. Click again on \"Start Server\" to reconnect the Unity Editor web socket to the Node.js MCP Server\n\n> [!TIP]  \n> The timeout between your AI Coding IDE (e.g., Claude Desktop, Cursor IDE, Windsurf IDE) and the MCP Server depends on the IDE.\n\n## Optional: Allow Remote MCP Bridge Connections\n\nBy default, the WebSocket server binds to 'localhost'. To allow MCP bridge connections from other machines:\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Enable the \"Allow Remote Connections\" checkbox\n4. Unity will bind the WebSocket server to '0.0.0.0' (all interfaces)\n5. Restart the Node.js server to apply the new host configuration\n6. Set the environment variable UNITY_HOST to your Unity machine's IP address when running the MCP bridge remotely: `UNITY_HOST=192.168.1.100 node server.js`\n\n## <a name=\"debug-server\"></a>Debugging the Server\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Building the Node.js Server</span></summary>\n\nThe MCP Unity server is built using Node.js . It requires to compile the TypeScript code to JavaScript in the `build` directory.\nIn case of issues, you can force install it in by:\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Click on \"Force Install Server\" button\n\n\n\nIf you want to build it manually, you can follow these steps:\n\n1. Open a terminal/PowerShell/Command Prompt\n\n2. Navigate to the Server directory:\n   ```bash\n   cd ABSOLUTE/PATH/TO/mcp-unity/Server~\n   ```\n\n3. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n4. Build the server:\n   ```bash\n   npm run build\n   ```\n\n5. Run the server:\n   ```bash\n   node build/index.js\n   ```\n\n</details>\n   \n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Debugging with MCP Inspector</span></summary>\n\nDebug the server with [@modelcontextprotocol/inspector](https://github.com/modelcontextprotocol/inspector):\n   - Powershell\n   ```powershell\n   npx @modelcontextprotocol/inspector node Server~/build/index.js\n   ```\n   - Command Prompt/Terminal\n   ```cmd\n   npx @modelcontextprotocol/inspector node Server~/build/index.js\n   ```\n\nDon't forget to shutdown the server with `Ctrl + C` before closing the terminal or debugging it with the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Enable Console Logs</span></summary>\n\n1. Enable logging on your terminal or into a log.txt file:\n   - Powershell\n   ```powershell\n   $env:LOGGING = \"true\"\n   $env:LOGGING_FILE = \"true\"\n   ```\n   - Command Prompt/Terminal\n   ```cmd\n   set LOGGING=true\n   set LOGGING_FILE=true\n   ```\n\n</details>\n\n## Frequently Asked Questions\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">What is MCP Unity?</span></summary>\n\nMCP Unity is a powerful bridge that connects your Unity Editor environment to AI assistants LLM tools using the Model Context Protocol (MCP).\n\nIn essence, MCP Unity:\n-   Exposes Unity Editor functionalities (like creating objects, modifying components, running tests, etc.) as \"tools\" and \"resources\" that an AI can understand and use.\n-   Runs a WebSocket server inside Unity and a Node.js server (acting as a WebSocket client to Unity) that implements the MCP. This allows AI assistants to send commands to Unity and receive information back.\n-   Enables you to use natural language prompts with your AI assistant to perform complex tasks within your Unity project, significantly speeding up development workflows.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Why use MCP Unity?</span></summary>\n\nMCP Unity offers several compelling advantages for developers, artists, and project managers:\n\n-   **Accelerated Development:** Automate repetitive tasks, generate boilerplate code, and manage assets using AI prompts. This frees up your time to focus on creative and complex problem-solving.\n-   **Enhanced Productivity:** Interact with Unity Editor features without needing to manually click through menus or write scripts for simple operations. Your AI assistant becomes a direct extension of your capabilities within Unity.\n-   **Improved Accessibility:** Allows users who are less familiar with the deep intricacies of the Unity Editor or C# scripting to still make meaningful contributions and modifications to a project through AI guidance.\n-   **Seamless Integration:** Designed to work with various AI assistants and IDEs that support MCP, providing a consistent way to leverage AI across your development toolkit.\n-   **Extensibility:** The protocol and the toolset can be expanded. You can define new tools and resources to expose more of your project-specific or Unity's functionality to AI.\n-   **Collaborative Potential:** Facilitates a new way of collaborating where AI can assist in tasks traditionally done by team members, or help in onboarding new developers by guiding them through project structures and operations.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">How does MCP Unity compare with the upcoming Unity 6.2 AI features?</span></summary>\n\nUnity 6.2 is set to introduce new built-in AI tools, including the previous Unity Muse (for generative AI capabilities like texture and animation generation) and Unity Sentis (for running neural networks in Unity runtime). As Unity 6.2 is not yet fully released, this comparison is based on publicly available information and anticipated functionalities:\n\n-   **Focus:**\n    -   **MCP Unity:** Primarily focuses on **Editor automation and interaction**. It allows external AI (like LLM-based coding assistants) to *control and query the Unity Editor itself* to manipulate scenes, assets, and project settings. It's about augmenting the *developer's workflow* within the Editor.\n    -   **Unity 6.2 AI:**\n        -   Aims at in-Editor content creation (generating textures, sprites, animations, behaviors, scripts) and AI-powered assistance for common tasks, directly integrated into the Unity Editor interface.\n        -   A fine-tuned model to ask any question about Unity's documentation and API structure, with customized examples more accurate to Unity's environment.\n        -   Adds the functionality to run AI model inference, allowing developers to deploy and run pre-trained neural networks *within your game or application* for features like NPC behavior, image recognition, etc.\n\n-   **Use Cases:**\n    -   **MCP Unity:** \"Create a new 3D object, name it 'Player', add a Rigidbody, and set its mass to 10.\" \"Run all Play Mode tests.\" \"Ask to fix the error on the console log.\" \"Execute the custom menu item 'Prepare build for iOS' and fix any errors that may occur.\"\n    -   **Unity 6.2 AI:** \"Generate a sci-fi texture for this material.\" \"Update all trees position in the scene to be placed inside of terrain zones tagged with 'forest'.\" \"Create a walking animation for this character.\" \"Generate 2D sprites to complete the character.\" \"Ask details about the error on the console log.\"\n\n-   **Complementary, Not Mutually Exclusive:**\n    MCP Unity and Unity's native AI tools can be seen as complementary. You might use MCP Unity with your AI coding assistant to set up a scene or batch-modify assets, and then use Unity AI tools to generate a specific texture, or to create animations, or 2D sprites for one of those assets. MCP Unity provides a flexible, protocol-based way to interact with the Editor, which can be powerful for developers who want to integrate with a broader range of external AI services or build custom automation workflows.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">What MCP hosts and IDEs currently support MCP Unity?</span></summary>\n\nMCP Unity is designed to work with any AI assistant or development environment that can act as an MCP client. The ecosystem is growing, but current known integrations or compatible platforms include:\n-  Windsurf\n-  Cursor\n-  GitHub Copilot\n-  Claude Desktop\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Can I extend MCP Unity with custom tools for my project?</span></summary>\n\nYes, absolutely! One of the significant benefits of the MCP Unity architecture is its extensibility.\n-   **In Unity (C#):** You can create new C# classes that inherit from `McpToolBase` (or a similar base for resources) to expose custom Unity Editor functionality. These tools would then be registered in `McpUnityServer.cs`. For example, you could write a tool to automate a specific asset import pipeline unique to your project.\n-   **In Node.js Server (TypeScript):** You would then define the corresponding TypeScript tool handler in the `Server/src/tools/` directory, including its Zod schema for inputs/outputs, and register it in `Server/src/index.ts`. This Node.js part will forward the request to your new C# tool in Unity.\n\nThis allows you to tailor the AI's capabilities to the specific needs and workflows of your game or application.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Is MCP Unity free to use?</span></summary>\n\nYes, MCP Unity is an open-source project distributed under the MIT License. You are free to use, modify, and distribute it according to the license terms.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Why am I unable to connect to MCP Unity?</span></summary>\n\n- Ensure the WebSocket server is running (check the Server Window in Unity)\n- Send a console log message from MCP client to force a reconnection between MCP client and Unity server\n- Change the port number in the Unity Editor MCP Server window. (Tools > MCP Unity > Server Window)\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Why won't the MCP Unity server start?</span></summary>\n\n- Check the Unity Console for error messages\n- Ensure Node.js is properly installed and accessible in your PATH\n- Verify that all dependencies are installed in the Server directory\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Why do I get a connection failed error when running Play Mode tests?</span></summary>\n\nThe `run_tests` tool returns the following response:\n```\nError:\nConnection failed: Unknown error\n```\n\nThis error occurs because the bridge connection is lost when the domain reloads upon switching to Play Mode.  The workaround is to turn off **Reload Domain** in **Edit > Project Settings > Editor > \"Enter Play Mode Settings\"**.\n\n</details>\n\n## Troubleshooting: WSL2 (Windows 11) networking\n\nWhen running the MCP (Node.js) server inside WSL2 while Unity runs on Windows 11, connecting to `ws://localhost:8090/McpUnity` may fail with `ECONNREFUSED`.\n\nCause: WSL2 and Windows have separate network namespaces ‚Äî `localhost` inside WSL2 does not point to the Windows host. By default, Unity listens on `localhost:8090`.\n\n### Solution 1 ‚Äî Enable WSL2 Mirrored mode networking (preferred)\n- Windows 11: Settings ‚Üí System ‚Üí For developers ‚Üí WSL ‚Üí Enable ‚ÄúMirrored mode networking‚Äù.\n- Or via `.wslconfig` (then run `wsl --shutdown` and reopen WSL):\n\n```ini\n[wsl2]\nnetworkingMode=mirrored\n```\n\nAfter enabling, `localhost` is shared between Windows and WSL2, so the default config (`localhost:8090`) works.\n\n### Solution 2 ‚Äî Point the Node client to the Windows host\nSet in your WSL shell before starting the MCP client:\n\n```bash\n# Use the Windows host IP detected from resolv.conf\nexport UNITY_HOST=$(grep -m1 nameserver /etc/resolv.conf | awk '{print $2}')\n```\n\nWith this, `Server~/src/unity/mcpUnity.ts` will connect to `ws://$UNITY_HOST:8090/McpUnity` instead of `localhost` (it reads `UNITY_HOST`, and may also honor a `Host` in `ProjectSettings/McpUnitySettings.json` if present).\n\n### Solution 3 ‚Äî Allow remote connections from Unity\n- Unity: Tools ‚Üí MCP Unity ‚Üí Server Window ‚Üí enable ‚ÄúAllow Remote Connections‚Äù (Unity binds to `0.0.0.0`).\n- Ensure Windows Firewall allows inbound TCP on your configured port (default 8090).\n- From WSL2, connect to the Windows host IP (see Solution 2) or to `localhost` if mirrored mode is enabled.\n\n> [!NOTE]\n> Default port is `8090`. You can change it in the Unity Server Window (Tools ‚Üí MCP Unity ‚Üí Server Window). The value maps to `McpUnitySettings` and is persisted in `ProjectSettings/McpUnitySettings.json`.\n\n#### Validate connectivity\n\n```bash\nnpm i -g wscat\n# After enabling mirrored networking\nwscat -c ws://localhost:8090/McpUnity\n# Or using the Windows host IP\nwscat -c ws://$UNITY_HOST:8090/McpUnity\n```\n\n## Support & Feedback\n\nIf you have any questions or need support, please open an [issue](https://github.com/CoderGamester/mcp-unity/issues) on this repository or alternative you can reach out on:\n- Linkedin: [![](https://img.shields.io/badge/LinkedIn-0077B5?style=flat&logo=linkedin&logoColor=white 'LinkedIn')](https://www.linkedin.com/in/miguel-tomas/)\n- Discord: gamester7178\n- Email: game.gamester@gmail.com\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request or open an Issue with your request.\n\n**Commit your changes** following the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) format.\n\n## License\n\nThis project is under [MIT License](LICENSE.md)\n\n## Acknowledgements\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [Unity Technologies](https://unity.com)\n- [Node.js](https://nodejs.org)\n- [WebSocket-Sharp](https://github.com/sta/websocket-sharp)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "unity",
        "mcp",
        "editor",
        "mcp unity",
        "unity editor",
        "codergamester mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "CoplayDev--unity-mcp": {
      "owner": "CoplayDev",
      "name": "unity-mcp",
      "url": "https://github.com/CoplayDev/unity-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/CoplayDev.webp",
      "description": "Facilitates communication between Unity and Large Language Models, enabling workflow automation and asset manipulation within the Unity Editor. Integrates LLM capabilities for managing assets, controlling scenes, and editing scripts directly in Unity.",
      "stars": 3360,
      "forks": 450,
      "license": "MIT License",
      "language": "C#",
      "updated_at": "2025-10-04T12:36:20Z",
      "readme_content": "<img width=\"676\" height=\"380\" alt=\"MCP for Unity\" src=\"https://github.com/user-attachments/assets/b712e41d-273c-48b2-9041-82bd17ace267\" />\n\n| [English](README.md) | [ÁÆÄ‰Ωì‰∏≠Êñá](README-zh.md) |\n|----------------------|---------------------------------|\n\n#### Proudly sponsored and maintained by [Coplay](https://www.coplay.dev/?ref=unity-mcp) -- the best AI assistant for Unity. [Read the backstory here.](https://www.coplay.dev/blog/coplay-and-open-source-unity-mcp-join-forces)\n\n[![Discord](https://img.shields.io/badge/discord-join-red.svg?logo=discord&logoColor=white)](https://discord.gg/y4p8KfzrN4)\n[![](https://img.shields.io/badge/Unity-000000?style=flat&logo=unity&logoColor=blue 'Unity')](https://unity.com/releases/editor/archive)\n[![python](https://img.shields.io/badge/Python-3.12-3776AB.svg?style=flat&logo=python&logoColor=white)](https://www.python.org)\n[![](https://badge.mcpx.dev?status=on 'MCP Enabled')](https://modelcontextprotocol.io/introduction)\n![GitHub commit activity](https://img.shields.io/github/commit-activity/w/CoplayDev/unity-mcp)\n![GitHub Issues or Pull Requests](https://img.shields.io/github/issues/CoplayDev/unity-mcp)\n[![](https://img.shields.io/badge/License-MIT-red.svg 'MIT License')](https://opensource.org/licenses/MIT)\n[![](https://img.shields.io/badge/Sponsor-Coplay-red.svg 'Coplay')](https://www.coplay.dev/?ref=unity-mcp)\n\n**Create your Unity apps with LLMs!**\n\nMCP for Unity acts as a bridge, allowing AI assistants (like Claude, Cursor) to interact directly with your Unity Editor via a local **MCP (Model Context Protocol) Client**. Give your LLM tools to manage assets, control scenes, edit scripts, and automate tasks within Unity.\n\n---\n\n### üí¨ Join Our [Discord](https://discord.gg/y4p8KfzrN4)\n\n**Get help, share ideas, and collaborate with other MCP for Unity developers!**  \n\n---\n\n## Key Features üöÄ\n\n*   **üó£Ô∏è Natural Language Control:** Instruct your LLM to perform Unity tasks.\n*   **üõ†Ô∏è Powerful Tools:** Manage assets, scenes, materials, scripts, and editor functions.\n*   **ü§ñ Automation:** Automate repetitive Unity workflows.\n*   **üß© Extensible:** Designed to work with various MCP Clients.\n\n<details open>\n  <summary><strong> Available Tools </strong></summary>\n\n  Your LLM can use functions like:\n\n  *   `read_console`: Gets messages from or clears the console.\n  *   `manage_script`: Manages C# scripts (create, read, update, delete).\n  *   `manage_editor`: Controls and queries the editor's state and settings.\n  *   `manage_scene`: Manages scenes (load, save, create, get hierarchy, etc.).\n  *   `manage_asset`: Performs asset operations (import, create, modify, delete, etc.).\n  *   `manage_shader`: Performs shader CRUD operations (create, read, modify, delete).\n  *   `manage_gameobject`: Manages GameObjects: create, modify, delete, find, and component operations.\n  *   `manage_menu_item`: List Unity Editor menu items; and check for their existence or execute them (e.g., execute \"File/Save Project\").\n  *   `apply_text_edits`: Precise text edits with precondition hashes and atomic multi-edit batches.\n  *   `script_apply_edits`: Structured C# method/class edits (insert/replace/delete) with safer boundaries.\n  *   `validate_script`: Fast validation (basic/standard) to catch syntax/structure issues before/after writes.\n</details>\n\n---\n\n## How It Works \n\nMCP for Unity connects your tools using two components:\n\n1.  **MCP for Unity Bridge:** A Unity package running inside the Editor. (Installed via Package Manager).\n2.  **MCP for Unity Server:** A Python server that runs locally, communicating between the Unity Bridge and your MCP Client. (Installed automatically by the package on first run or via Auto-Setup; manual setup is available as a fallback).\n\n<img width=\"562\" height=\"121\" alt=\"image\" src=\"https://github.com/user-attachments/assets/9abf9c66-70d1-4b82-9587-658e0d45dc3e\" />\n\n---\n\n## Installation ‚öôÔ∏è\n\n### Prerequisites\n\n  *   **Python:** Version 3.12 or newer. [Download Python](https://www.python.org/downloads/)\n  *   **Unity Hub & Editor:** Version 2021.3 LTS or newer. [Download Unity](https://unity.com/download)\n  *   **uv (Python toolchain manager):**\n      ```bash\n      # macOS / Linux\n      curl -LsSf https://astral.sh/uv/install.sh | sh\n\n      # Windows (PowerShell)\n      winget install --id=astral-sh.uv  -e\n\n      # Docs: https://docs.astral.sh/uv/getting-started/installation/\n      ```\n      \n  *   **An MCP Client:** : [Claude Desktop](https://claude.ai/download) | [Claude Code](https://github.com/anthropics/claude-code) | [Cursor](https://www.cursor.com/en/downloads) | [Visual Studio Code Copilot](https://code.visualstudio.com/docs/copilot/overview) | [Windsurf](https://windsurf.com) | Others work with manual config\n\n *    <details> <summary><strong>[Optional] Roslyn for Advanced Script Validation</strong></summary>\n\n        For **Strict** validation level that catches undefined namespaces, types, and methods: \n\n        **Method 1: NuGet for Unity (Recommended)**\n        1. Install [NuGetForUnity](https://github.com/GlitchEnzo/NuGetForUnity)\n        2. Go to `Window > NuGet Package Manager`\n        3. Search for `Microsoft.CodeAnalysis`, select version 4.14.0, and install the package\n        4. Also install package `SQLitePCLRaw.core` and `SQLitePCLRaw.bundle_e_sqlite3`.\n        5. Go to `Player Settings > Scripting Define Symbols`\n        6. Add `USE_ROSLYN`\n        7. Restart Unity\n\n        **Method 2: Manual DLL Installation**\n        1. Download Microsoft.CodeAnalysis.CSharp.dll and dependencies from [NuGet](https://www.nuget.org/packages/Microsoft.CodeAnalysis.CSharp/)\n        2. Place DLLs in `Assets/Plugins/` folder\n        3. Ensure .NET compatibility settings are correct\n        4. Add `USE_ROSLYN` to Scripting Define Symbols\n        5. Restart Unity\n\n        **Note:** Without Roslyn, script validation falls back to basic structural checks. Roslyn enables full C# compiler diagnostics with precise error reporting.</details>\n\n---\n### üåü Step 1: Install the Unity Package\n\n#### To install via Git URL\n\n1.  Open your Unity project.\n2.  Go to `Window > Package Manager`.\n3.  Click `+` -> `Add package from git URL...`.\n4.  Enter:\n    ```\n    https://github.com/CoplayDev/unity-mcp.git?path=/MCPForUnity\n    ```\n5.  Click `Add`.\n6. The MCP server is installed automatically by the package on first run or via Auto-Setup. If that fails, use Manual Configuration (below).\n\n#### To install via OpenUPM\n\n1.  Install the [OpenUPM CLI](https://openupm.com/docs/getting-started-cli.html)\n2.  Open a terminal (PowerShell, Terminal, etc.) and navigate to your Unity project directory\n3.  Run `openupm add com.coplaydev.unity-mcp`\n\n**Note:** If you installed the MCP Server before Coplay's maintenance, you will need to uninstall the old package before re-installing the new one.\n\n### üõ†Ô∏è Step 2: Configure Your MCP Client\nConnect your MCP Client (Claude, Cursor, etc.) to the Python server set up in Step 1 (auto) or via Manual Configuration (below).\n\n<img width=\"648\" height=\"599\" alt=\"MCPForUnity-Readme-Image\" src=\"https://github.com/user-attachments/assets/b4a725da-5c43-4bd6-80d6-ee2e3cca9596\" />\n\n**Option A: Auto-Setup (Recommended for Claude/Cursor/VSC Copilot)**\n\n1.  In Unity, go to `Window > MCP for Unity`.\n2.  Click `Auto-Setup`.\n3.  Look for a green status indicator üü¢ and \"Connected ‚úì\". *(This attempts to modify the MCP Client's config file automatically).* \n\n<details><summary><strong>Client-specific troubleshooting</strong></summary>\n\n  - **VSCode**: uses `Code/User/mcp.json` with top-level `servers.unityMCP` and `\"type\": \"stdio\"`. On Windows, MCP for Unity writes an absolute `uv.exe` (prefers WinGet Links shim) to avoid PATH issues.\n  - **Cursor / Windsurf** [(**help link**)](https://github.com/CoplayDev/unity-mcp/wiki/1.-Fix-Unity-MCP-and-Cursor,-VSCode-&-Windsurf): if `uv` is missing, the MCP for Unity window shows \"uv Not Found\" with a quick [HELP] link and a \"Choose `uv` Install Location\" button.\n  - **Claude Code** [(**help link**)](https://github.com/CoplayDev/unity-mcp/wiki/2.-Fix-Unity-MCP-and-Claude-Code): if `claude` isn't found, the window shows \"Claude Not Found\" with [HELP] and a \"Choose Claude Location\" button. Unregister now updates the UI immediately.</details>\n\n\n**Option B: Manual Configuration**\n\nIf Auto-Setup fails or you use a different client:\n\n1.  **Find your MCP Client's configuration file.** (Check client documentation).\n    *   *Claude Example (macOS):* `~/Library/Application Support/Claude/claude_desktop_config.json`\n    *   *Claude Example (Windows):* `%APPDATA%\\Claude\\claude_desktop_config.json`\n2.  **Edit the file** to add/update the `mcpServers` section, using the *exact* paths from Step 1.\n\n<details>\n<summary><strong>Click for Client-Specific JSON Configuration Snippets...</strong></summary>\n\n  ---\n**Claude Code**\n\nIf you're using Claude Code, you can register the MCP server using the below commands:\nüö®**make sure to run these from your Unity project's home directory**üö®\n\n**macOS:**\n\n```bash\nclaude mcp add UnityMCP -- uv --directory /Users/USERNAME/Library/AppSupport/UnityMCP/UnityMcpServer/src run server.py\n```\n\n**Windows:**\n\n```bash\nclaude mcp add UnityMCP -- \"C:/Users/USERNAME/AppData/Local/Microsoft/WinGet/Links/uv.exe\" --directory \"C:/Users/USERNAME/AppData/Local/UnityMCP/UnityMcpServer/src\" run server.py\n```\n**VSCode (all OS)**\n\n```json\n{\n  \"servers\": {\n    \"unityMCP\": {\n      \"command\": \"uv\",\n      \"args\": [\"--directory\",\"<ABSOLUTE_PATH_TO>/UnityMcpServer/src\",\"run\",\"server.py\"],\n      \"type\": \"stdio\"\n    }\n  }\n}\n```\n\nOn Windows, set `command` to the absolute shim, e.g. `C:\\\\Users\\\\YOU\\\\AppData\\\\Local\\\\Microsoft\\\\WinGet\\\\Links\\\\uv.exe`.\n\n**Windows:**\n\n  ```json\n  {\n    \"mcpServers\": {\n      \"UnityMCP\": {\n        \"command\": \"uv\",\n        \"args\": [\n          \"run\",\n          \"--directory\",\n          \"C:\\\\Users\\\\YOUR_USERNAME\\\\AppData\\\\Local\\\\UnityMCP\\\\UnityMcpServer\\\\src\",\n          \"server.py\"\n        ]\n      }\n      // ... other servers might be here ...\n    }\n  }\n``` \n\n(Remember to replace YOUR_USERNAME and use double backslashes \\\\)\n\n**macOS:**\n\n```json\n{\n  \"mcpServers\": {\n    \"UnityMCP\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/Users/YOUR_USERNAME/Library/AppSupport/UnityMCP/UnityMcpServer/src\",\n        \"server.py\"\n      ]\n    }\n    // ... other servers might be here ...\n  }\n}\n```\n\n(Replace YOUR_USERNAME. Note: AppSupport is a symlink to \"Application Support\" to avoid quoting issues)\n\n**Linux:**\n\n```json\n{\n  \"mcpServers\": {\n    \"UnityMCP\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"/home/YOUR_USERNAME/.local/share/UnityMCP/UnityMcpServer/src\",\n        \"server.py\"\n      ]\n    }\n    // ... other servers might be here ...\n  }\n}\n```\n\n(Replace YOUR_USERNAME)\n\n\n</details>\n\n---\n\n## Usage ‚ñ∂Ô∏è\n\n1. **Open your Unity Project.** The MCP for Unity package should connect automatically. Check status via Window > MCP for Unity.\n    \n2. **Start your MCP Client** (Claude, Cursor, etc.). It should automatically launch the MCP for Unity Server (Python) using the configuration from Installation Step 2.\n    \n3. **Interact!** Unity tools should now be available in your MCP Client.\n    \n    Example Prompt: `Create a 3D player controller`, `Create a tic-tac-toe game in 3D`, `Create a cool shader and apply to a cube`.\n\n---\n\n## Development & Contributing üõ†Ô∏è\n\n### Adding Custom Tools\n\nMCP for Unity uses a Python MCP Server tied with Unity's C# scripts for tools. If you'd like to extend the functionality with your own tools, learn how to do so in **[CUSTOM_TOOLS.md](docs/CUSTOM_TOOLS.md)**.\n\n### Contributing to the Project\n\nIf you're contributing to MCP for Unity or want to test core changes, we have development tools to streamline your workflow:\n\n- **Development Deployment Scripts**: Quickly deploy and test your changes to MCP for Unity Bridge and Python Server\n- **Automatic Backup System**: Safe testing with easy rollback capabilities  \n- **Hot Reload Workflow**: Fast iteration cycle for core development\n\nüìñ **See [README-DEV.md](docs/README-DEV.md)** for complete development setup and workflow documentation.\n\n### Contributing ü§ù\n\nHelp make MCP for Unity better!\n\n1. **Fork** the main repository.\n2. **Create a branch** (`feature/your-idea` or `bugfix/your-fix`).\n3. **Make changes.**\n4. **Commit** (feat: Add cool new feature).\n5. **Push** your branch.\n6. **Open a Pull Request** against the main branch.\n\n---\n\n## üìä Telemetry & Privacy\n\nUnity MCP includes **privacy-focused, anonymous telemetry** to help us improve the product. We collect usage analytics and performance data, but **never** your code, project names, or personal information.\n\n- **üîí Anonymous**: Random UUIDs only, no personal data\n- **üö´ Easy opt-out**: Set `DISABLE_TELEMETRY=true` environment variable\n- **üìñ Transparent**: See [TELEMETRY.md](docs/TELEMETRY.md) for full details\n\nYour privacy matters to us. All telemetry is optional and designed to respect your workflow.\n\n---\n\n## Troubleshooting ‚ùì\n\n<details>  \n<summary><strong>Click to view common issues and fixes...</strong></summary>  \n\n- **Unity Bridge Not Running/Connecting:**\n    - Ensure Unity Editor is open.\n    - Check the status window: Window > MCP for Unity.\n    - Restart Unity.\n- **MCP Client Not Connecting / Server Not Starting:**\n    - **Verify Server Path:** Double-check the --directory path in your MCP Client's JSON config. It must exactly match the installation location:\n      - **Windows:** `%USERPROFILE%\\AppData\\Local\\UnityMCP\\UnityMcpServer\\src`\n      - **macOS:** `~/Library/AppSupport/UnityMCP/UnityMcpServer\\src` \n      - **Linux:** `~/.local/share/UnityMCP/UnityMcpServer\\src`\n    - **Verify uv:** Make sure `uv` is installed and working (`uv --version`).\n    - **Run Manually:** Try running the server directly from the terminal to see errors: \n      ```bash\n      cd /path/to/your/UnityMCP/UnityMcpServer/src\n      uv run server.py\n      ```\n- **Auto-Configure Failed:**\n    - Use the Manual Configuration steps. Auto-configure might lack permissions to write to the MCP client's config file.\n\n</details>  \n\nStill stuck? [Open an Issue](https://github.com/CoplayDev/unity-mcp/issues) or [Join the Discord](https://discord.gg/y4p8KfzrN4)!\n\n---\n\n## License üìú\n\nMIT License. See [LICENSE](LICENSE) file.\n\n---\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=CoplayDev/unity-mcp&type=Date)](https://www.star-history.com/#CoplayDev/unity-mcp&Date)\n\n## Sponsor\n\n<p align=\"center\">\n  <a href=\"https://www.coplay.dev/?ref=unity-mcp\" target=\"_blank\" rel=\"noopener noreferrer\">\n    \n  </a>\n</p>\n\n## Disclaimer\n\nThis project is a free and open-source tool for the Unity Editor, and is not affiliated with Unity Technologies.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "unity",
        "mcp",
        "coplaydev",
        "unity mcp",
        "coplaydev unity",
        "unity editor"
      ],
      "category": "gaming-and-game-development"
    },
    "ErgodicLabs--TwoTruthsAndATwist": {
      "owner": "ErgodicLabs",
      "name": "TwoTruthsAndATwist",
      "url": "https://github.com/ErgodicLabs/TwoTruthsAndATwist",
      "imageUrl": "/freedevtools/mcp/pfp/ErgodicLabs.webp",
      "description": "Engage in a trivia game by identifying the false statement among two truths, facilitated by AI for unique gameplay experiences. The server supports interactive rounds, enhancing the fun of trivia quizzes.",
      "stars": 5,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-13T19:05:07Z",
      "readme_content": "# TwoTruthsAndATwist\n\nTwo Truths and a Twist: The world's first Model Context Protocol (MCP) game\n\n[![smithery badge](https://smithery.ai/badge/@ErgodicLabs/twotruthsandatwist)](https://smithery.ai/server/@ErgodicLabs/twotruthsandatwist)\n\n[Game design document](https://docs.google.com/document/d/1kW88UU5bjszQJgyB_JNkpvbnfaSNcKIP4mRR3R-HL1o/edit?usp=sharing)\n\n## Installation\n\n### Installing via Smithery\n\nTo install twotruthsandatwist for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ErgodicLabs/twotruthsandatwist):\n\n```bash\nnpx -y @smithery/cli install @ErgodicLabs/twotruthsandatwist --client claude\n```\n\n### Requirements\n- Python 3.13 or higher\n- MCP-compatible LLM (like Claude 3)\n\nYou can install the game directly from PyPI:\n\n```bash\npip install ttaat\n```\n\nOr if you prefer using `uv`:\n\n```bash\nuv pip install ttaat\n```\n\n## Usage\n\n### Initialize the Database\nFirst, initialize the game database:\n\n```bash\nttaat db upgrade\n```\n\n### Start the Game Server\nTo start the MCP server:\n\n```bash\nttaat serve\n```\n\nThis will start the Two Truths and a Twist MCP server, which LLMs can connect to for playing the game.\n\n### View Game Statistics\nTo see game statistics:\n\n```bash\nttaat db stats\n```\n\n## Connecting to the Server\n\nTo connect an MCP-compatible LLM to the game server, you'll need to configure the MCP connection. Create a configuration file (e.g., `claude_desktop_config.json`) with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"TwoTruthsAndATwist\": {\n      \"command\": \"ttaat\",\n      \"args\": [\"serve\"]\n    }\n  }\n}\n```\n\nFor Claude Desktop, place this file in:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- Linux: `~/.config/Claude/claude_desktop_config.json`\n\n## Game Mechanics\n\nTwo Truths and a Twist is a trivia game where:\n\n1. The AI creates a round with three statements about a topic - two truths and one \"twist\" (a playful, false statement)\n2. Players try to identify which statement is the twist \n3. The AI reveals the answer with entertaining explanations\n\nThe game leverages the MCP protocol to provide a fun, interactive trivia experience where AI models both generate the content and facilitate gameplay.\n\n## Example Prompts\n\nOnce connected to an MCP-enabled LLM, you can start a game with prompts like:\n\n```\nLet's play Two Truths and a Twist! Create a round about space exploration.\n```\n\n```\nCreate a game round about ancient civilizations.\n```\n\n## For Developers\n\nThis package implements an MCP server that provides custom game tools:\n- `create_round`: Creates a new game round with a question and three statements\n- `submit_guess`: Lets players submit their guess for which statement is the twist\n- `reveal_twist`: Reveals the answer with explanations for each statement\n- `get_round`: Retrieves details for a specific round\n- `get_last_round`: Gets details of the most recent round\n- `get_stats`: Retrieves game statistics\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twotruthsandatwist",
        "gameplay",
        "quizzes",
        "trivia quizzes",
        "engage trivia",
        "unique gameplay"
      ],
      "category": "gaming-and-game-development"
    },
    "GeLi2001--tft-mcp-server": {
      "owner": "GeLi2001",
      "name": "tft-mcp-server",
      "url": "https://github.com/GeLi2001/tft-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/GeLi2001.webp",
      "description": "Access Team Fight Tactics game data, including match history and detailed match information. Integrate with a Riot Games account for seamless retrieval of TFT-related data.",
      "stars": 8,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-06-04T19:50:42Z",
      "readme_content": "# TFT MCP Server\n\nThis is a Model Context Protocol (MCP) server for Team Fight Tactics (TFT) that provides access to TFT game data through various tools.\n\n## Features\n\n- Get match history for a summoner\n- Get detailed information about specific TFT matches\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- npm or yarn\n- Riot Games API Key (for accessing TFT data) - Get it from [Riot Games Developer Portal](https://developer.riotgames.com/)\n  - Note: For development, you can use a temporary API key that expires in 24 hours\n  - For production use, you'll need to apply for a permanent personal API key at [Riot's Application Portal](https://developer.riotgames.com/app-type)\n- Your Game Name, accessed from your Riot game console\n- Your Name Tagline, accessed from your Riot game console, which is usually followed/shown right after your Game Name. For example: `NA1`\n\n## Usage\n\n1. Configure the MCP server in your Claude Desktop config file:\n\n### MacOS\n\nLocation: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n### Windows\n\nLocation: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"tft-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-server-tft\",\n        \"--apiKey\",\n        \"<YOUR_RIOT_API_KEY>\",\n        \"--gameName\",\n        \"<YOUR_GAME_NAME>\",\n        \"--tagLine\",\n        \"<YOUR_TAG_LINE>\"\n      ]\n    }\n  }\n}\n```\n\n2. The server will run on stdio and provide the following tools:\n\n### tft_match_history\n\nGet TFT match history for the current player.\n\nParameters:\n\n- `count` (optional): Number of matches to retrieve. Defaults to 20\n- `start` (optional): Start index for pagination. Defaults to 0\n\n### tft_match_details\n\nGet detailed information about a specific TFT match.\n\nParameters:\n\n- `matchId` (required): The match ID to get details for\n\n## Development\n\nThe project is written in TypeScript and uses the Model Context Protocol SDK. To modify the code:\n\n1. Make changes in the `src` directory\n2. Run `npm run build` to compile\n3. Run `npm start` with the required parameters to test changes\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tft",
        "tactics",
        "games",
        "game data",
        "tft mcp",
        "tactics game"
      ],
      "category": "gaming-and-game-development"
    },
    "Hyeongseob91--mcp-server": {
      "owner": "Hyeongseob91",
      "name": "mcp-server",
      "url": "https://github.com/Hyeongseob91/mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Hyeongseob91.webp",
      "description": "Generates detailed weapon recoil trajectory data for various firearms and visualizes recoil patterns through 2D scatter plots. Supports simple API calls for weapon recoil generation and real-time recoil behavior tuning.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-06-01T16:30:46Z",
      "readme_content": "#  Weapon Recoil Generator ‚Äì build your own recoil MCP\n\n* We released a versatile MCP server that lets FPS game developers generate and visualize weapon recoil patterns via simple API calls.\n* FPS Í≤åÏûÑ Í∞úÎ∞úÏûêÍ∞Ä Í∞ÑÎã®Ìïú API Ìò∏Ï∂úÎßåÏúºÎ°ú Î¨¥Í∏∞ Î∞òÎèô Ìå®ÌÑ¥ÏùÑ ÏÉùÏÑ±ÌïòÍ≥† ÏãúÍ∞ÅÌôîÌï† Ïàò ÏûàÎäî Í∞ïÎ†•Ìïú MCP ÏÑúÎ≤ÑÎ•º Ï∂úÏãúÌñàÏäµÎãàÎã§.\n\n## Learn more and deploy on Smithery: [![smithery badge](https://smithery.ai/badge/@Hyeongseob91/mcp-server)](https://smithery.ai/server/@Hyeongseob91/mcp-server)\n\n# WRG MCP Server\n\n* This MCP server provides two core tools‚ÄîWeapon Recoil Generation and Recoil Visualization‚Äîexposed as HTTP endpoints. Simply deploy locally or in the cloud and start tuning your game‚Äôs recoil behavior in real time.\n* Ïù¥ MCP ÏÑúÎ≤ÑÎäî ‚ÄòÎ¨¥Í∏∞ Î∞òÎèô ÏÉùÏÑ±‚ÄôÍ≥º ‚ÄòÎ∞òÎèô ÏãúÍ∞ÅÌôî‚ÄôÎùºÎäî Îëê Í∞ÄÏßÄ ÌïµÏã¨ ÎèÑÍµ¨Î•º HTTP ÏóîÎìúÌè¨Ïù∏Ìä∏Î°ú Ï†úÍ≥µÌïòÎ©∞, Î°úÏª¨ ÎòêÎäî ÌÅ¥ÎùºÏö∞ÎìúÏóê Î∞∞Ìè¨Ìïú Îí§ Ïã§ÏãúÍ∞ÑÏúºÎ°ú Î∞òÎèô ÌäúÎãùÏùÑ ÏãúÏûëÌï† Ïàò ÏûàÏäµÎãàÎã§.\n\n## Installation\n\n```bash\ngit clone https://github.com/Hyeongseob91/mcp-server.git\ncd mcp-server\npip install -r requirements.txt\n````\n\n## Development\n\nRun the server locally with automatic reload:\nÏûêÎèô Î¶¨Î°úÎìú Í∏∞Îä•ÏùÑ ÏºúÍ≥† Î°úÏª¨ÏóêÏÑú ÏÑúÎ≤ÑÎ•º Ïã§ÌñâÌï©ÎãàÎã§:\n\n```bash\nuvicorn main:app --reload --host 0.0.0.0 --port 8000\n```\n\n## Usage\n\n### Configure in Claude Desktop\n\nAdd to your Claude config:\nClaude ÏÑ§Ï†ï ÌååÏùºÏóê Îã§ÏùåÏùÑ Ï∂îÍ∞ÄÌïòÏÑ∏Ïöî:\n\n* **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n* **Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"wrg\": {\n      \"command\": \"python /path/to/mcp-server/main.py --http\"\n    }\n  }\n}\n```\n\nAfter restarting Claude Desktop, you can call the `/wrg` and `/rvz` endpoints directly.\nClaude DesktopÏùÑ Ïû¨ÏãúÏûëÌïú ÌõÑ /wrgÏôÄ /rvz ÏóîÎìúÌè¨Ïù∏Ìä∏Î•º ÏßÅÏ†ë Ìò∏Ï∂úÌï† Ïàò ÏûàÏäµÎãàÎã§.\n\n## Key Features\n\n* **Weapon Recoil Generation (WRG)**\n\n  * `machinegun_recoil_points(shots: int)`\n\n    * Generates recoil trajectory data for a machine gun based on the number of shots.\n    * Í∏∞Í¥ÄÏ¥ù Î∞úÏÇ¨ ÌöüÏàòÏóê Îî∞Î•∏ Î∞òÎèô Í∂§Ï†Å Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.\n  \n* **Weapon Recoil Generation (WRG)**\n\n  * `pistol_recoil_points(shots: int)`\n\n    * Generates recoil trajectory data for a pistol based on the number of shots.\n    * Í∂åÏ¥ù Î∞úÏÇ¨ ÌöüÏàòÏóê Îî∞Î•∏ Î∞òÎèô Í∂§Ï†Å Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.\n\n* **Weapon Recoil Generation (WRG)**\n\n  * `shotgun_recoil_points(shots: int)`\n\n    * Generates recoil trajectory data for a shotgun based on the number of shots.\n    * ÏÇ∞ÌÉÑÏ¥ù Î∞úÏÇ¨ ÌöüÏàòÏóê Îî∞Î•∏ Î∞òÎèô Í∂§Ï†Å Îç∞Ïù¥ÌÑ∞Î•º ÏÉùÏÑ±Ìï©ÎãàÎã§.\n\n* **Recoil Visualizer (RVZ)**\n\n  * `plot_recoil_pattern(data: Tuple[List[float], List[float]])`\n\n    * Visualizes input recoil coordinate data as a 2D scatter plot.\n    * ÏûÖÎ†•Îêú Î∞òÎèô Ï¢åÌëú Îç∞Ïù¥ÌÑ∞Î•º 2D ÏÇ∞Ï†êÎèÑÎ°ú ÏãúÍ∞ÅÌôîÌï©ÎãàÎã§.\n\n* **MCP Endpoints**\n\n  * `/wrg/*` ‚Äì easy HTTP access to generate recoil data.\n  * `/rvz/*` ‚Äì instant HTTP access to visualize recoil patterns.\n\n* **Remote & Local Deployment**\n\n  * Deploy the same API to both local machines and cloud environments (e.g., Smithery) using FastMCP.\n  * FastMCPÎ•º ÏÇ¨Ïö©ÌïòÏó¨ Î°úÏª¨ Î∞è ÌÅ¥ÎùºÏö∞Îìú(Ïòà: Smithery) ÌôòÍ≤ΩÏóê ÎèôÏùºÌïú APIÎ•º Î∞∞Ìè¨Ìï©ÎãàÎã§.\n\n* **API Key Authentication (Planned)**\n\n  * Upcoming support for API keys to control external access.\n  * Ïô∏Î∂Ä Ï†ëÍ∑º Ï†úÏñ¥Î•º ÏúÑÌïú API Key Ïù∏Ï¶ù Í∏∞Îä•ÏùÑ Í≥ß ÏßÄÏõêÌï† ÏòàÏ†ïÏûÖÎãàÎã§.\n\n## Expected Benefits\n\n1. **Productivity Boost**\n\n   * No need to implement complex recoil algorithms yourself.\n   * Î≥µÏû°Ìïú Î∞òÎèô ÏïåÍ≥†Î¶¨Ï¶òÏùÑ ÏßÅÏ†ë Íµ¨ÌòÑÌï† ÌïÑÏöîÍ∞Ä ÏóÜÏäµÎãàÎã§.\n   * Accelerates data validation and prototyping with built-in visualization tools.\n   * ÎÇ¥Ïû•Îêú ÏãúÍ∞ÅÌôî ÎèÑÍµ¨Î°ú Îç∞Ïù¥ÌÑ∞ Í≤ÄÏ¶ù Î∞è ÌîÑÎ°úÌÜ†ÌÉÄÏûÖ ÏÜçÎèÑÍ∞Ä Ìñ•ÏÉÅÎê©ÎãàÎã§.\n\n2. **Enhanced Collaboration & Reusability**\n\n   * Unified `/wrg` and `/rvz` interfaces make it easy for team members to share and reuse modules.\n   * ÌÜµÌï©Îêú /wrg Î∞è /rvz Ïù∏ÌÑ∞ÌéòÏù¥Ïä§Î°ú ÌåÄ Í∞Ñ Î™®Îìà Í≥µÏú† Î∞è Ïû¨ÏÇ¨Ïö©Ïù¥ Ïö©Ïù¥Ìï©ÎãàÎã§.\n   * Works seamlessly across backend, frontend, AI engineers, and game developers.\n   * Î∞±ÏóîÎìú, ÌîÑÎ°†Ìä∏ÏóîÎìú, AI ÏóîÏßÄÎãàÏñ¥, Í≤åÏûÑ Í∞úÎ∞úÏûê Í∞Ñ ÏõêÌôúÌïòÍ≤å Ïó∞ÎèôÎê©ÎãàÎã§.\n\n3. **Flexible Deployment & Scaling**\n\n   * Test locally, then deploy to the cloud for on-demand scaling.\n   * Î°úÏª¨ ÌÖåÏä§Ìä∏ ÌõÑ ÌÅ¥ÎùºÏö∞ÎìúÏóê Î∞∞Ìè¨ÌïòÏó¨ ÌïÑÏöîÏóê Îî∞Îùº ÏÜêÏâΩÍ≤å ÌôïÏû•Ìï† Ïàò ÏûàÏäµÎãàÎã§.\n   * Integrates with CI/CD pipelines for automated deployment and version management.\n   * CI/CD ÌååÏù¥ÌîÑÎùºÏù∏Í≥º Ïó∞ÎèôÌïòÏó¨ ÏûêÎèô Î∞∞Ìè¨ Î∞è Î≤ÑÏ†Ñ Í¥ÄÎ¶¨Í∞Ä Í∞ÄÎä•Ìï©ÎãàÎã§.\n\n4. **Real-Time Feedback & Tuning**\n\n   * Instantly check recoil patterns via API calls during game balance adjustments.\n   * Í≤åÏûÑ Î∞∏Îü∞Ïä§ Ï°∞Ï†ï Ïãú API Ìò∏Ï∂úÎ°ú Ï¶âÏãú Î∞òÎèô Ìå®ÌÑ¥ÏùÑ ÌôïÏù∏Ìï† Ïàò ÏûàÏäµÎãàÎã§.\n   * Data-driven decision making improves play-test efficiency.\n   * Îç∞Ïù¥ÌÑ∞ Í∏∞Î∞ò ÏùòÏÇ¨Í≤∞Ï†ïÏúºÎ°ú ÌîåÎ†àÏù¥ ÌÖåÏä§Ìä∏ Ìö®Ïú®ÏÑ±Ïù¥ Ìñ•ÏÉÅÎê©ÎãàÎã§.\n\n## Debugging\n\n* Since this server communicates over HTTP, use verbose logging and the built-in reload flag. For deeper inspection, attach a debugger to the Uvicorn process or review the console error outputs.\n* Ïù¥ ÏÑúÎ≤ÑÎäî HTTPÎ°ú ÌÜµÏã†ÌïòÎØÄÎ°ú, ÏûêÏÑ∏Ìïú Î°úÍπÖÍ≥º --reload ÌîåÎûòÍ∑∏Î•º ÏÇ¨Ïö©ÌïòÏÑ∏Ïöî. Î≥¥Îã§ Ïã¨Ï∏µÏ†ÅÏù∏ Í≤ÄÏÇ¨Î•º ÏúÑÌï¥ Uvicorn ÌîÑÎ°úÏÑ∏Ïä§Ïóê ÎîîÎ≤ÑÍ±∞Î•º Ïó∞Í≤∞ÌïòÍ±∞ÎÇò ÏΩòÏÜî Ïò§Î•ò Ï∂úÎ†•ÏùÑ ÌôïÏù∏ÌïòÎ©¥ Îê©ÎãàÎã§.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "recoil",
        "weapon",
        "firearms",
        "visualizes recoil",
        "weapon recoil",
        "recoil patterns"
      ],
      "category": "gaming-and-game-development"
    },
    "IvanMurzak--Unity-MCP": {
      "owner": "IvanMurzak",
      "name": "Unity-MCP",
      "url": "https://github.com/IvanMurzak/Unity-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/IvanMurzak.webp",
      "description": "Bridge Unity's development environment with large language models to enable AI-driven interaction with Unity's tools, facilitating rapid prototyping, automation, and advanced workflows. Connects to multiple LLM clients for enhanced development productivity.",
      "stars": 440,
      "forks": 47,
      "license": "Apache License 2.0",
      "language": "C#",
      "updated_at": "2025-10-04T08:34:16Z",
      "readme_content": "<div align=\"center\" width=\"100%\">\n  <h1>‚ú® AI Game Developer ‚Äî <i>Unity MCP</i></h1>\n\n[![MCP](https://badge.mcpx.dev?type=server 'MCP Server')](https://modelcontextprotocol.io/introduction)\n[![OpenUPM](https://img.shields.io/npm/v/com.ivanmurzak.unity.mcp?label=OpenUPM&registry_uri=https://package.openupm.com&labelColor=333A41 'OpenUPM package')](https://openupm.com/packages/com.ivanmurzak.unity.mcp/)\n[![Docker Image](https://img.shields.io/docker/image-size/ivanmurzakdev/unity-mcp-server/latest?label=Docker%20Image&logo=docker&labelColor=333A41 'Docker Image')](https://hub.docker.com/r/ivanmurzakdev/unity-mcp-server)\n[![Unity Editor](https://img.shields.io/badge/Editor-X?style=flat&logo=unity&labelColor=333A41&color=49BC5C 'Unity Editor supported')](https://unity.com/releases/editor/archive)\n[![Unity Runtime](https://img.shields.io/badge/Runtime-X?style=flat&logo=unity&labelColor=333A41&color=49BC5C 'Unity Runtime supported')](https://unity.com/releases/editor/archive)\n[![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg 'Tests Passed')](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml)</br>\n[![Discord](https://img.shields.io/badge/Discord-Join-7289da?logo=discord&logoColor=white&labelColor=333A41 'Join')](https://discord.gg/cfbdMZX99G)\n[![Stars](https://img.shields.io/github/stars/IvanMurzak/Unity-MCP 'Stars')](https://github.com/IvanMurzak/Unity-MCP/stargazers)\n[![License](https://img.shields.io/github/license/IvanMurzak/Unity-MCP?label=License&labelColor=333A41)](https://github.com/IvanMurzak/Unity-MCP/blob/main/LICENSE)\n[![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://stand-with-ukraine.pp.ua)\n\n  <img src=\"https://github.com/IvanMurzak/Unity-MCP/raw/main/docs/img/level-building.gif\" alt=\"AI work\" title=\"Level building\" width=\"100%\">\n\n  <b>[‰∏≠Êñá](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/README.zh-CN.md) | [Êó•Êú¨Ë™û](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/README.ja.md) | [Espa√±ol](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/README.es.md)</b>\n\n</div>\n\n`Unity MCP` is an AI-powered game development assistant that serves as a bridge between `MCP Client` and `Unity`. Simply type a message in chat and get work done using any advanced LLM model of your choice. Have an issue to fix? Ask the AI to fix it. **[Watch demo videos](https://www.youtube.com/watch?v=kQUOCQ-c0-M&list=PLyueiUu0xU70uzNoOaanGQD2hiyJmqHtK)**.\n\n> **[üí¨ Join our Discord Server](https://discord.gg/cfbdMZX99G)** - Ask questions, showcase your work, and connect with other developers!\n\n## Features\n\n- ‚úîÔ∏è **Natural conversation** - Chat with AI like you would with a human\n- ‚úîÔ∏è **Code assistance** - Ask AI to write code and run tests\n- ‚úîÔ∏è **Debug support** - Ask AI to get logs and fix errors\n- ‚úîÔ∏è **Multiple LLM providers** - Use agents from Anthropic, OpenAI, Microsoft, or any other provider with no limits\n- ‚úîÔ∏è **Flexible deployment** - Works locally (stdio) and remotely (http) by configuration\n- ‚úîÔ∏è **Rich toolset** - Wide range of default [MCP Tools](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/default-mcp-tools.md)\n- ‚úîÔ∏è **Extensible** - Create [custom MCP Tools in your project code](#add-custom-mcp-tool)\n\n### Stability status\n\n| Unity Version | Editmode                                                                                                                                                                               | Playmode                                                                                                                                                                               | Standalone                                                                                                                                                                               |\n| ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 2022.3.61f1   | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2022-3-61f1-editmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2022-3-61f1-playmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2022-3-61f1-standalone)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) |\n| 2023.2.20f1   | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2023-2-20f1-editmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2023-2-20f1-playmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2023-2-20f1-standalone)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) |\n| 6000.2.3f1    | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-6000-2-3f1-editmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml)  | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-6000-2-3f1-playmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml)  | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-6000-2-3f1-standalone)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml)  |\n\n## Content\n\n- [Installation](#installation)\n  - [Step 1: Install `Unity MCP Plugin`](#step-1-install-unity-mcp-plugin)\n    - [Option 1 - Installer](#option-1---installer)\n    - [Option 2 - OpenUPM-CLI](#option-2---openupm-cli)\n  - [Step 2: Install `MCP Client`](#step-2-install-mcp-client)\n  - [Step 3: Configure `MCP Client`](#step-3-configure-mcp-client)\n    - [Automatic configuration](#automatic-configuration)\n    - [Manual configuration](#manual-configuration)\n- [Use AI](#use-ai)\n  - [Advanced Features for LLM](#advanced-features-for-llm)\n    - [Core Capabilities](#core-capabilities)\n    - [Reflection-Powered Features](#reflection-powered-features)\n- [Customize MCP](#customize-mcp)\n  - [Add custom `MCP Tool`](#add-custom-mcp-tool)\n  - [Add custom runtime (in-game) `MCP Tool`](#add-custom-runtime-in-game-mcp-tool)\n  - [Add custom `MCP Prompt`](#add-custom-mcp-prompt)\n- [Unity `MCP Server` setup](#unity-mcp-server-setup)\n  - [Variables](#variables)\n  - [Docker üì¶](#docker-)\n    - [`HTTP` Transport](#http-transport)\n    - [`STDIO` Transport](#stdio-transport)\n    - [Custom `port`](#custom-port)\n  - [Binary executable](#binary-executable)\n- [How it works](#how-it-works)\n  - [What is `MCP`](#what-is-mcp)\n  - [What is `MCP Client`](#what-is-mcp-client)\n  - [What is `MCP Server`](#what-is-mcp-server)\n  - [What is `MCP Tool`](#what-is-mcp-tool)\n    - [When to use `MCP Tool`](#when-to-use-mcp-tool)\n  - [What is `MCP Resource`](#what-is-mcp-resource)\n    - [When to use `MCP Resource`](#when-to-use-mcp-resource)\n  - [What is `MCP Prompt`](#what-is-mcp-prompt)\n    - [When to use `MCP Prompt`](#when-to-use-mcp-prompt)\n- [Contribution üíôüíõ](#contribution-)\n\n# Installation\n\n## Step 1: Install `Unity MCP Plugin`\n\n<details>\n  <summary><b>‚ö†Ô∏è Requirements (click)</b></summary>\n\n> [!IMPORTANT]\n> **Project path cannot contain spaces**\n>\n> - ‚úÖ `C:/MyProjects/Project`\n> - ‚ùå `C:/My Projects/Project`\n\n</details>\n\n### Option 1 - Installer\n\n- **[‚¨áÔ∏è Download Installer](https://github.com/IvanMurzak/Unity-MCP/releases/download/0.18.1/AI-Game-Dev-Installer.unitypackage)**\n- **üìÇ Import installer into Unity project**\n  > - You can double-click on the file - Unity will open it automatically\n  > - OR: Open Unity Editor first, then click on `Assets/Import Package/Custom Package`, and choose the file\n\n### Option 2 - OpenUPM-CLI\n\n- [‚¨áÔ∏è Install OpenUPM-CLI](https://github.com/openupm/openupm-cli#installation)\n- üìü Open the command line in your Unity project folder\n\n```bash\nopenupm add com.ivanmurzak.unity.mcp\n```\n\n## Step 2: Install `MCP Client`\n\nChoose a single `MCP Client` you prefer - you don't need to install all of them. This will be your main chat window to communicate with the LLM.\n\n- [Claude Code](https://github.com/anthropics/claude-code) (highly recommended)\n- [Claude Desktop](https://claude.ai/download)\n- [GitHub Copilot in VS Code](https://code.visualstudio.com/docs/copilot/overview)\n- [Cursor](https://www.cursor.com/)\n- [Windsurf](https://windsurf.com)\n- Any other supported\n\n> The MCP protocol is quite universal, which is why you may use any MCP client you prefer - it will work as smoothly as any other. The only important requirement is that the MCP client must support dynamic MCP Tool updates.\n\n## Step 3: Configure `MCP Client`\n\n### Automatic configuration\n\n- Open Unity project\n- Open `Window/AI Game Developer (Unity-MCP)`\n- Click `Configure` at your MCP client\n\n![Unity_AI](https://github.com/IvanMurzak/Unity-MCP/raw/main/docs/img/ai-connector-window.gif)\n\n> If your MCP client is not in the list, use the raw JSON shown in the window to inject it into your MCP client. Read the instructions for your specific MCP client on how to do this.\n\n### Manual configuration\n\nIf automatic configuration doesn't work for you for any reason, use the JSON from the `AI Game Developer (Unity-MCP)` window to configure any `MCP Client` manually.\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>Windows</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/win-x64/unity-mcp-server.exe\" client-transport=stdio\n  ```\n\n</details>\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>MacOS Apple-Silicon</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/osx-arm64/unity-mcp-server\" client-transport=stdio\n  ```\n\n</details>\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>MacOS Apple-Intel</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/osx-x64/unity-mcp-server\" client-transport=stdio\n  ```\n\n</details>\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>Linux x64</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/linux-x64/unity-mcp-server\" client-transport=stdio\n  ```\n\n</details>\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>Linux arm64</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/linux-arm64/unity-mcp-server\" client-transport=stdio\n  ```\n\n</details>\n\n---\n\n# Use AI\n\nCommunicate with the AI (LLM) in your `MCP Client`. Ask it to do anything you want. The better you describe your task or idea, the better it will perform the job.\n\nSome `MCP Clients` allow you to choose different LLM models. Pay attention to this feature, as some models may work much better than others.\n\n**Example commands:**\n\n```text\nExplain my scene hierarchy\n```\n\n```text\nCreate 3 cubes in a circle with radius 2\n```\n\n```text\nCreate metallic golden material and attach it to a sphere gameObject\n```\n\n> Make sure `Agent` mode is turned on in your MCP client\n\n## Advanced Features for LLM\n\nUnity MCP provides advanced tools that enable the LLM to work faster and more effectively, avoiding mistakes and self-correcting when errors occur. Everything is designed to achieve your goals efficiently.\n\n### Core Capabilities\n\n- ‚úîÔ∏è **Agent-ready tools** - Find anything you need in 1-2 steps\n- ‚úîÔ∏è **Instant compilation** - C# code compilation & execution using `Roslyn` for faster iteration\n- ‚úîÔ∏è **Full asset access** - Read/write access to assets and C# scripts\n- ‚úîÔ∏è **Intelligent feedback** - Well-described positive and negative feedback for proper issue understanding\n\n### Reflection-Powered Features\n\n- ‚úîÔ∏è **Object references** - Provide references to existing objects for instant C# code\n- ‚úîÔ∏è **Project data access** - Get full access to entire project data in a readable format\n- ‚úîÔ∏è **Granular modifications** - Populate & modify any piece of data in the project\n- ‚úîÔ∏è **Method discovery** - Find any method in the entire codebase, including compiled DLL files\n- ‚úîÔ∏è **Method execution** - Call any method in the entire codebase\n- ‚úîÔ∏è **Advanced parameters** - Provide any property for method calls, even references to existing objects in memory\n- ‚úîÔ∏è **Live Unity API** - Unity API instantly available - even when Unity changes, you get the fresh API\n- ‚úîÔ∏è **Self-documenting** - Access human-readable descriptions of any `class`, `method`, `field`, or `property` via `Description` attributes\n\n---\n\n# Customize MCP\n\n**[Unity MCP](https://github.com/IvanMurzak/Unity-MCP)** supports custom `MCP Tool`, `MCP Resource`, and `MCP Prompt` development by project owners. The MCP server takes data from the `Unity MCP Plugin` and exposes it to a client. Anyone in the MCP communication chain will receive information about new MCP features, which the LLM may decide to use at some point.\n\n## Add custom `MCP Tool`\n\nTo add a custom `MCP Tool`, you need:\n\n1. A class with the `McpPluginToolType` attribute\n2. A method in the class with the `McpPluginTool` attribute\n3. *Optional:* Add a `Description` attribute to each method argument to help the LLM understand it\n4. *Optional:* Use `string? optional = null` properties with `?` and default values to mark them as `optional` for the LLM\n\n> Note that the line `MainThread.Instance.Run(() =>` allows you to run code on the main thread, which is required for interacting with Unity's API. If you don't need this and running the tool in a background thread is acceptable, avoid using the main thread for efficiency purposes.\n\n```csharp\n[McpPluginToolType]\npublic class Tool_GameObject\n{\n    [McpPluginTool\n    (\n        \"MyCustomTask\",\n        Title = \"Create a new GameObject\"\n    )]\n    [Description(\"Explain here to LLM what is this, when it should be called.\")]\n    public string CustomTask\n    (\n        [Description(\"Explain to LLM what is this.\")]\n        string inputData\n    )\n    {\n        // do anything in background thread\n\n        return MainThread.Instance.Run(() =>\n        {\n            // do something in main thread if needed\n\n            return $\"[Success] Operation completed.\";\n        });\n    }\n}\n```\n\n## Add custom runtime (in-game) `MCP Tool`\n\n> ‚ö†Ô∏è Not yet supported. The work is in progress\n\n## Add custom `MCP Prompt`\n\n`MCP Prompt` allows you to inject custom prompts into the conversation with the LLM. It supports two sender roles: User and Assistant. This is a quick way to instruct the LLM to perform specific tasks. You can generate prompts using custom data, providing lists or any other relevant information.\n\n```csharp\n[McpPluginPromptType]\npublic static class Prompt_ScriptingCode\n{\n    [McpPluginPrompt(Name = \"add-event-system\", Role = Role.User)]\n    [Description(\"Implement UnityEvent-based communication system between GameObjects.\")]\n    public string AddEventSystem()\n    {\n        return \"Create event system using UnityEvents, UnityActions, or custom event delegates for decoupled communication between game systems and components.\";\n    }\n}\n```\n\n---\n\n# Unity `MCP Server` setup\n\n**[Unity MCP](https://github.com/IvanMurzak/Unity-MCP)** Server supports many different launch options and Docker deployment. Both transport protocols are supported: `http` and `stdio`. If you need to customize or deploy Unity MCP Server to a cloud, this section is for you. [Read more...](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/mcp-server.md)\n\n## Variables\n\nDoesn't matter what launch option you choose, all of them support custom configuration using both Environment Variables and Command Line Arguments. It would work with default values, if you just need to launch it, don't waste your time for the variables. Just make sure Unity Plugin also has default values, especially the `--port`, they should be equal.\n\n| Environment Variable        | Command Line Args     | Description                                                                 |\n|-----------------------------|-----------------------|-----------------------------------------------------------------------------|\n| `UNITY_MCP_PORT`            | `--port`              | **Client** -> **Server** <- **Plugin** connection port (default: 8080)      |\n| `UNITY_MCP_PLUGIN_TIMEOUT`  | `--plugin-timeout`    | **Plugin** -> **Server** connection timeout (ms) (default: 10000)           |\n| `UNITY_MCP_CLIENT_TRANSPORT`| `--client-transport`  | **Client** -> **Server** transport type: `stdio` or `http` (default: `http`) |\n\n> Command line args support also the option with a single `-` prefix (`-port`) and an option without prefix at all (`port`).\n\n## Docker üì¶\n\n[![Docker Image](https://img.shields.io/docker/image-size/ivanmurzakdev/unity-mcp-server/latest?label=Docker%20Image&logo=docker&labelColor=333A41 'Docker Image')](https://hub.docker.com/r/ivanmurzakdev/unity-mcp-server)\n\nMake sure Docker is installed. And please make sure Docker Desktop is launched if you are at Windows operation system.\n\n### `HTTP` Transport\n\n```bash\ndocker run -p 8080:8080 ivanmurzakdev/unity-mcp-server\n```\n\n<details>\n  <summary><code>MCP Client</code> config:</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"Unity-MCP\": {\n      \"url\": \"http://localhost:8080\"\n    }\n  }\n}\n```\n\n> Replace `url` with your real endpoint if it is hosted in cloud\n\n</details>\n\n### `STDIO` Transport\n\nFor using this variant, `MCP Client` should launch the `MCP Server` in the docker. It is achievable through the modified `MCP Client` configuration.\n\n```bash\ndocker run -t -e UNITY_MCP_CLIENT_TRANSPORT=stdio -p 8080:8080 ivanmurzakdev/unity-mcp-server\n```\n\n<details>\n  <summary><code>MCP Client</code> config:</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"Unity-MCP\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-t\",\n        \"-e\",\n        \"UNITY_MCP_CLIENT_TRANSPORT=stdio\",\n        \"-p\",\n        \"8080:8080\",\n        \"ivanmurzakdev/unity-mcp-server\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n### Custom `port`\n\n```bash\ndocker run -e UNITY_MCP_PORT=123 -p 123:123 ivanmurzakdev/unity-mcp-server\n```\n\n<details>\n  <summary><code>MCP Client</code> config:</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"Unity-MCP\": {\n      \"url\": \"http://localhost:123\"\n    }\n  }\n}\n```\n\n> Replace `url` with your real endpoint if it is hosted in cloud\n</details>\n\n## Binary executable\n\nYou may launch Unity `MCP Server` directly from a binary file. You would need to have a binary compiled specifically for your CPU architecture. Check [GitHub Release Page](https://github.com/IvanMurzak/Unity-MCP/releases), it contains pre-compiled binaries for all CPU architectures.\n\n```bash\n./unity-mcp-server --port 8080 --plugin-timeout 10000 --client-transport stdio\n```\n\n<details>\n  <summary><code>MCP Client</code> config:</summary>\n\n> Replace `<project>` with your Unity project path.\n\n```json\n{\n  \"mcpServers\": {\n    \"Unity-MCP\": {\n      \"command\": \"<project>/Library/mcp-server/win-x64/unity-mcp-server.exe\",\n      \"args\": [\n        \"--port=8080\",\n        \"--plugin-timeout=10000\",\n        \"--client-transport=stdio\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n---\n\n# How it works\n\n**[Unity MCP](https://github.com/IvanMurzak/Unity-MCP)** serves as a bridge between LLMs and Unity. It exposes and explains Unity's tools to the LLM, which then understands the interface and utilizes the tools according to user requests.\n\nConnect **[Unity MCP](https://github.com/IvanMurzak/Unity-MCP)** to LLM clients such as [Claude](https://claude.ai/download) or [Cursor](https://www.cursor.com/) using the integrated `AI Connector` window. Custom clients are also supported.\n\nThe system is highly extensible - you can define custom `MCP Tools`, `MCP Resource` or `MCP Prompt` directly in your Unity project codebase, exposing new capabilities to AI or automation clients. This makes Unity MCP a flexible foundation for building advanced workflows, rapid prototyping, and integrating AI-driven features into your development process.\n\n## What is `MCP`\n\nMCP - Model Context Protocol. In a few words, that is `USB Type-C` for AI, specifically for LLM (Large Language Model). It teaches LLM how to use external features. Such as Unity Engine in this case, or even your custom C# method in your code. [Official documentation](https://modelcontextprotocol.io/).\n\n## What is `MCP Client`\n\nIt is an application with a chat window. It may have smart agents to operate better, it may have embedded advanced MCP Tools. In general well done MCP Client is 50% of the AI success of executing a task. That is why it is very important to choose the best one for usage.\n\n## What is `MCP Server`\n\nIt is a bridge between `MCP Client` and \"something else\", in this particular case it is Unity Engine. This project includes `MCP Server`.\n\n## What is `MCP Tool`\n\n`MCP Tool` is a function or method that the LLM can call to interact with Unity. These tools act as the bridge between natural language requests and actual Unity operations. When you ask the AI to \"create a cube\" or \"change material color,\" it uses MCP Tools to execute these actions.\n\n**Key characteristics:**\n\n- **Executable functions** that perform specific operations\n- **Typed parameters** with descriptions to help the LLM understand what data to provide\n- **Return values** that give feedback about the operation's success or failure\n- **Thread-aware** - can run on main thread for Unity API calls or background thread for heavy processing\n\n### When to use `MCP Tool`\n\n- **Automate repetitive tasks** - Create tools for common operations you do frequently\n- **Complex operations** - Bundle multiple Unity API calls into a single, easy-to-use tool\n- **Project-specific workflows** - Build tools that understand your project's specific structure and conventions\n- **Error-prone tasks** - Create tools that include validation and error handling\n- **Custom game logic** - Expose your game's systems to AI for dynamic content creation\n\n**Examples:**\n\n- Creating and configuring GameObjects with specific components\n- Batch processing assets (textures, materials, prefabs)\n- Setting up lighting and post-processing effects\n- Generating level geometry or placing objects procedurally\n- Configuring physics settings or collision layers\n\n## What is `MCP Resource`\n\n`MCP Resource` provides read-only access to data within your Unity project. Unlike MCP Tools that perform actions, Resources allow the LLM to inspect and understand your project's current state, assets, and configuration. Think of them as \"sensors\" that give the AI context about your project.\n\n**Key characteristics:**\n\n- **Read-only access** to project data and Unity objects\n- **Structured information** presented in a format the LLM can understand\n- **Real-time data** that reflects the current state of your project\n- **Contextual awareness** helping the AI make informed decisions\n\n### When to use `MCP Resource`\n\n- **Project analysis** - Let AI understand your project structure, assets, and organization\n- **Debugging assistance** - Provide current state information for troubleshooting\n- **Intelligent suggestions** - Give AI context to make better recommendations\n- **Documentation generation** - Automatically create documentation based on project state\n- **Asset management** - Help AI understand what assets are available and their properties\n\n**Examples:**\n\n- Exposing scene hierarchy and GameObject properties\n- Listing available materials, textures, and their settings\n- Showing script dependencies and component relationships\n- Displaying current lighting setup and render pipeline configuration\n- Providing information about audio sources, animations, and particle systems\n\n## What is `MCP Prompt`\n\n`MCP Prompt` allows you to inject pre-defined prompts into the conversation with the LLM. These are smart templates that can provide context, instructions, or knowledge to guide the AI's behavior. Prompts can be static text or dynamically generated based on your project's current state.\n\n**Key characteristics:**\n\n- **Contextual guidance** that influences how the AI responds\n- **Role-based** - can simulate different personas (User requests or Assistant knowledge)\n- **Dynamic content** - can include real-time project data\n- **Reusable templates** for common scenarios and workflows\n\n### When to use `MCP Prompt`\n\n- **Provide domain knowledge** - Share best practices and coding standards specific to your project\n- **Set coding conventions** - Establish naming conventions, architecture patterns, and code style\n- **Give context about project structure** - Explain how your project is organized and why\n- **Share workflow instructions** - Provide step-by-step procedures for common tasks\n- **Inject specialized knowledge** - Add information about specific Unity features, third-party assets, or custom systems\n\n**Examples:**\n\n- \"Always use PascalCase for public methods and camelCase for private fields\"\n- \"This project uses a custom event system located in Scripts/Events/\"\n- \"When creating UI elements, always add them to the Canvas in Scene/UI/MainCanvas\"\n- \"Performance is critical - prefer object pooling for frequently instantiated objects\"\n- \"This project follows SOLID principles - explain any architecture decisions\"\n\n---\n\n# Contribution üíôüíõ\n\nContributions are highly appreciated. Bring your ideas and let's make game development simpler than ever before! Do you have an idea for a new `MCP Tool` or feature, or did you spot a bug and know how to fix it?\n\n1. üëâ [Fork the project](https://github.com/IvanMurzak/Unity-MCP/fork)\n2. Clone the fork and open the `./Unity-MCP-Plugin` folder in Unity\n3. Implement new things in the project, commit, push it to GitHub\n4. Create Pull Request targeting original [Unity-MCP](https://github.com/IvanMurzak/Unity-MCP) repository, `main` branch.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "unity",
        "prototyping",
        "bridge",
        "unity development",
        "bridge unity",
        "unity mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "JayArrowz--mcp-osrs": {
      "owner": "JayArrowz",
      "name": "mcp-osrs",
      "url": "https://github.com/JayArrowz/mcp-osrs",
      "imageUrl": "/freedevtools/mcp/pfp/JayArrowz.webp",
      "description": "Seamless access to Old School RuneScape Wiki content and game data through a standardized protocol. Enables searching wiki pages, retrieving detailed page information, and querying various game data files to enhance applications with OSRS context.",
      "stars": 11,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-27T20:23:42Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/jayarrowz-mcp-osrs-badge.png)](https://mseep.ai/app/jayarrowz-mcp-osrs)\n\n# OSRS MCP Server [![smithery badge](https://smithery.ai/badge/@jayarrowz/mcp-osrs)](https://smithery.ai/server/@jayarrowz/mcp-osrs)\n\nMCP Server for interacting with the Old School RuneScape (OSRS) Wiki API and data files. This server provides tools to search the OSRS Wiki and access game data definitions through the Model Context Protocol.\n\n<a href=\"https://glama.ai/mcp/servers/@JayArrowz/mcp-osrs\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@JayArrowz/mcp-osrs/badge\" alt=\"OSRS Server MCP server\" />\n</a>\n\n![image](https://github.com/user-attachments/assets/da9d1f48-513d-4a1b-a65b-56f8a012fa83)\n\n![image](https://github.com/user-attachments/assets/9e7e4e07-6e47-44f9-ab0c-b3835418bd37)\n\n![image](https://github.com/user-attachments/assets/628f35e1-2e85-42f4-8693-4ef4f16591d4)\n\n\n## Tools\n\nThis server implements the following tools:\n\n### OSRS Wiki Methods\n1. `osrs_wiki_search` - Search the OSRS Wiki for pages matching a search term\n2. `osrs_wiki_get_page_info` - Get information about specific pages on the OSRS Wiki\n3. `osrs_wiki_parse_page` - Get the parsed HTML content of a specific OSRS Wiki page\n\n### Game Data Search Methods\n4. `search_varptypes` - Search the varptypes.txt file for player variables (varps) that store player state and progress\n5. `search_varbittypes` - Search the varbittypes.txt file for variable bits (varbits) that store individual bits from varps\n6. `search_iftypes` - Search the iftypes.txt file for interface definitions used in the game's UI\n7. `search_invtypes` - Search the invtypes.txt file for inventory type definitions in the game\n8. `search_loctypes` - Search the loctypes.txt file for location/object type definitions in the game world\n9. `search_npctypes` - Search the npctypes.txt file for NPC (non-player character) definitions\n10. `search_objtypes` - Search the objtypes.txt file for object/item definitions in the game\n11. `search_rowtypes` - Search the rowtypes.txt file for row definitions used in various interfaces\n12. `search_seqtypes` - Search the seqtypes.txt file for animation sequence definitions\n13. `search_soundtypes` - Search the soundtypes.txt file for sound effect definitions in the game\n14. `search_spottypes` - Search the spottypes.txt file for spot animation (graphical effect) definitions\n15. `search_spritetypes` - Search the spritetypes.txt file for sprite image definitions used in the interface\n16. `search_tabletypes` - Search the tabletypes.txt file for interface tab definitions\n\n### Generic Data File Methods\n17. `search_data_file` - Search any file in the data directory for matching entries\n18. `get_file_details` - Get details about a file in the data directory\n19. `list_data_files` - List available data files in the data directory\n\n## Installation\n\n### Installing via Smithery\nTo install mcp-osrs for Claude Desktop automatically via [Smithery](https://smithery.ai/embed/@jayarrowz/mcp-osrs):\n\n```bash\nnpx @smithery/cli@latest install @jayarrowz/mcp-osrs --client claude\n```\n\n### Prerequisites\n- Node.js (v16 or later)\n- npm or yarn\n\n### Installing the package\n```bash\n# Clone the repository\ngit clone https://github.com/jayarrowz/mcp-osrs.git\ncd mcp-osrs\n\n# Install dependencies\nnpm install\n\n# Build the package\nnpm run build\n```\n\n## Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n### Using npx\n```json\n{\n  \"mcpServers\": {\n    \"osrs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@jayarrowz/mcp-osrs\"]\n    }\n  }\n}\n```\n\n### Direct Node.js\n```json\n{\n  \"mcpServers\": {\n    \"osrs\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-osrs/dist/index.js\"]\n    }\n  }\n}\n```\n\nReplace `/path/to/mcp-osrs` with the actual path to your repository.\n\n## Examples\n\n### Search the OSRS Wiki\n```javascript\n// Search for information about the Abyssal whip\nconst result = await callTool(\"osrs_wiki_search\", { \n  search: \"Abyssal whip\" \n});\n```\n\n### Get Page Information\n```javascript\n// Get information about a specific wiki page\nconst pageInfo = await callTool(\"osrs_wiki_get_page_info\", { \n  titles: \"Abyssal_whip\" \n});\n```\n\n### Search Game Data\n```javascript\n// Search for items in the object definitions\nconst items = await callTool(\"search_objtypes\", { \n  query: \"dragon\",\n  page: 1,\n  pageSize: 10\n});\n```\n\n### List Available Data Files\n```javascript\n// Get a list of all data files\nconst files = await callTool(\"list_data_files\", {});\n```\n\n## Development\n```bash\n# Install dependencies\nnpm install\n\n# Start the server in development mode\nnpm start\n\n# Build the server\nnpm run build\n```\n\n## License\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "runescape",
        "osrs",
        "wiki",
        "runescape wiki",
        "school runescape",
        "mcp osrs"
      ],
      "category": "gaming-and-game-development"
    },
    "Krekun--vrchat-mcp-osc": {
      "owner": "Krekun",
      "name": "vrchat-mcp-osc",
      "url": "https://github.com/Krekun/vrchat-mcp-osc",
      "imageUrl": "/freedevtools/mcp/pfp/Krekun.webp",
      "description": "Enables interaction with VRChat avatars and environments through a high-level API, utilizing OSC for communication. Facilitates control of avatar parameters, movement, messaging, and responses to VR events for enhanced virtual reality experiences.",
      "stars": 14,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T18:11:38Z",
      "readme_content": "# VRChat MCP OSC\n\n**VRChat MCP OSC** provides a bridge between AI assistants and VRChat using the Model Context Protocol (MCP), enabling AI-driven avatar control and interactions in virtual reality environments.  \n\n\n## Overview\n\nBy leveraging OSC (Open Sound Control) to communicate with VRChat, **VRChat MCP OSC** allows AI assistants such as Claude to:\n- Control avatar parameters and expressions\n- Send messages in VRChat\n- Respond to various VR events  \nAnd more‚Äîall through the high-level API provided by the Model Context Protocol.\n\n\n## Key Features\n\n- **Avatar Control**: Manipulate avatar parameters and expressions\n- **Movement Control**: Direct avatar movement and orientation\n- **Communication**: Send messages through VRChat's chatbox\n- **Menu Access**: Toggle VRChat menu and interface elements\n- **Avatar Information**: Query avatar properties and parameters\n- **Seamless VRChat Integration**: Automatic detection of avatar configurations\n\n## System Requirements\n\n- Node.js 18 or higher\n- VRChat with OSC enabled\n- Claude Desktop (with MCP support)\n\n## Using with Claude Desktop\n\n### Clone and npm link\n\n```bash\ngit clone https://github.com/Krekun/vrchat-mcp-osc\ncd vrchat-mcp-osc\nnpm link\n```\n\n### Configure Claude Desktop\n\nConfigure Claude Desktop by editing the `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"vrchat-mcp-osc\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"vrchat-mcp-osc\"\n      ]\n    }\n  }\n}\n```\n\n### Command Line Options\n\nThe server supports various command-line arguments for customization:\n\n```bash\n# Claude Desktop configuration\n{\n  \"mcpServers\": {\n    \"vrchat-mcp-osc\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"vrchat-mcp-osc\",\n        \"--websocket-port\", \"8765\",\n        \"--websocket-host\", \"localhost\",\n        \"--osc-send-port\", \"9000\",\n        \"--osc-send-ip\", \"127.0.0.1\",\n        \"--osc-receive-port\", \"9001\",\n        \"--osc-receive-ip\", \"127.0.0.1\",\n        \"--debug\"             \n      ]\n    }\n  }\n}\n```\n\n### Available Options\n\n| Option | Description | Default | Notes |\n|--------|-------------|---------|-------|\n| `--websocket-port <port>` | WebSocket port | 8765 | For WebSocket communication |\n| `--websocket-host <host>` | WebSocket host | localhost | For WebSocket communication |\n| `--osc-send-port <port>` | OSC send port | 9000 | Port for sending to VRChat |\n| `--osc-send-ip <ip>` | OSC send IP | 127.0.0.1 | Address for sending to VRChat |\n| `--osc-receive-port <port>` | OSC receive port | 9001 | Port for receiving from VRChat |\n| `--osc-receive-ip <ip>` | OSC receive IP | 127.0.0.1 | Address for receiving from VRChat |\n| `--debug` | Enable debug logging | false | Output detailed logs |\n| `--no-relay` | Disable relay server | false | When not using relay server |\n\n## Available MCP Tools\n\nVRChat MCP OSC exposes the following MCP tools to AI assistants:\n\n| Tool Name | Description |\n|-----------|-------------|\n| `get_avatar_name` | Retrieves the current avatar's name |\n| `get_avatar_parameters` | Lists available avatar parameters |\n| `set_avatar_parameter` | Sets a specific avatar parameter |\n| `set_emote_parameter` | Triggers avatar emotes |\n| `move_avatar` | Moves the avatar in a specific direction |\n| `look_direction` | Controls avatar's view direction |\n| `jump` | Makes the avatar jump |\n| `menu` | Toggles the VRChat menu |\n| `voice` | Toggles voice features |\n| `send_message` | Sends a message to the VRChat chatbox |\n\n\n## Troubleshooting\n\n### Common Issues\n\n1. **VRChat not responding to commands**\n   - Ensure OSC is enabled in VRChat settings\n   - Check that the OSC ports match between VRChat and MCP configuration\n   - Restart VRChat and Claude Desktop\n\n2. **MCP server not starting**\n   - Ensure Node.js 18+ is installed\n   - Check command line arguments for errors\n   - Try running with `--debug` flag for more detailed logs\n   - Use `npx vrchat-mcp-osc -- --debug` if direct arguments don't work\n\n3. **NPX execution issues**\n   - If arguments aren't being recognized, try using the double dash format: `npx vrchat-mcp-osc -- --debug`\n   - On Windows, try running in a command prompt with administrator privileges\n   - If you're having trouble with global installation, try the local npm link approach\n\n## Project Structure\n\n```\nvrchat-mcp-osc/\n‚îú‚îÄ‚îÄ packages/\n‚îÇ   ‚îú‚îÄ‚îÄ mcp-server/    # MCP server implementation (main entry point)\n‚îÇ   ‚îú‚îÄ‚îÄ relay-server/  # WebSocket to OSC relay\n‚îÇ   ‚îú‚îÄ‚îÄ types/         # Shared TypeScript interfaces\n‚îÇ   ‚îî‚îÄ‚îÄ utils/         # Common utilities\n‚îî‚îÄ‚îÄ pnpm-workspace.yaml  # Workspace configuration\n```\n\n## Development\n\n### Build From Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/Krekun/vrchat-mcp-osc\ncd vrchat-mcp-osc\n\n# Install dependencies\npnpm install\n\n# Build all packages\npnpm -r build\n\n# Development mode\npnpm -r dev\n```\n\n## License\nVRChat MCP OSC is dual-licensed as follows:\n\nFor Non-Commercial Use:\nYou may use, modify, and redistribute the software under the terms of the MIT License.\n(See the MIT License file for details.)\n\nFor Commercial Use:\nCommercial use of this software requires a separate commercial license.\n\n\nBy using this software under the MIT License for non-commercial purposes, you agree to the terms of that license. Commercial users must obtain a commercial license as described above.\n\n## Acknowledgments\n\n- VRChat team for the OSC integration\n- Model Context Protocol for the standardized AI interface\n- Anthropic for Claude's MCP implementation\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vrchat",
        "vr",
        "virtual",
        "krekun vrchat",
        "interaction vrchat",
        "vrchat avatars"
      ],
      "category": "gaming-and-game-development"
    },
    "LifeforGame--DelphiDX12": {
      "owner": "LifeforGame",
      "name": "DelphiDX12",
      "url": "https://github.com/LifeforGame/DelphiDX12",
      "imageUrl": "/freedevtools/mcp/pfp/LifeforGame.webp",
      "description": "Integrates DirectX 12 capabilities into Delphi and Free Pascal applications, providing a comprehensive set of headers for enhanced compatibility and functionality. Facilitates smoother development with straightforward Pascal syntax for utilizing DirectX 12 features.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2021-04-26T03:19:32Z",
      "readme_content": "# DelphiDX12\nDirectX 12 Headers for Delphi and FPC\nbased on SDK 10.0.17763.0 SDK Oct 2018\n\nThe files are available under Apache License, Version 2.0.\nYou may obtain a copy of the License at\n       http://www.apache.org/licenses/LICENSE-2.0\n\nSo this license should be okay also for commerical projects.\n\t   \nThis header translation is  NOT based on the JSB headers\n\n  The HelperFiles are translated to be used with Delphi/FPC. Therefore there are\n  more functions then in the original header file since Pascal syntax doesn't\n  support default values of a function as a result of another function.\n\n  But the use should be straight forward. Looks to the examples if any\n  questions.\n\n  WHEN you should use this headers: if you plan a new software release and\n     you are not based on much older source code.\n  WHEN you should NOT use this heades: when you have existing source code\n    based on the JSB headers and don't want to change a LOT.\n\n  You MUST use this if you work with FPC. The JSB Headers are buggy for FPC\n  cause interfaces not based on IUnknown are solved with abstract classes\n  in Delphi, which will not work on FPC. FPC has the CORBA Interface\n  compiler switch.\n  Also FPC supports BITPACKED RECORDS.\n\n  The inline functions of the interfaces are\n  translated to FPC in some headers (still some work todo).\n  FPC supports now helper classes for interface.\n  In Delphi you miss this feature. Maybe someday...\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "delphidx12",
        "directx",
        "delphi",
        "lifeforgame delphidx12",
        "directx 12",
        "utilizing directx"
      ],
      "category": "gaming-and-game-development"
    },
    "MubarakHAlketbi--game-asset-mcp": {
      "owner": "MubarakHAlketbi",
      "name": "game-asset-mcp",
      "url": "https://github.com/MubarakHAlketbi/game-asset-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/MubarakHAlketbi.webp",
      "description": "Generates 2D and 3D game assets from text prompts using AI models. Integrates with Hugging Face Spaces for asset generation, facilitating rapid prototyping for game developers.",
      "stars": 85,
      "forks": 20,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-21T17:45:58Z",
      "readme_content": "# Game Asset Generator using MCP and Hugging Face Spaces\n\nThis project is an innovative tool that simplifies game asset creation by leveraging AI-powered generation. Whether you're a game developer seeking rapid prototypes or an AI enthusiast exploring generative models, this tool enables you to create **2D** and **3D game assets** from text prompts effortlessly. It integrates AI models from **Hugging Face Spaces**‚Äîpowered by `\"gokaygokay/Flux-2D-Game-Assets-LoRA\"`, `\"gokaygokay/Flux-Game-Assets-LoRA-v2\"`, and one of three 3D model generation spaces (`InstantMesh`, `Hunyuan3D-2`, or `Hunyuan3D-2mini-Turbo`, which you must duplicate to your account)‚Äîand uses the **Model Context Protocol (MCP)** for seamless interaction with AI assistants like **Claude Desktop**.\n\n<p align=\"center\">\n  <a href=\"https://pay.ziina.com/MubarakHAlketbi\">\n    <img src=\"https://img.shields.io/badge/Support_Me-Donate-9626ff?style=for-the-badge&logo=https%3A%2F%2Fimgur.com%2FvwC39JY\" alt=\"Support Me - Donate\">\n  </a>\n  <a href=\"https://github.com/RooVetGit/Roo-Code\">\n    <img src=\"https://img.shields.io/badge/Built_With-Roo_Code-412894?style=for-the-badge\" alt=\"Built With - Roo Code\">\n  </a>\n  <br>\n  <a href=\"https://glama.ai/mcp/servers/@MubarakHAlketbi/game-asset-mcp\">\n    <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@MubarakHAlketbi/game-asset-mcp/badge\" />\n  </a>\n</p>\n\n---\n\n## Table of Contents\n\n1. [Project Overview](#project-overview)\n2. [Features](#features)\n3. [How It Works](#how-it-works)\n4. [Prerequisites](#prerequisites)\n5. [Installation](#installation)\n6. [Usage](#usage)\n7. [Configuration](#configuration)\n8. [File Management](#file-management)\n9. [MCP Integration](#mcp-integration)\n10. [Troubleshooting](#troubleshooting)\n11. [Advanced](#advanced)\n12. [Contributing](#contributing)\n13. [License](#license)\n\n---\n\n## Project Overview\n\nThe **Game Asset Generator** (version **0.3.0**) harnesses AI to streamline the creation of game assets. It supports generating **2D assets** (e.g., pixel art sprites) and **3D assets** (e.g., OBJ and GLB models) from text prompts, integrating with **Hugging Face Spaces** and the **Model Context Protocol (MCP)**. This release introduces support for multiple 3D model generation spaces‚Äî`InstantMesh`, `Hunyuan3D-2`, and `Hunyuan3D-2mini-Turbo`‚Äîoffering flexibility and enhanced performance. Built with **Node.js** and the **MCP TypeScript SDK (v1.7.0)**, it provides a robust, cross-platform solution for asset generation.\n\n---\n\n## Features\n\n- **2D Asset Generation**: Create pixel art, sprites, or other 2D assets from text prompts (e.g., \"pixel art sword\").\n- **3D Asset Generation**: Generate 3D models (OBJ and GLB formats) from text descriptions, with automatic image-to-model conversion.\n- **Multiple 3D Model Spaces**: Supports `InstantMesh`, `Hunyuan3D-2`, and `Hunyuan3D-2mini-Turbo` for varied 3D generation workflows.\n- **MCP Integration**: Seamlessly interact with the tool via MCP-compatible clients like **Claude Desktop**.\n- **File Management**: Automatically saves and organizes assets in a local `assets` directory with resource URIs (e.g., `asset://{type}/{id}`).\n- **Robust Input Validation**: Uses **Zod** for secure and reliable input processing.\n- **Multi-Client Support**: Handles multiple simultaneous connections via **SSE transport**.\n- **Secure Remote Access**: Optional **HTTPS** support for safe remote communication.\n- **Extensible Backend**: Modular design for easy integration of new models or features.\n- **Cross-Platform**: Compatible with Windows, macOS, and Linux using **Node.js**.\n- **Configurable 3D Generation**: Customize parameters like inference steps, guidance scale, and turbo mode via environment variables.\n\n---\n\n## How It Works\n\nThe Game Asset Generator transforms text prompts into game-ready assets through an automated pipeline:\n\n1. **User Input**: Submit a text prompt (e.g., \"pixel art sword\" or \"isometric 3D castle\").\n2. **MCP Server**: Routes the prompt to the appropriate tool (`generate_2d_asset` or `generate_3d_asset`).\n3. **AI Model Interaction**:\n   - **2D Assets**: Utilizes the **Hugging Face Inference API** with `\"gokaygokay/Flux-2D-Game-Assets-LoRA\"` (50 steps).\n   - **3D Assets**:\n     - Generates an initial image using `\"gokaygokay/Flux-Game-Assets-LoRA-v2\"` (30 steps).\n     - Converts the image to a 3D model using one of:\n       - **InstantMesh**: Multi-step process (`/preprocess`, `/generate_mvs`, `/make3d`).\n       - **Hunyuan3D-2**: Single-step process (`/generation_all`).\n       - **Hunyuan3D-2mini-Turbo**: Single-step process (`/generation_all`) with configurable turbo modes.\n4. **File Output**: Saves assets (PNG for 2D, OBJ/GLB for 3D) in the `assets` directory.\n5. **Response**: Returns resource URIs (e.g., `asset://3d_model/filename.glb`) for immediate use.\n\n### Workflow Diagram\n```\nUser Prompt ‚Üí MCP Server ‚Üí AI Model(s) ‚Üí Local File ‚Üí Resource URI Response\n```\n\nPrompts are automatically enhanced with \"high detailed, complete object, not cut off, white solid background\" for optimal quality.\n\n---\n\n## Prerequisites\n\n- **Node.js**: Version 16+ (includes `npm`).\n- **Git**: For cloning the repository.\n- **Internet Access**: Required for Hugging Face API connectivity.\n- **Hugging Face Account**: Needed for API access; obtain your token from [huggingface.co/settings/tokens](https://huggingface.co/settings/tokens).\n- **NPM Packages**:\n  - `@gradio/client`: Interacts with Hugging Face Spaces.\n  - `@huggingface/inference`: For direct model inference.\n  - `@modelcontextprotocol/sdk`: Implements the MCP server.\n  - `dotenv`: Loads environment variables.\n  - `express`: Enables SSE transport.\n  - `zod`: Ensures input validation.\n  - `sharp`: Handles image processing.\n- **Optional**: **Claude Desktop** (or another MCP client) for enhanced interaction.\n\n---\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/yourusername/game-asset-mcp.git\n   cd game-asset-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Configure Environment**:\n   - Copy the example `.env` file:\n     ```bash\n     cp .env.example .env\n     ```\n   - Edit `.env` with your **Hugging Face API token** and duplicated **MODEL_SPACE**. See [Configuration](#configuration) for details.\n\n4. **Run the Server**:\n   - **Local (stdio transport)**:\n     ```bash\n     npm start\n     ```\n   - **Custom Working Directory**:\n     ```bash\n     node src/index.js /path/to/directory\n     ```\n   - **Remote (SSE transport)**:\n     ```bash\n     node src/index.js --sse\n     ```\n   - **Remote with HTTPS**:\n     ```bash\n     node src/index.js --sse --https\n     ```\n     Requires `ssl/key.pem` and `ssl/cert.pem` (see [ssl/README.md](ssl/README.md)).\n\n> **Note**: Uses ES modules (`\"type\": \"module\"` in `package.json`). Ensure Node.js 16+ is installed (`node --version`).\n\n---\n\n## Usage\n\nInteract with the server via an **MCP client** (e.g., Claude Desktop) or programmatically:\n\n- **Generate a 2D Asset**:\n  - **Command**: `generate_2d_asset prompt:\"pixel art sword\"`\n  - **Output**: Saves a PNG file (e.g., `2d_asset_generate_2d_asset_1698765432.png`) and returns its URI.\n\n- **Generate a 3D Asset**:\n  - **Command**: `generate_3d_asset prompt:\"isometric 3D castle\"`\n  - **Output**: Saves OBJ/GLB files and intermediate images, returning their URIs. Provides an operation ID for long-running tasks.\n\n### Prompt Examples\n- **Natural Interaction**:\n  - `generate_2d_sprite prompt:\"pixel art sword\"`\n  - `generate_3d_model prompt:\"isometric 3D castle\"`\n\n### With Claude Desktop\nAfter configuring (see [Configuration](#configuration)), type commands directly in the interface.\n\n---\n\n## Configuration\n\nCustomize the server via the `.env` file:\n\n### Required Settings\n- **HF_TOKEN**: Hugging Face API token.\n  ```plaintext\n  HF_TOKEN=your_hf_token\n  ```\n- **MODEL_SPACE**: Your duplicated 3D model space (e.g., `your-username/InstantMesh`).\n  - Duplicate one of:\n    - [InstantMesh](https://huggingface.co/spaces/tencentARC/InstantMesh)\n    - [Hunyuan3D-2](https://huggingface.co/spaces/tencent/Hunyuan3D-2)\n    - [Hunyuan3D-2mini-Turbo](https://huggingface.co/spaces/tencent/Hunyuan3D-2mini-Turbo)\n  ```plaintext\n  MODEL_SPACE=your-username/InstantMesh\n  ```\n\n### Optional 3D Model Settings\n| Variable                  | Description                                   | Valid Range/Default       |\n|---------------------------|-----------------------------------------------|---------------------------|\n| `MODEL_3D_STEPS`         | Inference steps                              | Varies by space (see below) |\n| `MODEL_3D_GUIDANCE_SCALE`| How closely the model follows the prompt     | 0.0-100.0 (default: 5.0-5.5) |\n| `MODEL_3D_OCTREE_RESOLUTION` | Detail level of the 3D model            | Varies by space (see below) |\n| `MODEL_3D_SEED`          | Randomness control                          | 0-10000000 (default: varies) |\n| `MODEL_3D_REMOVE_BACKGROUND` | Remove image background                | `true`/`false` (default: `true`) |\n| `MODEL_3D_TURBO_MODE`    | Generation mode (Hunyuan3D-2mini-Turbo only) | `Turbo`, `Fast`, `Standard` (default: `Turbo`) |\n| `MODEL_SPACE_TYPE`       | Override space type detection               | `instantmesh`, `hunyuan3d`, `hunyuan3d_mini_turbo` |\n\n#### Space-Specific Defaults\n- **InstantMesh**:\n  - Steps: 30-75 (default: 75)\n  - Seed: Default 42\n- **Hunyuan3D-2**:\n  - Steps: 20-50 (default: 20)\n  - Guidance Scale: Default 5.5\n  - Octree Resolution: `256`, `384`, `512` (default: `256`)\n  - Seed: Default 1234\n- **Hunyuan3D-2mini-Turbo**:\n  - Steps: 1-100 (default: 5 for `Turbo`, 10 for `Fast`, 20 for `Standard`)\n  - Guidance Scale: Default 5.0\n  - Octree Resolution: 16-512 (default: 256)\n  - Seed: Default 1234\n\n### Transport Settings\n- **PORT**: SSE transport port (default: 3000).\n  ```plaintext\n  PORT=3000\n  ```\n\n### Claude Desktop Setup\nEdit the config file:\n- **MacOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n```json\n{\n  \"mcpServers\": {\n    \"game-asset-generator\": {\n      \"command\": \"node\",\n      \"args\": [\"/full/path/to/game-asset-mcp/src/index.js\"]\n    }\n  }\n}\n```\nRestart Claude Desktop after editing.\n\n---\n\n## File Management\n\n- **Storage Location**: Assets are saved in `./assets` within the working directory.\n- **Naming Convention**: Files use a prefix, tool name, timestamp, and unique ID (e.g., `2d_asset_generate_2d_asset_1698765432_abcd1234.png`).\n- **Customization**: Set a custom directory:\n  ```bash\n  node src/index.js /path/to/custom/directory\n  ```\n- **Resource Access**: Use MCP URIs (e.g., `asset://2d_asset/filename.png`) to list or read assets.\n\n---\n\n## MCP Integration\n\nThe **Model Context Protocol (MCP)** enables this tool to serve AI clients securely:\n- **Tools**: `generate_2d_asset`, `generate_3d_asset`.\n- **Resources**: Managed via `asset://` URIs.\n- **Prompts**: `generate_2d_sprite`, `generate_3d_model`.\n- **Compatibility**: Works with **Claude Desktop** and other MCP clients.\n\n---\n\n## Troubleshooting\n\n- **API Errors**: Check network connectivity or rate limits; review `./logs/server.log`.\n- **Authentication Issues**: Verify `HF_TOKEN` and `MODEL_SPACE` in `.env`.\n- **ES Modules Error**: Ensure Node.js 16+ (`node --version`).\n- **Logs**: Inspect detailed logs:\n  ```bash\n  tail -f ./logs/server.log\n  ```\n\n---\n\n## Advanced\n\n### API Endpoints and Integration\n- **2D Asset Generation**: Uses `\"gokaygokay/Flux-2D-Game-Assets-LoRA\"` (50 steps).\n- **3D Asset Image Generation**: Uses `\"gokaygokay/Flux-Game-Assets-LoRA-v2\"` (30 steps).\n- **3D Model Conversion**:\n  - **InstantMesh**: Multi-step (`/check_input_image`, `/preprocess`, `/generate_mvs`, `/make3d`).\n  - **Hunyuan3D-2**: Single-step (`/generation_all`).\n  - **Hunyuan3D-2mini-Turbo**: Single-step (`/generation_all`) with turbo modes.\n\n### Versioning\n- **Current Version**: 0.3.0 (Added Hunyuan3D-2mini-Turbo support).\n- **MCP SDK Version**: 1.7.0.\n- **Format**: MAJOR.MINOR.PATCH (SemVer).\n\n### Backend Architecture\n- **Core File**: `src/index.js`.\n- **Dependencies**: See `package.json`.\n- **Security**: Zod validation, path traversal prevention, HTTPS support, rate limiting.\n- **Performance**: Async processing, retry with backoff, GPU quota handling.\n\n---\n\n## Contributing\n\nWe welcome contributions! To participate:\n1. **Fork the Repository**: Create your copy on GitHub.\n2. **Make Changes**: Add features, fix bugs, or enhance docs.\n3. **Submit a Pull Request**: Detail your changes.\n4. **Open Issues**: Report bugs or suggest improvements.\n\nFollow standard coding conventions and include tests where applicable.\n\n---\n\n## License\n\nLicensed under the **MIT License**. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "prototyping",
        "gaming",
        "game assets",
        "game asset",
        "game development"
      ],
      "category": "gaming-and-game-development"
    },
    "Saunved--mcp-server-clash-of-clans": {
      "owner": "Saunved",
      "name": "mcp-server-clash-of-clans",
      "url": "https://github.com/Saunved/mcp-server-clash-of-clans",
      "imageUrl": "/freedevtools/mcp/pfp/Saunved.webp",
      "description": "Obtain and analyze player and clan statistics from Clash of Clans to gain insights into war performance and strategies for gameplay improvement.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-25T22:20:18Z",
      "readme_content": "[![MseeP Badge](https://mseep.net/pr/saunved-mcp-server-clash-of-clans-badge.jpg)](https://mseep.ai/app/saunved-mcp-server-clash-of-clans)\n\nClash of Clans MCP server!\n\nFor usage with Claude Desktop, you can update the `claude_desktop_config.json` file to register this server.\n\n```json\n{\n    \"mcpServers\": {\n        \"Clash of Clans\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"mcp-server-clash-of-clans\"\n            ],\n            \"env\": {\n                \"CLASH_API_KEY\": \"<your-api-key>\"\n            }\n        }\n    }\n}\n```\n\n# Available tools\n\n## get-player\nObtains information for a given player tag and summarizes it.\n\n## get-clan\nObtains information for a given clan and summarizes it.\n\n## clan-war-league-info\nObtains information about the most recent CWL rounds.\n\n## clan-war-league-war\nObtains information about a specific CWL war based on the round.\n\n## get-current-war\nGets the current war info for the clan (provided it is public).\n\n## get-war-log\nGets a clan's war log (provided it is public).\n\n## get-capital-raids\nGets information regarding the clan's capital raids.\n\n# Available prompts\n\n## analyze-current-war\nAnalyzes the current war. Provides an overview with the stats, top-performers, and potential strategy changes.\n\n## analyze-war-log\nAnalyzes a clan's war log and summarizes its overall performance.\n\n## analyze-cwl-war\nAnalyzes a given CWL war and summarizes the clan's overall performance in that war.\n\n## analyze-player\nAnalyzes a player's statistics and suggests scope for improvement.\n\n## analyze-clan\nAnalyzes a given clan and assesses it based on the members, their TH levels, war record, etc.\n\n## analyze-capital-raids\nAnalyzes a clan's last few capital raids (3 by default).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "clans",
        "clan",
        "clash",
        "clash clans",
        "clan statistics",
        "player clan"
      ],
      "category": "gaming-and-game-development"
    },
    "Simon-Kansara--ableton-live-mcp-server": {
      "owner": "Simon-Kansara",
      "name": "ableton-live-mcp-server",
      "url": "https://github.com/Simon-Kansara/ableton-live-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Simon-Kansara.webp",
      "description": "Facilitates communication between AI models and Ableton Live through OSC messages, enabling music production automation and workflow enhancement. Maps OSC addresses to available tools for MCP clients.",
      "stars": 328,
      "forks": 45,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T16:09:04Z",
      "readme_content": "# Ableton Live MCP Server\n\n## üìå Overview\n\nThe **Ableton Live MCP Server** is a server implementing the\n[Model Context Protocol (MCP)](https://modelcontextprotocol.io) to facilitate\ncommunication between LLMs and **Ableton Live**. It uses **OSC (Open Sound\nControl)** to send and receive messages to/from Ableton Live. It is based on\n[AbletonOSC](https://github.com/ideoforms/AbletonOSC) implementation and\nexhaustively maps available OSC adresses to\n[**tools**](https://modelcontextprotocol.io/docs/concepts/tools) accessible to\nMCP clients.\n\n[![Control Ableton Live with LLMs](https://img.youtube.com/vi/12MzsQ3V7cs/hqdefault.jpg)](https://www.youtube.com/watch?v=12MzsQ3V7cs)\n\nThis project consists of two main components:\n\n- `mcp_ableton_server.py`: The MCP server handling the communication between\n  clients and the OSC daemon.\n- `osc_daemon.py`: The OSC daemon responsible for relaying commands to Ableton\n  Live and processing responses.\n\n## ‚ú® Features\n\n- Provides an MCP-compatible API for controlling Ableton Live from MCP clients.\n- Uses **python-osc** for sending and receiving OSC messages.\n- Based on the OSC implementation from\n  [AbletonOSC](https://github.com/ideoforms/AbletonOSC).\n- Implements request-response handling for Ableton Live commands.\n\n## ‚ö° Installation\n\n### Requirements\n\n- Python 3.8+\n- `python-osc` (for OSC communication)\n- `fastmcp` (for MCP support)\n- `uv` (recommended Python package installer)\n- [AbletonOSC](https://github.com/ideoforms/AbletonOSC) as a control surface\n\n### Installation Steps\n\n1. Install `uv` (https://docs.astral.sh/uv/getting-started/installation):\n\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n2. Clone the repository:\n\n   ```bash\n   git clone https://github.com/your-username/mcp_ableton_server.git\n   cd mcp_ableton_server\n   ```\n\n3. Install the project and its dependencies:\n\n   ```bash\n   uv sync\n   ```\n\n4. Install AbletonOSC Follow the instructions at\n   [AbletonOSC](https://github.com/ideoforms/AbletonOSC)\n\n## üöÄ Usage\n\n### Running the OSC Daemon\n\nThe OSC daemon will handle OSC communication between the MCP server and Ableton\nLive:\n\n```bash\nuv run osc_daemon.py\n```\n\nThis will:\n\n- Listen for MCP client connections on port **65432**.\n- Forward messages to Ableton Live via OSC on port **11000**.\n- Receive OSC responses from Ableton on port **11001**.\n\n### Example Usage\n\nIn Claude desktop, ask Claude:\n\n- _Prepare a set to record a rock band_\n- _Set the input routing channel of all tracks that have \"voice\" in their name\n  to Ext. In 2_\n\n## ‚öôÔ∏è Configuration\n\nBy default, the server and daemon run on **localhost (127.0.0.1)** with the\nfollowing ports:\n\n- **MCP Server Socket:** 65432\n- **Ableton Live OSC Port (Send):** 11000\n- **Ableton Live OSC Port (Receive):** 11001\n\nTo modify these, edit the `AbletonOSCDaemon` class in `osc_daemon.py`:\n\n```python\nself.socket_host = '127.0.0.1'\nself.socket_port = 65432\nself.ableton_host = '127.0.0.1'\nself.ableton_port = 11000\nself.receive_port = 11001\n```\n\n### Claude Desktop Configuration\n\nTo use this server with Claude Desktop, you need to configure it in your Claude\nDesktop settings. The configuration file location varies by operating system:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration to your `mcpServers` section:\n\n```json\n{\n  \"mcpServers\": {\n    \"Ableton Live Controller\": {\n      \"command\": \"/path/to/your/project/.venv/bin/python\",\n      \"args\": [\"/path/to/your/project/mcp_ableton_server.py\"]\n    }\n  }\n```\n\nThis configuration ensures that:\n\n- The server runs with all dependencies properly managed\n- The project remains portable and reproducible\n\n## Contributing\n\nFeel free to submit issues, feature requests, or pull requests to improve this\nproject.\n\n## License\n\nThis project is licensed under the **MIT License**. See the `LICENSE` file for\ndetails.\n\n## Acknowledgments\n\n- [Model Context Protocol (MCP)](https://modelcontextprotocol.io)\n- [python-osc](https://github.com/attwad/python-osc) for OSC handling\n- Daniel John Jones for OSC implementation with\n  [AbletonOSC](https://github.com/ideoforms/AbletonOSC)\n- Ableton Third Party Remote Scripts\n- Julien Bayle @[Structure Void](https://structure-void.com/) for endless\n  inspirations and resources.\n\n## TODO\n\n- Explore _resources_ and _prompts_ primitives opportunities.\n- Build a standalone Ableton Live MCP client.\n\n---\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ableton",
        "osc",
        "mcp",
        "ableton live",
        "live mcp",
        "mcp server"
      ],
      "category": "gaming-and-game-development"
    },
    "StevenFengLi--haiguitangmcp": {
      "owner": "StevenFengLi",
      "name": "haiguitangmcp",
      "url": "https://github.com/StevenFengLi/haiguitangmcp",
      "imageUrl": "/freedevtools/mcp/pfp/StevenFengLi.webp",
      "description": "Host interactive lateral thinking puzzle games by utilizing a large language model as the game master. Retrieve puzzle lists, access detailed puzzles, and implement game rules for solo or group gameplay with guided hints.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-21T12:03:30Z",
      "readme_content": "## ‰ªãÁªç\r\n\r\nÊú¨È°πÁõÆÊó®Âú®ËÆ©Â§ßËØ≠Ë®ÄÊ®°ÂûãÊâÆÊºîÊµ∑ÈæüÊ±§Ê∏∏Êàè‰∏ªÊåÅ‰∫∫Ôºå‰Ωø‰Ω†Áã¨Ëá™‰∏Ä‰∫∫‰πüËÉΩ‰∫´ÂèóÊµ∑ÈæüÊ±§Ê∏∏ÊàèÁöÑÂø´‰πê„ÄÇ\r\n\r\n## Âø´ÈÄüÂºÄÂßã\r\n\r\nÂú®‰ΩøÁî®Êú¨È°πÁõÆÂâçÔºå‰Ω†ÈúÄË¶ÅÁ°Æ‰øù‰Ω†ÁöÑÁîµËÑë‰∏äÂ∑≤ÁªèÂÆâË£Ö‰∫ÜPythonÂíåuv„ÄÇ\r\n\r\n\r\n‰Ω†È¶ñÂÖàÈúÄË¶ÅÂÖãÈöÜÊï¥‰∏™È°πÁõÆÔºåÁÑ∂ÂêéËøêË°åuv syncÂÆâË£Ö‰æùËµñ„ÄÇ\r\n\r\n```bash\r\ngit clone https://github.com/wangyafu/haiguitangmcp/\r\ncd haiguitangmcp\r\nuv sync\r\n```\r\n\r\nÂÖ∂Ê¨°Ôºå‰Ω†ÈúÄË¶Å‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂ÔºàÂÅáËÆæ‰Ω†Â∞ÜÈ°πÁõÆÂÆâË£ÖÂú®‰∫ÜEÁõòÔºâ\r\n\r\n### Âú®vscode‰∏≠ÈÖçÁΩÆ\r\n\r\n```json\r\n\"mcp\":{\r\n    \"servers\":{\r\n        \"haiguitang-mcp\": {\r\n                \"type\": \"stdio\",\r\n                \"command\": \"uv\",\r\n                \"args\": [\r\n                    \"--directory\",\r\n                    \"E:\\\\haiguitangmcp\\\\haiguitang_mcp\",\r\n                    \"run\",\r\n                    \"server.py\"\r\n                ]\r\n            }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### Âú®cherry studio‰∏≠ËøõË°åÈÖçÁΩÆ\r\n\r\n```json\r\n\"mcpServers\": {\r\n    \r\n    \"haiguitang\": {\r\n      \"isActive\": true,\r\n      \"name\": \"Êµ∑ÈæüÊ±§MCPÊúçÂä°Âô®\",\r\n      \"description\": \"ÂíåÁî®Êà∑Áé©Êµ∑ÈæüÊ±§\",\r\n      \"registryUrl\": \"\",\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\",\r\n        \"E:/haiguitangmcp/haiguitang_mcp\",\r\n        \"run\",\r\n        \"server.py\"\r\n      ]\r\n    },\r\n   \r\n}\r\n\r\n```\r\n\r\n‰∏äËø∞ÁöÑ\"E:/haiguitangmcp/haiguitang_mcp\"Ë°®Á§∫server.pyÊâÄÂú®ÁöÑË∑ØÂæÑ„ÄÇ\r\n\r\nÂú®ÂÖ∂‰ªñmcp client‰∏≠ÁöÑÈÖçÁΩÆÊñπÊ≥ïÁ±ª‰ºº„ÄÇ\r\n\r\n## mcpÁõ∏ÂÖ≥ÂÜÖÂÆπ\r\n\r\nÊú¨È°πÁõÆÊèê‰æõ‰∫Ü‰∏â‰∏™Â∑•ÂÖ∑:\r\n\r\n- `get_prompt`: Ëé∑ÂèñÊµ∑ÈæüÊ±§Ê∏∏ÊàèÁöÑÂÆåÊï¥Áé©Ê≥ïËØ¥Êòé\r\n- `get_puzzle`: Ëé∑Âèñ‰∏Ä‰∏™ÁâπÂÆöË∞úÈ¢òÁöÑÂÆåÊï¥ÂÜÖÂÆπÔºåÈúÄË¶ÅÊèê‰æõË∞úÈ¢òÊ†áÈ¢ò‰Ωú‰∏∫ÂèÇÊï∞\r\n- `list_puzzles_tool`: ÂàóÂá∫ÊâÄÊúâÂèØÁî®ÁöÑË∞úÈ¢òÂàóË°®\r\n\r\nÂêåÊó∂ÔºåÊú¨È°πÁõÆËøòÊèê‰æõ‰∫Ü‰ª•‰∏ãËµÑÊ∫ê:\r\n\r\n- `puzzles://{puzzle_title}`: Ëé∑ÂèñÁâπÂÆöË∞úÈ¢òÁöÑ‰ø°ÊÅØ\r\n\r\n‰ª•Âèä‰∏Ä‰∏™ÊèêÁ§∫Ê®°Êùø:\r\n\r\n- `game_rules`: Êèê‰æõÊµ∑ÈæüÊ±§Ê∏∏ÊàèËßÑÂàôÁöÑÊèêÁ§∫Ê®°Êùø\r\n\r\n## Ê∏∏ÊàèËßÑÂàô\r\n\r\nÂú®Êú¨Ê∏∏Êàè‰∏≠Ôºö\r\n\r\n- Êµ∑ÈæüÊ±§ÊòØ‰∏ÄÁßçÊÉÖÊôØÊé®ÁêÜÊ∏∏ÊàèÔºåË∞úÈ¢òÊú¨Ë∫´Âπ∂Ê≤°ÊúâÂæàÂº∫ÁöÑÈÄªËæëÊÄßÔºåÊ≥®ÈáçËÉΩÂê¶ÂèëÁé∞ÂÖ≥ÈîÆÁ∫øÁ¥¢ÈáçÁé∞ÊÉÖÊôØ\r\n- Âá∫È¢ò‰∫∫ÊèêÂá∫‰∏Ä‰∏™Áúã‰ºº‰∏çÂêàÂ∏∏ÁêÜÁöÑÈóÆÈ¢òÂíåÊÉÖÊôØÔºàË∞úÈù¢ÔºâÔºåÁåúÈ¢òËÄÖÈÄöËøáÊèêÈóÆÁº©Â∞èËåÉÂõ¥Âπ∂ÊúÄÁªàÊè≠Á§∫ÂÆåÊï¥ÊïÖ‰∫ãÊÉÖËäÇÔºàË∞úÂ∫ïÔºâ\r\n- ÁåúÈ¢òËÄÖÂèØ‰ª•ÊèêÂá∫‰ªª‰ΩïÈóÆÈ¢òÔºåÂá∫È¢ò‰∫∫‰∏ªË¶ÅÁî®\"ÊòØ\"„ÄÅ\"‰∏çÊòØ\"„ÄÅ\"ÊòØ‰πü‰∏çÊòØ\"Êàñ\"Ê≤°ÊúâÂÖ≥Á≥ª\"Êù•ÂõûÁ≠î\r\n- ÂΩìÈóÆÈ¢ò‰∏≠Êó¢ÊúâÂØπÁöÑÂú∞Êñπ‰πüÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÊó∂ÔºåÂá∫È¢ò‰∫∫‰ºöÂõûÁ≠î\"ÊòØ‰πü‰∏çÊòØ\"\r\n- ÂΩìÈóÆÈ¢ò‰∏éË∞úÈ¢òÊ†∏ÂøÉÊÉÖËäÇÊó†ÂÖ≥Êó∂ÔºåÂá∫È¢ò‰∫∫‰ºöÂõûÁ≠î\"Ê≤°ÊúâÂÖ≥Á≥ª\"\r\n- ÁåúÈ¢òËÄÖÂèØ‰ª•ÈÄöËøáÂú®Ê∂àÊÅØÂºÄÂ§¥Âä†‰∏ä\"Ê±§Â∫ï\"Êù•Â∞ùËØïÊèèËø∞ÂÆåÊï¥ÊÉÖÊôØ\r\n- ÂΩìÁåúÈ¢òËÄÖÊéåÊè°‰∫ÜÂÖ≥ÈîÆÁ∫øÁ¥¢Êó∂ÔºåÂá∫È¢ò‰∫∫‰ºöÊèêÈÜíÁåúÈ¢òËÄÖÂΩíÁ∫≥Á∫øÁ¥¢ÔºåÂΩ¢ÊàêÂØπË∞úÂ∫ïÁöÑÂÆåÊï¥ÊèèËø∞\r\n- ÁåúÈ¢òËÄÖÂèØ‰ª•ËØ∑Ê±ÇÂºïÂØºÂíåÊèêÁ§∫ÔºåÂá∫È¢ò‰∫∫‰ºöÁªô‰∫àÂ∞öÊú™ÊéåÊè°ÁöÑÁ∫øÁ¥¢\r\n- ÂΩìÁåúÈ¢òËÄÖÁöÑÊèèËø∞Â§ßËá¥ÂåÖÂê´‰∫ÜË∞úÈ¢òÁöÑÂÖ≥ÈîÆÊÉÖÊôØÊó∂ÔºåÂá∫È¢ò‰∫∫‰ºöÁ°ÆËÆ§\"ÂÆåÂÖ®Ê≠£Á°Æ\"\r\n\r\n\r\n### Â∞èÊäÄÂ∑ß\r\n\r\n- ‰ªéÂü∫Êú¨ÈóÆÈ¢òÂºÄÂßãÔºåÂ¶ÇË∞úÈ¢òÊ∂âÂèä‰∫∫Êï∞„ÄÅÊ≠ªËÄÖÁöÑÊ≠ªÂõ†Á≠â„ÄÇ\r\n- Ê≥®ÊÑèË∞úÈù¢‰∏≠ÁöÑÊØè‰∏Ä‰∏™ÁªÜËäÇÔºåÂÆÉ‰ª¨ÂèØËÉΩÊòØÂÖ≥ÈîÆÁ∫øÁ¥¢\r\n- ÂΩì‰Ω†ÊÑüÂà∞Âõ∞ÊÉëÊó∂ÔºåÂ∞ùËØï‰ªé‰∏çÂêåËßíÂ∫¶ÊÄùËÄÉÈóÆÈ¢ò\r\n- ËÆ∞ÂΩïÂ∑≤ÁªèÁ°ÆËÆ§ÁöÑÁ∫øÁ¥¢Ôºå‰ª•‰æøÂΩíÁ∫≥Êï¥ÁêÜ\r\n\r\n## ÂÖ≥‰∫éË∞úÈ¢ò\r\n\r\nÁõÆÂâçÊú¨È°πÁõÆÂ∑≤ÁªèÊèê‰æõ‰∫Ü35‰∏™Ë∞úÈ¢ò„ÄÇ\r\nÊú¨‰∫∫ÊõæÂºÄÂèë[Êµ∑ÈæüÊ±§Ê®°ÊãüÂô®](https://www.hgtang.com)ÔºåËØ•ÁΩëÁ´ôÊúâËØÑÂàÜÂäüËÉΩ„ÄÇÁõÆÂâçÁöÑ35‰∏™Ë∞úÈ¢òÊù•Ëá™‰∫éÊàëÂíå‰∏Ä‰∫õÁÉ≠ÂøÉÁî®Êà∑‰∏∫ËØ•ÁΩëÁ´ôÊêúÈõÜÁöÑË∞úÈ¢ò„ÄÇ‰æùÊçÆËØ•ÁΩëÁ´ô‰∏äÂêÑË∞úÈ¢òÁöÑËØÑÂàÜÔºåÊé®ËçêÊ∏∏Áé©ÁöÑË∞úÈ¢òÂ¶Ç‰∏ãÔºö\r\n\r\n- Âø†ËØöÁöÑÁãó\r\n- 100ÂÖÉÈí±\r\n- Áà±Áä¨\r\n- Ê≤ªÁóÖ\r\n- Á•≠Êó•\r\n- ÁîµÊ¢ØÈáåÁöÑ‰∫∫\r\n- Âª∂ËøüÊ≠ª‰∫°\r\n- ÁîüÊÑè\r\n- Ë£§Â≠êÁ†¥‰∫Ü\r\n- Ë¶ÅÂ•ΩÁöÑÊúãÂèã\r\n\r\nÊ¨¢Ëøé‰Ω†‰∏∫Êú¨È°πÁõÆË¥°ÁåÆÊõ¥Â§öÁöÑË∞úÈ¢ò„ÄÇ‰Ω†ÂèØ‰ª•Âú®haiguitang_mcp/puzzlesÊñá‰ª∂Â§π‰∏≠Âä†ÂÖ•Êñ∞ÁöÑË∞úÈ¢òÊñá‰ª∂ÁÑ∂ÂêéÂèëËµ∑Pull Request„ÄÇ\r\n\r\nÊ≥®ÊÑèÔºö\r\n\r\n- Â¶ÇÊûú‰Ω†Â∏åÊúõÁî®Êà∑Ê∏∏Áé©‰πãÂâçÊúâÊâÄÈ¢ÑË≠¶Ôºå‰Ω†ÂèØ‰ª•Âú®Ê†áÈ¢òÔºå‰πüÂ∞±ÊòØË∞úÈ¢òÊñá‰ª∂ÁöÑÂêçÁß∞‰∏≠Ê≥®Êòé„ÄÇ\r\n- ËØ∑Ê≥®ÊÑèÊµ∑ÈæüÊ±§ÁöÑÁâàÊùÉÈóÆÈ¢ò„ÄÇ\r\n- ‰Ω†ÂèØ‰ª•Âú®Êµ∑ÈæüÊ±§Êñá‰ª∂‰∏≠Ê∑ªÂä†‰ΩúËÄÖÂíåÊèê‰∫§ËÄÖ‰ø°ÊÅØ„ÄÇ\r\n\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gameplay",
        "games",
        "interactive",
        "puzzle games",
        "implement game",
        "gameplay guided"
      ],
      "category": "gaming-and-game-development"
    },
    "TSavo--Unity-MCP": {
      "owner": "TSavo",
      "name": "Unity-MCP",
      "url": "https://github.com/TSavo/Unity-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/TSavo.webp",
      "description": "Enable interaction between AI assistants and Unity game environments through a standardized interface for tasks such as executing C# code, inspecting game objects, analyzing scenes, running tests, and modifying game state at runtime.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-02T13:58:24Z",
      "readme_content": "# Unity-MCP\n\nA bridge between Unity and AI assistants using the Model Context Protocol (MCP).\n\n## Overview\n\nUnity-MCP is an open-source implementation of the Model Context Protocol for Unity game development. It enables AI assistants to interact with Unity game environments through a standardized interface, allowing for AI-assisted game development, automated testing, scene analysis, and runtime debugging.\n\n### Architecture\n\nThe architecture has been simplified to use AILogger for persistence, removing the need for a separate server component:\n\n```\nAI Assistant <-> Unity-MCP STDIO Client <-> Unity Client <-> AILogger\n```\n\n- **AI Assistant**: Communicates with the Unity-MCP STDIO Client using the MCP protocol\n- **Unity-MCP STDIO Client**: Forwards commands to the Unity Client and stores results in AILogger\n- **Unity Client**: Executes commands in Unity and returns results\n- **AILogger**: Stores logs and results for later retrieval\n\nThe Unity-MCP STDIO Client communicates directly with the Unity Client, which provides endpoints for both code execution and queries. The query tool transforms queries into code execution by wrapping them in a `return` statement.\n\n## Features\n\n- Execute C# code in the Unity runtime environment\n- Inspect game objects and their components\n- Analyze scene hierarchies and structures\n- Run tests and receive results\n- Invoke methods on game objects and components\n- Modify game state during runtime\n\n## Deployment Options\n\n- Unity Editor Extension: An Editor extension that persists beyond game execution cycles\n- Docker Container: A containerized version that communicates with Unity over the network\n- NPX Package: A Node.js package that can be installed and run via NPX\n\n## Documentation\n\n- [MCP Architecture](docs/mcp-architecture.md): Overview of the MCP architecture and namespaces\n- [MCP STDIO Client](docs/mcp-stdio-client.md): Information about the MCP STDIO client and its logging capabilities\n- [Query Tool](docs/query-tool.md): Detailed information about the query tool and how it works\n- [AILogger Integration](docs/ai-logger-sdk.md): Detailed information about the AILogger integration\n- [API Reference](docs/api-reference.md): Detailed information about the API endpoints\n- [Installation Guide](docs/installation.md): Step-by-step instructions for installing and setting up Unity-MCP\n- [Development Guide](docs/development.md): Information about the development environment and workflow\n- [Hot Reloading Guide](docs/hot-reloading.md): Detailed information about hot reloading in the development environment\n- [Hot Reloading Quick Reference](docs/hot-reloading-quick-reference.md): Quick reference guide for hot reloading commands and tips\n- [Contributing Guide](docs/contributing-guide.md): Guidelines for contributing to the project\n\n## Getting Started\n\nTo get started with Unity-MCP, follow these steps:\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/TSavo/Unity-MCP.git\n   cd Unity-MCP\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n4. Start the MCP STDIO client:\n   ```bash\n   npm start\n   ```\n\n   This will start the MCP STDIO client that communicates with Unity and uses AILogger for persistence.\n\n   Note: Make sure AILogger is running on http://localhost:3030 or set the AI_LOGGER_URL environment variable to point to your AILogger instance.\n\n5. Run tests:\n   ```bash\n   # Run all tests\n   npm test\n\n   # Run only unit tests\n   npm run test:unit\n\n   # Run only e2e tests\n   npm run test:e2e\n\n   # Run tests with a specific pattern\n   npm test -- --testNamePattern=\"should return the server manifest\"\n   npm run test:unit -- --testNamePattern=\"should return the server manifest\"\n   npm run test:e2e -- --testNamePattern=\"should discover the test server\"\n   ```\n\nFor more detailed instructions, see the [Installation Guide](docs/installation.md).\n\n## Connecting to AI Assistants\n\nTo connect the Unity-MCP bridge to an AI assistant, you need to create an MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"unity-ai-bridge\": {\n      \"url\": \"http://localhost:8080/sse\"\n    }\n  }\n}\n```\n\nPlace this file in the appropriate location for your AI assistant. For Claude, this would typically be in the Claude Desktop app's configuration directory.\n\n### Available Tools\n\nThe Unity-MCP bridge provides the following tools:\n\n1. **execute_code**: Execute C# code directly in Unity.\n2. **query**: Execute a query using dot notation to access objects, properties, and methods.\n3. **get_logs**: Retrieve logs from AILogger.\n4. **get_log_by_name**: Retrieve a specific log from AILogger.\n\n## Usage Examples\n\n### Executing Code in Unity\n\nYou can execute C# code in Unity using the `execute_code` tool. The code will be executed in the Unity runtime environment, and the result will be stored in AILogger for later retrieval.\n\n#### JSON-RPC Request\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"execute_code\",\n    \"arguments\": {\n      \"code\": \"Debug.Log(\\\"Hello from Unity!\\\"); return GameObject.FindObjectsOfType<GameObject>().Length;\",\n      \"timeout\": 5000\n    }\n  }\n}\n```\n\n#### JSON-RPC Response\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\\"status\\\":\\\"success\\\",\\\"logName\\\":\\\"unity-execute-1712534400000\\\",\\\"result\\\":{\\\"success\\\":true,\\\"result\\\":42,\\\"logs\\\":[\\\"Hello from Unity!\\\"],\\\"executionTime\\\":123}}\"\n      }\n    ]\n  }\n}\n```\n\n### Querying Unity Objects\n\nYou can query Unity objects using the `query` tool. This allows you to access objects, properties, and methods using dot notation.\n\n#### JSON-RPC Request\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"query\",\n    \"arguments\": {\n      \"query\": \"Camera.main.transform.position\",\n      \"timeout\": 5000\n    }\n  }\n}\n```\n\n#### JSON-RPC Response\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\\"status\\\":\\\"success\\\",\\\"logName\\\":\\\"unity-query-1712534400000\\\",\\\"result\\\":{\\\"success\\\":true,\\\"result\\\":{\\\"x\\\":0,\\\"y\\\":1,\\\"z\\\":-10},\\\"executionTime\\\":45}}\"\n      }\n    ]\n  }\n}\n```\n\n### Retrieving Results from AILogger\n\nYou can retrieve the results of previous operations from AILogger using the `get_log_by_name` tool.\n\n#### JSON-RPC Request\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"get_log_by_name\",\n    \"arguments\": {\n      \"log_name\": \"unity-execute-1712534400000\",\n      \"limit\": 1\n    }\n  }\n}\n```\n\n#### JSON-RPC Response\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 3,\n  \"result\": {\n    \"content\": [\n      {\n        \"type\": \"text\",\n        \"text\": \"{\\\"status\\\":\\\"success\\\",\\\"name\\\":\\\"unity-execute-1712534400000\\\",\\\"entries\\\":[{\\\"id\\\":\\\"123e4567-e89b-12d3-a456-426614174000\\\",\\\"name\\\":\\\"unity-execute-1712534400000\\\",\\\"data\\\":{\\\"result\\\":{\\\"success\\\":true,\\\"result\\\":42,\\\"logs\\\":[\\\"Hello from Unity!\\\"],\\\"executionTime\\\":123},\\\"timestamp\\\":\\\"2025-04-08T00:00:00.000Z\\\"},\\\"timestamp\\\":\\\"2025-04-08T00:00:00.000Z\\\"}]}\"\n      }\n    ]\n  }\n}\n```\n\n### Example Usage\n\nOnce the AI assistant has access to the Unity tool, you can ask it to perform tasks like:\n\n```\nCan you execute the following C# code in Unity?\n\nGameObject.Find(\"Player\").transform.position = new Vector3(0, 1, 0);\n```\n\n## License\n\nMIT\n\n## Author\n\nT Savo ([@TSavo](https://github.com/TSavo))\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "unity",
        "tsavo",
        "unity mcp",
        "ai assistants",
        "assistants unity"
      ],
      "category": "gaming-and-game-development"
    },
    "TeglonLabs--coin-flip-mcp": {
      "owner": "TeglonLabs",
      "name": "coin-flip-mcp",
      "url": "https://github.com/TeglonLabs/coin-flip-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/TeglonLabs.webp",
      "description": "Generates true random coin flips using random.org's randomness API with configurable sides, allowing for outcomes like 'Heads', 'Tails', or custom sides for n-sided flips.",
      "stars": 0,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-16T01:31:45Z",
      "readme_content": "# Coin Flip MCP Server\n\nAn MCP server that provides true random coin flips using random.org's randomness API. This server demonstrates the Model Context Protocol by providing a tool for generating random outcomes with configurable sides.\n\n## Features\n\n### Tools\n- `flip_coin` - Flip a coin with configurable number of sides\n  - Optional `sides` parameter (default: 2)\n  - Uses true randomness from random.org\n  - Special handling for edge cases (0, 1, or negative sides)\n  - For 2 sides: Returns \"Heads\" or \"Tails\"\n  - For 3 sides: Returns \"Heads\", \"Tails\", or \"_\"\n  - For n>3 sides: Returns \"It landed on side X\"\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"coin-flip\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-coin-flip\"]\n    }\n  }\n}\n```\n\n## Example Usage\n\nOnce connected to an MCP client like Claude Desktop, you can use natural language to interact with the coin flip tool. For example:\n\n- \"Flip a coin\"\n- \"Roll a 6-sided die\"\n- \"Give me a random number between 1 and 20\"\n\nThe server will use true randomness from random.org to generate the result.\n\n## Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "randomness",
        "random",
        "flips",
        "random coin",
        "flip mcp",
        "coin flips"
      ],
      "category": "gaming-and-game-development"
    },
    "ahujasid--ableton-mcp": {
      "owner": "ahujasid",
      "name": "ableton-mcp",
      "url": "https://github.com/ahujasid/ableton-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ahujasid.webp",
      "description": "Connect Claude AI to Ableton Live for prompt-assisted music production, enabling manipulation and control of MIDI and audio tracks, clip creation, and session management.",
      "stars": 1961,
      "forks": 225,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T07:51:01Z",
      "readme_content": "# AbletonMCP - Ableton Live Model Context Protocol Integration\n[![smithery badge](https://smithery.ai/badge/@ahujasid/ableton-mcp)](https://smithery.ai/server/@ahujasid/ableton-mcp)\n\nAbletonMCP connects Ableton Live to Claude AI through the Model Context Protocol (MCP), allowing Claude to directly interact with and control Ableton Live. This integration enables prompt-assisted music production, track creation, and Live session manipulation.\n\n### Join the Community\n\nGive feedback, get inspired, and build on top of the MCP: [Discord](https://discord.gg/3ZrMyGKnaU). Made by [Siddharth](https://x.com/sidahuj)\n\n## Features\n\n- **Two-way communication**: Connect Claude AI to Ableton Live through a socket-based server\n- **Track manipulation**: Create, modify, and manipulate MIDI and audio tracks\n- **Instrument and effect selection**: Claude can access and load the right instruments, effects and sounds from Ableton's library\n- **Clip creation**: Create and edit MIDI clips with notes\n- **Session control**: Start and stop playback, fire clips, and control transport\n\n## Components\n\nThe system consists of two main components:\n\n1. **Ableton Remote Script** (`Ableton_Remote_Script/__init__.py`): A MIDI Remote Script for Ableton Live that creates a socket server to receive and execute commands\n2. **MCP Server** (`server.py`): A Python server that implements the Model Context Protocol and connects to the Ableton Remote Script\n\n## Installation\n\n### Installing via Smithery\n\nTo install Ableton Live Integration for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ahujasid/ableton-mcp):\n\n```bash\nnpx -y @smithery/cli install @ahujasid/ableton-mcp --client claude\n```\n\n### Prerequisites\n\n- Ableton Live 10 or newer\n- Python 3.8 or newer\n- [uv package manager](https://astral.sh/uv)\n\nIf you're on Mac, please install uv as:\n```\nbrew install uv\n```\n\nOtherwise, install from [uv's official website][https://docs.astral.sh/uv/getting-started/installation/]\n\n‚ö†Ô∏è Do not proceed before installing UV\n\n### Claude for Desktop Integration\n\n[Follow along with the setup instructions video](https://youtu.be/iJWJqyVuPS8)\n\n1. Go to Claude > Settings > Developer > Edit Config > claude_desktop_config.json to include the following:\n\n```json\n{\n    \"mcpServers\": {\n        \"AbletonMCP\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"ableton-mcp\"\n            ]\n        }\n    }\n}\n```\n\n### Cursor Integration\n\nRun ableton-mcp without installing it permanently through uvx. Go to Cursor Settings > MCP and paste this as a command:\n\n```\nuvx ableton-mcp\n```\n\n‚ö†Ô∏è Only run one instance of the MCP server (either on Cursor or Claude Desktop), not both\n\n### Installing the Ableton Remote Script\n\n[Follow along with the setup instructions video](https://youtu.be/iJWJqyVuPS8)\n\n1. Download the `AbletonMCP_Remote_Script/__init__.py` file from this repo\n\n2. Copy the folder to Ableton's MIDI Remote Scripts directory. Different OS and versions have different locations. **One of these should work, you might have to look**:\n\n   **For macOS:**\n   - Method 1: Go to Applications > Right-click on Ableton Live app ‚Üí Show Package Contents ‚Üí Navigate to:\n     `Contents/App-Resources/MIDI Remote Scripts/`\n   - Method 2: If it's not there in the first method, use the direct path (replace XX with your version number):\n     `/Users/[Username]/Library/Preferences/Ableton/Live XX/User Remote Scripts`\n   \n   **For Windows:**\n   - Method 1:\n     C:\\Users\\[Username]\\AppData\\Roaming\\Ableton\\Live x.x.x\\Preferences\\User Remote Scripts \n   - Method 2:\n     `C:\\ProgramData\\Ableton\\Live XX\\Resources\\MIDI Remote Scripts\\`\n   - Method 3:\n     `C:\\Program Files\\Ableton\\Live XX\\Resources\\MIDI Remote Scripts\\`\n   *Note: Replace XX with your Ableton version number (e.g., 10, 11, 12)*\n\n4. Create a folder called 'AbletonMCP' in the Remote Scripts directory and paste the downloaded '\\_\\_init\\_\\_.py' file\n\n3. Launch Ableton Live\n\n4. Go to Settings/Preferences ‚Üí Link, Tempo & MIDI\n\n5. In the Control Surface dropdown, select \"AbletonMCP\"\n\n6. Set Input and Output to \"None\"\n\n## Usage\n\n### Starting the Connection\n\n1. Ensure the Ableton Remote Script is loaded in Ableton Live\n2. Make sure the MCP server is configured in Claude Desktop or Cursor\n3. The connection should be established automatically when you interact with Claude\n\n### Using with Claude\n\nOnce the config file has been set on Claude, and the remote script is running in Ableton, you will see a hammer icon with tools for the Ableton MCP.\n\n## Capabilities\n\n- Get session and track information\n- Create and modify MIDI and audio tracks\n- Create, edit, and trigger clips\n- Control playback\n- Load instruments and effects from Ableton's browser\n- Add notes to MIDI clips\n- Change tempo and other session parameters\n\n## Example Commands\n\nHere are some examples of what you can ask Claude to do:\n\n- \"Create an 80s synthwave track\" [Demo](https://youtu.be/VH9g66e42XA)\n- \"Create a Metro Boomin style hip-hop beat\"\n- \"Create a new MIDI track with a synth bass instrument\"\n- \"Add reverb to my drums\"\n- \"Create a 4-bar MIDI clip with a simple melody\"\n- \"Get information about the current Ableton session\"\n- \"Load a 808 drum rack into the selected track\"\n- \"Add a jazz chord progression to the clip in track 1\"\n- \"Set the tempo to 120 BPM\"\n- \"Play the clip in track 2\"\n\n\n## Troubleshooting\n\n- **Connection issues**: Make sure the Ableton Remote Script is loaded, and the MCP server is configured on Claude\n- **Timeout errors**: Try simplifying your requests or breaking them into smaller steps\n- **Have you tried turning it off and on again?**: If you're still having connection errors, try restarting both Claude and Ableton Live\n\n## Technical Details\n\n### Communication Protocol\n\nThe system uses a simple JSON-based protocol over TCP sockets:\n\n- Commands are sent as JSON objects with a `type` and optional `params`\n- Responses are JSON objects with a `status` and `result` or `message`\n\n### Limitations & Security Considerations\n\n- Creating complex musical arrangements might need to be broken down into smaller steps\n- The tool is designed to work with Ableton's default devices and browser items\n- Always save your work before extensive experimentation\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Disclaimer\n\nThis is a third-party integration and not made by Ableton.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ableton",
        "midi",
        "ai",
        "ai ableton",
        "ahujasid ableton",
        "ableton live"
      ],
      "category": "gaming-and-game-development"
    },
    "ahujasid--blender-mcp": {
      "owner": "ahujasid",
      "name": "blender-mcp",
      "url": "https://github.com/ahujasid/blender-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ahujasid.webp",
      "description": "Connects Claude AI with Blender for 3D modeling and scene manipulation, enabling the creation and modification of 3D objects and materials through prompt assistance. Automates tasks in Blender using Python code for enhanced workflow efficiency.",
      "stars": 13688,
      "forks": 1295,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T12:37:54Z",
      "readme_content": "# BlenderMCP - Blender Model Context Protocol Integration\n\nBlenderMCP connects Blender to Claude AI through the Model Context Protocol (MCP), allowing Claude to directly interact with and control Blender. This integration enables prompt assisted 3D modeling, scene creation, and manipulation.\n\n**We have no official website. Any website you see online is unofficial and has no affiliation with this project. Use them at your own risk.**\n\n[Full tutorial](https://www.youtube.com/watch?v=lCyQ717DuzQ)\n\n### Join the Community\n\nGive feedback, get inspired, and build on top of the MCP: [Discord](https://discord.gg/z5apgR8TFU)\n\n### Supporters\n\n<div align=\"center\" markdown=\"1\">\n   <sup>Special thanks to:</sup>\n   <br>\n   <br>\n   <a href=\"https://www.warp.dev/blender-mcp\">\n      <img alt=\"Warp sponsorship\" width=\"400\" src=\"https://github.com/user-attachments/assets/c21102f7-bab9-4344-a731-0cf6b341cab2\">\n   </a>\n\n### [Warp, the intelligent terminal for developers](https://www.warp.dev/blender-mcp)\n[Available for MacOS, Linux, & Windows](https://www.warp.dev/blender-mcp)<br>\n\n</div>\n<hr>\n\n**Other supporters:**\n\n[CodeRabbit](https://www.coderabbit.ai/)\n\n[Satish Goda](https://github.com/satishgoda)\n\n**All supporters:**\n\n[Support this project](https://github.com/sponsors/ahujasid)\n\n## Release notes (1.2.0)\n- View screenshots for Blender viewport to better understand the scene\n- Search and download Sketchfab models\n\n\n### Previously added features:\n- Support for Poly Haven assets through their API\n- Support to generate 3D models using Hyper3D Rodin\n- For newcomers, you can go straight to Installation. For existing users, see the points below\n- Download the latest addon.py file and replace the older one, then add it to Blender\n- Delete the MCP server from Claude and add it back again, and you should be good to go!\n\n## Features\n\n- **Two-way communication**: Connect Claude AI to Blender through a socket-based server\n- **Object manipulation**: Create, modify, and delete 3D objects in Blender\n- **Material control**: Apply and modify materials and colors\n- **Scene inspection**: Get detailed information about the current Blender scene\n- **Code execution**: Run arbitrary Python code in Blender from Claude\n\n## Components\n\nThe system consists of two main components:\n\n1. **Blender Addon (`addon.py`)**: A Blender addon that creates a socket server within Blender to receive and execute commands\n2. **MCP Server (`src/blender_mcp/server.py`)**: A Python server that implements the Model Context Protocol and connects to the Blender addon\n\n## Installation\n\n\n### Prerequisites\n\n- Blender 3.0 or newer\n- Python 3.10 or newer\n- uv package manager: \n\n**If you're on Mac, please install uv as**\n```bash\nbrew install uv\n```\n**On Windows**\n```bash\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\" \n```\nand then\n```bash\nset Path=C:\\Users\\nntra\\.local\\bin;%Path%\n```\n\nOtherwise installation instructions are on their website: [Install uv](https://docs.astral.sh/uv/getting-started/installation/)\n\n**‚ö†Ô∏è Do not proceed before installing UV**\n\n### Environment Variables\n\nThe following environment variables can be used to configure the Blender connection:\n\n- `BLENDER_HOST`: Host address for Blender socket server (default: \"localhost\")\n- `BLENDER_PORT`: Port number for Blender socket server (default: 9876)\n\nExample:\n```bash\nexport BLENDER_HOST='host.docker.internal'\nexport BLENDER_PORT=9876\n```\n\n### Claude for Desktop Integration\n\n[Watch the setup instruction video](https://www.youtube.com/watch?v=neoK_WMq92g) (Assuming you have already installed uv)\n\nGo to Claude > Settings > Developer > Edit Config > claude_desktop_config.json to include the following:\n\n```json\n{\n    \"mcpServers\": {\n        \"blender\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"blender-mcp\"\n            ]\n        }\n    }\n}\n```\n\n### Cursor integration\n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=blender&config=eyJjb21tYW5kIjoidXZ4IGJsZW5kZXItbWNwIn0%3D)\n\nFor Mac users, go to Settings > MCP and paste the following \n\n- To use as a global server, use \"add new global MCP server\" button and paste\n- To use as a project specific server, create `.cursor/mcp.json` in the root of the project and paste\n\n\n```json\n{\n    \"mcpServers\": {\n        \"blender\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"blender-mcp\"\n            ]\n        }\n    }\n}\n```\n\nFor Windows users, go to Settings > MCP > Add Server, add a new server with the following settings:\n\n```json\n{\n    \"mcpServers\": {\n        \"blender\": {\n            \"command\": \"cmd\",\n            \"args\": [\n                \"/c\",\n                \"uvx\",\n                \"blender-mcp\"\n            ]\n        }\n    }\n}\n```\n\n[Cursor setup video](https://www.youtube.com/watch?v=wgWsJshecac)\n\n**‚ö†Ô∏è Only run one instance of the MCP server (either on Cursor or Claude Desktop), not both**\n\n### Visual Studio Code Integration\n\n_Prerequisites_: Make sure you have [Visual Studio Code](https://code.visualstudio.com/) installed before proceeding.\n\n[![Install in VS Code](https://img.shields.io/badge/VS_Code-Install_blender--mcp_server-0098FF?style=flat-square&logo=visualstudiocode&logoColor=ffffff)](vscode:mcp/install?%7B%22name%22%3A%22blender-mcp%22%2C%22type%22%3A%22stdio%22%2C%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22blender-mcp%22%5D%7D)\n\n### Installing the Blender Addon\n\n1. Download the `addon.py` file from this repo\n1. Open Blender\n2. Go to Edit > Preferences > Add-ons\n3. Click \"Install...\" and select the `addon.py` file\n4. Enable the addon by checking the box next to \"Interface: Blender MCP\"\n\n\n## Usage\n\n### Starting the Connection\n\n\n1. In Blender, go to the 3D View sidebar (press N if not visible)\n2. Find the \"BlenderMCP\" tab\n3. Turn on the Poly Haven checkbox if you want assets from their API (optional)\n4. Click \"Connect to Claude\"\n5. Make sure the MCP server is running in your terminal\n\n### Using with Claude\n\nOnce the config file has been set on Claude, and the addon is running on Blender, you will see a hammer icon with tools for the Blender MCP.\n\n\n\n#### Capabilities\n\n- Get scene and object information \n- Create, delete and modify shapes\n- Apply or create materials for objects\n- Execute any Python code in Blender\n- Download the right models, assets and HDRIs through [Poly Haven](https://polyhaven.com/)\n- AI generated 3D models through [Hyper3D Rodin](https://hyper3d.ai/)\n\n\n### Example Commands\n\nHere are some examples of what you can ask Claude to do:\n\n- \"Create a low poly scene in a dungeon, with a dragon guarding a pot of gold\" [Demo](https://www.youtube.com/watch?v=DqgKuLYUv00)\n- \"Create a beach vibe using HDRIs, textures, and models like rocks and vegetation from Poly Haven\" [Demo](https://www.youtube.com/watch?v=I29rn92gkC4)\n- Give a reference image, and create a Blender scene out of it [Demo](https://www.youtube.com/watch?v=FDRb03XPiRo)\n- \"Generate a 3D model of a garden gnome through Hyper3D\"\n- \"Get information about the current scene, and make a threejs sketch from it\" [Demo](https://www.youtube.com/watch?v=jxbNI5L7AH8)\n- \"Make this car red and metallic\" \n- \"Create a sphere and place it above the cube\"\n- \"Make the lighting like a studio\"\n- \"Point the camera at the scene, and make it isometric\"\n\n## Hyper3D integration\n\nHyper3D's free trial key allows you to generate a limited number of models per day. If the daily limit is reached, you can wait for the next day's reset or obtain your own key from hyper3d.ai and fal.ai.\n\n## Troubleshooting\n\n- **Connection issues**: Make sure the Blender addon server is running, and the MCP server is configured on Claude, DO NOT run the uvx command in the terminal. Sometimes, the first command won't go through but after that it starts working.\n- **Timeout errors**: Try simplifying your requests or breaking them into smaller steps\n- **Poly Haven integration**: Claude is sometimes erratic with its behaviour\n- **Have you tried turning it off and on again?**: If you're still having connection errors, try restarting both Claude and the Blender server\n\n\n## Technical Details\n\n### Communication Protocol\n\nThe system uses a simple JSON-based protocol over TCP sockets:\n\n- **Commands** are sent as JSON objects with a `type` and optional `params`\n- **Responses** are JSON objects with a `status` and `result` or `message`\n\n## Limitations & Security Considerations\n\n- The `execute_blender_code` tool allows running arbitrary Python code in Blender, which can be powerful but potentially dangerous. Use with caution in production environments. ALWAYS save your work before using it.\n- Poly Haven requires downloading models, textures, and HDRI images. If you do not want to use it, please turn it off in the checkbox in Blender. \n- Complex operations might need to be broken down into smaller steps\n\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Disclaimer\n\nThis is a third-party integration and not made by Blender. Made by [Siddharth](https://x.com/sidahuj)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "3d",
        "blender",
        "ai",
        "ai blender",
        "ahujasid blender",
        "blender 3d"
      ],
      "category": "gaming-and-game-development"
    },
    "akiojin--playfab-mcp-server": {
      "owner": "akiojin",
      "name": "playfab-mcp-server",
      "url": "https://github.com/akiojin/playfab-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/akiojin.webp",
      "description": "Connects AI assistants to PlayFab services for accessing item searches, player profiles, and segment information directly. Facilitates natural interactions with PlayFab data through the use of APIs for inventory management and item inquiries.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-03T03:14:15Z",
      "readme_content": "# PlayFab MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@akiojin/playfab-mcp-server)](https://smithery.ai/server/@akiojin/playfab-mcp-server)\n\n## What Is This? ü§î\n\nThis server is a middleware that enables large language models (like Claude and VS Code) to interact directly with PlayFab services. Acting as a secure and efficient translator, it connects your AI assistant with various PlayFab functionalities, such as item search, segment inquiries, player profile lookups, inventory management, and PlayFab ID conversion.\n\n### Quick Example\n\n```text\nYou: \"Show me the latest 10 items.\"\nClaude: *calls the PlayFab search_items API and returns the results in plain text*\n```\n\n## How Does It Work? üõ†Ô∏è\n\nThis server leverages the Model Context Protocol (MCP) to establish a universal interface between AI models and PlayFab services. Although MCP is designed to support any AI model, it is currently available as a developer preview.\n\nFollow these steps to get started:\n\n1. Set up your project.\n2. Add your project details to your LLM client's configuration.\n3. Start interacting with PlayFab data naturally!\n\n### What Can It Do? üìä\n\n#### Catalog & Search\n\n- Search for items using PlayFab's search_items API.\n- **Catalog Management (Economy v2):**\n  - Create new draft items with the create_draft_item API.\n  - Update existing draft items with the update_draft_item API.\n  - Delete items from catalog with the delete_item API.\n  - Publish draft items to make them available with the publish_draft_item API.\n  - Get detailed item information with the get_item API.\n\n#### Player Management\n\n- Retrieve comprehensive segment information.\n- Query player profiles within specified segments.\n- Convert a PlayFab ID to a Title Player Account ID via the get_title_player_account_id_from_playfab_id API.\n- Get detailed user account information with the get_user_account_info API.\n\n#### Inventory Management\n\n- **Get Operations:**\n  - Retrieve current inventory items with the get_inventory_items API.\n  - Fetch inventory collection IDs using the get_inventory_collection_ids API.\n- **Add/Remove Operations:**\n  - Add items to inventory with the add_inventory_items API.\n  - Delete items from inventory with the delete_inventory_items API.\n  - Subtract specific amounts with the subtract_inventory_items API.\n- **Modify Operations:**\n  - Update item properties with the update_inventory_items API.\n\n#### Economy v2 Administration\n\n- Execute batch inventory operations with the execute_inventory_operations API.\n- Note: In Economy v2, virtual currencies are managed as inventory items.\n\n#### User Account Administration\n\n- Ban players by ID, IP, or MAC address with the ban_users API.\n- Unban players completely with the revoke_all_bans_for_user API.\n\n#### Player Data Management\n\n- Retrieve player custom data with the get_user_data API.\n- Update player custom data with the update_user_data API.\n\n#### Title Configuration Management\n\n- Set global title data with the set_title_data API.\n- Retrieve title data with the get_title_data API.\n- Set server-only internal data with the set_title_internal_data API.\n- Retrieve internal data with the get_title_internal_data API.\n\n## Quick Start üöÄ\n\n### Installing via Smithery\n\nTo install PlayFab MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@akiojin/playfab-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @akiojin/playfab-mcp-server --client claude\n```\n\n### Prerequisites\n\n- Node.js 18 or higher.\n- A valid PlayFab account (obtain your Title ID and Developer Secret Key via PlayFab Game Manager).\n- A supported LLM client such as Claude Desktop.\n\n### Set Up Your Project\n\nObtain your PlayFab Title ID and Developer Secret Key from the PlayFab Game Manager, then create a `.env` file in the project root with the following content (replace the placeholders with your actual credentials):\n\n```bash\nPLAYFAB_TITLE_ID=\nPLAYFAB_DEV_SECRET_KEY=\n```\n\n### Installation and Setup\n\n1. **Install Dependencies**\n\n   In the project root, run the following command to install all necessary dependencies:\n\n   ```bash\n   npm install\n   ```\n\n2. **Build the Project**\n\n   Compile the project by executing:\n\n   ```bash\n   npm run build\n   ```\n\n3. **Start the Server**\n\n   Start the server by executing:\n\n   ```bash\n   npm start\n   ```\n\n4. **Confirmation Message**\n\n   Upon startup, you should see this message:\n\n   ```text\n   PlayFab Server running on stdio\n   ```\n\n### Development Setup\n\n#### Code Quality Tools\n\n- **ESLint**: Configured for TypeScript with recommended rules for code consistency\n- **Prettier**: Automatic code formatting with project-specific settings\n- **TypeScript**: Strict mode enabled for enhanced type safety\n- **Jest**: Testing framework configured for TypeScript\n\n#### Available Scripts\n\n```bash\n# Build the project\nnpm run build\n\n# Development mode with file watching\nnpm run watch\n\n# TypeScript type checking\nnpm run typecheck\n\n# Run ESLint\nnpm run lint\n\n# Run ESLint and fix issues\nnpm run lint:fix\n\n# Format code with Prettier\nnpm run format\n\n# Check code formatting\nnpm run format:check\n\n# Run tests\nnpm test\n\n# Run tests in watch mode\nnpm run test:watch\n\n# Run tests with coverage\nnpm run test:coverage\n```\n\n#### TypeScript Configuration\n\nThis project uses TypeScript with strict mode enabled, ensuring:\n- Strict null checks\n- No implicit any types\n- Strict function types\n- Always strict mode\n\n#### Testing\n\nTests are written using Jest and can be found in `__tests__` directories or files with `.test.ts` extension. Run tests before committing changes to ensure code quality.\n\n### Running with Cursor\n\nTo use the PlayFab MCP server with Cursor, follow these steps:\n\n1. Install [Cursor Desktop](https://cursor.so/) if you haven't already.\n2. Open a new instance of Cursor in an empty folder.\n3. Copy the [`mcp.json`](./.cursor/mcp.json) file from this repository into your folder and update the values according to your environment.\n4. Launch Cursor; the PlayFab MCP Server should appear in the tools list.\n5. For example, try a prompt like \"Show me the latest 10 items\" to verify that the server processes your query correctly.\n\n### Adding Your Project Details to Claude Desktop's Config File\n\nOpen Claude Desktop and navigate to File ‚Üí Settings ‚Üí Developer ‚Üí Edit Config. Then, replace the `claude_desktop_config` file content with the following snippet:\n\n```json\n{\n  \"mcpServers\": {\n    \"playfab\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@akiojin/playfab-mcp-server\"\n      ],\n      \"env\": {\n        \"PLAYFAB_TITLE_ID\": \"Your PlayFab Title ID\",\n        \"PLAYFAB_DEV_SECRET_KEY\": \"Your PlayFab Developer Secret Key\"\n      }\n    }\n  }\n}\n```\n\nWith these steps, you have successfully configured the PlayFab MCP server for use with your LLM client, allowing seamless interaction with PlayFab's services.\n\n## Contributing\n\n### Commit Message Convention\n\nThis project follows [Conventional Commits](https://www.conventionalcommits.org/) for automated versioning and release.\n\n#### Commit Message Format\n\n```text\n<type>(<scope>): <subject>\n\n<body>\n\n<footer>\n```\n\n#### Types\n\n- **feat**: A new feature (triggers MINOR version bump)\n- **fix**: A bug fix (triggers PATCH version bump)\n- **docs**: Documentation only changes\n- **style**: Changes that do not affect the meaning of the code\n- **refactor**: A code change that neither fixes a bug nor adds a feature\n- **perf**: A code change that improves performance\n- **test**: Adding missing tests or correcting existing tests\n- **chore**: Changes to the build process or auxiliary tools\n\n#### Version Bumping Rules\n\n- **MAJOR** version: When commit message contains `BREAKING CHANGE` in footer or `!` after type/scope\n  - Example: `feat!: remove deprecated API endpoints`\n  - Example: `feat: new API\\n\\nBREAKING CHANGE: removed old endpoints`\n- **MINOR** version: When commit type is `feat`\n  - Example: `feat: add new PlayFab API integration`\n- **PATCH** version: When commit type is `fix`\n  - Example: `fix: correct error handling in API calls`\n\n### Release Process\n\n#### 1. Update Version and Changelog\n\n```bash\n# Analyze commits and update CHANGELOG.md\n# Then bump version based on changes:\nnpm version patch  # or minor/major\n```\n\n#### 2. Push Changes and Tag\n\n```bash\n# Push the version commit\ngit push origin main\n\n# Push the version tag created by npm version\ngit push origin --tags\n```\n\n#### 3. Automatic Release & Publish\n\nWhen a `v*` tag is pushed, the `release-and-publish.yml` workflow automatically:\n\n- Creates a GitHub Release with release notes\n- Publishes the package to npm\n- Attaches release assets\n\n#### Repository Prerequisites\n\n- `NPM_TOKEN` secret must be set in repository settings for npm publishing\n- `DEPENDABOT_PAT` secret must be set for auto-approving Dependabot PRs:\n  1. Create a Personal Access Token (PAT) with `repo` and `workflow` permissions\n  2. Go to Settings ‚Üí Secrets and variables ‚Üí Actions\n  3. Add a new secret named `DEPENDABOT_PAT` with your PAT value\n- Branch protection rules must be configured for auto-merge to work:\n  1. Go to Settings ‚Üí Branches\n  2. Add rule for `main` branch\n  3. Enable \"Require a pull request before merging\"\n  4. Enable \"Require status checks to pass before merging\"\n  5. Add required status checks: `build (18.x)`, `build (20.x)`, `build (22.x)`\n\n### Scripts Reference\n\n| Script | Description |\n|--------|-------------|\n| `npm start` | Start the MCP server |\n| `npm run build` | Build TypeScript to JavaScript |\n| `npm run watch` | Build in watch mode for development |\n| `npm run typecheck` | Run TypeScript type checking |\n| `npm run lint` | Run ESLint checks |\n| `npm run lint:fix` | Fix ESLint issues automatically |\n| `npm run format` | Format code with Prettier |\n| `npm run format:check` | Check code formatting |\n| `npm test` | Run all tests |\n| `npm run test:watch` | Run tests in watch mode |\n| `npm run test:coverage` | Generate test coverage report |\n\n## Security\n\nWe take security seriously. If you discover a security vulnerability within this project, please follow these steps:\n\n### Reporting Security Vulnerabilities\n\n1. **DO NOT** create a public GitHub issue for security vulnerabilities\n2. Instead, please report security issues via GitHub's private vulnerability reporting:\n   - Go to the **Security** tab of this repository\n   - Click on **Report a vulnerability**\n   - Provide detailed information about the vulnerability\n\n### What We Need From You\n\n- A description of the vulnerability\n- Steps to reproduce the issue\n- Potential impact\n- Any suggested fixes (optional)\n\n### Our Commitment\n\n- We will acknowledge receipt of your report within 48 hours\n- We will provide regular updates on our progress\n- We will credit you for the discovery (unless you prefer to remain anonymous)\n\n### Security Best Practices\n\nWhen using this server:\n\n1. **Never commit credentials**: Always use environment variables for sensitive data\n2. **Keep dependencies updated**: Regularly run `npm audit` and update packages\n3. **Use least privilege**: Only grant the minimum required permissions\n4. **Rotate keys regularly**: Change your PlayFab Developer Secret Keys periodically\n\n## Support\n\n### Getting Help\n\nIf you encounter any issues or have questions about using the PlayFab MCP Server, here are the best ways to get support:\n\n1. **GitHub Issues**: For bug reports and feature requests, please [create an issue](https://github.com/akiojin/playfab-mcp-server/issues)\n2. **Discussions**: For general questions and community support, use [GitHub Discussions](https://github.com/akiojin/playfab-mcp-server/discussions)\n3. **Documentation**: Check the README and code comments for usage examples\n\n### Before Creating an Issue\n\nPlease check if your issue has already been reported by searching existing issues. If you find a similar issue, you can add additional information as a comment.\n\n### What We Support\n\n- Installation and setup questions\n- Bug reports with reproducible steps\n- Feature requests and suggestions\n- Documentation improvements\n\n### What We Don't Support\n\n- General PlayFab API questions (please refer to [PlayFab Documentation](https://docs.microsoft.com/gaming/playfab/))\n- Issues with third-party tools or services\n- Custom implementation requests\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "playfab",
        "ai",
        "akiojin",
        "playfab services",
        "playfab data",
        "playfab mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "arjunkmrm--mcp-minecraft": {
      "owner": "arjunkmrm",
      "name": "mcp-minecraft",
      "url": "https://github.com/arjunkmrm/mcp-minecraft",
      "imageUrl": "/freedevtools/mcp/pfp/arjunkmrm.webp",
      "description": "Integration with Minecraft enabling AI assistants to observe and interact with the Minecraft world through a bot. Supports interaction through the Model Context Protocol for enhanced functionality within the game.",
      "stars": 88,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T01:20:49Z",
      "readme_content": "# Minecraft MCP Integration\n\nA Model Context Protocol (MCP) integration for Minecraft that enables AI assistants to interact with a Minecraft server. This integration allows AI models to observe and interact with the Minecraft world through a bot.\n\n\n\n## Prerequisites\n\n1. Minecraft Launcher\n2. Node.js 18 or higher\n3. Claude Desktop App\n4. Java 21.0.5 (recommended)\n\n> ‚ö†Ô∏è Note: Currently only tested on macOS/Linux. Windows compatibility is not guaranteed.\n\n## Important Note\n\n1. **Use the F3+P Shortcut**:\nPress F3 + P together. This toggles the \"Pause on Lost Focus\" feature. Once turned off, you can switch to claude desktop and Minecraft will continue running without pausing.\n\n\n\n2. **Connection Issues on Claude Restart**:\nIf you restart Claude while the Minecraft server is running, you may experience MCP connection issues on the next claude launch due to lingering java process. See [Troubleshooting: MCP Connection Failed](#common-issues) for resolution steps.\n\n## Installation Steps\n\n1. **Download and Setup Minecraft Server**\n   - Download Minecraft server v1.21 from [mcversions.net/1.21](https://mcversions.net/download/1.21)\n   - Install Java 21.0.5 if not already installed (other versions are untested)\n   - Create a dedicated directory (e.g., `~/minecraft-server/`)\n   - Place the downloaded `server.jar` file in this directory\n   - Note down the absolute path to your `server.jar` file\n\n2. **Install and Configure MCP Integration**\n   \n   Quick Install (Recommended):\n   ```bash\n   npx -y @smithery/cli install mcp-minecraft --client claude\n   ```\n   Follow the CLI prompts to complete the setup.\n\n   Or Manual Setup:\n   - Navigate to `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Add the MCP server configuration:   \n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-minecraft\": {\n         \"command\": \"npx\",\n         \"args\": [\n           \"-y\",\n           \"mcp-minecraft@latest\",\n           \"--server-jar\",\n           \"/absolute/path/to/minecraft-server/server.jar\"\n         ]\n       }\n     }\n   }   \n   ```\n   > ‚ö†Ô∏è Replace `/absolute/path/to/minecraft-server/server.jar` with your actual server.jar path\n\n4. **Launch Claude Desktop**\n   - Start Claude Desktop after completing the configuration\n\n5. **Connect to Server**\n   - Open Minecraft Launcher\n   - Install and launch Minecraft Java Edition **v1.21**\n   - Click \"Play\" and Select \"Multiplayer\"\n   - Click \"Add Server\"\n   - Enter server details:\n     - Server Name: `Minecraft Server`\n     - Server Address: `localhost:25565`\n   - Click \"Done\"\n\n## Features\n\n### Resources\nThe integration exposes these MCP resources:\n\n- `minecraft://bot/location` - Current bot position in the world\n- `minecraft://bot/status` - Bot connection status\n\n### Tools\nAvailable MCP tools:\n\n- `chat` - Send chat messages to the server\n- `jump` - Make the bot jump\n- `moveForward` - Make the bot move forward\n- `moveBack` - Make the bot move backward\n- `turnLeft` - Make the bot turn left\n- `turnRight` - Make the bot turn right\n- `placeBlock` - Place a block at specified coordinates\n- `digBlock` - Break a block at specified coordinates\n- `getBlockInfo` - Get information about a block at specified coordinates\n- `selectSlot` - Select a hotbar slot (0-8)\n- `getInventory` - Get contents of bot's inventory\n- `equipItem` - Equip an item by name to specified destination\n- `getStatus` - Get bot's current status (health, food, position, etc.)\n- `getNearbyEntities` - Get list of nearby entities within range\n- `attack` - Attack a nearby entity by name\n- `useItem` - Use/activate the currently held item\n- `stopUsingItem` - Stop using/deactivate the current item\n- `lookAt` - Make the bot look at specific coordinates\n- `followPlayer` - Follow a specific player\n- `stopFollowing` - Stop following current target\n- `goToPosition` - Navigate to specific coordinates\n\n## Technical Details\n\n- Server runs in offline mode for local development\n- Default memory allocation: 2GB\n- Default port: 25565\n- Bot username: MCPBot\n\n## Troubleshooting\n\n### Common Issues\n\n1. **MCP Connection Failed**\n   - Look for lingering Java processes\n   - Terminate them manually:\n      - Windows: Use Task Manager (untested)\n      - Mac/Linux: \n         - Go to 'Activity Monitor' and 'Force Quit' java\n   - Restart computer if process termination fails\n   - Note: Latest version should auto-resolve these issues\n\n2. **Server Won't Start**\n   - Verify Java is installed\n   - Check server.jar path is correct\n   - Ensure port 25565 is available\n\n3. **Can't Connect to Server**\n   - Verify server is running (check logs)\n   - Confirm you're using \"localhost\" as server address\n   - Check firewall settings\n\n### Logs Location\n- Minecraft Server logs: Check the minecraft-server directory\n- Claude Desktop logs: `~/Library/Logs/Claude/mcp*.log`\n\n## Contributing\n\nContributions, big or small, are welcome!\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "minecraft",
        "ai",
        "interact",
        "mcp minecraft",
        "interact minecraft",
        "minecraft integration"
      ],
      "category": "gaming-and-game-development"
    },
    "awayzo--rpg": {
      "owner": "awayzo",
      "name": "rpg",
      "url": "https://github.com/awayzo/rpg",
      "imageUrl": "/freedevtools/mcp/pfp/awayzo.webp",
      "description": "A browser-based multiplayer RPG that facilitates empire expansion, strategic battles, and resource management among players. It supports the creation and sharing of platformer mini-games, offering rewards and robust community management features.",
      "stars": 1,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "",
      "updated_at": "2025-07-28T16:52:02Z",
      "readme_content": "# Strategy Role-Playing Game\n\n<p align=\"center\">\n    <a href=\"https://www.youtube.com/watch?v=KABh8CwpSM4\">\n        <img alt=\"ae90842e_d5aa_4326_a23c_7ff7e7a835cb\" src=\"https://repository-images.githubusercontent.com/330349397/ae90842e-d5aa-4326-a23c-7ff7e7a835cb\"/>\n    </a>\n</p>\n\nHost a stunning browser-based multiplayer RPG (Role-Playing Game) for the first time ever on WordPress.\n\n## Description\n\nRPG is a browser-based multi-player strategy role-playing game.\n\nThe main goal is to expand your empire and complete research activities in order to uncover the history of your species.\n\nYou can form cities, attack and spy on other players and robots, send resources between cities, complete research activities and use premium modifiers to boost your gameplay.\n\nCreate your own platformer mini-games and play games created by others to earn rewards.\n\n### Desktop version\n\nWe strongly believe in the right to be forgotten so when you're done testing the game just click on the \"Delete Account\" button from the game settings.\n\nA free Desktop Client is available on [Steam](https://store.steampowered.com/app/909060) and [GitHub](https://github.com/markjivko/rpg-Client-Desktop).\n\n### Artificial Intelligence\n\nYou can play this game by yourself or against robots or other players.\n\nRobots can perform the following tasks:\n\n * Create buildings according to the Building Advisor\n * Assign workers to buildings\n * Randomly upgrade existing buildings\n * Perform research activities\n \nRobots can also perform military activities:\n\n * Queue military units and ships\n * Estimate the best time for attack\n * Systematically attack other players\n\n### Internationalization\nEach player is free to choose their own language. \nSystem messages are translated just-in-time, meaning users can switch their language at any time and the inbox gets translated as well.\nGame language settings are separate from your WordPress language options.\n\n### WordPress Multi-site read\nYou can enable RPG on your entire network and run different games on each sub-site, similar to the concept of \"realms\". \n\n### Platformer\nDesign your own platformer mini-levels and play games created by others to earn gems!\n\n### Progressive Web Applicatio\nThe game can be played on any mobile device in landscape mode and on the desktop.\nIt functions as a progressive web application, handling offline mode and file requests in a way that mimics truly native applications.\n\n### Optimized CPU usage\nAll game resource and queue changes, convoy updates and robot actions are computed on-demand with time-lapse procedures that are optimized for speed and memory usage.\nDatabase interactions are optimized with minimal and fast select queries and multi-insert and multi-update queries in order provide a seamless real-time experience for all players.\nOptional performance optimizations are available in the Game Mechanics.\n\n### Optimized bandwidt\nUsing progressive web apps, game assets are automatically stored in the browser **cache storage** via service workers.\nThis results in 2ms fetch times and no requests made to your server, minimizing band width and drastically improving player experience.\nImage sprites are used to reduce the number of requests to your server further and all PNG files have been compressed with pngquant.\n\n### Game masters\nYou can promote players to the rank of game master, allowing them to moderate platformer games, access the Admin Console and more.\nGame admins (WordPress site super-admins) cannot be demoted and implicitly have game master abilities.\n\n### Command Line Interface\nAs a game master, you have complete control over your game.\nJust press **Alt+Ctrl+C** to toggle the console and type **help** to list all available commands.\nYou can add resources to players, change building levels, fast-forward the game and more.\n\n### Dashboard\nGet a birds-eye view of your game community in the Game Dashboard.\nYou can also send announcements to your players; MarkDown syntax is enabled.\n\n### Microtransactions (PRO)\nYou can enable microtransactions using PayPal and start monetizing your game.\n\n### Audio Experience (PRO)\nPlugins uploaded to WorPress.org are limited to 10MB in size so audio files and many other assets had to be packaged with the PRO plugin.\nControl the game music and ambiance and enjoy immersive stereo playback.\n\n### Game Mechanics (PRO)\nThe Game Mechanics is a comprehensive options panel that allows you to customize every aspect of the game from game labels - with internationalization support - to game objects.\nEvery option and feature is documented in English only.\n\n### Themes (PRO)\nYou can modify the design of your game to your heart's content directly from your browser.\nThemes are meant to be portable, i.e. you can export your game design and game mechanics changes as your very own themes\nin the form of Zip archives. \nAll themes are licensed under Creative Commons Attribution Share-Alike 4.0\n\n### Frequently Asked Questions\n\n#### How to get started?\nJust follow the short tutorial and the advice of the **Upgrade Advisor**.\nThe Codex is also available to learn more about how the game works (**Settings** > **Codex**).\nYou can also click on the question mark (?) symbols to learn more.\n\n#### How do I embed this?\nYou can use either the **[rpg]** shortcode or the **Role-playing game** Gutenberg block anywhere you want.\nUnauthenticated players will be greeted with a login page.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rpg",
        "awayzo",
        "gaming",
        "awayzo rpg",
        "multiplayer rpg",
        "rpg browser"
      ],
      "category": "gaming-and-game-development"
    },
    "ayeletstudioindia--unreal-analyzer-mcp": {
      "owner": "ayeletstudioindia",
      "name": "unreal-analyzer-mcp",
      "url": "https://github.com/ayeletstudioindia/unreal-analyzer-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ayeletstudioindia.webp",
      "description": "Provides in-depth analysis of Unreal Engine source code, focusing on class details, inheritance hierarchies, and context-aware code search capabilities.",
      "stars": 102,
      "forks": 21,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T19:06:44Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ayeletstudioindia-unreal-analyzer-mcp-badge.png)](https://mseep.ai/app/ayeletstudioindia-unreal-analyzer-mcp)\n\n<!--\nCreated by Ayelet Technology Private Limited\n-->\n\n# Unreal Engine Code Analyzer MCP Server\n\nA Model Context Protocol (MCP) server that provides powerful source code analysis capabilities for Unreal Engine codebases. This tool enables AI assistants like Claude and Cline to deeply understand and analyze Unreal Engine source code.\n\n\n<a href=\"https://glama.ai/mcp/servers/z36022whws\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/z36022whws/badge\" alt=\"Unreal Engine Code Analyzer Server MCP server\" /></a>\n\n## Features\n\n- **Class Analysis**: Get detailed information about C++ classes including methods, properties, and inheritance\n- **Hierarchy Mapping**: Visualize and understand class inheritance hierarchies\n- **Code Search**: Search through code with context-aware results\n- **Reference Finding**: Locate all references to classes, functions, or variables\n- **Subsystem Analysis**: Analyze major Unreal Engine subsystems like Rendering, Physics, etc.\n- **Game Genre Knowledge**: Built-in knowledge base of game genres, features, and implementation patterns\n- **Pattern Detection & Learning**: Identifies common Unreal Engine patterns and provides learning resources\n- **Custom Codebase Support**: Analyze your own Unreal Engine project codebase\n\n\n## Quick Start\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/ayeletstudioindia/unreal-analyzer-mcp\ncd unreal-analyzer-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\n### For Claude Desktop App\n\nAdd the following to your Claude desktop configuration file (`%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"unreal-analyzer\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/unreal-analyzer/build/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n### For Cline\n\nAdd the following to your Cline MCP settings file (`%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"unreal-analyzer\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/unreal-analyzer/build/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n## Technical Details\n\nThe analyzer is built using:\n- TypeScript for type-safe code\n- Tree-sitter for robust C++ parsing\n- Model Context Protocol SDK for AI assistant integration\n- Glob for file pattern matching\n\nKey dependencies:\n- @modelcontextprotocol/create-server: ^0.1.0\n- tree-sitter: ^0.20.1\n- tree-sitter-cpp: ^0.20.0\n- glob: ^8.1.0\n\n## Usage\n\nBefore using any analysis tools, you must first set either the Unreal Engine source path or a custom codebase path:\n\n### Setting Up Analysis\n\n#### For Unreal Engine Source Code\n```typescript\n{\n  \"name\": \"set_unreal_path\",\n  \"arguments\": {\n    \"path\": \"/path/to/UnrealEngine/Source\"\n  }\n}\n```\n\n#### For Custom C++ Codebases\n```typescript\n{\n  \"name\": \"set_custom_codebase\",\n  \"arguments\": {\n    \"path\": \"/path/to/your/codebase\"\n  }\n}\n```\n\nThe custom codebase feature allows you to analyze any C++ project. For example:\n- Game engines (Unity, Godot, custom engines)\n- Graphics libraries (OpenGL, Vulkan, DirectX)\n- Frameworks (Qt, Boost, SFML)\n- Any C++ application or library\n\nExample analyzing a custom game engine:\n```typescript\n// Initialize with custom codebase\n{\n  \"name\": \"set_custom_codebase\",\n  \"arguments\": {\n    \"path\": \"/path/to/game-engine\"\n  }\n}\n\n// Analyze engine's renderer class\n{\n  \"name\": \"analyze_class\",\n  \"arguments\": {\n    \"className\": \"Renderer\"\n  }\n}\n\n// Find all shader-related code\n{\n  \"name\": \"search_code\",\n  \"arguments\": {\n    \"query\": \"shader|glsl|hlsl\",\n    \"filePattern\": \"*.{h,cpp,hpp}\"\n  }\n}\n\n// Get render system class hierarchy\n{\n  \"name\": \"find_class_hierarchy\",\n  \"arguments\": {\n    \"className\": \"RenderSystem\",\n    \"includeImplementedInterfaces\": true\n  }\n}\n```\n\nExample analyzing a Qt application:\n```typescript\n// Initialize with Qt project\n{\n  \"name\": \"set_custom_codebase\",\n  \"arguments\": {\n    \"path\": \"/path/to/qt-app\"\n  }\n}\n\n// Find widget class definitions\n{\n  \"name\": \"search_code\",\n  \"arguments\": {\n    \"query\": \"class.*:.*public.*QWidget\",\n    \"filePattern\": \"*.h\"\n  }\n}\n\n// Analyze main window class\n{\n  \"name\": \"analyze_class\",\n  \"arguments\": {\n    \"className\": \"MainWindow\"\n  }\n}\n\n// Find signal/slot connections\n{\n  \"name\": \"find_references\",\n  \"arguments\": {\n    \"identifier\": \"connect\",\n    \"type\": \"function\"\n  }\n}\n```\n\n### Available Tools\n\n#### 1. Class Analysis\n```typescript\n// Get detailed information about the AActor class\n{\n  \"name\": \"analyze_class\",\n  \"arguments\": {\n    \"className\": \"AActor\"\n  }\n}\n```\nExample output:\n```json\n{\n  \"name\": \"AActor\",\n  \"properties\": [\n    {\n      \"name\": \"RootComponent\",\n      \"type\": \"USceneComponent*\",\n      \"access\": \"protected\"\n    }\n    // ... other properties\n  ],\n  \"methods\": [\n    {\n      \"name\": \"BeginPlay\",\n      \"returnType\": \"void\",\n      \"access\": \"protected\",\n      \"virtual\": true\n    }\n    // ... other methods\n  ]\n}\n```\n\n#### 2. Class Hierarchy Analysis\n```typescript\n// Get the inheritance hierarchy for ACharacter\n{\n  \"name\": \"find_class_hierarchy\",\n  \"arguments\": {\n    \"className\": \"ACharacter\",\n    \"includeImplementedInterfaces\": true\n  }\n}\n```\nExample output:\n```json\n{\n  \"class\": \"ACharacter\",\n  \"inheritsFrom\": \"APawn\",\n  \"interfaces\": [\"IMovementModeInterface\"],\n  \"hierarchy\": [\n    \"ACharacter\",\n    \"APawn\",\n    \"AActor\",\n    \"UObject\"\n  ]\n}\n```\n\n#### 3. Reference Finding\n```typescript\n// Find all references to the BeginPlay function\n{\n  \"name\": \"find_references\",\n  \"arguments\": {\n    \"identifier\": \"BeginPlay\",\n    \"type\": \"function\"\n  }\n}\n```\nExample output:\n```json\n{\n  \"references\": [\n    {\n      \"file\": \"Actor.cpp\",\n      \"line\": 245,\n      \"context\": \"void AActor::BeginPlay() { ... }\"\n    },\n    {\n      \"file\": \"Character.cpp\",\n      \"line\": 178,\n      \"context\": \"Super::BeginPlay();\"\n    }\n  ]\n}\n```\n\n#### 4. Code Search\n```typescript\n// Search for physics-related code\n{\n  \"name\": \"search_code\",\n  \"arguments\": {\n    \"query\": \"PhysicsHandle\",\n    \"filePattern\": \"*.h\",\n    \"includeComments\": true\n  }\n}\n```\nExample output:\n```json\n{\n  \"matches\": [\n    {\n      \"file\": \"PhysicsEngine/PhysicsHandleComponent.h\",\n      \"line\": 15,\n      \"context\": \"class UPhysicsHandleComponent : public UActorComponent\",\n      \"snippet\": \"// Component used for grabbing and moving physics objects\"\n    }\n  ]\n}\n```\n\n#### 5. Pattern Detection & Best Practices\n\nThe analyzer provides two powerful tools for understanding and following Unreal Engine best practices:\n\n##### Pattern Detection\n```typescript\n// Detect patterns in a file\n{\n  \"name\": \"detect_patterns\",\n  \"arguments\": {\n    \"filePath\": \"Source/MyGame/MyActor.h\"\n  }\n}\n```\nExample output:\n```json\n{\n  \"patterns\": [\n    {\n      \"pattern\": \"UPROPERTY Macro\",\n      \"description\": \"Property declaration for Unreal reflection system\",\n      \"location\": \"Source/MyGame/MyActor.h:15\",\n      \"context\": \"UPROPERTY(EditAnywhere, BlueprintReadWrite)\\nfloat Health;\",\n      \"improvements\": \"Consider adding a Category specifier for better organization\\nConsider adding Meta tags for validation\",\n      \"documentation\": \"https://docs.unrealengine.com/5.0/en-US/unreal-engine-uproperty-specifier-reference/\",\n      \"bestPractices\": \"Use appropriate specifiers (EditAnywhere, BlueprintReadWrite)\\nConsider replication needs (Replicated, ReplicatedUsing)\\nGroup related properties with categories\",\n      \"examples\": \"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \\\"Combat\\\")\\nfloat Health;\\nUPROPERTY(Replicated, Meta = (ClampMin = \\\"0.0\\\"))\\nfloat Speed;\"\n    }\n  ]\n}\n```\n\n##### Best Practices Guide\n```typescript\n// Get best practices for specific Unreal concepts\n{\n  \"name\": \"get_best_practices\",\n  \"arguments\": {\n    \"concept\": \"UPROPERTY\"  // or UFUNCTION, Components, Events, Replication, Blueprints\n  }\n}\n```\nExample output:\n```json\n{\n  \"description\": \"Property declaration for Unreal reflection system\",\n  \"bestPractices\": [\n    \"Use appropriate specifiers (EditAnywhere, BlueprintReadWrite)\",\n    \"Consider replication needs (Replicated, ReplicatedUsing)\",\n    \"Group related properties with categories\",\n    \"Use Meta tags for validation and UI customization\"\n  ],\n  \"examples\": [\n    \"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \\\"Combat\\\")\\nfloat Health;\",\n    \"UPROPERTY(Replicated, Meta = (ClampMin = \\\"0.0\\\"))\\nfloat Speed;\"\n  ],\n  \"documentation\": \"https://docs.unrealengine.com/5.0/en-US/unreal-engine-uproperty-specifier-reference/\"\n}\n```\n\nThe best practices guide covers key Unreal Engine concepts:\n- UPROPERTY: Property reflection and exposure\n- UFUNCTION: Function reflection and Blueprint integration\n- Components: Component creation and management\n- Events: Event handling and delegation\n- Replication: Network replication setup\n- Blueprints: Blueprint/C++ interaction patterns\n\n#### 6. API Documentation Query\n```typescript\n// Search the API documentation\n{\n  \"name\": \"query_api\",\n  \"arguments\": {\n    \"query\": \"Actor\",\n    \"category\": \"Object\",\n    \"module\": \"Core\",\n    \"includeExamples\": true,\n    \"maxResults\": 10\n  }\n}\n```\nExample output:\n```json\n{\n  \"results\": [\n    {\n      \"class\": \"AActor\",\n      \"description\": \"Base class for all actors in the game\",\n      \"module\": \"Core\",\n      \"category\": \"Object\",\n      \"syntax\": \"class AActor : public UObject\",\n      \"examples\": [\n        \"// Create a new actor\\nAActor* MyActor = GetWorld()->SpawnActor<AActor>();\"\n      ],\n      \"remarks\": [\n        \"Actors are the base building blocks of the game\",\n        \"Can be placed in levels or spawned dynamically\"\n      ],\n      \"documentation\": \"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Core/AActor\",\n      \"relevance\": 100\n    }\n  ]\n}\n```\n\nThe API documentation query tool provides:\n- Full-text search across class documentation\n- Filtering by category and module\n- Code examples and usage patterns\n- Relevance-based sorting of results\n- Links to official documentation\n\n#### 7. Subsystem Analysis\n```typescript\n// Analyze the Physics subsystem\n{\n  \"name\": \"analyze_subsystem\",\n  \"arguments\": {\n    \"subsystem\": \"Physics\"\n  }\n}\n```\nExample output:\n```json\n{\n  \"name\": \"Physics\",\n  \"coreClasses\": [\n    \"UPhysicsEngine\",\n    \"FPhysScene\",\n    \"UBodySetup\"\n  ],\n  \"keyFeatures\": [\n    \"PhysX integration\",\n    \"Collision detection\",\n    \"Physical materials\"\n  ],\n  \"commonUseCases\": [\n    \"Character movement\",\n    \"Vehicle simulation\",\n    \"Destructible environments\"\n  ]\n}\n```\n\n### API Documentation\n\nThe analyzer now includes comprehensive API documentation capabilities:\n\n1. **Automatic Documentation Generation**\n   - Extracts documentation from source code comments\n   - Analyzes class structure and relationships\n   - Categorizes classes by type and module\n   - Generates syntax examples and usage patterns\n\n2. **Smart Search**\n   - Full-text search across all documentation\n   - Relevance-based ranking of results\n   - Category and module filtering\n   - Code example inclusion\n\n3. **Documentation Categories**\n   - Object: Base object classes (UObject derivatives)\n   - Actor: Actor classes (AActor derivatives)\n   - Structure: Data structures and types\n   - Component: Component classes\n   - Miscellaneous: Other classes and utilities\n\n4. **Module Organization**\n   - Core: Core engine functionality\n   - RenderCore: Rendering system\n   - PhysicsCore: Physics engine\n   - And other engine modules\n\n5. **Integration with Existing Tools**\n   - Links with class analysis for detailed information\n   - Connects to pattern detection for best practices\n   - References official Unreal Engine documentation\n   - Provides learning resources and examples\n\n### Best Practices\n\n1. Always set either the Unreal Engine path or custom codebase path before using analysis tools\n2. Use specific class names when analyzing (e.g., \"MyClass\" instead of just \"Class\")\n3. Leverage the file pattern parameter in `search_code` to narrow down results\n4. Include implemented interfaces when analyzing class hierarchies for complete understanding\n5. Use the subsystem analysis tool to get a high-level overview before diving into specific classes (Unreal Engine only)\n\n### Error Handling\n\nThe analyzer will throw clear error messages when:\n- No codebase path is set (Unreal Engine or custom)\n- Provided path does not exist or is inaccessible\n- Class or symbol cannot be found in the codebase\n- Invalid file patterns are provided\n- Syntax errors in search queries or C++ code\n- Access to source files is restricted\n- Tree-sitter parsing fails for C++ files\n\n### Performance Considerations\n\n- Large codebases may take longer to analyze\n- Complex class hierarchies might require more processing time\n- Broad search patterns could result in many matches\n- Consider using more specific queries for faster results\n\n## Testing\n\nThe project includes comprehensive test coverage for all major components:\n\n### Test Coverage\n\n- **Analyzer Tests**: Core functionality tests for the UnrealCodeAnalyzer class\n  - Initialization and path validation\n  - Class analysis and parsing\n  - Reference finding\n  - Code searching\n  - Subsystem analysis\n  - Cache management\n\n- **Game Genres Tests**: Validation of the game genres knowledge base\n  - Data structure verification\n  - Genre-specific feature validation\n  - Component naming conventions\n  - Data completeness checks\n\n- **MCP Server Tests**: Testing of the MCP server implementation\n  - Server initialization\n  - Tool registration and handling\n  - Request/response validation\n  - Error handling\n  - Tool-specific functionality tests\n\n### Running Tests\n\nRun all tests:\n```bash\nnpm test\n```\n\nRun tests in watch mode (useful during development):\n```bash\nnpm run test:watch\n```\n\n### Writing Tests\n\nWhen contributing new features, please ensure:\n1. All new functionality has corresponding test coverage\n2. Tests are organized in the `src/__tests__` directory\n3. Mock external dependencies appropriately\n4. Follow the existing test patterns for consistency\n\n## Contributing\n\nContributions are welcome! Please feel free to submit pull requests with improvements to:\n\n- Source code parsing capabilities\n- New analysis features\n- Performance optimizations\n- Documentation improvements\n- Test coverage\n\nBefore submitting a PR:\n1. Ensure all tests pass (`npm test`)\n2. Add tests for new functionality\n3. Update documentation as needed\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ayeletstudioindia",
        "analyzer",
        "code",
        "unreal engine",
        "unreal analyzer",
        "source code"
      ],
      "category": "gaming-and-game-development"
    },
    "chromewillow--greyhack-mcp-server": {
      "owner": "chromewillow",
      "name": "greyhack-mcp-server",
      "url": "https://github.com/chromewillow/greyhack-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/chromewillow.webp",
      "description": "Facilitates Grey Hack game development with tools for code search, transpilation, and validation against the official Grey Hack API. Streamlines coding tasks by generating templates for common game functionalities.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-12T17:40:46Z",
      "readme_content": "# Grey Hack MCP Server\n\nA Model Context Protocol (MCP) server for Grey Hack game development, designed to work with Cursor IDE and other MCP-compatible tools.\n\n## Features\n\n- **GitHub Code Search**: Find Grey Hack code examples from GitHub repositories\n- **Greybel-JS Transpilation**: Convert GreyScript to JavaScript\n- **GreyScript API Validation**: Validate code against the official Grey Hack API\n- **Script Generation**: Generate template scripts for common game tasks\n\n## Installation\n\n### Prerequisites\n\n- Node.js 18+ installed\n- Cursor IDE or another MCP-compatible editor\n- GitHub API token (for code search functionality)\n\n### Install from NPM\n\n```bash\nnpm install -g @chromewillow/greyhack-mcp-server\n```\n\n### Manual Installation\n\nClone the repository and install dependencies:\n\n```bash\ngit clone https://github.com/chromewillow/greyhack-mcp-server.git\ncd greyhack-mcp-server\nnpm install\nnpm run build\n```\n\n## Usage with Cursor IDE\n\n### Using Configuration File\n\nCreate a `.cursor/mcp.json` file in your workspace with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"@greyhack-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@chromewillow/greyhack-mcp-server\",\n        \"--config\",\n        \"{\\\"GITHUB_TOKEN\\\":\\\"your-github-token-here\\\"}\"\n      ]\n    }\n  }\n}\n```\n\n### Manual Configuration in Cursor\n\n1. Open Cursor settings (Cmd/Ctrl + ,)\n2. Navigate to Features ‚Üí MCP\n3. Click \"+ Add New MCP Server\"\n4. Enter the following details:\n   - Name: `greyhack-mcp-server`\n   - Command: `npx`\n   - Arguments: `-y @smithery/cli@latest run @chromewillow/greyhack-mcp-server`\n   - Environment Variables: `GITHUB_TOKEN=your-github-token-here`\n\n## Available Tools\n\n### 1. GitHub Code Search\n\nSearch for Grey Hack code examples on GitHub:\n\n```\nUse the search_greyhack_code tool to find examples of port scanners in Grey Hack\n```\n\n### 2. Greybel-JS Transpilation\n\nConvert GreyScript code to JavaScript:\n\n```\nUse the transpile_greyscript tool to convert this Grey Hack code to JavaScript:\nget_shell.host_computer.File(\"/home/user/test.txt\")\n```\n\n### 3. GreyScript API Validation\n\nValidate your code against the Grey Hack API:\n\n```\nUse the validate_greyscript tool to check if this code is valid in Grey Hack 0.8.0:\nrouter = get_router\nip = router.local_ip\n```\n\n### 4. Script Generation\n\nGenerate template scripts for common game tasks:\n\n```\nUse the generate_greyhack_script tool to create a port scanner for Grey Hack 0.8.0\n```\n\nAvailable script types:\n- `port_scanner`: Network port scanning utility\n- `password_cracker`: Password cracking tool\n- `file_browser`: File browsing and manipulation utility\n- `ssh_tool`: SSH connection utility\n- `custom`: Custom script template (requires description)\n\n## Development\n\n### Building from Source\n\n```bash\nnpm run build\n```\n\n### Running in Development Mode\n\n```bash\nnpm run dev\n```\n\n## License\n\nMIT\n\n## Acknowledgments\n\nThis project uses:\n- Model Context Protocol TypeScript SDK\n- Smithery GitHub Client\n- Axios for HTTP requests",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "greyhack",
        "hack",
        "grey",
        "grey hack",
        "hack game",
        "chromewillow greyhack"
      ],
      "category": "gaming-and-game-development"
    },
    "cryppadotta--scryfall-mcp": {
      "owner": "cryppadotta",
      "name": "scryfall-mcp",
      "url": "https://github.com/cryppadotta/scryfall-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/cryppadotta.webp",
      "description": "Interact with the Scryfall API to retrieve Magic: The Gathering card details, rulings, and pricing information. It enables text-based searches and direct access to card data using UUID or name.",
      "stars": 14,
      "forks": 8,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-04T09:33:22Z",
      "readme_content": "# Scryfall MCP Server\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server for interacting with the [Scryfall](https://scryfall.com/docs/api) API. It provides tools to look up Magic: The Gathering card details, card rulings, and price information.\n\n\n\n## Features\n\n- **search_cards**  \n  Perform a text-based search on Scryfall. Returns a list of matching cards.\n- **get_card_by_id**  \n  Retrieve a card directly via its Scryfall UUID.\n- **get_card_by_name**  \n  Retrieve a card by exact English name.\n- **random_card**  \n  Get a random card from the entire Scryfall database.\n- **get_rulings**  \n  Retrieve official rulings for a card, which may clarify card interactions or rules.\n- **get_prices_by_id**  \n  Retrieve current pricing information (USD, USD foil, EUR, TIX) for a given card by Scryfall ID.\n- **get_prices_by_name**  \n  Retrieve current pricing information (USD, USD foil, EUR, TIX) for a given card by exact name.\n\n## Usage\n\nThe server can be run in two modes:\n\n1. Standard stdio mode (default)\n2. Server-Sent Events (SSE) mode with HTTP endpoints\n\n### Using NPX\n\nIf you have Node.js installed locally:\n\n```bash\n# Stdio mode\nnpx scryfall-mcp-server\n\n# SSE mode\nnpx scryfall-mcp-server --sse\n```\n\n### Connecting to the Server\n\n#### Stdio Mode\n\nYour application or environment (like Claude Desktop) can communicate directly via stdio with the server.\n\n#### SSE Mode\n\nWhen running in SSE mode (with `--sse`), you can connect using the MCP CLI:\n\n```bash\nnpx @wong2/mcp-cli --sse http://localhost:3000/sse\n```\n\nThe server will be available at:\n\n- SSE endpoint: `http://localhost:3000/sse`\n- Message endpoint: `http://localhost:3000/messages`\n\n### Integration in claude_desktop_config.json\n\nExample snippet for stdio mode:\n\n```json\n{\n  \"mcpServers\": {\n    \"scryfall\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/scryfall\"]\n    }\n  }\n}\n```\n\nOr with npx:\n\n```json\n{\n  \"mcpServers\": {\n    \"scryfall\": {\n      \"command\": \"npx\",\n      \"args\": [\"scryfall-mcp-server\"]\n    }\n  }\n}\n```\n\n### Building from Docker\n\n```bash\ndocker build -t mcp/scryfall .\n```\n\nThen you can run in stdio mode:\n\n```bash\ndocker run -i --rm mcp/scryfall\n```\n\nOr in SSE mode:\n\n```bash\ndocker run -i --rm -p 3000:3000 mcp/scryfall --sse\n```\n\n## License\n\nLicensed under the MIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scryfall",
        "cryppadotta",
        "card",
        "scryfall api",
        "cryppadotta scryfall",
        "scryfall mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "dsp--mcp-server-steam": {
      "owner": "dsp",
      "name": "mcp-server-steam",
      "url": "https://github.com/dsp/mcp-server-steam",
      "imageUrl": "/freedevtools/mcp/pfp/dsp.webp",
      "description": "Fetches user gaming information and preferences from Steam, providing AI assistants with context on users' gaming activities. Integrates with the Steam API to enhance gaming interactions.",
      "stars": 3,
      "forks": 4,
      "license": "MIT License",
      "language": "Java",
      "updated_at": "2025-08-03T00:38:52Z",
      "readme_content": "# MCP Steam Server\n\nA Model Context Protocol (MCP) server that provides Steam gaming context to AI assistants. This service integrates with the Steam API to fetch user gaming information and exposes it through the MCP protocol, allowing AI assistants to access and understand users' gaming activities and preferences.\n\n## Installation\n\n### Using Docker (Recommended)\n\nThe easiest way to run the MCP Steam server is using Docker:\n\n```bash\ndocker run --rm -i ghcr.io/dsp/mcp-server-steam:latest\n```\n\n### Configuration\n\nThe server can be configured using environment variables:\n\n```bash\n# Required configuration\nSTEAM_API_KEY=your_steam_api_key\n```\n\n## Development\n\n### Prerequisites\n\n- OpenJDK 21\n- Docker (for container builds)\n- Git\n- [devenv.sh](https://devenv.sh)\n\n### Setting Up Development Environment\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/dsp/mcp-steam.git\n   cd mcp-steam\n   ```\n\n2. Use the development shell:\n   ```bash\n   devshell shell\n   ```\n   This will set up the required development environment with all necessary dependencies.\n\n3. Build the project:\n   ```bash\n   mvn package\n   ```\n\n### Building Docker Image Locally\n\n```bash\ndocker build -t mcp-server-steam .\n```\n\n## API Documentation\n\nThe server implements the Model Context Protocol (MCP) specification. For detailed API documentation, please refer to the [MCP Documentation](https://modelcontextprotocol.io).\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "steam",
        "dsp",
        "gaming",
        "steam api",
        "server steam",
        "dsp mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "freshlife001--mcp_poker": {
      "owner": "freshlife001",
      "name": "mcp_poker",
      "url": "https://github.com/freshlife001/mcp_poker",
      "imageUrl": "/freedevtools/mcp/pfp/freshlife001.webp",
      "description": "Connect to a Texas Hold'em poker game where players can strategize moves with LLM agents. The MCP server serves as the interface between AI models and gameplay, enhancing the poker experience with automated decisions and actions.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-08T11:39:54Z",
      "readme_content": "# Texas Holdem MCP Server\n\nThis is an [Model Context Protocol server](https://github.com/modelcontextprotocol/servers) that allows an MCP client agents to play a game of [Texas Holdem poker game](<https://simple.wikipedia.org/wiki/Texas_hold_%27em>). It is implemented with Node.js and TypeScript, including game server, game client, and a MCP Server.\n\nMost Code in this project is generated by AI(Claude-3.7-Sonnet), and it tooks about 5 hours to improve and debug. Its Amazing!\n\n## Online Demo\n\n[Texas Holdem Online](<https://poker.ihuaj.com/>)\n\n\n<a href=\"https://glama.ai/mcp/servers/@freshlife001/mcp_poker\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@freshlife001/mcp_poker/badge\" alt=\"Texas Holdem Server MCP server\" />\n</a>\n\n\n\n\n\n\n\n## Getting started\n\n* Build :\n\n```bash\nnpm install\nnpm run build\n```\n\n* Run Poker Server:\n\n```bash\nnpm run dev\n```\n\n* Open Poker Client:\nOpen your browser visit http://localhost:3000/\n\n- Configure your MCP client to add the tool. For example, here is how to add the tool to Cline, assuming you cloned the repo at `/path/to/poker-mcp-server`:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"poker-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/poker-mcp-server/dist/mcpServer.js\"],\n      \"env\": {\n        \"DEBUG\": \"*\"\n      }\n    }\n  }\n}\n```\n\n- Cline:\n\n  \n\n## Example prompt\n\n```\nYou are a Texas Hold'em poker expert. Please use the name \"Super Awesome Pro\" to join a Texas Hold'em poker game and win more chips. You can only use the functions provided by the poker-mcp-server MCP server. After joining the game, you must wait for your turn to act before proceeding to the next move.\n```\n\nEnjoy Playing Poker With LLM!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_poker",
        "poker",
        "mcp",
        "mcp_poker connect",
        "freshlife001 mcp_poker",
        "poker game"
      ],
      "category": "gaming-and-game-development"
    },
    "gerred--mcpmc": {
      "owner": "gerred",
      "name": "mcpmc",
      "url": "https://github.com/gerred/mcpmc",
      "imageUrl": "/freedevtools/mcp/pfp/gerred.webp",
      "description": "MCPMC is an MCP server that facilitates interaction with Minecraft through the Mineflayer library, enabling AI agents to control Minecraft bots using a standardized JSON-RPC interface.",
      "stars": 34,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-11T04:41:26Z",
      "readme_content": "# MCPMC (Minecraft Model Context Protocol)\n\n[![npm version](https://badge.fury.io/js/@gerred%2Fmcpmc.svg)](https://badge.fury.io/js/@gerred%2Fmcpmc)\n[![npm downloads](https://img.shields.io/npm/dm/@gerred/mcpmc.svg)](https://www.npmjs.com/package/@gerred/mcpmc)\n[![CI](https://github.com/gerred/mcpmc/workflows/CI/badge.svg)](https://github.com/gerred/mcpmc/actions?query=workflow%3ACI)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol (MCP) server for interacting with Minecraft via Mineflayer. This package enables AI agents to control Minecraft bots through a standardized JSON-RPC interface.\n\n## Features\n\n- Full MCP compatibility for AI agent integration\n- Built on Mineflayer for reliable Minecraft interaction\n- Supports navigation, block manipulation, inventory management, and more\n- Real-time game state monitoring\n- Type-safe API with TypeScript support\n\n## Installation\n\n```bash\n# Using npm\nnpm install @gerred/mcpmc\n\n# Using yarn\nyarn add @gerred/mcpmc\n\n# Using bun\nbun add @gerred/mcpmc\n```\n\n## Usage\n\n```bash\n# Start the MCP server\nmcpmc\n```\n\nThe server communicates via stdin/stdout using the Model Context Protocol. For detailed API documentation, use the MCP inspector:\n\n```bash\nbun run inspector\n```\n\n## Development\n\n```bash\n# Install dependencies\nbun install\n\n# Run tests\nbun test\n\n# Build the project\nbun run build\n\n# Watch mode during development\nbun run watch\n\n# Run MCP inspector\nbun run inspector\n```\n\n## Contributing\n\nContributions are welcome! Please follow these steps:\n\n1. Fork the repository\n2. Create a new branch for your feature\n3. Write tests for your changes\n4. Make your changes\n5. Run tests and ensure they pass\n6. Submit a pull request\n\nPlease make sure to update tests as appropriate and adhere to the existing coding style.\n\n## License\n\nMIT License\n\nCopyright (c) 2024 Gerred Dillon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpmc",
        "mcp",
        "minecraft",
        "mcpmc mcpmc",
        "mcpmc mcp",
        "gerred mcpmc"
      ],
      "category": "gaming-and-game-development"
    },
    "gstarwd--doompdf": {
      "owner": "gstarwd",
      "name": "doompdf",
      "url": "https://github.com/gstarwd/doompdf",
      "imageUrl": "/freedevtools/mcp/pfp/gstarwd.webp",
      "description": "Integrates the classic DOOM game into PDF documents, enabling interactive gameplay within static files via PDF's JavaScript capabilities. This project transforms traditional document formats into innovative gaming platforms while maintaining the essence of classic gaming.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-30T00:37:12Z",
      "readme_content": "# DOOM PDF Project üéÆ\n\nWelcome to the DOOM PDF project repository - where we explore the fascinating intersection of classic gaming and document formats by running DOOM inside PDF files!\n\n## About The Project\n\nThis project demonstrates the incredible possibilities of PDF's interactive capabilities by implementing the classic DOOM game within a PDF document. It showcases how traditional document formats can be pushed beyond their conventional boundaries, turning static documents into interactive gaming platforms.\n\n## Live Demos\n\n- [DOOM PDF Main Site](https://doompdf.onl/)\n- [Play DOOM Online](https://doompdf.onl/doom-online/)\n\n## Key Features\n\n- Full DOOM gameplay experience within a PDF document\n- Utilizes PDF's JavaScript capabilities\n- Cross-platform compatibility\n- Innovative approach to game preservation\n- Interactive document demonstration\n\n## Technical Highlights\n\n- Advanced PDF JavaScript implementation\n- Memory management optimization\n- Custom input handling system\n- Performance-optimized rendering\n- Cross-reader compatibility\n\n## Applications & Impact\n\n- Game Preservation\n- Educational Resources\n- Technical Innovation\n- Document Format Evolution\n- Interactive Document Development\n\n## Contributing\n\nWe welcome contributions from the community! Whether you're interested in:\n- Improving performance\n- Adding new features\n- Fixing bugs\n- Documenting the implementation\n- Suggesting improvements\n\nFeel free to open an issue or submit a pull request.\n\n## Related Projects\n\n- DOOM Engine Studies\n- PDF Interactive Features\n- Game Porting Techniques\n- Document Format Innovation\n\n## Acknowledgments\n\n- id Software for creating DOOM\n- The PDF specification developers\n- The gaming preservation community\n- All contributors and supporters\n\n## License\n\nThis project is licensed under [appropriate license] - see the LICENSE file for details.\n\n---\n \n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "doompdf",
        "doom",
        "gameplay",
        "gstarwd doompdf",
        "doompdf integrates",
        "doom game"
      ],
      "category": "gaming-and-game-development"
    },
    "itzg--docker-minecraft-server": {
      "owner": "itzg",
      "name": "docker-minecraft-server",
      "url": "https://github.com/itzg/docker-minecraft-server",
      "imageUrl": "/freedevtools/mcp/pfp/itzg.webp",
      "description": "Facilitates interactions with a running Minecraft server hosted in Docker, enabling server administration and programmatic construction of Minecraft builds.",
      "stars": 12092,
      "forks": 1757,
      "license": "Apache License 2.0",
      "language": "Shell",
      "updated_at": "2025-10-04T12:20:37Z",
      "readme_content": "[![Docker Pulls](https://img.shields.io/docker/pulls/itzg/minecraft-server.svg?logo=docker)](https://hub.docker.com/r/itzg/minecraft-server/)\n[![Docker Stars](https://img.shields.io/docker/stars/itzg/minecraft-server.svg?logo=docker)](https://hub.docker.com/r/itzg/minecraft-server/)\n[![GitHub Issues](https://img.shields.io/github/issues-raw/itzg/docker-minecraft-server.svg)](https://github.com/itzg/docker-minecraft-server/issues)\n[![Discord](https://img.shields.io/discord/660567679458869252?label=Discord&logo=discord)](https://discord.gg/DXfKpjB)\n[![Build and Publish](https://github.com/itzg/docker-minecraft-server/actions/workflows/build-multiarch.yml/badge.svg)](https://github.com/itzg/docker-minecraft-server/actions/workflows/build-multiarch.yml)\n[![Donate_Buy_me_a_coffee_orange](https://img.shields.io/badge/Donate-Buy%20me%20a%20coffee-orange.svg)](https://www.buymeacoffee.com/itzg)\n[![Documentation Status](https://readthedocs.org/projects/docker-minecraft-server/badge/?version=latest)](https://docker-minecraft-server.readthedocs.io/en/latest/?badge=latest)\n\n [](https://docker-minecraft-server.readthedocs.io/)\n\nThere you will find things like\n- [Quick start with Docker Compose](https://docker-minecraft-server.readthedocs.io/en/latest/#using-docker-compose)\n- Running [different versions of Minecraft](https://docker-minecraft-server.readthedocs.io/en/latest/versions/minecraft/) and using [various server types](https://docker-minecraft-server.readthedocs.io/en/latest/types-and-platforms/) for Java Edition\n- [Setting server properties via container environment variables](https://docker-minecraft-server.readthedocs.io/en/latest/configuration/server-properties/)\n- [Managing mods and plugins with automated downloads and cleanup](https://docker-minecraft-server.readthedocs.io/en/latest/mods-and-plugins/)\n- [Using various modpack providers/platforms](https://docker-minecraft-server.readthedocs.io/en/latest/types-and-platforms/)\n- ...and much more\n\nThere are also many examples located in [the examples directory](examples) of this repo.\n\nThis image only supports Java edition natively; however, if looking for a server that is compatible with Bedrock edition, then use [itzg/minecraft-bedrock-server](https://github.com/itzg/docker-minecraft-bedrock-server) or [refer to this section](https://docker-minecraft-server.readthedocs.io/en/latest/misc/examples/#bedrock-compatible-server) to add Bedrock compatibility to a Java edition server.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "minecraft",
        "docker",
        "server",
        "docker minecraft",
        "minecraft server",
        "itzg docker"
      ],
      "category": "gaming-and-game-development"
    },
    "jacksmith3888--wuwa-mcp-server": {
      "owner": "jacksmith3888",
      "name": "wuwa-mcp-server",
      "url": "https://github.com/jacksmith3888/wuwa-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/jacksmith3888.webp",
      "description": "Retrieves detailed information about characters and voice suits from the game 'È∏£ÊΩÆ' in Markdown format. Optimized for use with large language models, it allows users to query character information, voice suit details, and character profiles.",
      "stars": 1,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-09T12:21:03Z",
      "readme_content": "# È∏£ÊΩÆ MCP Server\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/jacksmith3888-wuwa-mcp-server-badge.png)](https://mseep.ai/app/jacksmith3888-wuwa-mcp-server)\n\n[![smithery badge](https://smithery.ai/badge/@jacksmith3888/wuwa-mcp-server)](https://smithery.ai/server/@jacksmith3888/wuwa-mcp-server)\n\n‰∏Ä‰∏™ Model Context Protocol (MCP) ÊúçÂä°Âô®ÔºåÁî®‰∫éËé∑Âèñ„ÄäÈ∏£ÊΩÆ„ÄãÊ∏∏ÊàèÁöÑËßíËâ≤ÂíåÂ£∞È™∏‰ø°ÊÅØÔºåÂπ∂‰ª• Markdown Ê†ºÂºèËøîÂõûÔºåÊñπ‰æøÂ§ßÂûãËØ≠Ë®ÄÊ®°Âûã‰ΩøÁî®„ÄÇ\n\n**üìÑ [English Documentation](README_EN.md) | üá®üá≥ ‰∏≠ÊñáÊñáÊ°£**\n\n## üöÄ ÊúÄÊñ∞Êõ¥Êñ∞ (v2.0.1)\n\n- üèóÔ∏è **Êû∂ÊûÑÈáçÊûÑ**ÔºöÈááÁî®È¢ÜÂüüÈ©±Âä®ËÆæËÆ°ÔºàDDDÔºâÊû∂ÊûÑÔºåÊ∏ÖÊô∞ÁöÑÂàÜÂ±ÇÁªìÊûÑ\n- üîß **‰ª£Á†ÅË¥®Èáè**ÔºöÈõÜÊàê ruff ‰ª£Á†ÅÊ†ºÂºèÂåñÂíåÈùôÊÄÅÂàÜÊûêÂ∑•ÂÖ∑\n- üìù **Áé∞‰ª£ÂåñËØ≠Ê≥ï**Ôºö‰ΩøÁî® Python 3.12+ Áé∞‰ª£Á±ªÂûãÊ≥®Ëß£ (dict/list Êõø‰ª£ Dict/List)\n- üßπ **‰ª£Á†ÅÊ∏ÖÁêÜ**ÔºöÁßªÈô§ÊóßÊúâ‰ª£Á†ÅÔºåÁªü‰∏Ä‰ª£Á†ÅÈ£éÊ†ºÂíåË¥®ÈáèÊ†áÂáÜ\n- ‚úÖ **ÊîØÊåÅ Streamable HTTP ‰º†Ëæì**ÔºöÊîØÊåÅ Smithery ÁöÑÊñ∞ HTTP ‰º†ËæìÂçèËÆÆ\n- üîÑ **ÂêëÂêéÂÖºÂÆπ**ÔºöÂêåÊó∂ÊîØÊåÅ‰º†ÁªüÁöÑ STDIO ÂíåÊñ∞ÁöÑ HTTP ‰º†ËæìÊ®°Âºè\n- üåê **‰∫ëÁ´ØÈÉ®ÁΩ≤Â∞±Áª™**ÔºöÂÆåÁæéÈÄÇÈÖç VPS„ÄÅGoogle Cloud Run„ÄÅAWS Lambda Á≠â‰∫ëÁéØÂ¢É\n- üì¶ **‰æùËµñÊ≥®ÂÖ•**Ôºö‰ΩøÁî®‰æùËµñÊ≥®ÂÖ•ÂÆπÂô®ÁÆ°ÁêÜÊúçÂä°ÂÆû‰æã\n- üê≥ **Docker ‰ºòÂåñ**Ôºö‰ΩøÁî® uv ÁöÑÂ§öÈò∂ÊÆµÊûÑÂª∫ÔºåÊèêÂçáÊûÑÂª∫ÈÄüÂ∫¶Âπ∂ÂáèÂ∞èÈïúÂÉè‰ΩìÁßØ\n\n## ÂäüËÉΩÁâπÁÇπ\n\n- **ËßíËâ≤‰ø°ÊÅØÊü•ËØ¢**ÔºöËé∑Âèñ„ÄäÈ∏£ÊΩÆ„ÄãÊ∏∏Êàè‰∏≠ËßíËâ≤ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ\n- **Â£∞È™∏‰ø°ÊÅØÊü•ËØ¢**ÔºöËé∑Âèñ„ÄäÈ∏£ÊΩÆ„ÄãÊ∏∏Êàè‰∏≠Â£∞È™∏Â•óË£ÖÁöÑËØ¶ÁªÜ‰ø°ÊÅØ\n- **ËßíËâ≤Ê°£Ê°àÊü•ËØ¢**ÔºöËé∑Âèñ„ÄäÈ∏£ÊΩÆ„ÄãÊ∏∏Êàè‰∏≠ËßíËâ≤ÁöÑÊ°£Ê°à‰ø°ÊÅØ\n- **LLM ÂèãÂ•ΩËæìÂá∫**ÔºöÁªìÊûúÊ†ºÂºèÁâπÂà´‰∏∫Â§ßÂûãËØ≠Ë®ÄÊ®°Âûã‰ºòÂåñ\n- **Âèå‰º†ËæìÊ®°Âºè**ÔºöÊîØÊåÅ STDIO Âíå Streamable HTTP ‰º†Ëæì\n\n## ÂÆâË£ÖÊñπÊ≥ï\n\n### ÈÄöËøá Smithery ÂÆâË£Ö\n\nË¶ÅÈÄöËøá [Smithery](https://smithery.ai/server/@jason/wuwa-mcp-server) Ëá™Âä®ÂÆâË£Ö WuWa MCP ServerÔºö\n\n```bash\nnpx -y @smithery/cli@latest install @jacksmith3888/wuwa-mcp-server --client claude --key YOUR_SMITHERY_KEYs\n```\n\n### ÈÄöËøá `uv` ÂÆâË£Ö\n\nÁõ¥Êé•‰ªé PyPI ÂÆâË£ÖÔºö\n\n```bash\nuv pip install wuwa-mcp-server\n```\n\n## ‰ΩøÁî®ÊñπÊ≥ï\n\n### ‰∏é Cherry Studio ‰∏ÄËµ∑ËøêË°å\n\n1. ‰∏ãËΩΩ [Cherry Studio](https://github.com/CherryHQ/cherry-studio)\n2. Âú®ËÆæÁΩÆ‰∏≠ÁÇπÂáª MCP ÊúçÂä°Âô®\n\nÊ∑ªÂä†‰ª•‰∏ãÈÖçÁΩÆÔºö\n\n```json\n{\n  \"mcpServers\": {\n    \"wuwa-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"wuwa-mcp-server\"]\n    }\n  }\n}\n```\n\n### ‰∏é Claude Desktop ‰∏ÄËµ∑ËøêË°å\n\n1. ‰∏ãËΩΩ [Claude Desktop](https://claude.ai/download)\n2. ÂàõÂª∫ÊàñÁºñËæëÊÇ®ÁöÑ Claude Desktop ÈÖçÁΩÆÊñá‰ª∂Ôºö\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\\\Claude\\\\claude_desktop_config.json`\n\nÊ∑ªÂä†‰ª•‰∏ãÈÖçÁΩÆÔºö\n\n```json\n{\n  \"mcpServers\": {\n    \"wuwa-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"wuwa-mcp-server\"]\n    }\n  }\n}\n```\n\n3. ÈáçÂêØ Claude Desktop\n\n## ÂèØÁî®Â∑•ÂÖ∑\n\n### 1. ËßíËâ≤‰ø°ÊÅØÂ∑•ÂÖ∑\n\n```python\nasync def get_character_info(character_name: str) -> str\n```\n\nÂú®Â∫ìË°óÂå∫‰∏äÊü•ËØ¢ËßíËâ≤ËØ¶ÁªÜ‰ø°ÊÅØÂπ∂‰ª• Markdown Ê†ºÂºèËøîÂõû„ÄÇ\n\n**ÂèÇÊï∞Ôºö**\n\n- `character_name`: Ë¶ÅÊü•ËØ¢ÁöÑËßíËâ≤ÁöÑ‰∏≠ÊñáÂêçÁß∞\n\n**ËøîÂõûÔºö**\nÂåÖÂê´ËßíËâ≤‰ø°ÊÅØÁöÑ Markdown Â≠óÁ¨¶‰∏≤ÔºåÊàñËÄÖÂú®Êâæ‰∏çÂà∞ËßíËâ≤ÊàñËé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•Êó∂ËøîÂõûÈîôËØØÊ∂àÊÅØ„ÄÇ\n\n### 2. Â£∞È™∏‰ø°ÊÅØÂ∑•ÂÖ∑\n\n```python\nasync def get_artifact_info(artifact_name: str) -> str\n```\n\nÂú®Â∫ìË°óÂå∫‰∏äÊü•ËØ¢Â£∞È™∏ËØ¶ÁªÜ‰ø°ÊÅØÂπ∂‰ª• Markdown Ê†ºÂºèËøîÂõû„ÄÇ\n\n**ÂèÇÊï∞Ôºö**\n\n- `artifact_name`: Ë¶ÅÊü•ËØ¢ÁöÑÂ£∞È™∏Â•óË£ÖÁöÑ‰∏≠ÊñáÂêçÁß∞\n\n**ËøîÂõûÔºö**\nÂåÖÂê´Â£∞È™∏‰ø°ÊÅØÁöÑ Markdown Â≠óÁ¨¶‰∏≤ÔºåÊàñËÄÖÂú®Êâæ‰∏çÂà∞Â£∞È™∏ÊàñËé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•Êó∂ËøîÂõûÈîôËØØÊ∂àÊÅØ„ÄÇ\n\n### 3. ËßíËâ≤Ê°£Ê°àÂ∑•ÂÖ∑\n\n```python\nasync def get_character_profile(character_name: str) -> str\n```\n\nÂú®Â∫ìË°óÂå∫‰∏äÊü•ËØ¢ËßíËâ≤Ê°£Ê°à‰ø°ÊÅØÂπ∂‰ª• Markdown Ê†ºÂºèËøîÂõû„ÄÇ\n\n**ÂèÇÊï∞Ôºö**\n\n- `character_name`: Ë¶ÅÊü•ËØ¢ÁöÑËßíËâ≤ÁöÑ‰∏≠ÊñáÂêçÁß∞\n\n**ËøîÂõûÔºö**\nÂåÖÂê´ËßíËâ≤Ê°£Ê°à‰ø°ÊÅØÁöÑ Markdown Â≠óÁ¨¶‰∏≤ÔºåÊàñËÄÖÂú®Êâæ‰∏çÂà∞ËßíËâ≤ÊàñËé∑ÂèñÊï∞ÊçÆÂ§±Ë¥•Êó∂ËøîÂõûÈîôËØØÊ∂àÊÅØ„ÄÇ\n\n## ÂºÄÂèëÂíåÊµãËØï\n\n### Êú¨Âú∞ËøêË°å\n\n```bash\n# STDIO Ê®°ÂºèÔºàÈªòËÆ§Ôºâ\nuv run python -m wuwa_mcp_server.server\n\n# HTTP Ê®°Âºè\nTRANSPORT=http uv run python -m wuwa_mcp_server.server\n```\n\n### ‰ª£Á†ÅË¥®Èáè\n\nÈ°πÁõÆ‰ΩøÁî® **ruff** ËøõË°å‰ª£Á†ÅÊ†ºÂºèÂåñÂíåÈùôÊÄÅÂàÜÊûêÔºåÁ°Æ‰øù‰ª£Á†ÅË¥®ÈáèÂíå‰∏ÄËá¥ÊÄß„ÄÇ\n\n#### ÂÆâË£ÖÂºÄÂèë‰æùËµñ\n\n```bash\nuv sync --extra dev\n```\n\n#### ‰ª£Á†ÅÊ†ºÂºèÂåñÂíåÊ£ÄÊü•\n\n```bash\n# Ê†ºÂºèÂåñÊâÄÊúâ Python ‰ª£Á†Å\nuv run ruff format .\n\n# Ê£ÄÊü•‰ª£Á†ÅÈóÆÈ¢ò\nuv run ruff check .\n\n# Ëá™Âä®‰øÆÂ§çÂèØ‰øÆÂ§çÁöÑÈóÆÈ¢ò\nuv run ruff check --fix .\n```\n\n#### Ruff ÈÖçÁΩÆ\n\nÈ°πÁõÆÈÖçÁΩÆ‰∫Ü‰ª•‰∏ã‰ª£Á†ÅË¥®ÈáèËßÑÂàôÔºö\n\n- **Ë°åÈïøÂ∫¶**: 120 Â≠óÁ¨¶\n- **ÁõÆÊ†á Python ÁâàÊú¨**: 3.12\n- **ÂêØÁî®ËßÑÂàô**: pycodestyle„ÄÅpyflakes„ÄÅisort„ÄÅÂëΩÂêçÁ∫¶ÂÆö„ÄÅpyupgrade„ÄÅbugbear„ÄÅ‰ª£Á†ÅÁÆÄÂåñÁ≠â\n- **Import ÊéíÂ∫è**: Âº∫Âà∂ÂçïË°åÂØºÂÖ•ÔºåÈ°πÁõÆÊ®°Âùó‰ºòÂÖàÁ∫ßËÆæÁΩÆ\n\n### Docker ÈÉ®ÁΩ≤\n\n```bash\n# ÊûÑÂª∫ÈïúÂÉè\ndocker build -t wuwa-mcp-server .\n\n# ËøêË°åÂÆπÂô®ÔºàHTTP Ê®°ÂºèÔºâ\ndocker run -p 8081:8000 wuwa-mcp-server\n\n# ËøêË°åÂÆπÂô®ÔºàSTDIO Ê®°ÂºèÔºâ\ndocker run -e TRANSPORT=stdio wuwa-mcp-server\n```\n\n## ËØ¶ÁªÜÂäüËÉΩ\n\n### ÁªìÊûúÂ§ÑÁêÜ\n\n- Ê∏ÖÁêÜÂíåÊ†ºÂºèÂåñÂ∫ìË°óÂå∫Êï∞ÊçÆ\n- ‰∏∫ LLM Ê∂àË¥π‰ºòÂåñÊ†ºÂºè\n- ÊîØÊåÅÂπ∂Ë°åÂ§ÑÁêÜÊèêÈ´òÊÄßËÉΩ\n- ÂºÇÊ≠•Êìç‰ΩúÈÅøÂÖçÈòªÂ°û\n\n### ‰º†ËæìÊ®°Âºè\n\n- **STDIO ‰º†Ëæì**ÔºöÈÄÇÁî®‰∫éÊú¨Âú∞ÂÆ¢Êà∑Á´ØÔºåÂ¶Ç Claude Desktop\n- **Streamable HTTP ‰º†Ëæì**ÔºöÈÄÇÁî®‰∫é‰∫ëÁ´ØÈÉ®ÁΩ≤ÂíåËøúÁ®ãËÆøÈóÆ\n- Ëá™Âä®Ê£ÄÊµãÁéØÂ¢ÉÂèòÈáè `TRANSPORT` ÂàáÊç¢Ê®°Âºè\n\n## Ë¥°ÁåÆ\n\nÊ¨¢ËøéÊèêÂá∫ÈóÆÈ¢òÂíåÊãâÂèñËØ∑Ê±ÇÔºÅ‰∏Ä‰∫õÊΩúÂú®ÁöÑÊîπËøõÈ¢ÜÂüüÔºö\n\n- Â¢ûÂä†ÂØπÊõ¥Â§ö„ÄäÈ∏£ÊΩÆ„ÄãÊ∏∏ÊàèÂÜÖÂÆπÁöÑÊîØÊåÅ\n- Â¢ûÂº∫ÂÜÖÂÆπËß£ÊûêÈÄâÈ°π\n- Â¢ûÂä†ÂØπÈ¢ëÁπÅËÆøÈóÆÂÜÖÂÆπÁöÑÁºìÂ≠òÂ±Ç\n- ÊîØÊåÅÊõ¥Â§öËØ≠Ë®ÄÁöÑÊú¨Âú∞Âåñ\n\n## ËÆ∏ÂèØËØÅ\n\nÊú¨È°πÁõÆÈááÁî® MIT ËÆ∏ÂèØËØÅ„ÄÇ\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "wuwa",
        "characters",
        "markdown",
        "wuwa mcp",
        "character information",
        "information characters"
      ],
      "category": "gaming-and-game-development"
    },
    "jiayao--mcp-chess": {
      "owner": "jiayao",
      "name": "mcp-chess",
      "url": "https://github.com/jiayao/mcp-chess",
      "imageUrl": "/freedevtools/mcp/pfp/jiayao.webp",
      "description": "Connect to a chess server to play games against large language models while utilizing interactive tools for visualization, move analysis, and PGN file exploration.",
      "stars": 13,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T19:06:05Z",
      "readme_content": "# MCP Chess Server\n\nThis MCP let's you play chess against any LLM.\n\n## Installation\n\nTo use this chess server, add the following configuration to your MCP config:\n\n```json\n{\n  \"mcpServers\": {\n    \"chess\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-chess\"\n      ]\n    }\n  }\n}\n```\n\n## Usage\n\nPlay a game:\n\n\n\n\nFind a position in a PGN for game analysis:\n\n\n\n## Available Tools\n\nThe server provides the following tools:\n\n*   `get_board_visualization()`: Provides the current state of the chessboard as an image. The board orientation automatically flips based on the user's assigned color.\n*   `get_turn()`: Indicates whose turn it is ('white' or 'black').\n*   `get_valid_moves()`: Lists all legal moves for the current player in UCI notation (e.g., 'e2e4', 'g1f3'). Returns an empty list if the game is over.\n*   `make_move(move_san: str)`: Makes a move on the board using Standard Algebraic Notation (SAN) (e.g., 'e4', 'Nf3', 'Bxe5'). Returns the move in SAN and UCI, the new board FEN, and game status.\n*   `new_game(user_plays_white: bool = True)`: Starts a new game, resetting the board. By default, the user plays white. Sets the user's color for board orientation. Returns a confirmation message.\n*   `find_position_in_pgn(pgn_string: str, condition: str)`: Finds the first board position in a PGN string matching a condition (e.g., \"bishop on a3\") and returns an image of that board state. The condition format is \"piece_type on square_name\". Valid piece types are \"pawn\", \"knight\", \"bishop\", \"rook\", \"queen\", \"king\".",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chess",
        "games",
        "gaming",
        "chess server",
        "mcp chess",
        "chess connect"
      ],
      "category": "gaming-and-game-development"
    },
    "jifrozen0110--mcp-riot": {
      "owner": "jifrozen0110",
      "name": "mcp-riot",
      "url": "https://github.com/jifrozen0110/mcp-riot",
      "imageUrl": "/freedevtools/mcp/pfp/jifrozen0110.webp",
      "description": "Provides real-time League of Legends player data and match insights through natural language queries, integrating with the Riot Games API for retrieving player summaries, champion mastery, recent matches, and match statistics.",
      "stars": 18,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T13:00:04Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/jifrozen0110-mcp-riot-badge.png)](https://mseep.ai/app/jifrozen0110-mcp-riot)\n\n[![smithery badge](https://smithery.ai/badge/@jifrozen0110/riot)](https://smithery.ai/server/@jifrozen0110/riot)\n# MCP Riot Server\n\n**MCP-Riot is a community-developed [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol) server that integrates with the Riot Games API** to provide League of Legends data to AI assistants via natural language queries.\n\nThis project enables AI models to retrieve player information, ranked stats, champion mastery, and recent match summaries.\n\n> **Disclaimer:** This is an open-source project *not affiliated with or endorsed by Riot Games.* League of Legends¬Æ is a registered trademark of Riot Games, Inc.\n\n---\n## Demo\n![mcp-riot-lol](https://github.com/user-attachments/assets/ef0c62d7-f99b-4a74-bc7d-8b737bf8fe2a)\n\n\n## ‚ú® Features\n\n### üßæ Player Summary\n> \"What's the current rank and top champions of Hide on bush?\"\n\nProvides the player's:\n- Level\n- Ranked Solo Tier\n- Top champion masteries\n- Recent match history\n\n### üîù Top Champions\n> \"What champions is he best at?\"\n\nReturns the top N champions based on mastery points.\n\n### üéØ Champion Mastery\n> \"How good is this player with Ahri?\"\n\nReturns detailed champion mastery data for a specific champion.\n\n### üïπÔ∏è Recent Matches\n> \"Show the last 3 matches for this summoner\"\n\nLists recent matches including champion used, K/D/A, and result.\n\n### üìä Match Summary\n> \"Summarize this match for a given match ID\"\n\nReturns the player‚Äôs match stats, such as KDA, damage, wards, and result.\n\n---\n\n## üöÄ Quick Start\n\n### 1. Clone & Install\n\n```bash\ngit clone https://github.com/jifrozen0110/mcp-riot.git\ncd mcp-riot\n\n# Install dependencies (using uv or pip)\nuv sync\n```\n\n\n### 2. Get Your API Key and Set Environment\n\nCreate `.env` file with your Riot API key:\n\n```ini\nRIOT_API_KEY=your_riot_api_key\n```\nYou can get your key from https://developer.riotgames.com/\n\n\n### 3. Configure MCP Client\n\nRegister this server in your MCP client (e.g., Claude for Desktop).\n\nEdit ~/Library/Application Support/Claude/claude_desktop_config.json:\n\n``` bash\n{\n    \"mcpServers\": {\n        \"amadeus\": {\n            \"command\": \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/uv\",\n            \"args\": [\n                \"--directory\",\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER\",\n                \"run\",\n                \"--env-file\",\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/.env\",\n                \"riot.py\"\n            ]\n        }\n    }\n}\n```\n\n> Replace `/ABSOLUTE/PATH/TO/PARENT/FOLDER/` with the actual path to your project folder.\n\nmy case:\n\n``` bash\n{\n    \"mcpServers\": {\n        \"amadeus\": {\n            \"command\": \"/Users/jifrozen/.local/bin/uv\",\n            \"args\": [\n                \"--directory\",\n                \"/Users/jifrozen/mcp-riot/src/\",\n                \"run\",\n                \"--env-file\",\n                \"/Users/jifrozen/mcp-riot/.env\",\n                \"server.py\"\n            ]\n        }\n    }\n}\n\n```\n\n---\n## üõ†Ô∏è Tools\n\nThe following tools will be exposed to MCP clients:\n\n### `get_player_summary`\n\nSummarizes level, rank, top champions, and recent matches.\n\n### `get_top_champions_tool`\n\nReturns top champions by mastery points.\n\n### `get_champion_mastery_tool`\n\nReturns mastery details for a specific champion.\n\n### `get_recent_matches_tool`\n\nReturns recent matches for the given summoner.\n\n### `get_match_summary`\n\nReturns match performance stats for a given match ID and puuid.\n\n---\n\n## üìö References\n\n- [Model Context Protocol Python SDK](https://github.com/modelcontextprotocol/python-sdk)\n- [Riot Games API Docs](https://developer.riotgames.com/)\n- [Data Dragon (static data)](https://developer.riotgames.com/docs/lol#data-dragon)\n\n---\n\n## üìù License\n\nMIT License ¬© 2025 [jifrozen0110](https://github.com/jifrozen0110)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "riot",
        "legends",
        "matches",
        "league legends",
        "legends player",
        "player summaries"
      ],
      "category": "gaming-and-game-development"
    },
    "johnnyinlee--lol-client-mcp": {
      "owner": "johnnyinlee",
      "name": "lol-client-mcp",
      "url": "https://github.com/johnnyinlee/lol-client-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/johnnyinlee.webp",
      "description": "Accesses real-time game data from the League of Legends client using the Live Client Data API. Provides tools for retrieving in-game statistics and other relevant information.",
      "stars": 7,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-18T20:18:08Z",
      "readme_content": "# LoL Client MCP\n\nAn MCP (Model-Controller-Processor) server for accessing League of Legends client data. This server provides a collection of tools that communicate with the League of Legends Live Client Data API to retrieve in-game data.\n\n## Overview\n\nThis project accesses real-time game data using the League of Legends game client's Live Client Data API. It utilizes the FastMCP framework to expose various endpoints as tools.\n\nAPI information can be found at https://developer.riotgames.com/docs/lol.\n\n## Installation and Usage\n\n### Prerequisites\n\n- Python 3.8 or higher\n- [uv](https://github.com/astral-sh/uv) - Fast and reliable Python package manager\n  - Installation: `pip install uv`\n- League of Legends client installed\n\n### Project Setup\n\n1. Clone this repository:\n\n```bash\ngit clone https://github.com/yourusername/lol-client-mcp.git\ncd lol-client-mcp\n```\n\n2. Install required packages using uv:\n\n```bash\nuv pip install httpx fastmcp\n```\n\n### Running the MCP Server\n\nTo run directly:\n\n```bash\npython main.py\n```\n\n### Integration with Claude\n\nThere are two ways to use this with Claude:\n\n#### 1. Claude Desktop Configuration\n\nAdd the following to your `claude_desktop_config.json` file:\n\n```json\n{\n    \"mcpServers\": {\n        \"lol-client-mcp\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\lol-client-mcp\",\n                \"run\",\n                \"main.py\"\n            ]\n        }\n    }\n}\n```\n\n**Important**: Replace `C:\\\\ABSOLUTE\\\\PATH\\\\TO\\\\PARENT\\\\FOLDER\\\\lol-client-mcp` with the actual path to your project.\n\n#### 2. Using with Web Application\n\nTo connect the MCP server to the Claude web application:\n\n1. Run the MCP server:\n   ```bash\n   python main.py\n   ```\n\n2. Configure the server connection in the Claude web interface:\n   - Go to MCP settings at the bottom when starting a conversation\n   - Select 'lol-client-mcp' and connect\n\n## API Tools List\n\n### Game Data\n\n- `get_all_game_data()`: The Live League of Legends Client Data API has a number of endpoints that return a subset of the data returned by the /allgamedata endpoint. This endpoint is great for testing the Live Client Data API, but unless you actually need all the data from this endpoint, use one of the endpoints listed below that return a subset of the response.\n- `get_game_stats()`: Basic data about the game.\n- `get_event_data()`: Get a list of events that have occurred in the game.\n\n### Active Player Data\n\n- `get_active_player()`: Get all data about the active player.\n- `get_active_player_name()`: Returns the player name.\n- `get_active_player_abilities()`: Get Abilities for the active player.\n- `get_active_player_runes()`: Retrieve the full list of runes for the active player.\n\n### Player List and Individual Player Data\n\n- `get_player_list()`: Retrieve the list of heroes in the game and their stats.\n- `get_player_scores(riot_id)`: Retrieve the list of the current scores for the player.\n- `get_player_summoner_spells(riot_id)`: Retrieve the list of the summoner spells for the player.\n- `get_player_main_runes(riot_id)`: Retrieve the basic runes of any player.\n- `get_player_items(riot_id)`: Retrieve the list of items for the player.\n\n## Troubleshooting\n\n- **Connection Error**: Check if the League of Legends client is running.\n- **Timeout Error**: Verify that the game has actually started. This API does not work in the game lobby.\n\n## Precautions\n\n- This API only works when the League of Legends client is running and a game is in progress.\n- Use in compliance with Riot Games API policies.\n\n## License\n\nAll rights belong to Riot Games.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "client",
        "gaming",
        "api",
        "game data",
        "legends client",
        "retrieving game"
      ],
      "category": "gaming-and-game-development"
    },
    "karayaman--lichess-mcp": {
      "owner": "karayaman",
      "name": "lichess-mcp",
      "url": "https://github.com/karayaman/lichess-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/karayaman.webp",
      "description": "Interact with the Lichess chess platform using natural language to manage accounts, play games, analyze positions, and join tournaments. Enhance chess activities through seamless communication with the platform.",
      "stars": 9,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-07T06:24:12Z",
      "readme_content": "# Lichess MCP\n\n[![smithery badge](https://smithery.ai/badge/@karayaman/lichess-mcp)](https://smithery.ai/server/@karayaman/lichess-mcp)\n\nSpeak to Lichess in natural language to interact with the chess platform. Use it with Claude Desktop to play games, analyze positions, and manage your chess activities.\n\nBuilt using the [Model Context Protocol](https://github.com/modelcontextprotocol).\n\n<a href=\"https://glama.ai/mcp/servers/x7iuw37s1v\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/x7iuw37s1v/badge\" alt=\"Lichess MCP server\" />\n</a>\n\nThe server enables:\n\n- Managing your Lichess account\n- Playing chess games and challenges\n- Analyzing positions and games\n- Joining tournaments and teams\n- Interacting with other players\n\n## Configuration\n\nThe Lichess API token can be set in two ways:\n\n1. Environment variables: Add it to your `.env` file in the project root or set it directly:\n\n   ```bash\n   LICHESS_TOKEN=your-lichess-api-token\n   ```\n\n2. Using the `set_token` tool during runtime:\n\n   ```typescript\n   set_token({\n     token: \"your-lichess-api-token\"\n   });\n   ```\n\nThe token can be generated at https://lichess.org/account/oauth/token\n\n## Available Tools\n\n### 1. Account Management\n\n```typescript\n// Set your Lichess API token\nset_token({\n  token: \"your-lichess-api-token\"\n});\n\n// Get your Lichess profile\nget_my_profile();\n\n// Get another user's profile\nget_user_profile({\n  username: \"player_name\",\n  trophies: true  // include trophies, optional\n});\n```\n\n### 2. Game Play\n\n```typescript\n// Create a challenge against another player\ncreate_challenge({\n  username: \"opponent_username\",\n  timeControl: \"10+0\",  // 10 minutes, no increment\n  color: \"random\"       // or \"white\", \"black\"\n});\n\n// Make a move in a game\nmake_move({\n  gameId: \"abcd1234\",\n  move: \"e2e4\",\n  offeringDraw: false\n});\n\n// Get your ongoing games\nget_ongoing_games({\n  nb: 10  // number of games to fetch\n});\n```\n\n### 3. Game Analysis\n\n```typescript\n// Export a game in PGN format\nexport_game({\n  gameId: \"abcd1234\",\n  clocks: true,\n  evals: true\n});\n\n// Get cloud evaluation for a position\nget_cloud_eval({\n  fen: \"rnbqkbnr/ppp1pppp/8/3p4/4P3/8/PPPP1PPP/RNBQKBNR w KQkq - 0 2\"\n});\n```\n\n### 4. Tournaments\n\n```typescript\n// List current tournaments\nget_arena_tournaments();\n\n// Join a tournament\njoin_arena({\n  tournamentId: \"abc123\"\n});\n\n// Create a new tournament\ncreate_arena({\n  name: \"My Tournament\",\n  clockTime: 3,\n  clockIncrement: 2,\n  minutes: 45\n});\n```\n\n## Chess Notation\n\n### Move Formats\n\nThe Lichess API accepts moves in these formats:\n\n- **UCI**: Universal Chess Interface format (e.g., `e2e4`, `g8f6`)\n- **SAN**: Standard Algebraic Notation (e.g., `e4`, `Nf6`) - only for some endpoints\n\n### FEN Format\n\nThe Forsyth-Edwards Notation (FEN) is used to represent chess positions:\n\n```\nrnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\n```\n\nThis represents:\n- Piece positions (from 8th rank to 1st rank)\n- Active color (w/b)\n- Castling availability (KQkq)\n- En passant target square\n- Halfmove clock\n- Fullmove number\n\n## Error Handling\n\nThe server provides detailed error messages for:\n\n- Invalid moves or positions\n- Authentication issues\n- Rate limits\n- Resource not found cases\n\n## Setup Instructions\n\n### Installing via Smithery\n\nTo install Lichess Integration for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@karayaman/lichess-mcp):\n\n```bash\nnpx -y @smithery/cli install @karayaman/lichess-mcp --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/karayaman/lichess-mcp.git\n   cd lichess-mcp\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Configure environment variables:\n   Create a `.env` file in the root directory:\n\n   ```bash\n   LICHESS_TOKEN=your-lichess-api-token\n   ```\n\n4. Build the project:\n\n   ```bash\n   npm run build\n   ```\n\n5. Install the package globally (recommended for Claude Desktop integration):\n   ```bash\n   npm install -g\n   ```\n\n6. Start the server (for standalone usage):\n   ```bash\n   npm start\n   ```\n\n## Configuring Claude Desktop\n\nTo use this MCP server with Claude Desktop:\n\n1. Locate your Claude Desktop configuration file:\n\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. Add the Lichess MCP server to your configuration:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"lichess\": {\n         \"command\": \"lichess-mcp\",\n         \"env\": {\n           \"LICHESS_TOKEN\": \"your-lichess-api-token\",\n           \"DEBUG\": \"*\"\n         }\n       }\n     }\n   }\n   ```\n\n   Note: Replace `your-lichess-api-token` with your actual Lichess API token. The `DEBUG` environment variable is optional but helpful for troubleshooting.\n\n3. (Optional) You can add other MCP servers as well:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"filesystem\": {\n         \"command\": \"npx\",\n         \"args\": [\n           \"-y\",\n           \"@modelcontextprotocol/server-filesystem\",\n           \"/Users/username/Desktop\",\n           \"/Users/username/Downloads\"\n         ]\n       },\n       \"lichess\": {\n         \"command\": \"lichess-mcp\",\n         \"env\": {\n           \"LICHESS_TOKEN\": \"your-lichess-api-token\"\n         }\n       }\n     }\n   }\n   ```\n\n4. Restart Claude Desktop to apply the changes.\n\n   - Make sure to completely close Claude Desktop (including from the system tray/menu bar)\n   - Launch Claude Desktop again\n   - Look for a hammer icon in the interface, which indicates that MCP servers are connected\n\n5. Test the integration by asking Claude about your Lichess account:\n   - \"Show me my Lichess profile\"\n   - \"Start a new chess game with 10 minutes time control\"\n\n## Troubleshooting\n\nIf you encounter issues with the MCP server connection:\n\n1. Ensure you've installed the package globally with `npm install -g`\n2. Verify that the `lichess-mcp` command is available in your PATH (`which lichess-mcp`)\n3. Check that your configuration file has the correct format (the newer `mcpServers` format instead of `mcp_servers`)\n4. Restart Claude Desktop completely\n5. Try enabling Developer Mode in Claude Desktop (if available) for additional logging\n6. Verify your Lichess API token is valid\n\n## References\n\n- [Model Context Protocol](https://github.com/modelcontextprotocol)\n- [Lichess API Documentation](https://lichess.org/api)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chess",
        "lichess",
        "games",
        "lichess chess",
        "chess platform",
        "karayaman lichess"
      ],
      "category": "gaming-and-game-development"
    },
    "kokushin--exia-mcp": {
      "owner": "kokushin",
      "name": "exia-mcp",
      "url": "https://github.com/kokushin/exia-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kokushin.webp",
      "description": "Generate interactive scenario files in the Kotonoha Sisters Explanation style for the Exia visual novel engine, converting natural language prompts into JSON format scenarios for display. Integrate setup and execution tools for seamless scenario creation and playback.",
      "stars": 9,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-27T21:20:40Z",
      "readme_content": "# exia-scenario-generator MCP Server\n\n[exia](https://github.com/kokushin/exia) „Å®„ÅÑ„ÅÜ„Éé„Éô„É´„Ç≤„Éº„É†„Ç®„É≥„Ç∏„É≥Âêë„Åë„ÅÆ„Ç∑„Éä„É™„Ç™„Éï„Ç°„Ç§„É´„Çí‰ΩúÊàê„Åô„Çã MCP „Çµ„Éº„Éê„Åß„Åô„ÄÇ  \n„ÄåÁê¥ËëâÂßâÂ¶πËß£Ë™¨„ÄçÂΩ¢Âºè„ÅÆ„Ç∑„Éä„É™„Ç™„ÇíÁîüÊàê„Åó„ÄÅexia „ÅßË°®Á§∫„Åó„Åæ„Åô„ÄÇ\n\n<img width=\"800\" alt=\"\" src=\"https://github.com/user-attachments/assets/f02cc41a-6456-44d3-bb22-190cb899515d\" />\n\n## Ê©üËÉΩ\n\n- ÊåáÂÆö„Åï„Çå„Åü„ÅäÈ°å„Å´„Å§„ÅÑ„Å¶„ÄåÁê¥ËëâÂßâÂ¶πËß£Ë™¨„ÄçÂΩ¢Âºè„ÅÆ„Ç∑„Éä„É™„Ç™„ÇíÁîüÊàê\n- ÁîüÊàê„Åó„Åü„Ç∑„Éä„É™„Ç™„Çí exia Áî®„ÅÆ JSON ÂΩ¢Âºè„Å´Â§âÊèõ\n- exia „Çí GitHub „Åã„Çâ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó\n- ÁîüÊàê„Åó„Åü„Ç∑„Éä„É™„Ç™„Çí exia „ÅßË°®Á§∫\n\n## ÂøÖË¶ÅÊù°‰ª∂\n\n- Node.js v20.x ‰ª•‰∏ä\n- OpenAI API „Ç≠„Éº\n- Git\n\n## „Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó\n\n1. „É™„Éù„Ç∏„Éà„É™„Çí„ÇØ„É≠„Éº„É≥„Åæ„Åü„ÅØ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ\n\n```bash\ngit clone https://github.com/kokushin/exia-mcp.git\ncd exia-mcp\n```\n\n2. ÂøÖË¶Å„Å™„Éë„ÉÉ„Ç±„Éº„Ç∏„Çí„Ç§„É≥„Çπ„Éà„Éº„É´\n\n```bash\nnpm install\n```\n\n3. TypeScript „ÅÆ„Ç≥„É≥„Éë„Ç§„É´ (Â§âÊõ¥„ÇíÂä†„Åà„Åü„ÇâÂÆüË°å„Åó„Å¶„Åè„Å†„Åï„ÅÑ)\n\n```bash\nnpm run build\n```\n\n## Claude Desktop „Åß„ÅÆÂà©Áî®ÊñπÊ≥ï\n\n1. Claude Desktop „ÇíËµ∑Âãï\n\n2. Ë®≠ÂÆöÁîªÈù¢„ÇíÈñã„Åç„ÄÅMCP „Çµ„Éº„Éê„ÇíËøΩÂä†\n\n```json\n{\n  \"mcpServers\": {\n    \"exia-scenario-generator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"/path/to/exia-mcp\", //Ôºàclone „Åó„Åü exia-mcp „ÅÆ„Éë„Çπ„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶„Åè„Å†„Åï„ÅÑÔºâ\n        \"--openai-api-key=YOUR_API_KEY\", //ÔºàOpenAI API „Ç≠„Éº„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶„Åè„Å†„Åï„ÅÑÔºâ\n        \"--stdio\"\n      ]\n    }\n  }\n}\n```\n\n- ‚Äª `YOUR_API_KEY` „ÅØÂÆüÈöõ„ÅÆ OpenAI API „Ç≠„Éº„Å´ÁΩÆ„ÅçÊèõ„Åà„Å¶„Åè„Å†„Åï„ÅÑ\n- ‚Äª `npx` „ÅåÂÆüË°å„Åß„Åç„Å™„ÅÑÂ†¥Âêà„ÅØÁµ∂ÂØæ„Éë„Çπ„ÅßÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ `‰æã: /path/to/.volta/bin/npx`\n\n3. Claude Desktop „Åß‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å´‰ΩøÁî®\n   - „Äåexia „ÅßÈáèÂ≠ê„Ç≥„É≥„Éî„É•„Éº„Çø„Å´„Å§„ÅÑ„Å¶Ëß£Ë™¨„Åó„Å¶„Äç„Å®ÂÖ•Âäõ\n   - MCP „Çµ„Éº„Éê„ÅåËµ∑Âãï„Åó„ÄÅ„Ç∑„Éä„É™„Ç™„ÇíÁîüÊàê„Åó„Å¶ exia „ÇíËµ∑Âãï\n   - exia „Ç¢„Éó„É™„Ç±„Éº„Ç∑„Éß„É≥ÔºàElectronÔºâ„ÅåÂà•„Ç¶„Ç£„É≥„Éâ„Ç¶„ÅßËµ∑Âãï„Åó„ÄÅ„Ç∑„Éä„É™„Ç™„Çí„Éó„É¨„Ç§\n\n## Âà©Áî®ÂèØËÉΩ„Å™„ÉÑ„Éº„É´\n\n- `generateScenario`: „ÅäÈ°å„Åã„Çâ„Ç∑„Éä„É™„Ç™„ÇíÁîüÊàê\n- `setupExia`: exia „Çí„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Åó„Å¶„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó\n- `saveScenario`: ÁîüÊàê„Åó„Åü„Ç∑„Éä„É™„Ç™„Çí‰øùÂ≠ò\n- `exiaVoiceroidExplain`: „Ç∑„Éä„É™„Ç™ÁîüÊàê„Åã„Çâ exia Ëµ∑Âãï„Åæ„Åß„Çí‰∏ÄÊã¨ÂÆüË°åÔºàÊé®Â•®Ôºâ\n\n## Ê≥®ÊÑè‰∫ãÈ†Ö\n\n- ÂàùÂõûÂÆüË°åÊôÇ„ÅØ exia „ÅÆ„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„Å®„Çª„ÉÉ„Éà„Ç¢„ÉÉ„Éó„Å´ÊôÇÈñì„Åå„Åã„Åã„Çä„Åæ„Åô\n- „Ç≠„É£„É©„ÇØ„Çø„ÉºÁîªÂÉè„ÅØËá™Ââç„ÅßÁî®ÊÑè„Åó„Å¶ÊâãÂãï„ÅßÂ∑Æ„ÅóÊõø„Åà„ÇãÂøÖË¶Å„Åå„ÅÇ„Çä„Åæ„Åô\n  - exia „ÅÆ„Éâ„Ç≠„É•„É°„É≥„Éà„ÅØ[„Åì„Å°„Çâ](https://github.com/kokushin/exia?tab=readme-ov-file#%E7%94%BB%E5%83%8F%E3%82%84%E3%82%B7%E3%83%8A%E3%83%AA%E3%82%AA%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%9F%E3%81%84%E5%A0%B4%E5%90%88)\n- OpenAI API „ÅÆÂà©Áî®„Å´„ÅØÊñôÈáë„Åå„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô\n\n## „É©„Ç§„Çª„É≥„Çπ\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "exia",
        "interactive",
        "kokushin",
        "exia visual",
        "kokushin exia",
        "development kokushin"
      ],
      "category": "gaming-and-game-development"
    },
    "kydycode--ableton-mcp-boost": {
      "owner": "kydycode",
      "name": "ableton-mcp-boost",
      "url": "https://github.com/kydycode/ableton-mcp-boost",
      "imageUrl": "/freedevtools/mcp/pfp/kydycode.webp",
      "description": "Facilitates communication between Claude AI and Ableton Live for music production and track manipulation, enabling actions such as controlling playback, creating MIDI clips, and managing live sessions through AI prompts.",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-01T05:03:44Z",
      "readme_content": "# AbletonMC-boost - Ableton Live Model Context Protocol Integration\n[![smithery badge](https://smithery.ai/badge/@kydycode/ableton-mcp-boost)](https://smithery.ai/server/@kydycode/ableton-mcp-boost)\n\nAbletonMCP connects Ableton Live to Claude AI through the Model Context Protocol (MCP), allowing Claude to directly interact with and control Ableton Live. This integration enables prompt-assisted music production, track creation, and Live session manipulation.\n\n### Join the Community\n\nGive feedback, get inspired, and build on top of the MCP: [Discord](https://discord.gg/3ZrMyGKnaU). Made by [Siddharth](https://x.com/sidahuj)\n\nFork maintained by [kydycode](https://github.com/kydycode/ableton-mcp-boost)\n\n## Features\n\n- **Two-way communication**: Connect Claude AI to Ableton Live through a socket-based server\n- **Track manipulation**: Create, modify, and manipulate MIDI and audio tracks\n- **Instrument and effect selection**: Claude can access and load the right instruments, effects and sounds from Ableton's library\n- **Clip creation**: Create and edit MIDI clips with notes\n- **Session control**: Start and stop playback, fire clips, and control transport\n- **Arrangement Features**: Create full song arrangements with sections, transitions, and automatic conversions from Session to Arrangement view\n\n## Components\n\nThe system consists of two main components:\n\n1. **Ableton Remote Script** (`Ableton_Remote_Script/__init__.py`): A MIDI Remote Script for Ableton Live that creates a socket server to receive and execute commands\n2. **MCP Server** (`server.py`): A Python server that implements the Model Context Protocol and connects to the Ableton Remote Script\n\n## Installation\n\n### Installing via Smithery\n\nTo install Ableton Live Integration for Claude Desktop automatically via Smithery:\n\n```bash\nnpx -y @smithery/cli install @kydycode/ableton-mcp-boost --client claude\n```\n\n### Prerequisites\n\n- Ableton Live 10 or newer\n- Python 3.8 or newer\n- [uv package manager](https://astral.sh/uv)\n\nIf you're on Mac, please install uv as:\n```bash\nbrew install uv\n```\n\nOtherwise, install from [uv's official website][https://docs.astral.sh/uv/getting-started/installation/]\n\n‚ö†Ô∏è Do not proceed before installing UV\n\n### Claude for Desktop Integration\n\n[Follow along with the setup instructions video](https://youtu.be/iJWJqyVuPS8)\n\n1. Go to Claude > Settings > Developer > Edit Config > claude_desktop_config.json to include the following:\n\n```json\n{\n    \"mcpServers\": {\n        \"AbletonMCPboost\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"ableton-mcp-boost\"\n            ]\n        }\n    }\n}\n```\n\n### Cursor Integration\n\nRun ableton-mcp-boost without installing it permanently through uvx. Go to Cursor Settings > MCP and paste this as a command:\n\n```\nuvx ableton-mcp-boost\n```\n\n‚ö†Ô∏è Only run one instance of the MCP server (either on Cursor or Claude Desktop), not both\n\n### Installing the Ableton Remote Script\n\n[Follow along with the setup instructions video](https://youtu.be/iJWJqyVuPS8)\n\n1. Download the `AbletonMCP_Remote_Script/__init__.py` file from this repo\n\n2. Copy the folder to Ableton's MIDI Remote Scripts directory. Different OS and versions have different locations. **One of these should work, you might have to look**:\n\n   **For macOS:**\n   - Method 1: Go to Applications > Right-click on Ableton Live app ‚Üí Show Package Contents ‚Üí Navigate to:\n     `Contents/App-Resources/MIDI Remote Scripts/`\n   - Method 2: If it's not there in the first method, use the direct path (replace XX with your version number):\n     `/Users/[Username]/Library/Preferences/Ableton/Live XX/User Remote Scripts`\n   \n   **For Windows:**\n   - Method 1:\n     C:\\Users\\[Username]\\AppData\\Roaming\\Ableton\\Live x.x.x\\Preferences\\User Remote Scripts \n   - Method 2:\n     `C:\\ProgramData\\Ableton\\Live XX\\Resources\\MIDI Remote Scripts\\`\n   - Method 3:\n     `C:\\Program Files\\Ableton\\Live XX\\Resources\\MIDI Remote Scripts\\`\n   *Note: Replace XX with your Ableton version number (e.g., 10, 11, 12)*\n\n4. Create a folder called 'AbletonMCP' in the Remote Scripts directory and paste the downloaded '\\_\\_init\\_\\_.py' file\n\n3. Launch Ableton Live\n\n4. Go to Settings/Preferences ‚Üí Link, Tempo & MIDI\n\n5. In the Control Surface dropdown, select \"AbletonMCP\"\n\n6. Set Input and Output to \"None\"\n\n## Usage\n\n### Starting the Connection\n\n1. Ensure the Ableton Remote Script is loaded in Ableton Live\n2. Make sure the MCP server is configured in Claude Desktop or Cursor\n3. The connection should be established automatically when you interact with Claude\n\n### Using with Claude\n\nOnce the config file has been set on Claude, and the remote script is running in Ableton, you will see a hammer icon with tools for the Ableton MCP.\n\n## Capabilities\n\n- Get session and track information\n- Create and modify MIDI and audio tracks\n- Create, edit, and trigger clips\n- Control playback\n- Load instruments and effects from Ableton's browser\n- Add notes to MIDI clips\n- Change tempo and other session parameters\n- Create full song arrangements with defined sections (intro, verse, chorus, etc.)\n- Duplicate sections with optional variations\n- Create transitions between sections (fills, risers, impacts)\n- Convert Session View clips to Arrangement View with structured layouts\n\n## Example Commands\n\nHere are some examples of what you can ask Claude to do:\n\n- \"Create an 80s synthwave track\" [Demo](https://youtu.be/VH9g66e42XA)\n- \"Create a Metro Boomin style hip-hop beat\"\n- \"Create a new MIDI track with a synth bass instrument\"\n- \"Add reverb to my drums\"\n- \"Create a 4-bar MIDI clip with a simple melody\"\n- \"Get information about the current Ableton session\"\n- \"Load a 808 drum rack into the selected track\"\n- \"Add a jazz chord progression to the clip in track 1\"\n- \"Set the tempo to 120 BPM\"\n- \"Play the clip in track 2\"\n- \"Create an intro section that's 8 bars long\"\n- \"Duplicate the verse section from bar 16 to 24 and place it at bar 32 with medium variations\"\n- \"Create a transition from bar 24 to 25 with a drum fill\"\n- \"Convert my session clips to a full arrangement with intro, verse, chorus structure\"\n\n## Troubleshooting\n\n- **Connection issues**: Make sure the Ableton Remote Script is loaded, and the MCP server is configured on Claude\n- **Timeout errors**: Try simplifying your requests or breaking them into smaller steps\n- **Have you tried turning it off and on again?**: If you're still having connection errors, try restarting both Claude and Ableton Live\n\n## Technical Details\n\n### Communication Protocol\n\nThe system uses a simple JSON-based protocol over TCP sockets:\n\n- Commands are sent as JSON objects with a `type` and optional `params`\n- Responses are JSON objects with a `status` and `result` or `message`\n\n### Limitations & Security Considerations\n\n- Creating complex musical arrangements might need to be broken down into smaller steps\n- The tool is designed to work with Ableton's default devices and browser items\n- Always save your work before extensive experimentation\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Disclaimer\n\nThis is a third-party integration and not made by Ableton.\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ableton",
        "midi",
        "kydycode",
        "kydycode ableton",
        "ableton mcp",
        "ai ableton"
      ],
      "category": "gaming-and-game-development"
    },
    "lieyanqzu--opendota-mcp-server": {
      "owner": "lieyanqzu",
      "name": "opendota-mcp-server",
      "url": "https://github.com/lieyanqzu/opendota-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/lieyanqzu.webp",
      "description": "Provides real-time access to Dota 2 statistics, match data, player profiles, and professional player information through a standardized interface. Enables retrieval of detailed game data and player insights seamlessly.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-27T17:09:10Z",
      "readme_content": "# OpenDota MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@lieyanqzu/opendota-mcp-server)](https://smithery.ai/server/@lieyanqzu/opendota-mcp-server)\n\nA Model Context Protocol (MCP) server implementation for accessing OpenDota API data. This server enables LLMs and AI assistants to retrieve real-time Dota 2 statistics, match data, player information, and more through a standard interface.\n\n## Features\n\n- Access player profiles, statistics, and match history\n- Retrieve detailed match information \n- Look up professional players and teams\n- Get hero statistics and rankings\n- Search for players by name\n- And more!\n\n\n## Installation\n\n### Installing via Smithery\n\nTo install opendota-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lieyanqzu/opendota-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @lieyanqzu/opendota-mcp-server --client claude\n```\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/asusevski/opendota-mcp-server.git\ncd opendota-mcp-server\n\n# Install with uv and only uv (pip is for nerds)\nuv add pyproject.toml\n\n# For development dependencies\nuv pip install -e \".[dev]\"\n```\n\n## Usage\n\n### Setting up your environment\n\n1. (Optional but recommended) Create an OpenDota API key at https://www.opendota.com/api-keys\n2. Set your API key as an environment variable:\n\n```bash\nexport OPENDOTA_API_KEY=your_api_key_here\n```\n\n### Running the server directly\n\n```bash\npython -m src.opendota_server.server\n```\n\n### Running the server with Claude Desktop\n\nFollow this: https://modelcontextprotocol.io/quickstart/user\n\nIf you use WSL, assuming you have cloned the repo and set up the python environment, this is how I wrote the claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"opendota\": {\n      \"command\": \"wsl.exe\",\n      \"args\": [\n        \"--\",\n        \"bash\",\n        \"-c\",\n        \"cd ~/opendota-mcp-server && source .venv/bin/activate && python src/opendota_server/server.py\"\n      ]\n    }\n  }\n}\n```\n\n### Using the example client\n\n```bash\npython -m src.client\n```\n\n### Specific tools included:\n  - get_player_by_id - Retrieve player information by account ID\n  - get_player_recent_matches - Get recent matches for a player\n  - get_match_data - Get detailed data for a specific match\n  - get_player_win_loss - Get win/loss statistics for a player\n  - get_player_heroes - Get a player's most played heroes\n  - get_hero_stats - Get statistics for heroes\n  - search_player - Search for players by name\n  - get_pro_players - Get list of professional players\n  - get_pro_matches - Get recent professional matches\n  - get_player_peers - Get players who have played with a specified player\n  - get_heroes - Get list of all Dota 2 heroes\n  - get_player_totals - Get player's overall stats totals\n  - get_player_rankings - Get player hero rankings\n  - get_player_wordcloud - Get most common words used by player in chat\n  - get_team_info - Get information about a team\n  - get_public_matches - Get recent public matches\n  - get_match_heroes - Get heroes played in a specific match\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dota",
        "opendota",
        "gaming",
        "game data",
        "player information",
        "data player"
      ],
      "category": "gaming-and-game-development"
    },
    "lieyanqzu--ygocdb-mcp": {
      "owner": "lieyanqzu",
      "name": "ygocdb-mcp",
      "url": "https://github.com/lieyanqzu/ygocdb-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/lieyanqzu.webp",
      "description": "Provides access to Chinese Yu-Gi-Oh! card information and images via keyword searches and ID queries, allowing for detailed retrieval of card data and visuals from the game.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-09T05:51:51Z",
      "readme_content": "# ÁôæÈ∏Ω(ygocdb.com) MCP Server\n\n[English](README/README.en.md) | ‰∏≠Êñá\n\n‰∏Ä‰∏™Âü∫‰∫é [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) ÁöÑÊúçÂä°Á´ØÔºåÁî®‰∫é‰∏é [ÁôæÈ∏Ω(ygocdb.com)](https://ygocdb.com/)Á≠â API ‰∫§‰∫í„ÄÇÊèê‰æõ‰∫Ü‰∏ÄÁ≥ªÂàóÂ∑•ÂÖ∑Êù•Êü•ËØ¢Ê∏∏ÊàèÁéã‰∏≠ÊñáÂç°Áâå‰ø°ÊÅØ„ÄÇ\n\n[![smithery badge](https://smithery.ai/badge/@lieyanqzu/ygocdb-mcp)](https://smithery.ai/server/@lieyanqzu/ygocdb-mcp)\n\n<a href=\"https://glama.ai/mcp/servers/@lieyanqzu/ygocdb-mcp\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@lieyanqzu/ygocdb-mcp/badge\" />\n</a>\n\n## API ÊñáÊ°£\n\nÊú¨ÊúçÂä°Á´ØÂü∫‰∫éÊ∏∏ÊàèÁéãÂç°ÁâåÊï∞ÊçÆÂ∫ìÁöÑÂÖ¨ÂºÄ API„ÄÇ\n\n- Âç°ÁâåÊêúÁ¥¢: `https://ygocdb.com/api/v0/?search=ÂÖ≥ÈîÆÂ≠ó`\n- Âç°ÁâåÂõæÁâá: `https://cdn.233.momobako.com/ygopro/pics/<id>.jpg`\n\n## ‰ΩøÁî®Á§∫‰æã\n\n\n\n## ÂäüËÉΩÁâπÊÄß\n\n- **search_cards**  \n  ÈÄöËøáÂÖ≥ÈîÆÂ≠óÊêúÁ¥¢Ê∏∏ÊàèÁéãÂç°ÁâåÔºåÂèØ‰ª•ÊêúÁ¥¢Âç°ÁâåÂêçÁß∞„ÄÅÊïàÊûúÊñáÊú¨Á≠â„ÄÇ\n  \n- **get_card_by_id**  \n  ÈÄöËøáÂç°ÁâåIDËé∑ÂèñÂçïÂº†Ê∏∏ÊàèÁéãÂç°ÁâåÁöÑËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ\n  \n- **get_card_image**  \n  ÈÄöËøáÂç°ÁâåIDËé∑ÂèñÊ∏∏ÊàèÁéãÂç°ÁâåÁöÑÂõæÁâá„ÄÇ\n\n## ‰ΩøÁî®ÊñπÊ≥ï\n\n### ÈÄöËøá NPM ÂåÖ‰ΩøÁî®\n\n```bash\n# ÂÖ®Â±ÄÂÆâË£Ö\nnpm install -g ygocdb-mcp-server\n\n# ÊàñÁõ¥Êé•ËøêË°åÔºàÊé®ËçêÔºâ\nnpx ygocdb-mcp-server\n```\n\n### Êú¨Âú∞ÂºÄÂèë\n\n```bash\n# ÂÖãÈöÜÈ°πÁõÆ\ngit clone <repository-url>\ncd ygocdb-mcp\n\n# ÂÆâË£Ö‰æùËµñ\nnpm install\n\n# ÊûÑÂª∫È°πÁõÆ\nnpm run build\n\n# ËøêË°å STDIO Ê®°Âºè\nnpm run start:stdio\n\n# ËøêË°å HTTP Ê®°Âºè\nnpm run start:http\n```\n\n### ËøêË°åÊ®°Âºè\n\nÊúçÂä°Á´ØÊîØÊåÅ‰∏§ÁßçËøêË°åÊ®°ÂºèÔºö\n\n#### STDIO Ê®°ÂºèÔºàÈªòËÆ§Ôºâ\nÁî®‰∫é‰∏é Claude Desktop Á≠â MCP ÂÆ¢Êà∑Á´ØÁõ¥Êé•ÈõÜÊàêÔºö\n\n```bash\nnpm run start:stdio\n```\n\n#### HTTP Ê®°Âºè\nÁî®‰∫éÂÆπÂô®ÈÉ®ÁΩ≤Êàñ HTTP ÂÆ¢Êà∑Á´ØËÆøÈóÆÔºö\n\n```bash\nnpm run start:http\n```\n\nHTTP ÊúçÂä°Âô®Â∞ÜÂú®Á´ØÂè£ 8081 ‰∏äÂêØÂä®ÔºåÁ´ØÁÇπ‰∏∫ `http://localhost:8081/mcp`\n\n### Âú® Claude Desktop ‰∏≠ÈõÜÊàê\n\nÂú® `claude_desktop_config.json` ‰∏≠Ê∑ªÂä†ÈÖçÁΩÆÔºö\n\n#### ‰ΩøÁî® NPXÔºàÊé®ËçêÔºâ\n```json\n{\n  \"mcpServers\": {\n    \"ygocdb\": {\n      \"command\": \"npx\",\n      \"args\": [\"ygocdb-mcp-server\"]\n    }\n  }\n}\n```\n\n#### ‰ΩøÁî®Êú¨Âú∞ÊûÑÂª∫\n```json\n{\n  \"mcpServers\": {\n    \"ygocdb\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/ygocdb-mcp/dist/index.js\"],\n      \"cwd\": \"path/to/ygocdb-mcp\"\n    }\n  }\n}\n```\n\n### Docker ÈÉ®ÁΩ≤\n\n```bash\n# ÊûÑÂª∫ÈïúÂÉè\ndocker build -t ygocdb-mcp .\n\n# ËøêË°å STDIO Ê®°ÂºèÔºàÁî®‰∫éÈõÜÊàêÔºâ\ndocker run -i --rm ygocdb-mcp\n\n# ËøêË°å HTTP Ê®°ÂºèÔºàÁî®‰∫éÊúçÂä°Ôºâ\ndocker run -p 8081:8081 ygocdb-mcp\n```\n\n### Ë∑®Âπ≥Âè∞ÊîØÊåÅ\n\nÈ°πÁõÆ‰ΩøÁî® `cross-env` Á°Æ‰øùÂú®ÊâÄÊúâÂπ≥Âè∞‰∏äÊ≠£Á°ÆËÆæÁΩÆÁéØÂ¢ÉÂèòÈáèÔºö\n\n- **Windows**: `npm run start:http` Êàñ `npm run start:stdio`\n- **macOS/Linux**: `npm run start:http` Êàñ `npm run start:stdio`\n- **Docker**: Ëá™Âä®‰ΩøÁî® HTTP Ê®°Âºè",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ygocdb",
        "card",
        "lieyanqzu",
        "ygocdb mcp",
        "card information",
        "card data"
      ],
      "category": "gaming-and-game-development"
    },
    "lobstercare--geofs-mcp": {
      "owner": "lobstercare",
      "name": "geofs-mcp",
      "url": "https://github.com/lobstercare/geofs-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/lobstercare.webp",
      "description": "Control and interact with aircraft in the GeoFS flight simulator. Access real-time flight data, execute maneuvers, and navigate between waypoints using AI models.",
      "stars": 4,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-09T15:17:30Z",
      "readme_content": "# GeoFS MCP Server\n\nA Model Context Protocol (MCP) server for the GeoFS flight simulator, allowing AI models to control and interact with aircraft in the GeoFS browser-based flight simulator.\n![image](https://github.com/user-attachments/assets/9b9f8c68-10c1-43b5-b040-f9b7740c04cd)\n![image](https://github.com/user-attachments/assets/611c64f4-1b88-4e86-b289-adfcb12dc97d)\n![image](https://github.com/user-attachments/assets/c713ff6d-7188-4a22-99a6-4673fc9d25f0)\n\n## Features\n\n- üõ´ Control aircraft flight parameters (throttle, heading, etc.)\n- üìä Access real-time flight data (position, speed, attitude)\n- üó∫Ô∏è Navigate between waypoints and airports\n- ‚úàÔ∏è Select different aircraft models\n- üîÑ Execute flight maneuvers (takeoff, landing)\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- npm or yarn\n- A modern web browser (Chrome recommended)\n\n## Installation\n\n1. Clone this repository:\n   ```\n   git clone https://github.com/yourusername/geofs-mcp-server.git\n   cd geofs-mcp-server\n   ```\n\n2. Install dependencies:\n   ```\n   npm install\n   ```\n\n3. Build the project:\n   ```\n   npm run build\n   ```\n\n## Usage\n\n### Starting the Server\n\n1. Start the MCP server:\n   ```\n   npm start\n   ```\n\n2. The server will launch a browser window that navigates to GeoFS\n   - You may need to log in to GeoFS if required\n   - The server will wait for GeoFS to fully load before accepting commands\n\n3. The MCP server will be available at:\n   - HTTP: `http://localhost:3000`\n   - WebSocket: `ws://localhost:3000`\n\n### Using with AI Models\n\nThis MCP server can be used with AI models that support the Model Context Protocol, allowing them to:\n\n1. Control aircraft in the simulator\n2. Retrieve flight data and simulator state\n3. Execute complex flight maneuvers\n4. Plan and follow flight routes\n\n### API Endpoints\n\n- `GET /mcp` - Get server capabilities and available endpoints\n- `GET /mcp/aircraft` - Get current aircraft data\n- `POST /mcp/aircraft` - Control aircraft parameters\n- `GET /mcp/flight-data` - Get comprehensive flight data\n- `POST /mcp/navigation` - Set navigation parameters\n- `GET /mcp/simulation` - Get simulation status\n- `POST /mcp/simulation` - Control simulation parameters\n\n### WebSocket Commands\n\nThe server also supports WebSocket for real-time communication:\n\n```javascript\n// Example WebSocket message\n{\n  \"id\": 1,\n  \"type\": \"command\",\n  \"command\": \"setThrottle\",\n  \"params\": {\n    \"value\": 0.75\n  }\n}\n```\n\nAvailable commands:\n- `setThrottle` - Set engine throttle (0-1)\n- `setHeading` - Set target heading in degrees\n- `getPosition` - Get current aircraft position\n- `selectAircraft` - Change to a different aircraft\n- `takeOff` - Execute takeoff procedure\n- `land` - Execute landing procedure\n- `getFlightData` - Get comprehensive flight data\n\n## Example Client\n\nSee the `examples/simple-client.js` file for a basic example of how to connect to and use the GeoFS MCP server.\n\nTo run the example:\n```\nnode examples/simple-client.js\n```\n\n## How It Works\n\nThe GeoFS MCP server uses Puppeteer to control a browser instance running GeoFS. It provides a standardized MCP interface that allows AI models to interact with the flight simulator through HTTP and WebSocket APIs.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgements\n\n- [GeoFS](https://www.geo-fs.com/) - The browser-based flight simulator\n- [Model Context Protocol](https://github.com/modelcontextprotocol/mcp) - Protocol specification for AI model context\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "simulator",
        "flight",
        "ai",
        "flight simulator",
        "geofs flight",
        "aircraft geofs"
      ],
      "category": "gaming-and-game-development"
    },
    "mario-andreschak--mcp-gameboy": {
      "owner": "mario-andreschak",
      "name": "mcp-gameboy",
      "url": "https://github.com/mario-andreschak/mcp-gameboy",
      "imageUrl": "/freedevtools/mcp/pfp/mario-andreschak.webp",
      "description": "Interact with a GameBoy emulator by loading ROMs, controlling gameplay through key inputs, and capturing real-time screen visuals. Supports operations via standard input/output and offers a web interface for enhanced user interaction.",
      "stars": 15,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-25T09:58:49Z",
      "readme_content": "# MCP GameBoy Server\n[![smithery badge](https://smithery.ai/badge/@mario-andreschak/mcp-gameboy)](https://smithery.ai/server/@mario-andreschak/mcp-gameboy)\n\n<a href=\"https://glama.ai/mcp/servers/@mario-andreschak/mcp-gameboy\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mario-andreschak/mcp-gameboy/badge\" alt=\"GameBoy Server MCP server\" />\n</a>\n\n## Overview\nA Model Context Protocol (MCP) server for serverboy, allowing LLMs to interact with a GameBoy emulator.\nYour LLM can...\n- Load ROMS\n- Press Keys\n- Look at the Gameboy Screen\n- skip frames\n\nYou can...\n- control the gameboy emulator using the @modelcontextprotocol/inspector\n- control the gameboy emulator (and upload ROMs) using a web-interface at http://localhost:3001/emulator\n- install the gameboy emulator in your favorite MCP-Client\n\n![Screenshot 2025-04-25 183528](https://github.com/user-attachments/assets/a248ef8a-73bb-4fc7-9c7f-7832cea34498)\n\n![Screenshot 2025-04-25 081510](https://github.com/user-attachments/assets/dd47d7ea-fe93-4162-9da5-8da7d9aab469)\n\n![image](https://github.com/user-attachments/assets/b9565920-b2ae-41d5-8609-59d832a90d44)\n\n\n## Features\n\n- Supports both stdio and SSE transports\n- Provides tools for GameBoy controls (up, down, left, right, A, B, start, select)\n- Provides tools to load different ROMs\n- Provides tools to get the current screen\n- All tools return an ImageContent with the latest screen frame\n\n## Installation\n\n### Installing via Smithery\n\nTo install GameBoy Emulator Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mario-andreschak/mcp-gameboy):\n\n```bash\nnpx -y @smithery/cli install @mario-andreschak/mcp-gameboy --client claude\n```\n\n### Installing in [FLUJO](https://github.com/mario-andreschak/FLUJO/)\n1. Click Add Server\n2. Copy & Paste Github URL into FLUJO\n3. Click Parse, Clone, Install, Build and Save.\n\n### Manual Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-gameboy.git\ncd mcp-gameboy\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Installing via Configuration Files\n\n!! **ATTENTION** : Many MCP Clients require to specify the ROM-Path in the .env vars as an **absolute path**\n\nTo integrate this MCP server with Cline or other MCP clients via configuration files:\n\n1. Open your Cline settings:\n   - In VS Code, go to File -> Preferences -> Settings\n   - Search for \"Cline MCP Settings\"\n   - Click \"Edit in settings.json\"\n\n2. Add the server configuration to the `mcpServers` object:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-gameboy\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/path/to/mcp-gameboy/dist/index.js\"\n         ],\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n3. Replace `/path/to/mcp-gameboy/dist/index.js` with the actual path to the `index.js` file in your project directory. Use forward slashes (/) or double backslashes (\\\\\\\\) for the path on Windows.\n\n4. Save the settings file. Cline should automatically connect to the server.\n\n\n## Usage\n\n### Environment Variables\n!! **ATTENTION** : Many MCP Clients require to specify the ROM-Path in the .env vars as an **absolute path**\n\nCreate a `.env` file in the root directory with the following variables:\n\n```\n# Server configuration\nPORT=3001\n\n# ROM path for stdio mode\nROM_PATH=./roms/dangan.gb\n```\n\n### Running in stdio Mode\n\nIn stdio mode, the server uses the ROM path specified in the `ROM_PATH` environment variable. It will open a browser window to display the GameBoy screen.\n\n```bash\nnpm run start\n```\n\n### Running in SSE Mode\n\nIn SSE mode, the server starts an Express server that serves a web page for ROM selection.\n\n```bash\nnpm run start-sse\n```\n\nThen open your browser to `http://localhost:3001` to select a ROM.\n\n## Tools\n\nThe server provides the following tools:\n\n- `press_up`: Press the UP button on the GameBoy\n- `press_down`: Press the DOWN button on the GameBoy\n- `press_left`: Press the LEFT button on the GameBoy\n- `press_right`: Press the RIGHT button on the GameBoy\n- `press_a`: Press the A button on the GameBoy\n- `press_b`: Press the B button on the GameBoy\n- `press_start`: Press the START button on the GameBoy\n- `press_select`: Press the SELECT button on the GameBoy\n- `load_rom`: Load a GameBoy ROM file\n- `get_screen`: Get the current GameBoy screen\n\nAll tools return an ImageContent with the latest screen frame.\n\n## Implementation Details\n\nThis server is built using the Model Context Protocol (MCP) TypeScript SDK. It uses:\n\n- `McpServer` from `@modelcontextprotocol/sdk/server/mcp.js` for the server implementation\n- `StdioServerTransport` from `@modelcontextprotocol/sdk/server/stdio.js` for stdio transport\n- `SSEServerTransport` from `@modelcontextprotocol/sdk/server/sse.js` for SSE transport\n- `serverboy` for the GameBoy emulation\n- `express` for the web server in SSE mode\n- `canvas` for rendering the GameBoy screen\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gameboy",
        "emulator",
        "mario",
        "gameboy emulator",
        "interact gameboy",
        "gameboy interact"
      ],
      "category": "gaming-and-game-development"
    },
    "monteslu--vibe-eyes": {
      "owner": "monteslu",
      "name": "vibe-eyes",
      "url": "https://github.com/monteslu/vibe-eyes",
      "imageUrl": "/freedevtools/mcp/pfp/monteslu.webp",
      "description": "Captures and visualizes browser game data in real-time using vectorized canvas outputs and detailed debug information. Integrates with AI models to enhance debugging and streamline development processes.",
      "stars": 41,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T17:57:20Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/monteslu-vibe-eyes-badge.png)](https://mseep.ai/app/monteslu-vibe-eyes)\n\n# Vibe-Eyes\n\n[![smithery badge](https://smithery.ai/badge/@monteslu/vibe-eyes)](https://smithery.ai/server/@monteslu/vibe-eyes)\n\nAn MCP server that enables LLMs to \"see\" what's happening in browser-based games and applications through vectorized canvas visualization and debug information.\n\n<a href=\"https://glama.ai/mcp/servers/@monteslu/vibe-eyes\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@monteslu/vibe-eyes/badge\" alt=\"Vibe-Eyes MCP server\" />\n</a>\n\n\n\nVibe-Eyes uses a client-server architecture where a lightweight browser client captures canvas content and debug information, sends it to a Node.js server via WebSockets, which then vectorizes the images into compact SVG representations and makes them available to LLMs through the Model Context Protocol (MCP).\n\n```mermaid\nflowchart LR\n    A[\"Browser Game/App<br/>(Canvas + JavaScript)\"] -->|\"Captures\"| B[\"Vibe-Eyes Client<br/>(vibe-eyes-client)\"]\n    B -->|\"WebSocket<br/>(CORS-free)\"| C[\"Socket.IO Server\"]\n    \n    subgraph server[\"Vibe-Eyes Server (mcp.js)\"]\n        C -->|\"Process\"| D[\"Vectorization<br/>(vectorizer.js)\"]\n        C -->|\"Store\"| E[\"Debug Data<br/>(logs, errors, exceptions)\"]\n        D -->|\"Rough SVG\"| F[\"MCP Tool: getGameDebug()\"]\n        E --> F\n    end\n    \n    F -->|\"SVG + Debug Info\"| G[\"Claude/LLM<br/>(MCP Client)\"]\n    G -->|\"Debugging<br/>Assistance\"| A\n    \n    classDef default color:#000,font-weight:bold\n    classDef edgeLabel color:#333,font-size:12px\n    \n    style A fill:#c0e0ff,stroke:#000,stroke-width:2px\n    style B fill:#ffe0a0,stroke:#000,stroke-width:2px\n    style C fill:#a0d0ff,stroke:#000,stroke-width:2px\n    style D fill:#b0e0a0,stroke:#000,stroke-width:2px\n    style E fill:#ffb0b0,stroke:#000,stroke-width:2px\n    style F fill:#d0b0ff,stroke:#000,stroke-width:2px\n    style G fill:#ffb0d0,stroke:#000,stroke-width:2px\n    style server fill:#f0f0f0,stroke:#666,stroke-width:1px,stroke-dasharray: 5 5,color:#000\n```\n\n> Note: This project is experimental and designed to enhance \"vibe coding\" sessions with LLMs by providing visual context and rich debug information.\n\n## Video Explanation\n[![Vibe-Eyes Video Explanation](https://img.youtube.com/vi/z2on3KelaH4/0.jpg)](https://www.youtube.com/watch?v=z2on3KelaH4)\n\n\n## Key Capabilities\n\n- Captures and vectorizes canvas elements from browser games\n- Collects console logs and errors in real-time\n- Catches unhandled exceptions with full stack traces\n- Makes the visual and debug information available to LLMs via MCP\n- Creates a seamless debugging experience for developers working with LLMs\n\n## How It Works\n\n1. A lightweight client runs in the browser game/application\n2. The client captures canvas snapshots, console logs/errors, and unhandled exceptions\n3. Data is sent to the Vibe-Eyes server via WebSocket (avoiding CORS issues)\n4. The server vectorizes the canvas images and stores them with the debug information\n5. LLMs connect via the Model Context Protocol to access the latest data\n6. LLMs can \"see\" what's happening and help debug issues with full context\n## Components\n\n### 1. Vibe-Eyes MCP Server (`mcp.js`)\n\nThe core server that:\n- Receives canvas snapshots via Socket.IO\n- Vectorizes images to compact SVG representation (rough approximation)\n- Stores debug information (logs, errors, exceptions, timing)\n- Exposes the data via Model Context Protocol (MCP)\n- Provides HTTP endpoints for direct access\n- Processes images sequentially to manage resources\n\n### 2. Browser Client\n\nThe browser client is available at [vibe-eyes-client repository](https://github.com/monteslu/vibe-eyes-client).\n\nA lightweight browser integration that:\n- Finds canvas elements in the page\n- Captures canvas content as data URLs\n- Intercepts console logs and errors\n- Catches global unhandled exceptions with stack traces\n- Sends data to the Vibe-Eyes server via WebSockets\n- Minimizes performance impact on games\n- Supports explicit initialization to control when capturing starts\n\n### 3. Vectorization Engine (`vectorizer.js`)\n\nA high-quality SVG vectorization library that:\n- Converts raster images to vector SVGs\n- Optimizes SVGs for size and clarity\n- Preserves visual information while reducing data size\n\n## Getting Started\n\n### Installation\n\n### Installing via Smithery\n\nTo install Vibe-Eyes for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@monteslu/vibe-eyes):\n\n```bash\nnpx -y @smithery/cli install @monteslu/vibe-eyes --client claude\n```\n\n### Manual Installation\n```bash\n# Clone the repository\ngit clone https://github.com/monteslu/vibe-eyes.git\ncd vibe-eyes\n\n# Install dependencies\nnpm install\n```\n\n### Using with LLM Agents\n\nRegister the MCP server with your AI agent:\n\n```bash\n# For Claude Code\nclaude mcp add\n```\n\nThis enables Claude to use the Vibe-Eyes capabilities via MCP.\n\n### Integrating with Games/Applications\n\nAdd the client to your browser application by including the required scripts:\n\n```html\n<!-- Include Socket.IO client -->\n<script src=\"https://cdn.socket.io/4.7.4/socket.io.min.js\"></script>\n\n<!-- Include Vibe-Eyes client -->\n<script src=\"https://cdn.jsdelivr.net/npm/vibe-eyes-client/dist/index.min.js\"></script>\n\n<!-- Initialize the client -->\n<script>\n  // Import the initialization function if using as module\n  // import { initializeVibeEyes } from 'vibe-eyes-client';\n  \n  // Initialize with configuration\n  const vibeEyes = initializeVibeEyes({\n    // WebSocket URL to the Vibe-Eyes server\n    serverUrl: 'ws://localhost:8869',\n    // Capture interval in milliseconds\n    captureDelay: 1000,\n    // Start capturing automatically after connection\n    autoCapture: true\n  });\n</script>\n```\n\n### Using with Claude or Other LLMs\n\nThe MCP server exposes a tool for LLMs to access the latest visual and debug information via Model Context Protocol (MCP):\n\n```\ngetGameDebug({ includeSvg: true/false })\n```\n\nThe LLM will receive:\n- Recent console logs and errors from the application\n- Unhandled exceptions with full stack traces (if any occurred)\n- Vectorized SVG approximation of the canvas (if `includeSvg` is true)\n- Timing and correlation information to connect visual state with logs\n\nThis allows the LLM to \"see\" what's happening in the application and provide better assistance.\n\n#### Example MCP Config (for Claude Code)\n\nTo access Vibe-Eyes from Claude:\n\n```json\n{\n  \"name\": \"vibe-eyes\",\n  \"url\": \"http://localhost:8869\",\n  \"tools\": [\n    {\n      \"name\": \"getGameDebug\",\n      \"description\": \"Retrieves the most recent canvas visualization and debug information from a browser game or application\"\n    }\n  ]\n}\n```\n\n## How Vibe-Eyes Helps with \"Vibe Coding\"\n\nTraditional \"vibe coding\" sessions require developers to manually take screenshots and describe what's happening in their application. Vibe-Eyes automates this process by:\n\n1. **Providing Visual Context**: LLMs can see the actual visual state of the game/app\n2. **Correlating Visual and Code Issues**: Console logs are paired with visual state\n3. **Reducing Manual Work**: No need to manually capture and upload screenshots\n4. **Enabling Real-Time Debugging**: LLMs can observe changes as they happen\n5. **Optimizing Data Transfer**: Vector representation is more compact than screenshots\n\n## Performance Considerations\n\n- The browser client is designed to minimize impact on application performance\n- Creating canvas data URLs can be CPU-intensive, so capturing frequency is configurable\n- WebSocket transport avoids CORS issues common in cross-domain setups\n- The server processes images sequentially to prevent overload\n- SVG vectorization balances visual accuracy with size optimization\n\n## Direct SVG Access\n\nFor applications that want to reuse the vectorized SVG output:\n\n1. **WebSocket Response**: The server includes the SVG directly in WebSocket responses:\n   ```javascript\n   socket.on('debugCapture', (data, callback) => {\n     // Capture and process...\n     callback({\n       success: true,\n       id: \"capture_123\",\n       svg: \"<svg>...</svg>\",  // Vectorized SVG \n       stats: { /* stats data */ }\n     });\n   });\n   ```\n\n2. **HTTP Endpoint**: Access the latest capture via the `/latest` endpoint:\n   ```javascript\n   fetch('http://localhost:8869/latest')\n     .then(res => res.json())\n     .then(data => {\n       const svg = data.vectorized?.svg;\n       // Use the SVG...\n     });\n   ```\n\n## API Reference\n\n### Browser Client\n\n```javascript\n// Initialize the client\nconst vibeEyes = initializeVibeEyes({\n  serverUrl: 'ws://localhost:8869',\n  captureDelay: 1000, // ms between captures\n  maxLogs: 10,        // Max console.log entries to store\n  maxErrors: 10,      // Max console.error entries to store\n  autoCapture: true   // Start capturing automatically\n});\n\n// Manual control\nvibeEyes.startCaptureLoop(); // Start auto-capturing\nvibeEyes.stopCaptureLoop();  // Stop auto-capturing\nvibeEyes.captureAndSend();   // Trigger one capture immediately\n\n// The server responds with:\n// {\n//   success: true,\n//   id: \"capture_1234567890\",\n//   processedAt: 1616161616161,\n//   svg: \"<svg>...</svg>\",  // The vectorized SVG for direct use\n//   stats: {\n//     vectorizeTime: 120,\n//     optimizeTime: 30,\n//     originalSize: 50000,\n//     finalSize: 15000,\n//     sizeReduction: 70\n//   }\n// }\n```\n\n### MCP Tool\n\n```javascript\n// MCP tool available to LLMs\ngetGameDebug({\n  includeSvg: true  // Whether to include SVG visualization\n})\n\n// Returns\n{\n  success: true,\n  capture: {\n    id: \"capture_123456789\",\n    timestamp: 1616161616161,\n    console_logs: [\n      { timestamp: 1616161616000, data: [\"Player position:\", {x: 10, y: 20}] },\n      // ...more logs\n    ],\n    console_errors: [\n      // Any errors captured\n    ],\n    unhandled_exception: {\n      timestamp: 1616161616100,\n      message: \"Uncaught SyntaxError: Unexpected token ';'\",\n      stack: \"SyntaxError: Unexpected token ';'\\n    at game.js:42:10\\n...\",\n      type: \"SyntaxError\",\n      source: \"game.js\",\n      line: 42,\n      column: 10\n    },\n    vectorized: {\n      svg: \"<svg>...</svg>\",  // Only if includeSvg is true (rough approximation)\n      imageType: \"png\",\n      stats: {\n        vectorizeTime: 120,\n        optimizeTime: 30,\n        originalSize: 50000,\n        finalSize: 15000,\n        sizeReduction: 70\n      }\n    }\n  }\n}\n```\n\n## Standalone Vectorizer CLI\n\nThe project also includes a standalone CLI tool for vectorizing individual files:\n\n```bash\n# Install CLI globally\nnpm install -g vibe-eyes\n\n# Use the CLI\nvibe-eyes-vectorize input.png output.svg\n\n# With options\nvibe-eyes-vectorize photo.jpg --color-precision 10 --max-iterations 100\n```\n\n## License\n\nISC",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "debugging",
        "debug",
        "gaming",
        "game development",
        "enhance debugging",
        "browser game"
      ],
      "category": "gaming-and-game-development"
    },
    "mtane0412--twitch-mcp-server": {
      "owner": "mtane0412",
      "name": "twitch-mcp-server",
      "url": "https://github.com/mtane0412/twitch-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/mtane0412.webp",
      "description": "Interact with the Twitch API to retrieve channel and stream information, including details about live streams, game data, and user profiles. The server supports various queries such as searching for channels, retrieving global emotes, and accessing comments from archived videos.",
      "stars": 1,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-02-07T12:58:31Z",
      "readme_content": "# Twitch MCP Server\n\nA Model Context Protocol (MCP) server that interacts with the Twitch API. This server utilizes the Twitch Helix API to retrieve channel information, stream details, game data, and more.\n\n## Features\n\n- Get channel information (profile, description, creation date, etc.)\n- Get stream information (title, game, viewer count, start time, etc.)\n- Get list of top games\n- Search categories/games\n- Search channels\n- Get live streams (filterable by game and language)\n- Get global emotes\n- Get global chat badges\n- Get user information\n- Get clips from a channel\n- Get chat settings\n- Get videos from a specified channel\n- Get comments from archived videos (using GraphQL API)\n\n## Prerequisites\n\n- Node.js (v18 or higher recommended)\n- Twitch Developer Account\n- Twitch API Client ID and Client Secret\n- Twitch GraphQL Client ID (for video comments feature)\n\n## Installation\n\nInstall the package using npm:\n\n```bash\nnpm install @mtane0412/twitch-mcp-server\n```\n\n## Configuration\n\n1. Create a new application in the [Twitch Developer Console](https://dev.twitch.tv/console)\n\n2. Set the following environment variables:\n\n```bash\n# macOS/Linux\nexport TWITCH_CLIENT_ID=\"your_client_id\"\nexport TWITCH_CLIENT_SECRET=\"your_client_secret\"\n\n# Windows (PowerShell)\n$env:TWITCH_CLIENT_ID=\"your_client_id\"\n$env:TWITCH_CLIENT_SECRET=\"your_client_secret\"\n```\n\nAlternatively, you can create a `.env` file:\n\n```env\nTWITCH_CLIENT_ID=your_client_id\nTWITCH_CLIENT_SECRET=your_client_secret\n```\n\n## Usage\n\nAfter installation, you can start using the server by running:\n\n```bash\nnpx @mtane0412/twitch-mcp-server\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspect\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "twitch",
        "stream",
        "streams",
        "twitch api",
        "mtane0412 twitch",
        "twitch mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "nacal--mcp-minecraft-remote": {
      "owner": "nacal",
      "name": "mcp-minecraft-remote",
      "url": "https://github.com/nacal/mcp-minecraft-remote",
      "imageUrl": "/freedevtools/mcp/pfp/nacal.webp",
      "description": "Connect and control a Minecraft player using an AI assistant to navigate, mine, build, and interact with the Minecraft world. It supports advanced movement and inventory management features, as well as communication with other players on remote servers.",
      "stars": 9,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-05T07:40:31Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@nacal/mcp-minecraft-remote)](https://smithery.ai/server/@nacal/mcp-minecraft-remote)\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/nacal-mcp-minecraft-remote-badge.png)](https://mseep.ai/app/nacal-mcp-minecraft-remote)\n\n# MCP Minecraft Remote\n\n> This project is inspired by [mcp-minecraft](https://github.com/arjunkmrm/mcp-minecraft) by arjunkmrm. While the original only supported local Minecraft server connections, this project was newly created from scratch to add support for connecting to remote Minecraft servers.\n\nMinecraft Remote Control using MCP (Model Context Protocol).\n\n## Features\n\n- Connect to and control a Minecraft player via an AI assistant\n- Navigate, mine, build, and interact with the Minecraft world\n- Chat with other players on the server\n- Check inventory, player position, and server information\n- Advanced movement control including jumping, sneaking, and sprinting\n- Entity interaction including attacking and following\n- Container usage (chests, furnaces, etc.)\n- Item crafting and villager trading\n- Detailed inventory management\n\n## Installation\n\n### Installing via Smithery\n\nTo install Minecraft Remote Control for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@nacal/mcp-minecraft-remote):\n\n```bash\nnpx -y @smithery/cli install @nacal/mcp-minecraft-remote --client claude\n```\n\n### Quick Install (Recommended)\n\n```bash\nnpx -y @smithery/cli install mcp-minecraft-remote --client claude\n```\n\nFollow the CLI prompts to complete the setup.\n\n### Manual Installation\n\n```bash\n# Install from npm\nnpm install -g mcp-minecraft-remote\n\n# Or clone the repository\ngit clone https://github.com/nacal/mcp-minecraft-remote.git\ncd mcp-minecraft-remote\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Usage\n\n### Using with Claude Desktop\n\n1. Navigate to Claude Desktop configuration file:\n\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. Add the Minecraft Remote MCP configuration to your configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"minecraft-remote\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-minecraft-remote@latest\"]\n    }\n  }\n}\n```\n\nIf you've installed it globally:\n\n```json\n{\n  \"mcpServers\": {\n    \"minecraft-remote\": {\n      \"command\": \"mcp-minecraft-remote\"\n    }\n  }\n}\n```\n\nIf you've cloned the repository locally:\n\n```json\n{\n  \"mcpServers\": {\n    \"minecraft-remote\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-minecraft-remote/build/index.js\"]\n    }\n  }\n}\n```\n\n3. Save the file and restart Claude Desktop\n4. Start a new conversation with Claude and begin using the Minecraft control commands\n\n### Important Server Requirements\n\n- **Server Online Mode**: The Minecraft server must have `online-mode=false` set in the server.properties file. This allows the bot to connect without authentication against Minecraft's session servers.\n- If using a server with authentication, you'll need to provide valid premium account credentials when connecting.\n\n### Available Tools\n\n#### Core Functionality\n\n- `connectToServer`: Connect to a Minecraft server with specified credentials\n- `disconnectFromServer`: Disconnect from the Minecraft server\n- `sendChat`: Send a chat message to the server\n- `getServerInfo`: Get information about the connected server\n\n#### Movement\n\n- `getPosition`: Get current player position\n- `moveTo`: Move to specific coordinates\n- `moveControl`: Basic movement controls (forward, back, left, right, jump, sprint, sneak, stop)\n- `lookAt`: Make the player look in a specific direction or at coordinates\n\n#### World Interaction\n\n- `digBlock`: Mine a block at specific coordinates\n- `placeBlock`: Place a block at specific coordinates\n\n#### Inventory Management\n\n- `checkInventory`: Basic inventory check\n- `inventoryDetails`: Get detailed information about inventory items\n- `equipItem`: Equip an item from inventory to hand or armor slot\n- `tossItem`: Throw items from inventory\n\n#### Entity Interaction\n\n- `getNearbyPlayers`: Get list of nearby players\n- `getNearbyEntities`: Get a list of all entities nearby\n- `attackEntity`: Attack a specific entity\n- `useOnEntity`: Use held item on a specific entity\n- `followEntity`: Follow a specific entity\n\n#### Container Interaction\n\n- `openContainer`: Open a container (chest, furnace, etc.) at specific coordinates\n- `withdrawItem`: Take items from an open container\n- `depositItem`: Put items into an open container\n- `closeContainer`: Close the currently open container\n\n#### Crafting\n\n- `getRecipes`: Get a list of available crafting recipes\n- `craftItem`: Craft an item using available materials\n\n#### Trading\n\n- `listTrades`: List available trades from a nearby villager\n- `tradeWithVillager`: Trade with a nearby villager\n\n### Example Prompts\n\n#### Basic Controls\n\n- \"Connect to the Minecraft server at play.example.com with the username player1\"\n- \"What is my current position in the game?\"\n- \"Move me to coordinates x=100, y=64, z=-200\"\n- \"Make me walk forward for 3 seconds\"\n- \"Make me jump and sprint toward that mountain\"\n\n#### Inventory & Items\n\n- \"Check what's in my inventory in detail\"\n- \"Equip my diamond sword to my hand\"\n- \"Throw 5 dirt blocks from my inventory\"\n\n#### Block Interaction\n\n- \"Dig the block at coordinates x=10, y=65, z=20\"\n- \"Place a stone block at coordinates x=11, y=65, z=20\"\n\n#### Entity Interaction\n\n- \"Are there any other players nearby?\"\n- \"What entities are within 20 blocks of me?\"\n- \"Attack the zombie with ID 12345\"\n- \"Follow the player named Steve\"\n\n#### Container Usage\n\n- \"Open the chest at coordinates x=100, y=64, z=200\"\n- \"Take 10 iron ingots from the chest\"\n- \"Put 5 cobblestone in the chest\"\n- \"Close the container\"\n\n#### Crafting & Trading\n\n- \"What recipes do I have available for a wooden pickaxe?\"\n- \"Craft 4 sticks using the wood in my inventory\"\n- \"Check what trades the nearby villager offers\"\n- \"Trade with the villager to get 10 emeralds\"\n\n#### Communication\n\n- \"Send a hello message to the chat\"\n- \"Tell everyone that I found diamonds\"\n\n## Requirements\n\n- Node.js 18+\n- An AI assistant that supports MCP (like Claude)\n- A Minecraft Java Edition server (version 1.8 or later)\n\n**Note**: This tool has been tested and verified to work specifically with vanilla Minecraft 1.21. While it may function with other versions or modded servers, compatibility is not guaranteed.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "minecraft",
        "mcp",
        "nacal",
        "mcp minecraft",
        "minecraft remote",
        "control minecraft"
      ],
      "category": "gaming-and-game-development"
    },
    "obinopaul--nba-mcp-server": {
      "owner": "obinopaul",
      "name": "nba-mcp-server",
      "url": "https://github.com/obinopaul/nba-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/obinopaul.webp",
      "description": "Access real-time NBA statistics and live game data, including player stats, team standings, and game results for integration into sports applications.",
      "stars": 2,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-06-28T14:37:54Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/obinopaul-nba-mcp-server-badge.png)](https://mseep.ai/app/obinopaul-nba-mcp-server)\n\n# NBA MCP Server\n\nA Python server implementing Model Context Protocol (MCP) for NBA statistics and live game data.\n\n## Overview\n\nThis server provides a set of tools for accessing NBA data through the NBA API. It serves as a bridge between applications and the NBA's data services, offering both live game information and historical statistics.\n\n## Features\n\n- Live game data (scoreboard, box scores, play-by-play)\n- Player information and career statistics\n- Team game logs and statistics\n- League standings\n- Game results and schedules\n\n## Tools\n\n### Live Game Data\n\n- **nba_live_scoreboard**\n  - Fetch today's NBA scoreboard (live or latest)\n  - Returns game IDs, start times, scores, and broadcast details\n\n- **nba_live_boxscore**\n  - Fetch real-time box score for a given NBA game ID\n  - Provides detailed player and team statistics\n\n- **nba_live_play_by_play**\n  - Retrieve live play-by-play actions for a specific game\n  - Includes scoring plays, fouls, timeouts, and substitutions\n\n### Player Information\n\n- **nba_common_player_info**\n  - Retrieve basic information about a player\n  - Includes biographical data, height, weight, team, position\n\n- **nba_player_career_stats**\n  - Obtain a player's career statistics\n  - Available in different formats (per game, totals, per 36 minutes)\n\n- **nba_list_active_players**\n  - Return a list of all currently active NBA players\n\n- **nba_player_game_logs**\n  - Obtain a player's game statistics within a specified date range\n\n### Team Data\n\n- **nba_team_game_logs_by_name**\n  - Fetch a team's game logs using the team name\n  - Avoids needing to know the team's numeric ID\n\n- **nba_fetch_game_results**\n  - Fetch game results for a given team ID and date range\n\n- **nba_team_standings**\n  - Fetch NBA team standings for a given season and season type\n\n- **nba_team_stats_by_name**\n  - Fetch team statistics using the team name\n  - Supports different aggregation methods (totals, per game, etc.)\n\n- **nba_all_teams_stats**\n  - Fetch statistics for all NBA teams across multiple seasons\n\n### Schedule Information\n\n- **nba_list_todays_games**\n  - Returns scoreboard data for any specific date\n\n## Usage\n\nThe server is implemented using the MCP framework and can be run as a standalone service.\n\n```python\n# Start the server\npython nba_server.py\n# or\nmcp run nba_server.py\n```\n\n### Configuration\n\n- The server runs with a 30-second timeout for more reliable operation\n- Signal handlers are implemented for graceful shutdown (Ctrl+C)\n\n### Usage with Claude Desktop\n\n#### Option 1: Using Docker (Recommended)\n\n1. Clone this repository\n```\ngit clone https://github.com/obinopaul/nba-mcp-server.git\ncd nba-mcp-server\n```\n\n2. Install dependencies\n```\npip install -r requirements.txt\n```\n\n3. Build the Docker image\n```\ndocker build -t nba_mcp_server .\n```\n\n4. Run the Docker container\n```\ndocker run -d -p 5000:5000 --name nba_mcp_server nba_mcp_server\n```\n\n5. Add this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"nba_mcp_server\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"exec\",\n        \"-i\",\n        \"nba_mcp_server\",\n        \"python\",\n        \"nba_server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Option 2: Direct Python Execution\n\n1. Clone this repository\n```\ngit clone https://github.com/obinopaul/nba-mcp-server.git\ncd nba-mcp-server\n```\n\n2. Create a new environment\n```\nconda create --name your_env_name python=3.13\nconda activate your_env_name\n```\n\n3. Install dependencies\n```\npip install -r requirements.txt\n```\n\n4. Run NBA mcp server on the terminal\n```\nmcp run nba_server.py\n```\n\n5. Add this to your `claude_desktop_config.json`, adjusting the Python path as needed:\n\n```json\n{\n  \"mcpServers\": {\n    \"nba_mcp_server\": {\n      \"command\": \"/path/to/your/python\",\n      \"args\": [\n        \"/path/to/nba_server.py\"\n      ]\n    }\n  }\n}\n```\n\nAfter adding your chosen configuration, restart Claude Desktop to load the NBA server. You'll then be able to use all the NBA data tools in your conversations with Claude.\n\n\n## Technical Details\n\nThe server is built on:\n- NBA API (nba_api) Python package\n- MCP for API interface\n- Pydantic for input validation\n- Pandas for data manipulation\n\n## License\n\nThis MCP server is available under the MIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nba",
        "sports",
        "stats",
        "nba statistics",
        "game data",
        "player stats"
      ],
      "category": "gaming-and-game-development"
    },
    "opgginc--opgg-mcp": {
      "owner": "opgginc",
      "name": "opgg-mcp",
      "url": "https://github.com/opgginc/opgg-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/opgginc.webp",
      "description": "Connects AI agents to comprehensive gaming data, including rankings, match schedules, champion analysis for League of Legends, meta compositions for Teamfight Tactics, and player statistics for Valorant. Provides tools for retrieving insights on gameplay and strategies across popular gaming titles.",
      "stars": 39,
      "forks": 11,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T21:26:25Z",
      "readme_content": "# OP.GG MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@opgginc/opgg-mcp)](https://smithery.ai/server/@opgginc/opgg-mcp)\n\nThe OP.GG MCP Server is a Model Context Protocol implementation that seamlessly connects OP.GG data with AI agents and platforms. This server enables AI agents to retrieve various OP.GG data via function calling.\n\n![opgg-mcp-lol-leaderboard](https://github.com/user-attachments/assets/e89a77e7-0b83-4e20-a660-b16aa2d03fe2)\n![opgg-mcp-esports](https://github.com/user-attachments/assets/4e134577-57b6-4369-bb71-b72f1bebcdd8)\n\n## Overview\n\nThis MCP server provides AI agents with access to OP.GG data through a standardized interface. It offers a simple way to connect to our remote server (https://mcp-api.op.gg/mcp), allowing for easy installation and immediate access to OP.GG data in a format that's easily consumable by AI models and agent frameworks.\n\n## Features\n\nThe OP.GG MCP Server currently supports the following tools:\n\n### League of Legends\n- **lol-champion-leader-board**: Get ranking board data for League of Legends champions.\n- **lol-champion-analysis**: Provides analysis data for League of Legends champions (counter and ban/pick data available in the \"weakCounters\" field).\n- **lol-champion-meta-data**: Retrieves meta data for a specific champion, including statistics and performance metrics.\n- **lol-champion-skin-sale**: Retrieves information about champion skins that are currently on sale.\n- **lol-summoner-search**: Search for League of Legends summoner information and stats.\n- **lol-champion-positions-data**: Retrieves position statistics data for League of Legends champions, including win rates and pick rates by position.\n- **lol-summoner-game-history**: Retrieve recent game history for a League of Legends summoner.\n- **lol-summoner-renewal**: Refresh and update League of Legends summoner match history and stats.\n\n### Esports (League of Legends)\n- **esports-lol-schedules**: Get upcoming LoL match schedules.\n- **esports-lol-team-standings**: Get team standings for a LoL league.\n\n### Teamfight Tactics (TFT)\n- **tft-meta-trend-deck-list**: TFT deck list tool for retrieving current meta decks.\n- **tft-meta-item-combinations**: TFT tool for retrieving information about item combinations and recipes.\n- **tft-champion-item-build**: TFT tool for retrieving champion item build information.\n- **tft-recommend-champion-for-item**: TFT tool for retrieving champion recommendations for a specific item.\n- **tft-play-style-comment**: This tool provides comments on the playstyle of TFT champions.\n\n### Valorant\n- **valorant-meta-maps**: Valorant map meta data.\n- **valorant-meta-characters**: Valorant character meta data.\n- **valorant-leaderboard**: Fetch Valorant leaderboard by region.\n- **valorant-agents-composition-with-map**: Retrieve agent composition data for a Valorant map.\n- **valorant-characters-statistics**: Retrieve character statistics data for Valorant, optionally filtered by map.\n- **valorant-player-match-history**: Retrieve match history for a Valorant player using their game name and tag line.\n\n## Usage\n\nThe OP.GG MCP Server can be used with any MCP-compatible client. The following content explains installation methods using Claude Desktop as an example.\n\n### Direct Connection via StreamableHttp\n\nIf you want to connect directly to our StreamableHttp endpoint, you can use the `supergateway` package. This provides a simple way to connect to our remote server without having to install the full OP.GG MCP Server.\n\nAdd the following to your `claude_desktop_config.json` file:\n\n#### Mac/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"supergateway\",\n        \"--streamableHttp\",\n        \"https://mcp-api.op.gg/mcp\"\n      ]\n    }\n  }\n}\n```\n\n#### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"supergateway\",\n        \"--streamableHttp\",\n        \"https://mcp-api.op.gg/mcp\"\n      ]\n    }\n  }\n}\n```\n\nThis configuration will use the `supergateway` package to establish a direct connection to our StreamableHttp endpoint, providing you with immediate access to all OP.GG data tools.\n\n### Installing via Smithery\n\nTo install OP.GG MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@opgginc/opgg-mcp):\n\n```bash\n$ npx -y @smithery/cli@latest install @opgginc/opgg-mcp --client claude --key {SMITHERY_API_KEY}\n```\n\n### Adding to MCP Configuration\n\nTo add this server to your Claude Desktop MCP configuration, add the following entry to your `claude_desktop_config.json` file:\n\n#### Mac/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@opgginc/opgg-mcp\",\n        \"--key\",\n        \"{SMITHERY_API_KEY}\"\n      ]\n    }\n  }\n}\n```\n\n#### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@opgginc/opgg-mcp\",\n        \"--key\",\n        \"{SMITHERY_API_KEY}\"\n      ]\n    }\n  }\n}\n```\n\nAfter adding the configuration, restart Claude Desktop for the changes to take effect.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Related Links\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [OP.GG](https://op.gg)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "opgg",
        "opgginc",
        "gameplay",
        "insights gameplay",
        "development opgginc",
        "opgg mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "pab1it0--chess-mcp": {
      "owner": "pab1it0",
      "name": "chess-mcp",
      "url": "https://github.com/pab1it0/chess-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pab1it0.webp",
      "description": "Access and analyze chess data through a standardized interface, including player profiles, game records, and club information. Supports searching for games by date and player, checking online status, and retrieving information about clubs and titled players.",
      "stars": 51,
      "forks": 13,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-23T19:27:23Z",
      "readme_content": "# Chess.com MCP Server\n\nA [Model Context Protocol][mcp] (MCP) server for Chess.com's Published Data API.\n\nThis provides access to Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.\n\nhttps://github.com/user-attachments/assets/3b33361b-b604-465c-9f6a-3699b6907757\n\n[mcp]: https://modelcontextprotocol.io/introduction/introduction\n\n## Features\n\n- [x] Access player profiles, stats, and game records\n- [x] Search games by date and player\n- [x] Check player online status\n- [x] Get information about clubs and titled players\n- [x] No authentication required (uses Chess.com's public API)\n- [x] Docker containerization support\n- [x] Provide interactive tools for AI assistants\n\nThe list of tools is configurable, so you can choose which tools you want to make available to the MCP client.\n\n## Usage\n\n### Docker (Recommended)\n\nThe easiest way to run chess-mcp with [Claude Desktop](https://claude.ai/desktop) is using Docker. If you don't have Docker installed, you can get it from [Docker's official website](https://www.docker.com/get-started/).\n\n\nEdit your Claude Desktop config file:\n* Mac: `~/Library/Application Support/Claude/claude_desktop_config.json`\n* Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n* Linux: `~/.config/Claude/claude_desktop_config.json`\n\nThen add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"chess\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"pab1it0/chess-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Running with UV\n\nAlternatively, you can run the server directly using UV. Edit your Claude Desktop config file (locations listed above) and add the server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"chess\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<full path to chess-mcp directory>\",\n        \"run\",\n        \"src/chess_mcp/main.py\"\n      ]\n    }\n  }\n}\n```\n\n> Note: if you see `Error: spawn uv ENOENT` in [Claude Desktop](https://claude.ai/desktop), you may need to specify the full path to `uv` or set the environment variable `NO_UV=1` in the configuration.\n\n## Development\n\nContributions are welcome! Please open an issue or submit a pull request if you have any suggestions or improvements.\n\nThis project uses [`uv`](https://github.com/astral-sh/uv) to manage dependencies. Install `uv` following the instructions for your platform:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nYou can then create a virtual environment and install the dependencies with:\n\n```bash\nuv venv\nsource .venv/bin/activate  # On Unix/macOS\n.venv\\Scripts\\activate     # On Windows\nuv pip install -e .\n```\n\n### Testing\n\nThe project includes a test suite that ensures functionality and helps prevent regressions.\n\nRun the tests with pytest:\n\n```bash\n# Install development dependencies\nuv pip install -e \".[dev]\"\n\n# Run the tests\npytest\n\n# Run with coverage report\npytest --cov=src --cov-report=term-missing\n```\n\n## Available Tools\n\n### Player Information\n- `get_player_profile` - Get a player's profile from Chess.com\n- `get_player_stats` - Get a player's stats from Chess.com\n- `is_player_online` - Check if a player is currently online on Chess.com\n- `get_titled_players` - Get a list of titled players from Chess.com\n\n### Games\n- `get_player_current_games` - Get a player's ongoing games on Chess.com\n- `get_player_games_by_month` - Get a player's games for a specific month from Chess.com\n- `get_player_game_archives` - Get a list of available monthly game archives for a player on Chess.com\n- `download_player_games_pgn` - Download PGN files for all games in a specific month from Chess.com\n\n### Clubs\n- `get_club_profile` - Get information about a club on Chess.com\n- `get_club_members` - Get members of a club on Chess.com\n\n## License\n\nMIT\n\n---\n\n[mcp]: https://modelcontextprotocol.io",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pab1it0",
        "chess",
        "games",
        "pab1it0 chess",
        "chess data",
        "chess mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "planetarium--mcp-agent8": {
      "owner": "planetarium",
      "name": "mcp-agent8",
      "url": "https://github.com/planetarium/mcp-agent8",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Connects to the Agent8 SDK for optimized development by retrieving prompts and code examples, as well as searching for game development resources through a structured API.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "agent8",
        "sdk",
        "mcp",
        "agent8 sdk",
        "mcp agent8",
        "connects agent8"
      ],
      "category": "gaming-and-game-development"
    },
    "playcanvas--editor-mcp-server": {
      "owner": "playcanvas",
      "name": "editor-mcp-server",
      "url": "https://github.com/playcanvas/editor-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/playcanvas.webp",
      "description": "Automate the PlayCanvas Editor to enhance game development by managing entities, handling assets, and adjusting scene settings efficiently with AI-driven tools.",
      "stars": 66,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T18:22:37Z",
      "readme_content": "    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó      ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù\n    ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó\n    ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë  ‚ïö‚ñà‚ñà‚ïî‚ïù  ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïë‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë\n    ‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë   ‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë\n    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù   ‚ïö‚ïê‚ïù    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n\n    ‚ñà‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó        ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïó   ‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó \n    ‚ñà‚ñà‚ñà‚ñà‚ïó ‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó       ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïê‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\n    ‚ñà‚ñà‚ïî‚ñà‚ñà‚ñà‚ñà‚ïî‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù       ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë   ‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù\n    ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïë‚ñà‚ñà‚ïë     ‚ñà‚ñà‚ïî‚ïê‚ïê‚ïê‚ïù        ‚ïö‚ïê‚ïê‚ïê‚ïê‚ñà‚ñà‚ïë‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó‚ïö‚ñà‚ñà‚ïó ‚ñà‚ñà‚ïî‚ïù‚ñà‚ñà‚ïî‚ïê‚ïê‚ïù  ‚ñà‚ñà‚ïî‚ïê‚ïê‚ñà‚ñà‚ïó\n    ‚ñà‚ñà‚ïë ‚ïö‚ïê‚ïù ‚ñà‚ñà‚ïë‚ïö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë            ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë ‚ïö‚ñà‚ñà‚ñà‚ñà‚ïî‚ïù ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ïó‚ñà‚ñà‚ïë  ‚ñà‚ñà‚ïë\n    ‚ïö‚ïê‚ïù     ‚ïö‚ïê‚ïù ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù            ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïù  ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù‚ïö‚ïê‚ïù  ‚ïö‚ïê‚ïù\n\nAn MCP Server for automating the [PlayCanvas Editor](https://playcanvas.com/products/editor) using an LLM.\n\n<img width=\"1864\" alt=\"Screenshot 2025-03-21 at 15 50 10\" src=\"https://github.com/user-attachments/assets/393ffe73-40eb-4e1b-9442-2295bbb63326\" />\n\n> [!IMPORTANT]  \n> At the moment, the MCP Server needs to be driven by Anthropic's Claude. Our experience shows that the free tier for Claude does not deliver a big enough chat context to operate the MCP Server reliably. Therefore, we strongly recommend subscribing to a Pro Claude account.\n\n## Available Tools\n\n* Entity\n  * `list_entities`\n  * `create_entities`\n  * `delete_entities`\n  * `duplicate_entities`\n  * `modify_entities`\n  * `reparent_entity`\n  * `add_components`\n  * `remove_components`\n  * `add_script_component_script`\n* Asset\n  * `list_assets`\n  * `create_assets`\n  * `delete_assets`\n  * `instantiate_template_assets`\n  * `set_script_text`\n  * `script_parse`\n  * `set_material_diffuse`\n* Scene\n  * `query_scene_settings`\n  * `modify_scene_settings`\n* Store\n  * `store_search`\n  * `store_get`\n  * `store_download`\n\n## Installation\n\nRun `npm install` to install all dependencies.\n\n### Install Chrome Extension\n\n1. Visit `chrome://extensions/` and enable Developer mode\n2. Click `Load unpacked` and select the `extensions` folder\n3. Load the PlayCanvas Editor. The extension should be loaded.\n\n### Run MCP Server\n\nThe MCP Server can be driven by Cursor or Claude Desktop.\n\n> [!TIP]  \n> We have found Claude Desktop to be generally more reliable.\n\n#### Claude Desktop\n\n1. Install [Claude Desktop](https://claude.ai/download).\n2. Go to `Claude` > `Settings`.\n3. Select `Developer` and then `Edit Config`.\n4. This will open `claude_desktop_config.json`, your MCP Config JSON file.\n\n#### Cursor\n\n1. Install [Cursor](https://www.cursor.com/).\n2. Select `File` > `Preferences` > `Cursor Settings`.\n3. Click `+ Add new global MCP server`.\n4. This will open `mcp.json`, your MCP Config JSON file.\n\n> [!TIP]  \n> Also in `Cursor Settings`, select `Features` and scroll to the `Chat` section. Activate `Enable auto-run mode` to allow the LLM to run MCP tools without requiring constant authorization. You do this at your own risk (but we prefer it)!\n\n> [!IMPORTANT]  \n> In Cursor, ensure you have `Agent` selected. `Ask` and `Edit` modes will not recognize the MCP Server.\n\n#### MCP Config JSON File\n\nThis is how your config should look:\n\nWindows\n\n```json\n{\n  \"mcpServers\": {\n    \"playcanvas\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"tsx\",\n        \"C:\\\\path\\\\to\\\\mcp-editor\\\\src\\\\server.ts\"\n      ],\n      \"env\": {\n        \"PORT\": \"52000\"\n      }\n    }\n  }\n}\n```\n\nmacOS\n\n```json\n{\n  \"mcpServers\": {\n    \"playcanvas\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"tsx\",\n        \"/path/to/mcp-editor/src/server.ts\"\n      ],\n      \"env\": {\n        \"PORT\": \"52000\"\n      }\n    }\n  }\n}\n```\n\n## Connecting the Editor to the MCP Server\n\nThe PlayCanvas Editor does not connect to the MCP Server automatically. To connect:\n\n1. Activate a Chrome tab running the PlayCanvas Editor.\n1. Select the Extensions icon to the right of the address bar.\n2. Select PlayCanvas Editor MCP Extension to open the extension popup.\n3. Select `CONNECT` (the port number should match what is set in your MCP Config JSON File).\n\n> [!NOTE]\n> You can currently only connect one instance of the PlayCanvas Editor to the MCP Server at any one time.\n\nYou should now be able to issue commands in Claude Desktop or Cursor.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "editor",
        "playcanvas",
        "automate",
        "playcanvas editor",
        "automate playcanvas",
        "development playcanvas"
      ],
      "category": "gaming-and-game-development"
    },
    "quazaai--UnityMCPIntegration": {
      "owner": "quazaai",
      "name": "UnityMCPIntegration",
      "url": "https://github.com/quazaai/UnityMCPIntegration",
      "imageUrl": "/freedevtools/mcp/pfp/quazaai.webp",
      "description": "Facilitates real-time interaction between AI assistants and Unity projects by allowing access to scene information, execution of C# code, and log monitoring within the Unity Editor. Enhances development workflows with additional file access functionalities for large language models (LLMs).",
      "stars": 94,
      "forks": 20,
      "license": "MIT License",
      "language": "C#",
      "updated_at": "2025-10-02T17:19:35Z",
      "readme_content": "# üöÄ Advacned Unity MCP Integration \n\n[![MCP](https://badge.mcpx.dev)](https://modelcontextprotocol.io/introduction)\n[![smithery badge](https://smithery.ai/badge/@quazaai/unitymcpintegration)](https://smithery.ai/server/@quazaai/unitymcpintegration)\n[![Unity](https://img.shields.io/badge/Unity-2021.3%2B-green?logo=https://w7.pngwing.com/pngs/426/535/png-transparent-unity-new-logo-tech-companies-thumbnail.png)](https://unity.com)\n[![Node.js](https://img.shields.io/badge/Node.js-18%2B-green)](https://nodejs.org)\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.0-blue)](https://www.typescriptlang.org)\n[![WebSockets](https://img.shields.io/badge/WebSockets-API-orange)](https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API)\n\n[![Stars](https://img.shields.io/github/stars/quazaai/UnityMCPIntegration)](https://github.com/quazaai/UnityMCPIntegration/stargazers)\n[![Forks](https://img.shields.io/github/forks/quazaai/UnityMCPIntegration)](https://github.com/quazaai/UnityMCPIntegration/network/members)\n[![License](https://img.shields.io/github/license/quazaai/UnityMCPIntegration)](https://github.com/quazaai/UnityMCPIntegration/blob/main/LICENSE)\n\n<div align=\"center\">\n  \n</div>\n\nThis package provides a seamless integration between [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) and Unity Editor, allowing AI assistants to understand and interact with your Unity projects in real-time. With this integration, AI assistants can access information about your scene hierarchy, project settings, and execute code directly in the Unity Editor context.\n\n## üìö Features\n- Browse and manipulate project files directly\n- Access real-time information about your Unity project\n- Understand your scene hierarchy and game objects\n- Execute C# code directly in the Unity Editor\n- Monitor logs and errors\n- Control the Editor's play mode\n- Wait For Code Execution\n\n\n\n\n\n## üöÄ Getting Started\n\n### Prerequisites\n\n- Unity 2021.3 or later\n- Node.js 18+ (for running the MCP server)\n\n### Installation\n\n#### 1. Install Unity Package\n\nYou have several options to install the Unity package:\n\n**Option A: Package Manager (Git URL)**\n1. Open the Unity Package Manager (`Window > Package Manager`)\n2. Click the `+` button and select `Add package from git URL...`\n3. Enter the repository URL: `https://github.com/quazaai/UnityMCPIntegration.git`\n4. Click `Add`\n\n**Option B: Import Custom Package**\n1. Clone this repository or [download it as a unityPackage](https://github.com/quazaai/UnityMCPIntegration/releases)\n2. In Unity, go to `Assets > Import Package > Custom Package`\n3. Select the `UnityMCPIntegration.unitypackage` file\n\n\n\n#### 2. Set up the MCP Server\n\nYou have two options to run the MCP server:\n\n**Option A: Run the server directly**\n\n1. Navigate to the `mcpServer (likely <path-to-project>\\Library\\PackageCache\\com.quaza.unitymcp@d2b8f1260bca\\mcpServer\\)` directory\n2. Install dependencies:\n   ```\n   npm install\n   ```\n3. Run the server:\n   ```\n   node build/index.js\n   ```\n\n**Option B: Add to MCP Host configuration**\n\nAdd the server to your MCP Host configuration for Claude Desktop, Custom Implementation etc\n\n```json\n{\n  \"mcpServers\": {\n    \"unity-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path-to-project>\\\\Library\\\\PackageCache\\\\com.quaza.unitymcp@d2b8f1260bca\\\\mcpServer\\\\mcpServer\\\\build\\\\index.js\"\n      ],\n      \"env\": {\n        \"MCP_WEBSOCKET_PORT\": \"5010\"\n      }\n    }\n  }\n}\n```\n### Demo Video\n[![YouTube](http://i.ytimg.com/vi/GxTlahBXs74/hqdefault.jpg)](https://www.youtube.com/watch?v=GxTlahBXs74)\n\n### Installing via Smithery\n\nTo install Unity MCP Integration for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@quazaai/unitymcpintegration):\n\n```bash\nnpx -y @smithery/cli install @quazaai/unitymcpintegration --client claude\n```\n\n### üîß Usage\n\n#### Debugging and Monitoring\n\nYou can open the MCP Debug window in Unity to monitor the connection and test features:\n\n1. Go to `Window > MCP Debug`\n2. Use the debug window to:\n   - Check connection status\n   - Test code execution\n   - View logs\n   - Monitor events\n\n#### Available Tools\n\nThe Unity MCP integration provides several tools to AI assistants:\n\n##### Unity Editor Tools\n- **get_editor_state**: Get comprehensive information about the Unity project and editor state\n- **get_current_scene_info**: Get detailed information about the current scene\n- **get_game_objects_info**: Get information about specific GameObjects in the scene\n- **execute_editor_command**: Execute C# code directly in the Unity Editor\n- **get_logs**: Retrieve and filter Unity console logs\n- **verify_connection**: Check if there's an active connection to Unity Editor\n\n##### Filesystem Tools\n- **read_file**: Read contents of a file in your Unity project\n- **read_multiple_files**: Read multiple files at once\n- **write_file**: Create or overwrite a file with new content\n- **edit_file**: Make targeted edits to existing files with diff preview\n- **list_directory**: Get a listing of files and folders in a directory\n- **directory_tree**: Get a hierarchical view of directories and files\n- **search_files**: Find files matching a search pattern\n- **get_file_info**: Get metadata about a specific file or directory\n- **find_assets_by_type**: Find all assets of a specific type (e.g. Material, Prefab)\n- **list_scripts**: Get a listing of all C# scripts in the project\n\nFile paths can be absolute or relative to the Unity project's Assets folder. For example, `\"Scenes/MyScene.unity\"` refers to `<project>/Assets/Scenes/MyScene.unity`.\n\n## üõ†Ô∏è Architecture\n\nThe integration consists of two main components:\n\n1. **Unity Plugin (C#)**: Resides in the Unity Editor and provides access to Editor APIs\n2. **MCP Server (TypeScript/Node.js)**: Implements the MCP protocol and communicates with the Unity plugin\n\nCommunication between them happens via WebSocket, transferring JSON messages for commands and data.\n\n## File System Access\n\nThe Unity MCP integration now includes powerful filesystem tools that allow AI assistants to:\n\n- Browse, read, and edit files in your Unity project\n- Create new files and directories\n- Search for specific files or asset types\n- Analyze your project structure\n- Make targeted code changes with diff previews\n\nAll file operations are restricted to the Unity project directory for security. The system intelligently handles both absolute and relative paths, always resolving them relative to your project's Assets folder for convenience.\n\nExample usages:\n- Get a directory listing: `list_directory(path: \"Scenes\")`\n- Read a script file: `read_file(path: \"Scripts/Player.cs\")`\n- Edit a configuration file: `edit_file(path: \"Resources/config.json\", edits: [{oldText: \"value: 10\", newText: \"value: 20\"}], dryRun: true)`\n- Find all materials: `find_assets_by_type(assetType: \"Material\")`\n\n## üë• Contributing\n\nContributions are welcome! Here's how you can contribute:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Make your changes\n4. Commit your changes (`git commit -m 'Add some amazing feature'`)\n5. Push to the branch (`git push origin feature/amazing-feature`)\n6. Open a Pull Request\n\n### Development Setup\n\n**Unity Side**:\n- Open the project in Unity\n- Modify the C# scripts in the `UnityMCPConnection/Editor` directory\n\n**Server Side**:\n- Navigate to the `mcpServer` directory\n- Install dependencies: `npm install`\n- Make changes to the TypeScript files in the `src` directory\n- Build the server: `npm run build`\n- Run the server: `node build/index.js`\n\n## üìÑ License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## üìû Support\n\nIf you encounter any issues or have questions, please file an issue on the GitHub repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "unity",
        "ai",
        "unitymcpintegration",
        "assistants unity",
        "ai assistants",
        "unity projects"
      ],
      "category": "gaming-and-game-development"
    },
    "royshil--obs-mcp": {
      "owner": "royshil",
      "name": "obs-mcp",
      "url": "https://github.com/royshil/obs-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/royshil.webp",
      "description": "Control OBS Studio with tools for scene management, source control, and streaming operations using the MCP protocol. Integrates with OBS WebSocket server to automate and enhance streaming workflows.",
      "stars": 48,
      "forks": 9,
      "license": "GNU General Public License v2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-01T13:48:45Z",
      "readme_content": "# OBS MCP Server\n\nAn MCP server for OBS Studio that provides tools to control OBS via the OBS WebSocket protocol.\n\n## Features\n\n- Connect to OBS WebSocket server\n- Control OBS via MCP tools\n- Provides tools for:\n  - General operations\n  - Scene management\n  - Source control\n  - Scene item manipulation\n  - Streaming and recording\n  - Transitions\n\n\n## Usage\n\n1. Make sure OBS Studio is running with WebSocket server enabled (Tools > WebSocket Server Settings). Note the password for the WS.\n2. Set the WebSocket password in environment variable (if needed):\n\n```bash\nexport OBS_WEBSOCKET_PASSWORD=\"your_password_here\"\n```\n\n3. Add the MCP server to Claude desktop with the MCP server settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"obs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"obs-mcp@latest\"],\n      \"env\": {\n        \"OBS_WEBSOCKET_PASSWORD\": \"<password_from_obs>\"\n      }\n    }\n  }\n}\n```\n\n4. Use Claude to control your OBS!\n\n## Development\n\nIf you want to run the server locally using the code in this git repo, you can do the following:\n\n\n```bash\nnpm run build\nnpm run start\n```\n\nThen configure Claude desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"obs\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"<obs-mcp_root>/build/index.js\"\n      ],\n      \"env\": {\n        \"OBS_WEBSOCKET_PASSWORD\": \"<password_from_obs>\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\nThe server provides tools organized by category:\n\n- General tools: Version info, stats, hotkeys, studio mode\n- Scene tools: List scenes, switch scenes, create/remove scenes\n- Source tools: Manage sources, settings, audio levels, mute/unmute\n- Scene item tools: Manage items in scenes (position, visibility, etc.)\n- Streaming tools: Start/stop streaming, recording, virtual camera\n- Transition tools: Set transitions, durations, trigger transitions\n\n## Environment Variables\n\n- `OBS_WEBSOCKET_URL`: WebSocket URL (default: ws://localhost:4455)\n- `OBS_WEBSOCKET_PASSWORD`: Password for authenticating with OBS WebSocket (if required)\n\n## Requirements\n\n- Node.js 16+\n- OBS Studio 31+ with WebSocket server enabled\n- Claude desktop\n\n## License\n\nSee the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obs",
        "streaming",
        "websocket",
        "obs studio",
        "obs websocket",
        "control obs"
      ],
      "category": "gaming-and-game-development"
    },
    "sawa-zen--vrchat-mcp": {
      "owner": "sawa-zen",
      "name": "vrchat-mcp",
      "url": "https://github.com/sawa-zen/vrchat-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sawa-zen.webp",
      "description": "Access VRChat's API endpoints to retrieve user information, avatars, worlds, and other data using a standardized protocol. Integrate and automate functionalities to enhance the VRChat experience.",
      "stars": 43,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T23:38:42Z",
      "readme_content": "[![npm version](https://badge.fury.io/js/vrchat-mcp.svg)](https://badge.fury.io/js/vrchat-mcp) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n[Êó•Êú¨Ë™û](./README.ja.md) | [ÌïúÍµ≠Ïñ¥](./README.ko.md)\n\nThis project is a Model Context Protocol (MCP) server for interacting with the VRChat API. It allows you to retrieve various information from VRChat using a standardized protocol.\n\n<a href=\"https://youtu.be/0MRxhzlFCkw\">\n  <img width=\"300\" src=\"https://github.com/user-attachments/assets/85c00cc4-46b3-4f66-ab36-bf2891fdb283\" alt=\"YouTube\" />\n</a>\n\n<a href=\"https://glama.ai/mcp/servers/u763zoyi5a\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/u763zoyi5a/badge\" />\n</a>\n\n## Overview\n\nThe VRChat MCP server provides a way to access VRChat's API endpoints in a structured manner. It supports a wide range of functionalities, including user authentication, retrieving user and friend information, accessing avatar and world data, and more.\n\n## Usage\n\nTo start the server, ensure you have the necessary environment variables set:\n\n```bash\nexport VRCHAT_USERNAME=your_username\nexport VRCHAT_AUTH_TOKEN=your_auth_token\n```\n\n> [!NOTE]\n> #### How to obtain AUTH TOKEN\n>\n> You can use the following command to login and obtain an auth token:\n> ```\n> $ npx vrchat-auth-token-checker\n>\n> VRChat Username: your-username\n> Password: ********\n>\n> # If 2FA is enabled\n> 2FA Code: 123456\n>\n> # Success output\n> Auth Token: authcookie-xxxxx\n> ```\n> [Command source code](https://github.com/sawa-zen/vrchat-auth-token-checker)\n>\n> **Please handle the obtained token with care as it has a very long lifetime**\n\nThen, run the following command:\n\n```bash\nnpx vrchat-mcp\n```\n\nThis will launch the MCP server, allowing you to interact with the VRChat API through the defined tools.\n\n## Usage with Claude Desktop\n\nTo use this MCP server with Claude Desktop, you do not need to run `npx vrchat-mcp` manually. Instead, add the following configuration to your Claude Desktop config file:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"vrchat-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"vrchat-mcp\"],\n      \"env\": {\n        \"VRCHAT_USERNAME\": \"your-username\",\n        \"VRCHAT_AUTH_TOKEN\": \"your-auth-token\"\n      }\n    }\n  }\n}\n```\n\nThen, start Claude Desktop as usual. If you have to use nodenv or nvm, you may need to specify the full path to the `npx` command.\n\n## Available Tools\n\nThis Model Context Protocol server provides the following VRChat-related tools:\n\n### User Related\n- vrchat_get_friends_list: Get a list of friends\n- vrchat_send_friend_request: Send a friend request\n\n### Avatar Related\n- vrchat_search_avatars: Search for avatars\n- vrchat_select_avatar: Select and switch to a specific avatar\n\n### World Related\n- vrchat_search_worlds: Search for worlds\n- vrchat_list_favorited_worlds: Get a list of favorited worlds\n\n### Instance Related\n- vrchat_create_instance: Create a new instance\n- vrchat_get_instance: Get information about a specific instance\n\n### Group Related\n- vrchat_search_groups: Search for groups\n- vrchat_join_group: Join a group\n\n### Favorites Related\n- vrchat_list_favorites: Get a list of favorites\n- vrchat_add_favorite: Add a new favorite\n- vrchat_list_favorite_groups: Get a list of favorite groups\n\n### Invite Related\n- vrchat_list_invite_messages: Get a list of invite messages\n- vrchat_request_invite: Request an invite\n- vrchat_get_invite_message: Get a specific invite message\n\n### Notification Related\n- vrchat_get_notifications: Get a list of notifications\n\n## Debugging\n\nFirst, build the project:\n\n```bash\nnpm install\nnpm run build\n```\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging experience, we strongly recommend using the MCP Inspector.\n\nYou can launch the MCP Inspector via npm with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector \"./dist/main.js\"\n```\n\nBe sure that environment variables are properly configured.\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## Publishing\n\nTo publish a new version of the package, follow these steps:\n\n1. Pull the latest code from the main branch\n   ```bash\n   git checkout main\n   git pull origin main\n   ```\n\n2. Build the package\n   ```bash\n   npm run build\n   ```\n\n4. Publish to npm\n   ```bash\n   npm publish\n   ```\n\n5. Push changes to the remote repository\n   ```bash\n   git push origin main --tags\n   ```\n\n## Contributing\n\nContributions are welcome! Please fork the repository and submit a pull request for any improvements or bug fixes.\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vrchat",
        "api",
        "zen",
        "vrchat api",
        "access vrchat",
        "vrchat experience"
      ],
      "category": "gaming-and-game-development"
    },
    "saymondamasio--wongames-mcp": {
      "owner": "saymondamasio",
      "name": "wongames-mcp",
      "url": "https://github.com/saymondamasio/wongames-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/saymondamasio.webp",
      "description": "Integrate real-world data and tools to enhance user interactions in applications. Provide dynamic context adjustments to seamlessly connect AI models with various data sources.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-27T11:55:57Z",
      "readme_content": "# wongames-mcp\n\nTo install dependencies:\n\n```bash\nbun install\n```\n\nTo run:\n\n```bash\nbun run index.ts\n```\n\nThis project was created using `bun init` in bun v1.2.5. [Bun](https://bun.sh) is a fast all-in-one JavaScript runtime.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "gaming",
        "game",
        "connect ai",
        "gaming game",
        "ai models"
      ],
      "category": "gaming-and-game-development"
    },
    "shreyaskarnik--mcpet": {
      "owner": "shreyaskarnik",
      "name": "mcpet",
      "url": "https://github.com/shreyaskarnik/mcpet",
      "imageUrl": "/freedevtools/mcp/pfp/shreyaskarnik.webp",
      "description": "MCPet is a TypeScript-based server that simulates a virtual pet experience, allowing users to adopt, nurture, and engage with a digital companion that evolves based on user interaction. The pet's stats change over time, reflecting care tasks such as feeding, cleaning, and playing games.",
      "stars": 9,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-06T21:24:06Z",
      "readme_content": "# MCPet\n\n\n\n[![smithery badge](https://smithery.ai/badge/@shreyaskarnik/mcpet)](https://smithery.ai/service/@shreyaskarnik/mcpet)\n\nMCPet: A nostalgic virtual pet experience for the AI age! This [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server lets you adopt, nurture, and play with your very own digital companion that evolves based on your care. Feed them, clean them, play games together, and watch them grow from a baby to an adult. Your pet's stats change over time even when you're away - just like the classic Tamagotchi toys, but powered by modern AI through the Model Context Protocol. Adopt your digital friend today!\n\nThis is a TypeScript-based MCP server that implements a virtual pet simulation system. It demonstrates core MCP concepts by providing tools for pet care and interaction.\n\n## Features\n\n### Virtual Pet Types\n\n- Choose from four pet types:\n  - Cat - Slightly moody but lovable\n  - Dog - Energetic and always happy to see you\n  - Dragon - Unique and fiery personality\n  - Alien - Mysterious and curious\n\n### Pet Lifecycle\n\n- Watch your pet evolve through four stages:\n  - Baby - Small and vulnerable\n  - Child - Growing and playful\n  - Teen - Energetic and developing\n  - Adult - Fully grown and wise\n\n### Stats Management\n\n- Care for your pet by managing five key stats:\n  - Hunger - Keep your pet well-fed\n  - Happiness - Play with your pet to keep them happy\n  - Health - Overall wellbeing affected by other stats\n  - Energy - Depletes with activity, replenishes with rest\n  - Cleanliness - Regular baths keep your pet fresh\n\n### Tools\n\n- `create_pet` - Adopt a new pet with a custom name and type\n- `check_pet` - View your pet's current status and stats\n- `feed_pet` - Feed your pet with different food options:\n  - Snack - Small hunger boost\n  - Meal - Balanced nutrition\n  - Feast - Maximum feeding (but can be unhealthy)\n- `play_with_pet` - Play different games:\n  - Ball - Light exercise\n  - Chase - High energy fun\n  - Puzzle - Mental stimulation\n- `clean_pet` - Give your pet a bath to restore cleanliness\n- `put_to_bed` - Let your pet sleep to restore energy\n\n### Animations\n\n- Dynamic ASCII art animations for each pet type and activity\n- Randomized frames create a lively and engaging experience\n- Special animations for:\n  - Eating different foods\n  - Playing various games\n  - Bathing\n  - Sleeping\n  - Being sick\n  - And more!\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install MCPet for Claude Desktop automatically via [Smithery](https://smithery.ai/service/@shreyaskarnik/mcpet):\n\n```bash\nnpx -y @smithery/cli install @shreyaskarnik/mcpet --client claude\n```\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcpet\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcpet/build/index.js\"],\n      \"env\": {\n        \"PET_DATA_DIR\": \"/path/to/writable/directory\"\n      }\n    }\n  }\n}\n```\n\nNote: The `PET_DATA_DIR` environment variable specifies where pet data will be stored. Make sure this is a directory with write permissions.\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpx @modelcontextprotocol/inspector node /path/to/mcpet/build/index.js\n```\n\nThe Inspector will provide an interface for testing your pet interactions directly.\n\n## Usage Examples\n\nAsk Claude questions like:\n\n- \"Can you create a cat pet named Whiskers?\"\n- \"How is my pet doing?\"\n- \"Can you feed my pet a meal?\"\n- \"I'd like to play chase with my pet\"\n- \"My pet looks dirty, can you give it a bath?\"\n- \"My pet seems tired, can you put it to bed?\"",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpet",
        "pet",
        "gaming",
        "mcpet mcpet",
        "mcpet typescript",
        "shreyaskarnik mcpet"
      ],
      "category": "gaming-and-game-development"
    },
    "spirita1204--AI-Villgers": {
      "owner": "spirita1204",
      "name": "AI-Villgers",
      "url": "https://github.com/spirita1204/AI-Villgers",
      "imageUrl": "/freedevtools/mcp/pfp/spirita1204.webp",
      "description": "Create an interactive 2D world where players engage with NPCs through tasks and conversations. It utilizes advanced AI technologies for dynamic NPC behaviors and real-time interactions based on player choices.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-03T18:11:10Z",
      "readme_content": "# AIÊùëÊ∞ë\n\n‚úÖ **Â∞àÊ°àÊßãÊÉ≥**\n\n- **Ë®≠Ë®à 2D Âú∞ÂúñËàáÁâ©‰ª∂**ÔºöÂÆöÁæ©ÊØèÂÄãÂú∞ÈªûÔºàÂ¶ÇÁâÜÂ£Å„ÄÅÂïÜÂ∫óÁ≠âÔºâÁöÑÂ∫ßÊ®ôÁ≥ªÁµ±„ÄÇ\n- **NPC Ë°åÁÇ∫Ëàá‰ªªÂãôÁ≥ªÁµ±**ÔºöÂª∫Á´ã NPC ÁãÄÊÖãÊ©üÔºå‰∏¶Ê†πÊìöÊôÇÈñìÊàñÂÖ∂‰ªñÊ¢ù‰ª∂ÁîüÊàêÊØèÊó•‰ªªÂãô„ÄÇ\n- **Âú∞Âúñ‰∫§‰∫íËàáË∑ØÂæëË¶èÂäÉ**ÔºöÂØ¶ÁèæË∑ØÂæëÂ∞ãË∑ØÊºîÁÆóÊ≥ïÔºåËÆì NPC ËÉΩÂ§†Âú®Âú∞Âúñ‰∏äËá™Áî±ÁßªÂãï„ÄÇ\n- **ËÅäÂ§©Á≥ªÁµ±Êï¥Âêà**ÔºöË®≠Ë®àÁé©ÂÆ∂Ëàá NPC ‰πãÈñìÁöÑ‰∫íÂãïÊåá‰ª§ÔºåËÆìÁé©ÂÆ∂ËÉΩÂ§†Áõ¥Êé•ÊéßÂà∂ NPC„ÄÇ\n- **Ê∏¨Ë©¶ËàáÂÑ™Âåñ**ÔºöÊ∏¨Ë©¶ NPC Ë°åÁÇ∫ÁöÑÊ≠£Á¢∫ÊÄßÂíåÊµÅÊö¢Â∫¶ÔºåÂÑ™ÂåñÁßªÂãïÂíå‰ªªÂãôÁîüÊàêÁöÑÈÇèËºØ„ÄÇ\n\n---\n\n‚úÖ **Â∞àÊ°àÊäÄË°ì**\n\n### **1. È†ÖÁõÆÊû∂ÊßãËàáÂæåÁ´ØÊäÄË°ì**\n\n| **ÂæåÁ´Ø** | **Django**ÔºöÁî®ÊñºËôïÁêÜËÅäÂ§©Á≥ªÁµ±„ÄÅ‰ªªÂãôÁîüÊàêÂíåÁÆ°ÁêÜ NPC Ë°åÁÇ∫„ÄÇ |\n| --- | --- |\n| **Ë≥áÊñôÂ∫´** | **SQLite** Êàñ **MySQL**ÔºöÁî®ÊñºÂ≠òÂÑ≤ NPC Ë®≠ÂÆö„ÄÅ‰ªªÂãôËÖ≥Êú¨Âíå NPC ÁãÄÊÖã„ÄÇ\n**MongoDB**ÔºàÂ¶ÇÊûúÈúÄË¶ÅÊõ¥ÈùàÊ¥ªÁöÑÁµêÊßãÂåñÊï∏ÊìöÔºâ. |\n| **API ËàáËÅäÂ§©Á≥ªÁµ±** | ‚Ä¢ **GPT-3**ÔºàÊàñ GPT-4ÔºâAPIÔºöÁîüÊàêÊó•Â∏∏‰ªªÂãô„ÄÅÈÄ≤Ë°åÂ∞çË©±„ÄÅËß£ÊûêÁé©ÂÆ∂Êåá‰ª§‰∏¶ÊåáÊ¥æÁµ¶ NPC„ÄÇ\n‚Ä¢ [**Socket.io**](http://socket.io/)ÔºöÂØ¶ÁèæÂç≥ÊôÇËÅäÂ§©ÂäüËÉΩÔºåËÆìÁé©ÂÆ∂ÂèØ‰ª•Ëàá NPC ‰∫íÂãï„ÄÇ |\n\n---\n\n**2. ‰∫∫Â∑•Êô∫ËÉΩËàá NPC Ë°åÁÇ∫ÊéßÂà∂**\n\n| **ÁãÄÊÖãÊ©ü** | **Finite State Machine (FSM)**ÔºöÁî®ÊñºÂª∫Ê®° NPC ÁöÑÁãÄÊÖãËàáË°åÁÇ∫ÔºàÂ¶ÇÁ≠âÂæÖ„ÄÅÁßªÂãï„ÄÅ‰∫íÂãïÁ≠âÔºâ„ÄÇ\n**Task Scheduler**ÔºöÁîüÊàêÊØèÊó•‰ªªÂãôÔºå‰∏¶Ê†πÊìö‰ªªÂãôÈÄ≤Ë°åË°åÁÇ∫Ë™øÂ∫¶ |\n| --- | --- |\n| **NPC ‰ªªÂãôÁîüÊàê** | **Ë¶èÂâáÂºïÊìé**ÔºàÂ¶Ç **Drools** Êàñ **Prolog**ÔºâÔºöÊ†πÊìöË®≠ÁΩÆÁöÑË¶èÂâá‰æÜÁîüÊàê‰ªªÂãôÔºà‰æãÂ¶Ç‚ÄúÊó©‰∏äÂéªË∂ÖÂ∏Ç‚ÄùÔºâ„ÄÇ\n**Èö®Ê©üÁîüÊàêÁ≥ªÁµ±**ÔºöÂü∫ÊñºË¶èÂâáÂíåÊôÇÈñìÁîüÊàêÂãïÊÖã‰ªªÂãôÔºåÂ¢ûÂº∑ÈÅäÊà≤ÊÄß |\n\n---\n\n### **3. ‰∫∫Â∑•ËÅäÂ§©Á≥ªÁµ±ËàáÊåá‰ª§Ëß£Êûê**\n\n| **Ëá™ÁÑ∂Ë™ûË®ÄËôïÁêÜ (NLP)** |  **GPT-3/4**ÔºöÁî®ÊñºËß£ÊûêÁé©ÂÆ∂Êåá‰ª§ÔºåÁêÜËß£Êåá‰ª§‰∏¶ÁîüÊàêÂêàÁêÜÁöÑ NPC Ë°åÁÇ∫„ÄÇ\n**spaCy** Êàñ **NLTK**ÔºöÁî®ÊñºÊñáÊú¨ËôïÁêÜÔºåÊèêÂèñÊåá‰ª§‰∏≠ÁöÑÈóúÈçµË≥áË®äÔºà‰æãÂ¶Ç NPC ÂêçÁ®±„ÄÅÂú∞ÈªûÔºâ„ÄÇ |\n| --- | --- |\n| **ËÅäÂ§©ÂºïÊìé** | **Dialogflow**ÔºàGoogleÔºâÔºöÁî®ÊñºÊßãÂª∫ËÅäÂ§©Ê©üÂô®‰∫∫ÔºåËôïÁêÜË§áÈõúÁöÑÂ∞çË©±ÊµÅÂíåÊåá‰ª§Ëß£Êûê„ÄÇ\n**Rasa**ÔºöÈñãÊ∫êÂ∞çË©±Âºè AI Âπ≥Âè∞ÔºåÂèØÁî®ÊñºÊßãÂª∫Ëá™ÂÆöÁæ©ËÅäÂ§©Ê©üÂô®‰∫∫„ÄÇ |\n| **Áî®Êà∂‰∫§‰∫íÊé•Âè£** | **Telegram Bot API** Êàñ **Discord Bot API**ÔºöÁî®ÊñºÂú®ËÅäÂ§©Âπ≥Âè∞‰∏≠ËàáÁé©ÂÆ∂‰∫íÂãïÔºåÊé•Êî∂Êåá‰ª§‰∏¶ÂõûÊáâ„ÄÇ |\n\n---\n\n### **4. ÂâçÁ´ØÊäÄË°ìËàáÈÅäÊà≤ÂºïÊìé**\n\n| **ÈÅäÊà≤ÂºïÊìé** | UnrealEngineÔºöÊ∏≤Êüì 2D Âú∞ÂúñÂíåÁâ©È´îÔºåÊéßÂà∂ NPC Ë°åÁÇ∫„ÄÇ |\n| --- | --- |\n\n---\n\n‚úÖ **Â∞àÊ°àÈÄ≤Â∫¶**\n\n[ To-Do](To-Do%201b0cfc67a80e81b58849e88014bba105.csv)\n\n‚úÖ Â∞àÊ°àÁ¥†Êùê,ÂúñÁ§∫\n\nUEÁ¥†Êùê: Paper ZD\n\n- ‚úÖ Ë≥áÊñôË°®\n    \n    ### **1. NPC Ë≥áÊñôË°® (`npc`)**\n    \n    ÈÄôÂÄãË≥áÊñôË°®Ë®òÈåÑÊâÄÊúâ NPC ÁöÑÂü∫Êú¨Ë≥áË®ä„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | npc_id | INT | NPC ÂîØ‰∏ÄË≠òÂà• ID |\n    | name | VARCHAR | NPC ÂêçÁ®± |\n    | description | TEXT | NPC ÊèèËø∞ |\n    | current_task | INT | Áï∂Ââç‰ªªÂãô IDÔºàÊåáÂêë `tasks` Ë≥áÊñôË°®Ôºâ |\n    | status | VARCHAR | NPC ÁãÄÊÖãÔºà‰æãÂ¶ÇÔºöÂæÖÂëΩ„ÄÅÁßªÂãï‰∏≠„ÄÅÂü∑Ë°å‰ªªÂãôÔºâ |\n    | position_x | INT | NPC Âú®Âú∞Âúñ‰∏äÁöÑ X Â∫ßÊ®ô |\n    | position_y | INT | NPC Âú®Âú∞Âúñ‰∏äÁöÑ Y Â∫ßÊ®ô |\n    | last_active | DATETIME | ‰∏äÊ¨°Âü∑Ë°å‰ªªÂãôÁöÑÊôÇÈñì |\n    \n    ---\n    \n    ### **2. ‰ªªÂãôË≥áÊñôË°® (`tasks`)**\n    \n    ÈÄôÂÄãË≥áÊñôË°®Ë®òÈåÑÊâÄÊúâÂèØÂàÜÈÖçÁöÑ‰ªªÂãôÔºåÂåÖÊã¨ÊØèÊó•‰ªªÂãôÂíåÈö®Ê©ü‰ªªÂãô„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | task_id | INT | ‰ªªÂãôÂîØ‰∏ÄË≠òÂà• ID |\n    | task_name | VARCHAR | ‰ªªÂãôÂêçÁ®± |\n    | description | TEXT | ‰ªªÂãôÊèèËø∞ |\n    | task_type | VARCHAR | ‰ªªÂãôÈ°ûÂûãÔºàÂ¶ÇÊó•Â∏∏„ÄÅÈö®Ê©ü„ÄÅÁâπÊÆäÔºâ |\n    | start_time | DATETIME | ‰ªªÂãôÈñãÂßãÊôÇÈñì |\n    | end_time | DATETIME | ‰ªªÂãôÁµêÊùüÊôÇÈñì |\n    | is_completed | BOOLEAN | ‰ªªÂãôÊòØÂê¶ÂÆåÊàê |\n    \n    ---\n    \n    ### **3. ‰ªªÂãôÊó•Á®ãË°® (`npc_task_schedule`)**\n    \n    ÈÄôÂÄãË≥áÊñôË°®Ë®òÈåÑÊØèÂÄã NPC ÊØèÂ§©ÈúÄË¶ÅÂü∑Ë°åÁöÑ‰ªªÂãôÂÆâÊéíÔºåÈ°û‰ººÊó•Á®ãË°®„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | npc_id | INT | NPC IDÔºàÊåáÂêë `npc` Ë≥áÊñôË°®Ôºâ |\n    | task_id | INT | ‰ªªÂãô IDÔºàÊåáÂêë `tasks` Ë≥áÊñôË°®Ôºâ |\n    | date | DATE | Âü∑Ë°åÁöÑÊó•Êúü |\n    | time_slot | VARCHAR | ‰ªªÂãôÂü∑Ë°åÊôÇÈñìÊÆµÔºàÂ¶ÇÔºöÊó©‰∏ä„ÄÅ‰∏≠Âçà„ÄÅÊôö‰∏äÔºâ |\n    \n    ---\n    \n    ### **4. Âú∞ÂúñË≥áÊñôË°® (`map`)**\n    \n    ÈÄôÂÄãË≥áÊñôË°®Ë®òÈåÑÈÅäÊà≤‰∏≠ÁöÑ 2D Âú∞ÂúñË≥áË®äÔºåÊØèÂÄã‰ΩçÁΩÆÂ∞çÊáâ‰∏çÂêåÁöÑÁâ©‰ª∂„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | position_id | INT | ‰ΩçÁΩÆÂîØ‰∏ÄË≠òÂà• ID |\n    | x_coordinate | INT | X Â∫ßÊ®ô |\n    | y_coordinate | INT | Y Â∫ßÊ®ô |\n    | object_type | VARCHAR | Áâ©‰ª∂È°ûÂûãÔºàÁâÜÂ£Å„ÄÅÂïÜÂ∫ó„ÄÅÈ£≤ÊñôÂ∫óÁ≠âÔºâ |\n    | object_name | VARCHAR | Áâ©‰ª∂ÂêçÁ®±ÔºàÂ¶ÇÁâÜ„ÄÅË∂ÖÂ∏Ç„ÄÅÈ£≤ÊñôÂ∫óÁ≠âÔºâ |\n    \n    ---\n    \n    ### **5. NPC Ë∑ØÂæëË≥áÊñôË°® (`npc_path`)**\n    \n    ÈÄôÂÄãË≥áÊñôË°®Ë®òÈåÑ NPC ÁßªÂãïÁöÑË∑ØÂæëÔºåËÆì NPC ËÉΩÂ§†Ê†πÊìöË∑ØÂæëË¶èÂäÉËá™ÂãïÁßªÂãï„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | path_id | INT | Ë∑ØÂæëÂîØ‰∏ÄË≠òÂà• ID |\n    | npc_id | INT | NPC IDÔºàÊåáÂêë `npc` Ë≥áÊñôË°®Ôºâ |\n    | start_position | INT | Ëµ∑Âßã‰ΩçÁΩÆÔºàÂ∞çÊáâ `map` Ë≥áÊñôË°®‰∏≠ÁöÑ‰ΩçÁΩÆ IDÔºâ |\n    | end_position | INT | ÁµÇÈªû‰ΩçÁΩÆÔºàÂ∞çÊáâ `map` Ë≥áÊñôË°®‰∏≠ÁöÑ‰ΩçÁΩÆ IDÔºâ |\n    | status | VARCHAR | Ë∑ØÂæëÁãÄÊÖãÔºàÂ¶ÇÔºöÊú™ÂÆåÊàê„ÄÅÂÆåÊàêÔºâ |\n    \n    ---\n    \n    ### **6. NPC ËàáÁâ©‰ª∂‰∫íÂãïË®òÈåÑË≥áÊñôË°® (`npc_interaction`)**\n    \n    ÈÄôÂÄãË≥áÊñôË°®Ë®òÈåÑ NPC ËàáÁâ©È´îÁöÑ‰∫íÂãïÔºå‰æãÂ¶ÇËàáÂïÜÂ∫ó‰∫íÂãï„ÄÅËàáÈ£≤ÊñôÊ©ü‰∫íÂãïÁ≠â„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | interaction_id | INT | ‰∫íÂãïË®òÈåÑÂîØ‰∏ÄË≠òÂà• ID |\n    | npc_id | INT | NPC IDÔºàÊåáÂêë `npc` Ë≥áÊñôË°®Ôºâ |\n    | object_id | INT | Áâ©‰ª∂ IDÔºàÊåáÂêë `map` Ë≥áÊñôË°®Ôºâ |\n    | action | VARCHAR | ‰∫íÂãïË°åÁÇ∫ÔºàÂ¶ÇÔºöË≥ºÁâ©„ÄÅÂêÉÊù±Ë•øÁ≠âÔºâ |\n    | timestamp | DATETIME | ‰∫íÂãïÊôÇÈñì |\n    \n    ---\n    \n    ### **7. Áé©ÂÆ∂Êåá‰ª§Ë≥áÊñôË°® (`player_commands`)**\n    \n    Â¶ÇÊûú‰Ω†Êúâ‰∫∫Â∑•ËÅäÂ§©Á≥ªÁµ±ÔºåÈÄôÂÄãË≥áÊñôË°®ÂèØ‰ª•Ë®òÈåÑÁé©ÂÆ∂ÁöÑÊåá‰ª§‰∏¶Â∞çÊáâÂà∞ NPC Ë°åÁÇ∫„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | command_id | INT | Êåá‰ª§ÂîØ‰∏ÄË≠òÂà• ID |\n    | player_id | INT | Áé©ÂÆ∂ IDÔºàÂ¶ÇÊûúÊúâÁé©ÂÆ∂Ë≥áÊñôË°®Ôºâ |\n    | command_text | TEXT | Áé©ÂÆ∂Ëº∏ÂÖ•ÁöÑÊåá‰ª§ |\n    | npc_id | INT | Ë¢´ÊåáÂÆöÁöÑ NPC IDÔºàÂèØÈÅ∏Ôºâ |\n    | command_time | DATETIME | Êåá‰ª§Âü∑Ë°åÊôÇÈñì |\n    | status | VARCHAR | Êåá‰ª§ÁãÄÊÖãÔºàÂ¶ÇÔºöÂæÖÂü∑Ë°å„ÄÅÂ∑≤Âü∑Ë°åÔºâ |\n    \n    ---\n    \n    ### **8. ‰ªªÂãôÂÆåÊàêË®òÈåÑË≥áÊñôË°® (`task_completion`)**\n    \n    ÈÄôÂÄãË≥áÊñôË°®Ë®òÈåÑ NPC ÂÆåÊàêÁöÑ‰ªªÂãôÂíåÁãÄÊÖã„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | completion_id | INT | ‰ªªÂãôÂÆåÊàêÂîØ‰∏ÄË≠òÂà• ID |\n    | npc_id | INT | NPC IDÔºàÊåáÂêë `npc` Ë≥áÊñôË°®Ôºâ |\n    | task_id | INT | ‰ªªÂãô IDÔºàÊåáÂêë `tasks` Ë≥áÊñôË°®Ôºâ |\n    | completion_time | DATETIME | ‰ªªÂãôÂÆåÊàêÊôÇÈñì |\n    | status | VARCHAR | ‰ªªÂãôÁãÄÊÖãÔºàÂ¶ÇÔºöÂÆåÊàê„ÄÅÊú™ÂÆåÊàêÔºâ |\n    \n    ---\n    \n    ### **9. NPC Á≠âÁ¥öËàáÁ∂ìÈ©óË≥áÊñôË°® (`npc_experience`)**\n    \n    ÈÄôÂÄãË≥áÊñôË°®Ë®òÈåÑ NPC ÁöÑÁ∂ìÈ©óÂÄºÂíåÁ≠âÁ¥öÔºåÁî®‰æÜÊéßÂà∂ NPC ÊàêÈï∑„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | npc_id | INT | NPC IDÔºàÊåáÂêë `npc` Ë≥áÊñôË°®Ôºâ |\n    | experience | INT | NPC Á∂ìÈ©óÂÄº |\n    | level | INT | NPC Á≠âÁ¥ö |\n    | last_level_up | DATETIME | ‰∏äÊ¨°ÂçáÁ¥öÊôÇÈñì |\n    \n    ---\n    \n    ### **10. Êó•Ë™åË≥áÊñôË°® (`logs`)**\n    \n    Ë®òÈåÑÈÅäÊà≤‰∏≠ÁôºÁîüÁöÑÈáçË¶Å‰∫ã‰ª∂ÊàñÈåØË™§Êó•Ë™å„ÄÇ\n    \n    | Ê¨Ñ‰ΩçÂêçÁ®± | Ë≥áÊñôÂûãÊÖã | Ë™™Êòé |\n    | --- | --- | --- |\n    | log_id | INT | Êó•Ë™åÂîØ‰∏ÄË≠òÂà• ID |\n    | log_type | VARCHAR | Êó•Ë™åÈ°ûÂûãÔºàÂ¶ÇÔºöÈåØË™§„ÄÅË≠¶Âëä„ÄÅË®äÊÅØÔºâ |\n    | log_message | TEXT | Êó•Ë™åË®äÊÅØ |\n    | timestamp | DATETIME | Êó•Ë™åÊôÇÈñì |\n\n```bash\npython manage.py runserver                     # ÂïüÂãïserver\npython manage.py runserver --noreload\npipreqs --force --encoding=utf-8               # Ë§áÂØ´Â•ó‰ª∂Ë≥áÊ∫êÁâàÊú¨\npip install -r requirements.txt                # ÂÆâË£ùÂ∞çÊáâÁâàÊú¨Â•ó‰ª∂\ndaphne AI_NPC_Backend.asgi:application -p 8080 # daphne server 8080\npython manage.py test api                      # Âü∑Ë°åÊ∏¨Ë©¶ËÖ≥Êú¨\npython manage.py migrate   \n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "npcs",
        "npc",
        "ai villgers",
        "npc behaviors",
        "engage npcs"
      ],
      "category": "gaming-and-game-development"
    },
    "stjepko-xyz--mcp-server-runescape": {
      "owner": "stjepko-xyz",
      "name": "mcp-server-runescape",
      "url": "https://github.com/stjepko-xyz/mcp-server-runescape",
      "imageUrl": "/freedevtools/mcp/pfp/stjepko-xyz.webp",
      "description": "Provides real-time and historical data for RuneScape and Old School RuneScape, including item prices, player hiscores, and top rankings. Enables access to comprehensive details about items and player statistics from official sources.",
      "stars": 5,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-08-17T23:30:11Z",
      "readme_content": "# mcp-server-runescape\n[![npm version](https://badge.fury.io/js/mcp-server-runescape.svg)](https://badge.fury.io/js/mcp-server-runescape)\n[![smithery badge](https://smithery.ai/badge/@stefan-xyz/mcp-server-runescape)](https://smithery.ai/server/@stefan-xyz/mcp-server-runescape)\n\nThis is an MCP server with tools for interacting with RuneScape (RS) and Old School RuneScape (OSRS) data, including item prices, player hiscores, and more.\n\nhttps://github.com/user-attachments/assets/7c141575-443b-4b76-8b33-6d48ec82fbe7\n\n## Features\n\nThe MCP server provides several tools which are used to answer your questions during gaming with data from accurate sources.\n\n### 1. Item Details (`get_item_details`)\n\nRetrieve comprehensive information about tradeable items, including:\n\n- Current price in the Grand Exchange\n- Price trends (24h, 30, 90, and 180 days)\n- Name\n- Category\n- Description (examine text)\n- Image\n- Members\n- ID\n\nhttps://runescape.wiki/w/Application_programming_interface#detail\n\n### 2. Item Price History (`get_item_price_history`)\n\nAccess the price history of an item over the last 180 days, including:\n\n- Price on a given day (timestamp)\n- Average price on a given day (timestamp)\n\nhttps://runescape.wiki/w/Application_programming_interface#Graph\n\n### 3. Player Hiscore (`get_player_hiscore`)\n\nFetch rankings and experience for skills and activities of any player, including:\n\n- Player rank\n- Skill level\n- Experience points\n- Activity scores\n\nhttps://runescape.wiki/w/Application_programming_interface#Hiscores_Lite_2\n\n### 4. Top Rankings (`get_top_rankings`)\n\nView the top (max 50) players for a specific skill or activity, including:\n\n- Name\n- Score (used for both skill and activity)\n- Rank\n\nhttps://runescape.wiki/w/Application_programming_interface#ranking\n\n### 5. Player Count (`get_player_count`)\n\nGets the number of players currently online in RuneScape and Old School RuneScape, including:\n\n- Real-time player counts\n\nhttps://runescape.wiki/w/Application_programming_interface#player_count\n\n### 6. Account Totals (`get_rsuser_total`)\n\nGets the current amount of accounts created that can access any form of RuneScape. This includes accounts made on FunOrb or a particular version of RuneScape, including:\n\n- Historical accounts creation data\n\nhttps://runescape.wiki/w/Application_programming_interface#rsusertotal\n\n#### Note\n\nFor consistency I tried to only use API endpoints which support both RS and OSRS data.\n\n## Example Use Cases\n\nThe goal is for you to have an easy way to fetch more accurate data right from the source while scaping.\n\nHere are some example queries you can ask the AI when using this MCP server:\n\n### Item Details\n\n```\n\"What is the price of a dragon scimitar in the Grand Exchange?\"\n\"Torva full helm price\"\n\"Current price of a dragon pickaxe\"\n\"How much percentage has the price of a dragon pickaxe changed in the past 30 days?\"\n\"How much percentage has the price of a dragon pickaxe changed in the past 90 days?\"\n\"How much percentage has the price of a dragon pickaxe changed in the past 180 days?\"\n\"Give me the description of an armadyl godsword\"\n\"Give me the icon of a dragon scimitar\"\n\"What is the id of an abbyssal whip?\"\n```\n\n### Item Price History\n\n```\n\"Give me the price history of a dragon scimitar\"\n\"Rune scimitar price on 1 april 2025?\"\n```\n\n### Player Hiscore\n\n```\n\"What rank is Zezima?\"\n\"What rank is Zezima on runescape?\"\n\"How much experience does Lynx Titan have overall?\"\n\"Iron Hyger ironman rank?\"\n```\n\n### Top Rankings\n\n```\n\"Top 10 players overall?\"\n\"Give me the top 50 attack rankings\"\n\"Number one agility on runescape?\"\n\"Most zulrah kills?\"\n\"Give me the top 5 jad rankings\"\n```\n\n## Getting Started\n\n[Introduction to MCP servers](https://modelcontextprotocol.io/introduction)\n\nYou can use the MCP server in many clients, for example:\n\n- Claude desktop\n- Cursor\n\n### 1. Add the MCP server in your config (NPM Package)\n\nPaste this snippet in your mcp config that your client is using\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-runescape\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-runescape\"]\n    }\n  }\n}\n```\n\nYou can find the config file in (mac):\n\n- Claude desktop:\n\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\n- Cursor:\n\n`/Users/name/.cursor/mcp.json`\n\n### 2. From Source\n\n**Required** [Node.js](https://nodejs.org/en) installed on your system\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash   \n   yarn\n   ```\n   or\n   ```bash   \n   npm install\n   ```\n3. Then update your Claude desktop or Cursor with:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-server-runescape\": {\n         \"command\": \"node\",\n         \"args\": [\"/Users/path/to/mcp-server-runescape/src/server.js\"]\n       }\n     }\n   }\n   ```\n4. **Optional**: Run the debugger/inspector\n   ```bash\n   yarn dev\n   ```\n   or\n   ```bash   \n   npm run build\n   ```\n\nMake sure to:\n\n- Replace `/path/to/mcp-server-runescape` with the actual path to your installation.\n\nAfter updating the configuration, restart Claude desktop or Cursor for the changes to take effect.\n\n#### Personal preference\n\nYou can use any client you want, my personal preference goes to Cursor at the moment in combination with deepseek-v3.1 which is performing really well.\n\n[List of clients](https://modelcontextprotocol.io/clients)\n\n## API Documentation\n\nFor detailed information about the Runescape API endpoints used by this MCP server, visit:\n[RS/Wiki API](https://runescape.wiki/w/Application_programming_interface)\n\n## Thank you\n\nI built this over the weekend, to learn a bit more about MCP servers. Runescape was the perfect subject to try it out on.\n\n- Shout out to the rs/wiki team for the docs and API.\n\nIf this helps you out in anyway when scaping and you would like to support me, feel free to\n\n[![\"Buy Me A Coffee\"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://buymeacoffee.com/stefanxyz)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "runescape",
        "stjepko",
        "mcp",
        "server runescape",
        "data runescape",
        "runescape including"
      ],
      "category": "gaming-and-game-development"
    },
    "suxiongye--random-web3-mcp": {
      "owner": "suxiongye",
      "name": "random-web3-mcp",
      "url": "https://github.com/suxiongye/random-web3-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/suxiongye.webp",
      "description": "Generates verifiable and reliable random elements using blockchain entropy, suitable for applications in gaming, finance, and scientific computing. Offers diverse random number generation methods including weighted selection and complex distributions through API access.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "Shell",
      "updated_at": "2025-04-24T02:45:33Z",
      "readme_content": "# RandomWeb3MCP - Web3 Random Element Generation Service\n\nRandomWeb3MCP is a random element generation service based on EVM block hash. The service provides various random element generation tools that can be used in games, finance, testing, and other fields.\n\n## Features\n\n- **Verifiability**: All random numbers are generated based on blockchain hash, ensuring fairness and verifiability\n- **Diversity**: Supports various random number generation scenarios, from basic random numbers to complex probability distributions\n- **Reliability**: Uses blockchain as entropy source to ensure randomness quality\n- **Usability**: Provides simple and intuitive API interfaces for easy integration\n\n## Installation\n\n```bash\ngit clone git@github.com:suxiongye/random-web3-mcp.git\npip install -e .\n```\n\n## Quick Start\n\n### Configuration in tico or Cursor\n\nAdd random-web3-mcp service configuration in Cursor settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"random-web3-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\"--directory\", \"local_repo_directory/zxl-mcp-server\", \"run\", \"main.py\"]\n    }\n  }\n}\n```\n\n## Tool List\n\n### generate_basic_random\n#### Name\nBasic Random Number Generator\n#### Function\nGenerate a random integer within the specified range\n#### Parameters\n- min_value (int, optional): Minimum value (inclusive). Defaults to 0.\n- max_value (int, optional): Maximum value (inclusive). Defaults to 1000000.\n- salt (str, optional): Random number salt value for increased randomness. Defaults to ''\n#### Returns\nJSON string containing the random number result\n\n#### Application Scenarios\n1. Lottery systems\n2. Game random numbers\n3. Random ID generation\n4. Test data generation\n\n### generate_random_array\n#### Name\nRandom Array Generator\n#### Function\nGenerate a random array of specified length\n#### Parameters\n- array_length (int, optional): Array length. Defaults to 1.\n- min_value (int, optional): Minimum value. Defaults to 0.\n- max_value (int, optional): Maximum value. Defaults to 1000000.\n- salt (str, optional): Random number salt value. Defaults to ''\n#### Returns\nJSON string containing the random array\n\n#### Application Scenarios\n1. Batch random number generation\n2. Random sampling\n3. Test dataset generation\n4. Random task assignment\n\n### generate_random_weighted\n#### Name\nWeighted Random Selector\n#### Function\nRandomly select an option based on weights\n#### Parameters\n- options (List[str]): List of options\n- weights (List[int]): Corresponding weight list (0-1000)\n- salt (str, optional): Random number salt value. Defaults to ''\n#### Returns\nJSON string containing the selection result\n\n#### Application Scenarios\n1. Lottery systems (prizes with different probabilities)\n2. Random drops (weighted item drops)\n3. Task assignment (based on priority)\n4. A/B testing (experiment groups with different ratios)\n\n### generate_random_feature\n#### Name\nRandom Feature Allocator\n#### Function\nGenerate a set of random feature values for objects, each feature value within its specified range. Feature values are encoded into a bitmap, with each feature occupying 8 bits\n#### Parameters\n- feature_count (int): Number of features to generate\n- feature_max_values (List[int]): List of maximum values for each feature, length must equal feature_count\n- salt (str, optional): Random number salt value for increased randomness. Defaults to ''\n\n#### Returns\nJSON string containing feature values and bitmap, formatted as:\n```json\n{\n    \"requestId\": \"Generated request ID\",\n    \"features\": [List of feature values],\n    \"featureBitmap\": Feature bitmap value\n}\n```\n\n#### Application Scenarios\n1. Game character attribute generation (strength, agility, intelligence, etc.)\n2. Equipment attribute randomization (attack, defense, speed, etc.)\n3. Biological trait simulation (genes, traits, etc.)\n4. Random scene generation (terrain, weather, environment, etc.)\n\n### generate_distribution\n#### Name\nProbability Distribution Random Generator\n#### Function\nGenerate random numbers according to specified probability distribution type and parameters. Supports various common probability distributions.\n#### Parameters\n- distribution_type (int): Distribution type:\n  - 1 = Uniform distribution (parameters: [min_value, max_value])\n  - 2 = Normal distribution (parameters: [mean, standard_deviation])\n  - 3 = Exponential distribution (parameters: [scale_parameter])\n  - 4 = Binomial distribution (parameters: [trials, success_probability])\n- distribution_parameters (List[float]): Distribution parameter list\n- salt (str, optional): Random number salt value for increased randomness. Defaults to ''\n\n#### Returns\nJSON string containing random value and distribution information, formatted as:\n```json\n{\n    \"requestId\": \"Generated request ID\",\n    \"randomValue\": Generated random value,\n    \"distributionMetadata\": {\n        \"distributionType\": Distribution type,\n        ...Distribution parameters\n    }\n}\n```\n#### Application Scenarios\n1. Financial market simulation (return distribution, risk analysis)\n2. Natural phenomena simulation (particle distribution, noise generation)\n3. Load testing (user behavior distribution)\n4. Statistical sampling (experimental data generation)\n\n### generate_random_event\n#### Name\nRandom Event Trigger\n#### Function\nTrigger a series of events based on given probabilities, each event has an independent trigger probability. Uses bitmap to record trigger status for easy processing.\n#### Parameters\n- event_count (int): Total number of events\n- event_probabilities (List[int]): Trigger probability for each event (0-1000, representing 0-100%)\n- salt (str, optional): Random number salt value for increased randomness. Defaults to ''\n\n#### Returns\nJSON string containing event trigger results, formatted as:\n```json\n{\n    \"requestId\": \"Generated request ID\",\n    \"triggeredEvents\": Event trigger bitmap,\n    \"eventResults\": [\n        {\n            \"eventId\": Event ID,\n            \"probability\": Trigger probability,\n            \"triggered\": Whether triggered,\n            \"randomValue\": Random value\n        },\n        ...\n    ]\n}\n```\n\n#### Application Scenarios\n1. Game random events (trigger plot, drop items)\n2. Probability effect determination (skill trigger, combo determination)\n3. Risk event simulation (fault prediction, accident events)\n4. Multiple condition determination (combined probability events)\n\n### generate_random_seed\n#### Name\nRandom Seed Generator\n#### Function\nGenerate high-entropy random seed for encryption or other scenarios requiring high-quality random numbers. Uses blockchain hash as entropy source to ensure randomness.\n#### Parameters\n- seed_length (int): Length of seed to generate (in bytes)\n- salt (str, optional): Random number salt value for increased randomness. Defaults to ''\n\n#### Returns\nJSON string containing random seed, formatted as:\n```json\n{\n    \"requestId\": \"Generated request ID\",\n    \"randomSeed\": \"Random seed in hexadecimal format\",\n    \"entropy\": Estimated entropy value\n}\n```\n\n#### Application Scenarios\n1. Key generation (encryption keys, signature seeds)\n2. Security tokens (session identifiers, authentication tokens)\n3. Random number initialization (PRNG seeds, simulation initial states)\n4. Unique identifier generation (UUID seeds, random identifiers)\n\n### shuffle_array\n#### Name\nRandom Array Shuffler\n#### Function\nRandomly shuffle the input array, ensuring each element has an equal probability of appearing in any position. Uses Fisher-Yates shuffle algorithm to ensure fairness.\n#### Parameters\n- input_array (List): Array to be shuffled, elements can be of any type\n- salt (str, optional): Random number salt value for increased randomness. Defaults to ''\n\n#### Returns\nJSON string containing the shuffled array, formatted as:\n```json\n{\n    \"requestId\": \"Generated request ID\",\n    \"shuffledArray\": [Shuffled array]\n}\n```\n\n#### Application Scenarios\n1. Game shuffling (playing cards, mahjong tiles)\n2. Random ordering (question order, playlist)\n3. Random grouping (team assignment, experiment grouping)\n4. Data shuffling (training dataset, test cases)\n\n### generate_coordinate\n#### Name\nRandom Coordinate Generator\n#### Function\nGenerate random coordinate points in a specified dimensional space, each dimension has its own value range. Supports coordinate generation in any number of dimensions.\n#### Parameters\n- dimensions (int): Number of coordinate dimensions (1D, 2D, 3D, etc.)\n- min_values (List[float]): List of minimum values for each dimension\n- max_values (List[float]): List of maximum values for each dimension\n- coordinate_count (int): Number of coordinate points to generate\n- salt (str, optional): Random number salt value for increased randomness. Defaults to ''\n\n#### Returns\nJSON string containing random coordinates, formatted as:\n```json\n{\n    \"requestId\": \"Generated request ID\",\n    \"coordinates\": [\n        [x1, y1, z1, ...],  # First point coordinates\n        [x2, y2, z2, ...],  # Second point coordinates\n        ...\n    ]\n}\n```\n\n#### Application Scenarios\n1. Game object positioning (NPC locations, item distribution)\n2. Particle systems (effect generation, particle distribution)\n3. Map generation (terrain height, resource distribution)\n4. Spatial sampling (3D modeling, spatial analysis)\n\n### generate_rarity\n#### Name\nRarity Random Allocator\n#### Function\nGenerate random coordinate points in a specified dimensional space, each dimension has its own value range. Supports coordinate generation in any number of dimensions.\n#### Parameters\n- item_count: Project quantity\n- rarity_tiers: Rarity level array\n- rarity_percentages: Probability percentage for each rarity level\n- guaranteed_minimums: Guaranteed quantity for each rarity level (optional)\n- salt (str, optional): Random number salt value for increased randomness. Defaults to ''\n\n#### Returns\nJSON string containing random rarity array, formatted as:\n```json\n{\n    \"requestId\": \"Generated request ID\",\n    \"rarityDistribution\": [Rarity allocation result]\n}\n```\n\n#### Application Scenarios\n1. Game item drops (different rarity equipment, items)\n2. Lottery systems (prizes with different probabilities)\n3. Resource allocation (different rarity resources, materials)\n4. Random event trigger (different probability events)\n\n## Application Scenarios\n\n### Game Development\n- Random item drops\n- Character attribute generation\n- Map random generation\n- Probability event trigger\n\n### Financial Application\n- Risk simulation\n- Investment portfolio analysis\n- Market behavior simulation\n\n### Test Data\n- Random test case generation\n- Load test data\n- Performance test sample\n\n### Scientific Calculation\n- Monte Carlo simulation\n- Particle system simulation\n- Random sampling\n\n## Notes\n\n1. All random number generation depends on the blockchain hash of the Trust Chain, please ensure normal network connection\n2. Weighted random selector weight value range is 0-1000, representing 0-100% probability\n3. Probability distribution parameters need to provide correct parameter list according to specific distribution type\n4. It is recommended to use salt parameter in production environment to increase randomness\n\n\n## Error Handling\n\nService may return error types:\n\n```python\n{\n    \"error\": \"Error message\",\n    \"code\": \"Error code\",\n    \"requestId\": \"Request ID\"\n}\n```\n\nCommon error codes:\n- `INVALID_PARAMS`: Parameter error\n- `NETWORK_ERROR`: Network connection error\n- `CHAIN_ERROR`: Blockchain access error\n- `INTERNAL_ERROR`: Internal service error\n\n## Performance Consideration\n\n- Each random number generation request needs to access the blockchain, which may have a certain delay\n- It is recommended to cache frequently used random numbers\n- Pay attention to request frequency when handling a large number of concurrent requests\n\n## Contribution Guide\n\nWelcome to submit Issue and Pull Request to help improve this project. Before submitting, please ensure:\n\n1. Code conforms to PEP 8 specification\n2. Appropriate test cases are added\n3. Related documents are updated\n\n## License\n\nThis project uses MIT License. See [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "entropy",
        "random",
        "blockchain",
        "blockchain entropy",
        "random web3",
        "reliable random"
      ],
      "category": "gaming-and-game-development"
    },
    "tahooki--unreal-blender-mcp": {
      "owner": "tahooki",
      "name": "unreal-blender-mcp",
      "url": "https://github.com/tahooki/unreal-blender-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/tahooki.webp",
      "description": "Control and manipulate scenes, manage assets, and interface between Blender and Unreal Engine using AI agents. Integrate AI capabilities into creative workflows through a unified server architecture.",
      "stars": 7,
      "forks": 6,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-29T21:09:17Z",
      "readme_content": "# Unreal-Blender MCP\n\nUnreal-Blender MCP is a unified server for controlling both Blender and Unreal Engine via AI agents using the MCP (Machine Control Protocol) approach.\n\n## Overview\n\nThis project extends the [blender-mcp](https://github.com/ahujasid/blender-mcp.git) framework to include support for Unreal Engine, allowing AI agents like Claude and ChatGPT to simultaneously control both platforms through a single interface.\n\n## Submodule Information\n\nThis project includes `blender-mcp` as a Git submodule. When cloning the repository, use the following commands:\n\n```bash\n# Clone with submodules\ngit clone --recursive https://github.com/tahooki/unreal-blender-mcp.git\n\n# Or clone normally and then initialize submodules\ngit clone https://github.com/tahooki/unreal-blender-mcp.git\ncd unreal-blender-mcp\ngit submodule update --init --recursive\n```\n\n## Features\n\n- **Unified Control**: Single MCP server to control both Blender and Unreal Engine\n- **AI Agent Integration**: Designed to work with Claude, ChatGPT, and other AI assistants\n- **Blender Features**: Retains all blender-mcp functionality including:\n  - Scene manipulation\n  - Object creation and editing\n  - Material management\n  - PolyHaven asset integration\n  - Hyper3D Rodin model generation\n- **Unreal Engine Features**:\n  - Level creation and management\n  - Asset importing\n  - Python code execution\n  - Scene manipulation\n- **Extension Structure**: Easily extend both Blender addon and server while maintaining compatibility with upstream updates\n\n## Architecture\n\nThe system consists of three main components:\n\n1. **MCP Server**: Central hub communicating with AI agents via SSE (Server-Sent Events) on port 8000\n2. **Blender Addon**: Socket server within Blender on port 8400 (standard) or 8401 (extended)\n3. **Unreal Plugin**: HTTP server within Unreal Engine on port 8500\n\n```\n[AI Agent] <--SSE--> [MCP Server (8300)] \n                        |\n                        |--HTTP--> [Blender Addon (8400)]\n                        |\n                        |--HTTP--> [Unreal Plugin (8500)]\n```\n\n## Extension Structure\n\nThis project uses an extension approach to maintain compatibility with upstream changes:\n\n- **Blender Addon Extension**: Extends the original `BlenderMCPServer` while keeping the original code intact\n- **Server Extension**: Enhances the original server with additional tools and Unreal Engine integration\n- **Interface Tools**: Provides utilities for installing, configuring, and running extensions\n\nThis approach allows easy updates from the original projects without code conflicts.\n\n## Step-by-Step Installation and Setup Guide\n\n### Prerequisites\n\n- Python 3.10 or later\n- Blender 3.0 or later\n- Unreal Engine 5.0 or later\n- uv package manager (install with `pip install uv` if you don't have it)\n\n### 1. Clone the Repository\n\n```bash\n# Clone with submodules (recommended)\ngit clone --recursive https://github.com/tahooki/unreal-blender-mcp.git\ncd unreal-blender-mcp\n\n# Or if you already cloned without --recursive:\ngit clone https://github.com/tahooki/unreal-blender-mcp.git\ncd unreal-blender-mcp\ngit submodule update --init --recursive\n```\n\n### 2. Set Up Python Environment\n\n```bash\n# Create a virtual environment and activate it\nuv venv\n# On Windows:\n.\\venv\\Scripts\\activate\n# On macOS/Linux:\nsource venv/bin/activate\n\n# Install project dependencies\nuv pip install -e .\n```\n\n### 3. Install Blender Addon\n\nChoose ONE of the following options:\n\n#### Option A: Standard Addon (Original blender-mcp)\n1. Open Blender\n2. Navigate to Edit > Preferences > Add-ons\n3. Click \"Install...\" button\n4. Browse and select `blender-mcp/addon.py` file\n5. Enable the \"Interface: Blender MCP\" addon (check the box)\n\n#### Option B: Extended Addon (With additional features)\n1. Run the extension installer script:\n   ```bash\n   python -c \"from src.unreal_blender_mcp.blender_addon import BlenderAddonManager; BlenderAddonManager().install_to_blender(force=True)\"\n   ```\n2. Open Blender\n3. Navigate to Edit > Preferences > Add-ons\n4. Find and enable the \"Interface: Extended Blender MCP\" addon (check the box)\n\n### 4. Install Unreal Engine Plugin\n\n1. Locate the `UEPythonServer` folder in this project\n2. Copy the entire folder to your Unreal project's `Plugins` directory\n   - If your project doesn't have a `Plugins` directory, create one\n3. Start Unreal Engine with your project\n4. Navigate to Edit > Plugins in the menu\n5. Find and enable the Python Server plugin\n6. Restart Unreal Engine when prompted\n\n### 5. Start the MCP Server\n\nChoose ONE of the following options:\n\n#### Option A: Standard Server\n```bash\n# Make sure your virtual environment is activated\npython main.py\n```\n\n#### Option B: Extended Server (More features)\n```bash\n# Make sure your virtual environment is activated\npython run_extended_server.py\n\n# Optional: Customize server options\npython run_extended_server.py --host 127.0.0.1 --port 8080 --log-level DEBUG\n```\n\n### 6. Enable the Blender Server Connection\n\n1. Start Blender (if not already running)\n2. In the 3D viewport, press `N` to open the sidebar panel\n3. Select the appropriate tab:\n   - \"BlenderMCP\" (if using standard addon)\n   - \"ExtBlenderMCP\" (if using extended addon)\n4. Click the \"Start Server\" button\n5. Verify the server starts successfully (check console output)\n\n### 7. Verify Unreal Engine Connection\n\n1. With Unreal Engine running and plugin enabled\n2. The Python server should automatically start\n3. Check the Output Log (Window > Developer Tools > Output Log) for any messages\n4. The Unreal plugin should now be ready to receive commands\n\n### 8. Connect an AI Agent\n\n#### Option A: Integrate with Claude for Desktop\n\nAdd the following to Claude for Desktop's configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"unreal-blender\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"unreal-blender-mcp\"\n            ]\n        },\n        \"unreal-blender-ext\": {\n            \"command\": \"python\",\n            \"args\": [\n                \"/path/to/unreal-blender-mcp/run_extended_server.py\"\n            ]\n        }\n    }\n}\n```\nReplace `/path/to/` with your actual project path.\n\n#### Option B: Integrate with Cursor\n\n1. Open Cursor Settings\n2. Navigate to MCP section\n3. Add the following commands:\n   - Standard Server: `uvx unreal-blender-mcp`\n   - Extended Server: `python /path/to/unreal-blender-mcp/run_extended_server.py`\n   \n   Replace `/path/to/` with your actual project path.\n\n#### Option C: Integrate with Other AI Tools\n\nRefer to your AI tool's documentation for integrating with MCP servers, and point it to:\n- MCP Server URL: `http://localhost:8000` (or custom port if specified)\n\n### 9. Testing the System\n\nOnce all components are running:\n\n1. Use your AI agent to interact with Blender by asking it to:\n   - Create a simple cube or sphere\n   - Modify object properties\n   - Create materials\n\n2. Use your AI agent to interact with Unreal Engine by asking it to:\n   - Create a new level\n   - Place assets\n   - Modify scene properties\n\n3. Try more complex operations that involve both platforms working together\n\n### Troubleshooting\n\nIf you encounter issues:\n\n1. Check that all servers are running (MCP, Blender, Unreal)\n2. Verify port configurations match (default: 8000 for MCP, 8400/8401 for Blender, 8500 for Unreal)\n3. Check console outputs for error messages\n4. Restart components in the correct order: MCP server first, then Blender, then Unreal Engine\n\nFor more detailed information on development and extending the system, see the [Project Document](Project-document.md) and [workflow](workflow/) directory.\n\n## Comparison: Standard vs Extended\n\n| Feature | Standard Server | Extended Server |\n|---------|----------------|----------------|\n| Blender Control | ‚úÖ | ‚úÖ |\n| Unreal Control | ‚úÖ | ‚úÖ |\n| Custom Blender Commands | ‚ùå | ‚úÖ |\n| Enhanced Scene Info | ‚ùå | ‚úÖ |\n| Auto Feature Detection | ‚ùå | ‚úÖ |\n| Upstream Compatibility | ‚úÖ | ‚úÖ |\n\nChoose the standard server for basic functionality or the extended server for advanced features.\n\n## Development\n\nSee the [Project Document](Project-document.md) and [workflow](workflow/) directory for detailed development information.\n\nFor extending this project:\n- To add new Blender addon features: Modify `src/unreal_blender_mcp/blender_addon/extended_addon.py`\n- To add new server tools: Modify `src/unreal_blender_mcp/server_extension/extended_server.py`\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgements\n\n- This project builds upon [blender-mcp](https://github.com/ahujasid/blender-mcp.git) by Siddharth Ahuja.\n\n## Future Developments\n\nThe following improvements are planned for future releases:\n\n### Structured Unreal Engine API\n\nCurrently, the Unreal Engine communication relies primarily on direct Python code execution. A planned enhancement is to implement a structured API similar to the Blender integration:\n\n- Create predefined functions for common Unreal Engine operations\n- Implement proper error handling and validation\n- Improve security by limiting execution scope\n- Enhance stability and predictability of operations\n- Maintain backward compatibility while adding structure\n\nThis enhancement will create a more consistent experience across both engines and improve the overall reliability of the system. See the [workflow documentation](workflow/08-unreal-engine-refinement.md) for more details on this planned development.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "agents",
        "blender",
        "unreal engine",
        "ai agents",
        "blender unreal"
      ],
      "category": "gaming-and-game-development"
    },
    "tonypan2--minesweeper-mcp-server": {
      "owner": "tonypan2",
      "name": "minesweeper-mcp-server",
      "url": "https://github.com/tonypan2/minesweeper-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/tonypan2.webp",
      "description": "Engage in strategic gameplay of Minesweeper while the server manages game state and interactions. This server enables MCP client agents to play and challenge their problem-solving skills in an interactive environment.",
      "stars": 106,
      "forks": 6,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T18:37:20Z",
      "readme_content": "# Minesweeper MCP Server\n\nThis is an [Model Context Protocol server](https://github.com/modelcontextprotocol/servers) that allows an MCP client agents to play a game of [Minesweeper](<https://en.wikipedia.org/wiki/Minesweeper_(video_game)>). It is intended to be run alongside the [Minesweeper game server](https://github.com/tonypan2/minesweeper-server).\n\n\nView the entire video demo at https://youtu.be/CXXMafVtlEQ (16x speedup).\n\n## Getting started\n\n- Follow the [instructions](https://github.com/tonypan2/minesweeper-server) of the game server to start it locally.\n\n* Build the MCP server:\n\n```bash\nnpm install\nnpm run build\n```\n\n- Configure your MCP client to add the tool. For example, here is how to add the tool to Claude Desktop on Windows's `claude_desktop_config.json` ([locating the file](https://gist.github.com/feveromo/7a340d7795fca1ccd535a5802b976e1f#3-configure-claude-desktop)), assuming you cloned the repo at `C:\\path\\to\\repo\\minesweeper-mcp-server`:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"C:\\\\path\\\\to\\\\repo\\\\minesweeper-mcp-server\\\\build\\\\index.js\"],\n      \"env\": {\n        \"DEBUG\": \"*\"\n      }\n    }\n  }\n}\n\n```\n\n- Claude Desktop : Restart Claude Desktop to let it pick up the tools. Be sure to quit from the tray menu icon, not from the app (which simply hides the window). If you click the Tools icon, it should show the new tools:\n\n  \n\n  \n\n## Example prompt\n\n```\nStart a new game of Minesweeper. Try your best to keep playing until you have flagged all mines. Remember that the coordinates are 0-indexed.\n```\n\n## Example interaction\n\nThe actual conversation is very long. Here are some snippets:\n\n## Game start\n\n\n\n## Placing flag at the wrong place\n\n\n\n## Giving up after several attempts",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "minesweeper",
        "mcp",
        "tonypan2",
        "minesweeper mcp",
        "gameplay minesweeper",
        "minesweeper server"
      ],
      "category": "gaming-and-game-development"
    },
    "triptych--opera-omnia-mcp": {
      "owner": "triptych",
      "name": "opera-omnia-mcp",
      "url": "https://github.com/triptych/opera-omnia-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/triptych.webp",
      "description": "Access a collection of JSON datasets for games, storytelling, and bot development. Retrieve and filter data, generate creative content using customizable templates, and combine multiple datasets seamlessly.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-21T22:11:11Z",
      "readme_content": "# Opera Omnia MCP Server\n\nAn MCP server that provides access to the rich collection of JSON datasets from the [Opera Omnia](https://github.com/triptych/opera-omnia) project, a comprehensive library of creative content for games, storytelling, and bot development.\n\n## Features\n\n- Access to all Opera Omnia datasets\n- Random selection from datasets\n- Filtering datasets by criteria\n- Combining multiple datasets\n- Generating creative content using templates\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n## Usage\n\n### Running the Server\n\n```bash\nnpm start\n```\n\n### MCP Configuration\n\nAdd the following to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"opera-omnia\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/opera-omnia-mcp/build/index.js\"],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nReplace `path/to/opera-omnia-mcp` with the actual path to this project.\n\n## Available Tools\n\n### list_categories\n\nList all available data categories.\n\n```javascript\nconst result = await use_mcp_tool({\n  server_name: \"opera-omnia\",\n  tool_name: \"list_categories\",\n  arguments: {}\n});\n```\n\n### list_datasets\n\nList all datasets within a category.\n\n```javascript\nconst result = await use_mcp_tool({\n  server_name: \"opera-omnia\",\n  tool_name: \"list_datasets\",\n  arguments: {\n    category: \"characters\"\n  }\n});\n```\n\n### get_dataset\n\nGet the complete contents of a specific dataset.\n\n```javascript\nconst result = await use_mcp_tool({\n  server_name: \"opera-omnia\",\n  tool_name: \"get_dataset\",\n  arguments: {\n    category: \"characters\",\n    dataset: \"personalities\"\n  }\n});\n```\n\n### get_random_item\n\nGet a random item from a specific dataset.\n\n```javascript\nconst result = await use_mcp_tool({\n  server_name: \"opera-omnia\",\n  tool_name: \"get_random_item\",\n  arguments: {\n    category: \"characters\",\n    dataset: \"personalities\"\n  }\n});\n```\n\n### get_filtered_items\n\nGet items from a dataset that match specific criteria.\n\n```javascript\nconst result = await use_mcp_tool({\n  server_name: \"opera-omnia\",\n  tool_name: \"get_filtered_items\",\n  arguments: {\n    category: \"characters\",\n    dataset: \"personalities\",\n    filter: \"brave\"\n  }\n});\n```\n\n### combine_datasets\n\nCombine multiple datasets and get random selections.\n\n```javascript\nconst result = await use_mcp_tool({\n  server_name: \"opera-omnia\",\n  tool_name: \"combine_datasets\",\n  arguments: {\n    datasets: [\n      { category: \"characters\", dataset: \"personalities\" },\n      { category: \"characters\", dataset: \"backstories\" }\n    ],\n    count: 3\n  }\n});\n```\n\n### generate_content\n\nGenerate creative content based on multiple datasets.\n\n```javascript\nconst result = await use_mcp_tool({\n  server_name: \"opera-omnia\",\n  tool_name: \"generate_content\",\n  arguments: {\n    template: \"A {adjective} {class} must {quest} to obtain {artifact}\",\n    datasets: {\n      adjective: { category: \"attributes\", dataset: \"adjectives\" },\n      class: { category: \"rpg\", dataset: \"classes\" },\n      quest: { category: \"situations\", dataset: \"quests\" },\n      artifact: { category: \"equipment\", dataset: \"artifacts\" }\n    }\n  }\n});\n```\n\n## Available Resources\n\n### opera-omnia://categories\n\nList of all available data categories.\n\n```javascript\nconst result = await access_mcp_resource({\n  server_name: \"opera-omnia\",\n  uri: \"opera-omnia://categories\"\n});\n```\n\n### opera-omnia://category/{category}\n\nList of datasets available in a specific category.\n\n```javascript\nconst result = await access_mcp_resource({\n  server_name: \"opera-omnia\",\n  uri: \"opera-omnia://category/characters\"\n});\n```\n\n### opera-omnia://dataset/{category}/{dataset}\n\nContents of a specific dataset.\n\n```javascript\nconst result = await access_mcp_resource({\n  server_name: \"opera-omnia\",\n  uri: \"opera-omnia://dataset/characters/personalities\"\n});\n```\n\n## Future Enhancements\n\nWe have several ideas for future enhancements to the Opera Omnia MCP server:\n\n1. **Advanced Content Generation**: Add more sophisticated content generation capabilities beyond simple template substitution.\n\n2. **Improved Caching**: Implement better caching mechanisms for improved performance, especially for frequently accessed datasets.\n\n3. **User-Contributed Datasets**: Add support for user-contributed datasets, allowing users to extend the available content.\n\n4. **Visualization Tools**: Create visualization tools for exploring the data and understanding relationships between different datasets.\n\n5. **Local Data Files**: Add support for local data files as an alternative to fetching from GitHub.\n\n6. **Integration Examples**: Provide more examples of integrating the MCP server with different applications and frameworks.\n\n## Release Notes\n\nFor detailed information about the current and past releases, see the [RELEASE_NOTES.md](RELEASE_NOTES.md) file.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "json",
        "opera",
        "gaming",
        "datasets games",
        "games storytelling",
        "triptych opera"
      ],
      "category": "gaming-and-game-development"
    },
    "turlockmike--chess-mcp": {
      "owner": "turlockmike",
      "name": "chess-mcp",
      "url": "https://github.com/turlockmike/chess-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/turlockmike.webp",
      "description": "Analyze chess positions using the Stockfish engine, providing professional evaluations and visual board representations. Users can also explore move variations and access a database of games played by high-rated players.",
      "stars": 15,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-13T04:51:54Z",
      "readme_content": "# Chess Analysis Assistant for Claude\n[![smithery badge](https://smithery.ai/badge/chess-mcp)](https://smithery.ai/server/chess-mcp)\nThis tool helps you analyze chess positions and get professional evaluations using Stockfish, right within Claude! You can:\n- Get position evaluations\n- See visual board representations\n- Analyze different moves and variations\n- Look up positions in the masters database (games played by 2200+ rated players)\n\n## Requirements\n\n- [Claude Desktop](https://claude.ai/desktop) installed on your computer\n- Git installed on your system\n\n## Quick Installation\n\n### Installing via Smithery\n\nTo install Chess Analysis Assistant for Claude Desktop automatically via [Smithery](https://smithery.ai/server/chess-mcp):\n\n```bash\nnpx -y @smithery/cli install chess-mcp --client claude\n```\n\n### Mac and Linux Users\n\nOpen Terminal and run this command:\n```bash\ncurl -fsSL https://raw.githubusercontent.com/turlockmike/chess-mcp/master/install.sh | bash\n```\n\nThat's it! The script will:\n1. Install required dependencies (Node.js 20+, Stockfish, Cairo)\n2. Configure Claude Desktop\n3. Set up the Chess Assistant\n\n## Manual Installation (Windows or Advanced Users)\n\nIf you prefer to install manually or are using Windows, follow these steps:\n\n### Requirements\n\n- [Claude Desktop](https://claude.ai/desktop)\n- [Node.js](https://nodejs.org/) version 20 or higher\n- [Stockfish](https://stockfishchess.org/) chess engine\n- [Cairo](https://github.com/Automattic/node-canvas/wiki/Installation:-Windows) graphics library (for board visualization)\n\n### Step-by-Step Installation\n\n#### Step 1: Install Dependencies\n\n**Mac Users:**\n```bash\n# Install Homebrew if you haven't already\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\n# Install required packages\nbrew install stockfish cairo pkg-config jq\n```\n\n**Windows Users:**\n1. Install [Node.js](https://nodejs.org/) (LTS version)\n2. Download [Stockfish](https://stockfishchess.org/download/) and add it to your PATH\n3. Install [Cairo](https://github.com/Automattic/node-canvas/wiki/Installation:-Windows)\n\n#### Step 2: Install Chess Assistant\n```bash\nnpm install -g chess-mcp\n```\n\n#### Step 3: Configure Claude Desktop\n1. Open Claude Desktop\n2. Navigate to the configuration file:\n   - Mac: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n3. Add this configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"chess\": {\n            \"command\": \"npx\",\n            \"args\": [\"chess-mcp\"]\n        }\n    }\n}\n```\n\n4. Save and restart Claude Desktop\n\n## Using the Chess Assistant\n\n1. Open Claude Desktop\n2. Look for the tools icon (üîß) - it should show chess analysis tools\n3. Try these example prompts:\n   - \"Analyze this position: rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\n   - \"Show me the current position\"\n   - \"What's the best move in this position?\"\n   - \"Look up this position in the masters database\"\n   - \"Show me master games from this position after 2000\"\n   - \"What are the most common moves played by masters in this position?\"\n\n## Features\n\n### Position Analysis\n- Engine evaluation using Stockfish\n- Visual board representation\n- Best move suggestions\n- Move validation\n\n### Masters Database\n- Search positions in games played by 2200+ rated players\n- Filter games by date range\n- See win/draw statistics\n- View most common moves with success rates\n- Browse recent master games with player ratings\n\n## Need Help?\n\nIf you run into any issues:\n1. Make sure all requirements are installed correctly\n2. Verify Stockfish is accessible from your command line\n3. Check that all paths in your Claude Desktop configuration are correct\n4. Restart Claude Desktop after making any changes\n\n## Common Issues\n\n- **\"Tools not showing up in Claude\"**: Make sure you've configured Claude Desktop correctly\n- **\"Stockfish not found\"**: Verify Stockfish is installed and accessible from the command line\n- **\"Node version error\"**: Make sure you have Node.js version 20 or higher installed\n- **\"Canvas installation failed\"**: Make sure Cairo is installed correctly for your operating system ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chess",
        "stockfish",
        "turlockmike",
        "turlockmike chess",
        "analyze chess",
        "chess mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "v9rt3x--cs2-rcon-mcp": {
      "owner": "v9rt3x",
      "name": "cs2-rcon-mcp",
      "url": "https://github.com/v9rt3x/cs2-rcon-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/v9rt3x.webp",
      "description": "Manage CS2 game servers using natural language commands through a standardized protocol. Allows execution of RCON commands, monitoring of server status, and remote control of game settings.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T08:50:34Z",
      "readme_content": "# CS2 RCON MCP\n\n[![Python](https://img.shields.io/badge/python-3.8%2B-blue.svg)](https://www.python.org/downloads/)\n[![MCP Compatible](https://img.shields.io/badge/MCP-Compatible-green.svg)](https://cursor.sh)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol server for CS2 RCON management.\n\n## Description\n\nThis project provides a Model Context Protocol (MCP) server interface for managing CS2 game servers via RCON. It allows remote control and monitoring of CS2 servers through a standardized protocol.\n\n\n\n## Features\n\n- Manage your CS2 server in natural language\n- RCON command execution\n- Manage workshop maps (host, list, change) - [Explore Workshop Maps](https://steamcommunity.com/app/730/workshop/)\n- SSE-based communication\n- Docker support\n\n## Available Tools\n\n| Tool | Short Description |\n|------|-------------------|\n| `rcon` | Execute any RCON command |\n| `status` | Get current server status |\n| `list_workshop_maps` | List all workshop maps on the server |\n| `host_workshop_map` | Host a workshop map by its ID |\n| `workshop_changelevel` | Change the map to a given workshop map |\n\n## Installation\n\n### Environment Variables\n\n- `HOST`: CS2 server IP\n- `SERVER_PORT`: CS2 server port\n- `RCON_PASSWORD`: RCON password\n\n### Docker (recommended)\n\nPull the Docker image from GitHub Container Registry:\n\n```bash\ndocker pull ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n```\n\n### Docker Environment Variables\n\nWhen running with Docker, you can set the environment variables in two ways:\n\n1. **Directly in the command**:\n   ```bash\n   docker run -p 8080:8080 \\\n     -e HOST=your_server_ip \\\n     -e SERVER_PORT=your_server_port \\\n     -e RCON_PASSWORD=your_password \\\n     ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n   ```\n\n2. **Using a `.server-env` file**:\n   Create a file named `.server-env` with the following content:\n   ```\n   HOST=your_server_ip\n   SERVER_PORT=your_server_port\n   RCON_PASSWORD=your_password\n   ```\n\n   Then run the container like this:\n   ```bash\n   docker run -p 8080:8080 --env-file .server-env ghcr.io/v9rt3x/cs2-rcon-mcp:latest\n   ```\n\nThis provides users with an alternative method to set environment variables, making it easier to manage sensitive information like passwords.\n\n### Connecting from Visual Studio Code (GitHub Copilot)\n\nTo configure Visual Studio Code to work with the MCP server, follow these steps:\n\n1. **Start the MCP Server**: Ensure that your MCP server is running before attempting to connect from VS Code.\n\n2. **Open Visual Studio Code**: Launch VS Code and ensure that you have the GitHub Copilot extension installed and configured.\n\n3. **Configure GitHub Copilot**:\n   - Change the mode from \"Ask\" to \"Agent\" mode.\n\n4. **Add MCP Server Configuration**:\n   - Click on the toolbox icon in the upper left corner of the Copilot prompt.\n   - Select \"Add MCP Server\" and choose the option for **HTTP - server-sent events**.\n\n5. **Enter the Server URL**:\n   - For the URL, input: `http://localhost:8080/cs2server/sse`. This is the endpoint for the MCP server's SSE connection.\n\n### Alternative: Connecting from Cursor (or any other MCP-Client)\n\n1. Start the MCP server\n2. Configure Cursor's MCP settings by creating or updating `~/.cursor/mcp.json`:\n   ```json\n   {\n     \"mcpServers\": {\n       \"cs2server\": {\n         \"url\": \"http://localhost:8080/cs2server/sse\"\n       }\n     }\n   }\n   ```\n3. In Cursor, open the MCP panel (usually in the sidebar)\n4. The server should automatically connect using the configured URL\n\nOnce connected, you can manage your server in natural language.\n\nExample prompts:\n\n1. \"Add 5 bots to the server and start a competitive match on de_dust2\"\n2. \"What's the current server status? How many players are connected and what map are we on?\"\n\nHappy fragging! üòä",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cs2",
        "rcon",
        "commands",
        "cs2 rcon",
        "rcon commands",
        "rcon mcp"
      ],
      "category": "gaming-and-game-development"
    },
    "veenastudio--flstudio-mcp": {
      "owner": "veenastudio",
      "name": "flstudio-mcp",
      "url": "https://github.com/veenastudio/flstudio-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/veenastudio.webp",
      "description": "Connects AI model Claude to FL Studio for seamless integration of melodies, chords, and drum patterns into music projects. Facilitates real-time music production by allowing interaction between AI and the FL Studio environment.",
      "stars": 59,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-30T19:37:52Z",
      "readme_content": "# flstudio MCP\n\n# This is an MCP server that connects Claude to FL Studio.\nMade this in 3 days. We're open sourcing it to see what we can actually get out of it. The possibilities are endless.\n\n## If you're running to any issues, join our discord and we can setup it for you.\n(also join if you interested in the future of music and AI or want to request features. we're building this with you)\n\nhttps://discord.gg/ZjG9TaEhvy\n\nCheck out our AI-Powered DAW for musicians at www.veena.studio\n\nAll in browser. All for free.\n\n\n## Step 1: Download the Files\nYou should see two main items.\n\n- A folder called Test Controller\n- A python file called trigger.py\nThe Test Controller folder has a file called device_test.py that receives information from the MCP server.\ntrigger.py is the MCP server.\n\nPlace the Test Controller folder in Image-Line/FL Studio/Settings/Hardware (Don't change the name of this file or folder)\n\n## Step 2: Set up MCP for Claude\nFollow this tutorial to see how to setup MCP servers in Claude by edyting the claude_desktop_config files.\n\nhttps://modelcontextprotocol.io/quickstart/server\n\nIf you followed this process, make sure to change whatever mentions of weather.py to trigger.py\n\nIf the Hammer icon doesn't show up, open Task Manager and force close the Claude process.\n\nIt should then show up.\n\nThis is what my config file looks like\n\n![mcp](https://github.com/user-attachments/assets/e8e609f7-eaa4-469b-9140-c05b5a9bf242)\n\n## Step 3: Set Up Virtual MIDI Ports\n\n### For Windows\nFor Windows, download LoopMIDI from here.\n\nhttps://www.tobias-erichsen.de/software/loopmidi.html\n\nInstall LoopMIDI and add a port using the + button.\n\nThis is what mine looks like:\n![loopmidi2](https://github.com/user-attachments/assets/fdc2770f-e07a-4b19-824b-56de8a4aa2c3)\n\n### For Mac\nYour MIDI Ports would be automatically setup to receive data.\n\n## Step 4: Setup MIDI Controller\nOpen FL Studio.\n\nGo To Options > MIDI Settings.\n\nIn the Input Tab, click the MIDI Input you just created with LoopMIDI.\n\nChange controller type from (generic controller) to Test Controller.\n\n## Step 5: Download Packages\nGo to the folder with the trigger.py file. (This is the MCP Server file)\n\nActivate the conda environment (like you learned in the Claude MCP Setup Tutorial)\n\nRun this command to download the necessary packages: uv pip install httpx mido python-rtmidi typing fastmcp FL-Studio-API-Stubs\n(uv should be installed from the Claude MCP setup)\n\n## Step 6: Verify MCP Connection\nTell Claude to get available MIDI ports.\n\nThis should use the MCP to get the ports from FL Studio.\n\nIf Windows, copy the port you created with LoopMIDI and the number in front of it.\n\nIf Mac, copy the default port.\n\n![loopmidi](https://github.com/user-attachments/assets/a14b0aaa-5127-47c9-b041-fcb5a70339d9)\n\nIn my case, I copy loopMIDI Port 2\n\nOpen trigger.py in a text editor and replace the default port with the name of the port you just copied.\noutput_port = mido.open_output('loopMIDI Port 2') \n\n\n## Step 7: Make Music\nUse the MCP to send melodies, chords, drums, etc.\n\nClick on the instrument you want to record to and it will live record to the piano roll of that instrument.\n\nI tend to use this prompt when I start a new chat: Here is format for notes: note(0-127),velocity(0-100),length in beats(decimal),position in beats(decimal)\n\n## Step 8: Share what you made\nShare what you made on our Discord: https://discord.gg/ZjG9TaEhvy\n\n## Credits\nFL Studio API Stubs: https://github.com/IL-Group/FL-Studio-API-Stubs\nAbleton MCP: https://github.com/ahujasid/ableton-mcp\n\n## Nerd Stuff\nIf you want to contribute please go ahead. \n\nThe way this works is that device_test.py behaves as a virtual MIDI Controller.\nThe MCP server (trigger.py) communicates with this MIDI Controller by opening a Virtual Port and sending MIDI messages through a library called MIDO.\n\nThe issue with MIDI messages is that its only 7 bits so we can only send in number from 0-127.\n\nSo we encrypt all of our MIDI data like note position, etc in multiple MIDI notes that the device knows how to read.\n\nHopefully, Image Line can give us more access to their DAW via their API so we don't have to do this MIDI nonsense.\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "flstudio",
        "studio",
        "music",
        "flstudio mcp",
        "fl studio",
        "veenastudio flstudio"
      ],
      "category": "gaming-and-game-development"
    },
    "wangyafu--haiguitangmcp": {
      "owner": "wangyafu",
      "name": "haiguitangmcp",
      "url": "https://github.com/wangyafu/haiguitangmcp",
      "imageUrl": "/freedevtools/mcp/pfp/wangyafu.webp",
      "description": "Host interactive Turtle Soup games with an AI game master, enabling solo play and puzzle exploration with access to puzzles, game rules, and hints through standardized tools.",
      "stars": 6,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-02T08:53:43Z",
      "readme_content": "## ‰ªãÁªç\r\n\r\nÊú¨È°πÁõÆÊó®Âú®ËÆ©Â§ßËØ≠Ë®ÄÊ®°ÂûãÊâÆÊºîÊµ∑ÈæüÊ±§Ê∏∏Êàè‰∏ªÊåÅ‰∫∫Ôºå‰Ωø‰Ω†Áã¨Ëá™‰∏Ä‰∫∫‰πüËÉΩ‰∫´ÂèóÊµ∑ÈæüÊ±§Ê∏∏ÊàèÁöÑÂø´‰πê„ÄÇ\r\n\r\n## Âø´ÈÄüÂºÄÂßã\r\n\r\nÂú®‰ΩøÁî®Êú¨È°πÁõÆÂâçÔºå‰Ω†ÈúÄË¶ÅÁ°Æ‰øù‰Ω†ÁöÑÁîµËÑë‰∏äÂ∑≤ÁªèÂÆâË£Ö‰∫ÜPythonÂíåuv„ÄÇ\r\n\r\n\r\n‰Ω†È¶ñÂÖàÈúÄË¶ÅÂÖãÈöÜÊï¥‰∏™È°πÁõÆÔºåÁÑ∂ÂêéËøêË°åuv syncÂÆâË£Ö‰æùËµñ„ÄÇ\r\n\r\n```bash\r\ngit clone https://github.com/wangyafu/haiguitangmcp/\r\ncd haiguitangmcp\r\nuv sync\r\n```\r\n\r\nÂÖ∂Ê¨°Ôºå‰Ω†ÈúÄË¶Å‰øÆÊîπÈÖçÁΩÆÊñá‰ª∂ÔºàÂÅáËÆæ‰Ω†Â∞ÜÈ°πÁõÆÂÆâË£ÖÂú®‰∫ÜEÁõòÔºâ\r\n\r\n### Âú®vscode‰∏≠ÈÖçÁΩÆ\r\n\r\n```json\r\n\"mcp\":{\r\n    \"servers\":{\r\n        \"haiguitang-mcp\": {\r\n                \"type\": \"stdio\",\r\n                \"command\": \"uv\",\r\n                \"args\": [\r\n                    \"--directory\",\r\n                    \"E:\\\\haiguitangmcp\\\\haiguitang_mcp\",\r\n                    \"run\",\r\n                    \"server.py\"\r\n                ]\r\n            }\r\n    }\r\n}\r\n\r\n\r\n```\r\n\r\n### Âú®cherry studio‰∏≠ËøõË°åÈÖçÁΩÆ\r\n\r\n```json\r\n\"mcpServers\": {\r\n    \r\n    \"haiguitang\": {\r\n      \"isActive\": true,\r\n      \"name\": \"Êµ∑ÈæüÊ±§MCPÊúçÂä°Âô®\",\r\n      \"description\": \"ÂíåÁî®Êà∑Áé©Êµ∑ÈæüÊ±§\",\r\n      \"registryUrl\": \"\",\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\",\r\n        \"E:/haiguitangmcp/haiguitang_mcp\",\r\n        \"run\",\r\n        \"server.py\"\r\n      ]\r\n    },\r\n   \r\n}\r\n\r\n```\r\n\r\n‰∏äËø∞ÁöÑ\"E:/haiguitangmcp/haiguitang_mcp\"Ë°®Á§∫server.pyÊâÄÂú®ÁöÑË∑ØÂæÑ„ÄÇ\r\n\r\nÂú®ÂÖ∂‰ªñmcp client‰∏≠ÁöÑÈÖçÁΩÆÊñπÊ≥ïÁ±ª‰ºº„ÄÇ\r\n\r\n## mcpÁõ∏ÂÖ≥ÂÜÖÂÆπ\r\n\r\nÊú¨È°πÁõÆÊèê‰æõ‰∫Ü‰∏â‰∏™Â∑•ÂÖ∑:\r\n\r\n- `get_prompt`: Ëé∑ÂèñÊµ∑ÈæüÊ±§Ê∏∏ÊàèÁöÑÂÆåÊï¥Áé©Ê≥ïËØ¥Êòé\r\n- `get_puzzle`: Ëé∑Âèñ‰∏Ä‰∏™ÁâπÂÆöË∞úÈ¢òÁöÑÂÆåÊï¥ÂÜÖÂÆπÔºåÈúÄË¶ÅÊèê‰æõË∞úÈ¢òÊ†áÈ¢ò‰Ωú‰∏∫ÂèÇÊï∞\r\n- `list_puzzles_tool`: ÂàóÂá∫ÊâÄÊúâÂèØÁî®ÁöÑË∞úÈ¢òÂàóË°®\r\n\r\nÂêåÊó∂ÔºåÊú¨È°πÁõÆËøòÊèê‰æõ‰∫Ü‰ª•‰∏ãËµÑÊ∫ê:\r\n\r\n- `puzzles://{puzzle_title}`: Ëé∑ÂèñÁâπÂÆöË∞úÈ¢òÁöÑ‰ø°ÊÅØ\r\n\r\n‰ª•Âèä‰∏Ä‰∏™ÊèêÁ§∫Ê®°Êùø:\r\n\r\n- `game_rules`: Êèê‰æõÊµ∑ÈæüÊ±§Ê∏∏ÊàèËßÑÂàôÁöÑÊèêÁ§∫Ê®°Êùø\r\n\r\n## Ê∏∏ÊàèËßÑÂàô\r\n\r\nÂú®Êú¨Ê∏∏Êàè‰∏≠Ôºö\r\n\r\n- Êµ∑ÈæüÊ±§ÊòØ‰∏ÄÁßçÊÉÖÊôØÊé®ÁêÜÊ∏∏ÊàèÔºåË∞úÈ¢òÊú¨Ë∫´Âπ∂Ê≤°ÊúâÂæàÂº∫ÁöÑÈÄªËæëÊÄßÔºåÊ≥®ÈáçËÉΩÂê¶ÂèëÁé∞ÂÖ≥ÈîÆÁ∫øÁ¥¢ÈáçÁé∞ÊÉÖÊôØ\r\n- Âá∫È¢ò‰∫∫ÊèêÂá∫‰∏Ä‰∏™Áúã‰ºº‰∏çÂêàÂ∏∏ÁêÜÁöÑÈóÆÈ¢òÂíåÊÉÖÊôØÔºàË∞úÈù¢ÔºâÔºåÁåúÈ¢òËÄÖÈÄöËøáÊèêÈóÆÁº©Â∞èËåÉÂõ¥Âπ∂ÊúÄÁªàÊè≠Á§∫ÂÆåÊï¥ÊïÖ‰∫ãÊÉÖËäÇÔºàË∞úÂ∫ïÔºâ\r\n- ÁåúÈ¢òËÄÖÂèØ‰ª•ÊèêÂá∫‰ªª‰ΩïÈóÆÈ¢òÔºåÂá∫È¢ò‰∫∫‰∏ªË¶ÅÁî®\"ÊòØ\"„ÄÅ\"‰∏çÊòØ\"„ÄÅ\"ÊòØ‰πü‰∏çÊòØ\"Êàñ\"Ê≤°ÊúâÂÖ≥Á≥ª\"Êù•ÂõûÁ≠î\r\n- ÂΩìÈóÆÈ¢ò‰∏≠Êó¢ÊúâÂØπÁöÑÂú∞Êñπ‰πüÊúâ‰∏çÂØπÁöÑÂú∞ÊñπÊó∂ÔºåÂá∫È¢ò‰∫∫‰ºöÂõûÁ≠î\"ÊòØ‰πü‰∏çÊòØ\"\r\n- ÂΩìÈóÆÈ¢ò‰∏éË∞úÈ¢òÊ†∏ÂøÉÊÉÖËäÇÊó†ÂÖ≥Êó∂ÔºåÂá∫È¢ò‰∫∫‰ºöÂõûÁ≠î\"Ê≤°ÊúâÂÖ≥Á≥ª\"\r\n- ÁåúÈ¢òËÄÖÂèØ‰ª•ÈÄöËøáÂú®Ê∂àÊÅØÂºÄÂ§¥Âä†‰∏ä\"Ê±§Â∫ï\"Êù•Â∞ùËØïÊèèËø∞ÂÆåÊï¥ÊÉÖÊôØ\r\n- ÂΩìÁåúÈ¢òËÄÖÊéåÊè°‰∫ÜÂÖ≥ÈîÆÁ∫øÁ¥¢Êó∂ÔºåÂá∫È¢ò‰∫∫‰ºöÊèêÈÜíÁåúÈ¢òËÄÖÂΩíÁ∫≥Á∫øÁ¥¢ÔºåÂΩ¢ÊàêÂØπË∞úÂ∫ïÁöÑÂÆåÊï¥ÊèèËø∞\r\n- ÁåúÈ¢òËÄÖÂèØ‰ª•ËØ∑Ê±ÇÂºïÂØºÂíåÊèêÁ§∫ÔºåÂá∫È¢ò‰∫∫‰ºöÁªô‰∫àÂ∞öÊú™ÊéåÊè°ÁöÑÁ∫øÁ¥¢\r\n- ÂΩìÁåúÈ¢òËÄÖÁöÑÊèèËø∞Â§ßËá¥ÂåÖÂê´‰∫ÜË∞úÈ¢òÁöÑÂÖ≥ÈîÆÊÉÖÊôØÊó∂ÔºåÂá∫È¢ò‰∫∫‰ºöÁ°ÆËÆ§\"ÂÆåÂÖ®Ê≠£Á°Æ\"\r\n\r\n\r\n### Â∞èÊäÄÂ∑ß\r\n\r\n- ‰ªéÂü∫Êú¨ÈóÆÈ¢òÂºÄÂßãÔºåÂ¶ÇË∞úÈ¢òÊ∂âÂèä‰∫∫Êï∞„ÄÅÊ≠ªËÄÖÁöÑÊ≠ªÂõ†Á≠â„ÄÇ\r\n- Ê≥®ÊÑèË∞úÈù¢‰∏≠ÁöÑÊØè‰∏Ä‰∏™ÁªÜËäÇÔºåÂÆÉ‰ª¨ÂèØËÉΩÊòØÂÖ≥ÈîÆÁ∫øÁ¥¢\r\n- ÂΩì‰Ω†ÊÑüÂà∞Âõ∞ÊÉëÊó∂ÔºåÂ∞ùËØï‰ªé‰∏çÂêåËßíÂ∫¶ÊÄùËÄÉÈóÆÈ¢ò\r\n- ËÆ∞ÂΩïÂ∑≤ÁªèÁ°ÆËÆ§ÁöÑÁ∫øÁ¥¢Ôºå‰ª•‰æøÂΩíÁ∫≥Êï¥ÁêÜ\r\n\r\n## ÂÖ≥‰∫éË∞úÈ¢ò\r\n\r\nÁõÆÂâçÊú¨È°πÁõÆÂ∑≤ÁªèÊèê‰æõ‰∫Ü35‰∏™Ë∞úÈ¢ò„ÄÇ\r\nÊú¨‰∫∫ÊõæÂºÄÂèë[Êµ∑ÈæüÊ±§Ê®°ÊãüÂô®](https://www.hgtang.com)ÔºåËØ•ÁΩëÁ´ôÊúâËØÑÂàÜÂäüËÉΩ„ÄÇÁõÆÂâçÁöÑ35‰∏™Ë∞úÈ¢òÊù•Ëá™‰∫éÊàëÂíå‰∏Ä‰∫õÁÉ≠ÂøÉÁî®Êà∑‰∏∫ËØ•ÁΩëÁ´ôÊêúÈõÜÁöÑË∞úÈ¢ò„ÄÇ‰æùÊçÆËØ•ÁΩëÁ´ô‰∏äÂêÑË∞úÈ¢òÁöÑËØÑÂàÜÔºåÊé®ËçêÊ∏∏Áé©ÁöÑË∞úÈ¢òÂ¶Ç‰∏ãÔºö\r\n\r\n- Âø†ËØöÁöÑÁãó\r\n- 100ÂÖÉÈí±\r\n- Áà±Áä¨\r\n- Ê≤ªÁóÖ\r\n- Á•≠Êó•\r\n- ÁîµÊ¢ØÈáåÁöÑ‰∫∫\r\n- Âª∂ËøüÊ≠ª‰∫°\r\n- ÁîüÊÑè\r\n- Ë£§Â≠êÁ†¥‰∫Ü\r\n- Ë¶ÅÂ•ΩÁöÑÊúãÂèã\r\n\r\nÊ¨¢Ëøé‰Ω†‰∏∫Êú¨È°πÁõÆË¥°ÁåÆÊõ¥Â§öÁöÑË∞úÈ¢ò„ÄÇ‰Ω†ÂèØ‰ª•Âú®haiguitang_mcp/puzzlesÊñá‰ª∂Â§π‰∏≠Âä†ÂÖ•Êñ∞ÁöÑË∞úÈ¢òÊñá‰ª∂ÁÑ∂ÂêéÂèëËµ∑Pull Request„ÄÇ\r\n\r\nÊ≥®ÊÑèÔºö\r\n\r\n- Â¶ÇÊûú‰Ω†Â∏åÊúõÁî®Êà∑Ê∏∏Áé©‰πãÂâçÊúâÊâÄÈ¢ÑË≠¶Ôºå‰Ω†ÂèØ‰ª•Âú®Ê†áÈ¢òÔºå‰πüÂ∞±ÊòØË∞úÈ¢òÊñá‰ª∂ÁöÑÂêçÁß∞‰∏≠Ê≥®Êòé„ÄÇ\r\n- ËØ∑Ê≥®ÊÑèÊµ∑ÈæüÊ±§ÁöÑÁâàÊùÉÈóÆÈ¢ò„ÄÇ\r\n- ‰Ω†ÂèØ‰ª•Âú®Êµ∑ÈæüÊ±§Êñá‰ª∂‰∏≠Ê∑ªÂä†‰ΩúËÄÖÂíåÊèê‰∫§ËÄÖ‰ø°ÊÅØ„ÄÇ\r\n\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "games",
        "gaming",
        "haiguitangmcp",
        "soup games",
        "games ai",
        "turtle soup"
      ],
      "category": "gaming-and-game-development"
    },
    "wilsonchenghy--ShaderToy-MCP": {
      "owner": "wilsonchenghy",
      "name": "ShaderToy-MCP",
      "url": "https://github.com/wilsonchenghy/ShaderToy-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/wilsonchenghy.webp",
      "description": "Connects to ShaderToy for querying and generating complex GLSL shaders based on existing works, while enabling intelligent assistance in shader development and information retrieval.",
      "stars": 32,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-10T07:48:21Z",
      "readme_content": "# ShaderToy-MCP\r\n\r\nMCP Server for ShaderToy, a website for creating, running and sharing GLSL shader (https://www.shadertoy.com/). It connects LLM like Claude with ShaderToy through Model Context Protocol (MCP), allowing the LLM to query and read the entire web page, allowing it to make increasingly complex shader it normally isn't capable of.\r\n\r\nExample of the complex shader it generates:\r\n\r\n![IMG_9029](https://github.com/user-attachments/assets/376b438e-a438-4813-8415-4579fad41858)\r\n\r\n****\r\n\r\n***Ocean*** (https://www.shadertoy.com/view/tXs3Wf)\r\n\r\n<img width=\"1470\" alt=\"Screenshot 2025-04-02 at 1 58 17‚ÄØAM\" src=\"https://github.com/user-attachments/assets/40907327-111d-41eb-831e-831d36d7473a\" />\r\n\r\n****\r\n\r\n***Mountains*** (https://www.shadertoy.com/view/W3l3Df)\r\n\r\n<img width=\"1470\" alt=\"Screenshot 2025-04-02 at 5 44 12‚ÄØPM\" src=\"https://github.com/user-attachments/assets/16e1d078-8443-42e6-a6fe-32046a7d73a3\" />\r\n\r\n****\r\n\r\n***Matrix Digital Rain*** (https://www.shadertoy.com/view/33l3Df)\r\n\r\n\r\n## Features\r\n- Retriving info on any shader on ShaderToy\r\n- Search for shader available on ShaderToy through a search prompt\r\n- Generate complex shaders by learning from existing shaders on ShaderToy\r\n\r\n## MCP Tools \r\n- get_shader_info()\r\n- search_shader()\r\n\r\n## Installation\r\n**On Mac, please install uv as**\r\n```bash\r\nbrew install uv\r\n```\r\n**On Windows**\r\n```bash\r\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\" \r\n```\r\nand then\r\n```bash\r\nset Path=C:\\Users\\nntra\\.local\\bin;%Path%\r\n```\r\n\r\nOtherwise installation instructions are on their website: [Install uv](https://docs.astral.sh/uv/getting-started/installation/)\r\n\r\n## Claude Desktop Integration\r\n\r\nGit clone the project with `git clone https://github.com/wilsonchenghy/ShaderToy-MCP.git`\r\n\r\nGo to Claude > Settings > Developer > Edit Config > claude_desktop_config.json to include the following:\r\n\r\n```json\r\n{\r\n    \"mcpServers\": {\r\n        \"ShaderToy_MCP\": {\r\n          \"command\": \"uv\",\r\n          \"args\": [\r\n            \"run\",\r\n            \"--with\",\r\n            \"mcp[cli]\",\r\n            \"mcp\",\r\n            \"run\",\r\n            \"<path_to_project>/ShaderToy-MCP/src/ShaderToy-MCP/server.py\"\r\n          ],\r\n          \"env\": {\r\n            \"SHADERTOY_APP_KEY\": \"your_actual_api_key\"  // Replace with your API key\r\n          }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nOnce the config file has been set on Claude, you will see a hammer icon for the MCP. Test with the example commands to see if it correctly utilize the MCP tools.\r\n\r\n\r\n## Example Commands\r\n\r\n`Generate shader code of a {object}, if it is based on someone's work on ShaderToy, credit it, make the code follow the ShaderToy format: void mainImage( out vec4 fragColor, in vec2 fragCoord ) {}`\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shader",
        "shadertoy",
        "shaders",
        "shadertoy querying",
        "shader development",
        "shaders based"
      ],
      "category": "gaming-and-game-development"
    },
    "yamaton--mcp-dice": {
      "owner": "yamaton",
      "name": "mcp-dice",
      "url": "https://github.com/yamaton/mcp-dice",
      "imageUrl": "/freedevtools/mcp/pfp/yamaton.webp",
      "description": "Rolls dice using standard notation and returns results with their total sum, including individual roll outcomes.",
      "stars": 1,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-07T19:22:53Z",
      "readme_content": "# mcp-dice: A MCP Server for Rolling Dice\n\n[![smithery badge](https://smithery.ai/badge/mcp-dice)](https://smithery.ai/protocol/mcp-dice)\n![screenshot](https://github.com/user-attachments/assets/ff7615b8-46ba-4be5-8287-8e1bf348ae28)\n\nA Model Context Protocol (MCP) server that enables Large Language Models (LLMs) to roll dice. It accepts standard dice notation (e.g., `1d20`) and returns both individual rolls and their sum.\n\n<a href=\"https://glama.ai/mcp/servers/vzu553gv26\"><img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/vzu553gv26/badge\" /></a>\n\n## Features\n\n- Supports standard dice notation (e.g., `1d20`, `3d6`, `2d8+1`)\n- Returns both individual rolls and the total sum\n- Easy integration with Claude Desktop\n- Compatible with MCP Inspector for debugging\n\n## Installation\n\n### Installing via Smithery\n\nTo install Dice Roller for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/mcp-dice):\n\n```bash\nnpx @smithery/cli install mcp-dice --client claude\n```\n\nMake `uv` available: https://docs.astral.sh/uv/getting-started/installation/\n\n## Usage\n\n### Basic Command Line Usage\n\n```shell\n# Using uvx\nuvx mcp-dice\n```\n\n### Input Format\n\nThe server accepts a JSON object with a `notation` field:\n```json\n{\n  \"notation\": \"2d6+3\"\n}\n```\n\nExample responses:\n```json\n{\n  \"rolls\": [\n    3,\n    1\n  ],\n  \"sum\": 4,\n  \"modifier\": 3,\n  \"total\": 7,\n  \"notation\": \"2d6+3\",\n  \"timestamp\": \"2024-12-03T16:36:38.926452\"\n}\n```\n\n## Claude Desktop Configuration\n\n### Location\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Examples\n\n<details>\n<summary>macOS Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-dice\"]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>WSL Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"-e\",\n        \"zsh\",\n        \"-lc\",\n        \"uvx mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `zsh` with your login shell.\n</details>\n\n## Development and Debugging\n\n### Installing Development Dependencies\n\n```shell\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-dice\ncd mcp-dice\n\n# Install development dependencies\nuv pip install -e \".[dev]\"\n```\n\n### Running Tests\n\n```shell\nuv run pytest\n```\n\n### Using MCP Inspector\n\nThe [MCP Inspector](https://github.com/modelcontextprotocol/inspector) is a useful tool for debugging your MCP server. Install and run it using npm:\n\n```shell\nnpx @modelcontextprotocol/inspector uvx mcp-dice\n```\n\n### Claude Desktop Configuration for Development\n\n<details>\n<summary>macOS configuration (local dev)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--directory\",\n        \"path/to/mcp-dice-repo\",\n        \"mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `path/to/mcp-dice-repo` with the path to the repository on your filesystem.\n</details>\n\n<details>\n<summary>Windows (WSL) configuration (local dev)</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"dice\": {\n      \"command\": \"wsl\",\n      \"args\": [\n        \"-e\",\n        \"zsh\",\n        \"-lc\",\n        \"uv run --directory path/to/mcp-dice-repo mcp-dice\"\n      ]\n    }\n  }\n}\n```\n\nNote: Replace `zsh` with your login shell. Also, replace `path/to/mcp-dice-repo` with the path to the repository on your WSL filesystem.\n</details>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dice",
        "rolls",
        "outcomes",
        "mcp dice",
        "rolls dice",
        "dice rolls"
      ],
      "category": "gaming-and-game-development"
    },
    "yuniko-software--minecraft-mcp-server": {
      "owner": "yuniko-software",
      "name": "minecraft-mcp-server",
      "url": "https://github.com/yuniko-software/minecraft-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/yuniko-software.webp",
      "description": "Control a Minecraft character using natural language commands to perform various actions in the game world such as building, moving, and chatting. The bot integrates with the Mineflayer API and is designed to work with advanced language models via the Model Context Protocol.",
      "stars": 348,
      "forks": 28,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-04T11:24:30Z",
      "readme_content": "# Minecraft MCP Server\n\n> ‚ö†Ô∏è **CLAUDE DESKTOP DUAL LAUNCH WARNING**: Claude Desktop may sometimes launch MCP servers twice ([known issue](https://github.com/modelcontextprotocol/servers/issues/812)), which can lead to incorrect behavior of this MCP server. If you experience issues, restart Claude Desktop application to fix the problem. Alternatively, consider using other MCP clients.\n\nhttps://github.com/user-attachments/assets/6f17f329-3991-4bc7-badd-7cde9aacb92f\n\nA Minecraft bot powered by large language models and [Mineflayer API](https://github.com/PrismarineJS/mineflayer). This bot uses the [Model Context Protocol](https://github.com/modelcontextprotocol) (MCP) to enable Claude and other supported models to control a Minecraft character.\n\n<a href=\"https://glama.ai/mcp/servers/@yuniko-software/minecraft-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@yuniko-software/minecraft-mcp-server/badge\" alt=\"mcp-minecraft MCP server\" />\n</a>\n\n## Prerequisites\n\n- Git\n- Node.js\n- A running Minecraft game (the setup below was tested with Minecraft 1.21.8 Java Edition included in Microsoft Game Pass)\n- An MCP-compatible client. Claude Desktop will be used as an example, but other MCP clients are also supported\n\n## Getting started\n\nThis bot is designed to be used with Claude Desktop through the Model Context Protocol (MCP).\n\n### Run Minecraft\n\nCreate a singleplayer world and open it to LAN (`ESC -> Open to LAN`). Bot will try to connect using port `25565` and hostname `localhost`. These parameters could be configured in `claude_desktop_config.json` on a next step. \n\n### MCP Configuration\n\nMake sure that [Claude Desktop](https://claude.ai/download) is installed. Open `File -> Settings -> Developer -> Edit Config`. It should open installation directory. Find file with a name `claude_desktop_config.json` and insert the following code:\n\n```json\n{\n  \"mcpServers\": {\n    \"minecraft\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"github:yuniko-software/minecraft-mcp-server\",\n        \"--host\",\n        \"localhost\",\n        \"--port\",\n        \"25565\",\n        \"--username\",\n        \"ClaudeBot\"\n      ]\n    }\n  }\n}\n```\n\nDouble-check that right `--port` and `--host` parameters were used. Make sure to completely reboot the Claude Desktop application (should be closed in OS tray). \n\n## Running\n\nMake sure Minecraft game is running and the world is opened to LAN. Then start Claude Desktop application and the bot should join the game. \n\nIt could take some time for Claude Desktop to boot the MCP server. The marker that the server has booted successfully:\n\n![image](https://github.com/user-attachments/assets/39211d34-c3b3-46d6-bc80-353fd4fba690)\n\nYou can give bot any commands through any active Claude Desktop chat. You can also upload images of buildings and ask bot to build them üòÅ\n\nDon't forget to mention that bot should do something in Minecraft in your prompt. Because saying this is a trigger to run MCP server. It will ask for your permissions.\n\nUsing Claude 4.0 Sonnet could give you some interesting results. The bot-agent would be really smart ü´°\n\nExample usage: [shared Claude chat](https://claude.ai/share/535d5f69-f102-4cdb-9801-f74ea5709c0b)\n\n## Available Commands\n\nOnce connected to a Minecraft server, Claude can use these commands:\n\n### Movement\n- `get-position` - Get the current position of the bot\n- `move-to-position` - Move to specific coordinates\n- `look-at` - Make the bot look at specific coordinates\n- `jump` - Make the bot jump\n- `move-in-direction` - Move in a specific direction for a duration\n\n### Flight\n- `fly-to` - Make the bot fly directly to specific coordinates\n\n### Inventory\n- `list-inventory` - List all items in the bot's inventory\n- `find-item` - Find a specific item in inventory\n- `equip-item` - Equip a specific item\n\n### Block Interaction\n- `place-block` - Place a block at specified coordinates\n- `dig-block` - Dig a block at specified coordinates\n- `get-block-info` - Get information about a block\n- `find-block` - Find the nearest block of a specific type\n\n### Entity Interaction\n- `find-entity` - Find the nearest entity of a specific type\n\n### Communication\n- `send-chat` - Send a chat message in-game\n- `read-chat` - Get recent chat messages from players\n\n### Game State\n- `detect-gamemode` - Detect the gamemode on game\n\n## Contributing\n\nThis application was made in just two days, and the code is really simple and straightforward. All refactoring commits, functional and test contributions, issues and discussion are greatly appreciated!\n\nFeel free to submit pull requests or open issues for improvements. Some areas that could use enhancement:\n\n- Additional documentation\n- More robust error handling\n- Tests for different components\n- New functionality and commands\n\nTo get started with contributing, please see [CONTRIBUTING.md](CONTRIBUTING.md).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "minecraft",
        "yuniko",
        "commands",
        "software minecraft",
        "minecraft mcp",
        "control minecraft"
      ],
      "category": "gaming-and-game-development"
    },
    "zq19--CatchBall": {
      "owner": "zq19",
      "name": "CatchBall",
      "url": "https://github.com/zq19/CatchBall",
      "imageUrl": "/freedevtools/mcp/pfp/zq19.webp",
      "description": "Provide a relaxing game where players control a slide block to catch a falling ball using keyboard keys. Players can pause the game and choose to replay or exit when they miss the ball, with no scores or rankings to promote a stress-free experience.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2021-08-06T03:26:48Z",
      "readme_content": "# CatchBall\n_This is a game use a slide_block to catch the ball,you can play the game when you need relax._\n## Tips\n_Try to use the LEFT_KEY and the RIGHT_KEY to contrl the slide_block to catch the ball.\nwhen you miss the ball,you could chose replay or exit the game.\nYou can use SPACE_KEY to pause the game if you need._\n## Note\n_There is no score_board and rank,because i hope you can just to relax yourself when you need._\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "catchball",
        "replay",
        "zq19",
        "zq19 catchball",
        "catchball provide",
        "pause game"
      ],
      "category": "gaming-and-game-development"
    }
  }
}