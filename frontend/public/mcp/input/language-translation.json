{
  "category": "language-translation",
  "categoryDisplay": "Language Translation",
  "description": "",
  "totalRepositories": 18,
  "repositories": {
    "CXL-edu--VideoLingo": {
      "owner": "CXL-edu",
      "name": "VideoLingo",
      "url": "https://github.com/CXL-edu/VideoLingo",
      "imageUrl": "/freedevtools/mcp/pfp/CXL-edu.webp",
      "description": "A tool for transforming video content by generating high-quality translations and dubbing, focusing on creating accurate subtitles for global audiences. It includes functionality for downloading YouTube videos and improves the quality of machine translations and multi-line subtitles.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-02-07T06:38:59Z",
      "readme_content": "<div align=\"center\">\n\n\n\n# Connect the World, Frame by Frame\n\n[**English**](/README.md)ÔΩú[**ÁÆÄ‰Ωì‰∏≠Êñá**](/translations/README.zh.md)ÔΩú[**ÁπÅÈ´î‰∏≠Êñá**](/translations/README.zh-TW.md)ÔΩú[**Êó•Êú¨Ë™û**](/translations/README.ja.md)ÔΩú[**Espa√±ol**](/translations/README.es.md)ÔΩú[**–†—É—Å—Å–∫–∏–π**](/translations/README.ru.md)ÔΩú[**Fran√ßais**](/translations/README.fr.md)\n\n</div>\n\n## üåü Overview ([Try VL Now!](https://videolingo.io))\n\nVideoLingo is an all-in-one video translation, localization, and dubbing tool aimed at generating Netflix-quality subtitles. It eliminates stiff machine translations and multi-line subtitles while adding high-quality dubbing, enabling global knowledge sharing across language barriers.\n\nKey features:\n- üé• YouTube video download via yt-dlp\n\n- **üéôÔ∏è Word-level and Low-illusion subtitle recognition with WhisperX**\n\n- **üìù NLP and AI-powered subtitle segmentation**\n\n- **üìö Custom + AI-generated terminology for coherent translation**\n\n- **üîÑ 3-step Translate-Reflect-Adaptation for cinematic quality**\n\n- **‚úÖ Netflix-standard, Single-line subtitles Only**\n\n- **üó£Ô∏è Dubbing with GPT-SoVITS, Azure, OpenAI, and more**\n\n- üöÄ One-click startup and processing in Streamlit\n\n- üåç Multi-language support in Streamlit UI\n\n- üìù Detailed logging with progress resumption\n\nDifference from similar projects: **Single-line subtitles only, superior translation quality, seamless dubbing experience**\n\n## üé• Demo\n\n<table>\n<tr>\n<td width=\"50%\">\n\n### Russian Translation\n---\nhttps://github.com/user-attachments/assets/25264b5b-6931-4d39-948c-5a1e4ce42fa7\n\n</td>\n<td width=\"50%\">\n\n### GPT-SoVITS Dubbing\n---\nhttps://github.com/user-attachments/assets/47d965b2-b4ab-4a0b-9d08-b49a7bf3508c\n\n</td>\n</tr>\n</table>\n\n### Language Support\n\n**Input Language Support(more to come):**\n\nüá∫üá∏ English ü§© | üá∑üá∫ Russian üòä | üá´üá∑ French ü§© | üá©üá™ German ü§© | üáÆüáπ Italian ü§© | üá™üá∏ Spanish ü§© | üáØüáµ Japanese üòê | üá®üá≥ Chinese* üòä\n\n> *Chinese uses a separate punctuation-enhanced whisper model, for now...\n\n**Translation supports all languages, while dubbing language depends on the chosen TTS method.**\n\n## Installation\n\nYou don't have to read the whole docs, [**here**](https://share.fastgpt.in/chat/share?shareId=066w11n3r9aq6879r4z0v9rh) is an online AI agent to help you.\n\n> **Note:** For Windows users with NVIDIA GPU, follow these steps before installation:\n> 1. Install [CUDA Toolkit 12.6](https://developer.download.nvidia.com/compute/cuda/12.6.0/local_installers/cuda_12.6.0_560.76_windows.exe)\n> 2. Install [CUDNN 9.3.0](https://developer.download.nvidia.com/compute/cudnn/9.3.0/local_installers/cudnn_9.3.0_windows.exe)\n> 3. Add `C:\\Program Files\\NVIDIA\\CUDNN\\v9.3\\bin\\12.6` to your system PATH\n> 4. Restart your computer\n\n> **Note:** FFmpeg is required. Please install it via package managers:\n> - Windows: ```choco install ffmpeg``` (via [Chocolatey](https://chocolatey.org/))\n> - macOS: ```brew install ffmpeg``` (via [Homebrew](https://brew.sh/))\n> - Linux: ```sudo apt install ffmpeg``` (Debian/Ubuntu)\n\n1. Clone the repository\n\n```bash\ngit clone https://github.com/Huanshere/VideoLingo.git\ncd VideoLingo\n```\n\n2. Install dependencies(requires `python=3.10`)\n\n```bash\nconda create -n videolingo python=3.10.0 -y\nconda activate videolingo\npython install.py\n```\n\n3. Start the application\n\n```bash\nstreamlit run st.py\n```\n\n### Docker\nAlternatively, you can use Docker (requires CUDA 12.4 and NVIDIA Driver version >550), see [Docker docs](/docs/pages/docs/docker.en-US.md):\n\n```bash\ndocker build -t videolingo .\ndocker run -d -p 8501:8501 --gpus all videolingo\n```\n\n## APIs\nVideoLingo supports OpenAI-Like API format and various TTS interfaces:\n- LLM: `claude-3-5-sonnet-20240620`, `deepseek-chat(v3)`, `gemini-2.0-flash-exp`, `gpt-4o`, ... (sorted by performance)\n- WhisperX: Run whisperX locally or use 302.ai API\n- TTS: `azure-tts`, `openai-tts`, `siliconflow-fishtts`, **`fish-tts`**, `GPT-SoVITS`, `edge-tts`, `*custom-tts`(You can modify your own TTS in custom_tts.py!)\n\n> **Note:** VideoLingo works with **[302.ai](https://gpt302.saaslink.net/C2oHR9)** - one API key for all services (LLM, WhisperX, TTS). Or run locally with Ollama and Edge-TTS for free, no API needed!\n\nFor detailed installation, API configuration, and batch mode instructions, please refer to the documentation: [English](/docs/pages/docs/start.en-US.md) | [‰∏≠Êñá](/docs/pages/docs/start.zh-CN.md)\n\n## Current Limitations\n\n1. WhisperX transcription performance may be affected by video background noise, as it uses wav2vac model for alignment. For videos with loud background music, please enable Voice Separation Enhancement. Additionally, subtitles ending with numbers or special characters may be truncated early due to wav2vac's inability to map numeric characters (e.g., \"1\") to their spoken form (\"one\").\n\n2. Using weaker models can lead to errors during intermediate processes due to strict JSON format requirements for responses. If this error occurs, please delete the `output` folder and retry with a different LLM, otherwise repeated execution will read the previous erroneous response causing the same error.\n\n3. The dubbing feature may not be 100% perfect due to differences in speech rates and intonation between languages, as well as the impact of the translation step. However, this project has implemented extensive engineering processing for speech rates to ensure the best possible dubbing results.\n\n4. **Multilingual video transcription recognition will only retain the main language**. This is because whisperX uses a specialized model for a single language when forcibly aligning word-level subtitles, and will delete unrecognized languages.\n\n5. **Cannot dub multiple characters separately**, as whisperX's speaker distinction capability is not sufficiently reliable.\n\n## üìÑ License\n\nThis project is licensed under the Apache 2.0 License. Special thanks to the following open source projects for their contributions:\n\n[whisperX](https://github.com/m-bain/whisperX), [yt-dlp](https://github.com/yt-dlp/yt-dlp), [json_repair](https://github.com/mangiucugna/json_repair), [BELLE](https://github.com/LianjiaTech/BELLE)\n\n## üì¨ Contact Me\n\n- Submit [Issues](https://github.com/Huanshere/VideoLingo/issues) or [Pull Requests](https://github.com/Huanshere/VideoLingo/pulls) on GitHub\n- DM me on Twitter: [@Huanshere](https://twitter.com/Huanshere)\n- Email me at: team@videolingo.io\n\n## ‚≠ê Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=Huanshere/VideoLingo&type=Timeline)](https://star-history.com/#Huanshere/VideoLingo&Timeline)\n\n---\n\n<p align=\"center\">If you find VideoLingo helpful, please give me a ‚≠êÔ∏è!</p>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "translations",
        "subtitles",
        "videolingo",
        "translation cxl",
        "quality translations",
        "translations dubbing"
      ],
      "category": "language-translation"
    },
    "DeepLcom--deepl-mcp-server": {
      "owner": "DeepLcom",
      "name": "deepl-mcp-server",
      "url": "https://github.com/DeepLcom/deepl-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/DeepLcom.webp",
      "description": "Provides translation and rephrasing capabilities using the DeepL API, enabling seamless multilingual communication with automatic language detection and control over formality.",
      "stars": 46,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T15:21:20Z",
      "readme_content": "# deepl-mcp-server\n\n[![Version](https://img.shields.io/npm/v/deepl-mcp-server.svg)](https://www.npmjs.org/package/deepl-mcp-server)\n[![License: MIT](https://img.shields.io/badge/license-MIT-blueviolet.svg)](https://github.com/DeepLcom/deepl-mcp-server/blob/main/LICENSE)\n[![smithery badge](https://smithery.ai/badge/@DeepLcom/deepl-mcp-server)](https://smithery.ai/server/@DeepLcom/deepl-mcp-server)\n\nA Model Context Protocol (MCP) server that provides translation capabilities using the DeepL API.\n\n## Features\n\n- Translate text between numerous languages\n- Rephrase text using DeepL's capabilities\n- Access to all DeepL API languages and features\n- Automatic language detection\n- Formality control for supported languages\n\n## Usage\n\nThe easiest way to run this server is to use the npm package without installing anything:\n```bash\nnpx deepl-mcp-server\n```\n\nIf you want to install this locally, so you can play with it to your heart's content, you can do so using npm:\n```bash\nnpm install deepl-mcp-server\n```\n\nAlternately, if you want to contribute, you can clone this repository and install dependencies:\n\n```bash\ngit clone https://github.com/DeepLcom/deepl-mcp-server.git\ncd deepl-mcp-server\nnpm install\n```\n\n## Configuration\n\n### DeepL API Key\n\nYou'll need a DeepL API key to use this server. You can get one by signing up at [DeepL API](https://www.deepl.com/pro-api?utm_source=github&utm_medium=github-mcp-server-readme). With a DeepL API Free account you can translate up to 500,000 characters/month for free.\n\n## Using with Claude Desktop\n\nThis MCP server integrates with Claude Desktop to provide translation capabilities directly in your conversations with Claude.\n\n### Configuration Steps\n\n1. Install Claude Desktop if you haven't already\n2. Create or edit the Claude Desktop configuration file:\n\n   - On macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - On Windows: `%AppData%\\Claude\\claude_desktop_config.json`\n   - On Linux: `~/.config/Claude/claude_desktop_config.json`\n\n3. Add the DeepL MCP server configuration. If you want to use the npm package without installing anything, as described above:\n\n```json\n{\n  \"mcpServers\": {\n    \"deepl\": {\n      \"command\": \"npx\",\n      \"args\": [\"deepl-mcp-server\"],\n      \"env\": {\n        \"DEEPL_API_KEY\": \"{YOUR_API_KEY}\"\n      }\n    }\n  }\n}\n```\n\nOr, if you installed this locally, give Claude an absolute path to the JS file, like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"deepl\": {\n      \"command\": \"node\",\n      \"args\": [\"/{ABSOLUTE_PATH_TO_SERVER}/deepl-mcp-server/src/index.mjs\"],\n      \"env\": {\n        \"DEEPL_API_KEY\": \"{YOUR_API_KEY}\"\n      }\n    }\n  }\n}\n```\n\nIf you've pulled down this code, but you haven't done an `npm install`, or if you just prefer to, you can use `npx /{ABSOLUTE_PATH_TO_SERVER}/deepl-mcp-server` here instead of `node /{ABSOLUTE_PATH_TO_SERVER}/deepl-mcp-server/src/index.mjs`.\n\n4. Replace `{ABSOLUTE_PATH_TO_SERVER}` with an **absolute path** to your local copy of this repository - for example, `/Users/robotwoman/Code/deepl-mcp-server`\n5. Replace `{YOUR_API_KEY}` with your actual DeepL API key\n6. Restart Claude Desktop\n\nOnce configured, Claude will be able to use the DeepL translation tools when needed. You can ask Claude to translate text between languages, and it will use the DeepL API behind the scenes.\n\n## Available Tools\n\nThis server provides the following tools:\n\n- `get-source-languages`: Get list of available source languages for translation\n- `get-target-languages`: Get list of available target languages for translation\n- `translate-text`: Translate text to a target language\n- `rephrase-text`: Rephrase text in the same or different language\n\n## Tool Details\n\n### translate-text\n\nThis tool translates text between languages using the DeepL API.\n\nParameters:\n\n- `text`: The text to translate\n- `targetLang`: Target language code (e.g., 'en-US', 'de', 'fr')\n- `formality` (optional): Controls formality level of the translation:\n  - `'less'`: use informal language\n  - `'more'`: use formal, more polite language\n  - `'default'`: use default formality\n  - `'prefer_less'`: use informal language if available, otherwise default\n  - `'prefer_more'`: use formal language if available, otherwise default\n\n### rephrase-text\n\nThis tool rephrases text in the same or different language using the DeepL API.\n\nParameters:\n\n- `text`: The text to rephrase\n\n## Supported Languages\n\nThe DeepL API supports a wide variety of languages for translation. You can use the `get-source-languages` and `get-target-languages` tools to see all currently supported languages.\n\nSome examples of supported languages include:\n\n- English (en, en-US, en-GB)\n- German (de)\n- Spanish (es)\n- French (fr)\n- Italian (it)\n- Japanese (ja)\n- Chinese (zh)\n- Portuguese (pt-BR, pt-PT)\n- Russian (ru)\n- And many more\n\n## Debugging\n\nFor debugging information, visit the [MCP debugging documentation](https://modelcontextprotocol.io/docs/tools/debugging).\n\n## Error Handling\n\nIf you encounter errors with the DeepL API, check the following:\n\n- Verify your API key is correct\n- Make sure you're not exceeding your API usage limits\n- Confirm the language codes you're using are supported\n\n## License\n\nMIT\n\n## Links\n\n- [DeepL API Documentation](https://www.deepl.com/docs-api?utm_source=github&utm_medium=github-mcp-server-readme)\n- [Model Context Protocol Documentation](https://modelcontextprotocol.io/docs/)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "multilingual",
        "deeplcom",
        "deepl",
        "translation deeplcom",
        "deepl api",
        "using deepl"
      ],
      "category": "language-translation"
    },
    "DynamicEndpoints--flexable-agents": {
      "owner": "DynamicEndpoints",
      "name": "flexable-agents",
      "url": "https://github.com/DynamicEndpoints/flexable-agents",
      "imageUrl": "/freedevtools/mcp/pfp/DynamicEndpoints.webp",
      "description": "Provides intelligent customer service and content creation solutions through AI-powered agents, supporting multilingual inquiries and automated workflows. Features include sentiment analysis, knowledge base integration, and creative content generation across various formats.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-15T18:41:46Z",
      "readme_content": "\\\n<!-- filepath: c:\\\\Users\\\\Owner\\\\flexable-agents\\\\README.md -->\n# Flexible Agents MCP Server\n\nA robust, AI-powered Model Context Protocol (MCP) server built with Python, FastAPI, and Pydantic. This system provides a standardized interface for exposing various tools (formerly agents) for AI models, including capabilities for Microsoft 365 integration, content generation, data processing, and more.\n\n## üåü Features\n\n*   **MCP Compliance**: Fully compliant with the Model Context Protocol for standardized AI tool interaction.\n*   **Extensible Toolset**: Easily add new tools and capabilities.\n    *   **Microsoft 365 Core Tools**: Interact with M365 services (Outlook, SharePoint, Teams, etc.).\n    *   **Specialized Tools**: Azure management, document processing (PDF, DOCX, OCR), data analysis.\n    *   **Workflow Tools**: Orchestrate complex multi-step operations.\n*   **Structured Logging**: Comprehensive logging with Rich console output and JSON/detailed file logs.\n*   **Performance Monitoring**: Real-time monitoring of server health, performance, and error metrics.\n*   **Configuration Management**: Flexible configuration via `config.json` and environment variables.\n*   **Command Line Interface (CLI)**: Utilities for server management, configuration validation, tool listing, and testing.\n*   **Async Architecture**: Built with FastAPI and `asyncio` for high performance.\n*   **Microsoft Graph API Integration**: Seamlessly connect and interact with Microsoft Graph.\n*   **Anthropic Claude Integration**: Leverages Claude models for advanced AI tasks (configurable).\n\n## üöÄ Getting Started\n\n### Prerequisites\n\n*   Python 3.9+\n*   Pip (Python package installer)\n*   Access to necessary cloud services if using corresponding tools (e.g., Azure subscription, M365 tenant).\n\n### Environment Setup\n\n1.  **Clone the Repository**:\n    ```bash\n    git clone <repository-url>\n    cd flexible-agents-mcp\n    ```\n\n2.  **Create a Virtual Environment** (recommended):\n    ```bash\n    python -m venv .venv\n    ```\n    Activate the virtual environment:\n    *   Windows (pwsh): `.\\\\.venv\\\\Scripts\\\\Activate.ps1`\n    *   Windows (cmd): `.\\\\.venv\\\\Scripts\\\\activate.bat`\n    *   Linux/macOS: `source ./.venv/bin/activate`\n\n3.  **Install Dependencies**:\n    The project uses `pyproject.toml` for managing dependencies.\n    ```bash\n    pip install . \n    ```\n    For development, including tools for testing and linting:\n    ```bash\n    pip install -r requirements-dev.txt\n    ```\n\n4.  **Configuration Files**:\n    *   **Main Configuration (`config.json`)**:\n        *   Copy `config.json.example` to `config.json` in the root directory.\n            ```powershell\n            Copy-Item config.json.example config.json\n            ```\n        *   Edit `config.json` to provide your specific settings:\n            *   `m365`: `tenant_id`, `client_id`, `client_secret` for Microsoft Graph API access.\n            *   `anthropic`: `api_key` for Anthropic Claude models.\n            *   `azure`: `subscription_id`, `resource_group` if using Azure tools.\n            *   `server`: Adjust server settings like `log_level`, `debug` mode if needed.\n    *   **Environment Variables (`.env`)**:\n        *   Sensitive information like API keys or secrets can also be placed in a `.env` file in the root directory. Copy `.env.example` to `.env` and fill in the values.\n            ```powershell\n            Copy-Item .env.example .env\n            ```\n        *   Values in `.env` will override those in `config.json` if both are present for the same setting (e.g., `ANTHROPIC_API_KEY`).\n            Example `.env` content:\n            ```env\n            AZURE_TENANT_ID=\"your-tenant-id\"\n            AZURE_CLIENT_ID=\"your-client-id\"\n            AZURE_CLIENT_SECRET=\"your-client-secret\"\n            ANTHROPIC_API_KEY=\"your-anthropic-api-key\"\n            AZURE_SUBSCRIPTION_ID=\"your-azure-subscription-id\"\n            ```\n\n### Running the MCP Server\n\nYou can run the server in several ways:\n\n1.  **Directly with `server.py`**:\n    ```bash\n    python server.py --config config.json --port 8000\n    ```\n    Use `--debug` for more verbose output during development.\n\n2.  **Using the CLI**:\n    ```bash\n    python -m src.cli server --config config.json --port 8000\n    ```\n\n3.  **Using Provided Scripts**:\n    *   Windows PowerShell: `.\\\\run-server.ps1`\n    *   Windows Batch: `.\\\\run-server.bat`\n    These scripts typically run the server with default settings. You might need to edit them if your `config.json` is not in the default location or if you want to specify a different port.\n\nOnce the server is running, it will typically be accessible at `http://localhost:8000` (or the port you specified). The MCP manifest will be available at `http://localhost:8000/mcp.json`.\n\n## ‚öôÔ∏è MCP Server Usage\n\nThe Flexible Agents MCP Server exposes its tools according to the Model Context Protocol. AI models or other MCP clients can interact with the server by making HTTP requests to its defined endpoints.\n\n*   **Manifest**: The server's capabilities are described in the manifest file, typically available at the `/mcp.json` endpoint (e.g., `http://localhost:8000/mcp.json`).\n*   **Tool Calls**: To execute a tool, an MCP client sends a `POST` request to the `/tool/{tool_name}` endpoint.\n\n**Example MCP Request (conceptual):**\n\nA client wanting to use the `M365_Calendar_Create_Event` tool would send a POST request to `http://localhost:8000/tool/M365_Calendar_Create_Event` with a JSON body like:\n\n```json\n{\n  \"contextId\": \"unique-context-id\",\n  \"invocationId\": \"unique-invocation-id\",\n  \"toolName\": \"M365_Calendar_Create_Event\",\n  \"arguments\": {\n    \"subject\": \"Team Meeting\",\n    \"start_time\": \"2025-06-16T10:00:00\",\n    \"end_time\": \"2025-06-16T11:00:00\",\n    \"attendees\": [\"user1@example.com\", \"user2@example.com\"],\n    \"body\": \"Discuss project updates.\"\n  }\n}\n```\n\n**Example MCP Response (conceptual):**\n\nThe server would respond with:\n\n```json\n{\n  \"contextId\": \"unique-context-id\",\n  \"invocationId\": \"unique-invocation-id\",\n  \"toolName\": \"M365_Calendar_Create_Event\",\n  \"isError\": false,\n  \"content\": [\n    {\n      \"type\": \"application/json\",\n      \"content\": {\n        \"event_id\": \"AAMkAGYz...=\",\n        \"subject\": \"Team Meeting\",\n        \"start\": \"2025-06-16T10:00:00Z\",\n        \"end\": \"2025-06-16T11:00:00Z\",\n        \"attendees\": [\"user1@example.com\", \"user2@example.com\"],\n        \"message\": \"Event created successfully\"\n      }\n    }\n  ]\n}\n```\nIf an error occurs, `isError` would be `true`, and the `content` would typically contain error details.\n\n## üõ†Ô∏è Available Tools\n\nThe server comes with a variety of pre-built tools. You can list all available tools using the CLI: `python -m src.cli list-tools`.\n\nHere are some of the categories and example tools:\n\n*   **Microsoft 365 Tools (`src/tools/m365_tools.py`)**:\n    *   `M365_Calendar_Create_Event`: Creates a new calendar event.\n    *   `M365_Calendar_List_Events`: Lists calendar events.\n    *   `M365_Email_Send`: Sends an email.\n    *   `M365_Email_List_Messages`: Lists emails from the inbox.\n    *   `M365_SharePoint_List_Sites`: Lists SharePoint sites.\n    *   `M365_SharePoint_Search_Files`: Searches for files in SharePoint.\n    *   `M365_Teams_Send_Message`: Sends a message to a Teams channel.\n    *   *(Many more...)*\n*   **Azure Tools (`src/tools/azure_tools.py`)**:\n    *   `Azure_VM_List`: Lists virtual machines.\n    *   `Azure_Resource_Group_List`: Lists resource groups.\n*   **Document Tools (`src/tools/document_tools.py`)**:\n    *   `Document_Extract_Text_PDF`: Extracts text from a PDF file.\n    *   `Document_Extract_Text_DOCX`: Extracts text from a DOCX file.\n    *   `Document_OCR_Image`: Performs OCR on an image to extract text.\n*   **Data Tools (`src/tools/data_tools.py`)**:\n    *   `Data_Analyze_CSV`: Performs basic analysis on a CSV file.\n*   **Specialized Tools (`src/tools/specialized_tools.py`)**:\n    *   `Claude_Generate_Text`: Generates text using an Anthropic Claude model.\n*   **Workflow Tools (`src/tools/workflow_tools.py`)**:\n    *   Tools for orchestrating sequences of other tool calls.\n\nEach tool has defined input parameters and output formats, as specified in their implementation and discoverable via the MCP manifest or by inspecting the tool registration in the respective Python modules.\n\n## ‚å®Ô∏è Command Line Interface (CLI)\n\nThe CLI (`src/cli.py`) provides several utilities for managing and interacting with the MCP server. Access it using `python -m src.cli`.\n\n**Common Commands:**\n\n*   `python -m src.cli --help`: Shows all available commands.\n*   `python -m src.cli server [OPTIONS]`: Starts the MCP server.\n    *   `--config TEXT`: Path to the configuration file (default: `config.json`).\n    *   `--host TEXT`: Host to bind the server to (default: `0.0.0.0`).\n    *   `--port INTEGER`: Port to run the server on (default: `8000`).\n    *   `--debug / --no-debug`: Enable or disable debug mode.\n    *   `--health-check`: Performs a server health check and exits.\n*   `python -m src.cli list-tools [OPTIONS]`: Lists all registered tools.\n    *   `--config TEXT`: Path to the configuration file.\n*   `python -m src.cli test-tool <TOOL_NAME> [PARAMETERS] [OPTIONS]`: Tests a specific tool.\n    *   `<TOOL_NAME>`: The name of the tool to test (e.g., `M365_Email_List_Messages`).\n    *   `[PARAMETERS]`: Optional JSON string of parameters for the tool (e.g., `'{\"folder_name\": \"Inbox\", \"count\": 5}'`).\n    *   `--config TEXT`: Path to the configuration file.\n*   `python -m src.cli validate-config [OPTIONS]`: Validates the configuration file.\n    *   `--config TEXT`: Path to the configuration file.\n*   `python -m src.cli create-config`: Creates sample configuration files (`config.json.example`, `.env.example`).\n*   `python -m src.cli show-config [OPTIONS]`: Shows the current configuration (masks sensitive values).\n    *   `--config TEXT`: Path to the configuration file.\n\n**Example CLI Usage:**\n\n```bash\n# Start the server with a specific config and port\npython -m src.cli server --config my_config.json --port 8080\n\n# List all available tools\npython -m src.cli list-tools\n\n# Test the M365_Email_List_Messages tool\npython -m src.cli test-tool M365_Email_List_Messages '{\"count\": 3}'\n\n# Validate your config.json\npython -m src.cli validate-config --config config.json \n```\n\n## ‚öôÔ∏è Configuration\n\nThe server's behavior is primarily controlled by `config.json`.\n\n*   **`server`**: General server settings (name, version, debug mode, log level, timeout).\n*   **`m365`**: Microsoft 365 connection details (tenant ID, client ID, client secret, scopes).\n*   **`anthropic`**: Anthropic API settings (API key, model, max tokens, temperature).\n*   **`azure`**: Azure connection details (subscription ID, resource group, default location).\n\nRefer to `config.json.example` for the structure and available options.\n\n## üßë‚Äçüíª Development\n\n### Project Structure\n\n*   `server.py`: Main entry point for the FastAPI MCP server.\n*   `src/cli.py`: Command Line Interface.\n*   `src/mcp/`: Core MCP handling logic (server, handlers, registry, types, logging).\n*   `src/tools/`: Directory containing all MCP tool implementations (e.g., `m365_tools.py`, `azure_tools.py`).\n*   `src/core/`: Base classes and utilities.\n*   `config.json`: Server configuration file.\n*   `mcp.json`: MCP manifest file (generated based on registered tools).\n\n### Adding a New Tool\n\n1.  **Create or Choose a Module**: Place your tool logic in an appropriate file within `src/tools/` (e.g., `my_new_tools.py`).\n2.  **Implement the Tool Function**:\n    *   The function should be `async def`.\n    *   Use type hints for parameters.\n    *   The function should return a dictionary or a Pydantic model that can be serialized to JSON. This will form the `content` part of the MCP response.\n    *   Incorporate error handling. The `with_error_handling` decorator from `src/mcp/handlers.py` can be used for standardized error responses.\n3.  **Register the Tool**:\n    *   In your tool module, use the `@tool` decorator from `src/mcp/registry.py` or manually register tools with an instance of `ToolRegistry`.\n    *   Ensure your tool module is imported and its tools are registered in `src/tools/__init__.py` within the `register_all_tools` function.\n    *   Provide a clear `name`, `description`, and define `parameters` (if not auto-detected from type hints) and `returns` for the tool metadata.\n\n**Example Tool Snippet (in `src/tools/my_new_tools.py`):**\n```python\nfrom src.mcp.registry import tool\nfrom src.mcp.handlers import with_error_handling, log_request_metrics\nimport time\n\n@tool(\n    name=\"MyTool_Echo\",\n    description=\"A simple tool that echoes back the input message.\",\n    parameters=[{\"name\": \"message\", \"type\": \"string\", \"description\": \"The message to echo.\", \"required\": True}],\n    returns=\"A JSON object containing the echoed message.\"\n)\n@with_error_handling(\"MyTool_Echo\") # For standardized error handling\nasync def my_echo_tool(message: str) -> dict:\n    start_time = time.time()\n    success = True\n    error_message = None\n    try:\n        # Your tool logic here\n        if not message:\n            raise ValueError(\"Message cannot be empty.\")\n        result = {\"echo\": message, \"received_at\": time.time()}\n        return result\n    except Exception as e:\n        success = False\n        error_message = str(e)\n        # The with_error_handling decorator will catch this and format it\n        raise \n    finally:\n        duration = time.time() - start_time\n        log_request_metrics(method=\"MyTool_Echo\", duration=duration, success=success, error=error_message)\n\n```\n4.  **Update `src/tools/__init__.py`**:\n    ```python\n    # In src/tools/__init__.py\n    # ... other imports ...\n    from . import my_new_tools # Import your new module\n\n    def register_all_tools(server, config_manager):\n        # ... existing tool registrations ...\n        my_new_tools.register_tools(server.tool_registry, config_manager) # Assuming you have a register_tools func in your module\n        # Or, if using the @tool decorator and auto-registration from module:\n        # from src.mcp.registry import register_tools_from_module\n        # register_tools_from_module(server.tool_registry, my_new_tools)\n    ```\n\n### Logging and Error Handling\n\n*   The system uses the `logging_system.py` for structured logging. Use the standard `logging` module in your tools; it will be processed by `structlog`.\n*   The `log_request_metrics` function from `src.mcp.logging_system` should be called to record tool execution success/failure and duration.\n*   The `with_error_handling` decorator in `src.mcp.handlers` provides a standardized way to catch exceptions in tools and format them as MCP error responses.\n\n## üìù License\n\nThis project is licensed under the MIT License - see the `LICENSE` file for details.\n\n## üôè Acknowledgments\n\n*   FastAPI, Pydantic, Structlog, Rich\n*   Anthropic for Claude models\n*   Microsoft for Graph API and Azure SDKs\n*   The open-source community\n\n## üîÆ Future Enhancements (Planned / Ideas)\n\n*   **Enhanced Workflow Orchestration**: More sophisticated built-in tools for managing complex, multi-step workflows.\n*   **Dynamic Tool Registration**: Allow tools to be registered/unregistered at runtime.\n*   **Improved Security**: OAuth2/OpenID Connect for server endpoints.\n*   **User Management/Authentication for Tools**: Per-user permissions or context for tool execution.\n*   **Web UI for Management**: A simple web interface for server status, tool management, and log viewing.\n*   **Containerization**: Dockerfile and docker-compose for easy deployment.\n*   **Comprehensive Test Suite**: Expand test coverage for all tools and core components.\n\n---\n\n*This README has been updated to reflect the transition to an MCP server architecture.*\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "agents",
        "multilingual",
        "flexable agents",
        "translation dynamicendpoints",
        "dynamicendpoints flexable"
      ],
      "category": "language-translation"
    },
    "GoatWang--YTTranscipterMultilingualMCP": {
      "owner": "GoatWang",
      "name": "YTTranscipterMultilingualMCP",
      "url": "https://github.com/GoatWang/YTTranscipterMultilingualMCP",
      "imageUrl": "/freedevtools/mcp/pfp/GoatWang.webp",
      "description": "Transcribes YouTube videos into text across multiple languages to enhance content accessibility and audience engagement. Facilitates the conversion of spoken language into written form for improved reach.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-08T08:45:53Z",
      "readme_content": "# YTTranscipterMultilingualMCP\n[![smithery badge](https://smithery.ai/badge/@GoatWang/yttransciptermultilingualmcp)](https://smithery.ai/server/@GoatWang/yttransciptermultilingualmcp)\n\n## Description\n\nThis repository contains the code for YTTranscipterMultilingualMCP, a service for transcribing YouTube videos in multiple languages.\n\n## Usage\nNotice: command should come with `<full-path-of-uvx>` e.g. `/Library/Frameworks/Python.framework/Versions/3.10/bin/uvx`\n```\n{\n  \"mcpServers\": {\n    \"yt-transcipter-multilingual\": {\n      \"command\": \"/Library/Frameworks/Python.framework/Versions/3.10/bin/uvx\", \n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/GoatWang/YTTranscipterMultilingualMCP\",\n        \"yt-transcipter-multilingual\"\n      ]\n    }    \n  }\n}\n```\n\n## Prerequisites\n\n* Python 3.10+\n* Docker\n\n## Other Info\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/GoatWang/YTTranscipterMultilingualMCP\n   ```\n\n2. Build the Docker image:\n\n   ```bash\n   docker build -t yt-transcipter-multilingual .\n   ```\n\n3. Run the Docker container:\n\n   ```bash\n   docker run -d -p 5000:5000 yt-transcipter-multilingual\n   ```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "yttransciptermultilingualmcp",
        "transcribes",
        "translation",
        "transcribes youtube",
        "yttransciptermultilingualmcp transcribes",
        "videos text"
      ],
      "category": "language-translation"
    },
    "JigsawStack--jigsawstack-mcp-server": {
      "owner": "JigsawStack",
      "name": "jigsawstack-mcp-server",
      "url": "https://github.com/JigsawStack/jigsawstack-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/JigsawStack.webp",
      "description": "Facilitates real-time AI translation of text and images across 180+ language pairs while preserving context, tone, and meaning. Offers easy integration and management of translation tools through a structured directory system.",
      "stars": 23,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-22T15:15:38Z",
      "readme_content": "# JigsawStack MCP Server\n\n## Introduction\nJigsawStack MCP (Model Context Protocol) Server is a versatile platform designed to facilitate the integration and management of various tools. Each directory within the server represents a distinct tool that can be utilized for different purposes by an LLM. The server is built using Node.js and Express.js, and each tool is encapsulated within its own directory, making it easy to add, remove, or update tools without affecting the overall system.\n\nStart by obtaining your JIGSAWSTACK_API_KEY from the our website. You will need this key to access the JigsawStack services. You can get your API key by signing up for a free account at [JigsawStack](https://jigsawstack.com/dashboard).\n\nYou can also install our MCPs via [Smithery AI](https://smithery.ai/?q=jigsawstack)\n\n## Installation\n\n### Prerequisites\n- Ensure you have `git` installed on your system.\n- Ensure you have `node.js` and `npm` installed.\n- Alternatively, you can use `yarn` instead of `npm`. as a package manager.\n\n### Steps to Setup the repository:\n1. Clone the repository:\n    ```sh\n    git clone https://github.com/yourusername/jigsawstack-mcp-server.git\n    ```\n2. Navigate to the project directory:\n    ```sh\n    cd jigsawstack-mcp-server\n    ```\n3. Install the necessary dependencies:\n    ```sh\n    npm install or yarn install\n    ```\n\n## What is MCP?\nMCP stands for Model Context Protocol. It is a framework that allows users to integrate LLMs and manage various tools and components exposing external data in a modular fashion. Here each tool is encapsulated within its own directory, making it easy to add, remove, or update tools without affecting the overall system.\n\n## Using JigsawStack MCP Server\nThere are four tools available in the MCP Server. Each tool is contained within its own directory and has its own set of instructions for use.\n\n### Running a tool\nTo run a tool,\n1. cd into the tool directory and follow the instructions.\n2. Export the JIGSAWSTACK_API_KEY environment variable with your JIGSAWSTACK API key.\n    ```sh\n    export JIGSAWSTACK_API_KEY=your_api_key\n    ```\n3. Start the server:\n    ```sh\n    npm start\n    ```\n4. Access the server through your web browser at `http://localhost:3000`.\n\n### Directory Structure\n- `/ai-web-scraper`: Let AI scrape the internet for you!\n- `/ai-web-search`: Search powered by AI capable of handling complex queries.\n- `/image-generation`: Generate images using prompts, to receive a base64 string of the image.\n\n## Contact\nFor any questions or issues, please contact us at hello@jigsawstack.com.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jigsawstack",
        "translation",
        "tools",
        "translation jigsawstack",
        "translation tools",
        "ai translation"
      ],
      "category": "language-translation"
    },
    "MISO01--deepseek-translator-mcp": {
      "owner": "MISO01",
      "name": "deepseek-translator-mcp",
      "url": "https://github.com/MISO01/deepseek-translator-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/MISO01.webp",
      "description": "Translate Korean text to Chinese using the DeepSeek LLM, providing quick and seamless integration with applications through Cursor or local deployment.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-05T06:49:17Z",
      "readme_content": "This is a Korean to Chinese translator built as an MCP tool using DeepSeek LLM. It is designed to integrate with Cursor via Smithery or local server. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "deepseek",
        "korean",
        "translator",
        "deepseek translator",
        "translate korean",
        "korean text"
      ],
      "category": "language-translation"
    },
    "Mistizz--mcp-JapaneseTextAnalyzer": {
      "owner": "Mistizz",
      "name": "mcp-JapaneseTextAnalyzer",
      "url": "https://github.com/Mistizz/mcp-JapaneseTextAnalyzer",
      "imageUrl": "/freedevtools/mcp/pfp/Mistizz.webp",
      "description": "Analyzes Japanese and English texts by counting characters and words and evaluating linguistic features such as average sentence length and lexical diversity. Supports input via file paths or direct text input, accommodating both absolute and relative paths.",
      "stars": 2,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-25T18:29:31Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/mistizz-mcp-japanesetextanalyzer-badge.png)](https://mseep.ai/app/mistizz-mcp-japanesetextanalyzer)\n\n# Japanese Text Analyzer MCP Server\nÊó•Êú¨Ë™û„ÉÜ„Ç≠„Çπ„Éà„ÅÆÂΩ¢ÊÖãÁ¥†Ëß£Êûê„ÇíË°å„Åà„ÇãMCP„Çµ„Éº„Éê„Éº„Åß„Åô„ÄÇÊñáÁ´†„ÅÆÁâπÂæ¥„ÇíË®ÄË™ûÂ≠¶ÁöÑ„Å™Ë¶≥ÁÇπ„Åã„ÇâÊ∏¨ÂÆö„ÉªË©ï‰æ°„Åó„ÄÅÊñáÁ´†ÁîüÊàê„ÅÆ„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ„Å´ÂΩπÁ´ã„Å°„Åæ„Åô„ÄÇ\n\n[![smithery badge](https://smithery.ai/badge/@Mistizz/mcp-JapaneseTextAnalyzer)](https://smithery.ai/server/@Mistizz/mcp-JapaneseTextAnalyzer)\n<a href=\"https://glama.ai/mcp/servers/@Mistizz/mcp-JapaneseTextAnalyzer\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Mistizz/mcp-JapaneseTextAnalyzer/badge\" alt=\"Japanese Text Analyzer MCP server\" />\n</a>\n\n## Ê©üËÉΩ\n\n- Êó•Êú¨Ë™û„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊñáÂ≠óÊï∞Ôºà„Çπ„Éö„Éº„Çπ„ÇÑÊîπË°å„ÇíÈô§„ÅÑ„ÅüÂÆüË≥™ÁöÑ„Å™ÊñáÂ≠óÊï∞Ôºâ„Çí„Ç´„Ç¶„É≥„Éà\n- Êó•Êú¨Ë™û„ÉÜ„Ç≠„Çπ„Éà„ÅÆÂçòË™ûÊï∞„Çí„Ç´„Ç¶„É≥„Éà\n- Êó•Êú¨Ë™û„ÉÜ„Ç≠„Çπ„Éà„ÅÆË©≥Á¥∞„Å™Ë®ÄË™ûÁöÑÁâπÂæ¥„ÅÆÂàÜÊûêÔºàÂπ≥ÂùáÊñáÈï∑„ÄÅÂìÅË©û„ÅÆÂâ≤Âêà„ÄÅË™ûÂΩô„ÅÆÂ§öÊßòÊÄß„Å™„Å©Ôºâ\n- „Éï„Ç°„Ç§„É´„Éë„Çπ„Åæ„Åü„ÅØÁõ¥Êé•„ÉÜ„Ç≠„Çπ„ÉàÂÖ•Âäõ„ÅÆ‰∏°Êñπ„Å´ÂØæÂøú\n- ÊüîËªü„Å™„Éï„Ç°„Ç§„É´„Éë„ÇπËß£Ê±∫ÔºàÁµ∂ÂØæ„Éë„Çπ„ÉªÁõ∏ÂØæ„Éë„Çπ„Éª„Éï„Ç°„Ç§„É´Âêç„ÅÆ„Åø„Åß„ÇÇÊ§úÁ¥¢ÂèØËÉΩÔºâ\n\n## Tools\n\nÁèæÂú®„ÄÅ‰ª•‰∏ã„ÅÆ„ÉÑ„Éº„É´„ÅåÂÆüË£Ö„Åï„Çå„Å¶„ÅÑ„Åæ„ÅôÔºö\n\n### count_chars\n\n„Éï„Ç°„Ç§„É´„ÅÆÊñáÂ≠óÊï∞„ÇíË®àÊ∏¨„Åó„Åæ„Åô„ÄÇÁµ∂ÂØæ„Éë„Çπ„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàWindowsÂΩ¢Âºè C:\\Users\\...„ÄÅ„Åæ„Åü„ÅØWSL/LinuxÂΩ¢Âºè /c/Users/... „ÅÆ„Å©„Å°„Çâ„ÇÇÂèØÔºâ„ÄÇ„Çπ„Éö„Éº„Çπ„ÇÑÊîπË°å„ÇíÈô§„ÅÑ„ÅüÂÆüË≥™ÁöÑ„Å™ÊñáÂ≠óÊï∞„Çí„Ç´„Ç¶„É≥„Éà„Åó„Åæ„Åô„ÄÇ\n\n**ÂÖ•Âäõ:**\n- `filePath` (string): ÊñáÂ≠óÊï∞„Çí„Ç´„Ç¶„É≥„Éà„Åô„Çã„Éï„Ç°„Ç§„É´„ÅÆ„Éë„ÇπÔºàWindowsÂΩ¢Âºè„ÅãWSL/LinuxÂΩ¢Âºè„ÅÆÁµ∂ÂØæ„Éë„Çπ„ÇíÊé®Â•®Ôºâ\n\n**Âá∫Âäõ:**\n- „Éï„Ç°„Ç§„É´„ÅÆÊñáÂ≠óÊï∞Ôºà„Çπ„Éö„Éº„Çπ„ÇÑÊîπË°å„ÇíÈô§Â§ñ„Åó„ÅüÂÆüË≥™ÁöÑ„Å™ÊñáÂ≠óÊï∞Ôºâ\n\n### count_words\n\n„Éï„Ç°„Ç§„É´„ÅÆÂçòË™ûÊï∞„ÇíË®àÊ∏¨„Åó„Åæ„Åô„ÄÇÁµ∂ÂØæ„Éë„Çπ„ÇíÊåáÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàWindowsÂΩ¢Âºè C:\\Users\\...„ÄÅ„Åæ„Åü„ÅØWSL/LinuxÂΩ¢Âºè /c/Users/... „ÅÆ„Å©„Å°„Çâ„ÇÇÂèØÔºâ„ÄÇËã±Ë™û„Åß„ÅØ„Çπ„Éö„Éº„Çπ„ÅßÂå∫Âàá„Çâ„Çå„ÅüÂçòË™û„Çí„Ç´„Ç¶„É≥„Éà„Åó„ÄÅÊó•Êú¨Ë™û„Åß„ÅØÂΩ¢ÊÖãÁ¥†Ëß£Êûê„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ\n\n**ÂÖ•Âäõ:**\n- `filePath` (string): ÂçòË™ûÊï∞„Çí„Ç´„Ç¶„É≥„Éà„Åô„Çã„Éï„Ç°„Ç§„É´„ÅÆ„Éë„ÇπÔºàWindowsÂΩ¢Âºè„ÅãWSL/LinuxÂΩ¢Âºè„ÅÆÁµ∂ÂØæ„Éë„Çπ„ÇíÊé®Â•®Ôºâ\n- `language` (string, „Ç™„Éó„Ç∑„Éß„É≥, „Éá„Éï„Ç©„É´„Éà: \"en\"): „Éï„Ç°„Ç§„É´„ÅÆË®ÄË™û (en: Ëã±Ë™û, ja: Êó•Êú¨Ë™û)\n\n**Âá∫Âäõ:**\n- „Éï„Ç°„Ç§„É´„ÅÆÂçòË™ûÊï∞\n- Êó•Êú¨Ë™û„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„ÄÅÂΩ¢ÊÖãÁ¥†Ëß£Êûê„ÅÆË©≥Á¥∞ÁµêÊûú„ÇÇË°®Á§∫\n\n### count_clipboard_chars\n\n„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊñáÂ≠óÊï∞„ÇíË®àÊ∏¨„Åó„Åæ„Åô„ÄÇ„Çπ„Éö„Éº„Çπ„ÇÑÊîπË°å„ÇíÈô§„ÅÑ„ÅüÂÆüË≥™ÁöÑ„Å™ÊñáÂ≠óÊï∞„Çí„Ç´„Ç¶„É≥„Éà„Åó„Åæ„Åô„ÄÇ\n\n**ÂÖ•Âäõ:**\n- `text` (string): ÊñáÂ≠óÊï∞„Çí„Ç´„Ç¶„É≥„Éà„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà\n\n**Âá∫Âäõ:**\n- „ÉÜ„Ç≠„Çπ„Éà„ÅÆÊñáÂ≠óÊï∞Ôºà„Çπ„Éö„Éº„Çπ„ÇÑÊîπË°å„ÇíÈô§Â§ñ„Åó„ÅüÂÆüË≥™ÁöÑ„Å™ÊñáÂ≠óÊï∞Ôºâ\n\n### count_clipboard_words\n\n„ÉÜ„Ç≠„Çπ„Éà„ÅÆÂçòË™ûÊï∞„ÇíË®àÊ∏¨„Åó„Åæ„Åô„ÄÇËã±Ë™û„Åß„ÅØ„Çπ„Éö„Éº„Çπ„ÅßÂå∫Âàá„Çâ„Çå„ÅüÂçòË™û„Çí„Ç´„Ç¶„É≥„Éà„Åó„ÄÅÊó•Êú¨Ë™û„Åß„ÅØÂΩ¢ÊÖãÁ¥†Ëß£Êûê„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ\n\n**ÂÖ•Âäõ:**\n- `text` (string): ÂçòË™ûÊï∞„Çí„Ç´„Ç¶„É≥„Éà„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà\n- `language` (string, „Ç™„Éó„Ç∑„Éß„É≥, „Éá„Éï„Ç©„É´„Éà: \"en\"): „ÉÜ„Ç≠„Çπ„Éà„ÅÆË®ÄË™û (en: Ëã±Ë™û, ja: Êó•Êú¨Ë™û)\n\n**Âá∫Âäõ:**\n- „ÉÜ„Ç≠„Çπ„Éà„ÅÆÂçòË™ûÊï∞\n- Êó•Êú¨Ë™û„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„ÄÅÂΩ¢ÊÖãÁ¥†Ëß£Êûê„ÅÆË©≥Á¥∞ÁµêÊûú„ÇÇË°®Á§∫\n\n### analyze_text\n\n„ÉÜ„Ç≠„Çπ„Éà„ÅÆË©≥Á¥∞„Å™ÂΩ¢ÊÖãÁ¥†Ëß£Êûê„Å®Ë®ÄË™ûÁöÑÁâπÂæ¥„ÅÆÂàÜÊûê„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇÊñá„ÅÆË§áÈõë„Åï„ÄÅÂìÅË©û„ÅÆÂâ≤Âêà„ÄÅË™ûÂΩô„ÅÆÂ§öÊßòÊÄß„Å™„Å©„ÇíËß£Êûê„Åó„Åæ„Åô„ÄÇ\n\n**ÂÖ•Âäõ:**\n- `text` (string): ÂàÜÊûê„Åô„Çã„ÉÜ„Ç≠„Çπ„Éà\n\n**Âá∫Âäõ:**\n- „ÉÜ„Ç≠„Çπ„Éà„ÅÆÂü∫Êú¨ÊÉÖÂ†±ÔºàÁ∑èÊñáÂ≠óÊï∞„ÄÅÊñá„ÅÆÊï∞„ÄÅÁ∑èÂΩ¢ÊÖãÁ¥†Êï∞Ôºâ\n- Ë©≥Á¥∞ÂàÜÊûêÁµêÊûúÔºàÂπ≥ÂùáÊñáÈï∑„ÄÅÂìÅË©û„ÅÆÂâ≤Âêà„ÄÅÊñáÂ≠óÁ®Æ„ÅÆÂâ≤Âêà„ÄÅË™ûÂΩô„ÅÆÂ§öÊßòÊÄß„Å™„Å©Ôºâ\n\n### analyze_file\n\n„Éï„Ç°„Ç§„É´„ÅÆË©≥Á¥∞„Å™ÂΩ¢ÊÖãÁ¥†Ëß£Êûê„Å®Ë®ÄË™ûÁöÑÁâπÂæ¥„ÅÆÂàÜÊûê„ÇíË°å„ÅÑ„Åæ„Åô„ÄÇÊñá„ÅÆË§áÈõë„Åï„ÄÅÂìÅË©û„ÅÆÂâ≤Âêà„ÄÅË™ûÂΩô„ÅÆÂ§öÊßòÊÄß„Å™„Å©„ÇíËß£Êûê„Åó„Åæ„Åô„ÄÇ\n\n**ÂÖ•Âäõ:**\n- `filePath` (string): ÂàÜÊûê„Åô„Çã„Éï„Ç°„Ç§„É´„ÅÆ„Éë„ÇπÔºàWindowsÂΩ¢Âºè„ÅãWSL/LinuxÂΩ¢Âºè„ÅÆÁµ∂ÂØæ„Éë„Çπ„ÇíÊé®Â•®Ôºâ\n\n**Âá∫Âäõ:**\n- „Éï„Ç°„Ç§„É´„ÅÆÂü∫Êú¨ÊÉÖÂ†±ÔºàÁ∑èÊñáÂ≠óÊï∞„ÄÅÊñá„ÅÆÊï∞„ÄÅÁ∑èÂΩ¢ÊÖãÁ¥†Êï∞Ôºâ\n- Ë©≥Á¥∞ÂàÜÊûêÁµêÊûúÔºàÂπ≥ÂùáÊñáÈï∑„ÄÅÂìÅË©û„ÅÆÂâ≤Âêà„ÄÅÊñáÂ≠óÁ®Æ„ÅÆÂâ≤Âêà„ÄÅË™ûÂΩô„ÅÆÂ§öÊßòÊÄß„Å™„Å©Ôºâ\n\n## ‰ΩøÁî®ÊñπÊ≥ï\n\n### Installing via Smithery\n\nTo install Japanese Text Analyzer for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Mistizz/mcp-JapaneseTextAnalyzer):\n\n```bash\nnpx -y @smithery/cli install @Mistizz/mcp-JapaneseTextAnalyzer --client claude\n```\n\n### npx„Åß„ÅÆÂÆüË°å\n\n„Åì„ÅÆ„Éë„ÉÉ„Ç±„Éº„Ç∏„ÅØnpx„ÅßGitHub„É™„Éù„Ç∏„Éà„É™„Åã„ÇâÁõ¥Êé•ÂÆüË°å„Åß„Åç„Åæ„ÅôÔºö\n\n```bash\nnpx -y github:Mistizz/mcp-JapaneseTextAnalyzer\n```\n\n### Claude for Desktop„Åß„ÅÆ‰ΩøÁî®\n\nClaude for Desktop„ÅÆË®≠ÂÆö„Éï„Ç°„Ç§„É´„Å´‰ª•‰∏ã„ÇíËøΩÂä†„Åó„Å¶„Åè„Å†„Åï„ÅÑ:\n\n**Windows:**\n`%AppData%\\Claude\\claude_desktop_config.json`\n\n**macOS:**\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"JapaneseTextAnalyzer\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"github:Mistizz/mcp-JapaneseTextAnalyzer\"\n      ]\n    }\n  }\n}\n```\n\n### Cursor„Åß„ÅÆ‰ΩøÁî®\n\nCursor„Åß„ÇÇÂêåÊßò„ÅÆË®≠ÂÆö„Çí`.cursor`„Éï„Ç©„É´„ÉÄÂÜÖ„ÅÆ`mcp.json`„Éï„Ç°„Ç§„É´„Å´ËøΩÂä†„Åó„Åæ„Åô„ÄÇ\n\n**Windows:**\n`%USERPROFILE%\\.cursor\\mcp.json`\n\n**macOS/Linux:**\n`~/.cursor/mcp.json`\n\n‰∏ÄËà¨ÁöÑ„Å™Ë®≠ÂÆö(ÊÆÜ„Å©„ÅÆÁí∞Â¢É„ÅßÂãï‰Ωú):\n```json\n{\n  \"mcpServers\": {\n    \"JapaneseTextAnalyzer\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"github:Mistizz/mcp-JapaneseTextAnalyzer\"\n      ]\n    }\n  }\n}\n```\n\nWindowsÁí∞Â¢É„Å´„Åä„ÅÑ„Å¶„ÄÅ‰∏äË®ò„ÅßÂãï‰Ωú„Åó„Å™„Åã„Å£„ÅüÂ†¥Âêà„ÄÅ‰∏ãË®ò„ÇíË©¶„Åó„Å¶„Åø„Å¶„Åè„Å†„Åï„ÅÑÔºö\n```json\n{\n  \"mcpServers\": {\n    \"JapaneseTextAnalyzer\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"github:Mistizz/mcp-JapaneseTextAnalyzer\"\n      ]\n    }\n  }\n}\n```\n\n## ‰ΩøÁî®‰æã\n\n### Áõ¥Êé•„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊñáÂ≠óÊï∞„ÇíÊï∞„Åà„Çã\n```\n„Åì„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊñáÂ≠óÊï∞„ÇíÊï∞„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n```\n\n### „Éï„Ç°„Ç§„É´„ÅÆÂçòË™ûÊï∞„ÇíÊó•Êú¨Ë™û„É¢„Éº„Éâ„ÅßÊï∞„Åà„Çã\n```\nC:\\path\\to\\your\\file.txt „ÅÆÂçòË™ûÊï∞„ÇíÊó•Êú¨Ë™û„É¢„Éº„Éâ„ÅßÊï∞„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n```\n\n### WSL/LinuxÂΩ¢Âºè„ÅÆ„Éë„Çπ„ÅßÂçòË™ûÊï∞„ÇíÊï∞„Åà„Çã\n```\n/c/Users/username/Documents/file.txt „ÅÆÂçòË™ûÊï∞„ÇíÊó•Êú¨Ë™û„É¢„Éº„Éâ„ÅßÊï∞„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n```\n\n### „Éï„Ç°„Ç§„É´Âêç„Å†„Åë„ÅßÂçòË™ûÊï∞„ÇíÊï∞„Åà„Çã\n```\nREADME.md „ÅÆÂçòË™ûÊï∞„ÇíËã±Ë™û„É¢„Éº„Éâ„ÅßÊï∞„Åà„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n```\n\n### „ÉÜ„Ç≠„Çπ„Éà„ÇíË≤º„Çä‰ªò„Åë„Å¶Êó•Êú¨Ë™û„ÅÆÂçòË™ûÊï∞„ÇíÊï∞„Åà„Çã\n```\nÊ¨°„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊó•Êú¨Ë™û„ÅÆÂçòË™ûÊï∞„ÇíÊï∞„Åà„Å¶„Åè„Å†„Åï„ÅÑÔºö\n\nÂêæËº©„ÅØÁå´„Åß„ÅÇ„Çã„ÄÇÂêçÂâç„ÅØ„Åæ„Å†ÁÑ°„ÅÑ„ÄÇ„Å©„Åì„ÅßÁîü„Çå„Åü„Åã„Å®„Çì„Å®Ë¶ãÂΩì„Åå„Å§„Åã„Å¨„ÄÇ‰Ωï„Åß„ÇÇËñÑÊöó„ÅÑ„Åò„ÇÅ„Åò„ÇÅ„Åó„ÅüÊâÄ„Åß„Éã„É£„Éº„Éã„É£„ÉºÊ≥£„ÅÑ„Å¶„ÅÑ„Åü‰∫ã„Å†„Åë„ÅØË®òÊÜ∂„Åó„Å¶„ÅÑ„Çã„ÄÇ\n```\n\n### „ÉÜ„Ç≠„Çπ„Éà„ÅÆË©≥Á¥∞„Å™Ë®ÄË™ûÁöÑÁâπÂæ¥„ÇíÂàÜÊûê„Åô„Çã\n```\nÊ¨°„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„ÇíË©≥Á¥∞„Å´ÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºö\n\nÁßÅ„ÅØÊò®Êó•„ÄÅÊñ∞„Åó„ÅÑÊú¨„ÇíË≤∑„ÅÑ„Åæ„Åó„Åü„ÄÇ„Å®„Å¶„ÇÇÈù¢ÁôΩ„Åù„ÅÜ„Å™Â∞èË™¨„Åß„ÄÅÂèã‰∫∫„Åã„Çâ„ÅÆË©ïÂà§„ÇÇËâØ„Åã„Å£„Åü„Åß„Åô„ÄÇ‰ªäÈÄ±Êú´„Å´„ÇÜ„Å£„Åè„ÇäË™≠„ÇÄ‰∫àÂÆö„Åß„Åô„ÄÇ\n```\n\n### „Éï„Ç°„Ç§„É´„ÅÆË©≥Á¥∞„Å™Ë®ÄË™ûÁöÑÁâπÂæ¥„ÇíÂàÜÊûê„Åô„Çã\n```\nC:\\path\\to\\your\\file.txt „ÇíË©≥Á¥∞„Å´ÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ\n```\n\n## „Éï„Ç°„Ç§„É´„Éë„ÇπËß£Ê±∫Ê©üËÉΩ\n\n„Åì„ÅÆ„ÉÑ„Éº„É´„ÅØ„ÄÅ„Éï„Ç°„Ç§„É´„Éë„Çπ„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà„Å´ÊüîËªü„Å´„Éï„Ç°„Ç§„É´„ÇíÊé¢Á¥¢„Åó„Åæ„ÅôÔºö\n\n1. Áµ∂ÂØæ„Éë„Çπ„ÅåÊåáÂÆö„Åï„Çå„ÅüÂ†¥Âêà„ÅØ„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®\n   - WindowsÂΩ¢Âºè„ÅÆÁµ∂ÂØæ„Éë„ÇπÔºà‰æã: `C:\\Users\\username\\Documents\\file.txt`Ôºâ\n   - WSL/LinuxÂΩ¢Âºè„ÅÆÁµ∂ÂØæ„Éë„ÇπÔºà‰æã: `/c/Users/username/Documents/file.txt`Ôºâ„ÅÆ„Å©„Å°„Çâ„ÇÇËá™ÂãïÁöÑ„Å´Ê§úÂá∫„ÉªÂ§âÊèõ\n2. „Ç´„É¨„É≥„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™Ôºà‰ΩúÊ•≠„Éá„Ç£„É¨„ÇØ„Éà„É™Ôºâ„ÇíÂü∫Ê∫ñ„Å´Áõ∏ÂØæ„Éë„Çπ„ÇíËß£Ê±∫\n3. „Éõ„Éº„É†„Éá„Ç£„É¨„ÇØ„Éà„É™Ôºà`%USERPROFILE%`„ÇÑ`$HOME`Ôºâ„ÇíÂü∫Ê∫ñ„Å´Ê§úÁ¥¢\n4. „Éá„Çπ„ÇØ„Éà„ÉÉ„Éó„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂü∫Ê∫ñ„Å´Ê§úÁ¥¢\n5. „Éâ„Ç≠„É•„É°„É≥„Éà„Éá„Ç£„É¨„ÇØ„Éà„É™„ÇíÂü∫Ê∫ñ„Å´Ê§úÁ¥¢\n\n„Åì„Çå„Å´„Çà„Çä„ÄÅÂçò„Å´„ÄåREADME.md„Äç„ÅÆ„Çà„ÅÜ„Å™„Éï„Ç°„Ç§„É´Âêç„Å†„Åë„ÇíÊåáÂÆö„Åó„Å¶„ÇÇ„ÄÅ„ÅÑ„Åè„Å§„Åã„ÅÆ‰∏ÄËà¨ÁöÑ„Å™„Éá„Ç£„É¨„ÇØ„Éà„É™„ÅßËá™ÂãïÁöÑ„Å´Ê§úÁ¥¢„Åó„ÄÅ„Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Å£„ÅüÂ†¥Âêà„ÅØ„Åù„Çå„Çí‰ΩøÁî®„Åó„Åæ„Åô„ÄÇ„Åæ„Åü„ÄÅWSLÁí∞Â¢É„ÇÑGit Bash„Å™„Å©„Åã„ÇâÂèñÂæó„Åó„Åü„Éë„ÇπÔºà`/c/Users/...`ÂΩ¢ÂºèÔºâ„ÇÇ„ÄÅWindowsÁí∞Â¢É„Åß„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®„Åß„Åç„Åæ„Åô„ÄÇ\n\n## ÂÜÖÈÉ®Âãï‰Ωú„Å´„Å§„ÅÑ„Å¶\n\n„Åì„ÅÆ„ÉÑ„Éº„É´„ÅØ„ÄÅÊó•Êú¨Ë™û„ÅÆÂçòË™ûÊï∞„Ç´„Ç¶„É≥„Éà„Å´„Äåkuromoji.js„Äç„Å®„ÅÑ„ÅÜÂΩ¢ÊÖãÁ¥†Ëß£Êûê„É©„Ç§„Éñ„É©„É™„Çí‰ΩøÁî®„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇÂΩ¢ÊÖãÁ¥†Ëß£Êûê„ÅØËá™ÁÑ∂Ë®ÄË™ûÂá¶ÁêÜ„ÅÆÂü∫Êú¨ÁöÑ„Å™Âá¶ÁêÜ„Åß„ÄÅÊñáÁ´†„ÇíÊÑèÂë≥„ÇíÊåÅ„Å§ÊúÄÂ∞èÂçò‰ΩçÔºàÂΩ¢ÊÖãÁ¥†Ôºâ„Å´ÂàÜÂâ≤„Åó„Åæ„Åô„ÄÇ\n\nÂΩ¢ÊÖãÁ¥†Ëß£Êûê„ÅÆÂá¶ÁêÜ„ÅØÂàùÊúüÂåñ„Å´ÊôÇÈñì„Åå„Åã„Åã„Çã„Åì„Å®„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇÁâπ„Å´„ÄÅËæûÊõ∏„Éá„Éº„Çø„ÇíË™≠„ÅøËæº„ÇÄÂøÖË¶Å„Åå„ÅÇ„Çã„Åü„ÇÅ„ÄÅÂàùÂõûÂÆüË°åÊôÇ„Å´Â∞ë„ÄÖÊôÇÈñì„Åå„Åã„Åã„ÇãÂ†¥Âêà„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ„Çµ„Éº„Éê„ÉºËµ∑ÂãïÊôÇ„Å´ÂΩ¢ÊÖãÁ¥†Ëß£ÊûêÂô®„ÅÆÂàùÊúüÂåñ„ÇíË°å„ÅÜ„Åì„Å®„Åß„ÄÅ„ÉÑ„Éº„É´ÂÆüË°åÊôÇ„ÅÆÈÅÖÂª∂„ÇíÊúÄÂ∞èÈôê„Å´Êäë„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇ\n\n### Ë®ÄË™ûÁöÑÁâπÂæ¥„ÅÆÂàÜÊûê„Å´„Å§„ÅÑ„Å¶\n\n„Äåanalyze_text„Äç„Å®„Äåanalyze_file„Äç„ÉÑ„Éº„É´„ÅØ„ÄÅÂΩ¢ÊÖãÁ¥†Ëß£Êûê„ÅÆÁµêÊûú„Å´Âü∫„Å•„ÅÑ„Å¶„ÄÅ„ÉÜ„Ç≠„Çπ„Éà„ÅÆÊßò„ÄÖ„Å™Ë®ÄË™ûÁöÑÁâπÂæ¥„ÇíË®àÁÆó„Åó„Åæ„Åô„ÄÇ„Åì„Çå„Çâ„Å´„ÅØ‰ª•‰∏ã„ÅÆ„Çà„ÅÜ„Å™ÊåáÊ®ô„ÅåÂê´„Åæ„Çå„Åæ„ÅôÔºö\n\n- **Âπ≥ÂùáÊñáÈï∑**: ‰∏ÄÊñá„ÅÇ„Åü„Çä„ÅÆÂπ≥ÂùáÊñáÂ≠óÊï∞„ÄÇ„Åì„ÅÆÂÄ§„ÅåÂ§ß„Åç„ÅÑ„Åª„Å©„ÄÅË™≠„Åø„Å´„Åè„ÅÑÊñáÁ´†„Åß„ÅÇ„ÇãÂèØËÉΩÊÄß„Åå„ÅÇ„Çä„Åæ„Åô„ÄÇ\n- **Êñá„ÅÇ„Åü„Çä„ÅÆÂΩ¢ÊÖãÁ¥†Êï∞**: ‰∏ÄÊñá„ÅÇ„Åü„Çä„ÅÆÂπ≥ÂùáÂΩ¢ÊÖãÁ¥†Êï∞„ÄÇÊñá„ÅÆÂØÜÂ∫¶„ÇÑÊßãÊñá„ÅÆË§áÈõë„Åï„ÇíË°®„Åó„Åæ„Åô„ÄÇ\n- **ÂìÅË©û„ÅÆÂâ≤Âêà**: ÂêçË©û„ÉªÂãïË©û„ÉªÂΩ¢ÂÆπË©û„Å™„Å©„ÅÆÂìÅË©û„Åå„ÉÜ„Ç≠„Çπ„Éà‰∏≠„Åß„Å©„ÅÆ„Çà„ÅÜ„Å™Ââ≤Âêà„Åß‰Ωø„Çè„Çå„Å¶„ÅÑ„Çã„Åã„ÇíÁ§∫„Åó„Åæ„Åô„ÄÇ\n- **Âä©Ë©û„ÅÆÂâ≤Âêà**: ÁâπÂÆö„ÅÆÂä©Ë©û„Åå„Å©„ÅÆ„Çà„ÅÜ„Å™È†ªÂ∫¶„Åß‰Ωø„Çè„Çå„Å¶„ÅÑ„Çã„Åã„ÇíÁ§∫„Åó„ÄÅÊñá„ÅÆÊßãÈÄ†„ÇÑÊµÅ„Çå„ÇíÂàÜÊûê„Åó„Åæ„Åô„ÄÇ\n- **ÊñáÂ≠óÁ®Æ„ÅÆÂâ≤Âêà**: „Å≤„Çâ„Åå„Å™„Éª„Ç´„Çø„Ç´„Éä„ÉªÊº¢Â≠ó„ÉªËã±Êï∞Â≠ó„ÅÆÊßãÊàêÊØîÁéá„ÇíÁ§∫„Åó„Åæ„Åô„ÄÇ\n- **Ë™ûÂΩô„ÅÆÂ§öÊßòÊÄß**: Áï∞„Å™„Å£„ÅüÂçòË™ûÊï∞„Å®Á∑èÂçòË™ûÊï∞„ÅÆÊØîÁéáÔºà„Çø„Ç§„Éó/„Éà„Éº„ÇØ„É≥ÊØîÔºâ„ÇíÁ§∫„Åó„ÄÅË™ûÂΩô„ÅÆË±ä„Åã„Åï„ÇíË®àÊ∏¨„Åó„Åæ„Åô„ÄÇ\n- **„Ç´„Çø„Ç´„ÉäË™û„ÅÆÂâ≤Âêà**: „Ç´„Çø„Ç´„ÉäË™û„ÅÆ‰ΩøÁî®È†ªÂ∫¶„ÇíÁ§∫„Åó„ÄÅÂ§ñÊù•Ë™û„ÇÑÂ∞ÇÈñÄÁî®Ë™û„ÅÆÂ§ö„Åï„ÄÅÊñá‰Ωì„ÅÆ„Ç´„Ç∏„É•„Ç¢„É´„Åï„ÇíÂèçÊò†„Åó„Åæ„Åô„ÄÇ\n- **Êï¨Ë™û„ÅÆÈ†ªÂ∫¶**: Êï¨Ë™ûË°®Áèæ„ÅÆ‰ΩøÁî®È†ªÂ∫¶„ÇíÁ§∫„Åó„ÄÅÊñáÁ´†„ÅÆ‰∏ÅÂØß„Åï„ÇÑ„Éï„Ç©„Éº„Éû„É´Â∫¶„ÇíÊ∏¨ÂÆö„Åó„Åæ„Åô„ÄÇ\n- **Âè•Ë™≠ÁÇπ„ÅÆÂπ≥ÂùáÊï∞**: Êñá„ÅÇ„Åü„Çä„ÅÆÂè•Ë™≠ÁÇπ„ÅÆÂπ≥ÂùáÊï∞„ÇíÁ§∫„Åó„ÄÅÊñá„ÅÆÂå∫Âàá„Çä„ÇÑË™≠„Åø„ÇÑ„Åô„Åï„Å´Èñ¢„Åô„ÇãÊåáÊ®ô„ÇíÊèê‰æõ„Åó„Åæ„Åô„ÄÇ\n\n„Åì„Çå„Çâ„ÅÆÊåáÊ®ô„ÇíÁµÑ„ÅøÂêà„Çè„Åõ„Çã„Åì„Å®„Åß„ÄÅ„ÉÜ„Ç≠„Çπ„Éà„ÅÆÁâπÊÄß„ÇíÂ§öËßíÁöÑ„Å´ÂàÜÊûê„Åó„ÄÅÊñá‰Ωì„ÇÑË™≠„Åø„ÇÑ„Åô„Åï„ÄÅÂ∞ÇÈñÄÊÄß„Å™„Å©„ÇíË©ï‰æ°„Åô„Çã„Åì„Å®„Åå„Åß„Åç„Åæ„Åô„ÄÇ\n\n## „É©„Ç§„Çª„É≥„Çπ\n\n„Åì„ÅÆMCP„Çµ„Éº„Éê„Éº„ÅØMIT„É©„Ç§„Çª„É≥„Çπ„ÅÆ‰∏ã„ÅßÊèê‰æõ„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åì„Çå„ÅØ„ÄÅMIT„É©„Ç§„Çª„É≥„Çπ„ÅÆÊù°‰ª∂„Å´Âæì„Å£„Å¶„ÄÅ„ÇΩ„Éï„Éà„Ç¶„Çß„Ç¢„ÇíËá™Áî±„Å´‰ΩøÁî®„ÄÅÂ§âÊõ¥„ÄÅÈÖçÂ∏É„Åß„Åç„Çã„Åì„Å®„ÇíÊÑèÂë≥„Åó„Åæ„Åô„ÄÇË©≥Á¥∞„Å´„Å§„ÅÑ„Å¶„ÅØ„ÄÅ„Éó„É≠„Ç∏„Çß„ÇØ„Éà„É™„Éù„Ç∏„Éà„É™„ÅÆLICENSE„Éï„Ç°„Ç§„É´„Çí„ÅîË¶ß„Åè„Å†„Åï„ÅÑ„ÄÇ\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "japanesetextanalyzer",
        "japanese",
        "texts",
        "mcp japanesetextanalyzer",
        "japanesetextanalyzer analyzes",
        "analyzes japanese"
      ],
      "category": "language-translation"
    },
    "TanvirHafiz--Medical-report-analyzer": {
      "owner": "TanvirHafiz",
      "name": "Medical-report-analyzer",
      "url": "https://github.com/TanvirHafiz/Medical-report-analyzer",
      "imageUrl": "/freedevtools/mcp/pfp/TanvirHafiz.webp",
      "description": "Analyze medical reports and symptoms to gain health insights and suggestions, providing detailed medicine information tailored to individual needs with bilingual support in English and Bengali.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-01T11:09:14Z",
      "readme_content": "# Medical Report Analyzer\n\nA web application that provides medical report analysis, symptoms analysis, and medicine information using AI. The application supports both English and Bengali (‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ) languages.\n\n## Features\n\n1. **Medical Report Analysis**\n   - Upload medical reports (JPG, PDF)\n   - Extract and analyze test results\n   - Get health insights and suggestions\n\n2. **Symptoms Analysis**\n   - Describe symptoms in detail\n   - Get potential conditions and urgency level\n   - Receive immediate steps and precautions\n\n3. **Medicine Information**\n   - Get detailed medicine analysis\n   - View usage, side effects, and precautions\n   - Personalized information based on age and gender\n   - Dosage schedule analysis\n\n4. **Bilingual Support**\n   - Toggle between English and Bengali\n   - Instant translation of analysis results\n\n## Technologies Used\n\n- Python/Flask (Backend)\n- JavaScript/HTML/CSS (Frontend)\n- Tailwind CSS (Styling)\n- Ollama with deepseek-r1:14b model (AI Analysis)\n- Tesseract OCR (Text Extraction)\n- Google Translate API (Translation)\n\n## Prerequisites\n\n1. Python 3.8 or higher\n2. Tesseract OCR installed\n3. Ollama with deepseek-r1:14b model\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd medical-report-analyzer\n```\n\n2. Create a virtual environment:\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n4. Install Tesseract OCR:\n   - Windows: Download and install from [Tesseract GitHub](https://github.com/UB-Mannheim/tesseract/wiki)\n   - Linux: `sudo apt-get install tesseract-ocr`\n   - Mac: `brew install tesseract`\n\n5. Install and run Ollama:\n   - Follow instructions at [Ollama](https://ollama.ai)\n   - Pull the model: `ollama pull deepseek-r1:14b`\n\n## Configuration\n\n1. Set Tesseract path in `app.py`:\n```python\npytesseract.pytesseract.tesseract_cmd = r'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'  # Adjust path as needed\n```\n\n2. Ensure Ollama is running with the deepseek-r1:14b model:\n```bash\nollama run deepseek-r1:14b\n```\n\n## Running the Application\n\n1. Start the Flask server:\n```bash\npython app.py\n```\n\n2. Open a web browser and navigate to:\n```\nhttp://localhost:5000\n```\n\n## Usage\n\n1. **Analyzing Medical Reports**\n   - Click \"Report Analysis\" tab\n   - Upload JPG or PDF file\n   - View analysis results\n   - Optionally translate to Bengali\n\n2. **Analyzing Symptoms**\n   - Click \"Symptoms Analysis\" tab\n   - Describe symptoms in detail\n   - Click \"Analyze Symptoms\"\n   - View analysis and recommendations\n\n3. **Getting Medicine Information**\n   - Click \"Medicine Info\" tab\n   - Enter patient age and gender\n   - Input medicine name and dosage schedule\n   - Click \"Analyze Medicine\"\n   - View detailed medicine analysis\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tanvirhafiz",
        "bengali",
        "bilingual",
        "tanvirhafiz medical",
        "translation tanvirhafiz",
        "medical reports"
      ],
      "category": "language-translation"
    },
    "Text2Go--ai-humanizer-mcp-server": {
      "owner": "Text2Go",
      "name": "ai-humanizer-mcp-server",
      "url": "https://github.com/Text2Go/ai-humanizer-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Text2Go.webp",
      "description": "Refines AI-generated content to improve its naturalness and human-like quality while incorporating advanced AI detection and text enhancement techniques.",
      "stars": 35,
      "forks": 11,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:32:03Z",
      "readme_content": "# AI Humanize MCP Server\n---\nA powerful Model Context Protocol (MCP) server that helps refine AI-generated content to sound more natural and human-like. Built with advanced AI detection and text enhancement capabilities.\n\nPowered by [text2go](https://text2go.ai).\n\n---\n# Table of Contents\n1. [Key Features](#-key-features)\n2. [Screenshot](#screenshot)\n3. [Prerequisites](#prerequisites)\n4. [Installation](#installation)\n5. [Usage](#-usage)\n   - [AI Text Detection](#ai-text-detection)\n\n---\n## Screenshot\n\n\n\n## ‚ú® Key Features\n\n- ü§ñ **AI Detection** - Accurately identify AI-generated content\n- üë§ **Natural Language Enhancement** - Transform robotic text into natural human-like writing\n- ‚≠ê **Grammar Perfection** - Ensure flawless grammatical accuracy\n- üìã **Readability Optimization** - Improve text flow and comprehension\n- üìè **Length Control** - Adjust content length while preserving meaning\n- ‚öñÔ∏è **Term Preservation** - Maintain specific terminology and key phrases\n\n\n## Prerequisites\n- node version >= 16\n- Claude Desktop latest version\n\n## Installation\n### By npx\n1. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Navigate to Settings ‚Üí Developer ‚Üí Edit Config\n   - Add the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"ai-humanizer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"ai-humanizer-mcp-server\"]\n    }\n  }\n}\n```\n2. Restart Claude Desktop to apply changes\n\n### By Source Code\n1. Clone this repository\n2. Install Dependencies\n```bash\nnpm install\n```\n3. Build the project\n```bash\nnpm run build\n```\n4. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Navigate to Settings ‚Üí Developer ‚Üí Edit Config\n   - Add the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"ai-humanizer\": {\n      \"command\": \"node\",\n      \"args\": [\"<YOUR_PROJECT_PATH>/build/index.js\"]\n    }\n  }\n}\n```\n5. Restart Claude Desktop to apply changes\n\n\n## üí° Usage\n\n### AI Text Detection\n\nTo check if text is AI-generated, simply ask Claude:\n\n```text\nIs this text ai-generated:  In a fast-paced world, where technology is advancing at an exponential rate, it is crucial for businesses to adapt to new trends and keep up with the changing demands of the market.\n```\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=Text2Go/ai-humanizer-mcp-server&type=Date)](https://star-history.com/#Text2Go/ai-humanizer-mcp-server&Date)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "text2go",
        "ai",
        "text",
        "text2go ai",
        "text enhancement",
        "translation text2go"
      ],
      "category": "language-translation"
    },
    "brianshin22--youtube-translate-mcp": {
      "owner": "brianshin22",
      "name": "youtube-translate-mcp",
      "url": "https://github.com/brianshin22/youtube-translate-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/brianshin22.webp",
      "description": "Interfacing with the YouTube Translate API to obtain transcripts, translations, subtitles, and summaries of YouTube videos. Enables searching video transcripts for specific keywords and phrases, and directly processes video content to enhance understanding.",
      "stars": 3,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-17T02:49:03Z",
      "readme_content": "# YouTube Translate MCP\n[![smithery badge](https://smithery.ai/badge/@brianshin22/youtube-translate-mcp)](https://smithery.ai/server/@brianshin22/youtube-translate-mcp)\n\nA [Model Context Protocol (MCP)](https://github.com/anthropics/anthropic-cookbook/tree/main/model_composition_protocol) server for accessing the YouTube Translate API, allowing you to obtain transcripts, translations, and summaries of YouTube videos.\n\n## Features\n\n- Get transcripts of YouTube videos\n- Translate transcripts to different languages\n- Generate subtitles in SRT or VTT format\n- Create summaries of video content\n- Search for specific content within videos\n\n## Installation\n\n### Installing via Smithery\n\nTo install youtube-translate-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@brianshin22/youtube-translate-mcp):\n\n```bash\nnpx -y @smithery/cli install @brianshin22/youtube-translate-mcp --client claude\n```\n\n### Installing Manually\n\nThis package requires Python 3.12 or higher:\n\n```bash\n# Using uv (recommended)\nuv pip install youtube-translate-mcp\n\n# Using pip\npip install youtube-translate-mcp\n```\n\nOr install from source:\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/youtube-translate-mcp.git\ncd youtube-translate-mcp\n\n# Using uv (recommended)\nuv pip install -e .\n\n# Using pip\npip install -e .\n```\n\n## Usage\n\nTo run the server:\n\n```bash\n# Using stdio transport (default)\nYOUTUBE_TRANSLATE_API_KEY=your_api_key youtube-translate-mcp\n\n# Using SSE transport\nYOUTUBE_TRANSLATE_API_KEY=your_api_key youtube-translate-mcp --transport sse --port 8000\n```\n\n## Docker\n\nYou can also run the server using Docker:\n\n```bash\n# Build the Docker image\ndocker build -t youtube-translate-mcp .\n\n# Run with stdio transport\ndocker run -e YOUTUBE_TRANSLATE_API_KEY=your_api_key youtube-translate-mcp\n\n# Run with SSE transport\ndocker run -p 8000:8000 -e YOUTUBE_TRANSLATE_API_KEY=your_api_key youtube-translate-mcp --transport sse\n```\n\n## Environment Variables\n\n- `YOUTUBE_TRANSLATE_API_KEY`: Required. Your API key for accessing the YouTube Translate API.\n\n## Deployment with Smithery\n\nThis package includes a `smithery.yaml` file for easy deployment with [Smithery](https://smithery.anthropic.com). \n\nTo deploy, set the `YOUTUBE_TRANSLATE_API_KEY` configuration parameter to your YouTube Translate API key.\n\n## Development\n\n### Prerequisites\n\n- Python 3.12+\n- Docker (optional)\n\n### Setup\n\n```bash\n# Create and activate a virtual environment using uv (recommended)\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies using uv\nuv pip install -e .\n\n# Alternatively, with standard tools\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -e .\n```\n\n### Testing with Claude Desktop\n\nTo test with Claude Desktop (macOS/Windows only), you'll need to add your server to the Claude Desktop configuration file located at `~/Library/Application Support/Claude/claude_desktop_config.json`.\n\n#### Method 1: Local Development\n\nUse this method if you want to test your local development version:\n\n```json\n{\n    \"mcpServers\": {\n        \"youtube-translate\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/ABSOLUTE/PATH/TO/youtube-translate-mcp\",\n                \"run\",\n                \"-m\", \"youtube_translate_mcp\"\n            ],\n            \"env\": {\n              \"YOUTUBE_TRANSLATE_API_KEY\": \"YOUR_API_KEY\"\n            }\n        }\n    }\n}\n```\n\nMake sure to replace `/ABSOLUTE/PATH/TO/youtube-translate-mcp` with the actual path to your project directory.\n\n#### Method 2: Docker-based Testing\n\nIf you prefer to test using Docker (recommended for more reproducible testing):\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube-translate\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"YOUTUBE_TRANSLATE_API_KEY\",\n        \"youtube-translate-mcp\"\n      ],\n      \"env\": {\n        \"YOUTUBE_TRANSLATE_API_KEY\": \"YOUR_API_KEY\"\n      }\n    }\n  }\n}\n```\n\nReplace `YOUR_API_KEY` with your actual YouTube Translate API key.\n\nFor more information on using MCP servers with Claude Desktop, see the [MCP documentation](https://modelcontextprotocol.io/quickstart/server).\n\n### Debugging\n - The normal MCP Inspector has a built in timeout for MCP tool calls, which is generally too short for these video processing calls (as of March 13, 2025). Better to use Claude Desktop and look at the MCP logs from Claude at ~/Library/Logs/Claude/mcp-server-{asfasf}.log.\n - Can do tail -f {log-file}.log to follow as you interact with Claude.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "translations",
        "translation",
        "translate",
        "youtube translate",
        "translations subtitles",
        "language translation"
      ],
      "category": "language-translation"
    },
    "davidrojasliblab--test": {
      "owner": "davidrojasliblab",
      "name": "test",
      "url": "https://github.com/davidrojasliblab/test",
      "imageUrl": "/freedevtools/mcp/pfp/davidrojasliblab.webp",
      "description": "Integrate with various translation APIs to convert text into unique languages such as Morse code, Braille, Pirate Speak, and others. Provides an easy-to-use SDK for adding fun and diverse translation capabilities to applications.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-16T21:37:33Z",
      "readme_content": "# Liblab TypeScript SDK 1.0.0\n\nWelcome to the Liblab SDK documentation. This guide will help you get started with integrating and using the Liblab SDK in your project.\n\n[![This SDK was generated by liblab](https://public-liblab-readme-assets.s3.us-east-1.amazonaws.com/built-by-liblab-icon.svg)](https://liblab.com/?utm_source=readme)\n\n## Versions\n\n- API version: `1.0.0`\n- SDK version: `1.0.0`\n\n## About the API\n\nFuntranslations API gives access to the full set of translations available at funtranslations.com so that you can integrate them in your workflow or an app. [Click here to get details and subscribe](http://funtranslations.com/api) . Here are the individual API links:\n\n## Morse code API\n\nMorse code conversion API on the cloud. Translate to and from Morse Code.[Click here to subscribe](http://funtranslations.com/api/morse)\n\n## Braille API\n\nBraille conversion API on the cloud. Translate to Braille and get Braille results suitable for many display types.[Click here to subscribe](http://funtranslations.com/api/braille)\n\n## Starwars Translation API\n\nEver wonder how to talk like Yoda? Well, use our API and let your APP/webpage speak like Yoda too.[Click here to subscribe](http://funtranslations.com/api/yoda)\n\nSith Translator API. [Click here to subscribe](http://funtranslations.com/api/sith)\n\nCheunh Translator API. [Click here to subscribe](http://funtranslations.com/api/cheunh)\n\nHuttese Translator API. [Click here to subscribe](http://funtranslations.com/api/huttese)\n\nMandalorian Translator API. [Click here to subscribe](http://funtranslations.com/api/mandalorian)\n\nGungan Translator API. [Click here to subscribe](http://funtranslations.com/api/gungan)\n\n## Pirate Speak Translation API\n\nAhoy, matey. Let's get those land lubbers speak our tounge too! Our evergreen pirate speak tranlsator API.[Click here to subscribe](http://funtranslations.com/api/pirate)\n\n## Valley Speak Translation API\n\nOur throwback Valspeak translations API.[Click here to subscribe](http://funtranslations.com/api/valspeak)\n\n## Minion Speak Translation API\n\nOur evil master following minion speak translations API.[Click here to subscribe](http://funtranslations.com/api/minion)\n\n## Table of Contents\n\n- [Setup & Configuration](#setup--configuration)\n  - [Supported Language Versions](#supported-language-versions)\n  - [Installation](#installation)\n- [Authentication](#authentication)\n  - [Access Token Authentication](#access-token-authentication)\n- [Setting a Custom Timeout](#setting-a-custom-timeout)\n- [Sample Usage](#sample-usage)\n- [Services](#services)\n- [Models](#models)\n\n# Setup & Configuration\n\n## Supported Language Versions\n\nThis SDK is compatible with the following versions: `TypeScript >= 4.8.4`\n\n## Installation\n\nTo get started with the SDK, we recommend installing using `npm`:\n\n```bash\nnpm install liblab\n```\n\n## Authentication\n\n### Access Token Authentication\n\nThe Liblab API uses an Access Token for authentication.\n\nThis token must be provided to authenticate your requests to the API.\n\n#### Setting the Access Token\n\nWhen you initialize the SDK, you can set the access token as follows:\n\n```ts\nconst sdk = new Liblab({ token: 'YOUR_TOKEN' });\n```\n\nIf you need to set or update the access token after initializing the SDK, you can use:\n\n```ts\nconst sdk = new Liblab();\nsdk.token = 'YOUR_TOKEN';\n```\n\n## Setting a Custom Timeout\n\nYou can set a custom timeout for the SDK's HTTP requests as follows:\n\n```ts\nconst liblab = new Liblab({ timeout: 10000 });\n```\n\n# Sample Usage\n\nBelow is a comprehensive example demonstrating how to authenticate and call a simple endpoint:\n\n```ts\nimport { Liblab } from 'liblab';\n\n(async () => {\n  const liblab = new Liblab({\n    token: 'YOUR_TOKEN',\n  });\n\n  const { data } = await liblab.morse.getTranslateMorse({\n    text: 'text',\n  });\n\n  console.log(data);\n})();\n```\n\n## Services\n\nThe SDK provides various services to interact with the API.\n\n<details> \n<summary>Below is a list of all available services with links to their detailed documentation:</summary>\n\n| Name                                                                   |\n| :--------------------------------------------------------------------- |\n| [MorseService](documentation/services/MorseService.md)                 |\n| [BrailleService](documentation/services/BrailleService.md)             |\n| [StarwarsService](documentation/services/StarwarsService.md)           |\n| [StartrekService](documentation/services/StartrekService.md)           |\n| [ElvishService](documentation/services/ElvishService.md)               |\n| [CharactersService](documentation/services/CharactersService.md)       |\n| [DialectService](documentation/services/DialectService.md)             |\n| [PigLatinService](documentation/services/PigLatinService.md)           |\n| [GameOfThronesService](documentation/services/GameOfThronesService.md) |\n| [EnglishService](documentation/services/EnglishService.md)             |\n| [InternetFadService](documentation/services/InternetFadService.md)     |\n\n</details>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "davidrojasliblab",
        "translation",
        "languages",
        "translation davidrojasliblab",
        "translation apis",
        "davidrojasliblab test"
      ],
      "category": "language-translation"
    },
    "edgardamasceno-dev--ldoce-mcp-server": {
      "owner": "edgardamasceno-dev",
      "name": "ldoce-mcp-server",
      "url": "https://github.com/edgardamasceno-dev/ldoce-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/edgardamasceno-dev.webp",
      "description": "Extracts and structures data from the Longman Dictionary for specified words, providing detailed linguistic information in a standardized JSON format. It retrieves data such as definitions, examples, and origins by connecting to the dictionary's web page.",
      "stars": 3,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-20T11:32:43Z",
      "readme_content": "# Ldoce MCP Server\n[![smithery badge](https://smithery.ai/badge/@edgardamasceno-dev/ldoce-mcp-server)](https://smithery.ai/server/@edgardamasceno-dev/ldoce-mcp-server)\n\n\nEste √© um MCP server desenvolvido em Node.js e TypeScript que consome a p√°gina do Longman Dictionary para uma determinada palavra e retorna os dados extra√≠dos no formato JSON padronizado para uso por agentes de IA.\n\n## Descri√ß√£o\n\nO servidor se conecta √† URL `https://www.ldoceonline.com/dictionary/<word>`, extrai informa√ß√µes como a introdu√ß√£o, t√≥picos relacionados, entradas (verb e noun), corpus examples e origem, e retorna esses dados estruturados em um objeto JSON. O projeto segue os padr√µes do Model Context Protocol (MCP) e utiliza os pacotes Axios e Cheerio para requisi√ß√µes HTTP e parsing de HTML.\n\n## Recursos\n\n- **Extrai informa√ß√µes do Longman Dictionary:**\n  - Introdu√ß√£o e t√≥picos relacionados\n  - Entradas com detalhes de pron√∫ncias, sentidos, exemplos, etc.\n  - Corpus examples\n  - Origem da palavra\n\n- **Utiliza MCP SDK para expor uma ferramenta** que pode ser integrada a clientes MCP, como o Claude Desktop.\n\n## Pr√©-requisitos\n\n- Node.js (vers√£o 16 ou superior)\n- npm\n- Git\n\n## Instala√ß√£o\n\n### Installing via Smithery\n\nTo install Ldoce Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@edgardamasceno-dev/ldoce-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @edgardamasceno-dev/ldoce-mcp-server --client claude\n```\n\n### Manual Installation\n1. Clone o reposit√≥rio:\n   ```bash\n   git clone https://github.com/seuusuario/ldoce-mcp-server.git\n   cd ldoce-mcp-server\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linguistic",
        "ldoce",
        "dictionary",
        "dictionary web",
        "linguistic information",
        "detailed linguistic"
      ],
      "category": "language-translation"
    },
    "meicanhong--translator_extension": {
      "owner": "meicanhong",
      "name": "translator_extension",
      "url": "https://github.com/meicanhong/translator_extension",
      "imageUrl": "/freedevtools/mcp/pfp/meicanhong.webp",
      "description": "Provides seamless translation between Chinese and English with automatic text recognition and results display upon text selection, featuring a minimalist interface and quick toggle functionality.",
      "stars": 4,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-18T13:02:13Z",
      "readme_content": "<p align=\"center\">\n  \n</p>\n\n# ÊûÅÁÆÄÁøªËØë-Ë∞∑Ê≠åÁâà\n\nÁî±‰∫é https://translate.google.cn ËäÇÁÇπÂÖ≥Èó≠ÔºåÊ≠§ÁâàÊú¨Â∞ÜÁøªËØëÊ∫êÊõ¥Êç¢‰∏∫ https://translate.google.comÔºå‰æøËÉΩÁªßÁª≠Ê≠£Â∏∏‰ΩøÁî®„ÄÇ\n\n## ÂäüËÉΩÁâπÁÇπ\n\n- ÂàíËØçÂç≥ËØëÔºöÈÄâ‰∏≠ÊñáÂ≠óÂêéËá™Âä®ÊòæÁ§∫ÁøªËØëÁªìÊûú\n- ‰∏≠Ëã±‰∫íËØëÔºöËá™Âä®ËØÜÂà´‰∏≠Ëã±ÊñáÔºåËøõË°åÁõ∏Â∫îÁøªËØë\n- ÊûÅÁÆÄËÆæËÆ°ÔºöÁïåÈù¢ÁÆÄÊ¥ÅÔºå‰ΩøÁî®Êñπ‰æø\n- Âø´Êç∑ÂºÄÂÖ≥Ôºö‰ΩøÁî® Ctrl+Alt Âø´ÈÄüÂºÄÂêØ/ÂÖ≥Èó≠ÂàíËØçÁøªËØëÂäüËÉΩ\n\n## ÁéØÂ¢ÉË¶ÅÊ±Ç\n\n- Node.js 14.0 Êàñ‰ª•‰∏äÁâàÊú¨\n- npm 6.0 Êàñ‰ª•‰∏äÁâàÊú¨\n- Chrome ÊµèËßàÂô® 88 Êàñ‰ª•‰∏äÁâàÊú¨\n\n## ÂÆâË£Ö‰∏é‰ΩøÁî®\n\n### ÊñπÊ≥ï‰∏ÄÔºöÁõ¥Êé•ÂÆâË£ÖÔºàÊé®ËçêÔºâ\n\n1. ‰∏ãËΩΩÊú¨È°πÁõÆÁöÑ `chrome` ÁõÆÂΩï‰∏ãÁöÑÊâÄÊúâÊñá‰ª∂\n2. ÊâìÂºÄ Chrome ÊµèËßàÂô®ÔºåËÆøÈóÆ `chrome://extensions/`\n3. ÂºÄÂêØÂè≥‰∏äËßíÁöÑ\"ÂºÄÂèëËÄÖÊ®°Âºè\"\n4. ÁÇπÂáª\"Âä†ËΩΩÂ∑≤Ëß£ÂéãÁöÑÊâ©Â±ïÁ®ãÂ∫è\"\n5. ÈÄâÊã©ÂàöÊâç‰∏ãËΩΩÁöÑ `chrome` ÁõÆÂΩï\n\n### ÊñπÊ≥ï‰∫åÔºö‰ªéÊ∫êÁ†ÅÁºñËØëÂÆâË£Ö\n\n1. ÂÖãÈöÜÈ°πÁõÆÂà∞Êú¨Âú∞Ôºö\n   ```bash\n   git clone [È°πÁõÆÂú∞ÂùÄ]\n   cd translator_extension\n   ```\n\n2. ÂÆâË£Ö‰æùËµñÔºö\n   ```bash\n   npm install\n   ```\n\n3. ÁºñËØëÈ°πÁõÆÔºö\n   ```bash\n   npx tsc\n   ```\n\n4. Â§çÂà∂ÂøÖË¶ÅÊñá‰ª∂Ôºö\n   ```bash\n   mkdir -p chrome\n   cp blank.css icon_16.png icon_48.png icon_128.png manifest.json popup.html chrome/\n   ```\n\n5. Âú® Chrome ‰∏≠Âä†ËΩΩÊâ©Â±ïÔºö\n   - ÊâìÂºÄ Chrome ÊµèËßàÂô®ÔºåËÆøÈóÆ `chrome://extensions/`\n   - ÂºÄÂêØÂè≥‰∏äËßíÁöÑ\"ÂºÄÂèëËÄÖÊ®°Âºè\"\n   - ÁÇπÂáª\"Âä†ËΩΩÂ∑≤Ëß£ÂéãÁöÑÊâ©Â±ïÁ®ãÂ∫è\"\n   - ÈÄâÊã©È°πÁõÆ‰∏≠ÁöÑ `chrome` ÁõÆÂΩï\n\n## ‰ΩøÁî®ËØ¥Êòé\n\n1. ÂÆâË£ÖÂÆåÊàêÂêéÔºåÂú® Chrome Â∑•ÂÖ∑Ê†è‰ºöÂá∫Áé∞ÁøªËØëÂõæÊ†á\n2. ÈÄâ‰∏≠‰ªªÊÑèÊñáÂ≠óÔºå‰ºöËá™Âä®ÊòæÁ§∫ÁøªËØëÁªìÊûú\n3. ‰ΩøÁî® Ctrl+Alt Âø´Êç∑ÈîÆÂèØ‰ª•Âø´ÈÄüÂºÄÂêØ/ÂÖ≥Èó≠ÂàíËØçÁøªËØëÂäüËÉΩ\n4. ÁÇπÂáªÂ∑•ÂÖ∑Ê†èÂõæÊ†áÂèØ‰ª•ËøõË°åÊõ¥Â§öËÆæÁΩÆ\n\n## Â∏∏ËßÅÈóÆÈ¢ò\n\n1. Â¶ÇÊûúÊâ©Â±ïÊòæÁ§∫\"Â∑≤ÂÅúÁî®ÔºåÂõ†‰∏∫ÂÆÉÂ∑≤‰∏çÂÜçÂèóÊîØÊåÅ\"ÔºåËØ∑ÊåâÁÖß‰∏äËø∞Ê≠•È™§ÈáçÊñ∞ÂÆâË£ÖÊúÄÊñ∞ÁâàÊú¨\n2. Â¶ÇÊûúÁøªËØëÂäüËÉΩÊó†ÂìçÂ∫îÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúËøûÊé•ÊòØÂê¶Ê≠£Â∏∏\n3. Â¶ÇÊûúÂø´Êç∑ÈîÆÊó†ÊïàÔºåËØ∑Ê£ÄÊü•ÊòØÂê¶‰∏éÂÖ∂‰ªñÊâ©Â±ïÁöÑÂø´Êç∑ÈîÆÂÜ≤Á™Å\n\n## ÊäÄÊúØÊîØÊåÅ\n\nÂ¶ÇÊûúÊÇ®Âú®‰ΩøÁî®ËøáÁ®ã‰∏≠ÈÅáÂà∞‰ªª‰ΩïÈóÆÈ¢òÔºåËØ∑Êèê‰∫§ Issue„ÄÇ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "translator_extension",
        "meicanhong",
        "translation",
        "meicanhong translator_extension",
        "translation meicanhong",
        "translator_extension provides"
      ],
      "category": "language-translation"
    },
    "meowrain--mcp-server-cambridge-dict": {
      "owner": "meowrain",
      "name": "mcp-server-cambridge-dict",
      "url": "https://github.com/meowrain/mcp-server-cambridge-dict",
      "imageUrl": "/freedevtools/mcp/pfp/meowrain.webp",
      "description": "Retrieve word meanings from the Cambridge Dictionary for enhanced AI assistant interaction. Provides quick access to definitions and examples through the MCP protocol.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-07T01:52:15Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/meowrain-mcp-server-cambridge-dict-badge.png)](https://mseep.ai/app/meowrain-mcp-server-cambridge-dict)\n\n# Dictionary Server\n\n[![smithery badge](https://smithery.ai/badge/@meowrain/mcp-server-cambridge-dict)](https://smithery.ai/server/@meowrain/mcp-server-cambridge-dict)\n\nA dictionary server supporting the Model Context Protocol (MCP).\n\nRetrieves word meanings from the Cambridge Dictionary.\n\n## Adding MCP to Command Line\n\nTo integrate the MCP server into your command line, add the following configuration:\n\n```json\n\"mcp-server-cambridge-dict\": {\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"mcp-server-dictionary\"],\n  \"disabled\": false\n}\n```\n\n## Features\n\n- Seamless integration with Claude and other AI assistants via the MCP protocol.\n- Robust dictionary query tools.\n- Retrieves word meanings from the Cambridge Dictionary.\n\n## Development\n\n### Install Dependencies\n\nInstall the required dependencies:\n\n```bash\nnpm install\n```\n\n### Build the Server\n\nBuild the server for production:\n\n```bash\nnpm run build\n```\n\n### Development Mode\n\nEnable auto-rebuild during development:\n\n```bash\nnpm run watch\n```\n\n## Running the Server\n\nStart the MCP server with the following command:\n\n```bash\nnpm run start:mcp\n```\n\n## Testing with MCP Inspector\n\nTo test the server, use the MCP Inspector:\n\n```bash\nnpm run inspector\n```\n\n## MCP Response Specification\n\nThis server adheres to the MCP response specification.\n\n### Tool Response\n\nA successful word query returns the following format:\n\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Word query result (in JSON format)\"\n    }\n  ]\n}\n```\n\n### Error Response\n\nIn case of an error, the response format is:\n\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Error message\"\n    }\n  ],\n  \"isError\": true\n}\n```\n\n## API Documentation\n\n### `lookup_word`\n\nFetches the pronunciation, definition, and example sentences for a word.\n\n#### Parameters\n\n- `word` (string): The word to query.\n\n#### Returns\n\nDetailed information about the word, including pronunciation, definition, and example sentences.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dictionary",
        "dict",
        "ai",
        "ai assistant",
        "dictionary enhanced",
        "meowrain mcp"
      ],
      "category": "language-translation"
    },
    "vionwinnie--jap-vocab-anki-mcp-server": {
      "owner": "vionwinnie",
      "name": "jap-vocab-anki-mcp-server",
      "url": "https://github.com/vionwinnie/jap-vocab-anki-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/vionwinnie.webp",
      "description": "Programmatically interact with Anki decks for Japanese language learning, enabling management of decks and cards, vocabulary imports, and review tracking through a standardized interface.",
      "stars": 3,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-08T07:45:31Z",
      "readme_content": "# Japanese Vocab Anki MCP Server\n\nA Model Context Protocol server implementation for interacting with Anki decks programmatically. This server allows Language Models to interact with Anki through a standardized interface, with special support for Japanese language learning.\n\nThis is vibe-coded with Cursor with Claude 3.5 Sonnet.\n\n## Features\n\n- List available decks\n- View cards in decks\n- Add new cards\n- Review cards with spaced repetition\n- Import Japanese vocabulary with readings and meanings\n- Add sample sentences to Japanese vocabulary cards\n- Track review history and learning progress\n\n## End-to-End Example: Japanese Vocabulary Study with Claude\n\nHere's a complete workflow showing how to use Claude to enhance your Japanese vocabulary cards with sample sentences.\n\n### Step 1: Generate Fill-in-the-Blank Exercises\n\nFirst, ask Claude to create practice exercises using the `study_japanese_vocab_prompt`:\n\n\n\nClaude will look through your recently reviewed vocabulary and create contextual sentences with blanks to test your understanding.\n\n### Step 2: Convert to Sample Sentences\n\nNext, use the `vocab_sentences_json_prompt` to convert these sentences into a structured format:\n\nClaude will transform the sentences into a JSON dictionary mapping each vocabulary word to its sample sentences.\n\n### Step 3: Update Anki Cards\n\nFinally, use the `update_notes_with_sentences` tool to add these sentences to your Anki cards:\n\n\n\nThe sentences will be added to the reading field of each vocabulary card, providing more context for your studies.\n\n### Results in Anki\n\nAfter the update, your cards will include the new sample sentences:\n\n\n\nThis workflow helps you:\n1. Practice vocabulary in context through fill-in-the-blank exercises\n2. Add natural example sentences to your cards\n3. Build a more comprehensive understanding of each word's usage\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/vionwinnie/jap-vocab-anki-mcp-server.git\ncd jap-vocab-anki-mcp-server\n```\n\n## Usage\n\n1. Make sure Anki is not running (to avoid database locks)\n\n2. Set the path to your Anki collection (optional):\n```bash\nexport ANKI_COLLECTION_PATH=\"/path/to/your/collection.anki2\"\n```\n\n3. Run the server:\n```bash\npython -m anki_mcp.server\n```\n\n## Available Resources\n\n- `anki://decks` - List all available Anki decks\n- `anki://deck/{deck_name}/cards` - List all cards in a specific deck\n- `anki://recent/reviewed` - View cards reviewed in the last 24 hours\n- `anki://recent/learned` - View cards learned (graduated from new) in the last 24 hours\n\n## Available Tools\n\n### Basic Card Management\n- `add_card(deck_name: str, front: str, back: str)` - Add a new card to a deck\n- `review_card(card_id: int, ease: int)` - Review a card with a specific ease (1-4)\n- `get_card_history(card_id: int)` - Get detailed review history for a specific card\n\n### Japanese Vocabulary Features\n- `import_japanese_vocab(csv_path: str, deck_name: str, tags: str = None)` - Import Japanese vocabulary from CSV\n- `update_notes_with_sentences(vocab_sentences: Dict[str, List[str]], deck_name: str = \"Try! N3 Vocab\")` - Add sample sentences to vocabulary notes\n\n### Review History\n- `get_deck_review_history(deck_name: str)` - Get review history for all cards in a deck within the past 24 hours\n\n## Available Prompts\n\n- `create_deck_prompt(deck_name: str)` - Get help creating a new deck\n- `review_history_prompt()` - Get help analyzing review history\n- `study_japanese_vocab_prompt()` - Get help with Japanese vocabulary study\n- `vocab_sentences_json_prompt()` - Generate JSON dictionary mapping vocab to sample sentences\n\n## Japanese Note Type Requirements\n\nThe server expects a note type called \"Japanese (recognition)\" with the following fields:\n1. Expression (Japanese word)\n2. Meaning (English meaning)\n3. Reading (with furigana and sample sentences)\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anki",
        "japanese",
        "jap",
        "decks japanese",
        "anki decks",
        "interact anki"
      ],
      "category": "language-translation"
    },
    "watchdealer-pavel--deepl-mcp-server": {
      "owner": "watchdealer-pavel",
      "name": "deepl-mcp-server",
      "url": "https://github.com/watchdealer-pavel/deepl-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/watchdealer-pavel.webp",
      "description": "Translate text between multiple languages using the DeepL API, providing real-time translation capabilities and access to a comprehensive list of supported languages.",
      "stars": 3,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-16T09:15:34Z",
      "readme_content": "# DeepL MCP Server\n\nAn MCP (Model Context Protocol) server providing DeepL translation capabilities.\n\n## Features\n\nThis server exposes the following tools via MCP:\n\n*   **`translate_text`**: Translates one or more text strings between supported languages using the DeepL API.\n*   **`list_languages`**: Retrieves the list of languages supported by the DeepL API (either source or target languages).\n\n## Prerequisites\n\n*   **Node.js and npm/yarn:** Required to install dependencies and run the server.\n*   **DeepL API Key:** You need an API key from DeepL. Both Free and Pro plans provide API access. Sign up or learn more at [https://www.deepl.com/pro-api](https://www.deepl.com/pro-api).\n\n## Installation\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/watchdealer-pavel/deepl-mcp-server.git\n    cd deepl-mcp-server\n    ```\n\n2.  **Install dependencies:**\n    ```bash\n    npm install\n    # or\n    # yarn install\n    ```\n\n3.  **Build the server:**\n    ```bash\n    npm run build\n    ```\n    This command compiles the TypeScript source code into JavaScript, placing the output in the `build/` directory (specifically `build/index.js`).\n\n## Configuration\n\nThe server requires your DeepL API key to be provided via the `DEEPL_API_KEY` environment variable. You need to configure your MCP client (like Cline/Roo Code or the Claude Desktop App) to run this server and pass the environment variable.\n\n**Example Configuration:**\n\nBelow are examples for common MCP clients. **Remember to replace `/path/to/your/deepl-mcp-server/build/index.js` with the actual absolute path to the compiled server file on your system, and `YOUR_DEEPL_API_KEY` with your real DeepL API key.**\n\n### Cline / Roo Code (VS Code Extension)\n\n1.  Open your VS Code settings for MCP servers. On macOS, this is typically located at:\n    `~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/mcp_settings.json`\n    *(Note: The exact path might vary based on your operating system and VS Code installation type (e.g., Insiders).)*\n\n2.  Add the following configuration block under the `mcpServers` key:\n\n    ```json\n    \"deepl-translator\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/your/deepl-mcp-server/build/index.js\"], // <-- IMPORTANT: Replace with the ACTUAL absolute path to build/index.js\n      \"env\": {\n        \"DEEPL_API_KEY\": \"YOUR_DEEPL_API_KEY\" // <-- IMPORTANT: Replace with your DeepL API Key\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n    ```\n\n### Claude Desktop App\n\n1.  Open the Claude Desktop App configuration file. On macOS, this is typically located at:\n    `~/Library/Application Support/Claude/claude_desktop_config.json`\n    *(Note: The exact path might vary based on your operating system.)*\n\n2.  Add the following configuration block under the `mcpServers` key:\n\n    ```json\n    \"deepl-translator\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/your/deepl-mcp-server/build/index.js\"], // <-- IMPORTANT: Replace with the ACTUAL absolute path to build/index.js\n      \"env\": {\n        \"DEEPL_API_KEY\": \"YOUR_DEEPL_API_KEY\" // <-- IMPORTANT: Replace with your DeepL API Key\n      },\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n    ```\n\n## Usage\n\nOnce configured, you can invoke the server's tools from your AI assistant using the `use_mcp_tool` command/tool.\n\n### `list_languages` Example\n\n```xml\n<use_mcp_tool>\n  <server_name>deepl-translator</server_name>\n  <tool_name>list_languages</tool_name>\n  <arguments>\n    {\n      \"type\": \"target\" // Optional: \"source\" or \"target\". Defaults to listing all if omitted.\n    }\n  </arguments>\n</use_mcp_tool>\n```\n\n### `translate_text` Example\n\n```xml\n<use_mcp_tool>\n  <server_name>deepl-translator</server_name>\n  <tool_name>translate_text</tool_name>\n  <arguments>\n    {\n      \"text\": [\"Hello world\", \"How are you?\"], // Required: An array of strings to translate\n      \"target_lang\": \"DE\", // Required: Target language code (e.g., DE, FR, ES)\n      \"source_lang\": \"EN\" // Optional: Source language code. DeepL will auto-detect if omitted.\n    }\n  </arguments>\n</use_mcp_tool>\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "translation",
        "translate",
        "languages",
        "translation capabilities",
        "language translation",
        "server translate"
      ],
      "category": "language-translation"
    },
    "wizd--airylark-mcp-server": {
      "owner": "wizd",
      "name": "airylark-mcp-server",
      "url": "https://github.com/wizd/airylark-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/wizd.webp",
      "description": "Provides high-accuracy translation services through a structured three-stage workflow, ensuring consistency and quality across multiple languages. Supports various professional fields such as technical documentation, academia, law, medicine, and finance.",
      "stars": 22,
      "forks": 3,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-09-25T15:35:30Z",
      "readme_content": "# AiryLark MCP ‰∏ì‰∏öÁøªËØëÊúçÂä°Âô®\n\n[![License: Custom](https://img.shields.io/badge/License-Custom%20(Apache%202.0%20with%20restrictions)-blue.svg)](../LICENSE)\n\nËøôÊòØAiryLarkÈ°πÁõÆÁöÑModelContextProtocol(MCP)ÊúçÂä°Âô®Ê®°ÂùóÔºåÊèê‰æõ‰∏ì‰∏öÁ∫ßÈ´òÁ≤æÂ∫¶ÁøªËØëÊúçÂä°Êé•Âè£„ÄÇMCPÊòØ‰∏ÄÁßçÊ†áÂáÜÂçèËÆÆÔºåÂÖÅËÆ∏Êô∫ËÉΩÂä©Êâã‰∏éÂ§ñÈÉ®ÊúçÂä°ËøõË°åÁªìÊûÑÂåñ‰∫§‰∫íÔºå‰ΩøÂ§çÊùÇÁøªËØëËÉΩÂäõÂèØÁõ¥Êé•Ë¢´ClaudeÁ≠âÂ§ßÂûãAIÊ®°ÂûãË∞ÉÁî®„ÄÇ\n\n## ‰∏ì‰∏öÁøªËØë‰ºòÂäø\n\n- **‰∏âÈò∂ÊÆµÁøªËØëÊµÅÁ®ã**ÔºöÂàÜÊûêËßÑÂàí„ÄÅÂàÜÊÆµÁøªËØë„ÄÅÂÖ®ÊñáÂÆ°Ê†°ÔºåÁ°Æ‰øù‰∏ì‰∏öÈ¢ÜÂüüÊñáÊ°£ÁöÑÁøªËØëË¥®Èáè\n- **È¢ÜÂüüÊúØËØ≠ËØÜÂà´**ÔºöËá™Âä®ËØÜÂà´‰∏ì‰∏öÊñáÊú¨È¢ÜÂüüÔºåÊèêÂèñÂÖ≥ÈîÆÊúØËØ≠Âπ∂Á°Æ‰øùÊúØËØ≠‰∏ÄËá¥ÊÄß\n- **Ë¥®ÈáèËØÑ‰º∞Á≥ªÁªü**ÔºöÊèê‰æõÂÖ®Èù¢ÁøªËØëË¥®ÈáèËØÑ‰º∞ÔºåÂåÖÊã¨ÂáÜÁ°ÆÊÄß„ÄÅÊµÅÁïÖÊÄß„ÄÅÊúØËØ≠‰ΩøÁî®ÂíåÈ£éÊ†º‰∏ÄËá¥ÊÄß\n- **Â§öËØ≠Ë®ÄÊîØÊåÅ**ÔºöÊîØÊåÅ‰∏≠Êñá„ÄÅËã±Êñá„ÄÅÊó•ËØ≠„ÄÅÈü©ËØ≠„ÄÅÊ≥ïËØ≠„ÄÅÂæ∑ËØ≠Á≠âÂ§öÁßçËØ≠Ë®Ä‰∫íËØë\n- **È£éÊ†º‰∏éÊ†ºÂºè‰øùÊåÅ**ÔºöÊ†πÊçÆÊñáÊú¨Á±ªÂûãËá™Âä®Ë∞ÉÊï¥ÁøªËØëÈ£éÊ†ºÔºå‰øùÊåÅÂéüÊñáÁöÑ‰∏ì‰∏öÊÄßÂíåË°®ËææÊñπÂºè\n\n## ÈÄÇÁî®Âú∫ÊôØ\n\n- **ÊäÄÊúØÊñáÊ°£ÁøªËØë**ÔºöËΩØ‰ª∂ÊñáÊ°£„ÄÅAPIÊñáÊ°£„ÄÅÊäÄÊúØËßÑËåÉÁ≠â‰∏ì‰∏öÂÜÖÂÆπÁøªËØë\n- **Â≠¶ÊúØËÆ∫ÊñáÁøªËØë**ÔºöÁ°Æ‰øùÂ≠¶ÊúØÊúØËØ≠ÂáÜÁ°ÆÔºå‰øùÊåÅÂ≠¶ÊúØÊñá‰ΩìÈ£éÊ†º\n- **Ê≥ïÂæãÊñá‰ª∂ÁøªËØë**Ôºö‰øùËØÅÊ≥ïÂæãÊúØËØ≠ÂáÜÁ°ÆÊÄßÂíåË°®Ëø∞Á≤æÁ°ÆÊÄß\n- **ÂåªÁñóËµÑÊñôÁøªËØë**Ôºö‰∏ì‰∏öÂåªÂ≠¶ÊúØËØ≠ÁøªËØëÂíåÂåªÁñóÊñáÁåÆÊú¨Âú∞Âåñ\n- **ÈáëËûçÊä•ÂëäÁøªËØë**ÔºöÂáÜÁ°ÆÁøªËØëÈáëËûçÊúØËØ≠ÂíåÂ§çÊùÇË¥¢Âä°Ê¶ÇÂøµ\n\n## ÂÆâË£Ö\n\n1. Á°Æ‰øùÂ∑≤ÂÆâË£ÖNode.js (v18+)Âíånpm\n\n2. ÂÆâË£Ö‰æùËµñ:\n\n```bash\ncd mcp-server\nnpm install\n```\n\n3. ÈÖçÁΩÆÁéØÂ¢ÉÂèòÈáè:\n\nÂàõÂª∫`.env`Êñá‰ª∂ÊàñËÆæÁΩÆ‰ª•‰∏ãÁéØÂ¢ÉÂèòÈáè:\n\n```\n# ÁøªËØëAPIÈÖçÁΩÆ\nTRANSLATION_API_KEY=your_api_key\nTRANSLATION_MODEL=your_model_name\nTRANSLATION_BASE_URL=your_api_base_url\n\n# ÊúçÂä°Âô®ÈÖçÁΩÆ\nPORT=3031  # MCPÊúçÂä°Âô®Á´ØÂè£ÔºåÂèØÈÄâÔºåÈªòËÆ§3031\n```\n\n## ‰ΩøÁî®ÊñπÊ≥ï\n\n### ÂºÄÂèëÁéØÂ¢É\n\nÂêØÂä®ÂºÄÂèëÊúçÂä°Âô®:\n\n```bash\nnpm run dev\n```\n\n### Áîü‰∫ßÁéØÂ¢É\n\nÊûÑÂª∫Âπ∂ÂêØÂä®ÊúçÂä°Âô®:\n\n```bash\nnpm run build\nnpm start\n```\n\n## MCPÂ∑•ÂÖ∑Êé•Âè£\n\nÊúçÂä°Âô®Êèê‰æõ‰ª•‰∏ãMCPÊ†áÂáÜÂ∑•ÂÖ∑:\n\n### 1. ÁøªËØëÂ∑•ÂÖ∑ (translate_text)\n\n‰∏ì‰∏öÁ∫ßÊñáÊú¨ÁøªËØëÔºåËá™Âä®ÈÄÇÂ∫î‰∏çÂêåÈ¢ÜÂüüÂíåÊñá‰ΩìÈ£éÊ†º„ÄÇ\n\n**ÂèÇÊï∞:**\n- `text`: ÈúÄË¶ÅÁøªËØëÁöÑÊ∫êÊñáÊú¨\n- `target_language`: ÁõÆÊ†áËØ≠Ë®Ä‰ª£Á†Å (Â¶Ç'zh'„ÄÅ'en'„ÄÅ'ja'Á≠â)\n- `source_language`: (ÂèØÈÄâ)Ê∫êËØ≠Ë®Ä‰ª£Á†Å\n- `high_quality`: (ÂèØÈÄâ)ÊòØÂê¶ÂêØÁî®È´òÁ≤æÂ∫¶ÁøªËØëÊµÅÁ®ãÔºåÈªòËÆ§‰∏∫true\n\n**‰ΩøÁî®Âú∫ÊôØ:**\n- ËÆæÁΩÆ`high_quality=true`Áî®‰∫é‰∏ì‰∏öÊñáÊ°£„ÄÅÂ≠¶ÊúØËÆ∫ÊñáÁ≠âÂØπÁ≤æÂ∫¶Ë¶ÅÊ±ÇÈ´òÁöÑÂú∫ÊôØ\n- ËÆæÁΩÆ`high_quality=false`Áî®‰∫éÈùûÊ≠£ÂºèÂÜÖÂÆπÊàñÈúÄË¶ÅÂø´ÈÄüÁøªËØëÁöÑÂú∫ÊôØ\n\n### 2. ÁøªËØëË¥®ÈáèËØÑ‰º∞Â∑•ÂÖ∑ (evaluate_translation)\n\nÂØπÁøªËØëÁªìÊûúËøõË°åÂÖ®Èù¢Ë¥®ÈáèËØÑ‰º∞ÔºåÊèê‰æõËØ¶ÁªÜÂèçÈ¶à„ÄÇ\n\n**ÂèÇÊï∞:**\n- `original_text`: ÂéüÂßãÊñáÊú¨\n- `translated_text`: ÁøªËØëÂêéÁöÑÊñáÊú¨\n- `detailed_feedback`: (ÂèØÈÄâ)ÊòØÂê¶Êèê‰æõËØ¶ÁªÜÂèçÈ¶àÔºåÈªòËÆ§‰∏∫false\n\n**ËØÑ‰º∞ÊåáÊ†á:**\n- ÂáÜÁ°ÆÊÄßÔºöËØëÊñáÊòØÂê¶ÂáÜÁ°Æ‰º†ËææÂéüÊñáÊÑèÊÄù\n- ÊµÅÁïÖÊÄßÔºöËØëÊñáÊòØÂê¶Á¨¶ÂêàÁõÆÊ†áËØ≠Ë®ÄË°®Ëææ‰π†ÊÉØ\n- ÊúØËØ≠‰ΩøÁî®Ôºö‰∏ì‰∏öÊúØËØ≠ÁøªËØëÁöÑÂáÜÁ°ÆÊÄßÂíå‰∏ÄËá¥ÊÄß\n- È£éÊ†º‰∏ÄËá¥ÊÄßÔºöËØëÊñáÊòØÂê¶‰øùÊåÅÂéüÊñáÈ£éÊ†º\n\n### ËµÑÊ∫êÊé•Âè£\n\n- **supported_languages**: ÊîØÊåÅÁöÑËØ≠Ë®ÄÂàóË°®\n  - URI: `languages://list`\n\n## ‰∏éAIÂä©ÊâãÈõÜÊàê\n\nÊú¨ÊúçÂä°Âô®ËÆæËÆ°‰∏∫‰∏éÊîØÊåÅMCPÂçèËÆÆÁöÑAIÂä©ÊâãÊó†ÁºùÈõÜÊàêÔºå‰ΩøAIËÉΩÂ§üÊèê‰æõ‰∏ì‰∏öÁ∫ßÁøªËØëÊúçÂä°:\n\n```typescript\nimport { Client } from \"@modelcontextprotocol/sdk/client/index.js\";\nimport { SSEClientTransport } from \"@modelcontextprotocol/sdk/client/sse.js\";\n\n// ËøûÊé•Âà∞MCPÊúçÂä°Âô®\nconst transport = new SSEClientTransport(\"http://localhost:3031\");\nconst client = new Client(\n  { name: \"assistant-client\", version: \"1.0.0\" },\n  { capabilities: { tools: {} } }\n);\nawait client.connect(transport);\n\n// Ë∞ÉÁî®‰∏ì‰∏öÁøªËØëÂ∑•ÂÖ∑\nconst result = await client.callTool({\n  name: \"translate_text\",\n  arguments: {\n    text: \"The mitochondrion is the powerhouse of the cell.\",\n    target_language: \"zh\",\n    high_quality: true\n  }\n});\n\nconsole.log(result.content[0].text);\n```\n\n## Claude Chat‰∏éCursorÁ≠âMCPÂÆ¢Êà∑Á´ØÈÖçÁΩÆ\n\nÂú®ÊîØÊåÅMCPÂçèËÆÆÁöÑAIÂä©ÊâãÂ∫îÁî®‰∏≠ÔºåÂèØÈÄöËøá‰ª•‰∏ãÊñπÂºèÈÖçÁΩÆ‰∏éAiryLarkÁøªËØëÊúçÂä°Âô®ÁöÑËøûÊé•Ôºö\n\n### CursorÈÖçÁΩÆ\n\nÂú®CursorËÆæÁΩÆÊàñÈÖçÁΩÆÊñá‰ª∂‰∏≠Ê∑ªÂä†‰ª•‰∏ãMCPÊúçÂä°Âô®ÈÖçÁΩÆÔºö\n\n```json\n{\n  \"mcpServers\": {\n    \"airylark-translation\": {\n      \"url\": \"https://airylark-mcp.vcorp.ai/sse\"\n    }\n  }\n}\n```\n\n### Claude ChatÈÖçÁΩÆ\n\nÂú®Claude Chat‰∏≠ÔºåÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊ≠•È™§ÂºÄÂêØMCPÊúçÂä°Âô®ËøûÊé•Ôºö\n\n1. ËøõÂÖ•ËÆæÁΩÆÈ°µÈù¢\n2. ÊâæÂà∞\"ÂºÄÂèëËÄÖËÆæÁΩÆ\"Êàñ\"Â§ñÈÉ®Â∑•ÂÖ∑\"ÈÄâÈ°π\n3. Ê∑ªÂä†Êñ∞ÁöÑMCPÊúçÂä°Âô®ÔºåÂ°´ÂÜôÂêçÁß∞‰∏éURL\n4. ÊúçÂä°Âô®URLÂ°´ÂÜô `https://airylark-mcp.vcorp.ai/sse`\n\nÈÖçÁΩÆÂÆåÊàêÂêéÔºåAIÂä©Êâã‰æøÂèØ‰ª•‰ΩøÁî®\"translate_text\"Âíå\"evaluate_translation\"Â∑•ÂÖ∑ÔºåËΩªÊùæÂ§ÑÁêÜÂêÑÁ±ª‰∏ì‰∏öÊñáÊ°£ÁøªËØëÈúÄÊ±Ç„ÄÇ\n\n## ÊúçÂä°Âô®ÈÖçÁΩÆ‰∏éËøêË°å\n\nAiryLark MCPÊúçÂä°Âô®ÊîØÊåÅÂ§öÁßçÈÉ®ÁΩ≤ÂíåËøêË°åÊñπÂºèÔºå‰ª•‰∏ãÊòØÂ∏∏Áî®ÈÖçÁΩÆÊñπÊ≥ïÔºö\n\n### DockerÈÉ®ÁΩ≤\n\n‰ΩøÁî®ÂÆòÊñπÂèëÂ∏ÉÁöÑDockerÈïúÂÉèÊòØÊúÄÁÆÄÂçïÁöÑÈÉ®ÁΩ≤ÊñπÂºèÔºö\n\n```bash\n# ÊãâÂèñÂÆòÊñπÈïúÂÉè\ndocker pull wizdy/airylark-mcp-server\n\n# ËøêË°åÂÆπÂô®\ndocker run -p 3031:3031 --env-file .env -d wizdy/airylark-mcp-server\n```\n\n### Docker ComposeÈÉ®ÁΩ≤\n\n‰ΩøÁî®È°πÁõÆÊèê‰æõÁöÑdocker-compose.ymlÊñá‰ª∂ÔºåÈÖçÂêàÂÆòÊñπÈïúÂÉèÂèØ‰ª•Êõ¥Êñπ‰æøÂú∞ÁÆ°ÁêÜÊúçÂä°Ôºö\n\n```yaml\n# docker-compose.yml Á§∫‰æã\nservices:\n  mcp-server:\n    image: wizdy/airylark-mcp-server\n    ports:\n      - \"${MCP_PORT}:${MCP_PORT}\"\n    environment:\n      - NODE_ENV=production\n      - PORT=${MCP_PORT}\n      - TRANSLATION_API_KEY=${TRANSLATION_API_KEY}\n      - TRANSLATION_MODEL=${TRANSLATION_MODEL}\n      - TRANSLATION_BASE_URL=${TRANSLATION_BASE_URL}\n    restart: always\n```\n\nËøêË°åÊúçÂä°Ôºö\n\n```bash\n# ËÆæÁΩÆÁéØÂ¢ÉÂèòÈáèÊàñÂàõÂª∫.envÊñá‰ª∂\nexport MCP_PORT=3031\nexport TRANSLATION_API_KEY=your_api_key\nexport TRANSLATION_MODEL=your_model_name\nexport TRANSLATION_BASE_URL=your_api_base_url\n\n# ÂêØÂä®ÊúçÂä°\ndocker-compose up -d\n```\n\n### ÊúçÂä°Âô®ÈÖçÁΩÆÁ§∫‰æã\n\nÊÇ®‰πüÂèØ‰ª•‰ΩøÁî®Á±ª‰ºº‰ª•‰∏ãÁöÑÈÖçÁΩÆÊñπÂºèÊù•ÂÆö‰πâÂíåÂêØÂä®MCPÊúçÂä°Âô®Ôºö\n\n```json\n{\n  \"mcpServers\": {\n    \"airylark-translation\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"TRANSLATION_API_KEY\",\n        \"-e\",\n        \"TRANSLATION_MODEL\",\n        \"-e\",\n        \"TRANSLATION_BASE_URL\",\n        \"wizdy/airylark-mcp-server\"\n      ],\n      \"env\": {\n        \"TRANSLATION_API_KEY\": \"<YOUR_API_KEY>\",\n        \"TRANSLATION_MODEL\": \"<YOUR_MODEL>\",\n        \"TRANSLATION_BASE_URL\": \"<YOUR_API_URL>\"\n      }\n    }\n  }\n}\n```\n\nËøôÁßçÈÖçÁΩÆÊñπÂºèÈÄÇÁî®‰∫éÈúÄË¶ÅÂú®Â∫îÁî®ÂÜÖÁõ¥Êé•ÁÆ°ÁêÜMCPÊúçÂä°Âô®ÁîüÂëΩÂë®ÊúüÁöÑÂú∫ÊôØ„ÄÇ\n\n## ËÆ∏ÂèØËØÅ\n\nÊú¨È°πÁõÆ‰ΩøÁî®‰∏éAiryLark‰∏ªÈ°πÁõÆÁõ∏ÂêåÁöÑÂÆöÂà∂ËÆ∏ÂèØËØÅÔºåËØ¶ËßÅ[LICENSE](LICENSE)Êñá‰ª∂„ÄÇ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "translation",
        "wizd",
        "airylark",
        "translation services",
        "translation wizd",
        "language translation"
      ],
      "category": "language-translation"
    },
    "zhuangmanhong--PDFMathTranslate": {
      "owner": "zhuangmanhong",
      "name": "PDFMathTranslate",
      "url": "https://github.com/zhuangmanhong/PDFMathTranslate",
      "imageUrl": "/freedevtools/mcp/pfp/zhuangmanhong.webp",
      "description": "Translate PDF scientific papers while maintaining the integrity of formulas, charts, and annotations. Supports multiple languages and various translation services through a command-line interface, interactive GUI, or Docker deployment.",
      "stars": 0,
      "forks": 0,
      "license": "GNU Affero General Public License v3.0",
      "language": "",
      "updated_at": "2025-03-17T15:52:34Z",
      "readme_content": "<div align=\"center\">\n\nEnglish | [ÁÆÄ‰Ωì‰∏≠Êñá](docs/README_zh-CN.md) | [ÁπÅÈ´î‰∏≠Êñá](docs/README_zh-TW.md) | [Êó•Êú¨Ë™û](docs/README_ja-JP.md) | [ÌïúÍµ≠Ïñ¥](docs/README_ko-KR.md)\n\n\n\n<h2 id=\"title\">PDFMathTranslate</h2>\n\n<p>\n  <!-- PyPI -->\n  <a href=\"https://pypi.org/project/pdf2zh/\">\n    <img src=\"https://img.shields.io/pypi/v/pdf2zh\"></a>\n  <a href=\"https://pepy.tech/projects/pdf2zh\">\n    <img src=\"https://static.pepy.tech/badge/pdf2zh\"></a>\n  <a href=\"https://hub.docker.com/repository/docker/byaidu/pdf2zh\">\n    <img src=\"https://img.shields.io/docker/pulls/byaidu/pdf2zh\"></a>\n  <a href=\"https://gitcode.com/Byaidu/PDFMathTranslate/overview\">\n    <img src=\"https://gitcode.com/Byaidu/PDFMathTranslate/star/badge.svg\"></a>\n  <a href=\"https://huggingface.co/spaces/reycn/PDFMathTranslate-Docker\">\n    <img src=\"https://img.shields.io/badge/%F0%9F%A4%97-Online%20Demo-FF9E0D\"></a>\n  <a href=\"https://www.modelscope.cn/studios/AI-ModelScope/PDFMathTranslate\">\n    <img src=\"https://img.shields.io/badge/ModelScope-Demo-blue\"></a>\n  <a href=\"https://github.com/Byaidu/PDFMathTranslate/pulls\">\n    <img src=\"https://img.shields.io/badge/contributions-welcome-green\"></a>\n  <a href=\"https://t.me/+Z9_SgnxmsmA5NzBl\">\n    <img src=\"https://img.shields.io/badge/Telegram-2CA5E0?style=flat-squeare&logo=telegram&logoColor=white\"></a>\n  <!-- License -->\n  <a href=\"./LICENSE\">\n    <img src=\"https://img.shields.io/github/license/Byaidu/PDFMathTranslate\"></a>\n</p>\n\n<a href=\"https://trendshift.io/repositories/12424\" target=\"_blank\"><img src=\"https://trendshift.io/api/badge/repositories/12424\" alt=\"Byaidu%2FPDFMathTranslate | Trendshift\" style=\"width: 250px; height: 55px;\" width=\"250\" height=\"55\"/></a>\n\n</div>\n\nPDF scientific paper translation and bilingual comparison.\n\n- üìä Preserve formulas, charts, table of contents, and annotations _([preview](#preview))_.\n- üåê Support [multiple languages](#language), and diverse [translation services](#services).\n- ü§ñ Provides [commandline tool](#usage), [interactive user interface](#gui), and [Docker](#docker)\n\nFeel free to provide feedback in [GitHub Issues](https://github.com/Byaidu/PDFMathTranslate/issues) or [Telegram Group](https://t.me/+Z9_SgnxmsmA5NzBl).\n\nFor details on how to contribute, please consult the [Contribution Guide](https://github.com/Byaidu/PDFMathTranslate/wiki/Contribution-Guide---%E8%B4%A1%E7%8C%AE%E6%8C%87%E5%8D%97).\n\n<h2 id=\"updates\">Updates</h2>\n\n- [Mar. 3, 2025] Experimental support for the new backend [BabelDOC](https://github.com/funstory-ai/BabelDOC) WebUI added as an experimental option (by [@awwaawwa](https://github.com/awwaawwa))\n- [Feb. 22 2025] Better release CI and well-packaged windows-amd64 exe (by [@awwaawwa](https://github.com/awwaawwa))\n- [Dec. 24 2024] The translator now supports local models on [Xinference](https://github.com/xorbitsai/inference) _(by [@imClumsyPanda](https://github.com/imClumsyPanda))_\n- [Dec. 19 2024] Non-PDF/A documents are now supported using `-cp` _(by [@reycn](https://github.com/reycn))_\n- [Dec. 13 2024] Additional support for backend by _(by [@YadominJinta](https://github.com/YadominJinta))_\n- [Dec. 10 2024] The translator now supports OpenAI models on Azure _(by [@yidasanqian](https://github.com/yidasanqian))_\n\n<h2 id=\"preview\">Preview</h2>\n\n<div align=\"center\">\n\n</div>\n\n<h2 id=\"demo\">Online Service üåü</h2>\n\nYou can try our application out using either of the following demos:\n\n- [Public free service](https://pdf2zh.com/) online without installation _(recommended)_.\n- [Immersive Translate - BabelDOC](https://app.immersivetranslate.com/babel-doc/) 1000 free pages per month. _(recommended)_\n- [Demo hosted on HuggingFace](https://huggingface.co/spaces/reycn/PDFMathTranslate-Docker)\n- [Demo hosted on ModelScope](https://www.modelscope.cn/studios/AI-ModelScope/PDFMathTranslate) without installation.\n\nNote that the computing resources of the demo are limited, so please avoid abusing them.\n\n<h2 id=\"install\">Installation and Usage</h2>\n\n### Methods\n\nFor different use cases, we provide distinct methods to use our program:\n\n<details open>\n  <summary>1. UV install</summary>\n\n1. Python installed (3.10 <= version <= 3.12)\n2. Install our package:\n\n   ```bash\n   pip install uv\n   uv tool install --python 3.12 pdf2zh\n   ```\n\n3. Execute translation, files generated in [current working directory](https://chatgpt.com/share/6745ed36-9acc-800e-8a90-59204bd13444):\n\n   ```bash\n   pdf2zh document.pdf\n   ```\n\n</details>\n\n<details>\n  <summary>2. Windows exe</summary>\n\n1. Download pdf2zh-version-win64.zip from [release page](https://github.com/Byaidu/PDFMathTranslate/releases)\n\n2. Unzip and double-click `pdf2zh.exe` to run.\n\n</details>\n\n<details>\n  <summary>3. Graphic user interface</summary>\n1. Python installed (3.10 <= version <= 3.12)\n2. Install our package:\n\n```bash\npip install pdf2zh\n```\n\n3. Start using in browser:\n\n   ```bash\n   pdf2zh -i\n   ```\n\n4. If your browswer has not been started automatically, goto\n\n   ```bash\n   http://localhost:7860/\n   ```\n\n   \n\nSee [documentation for GUI](./docs/README_GUI.md) for more details.\n\n</details>\n\n<details>\n  <summary>4. Docker</summary>\n\n1. Pull and run:\n\n   ```bash\n   docker pull byaidu/pdf2zh\n   docker run -d -p 7860:7860 byaidu/pdf2zh\n   ```\n\n2. Open in browser:\n\n   ```\n   http://localhost:7860/\n   ```\n\nFor docker deployment on cloud service:\n\n<div>\n<a href=\"https://www.heroku.com/deploy?template=https://github.com/Byaidu/PDFMathTranslate\">\n  <img src=\"https://www.herokucdn.com/deploy/button.svg\" alt=\"Deploy\" height=\"26\"></a>\n<a href=\"https://render.com/deploy\">\n  <img src=\"https://render.com/images/deploy-to-render-button.svg\" alt=\"Deploy to Koyeb\" height=\"26\"></a>\n<a href=\"https://zeabur.com/templates/5FQIGX?referralCode=reycn\">\n  <img src=\"https://zeabur.com/button.svg\" alt=\"Deploy on Zeabur\" height=\"26\"></a>\n<a href=\"https://app.koyeb.com/deploy?type=git&builder=buildpack&repository=github.com/Byaidu/PDFMathTranslate&branch=main&name=pdf-math-translate\">\n  <img src=\"https://www.koyeb.com/static/images/deploy/button.svg\" alt=\"Deploy to Koyeb\" height=\"26\"></a>\n</div>\n\n</details>\n\n<details>\n  <summary>5. Zotero Plugin</summary>\n\n\nSee [Zotero PDF2zh](https://github.com/guaguastandup/zotero-pdf2zh) for more details.\n\n</details>\n\n<details>\n  <summary>6. Commandline</summary>\n\n1. Python installed (3.10 <= version <= 3.12)\n2. Install our package:\n\n   ```bash\n   pip install pdf2zh\n   ```\n\n3. Execute translation, files generated in [current working directory](https://chatgpt.com/share/6745ed36-9acc-800e-8a90-59204bd13444):\n\n   ```bash\n   pdf2zh document.pdf\n   ```\n\n</details>\n\n> [!TIP]\n>\n> - If you're using Windows and cannot open the file after downloading, please install [vc_redist.x64.exe](https://aka.ms/vs/17/release/vc_redist.x64.exe) and try again.\n>\n> - If you cannot access Docker Hub, please try the image on [GitHub Container Registry](https://github.com/Byaidu/PDFMathTranslate/pkgs/container/pdfmathtranslate).\n> ```bash\n> docker pull ghcr.io/byaidu/pdfmathtranslate\n> docker run -d -p 7860:7860 ghcr.io/byaidu/pdfmathtranslate\n> ```\n\n### Unable to install?\n\nThe present program needs an AI model(`wybxc/DocLayout-YOLO-DocStructBench-onnx`) before working and some users are not able to download due to network issues. If you have a problem with downloading this model, we provide a workaround using the following environment variable:\n\n```shell\nset HF_ENDPOINT=https://hf-mirror.com\n```\n\nFor PowerShell user:\n\n```shell\n$env:HF_ENDPOINT = https://hf-mirror.com\n```\n\nIf the solution does not work to you / you encountered other issues, please refer to [frequently asked questions](https://github.com/Byaidu/PDFMathTranslate/wiki#-faq--%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98).\n\n<h2 id=\"usage\">Advanced Options</h2>\n\nExecute the translation command in the command line to generate the translated document `example-mono.pdf` and the bilingual document `example-dual.pdf` in the current working directory. Use Google as the default translation service. More support translation services can find [HERE](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#services).\n\n\n\nIn the following table, we list all advanced options for reference:\n\n| Option         | Function                                                                                                      | Example                                        |\n| -------------- | ------------------------------------------------------------------------------------------------------------- | ---------------------------------------------- |\n| files          | Local files                                                                                                   | `pdf2zh ~/local.pdf`                           |\n| links          | Online files                                                                                                  | `pdf2zh http://arxiv.org/paper.pdf`            |\n| `-i`           | [Enter GUI](#gui)                                                                                             | `pdf2zh -i`                                    |\n| `-p`           | [Partial document translation](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#partial) | `pdf2zh example.pdf -p 1`                      |\n| `-li`          | [Source language](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#languages)            | `pdf2zh example.pdf -li en`                    |\n| `-lo`          | [Target language](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#languages)            | `pdf2zh example.pdf -lo zh`                    |\n| `-s`           | [Translation service](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#services)         | `pdf2zh example.pdf -s deepl`                  |\n| `-t`           | [Multi-threads](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#threads)                | `pdf2zh example.pdf -t 1`                      |\n| `-o`           | Output dir                                                                                                    | `pdf2zh example.pdf -o output`                 |\n| `-f`, `-c`     | [Exceptions](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#exceptions)                | `pdf2zh example.pdf -f \"(MS.*)\"`               |\n| `-cp`          | Compatibility Mode                                                                                            | `pdf2zh example.pdf --compatible`              |\n| `--skip-subset-fonts` | [Skip font subset](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#font-subset)  | `pdf2zh example.pdf --skip-subset-fonts`       |\n| `--ignore-cache` | [Ignore translate cache](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#cache)       | `pdf2zh example.pdf --ignore-cache`            |\n| `--share`      | Public link                                                                                                   | `pdf2zh -i --share`                            |\n| `--authorized` | [Authorization](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#auth)                   | `pdf2zh -i --authorized users.txt [auth.html]` |\n| `--prompt`     | [Custom Prompt](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#prompt)                 | `pdf2zh --prompt [prompt.txt]`                 |\n| `--onnx`       | [Use Custom DocLayout-YOLO ONNX model]                                                                        | `pdf2zh --onnx [onnx/model/path]`              |\n| `--serverport` | [Use Custom WebUI port]                                                                                       | `pdf2zh --serverport 7860`                     |\n| `--dir`        | [batch translate]                                                                                             | `pdf2zh --dir /path/to/translate/`             |\n| `--config`     | [configuration file](https://github.com/Byaidu/PDFMathTranslate/blob/main/docs/ADVANCED.md#cofig)             | `pdf2zh --config /path/to/config/config.json`  |\n| `--serverport` | [custom gradio server port]                                                                                   | `pdf2zh --serverport 7860`                     |\n|`--babeldoc`| Use Experimental backend [BabelDOC](https://funstory-ai.github.io/BabelDOC/) to translate |`pdf2zh --babeldoc` -s openai example.pdf|\n\nFor detailed explanations, please refer to our document about [Advanced Usage](./docs/ADVANCED.md) for a full list of each option.\n\n<h2 id=\"downstream\">Secondary Development (APIs)</h2>\n\nThe current pdf2zh API is temporarily deprecated. The API will be provided again after [pdf2zh 2.0](https://github.com/Byaidu/PDFMathTranslate/issues/586) is released. For users who need programmatic access, please use the `babeldoc.high_level.async_translate` function of [BabelDOC](https://github.com/funstory-ai/BabelDOC).\n\nThis API being temporarily deprecated means: the relevant code will not be removed for now, but no technical support will be provided, and no bug fixes will be made.\n<!-- For downstream applications, please refer to our document about [API Details](./docs/APIS.md) for futher information about:\n\n- [Python API](./docs/APIS.md#api-python), how to use the program in other Python programs\n- [HTTP API](./docs/APIS.md#api-http), how to communicate with a server with the program installed -->\n\n<h2 id=\"todo\">TODOs</h2>\n\n- [ ] Parse layout with DocLayNet based models, [PaddleX](https://github.com/PaddlePaddle/PaddleX/blob/17cc27ac3842e7880ca4aad92358d3ef8555429a/paddlex/repo_apis/PaddleDetection_api/object_det/official_categories.py#L81), [PaperMage](https://github.com/allenai/papermage/blob/9cd4bb48cbedab45d0f7a455711438f1632abebe/README.md?plain=1#L102), [SAM2](https://github.com/facebookresearch/sam2)\n\n- [ ] Fix page rotation, table of contents, format of lists\n\n- [ ] Fix pixel formula in old papers\n\n- [ ] Async retry except KeyboardInterrupt\n\n- [ ] Knuth‚ÄìPlass algorithm for western languages\n\n- [ ] Support non-PDF/A files\n\n- [ ] Plugins of [Zotero](https://github.com/zotero/zotero) and [Obsidian](https://github.com/obsidianmd/obsidian-releases)\n\n<h2 id=\"acknowledgement\">Acknowledgements</h2>\n\n- [Immersive Translation](https://immersivetranslate.com) sponsors monthly Pro membership redemption codes for active contributors to this project, see details at: [CONTRIBUTOR_REWARD.md](https://github.com/funstory-ai/BabelDOC/blob/main/docs/CONTRIBUTOR_REWARD.md)\n\n- New backend: [BabelDOC](https://github.com/funstory-ai/BabelDOC)\n\n- Document merging: [PyMuPDF](https://github.com/pymupdf/PyMuPDF)\n\n- Document parsing: [Pdfminer.six](https://github.com/pdfminer/pdfminer.six)\n\n- Document extraction: [MinerU](https://github.com/opendatalab/MinerU)\n\n- Document Preview: [Gradio PDF](https://github.com/freddyaboulton/gradio-pdf)\n\n- Multi-threaded translation: [MathTranslate](https://github.com/SUSYUSTC/MathTranslate)\n\n- Layout parsing: [DocLayout-YOLO](https://github.com/opendatalab/DocLayout-YOLO)\n\n- Document standard: [PDF Explained](https://zxyle.github.io/PDF-Explained/), [PDF Cheat Sheets](https://pdfa.org/resource/pdf-cheat-sheets/)\n\n- Multilingual Font: [Go Noto Universal](https://github.com/satbyy/go-noto-universal)\n\n<h2 id=\"contrib\">Contributors</h2>\n\n<a href=\"https://github.com/Byaidu/PDFMathTranslate/graphs/contributors\">\n  <img src=\"https://opencollective.com/PDFMathTranslate/contributors.svg?width=890&button=false\" />\n</a>\n\n![Alt](https://repobeats.axiom.co/api/embed/dfa7583da5332a11468d686fbd29b92320a6a869.svg \"Repobeats analytics image\")\n\n<h2 id=\"star_hist\">Star History</h2>\n\n<a href=\"https://star-history.com/#Byaidu/PDFMathTranslate&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=Byaidu/PDFMathTranslate&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=Byaidu/PDFMathTranslate&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=Byaidu/PDFMathTranslate&type=Date\"/>\n </picture>\n</a>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pdfmathtranslate",
        "zhuangmanhong",
        "translate",
        "zhuangmanhong pdfmathtranslate",
        "translate pdf",
        "translation zhuangmanhong"
      ],
      "category": "language-translation"
    }
  }
}