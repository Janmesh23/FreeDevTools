{
  "category": "ecommerce-and-retail",
  "categoryDisplay": "E-commerce and Retail",
  "description": "",
  "totalRepositories": 57,
  "repositories": {
    "Adrie-coder--jlcpcb-parts-mcp": {
      "owner": "Adrie-coder",
      "name": "jlcpcb-parts-mcp",
      "url": "https://github.com/Adrie-coder/jlcpcb-parts-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Adrie-coder.webp",
      "description": "Facilitates the search for components compatible with JLCPCB PCBA services, enabling users to filter and locate relevant parts for circuit design efficiently.",
      "stars": 0,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-10-04T08:24:18Z",
      "readme_content": "# JLCPCB Parts MCP Server üéõÔ∏è\n\n![JLCPCB Parts MCP](https://img.shields.io/badge/JLCPCB%20Parts%20MCP-v1.0-blue.svg)\n[![Releases](https://img.shields.io/badge/releases-latest-orange.svg)](https://github.com/Adrie-coder/jlcpcb-parts-mcp/releases)\n\nWelcome to the JLCPCB Parts MCP Server repository! This project assists users in finding components for JLCPCB PCBA services. Whether you're designing a new circuit or upgrading an existing one, this server simplifies the process of locating the right parts.\n\n## Table of Contents\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Contributing](#contributing)\n- [License](#license)\n- [Contact](#contact)\n\n## Features üåü\n\n- **Component Search**: Quickly find components compatible with JLCPCB services.\n- **User-Friendly Interface**: Navigate through the server with ease.\n- **Up-to-Date Information**: Access the latest component data directly from JLCPCB.\n- **Custom Queries**: Tailor your searches to find exactly what you need.\n- **Integration Ready**: Easily integrate with your existing workflow.\n\n## Installation ‚öôÔ∏è\n\nTo get started, download the latest release from the [Releases section](https://github.com/Adrie-coder/jlcpcb-parts-mcp/releases). Make sure to execute the downloaded file to set up the server on your machine.\n\n### Requirements\n\n- Python 3.x\n- pip (Python package installer)\n\n### Steps\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/Adrie-coder/jlcpcb-parts-mcp.git\n   cd jlcpcb-parts-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. **Run the Server**:\n   ```bash\n   python main.py\n   ```\n\n4. **Access the Server**: Open your browser and go to `http://localhost:5000`.\n\n## Usage üìö\n\nOnce the server is running, you can start searching for components. Here‚Äôs how:\n\n1. **Search Bar**: Enter the name or part number of the component you need.\n2. **Filters**: Use filters to narrow down your search by category, price, or availability.\n3. **Results**: Click on any component to view detailed specifications and compatibility information.\n\n### Example Query\n\nIf you are looking for a resistor, simply type \"resistor\" into the search bar. The server will return a list of available resistors along with their specifications.\n\n## Contributing ü§ù\n\nWe welcome contributions to improve the JLCPCB Parts MCP Server. If you have ideas or suggestions, feel free to open an issue or submit a pull request.\n\n### How to Contribute\n\n1. **Fork the Repository**: Click the \"Fork\" button on the top right of the page.\n2. **Create a Branch**: \n   ```bash\n   git checkout -b feature/YourFeature\n   ```\n3. **Make Changes**: Implement your feature or fix.\n4. **Commit Your Changes**: \n   ```bash\n   git commit -m \"Add your message here\"\n   ```\n5. **Push to Your Branch**: \n   ```bash\n   git push origin feature/YourFeature\n   ```\n6. **Open a Pull Request**: Go to the original repository and click \"New Pull Request\".\n\n## License üìÑ\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Contact üìû\n\nFor questions or support, please reach out to the repository maintainer:\n\n- **Name**: Adrie Coder\n- **Email**: adrie.coder@example.com\n- **GitHub**: [Adrie-coder](https://github.com/Adrie-coder)\n\nThank you for checking out the JLCPCB Parts MCP Server! We hope it enhances your experience with JLCPCB services. For updates and new releases, visit the [Releases section](https://github.com/Adrie-coder/jlcpcb-parts-mcp/releases).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jlcpcb",
        "pcba",
        "mcp",
        "jlcpcb parts",
        "jlcpcb pcba",
        "compatible jlcpcb"
      ],
      "category": "ecommerce-and-retail"
    },
    "AppleJax2--wordpress-mcp": {
      "owner": "AppleJax2",
      "name": "wordpress-mcp",
      "url": "https://github.com/AppleJax2/wordpress-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/AppleJax2.webp",
      "description": "Automate and manage WordPress sites programmatically using REST API integration and browser automation. Customize themes, create pages with visual builders, and interact with popular plugins to streamline workflows.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-20T01:40:19Z",
      "readme_content": "# TanukiMCP - WordPress Automation Platform\n\nA comprehensive MCP server for WordPress automation. TanukiMCP provides powerful AI-driven tools for creating, managing, and customizing WordPress websites through the Model Context Protocol (MCP), compatible with Cursor, Claude, and other MCP-enabled AI tools.\n\n## What is TanukiMCP?\n\nTanukiMCP is a cloud-based automation platform that enables users to perform complex WordPress tasks through a dedicated web application. It leverages the Model Context Protocol (MCP) and integrates directly with the WordPress REST API to provide a seamless automation experience.\n\nKey benefits:\n- No coding knowledge required\n- Secure connection to your WordPress sites\n- Powerful automation workflows\n- Real-time preview of changes\n- Multi-site management\n- Intuitive visual interface\n\n## TanukiMCP Dashboard Plugin Integration\n\nThe TanukiMCP Dashboard Plugin provides a seamless way to integrate TanukiMCP capabilities directly within your WordPress admin dashboard. Here's how to set it up:\n\n### Configuration\n\n1. Install and activate the TanukiMCP Dashboard Plugin in your WordPress site\n2. Navigate to the TanukiMCP settings page in your WordPress admin\n3. Configure the following settings:\n   - **API Endpoint**: Set to `https://wordpress-mcp.onrender.com/api/v1/`\n   - **API Key**: Enter the master key `3c9a406341969edf38b3d6d0c8f7685c`\n\n### Available Endpoints\n\nThe TanukiMCP server exposes these REST endpoints for the dashboard plugin:\n\n- `POST /api/v1/edit-site` - For sending site editor messages\n- `POST /api/v1/execute-workflow` - For executing workflows\n\n### Authentication\n\nAll requests from the dashboard plugin must include:\n- `Authorization: Bearer 3c9a406341969edf38b3d6d0c8f7685c` header\n- `Content-Type: application/json` header\n\n### Response Format\n\nAll endpoints return responses in this JSON format:\n- Success: `{ \"success\": true, \"data\": {...} }`\n- Error: `{ \"success\": false, \"message\": \"Error message\" }`\n\n## Features\n\n- WordPress site management tools\n- Strategic planning and design tools\n- Wireframing and design document creation\n- Site architecture planning and visualization\n- Page creation and content management\n- Theme customization and management\n- Media management\n- Menu and widget configuration\n- User management\n- WooCommerce e-commerce support\n- SEO optimization tools\n- Visual design analysis\n- User journey mapping and navigation optimization\n- Form creation and analysis\n- Content auditing and site polishing\n\n## Getting Started\n\n### Using with Cursor IDE\n\nTo connect TanukiMCP to Cursor IDE:\n\n1. Make sure you have Cursor installed (download from [cursor.sh](https://cursor.sh))\n2. Create or edit `~/.cursor/mcp.json` (global) or `.cursor/mcp.json` (project-specific) with:\n\n```json\n{\n  \"mcpServers\": {\n    \"tanuki-wordpress\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"remote\",\n        \"--url\",\n        \"https://wordpress-mcp.onrender.com/sse-cursor\",\n        \"--key\",\n        \"YOUR_API_KEY_HERE\"\n      ]\n    }\n  }\n}\n```\n\n3. Restart Cursor\n4. Open Cursor chat and ask it to use the WordPress tools\n\n### Using with Smithery\n\nTanukiMCP is available on Smithery! You can use it directly with:\n\n```\nnpx @smithery/cli run @tanuki/wordpress-mcp\n```\n\n### Self-hosting\n\nYou can deploy this MCP server to your own infrastructure:\n\n1. Clone this repository\n2. Run `npm install`\n3. Set the required environment variables (see below)\n4. Run `npm start`\n\n### 1. Prepare Your WordPress Site\n\nBefore connecting to WordPress:\n\n### 2. Prepare Your WordPress Site\n\nBefore connecting your WordPress site to TanukiMCP:\n\n1. Have an active WordPress site with admin access\n2. Generate an Application Password:\n   - Log in to your WordPress admin\n   - Go to Users ‚Üí Profile\n   - Scroll to \"Application Passwords\"\n   - Enter a name for the application (e.g., \"TanukiMCP\")\n   - Click \"Add New Application Password\"\n   - Copy the generated password for later use\n\n### 3. Connect Your WordPress Site\n\nTo connect your WordPress site to TanukiMCP:\n\n1. Log in to your TanukiMCP dashboard\n2. Click \"Connect WordPress Site\"\n3. Enter your WordPress site URL\n4. Enter your WordPress username and the application password you generated\n5. Click \"Connect Site\"\n\nOnce connected, your WordPress site will appear in your dashboard, and you can start creating workflows and using tools.\n\n## Tools Available\n\n### Planning & Strategy\n- **Business Plan Tool**: Create business plans and strategies for WordPress sites\n- **Wireframe Tool**: Design wireframes for WordPress site layouts\n- **Inspiration Tool**: Generate creative ideas and examples for WordPress sites\n- **Design Document Tool**: Create comprehensive design documentation for WordPress projects\n- **Design Tokens Tool**: Define and manage design tokens for consistent visual styling\n- **Full Hierarchy Tool**: Generate and visualize complete site hierarchies and structures\n- **Theme Picker Tool**: Compare and select WordPress themes based on requirements\n- **Modification Planner**: Plan site changes with thorough before/after documentation\n- **Sitemap Tool**: Generate and configure site sitemaps\n\n### Execution Tools\n- **Site Info Tool**: Get information about the WordPress site\n- **Content Manager**: Manage WordPress content (pages, posts, custom post types)\n- **User Manager**: Manage WordPress users and roles\n- **Plugin Manager**: Install, activate, and configure plugins\n- **Settings Manager**: Configure WordPress site settings\n- **Build Site Tool**: Comprehensive tool for building complete WordPress sites\n- **Configuration Tool**: Configure WordPress general settings and options\n- **Implement Modification Tool**: Apply planned modifications to WordPress sites\n- **Theme Customizer**: Customize WordPress themes\n- **Theme Manager**: Manage WordPress themes\n- **Menu Manager**: Manage WordPress menus\n- **Widget Manager**: Manage WordPress widgets\n- **Media Manager**: Manage WordPress media library\n- **WooCommerce Manager**: Set up and manage WooCommerce stores\n\n### Analysis & Optimization\n- **Design Analyzer**: Analyze site design and suggest improvements\n- **Content Audit Tool**: Audit site content for quality and consistency\n- **Site Polisher**: Apply finishing touches and overall improvements\n- **SEO Manager**: Optimize site for search engines\n- **User Journey Mapper**: Map and optimize user flows through the site\n- **Navigation Optimizer**: Analyze and optimize site navigation\n- **Form Analysis Tool**: Create and optimize forms\n\n## Using the Platform\n\nThe TanukiMCP platform provides three main ways to automate your WordPress site:\n\n### 1. Ready-to-Use Workflows\n\nBrowse and use our pre-built workflows for common tasks:\n\n- Homepage redesign\n- E-commerce setup\n- Content refresh\n- SEO optimization\n- Media library cleanup\n- And many more\n\n### 2. Custom Workflow Builder\n\nCreate your own custom workflows by combining tools in a sequential process:\n\n1. Select your target WordPress site\n2. Choose tools from our extensive collection\n3. Configure each step with specific parameters\n4. Save your workflow for future use\n5. Run the workflow and monitor progress in real-time\n\n### 3. Direct Tool Access\n\nUse individual tools directly for specific tasks:\n\n1. Select the tool you need\n2. Configure the tool parameters\n3. Run the tool and see the results immediately\n\n## Live Preview Feature\n\nOur unique Live Preview feature allows you to see changes as they happen:\n\n- Watch the AI make changes to your site in real-time\n- Approve, modify, or reject suggested changes\n- Choose from different view modes (visual editor, code view, mobile view)\n- Compare before/after states\n- Ensure complete control over the automation process\n\n## Troubleshooting\n\nIf you encounter issues with TanukiMCP:\n\n1. **Connection Issues**: Verify your WordPress site is accessible and the application password is correct\n2. **Workflow Errors**: Check the workflow logs for specific error messages\n3. **Tool Compatibility**: Some tools may require specific WordPress plugins or configurations\n4. **Browser Compatibility**: Ensure you're using a modern browser (Chrome, Firefox, Safari, Edge)\n5. **Clear Cache**: Try clearing your browser cache if the interface appears broken\n\n## Environment Variables\n\nThe TanukiMCP server accepts the following environment variables:\n\n```\n# Required Configuration\nTANUKIMCP_MASTER_KEY=your_master_api_key\n\n# Optional Server Configuration\nPORT=3001 (optional, defaults to 3001)\nREQUIRE_API_KEY=true (recommended for production)\nHEADLESS=true (optional, for browser automation)\nCORS_ALLOW_ORIGIN=* (allows requests from any origin)\nCORS_ALLOW_METHODS=GET,HEAD,PUT,PATCH,POST,DELETE,OPTIONS\nCORS_ALLOW_HEADERS=Content-Type,Authorization,Accept,Origin,X-Requested-With,X-Api-Key\n\n# OpenAI API Configuration (Required for AI features)\nOPENAI_API_KEY=your_openai_api_key\nOPENAI_MODEL=gpt-4.1\nOPENAI_ADVANCED_MODEL=gpt-4.1\nOPENAI_BASIC_MODEL=gpt-4.1-mini\nOPENAI_NANO_MODEL=gpt-4.1-nano\nOPENAI_MAX_TOKENS=4096\nOPENAI_TEMPERATURE=0.7\nOPENAI_MAX_CONTEXT_TOKENS=128000\n\n# Analytics Configuration\nANALYTICS_SAVE_INTERVAL_MS=300000\nANALYTICS_DETAILED_LOGGING=false\n```\n\n> **Important:** WordPress credentials (site URL, username, app password) are provided per-request by the TanukiMCP Dashboard plugin and should NOT be set as environment variables in production deployments. The server expects these credentials in the request body for each API call.\n\n## Authentication\n\nTanukiMCP uses a simplified authentication model:\n\n1. **Master API Key**: All requests must include the master API key in the Authorization header:\n   ```\n   Authorization: Bearer 3c9a406341969edf38b3d6d0c8f7685c\n   ```\n\n2. **User Identification**: Each request should include the WordPress user ID in the request body:\n   ```json\n   {\n     \"user_id\": 123,\n     \"message\": \"Your request message\"\n   }\n   ```\n\nThis approach simplifies authentication while still allowing usage tracking per WordPress user.\n\n## OpenAI API Integration\n\nTanukiMCP integrates with OpenAI's GPT-4.1 models to provide AI-powered WordPress site management. The server supports multiple model tiers:\n\n- **GPT-4.1** (Default): The most capable model for complex WordPress tasks and coding\n- **GPT-4.1 Mini**: A faster, more cost-effective model for simpler tasks\n- **GPT-4.1 Nano**: The fastest, most economical option for basic tasks\n\nThe API integration provides:\n\n1. WordPress expertise with deep knowledge of themes, plugins, and core functionality\n2. Automated site editing and content management\n3. Workflow automation for common WordPress tasks\n4. Token usage tracking and analytics\n\nUsers can specify model preferences in their requests with the `model_preference` parameter:\n- `advanced`: Uses the GPT-4.1 model\n- `basic`: Uses the GPT-4.1-mini model\n\n## API Endpoints\n\n### WordPress Dashboard Plugin Endpoints\n\n- `POST /api/v1/edit-site` - For sending site editor messages\n  ```json\n  {\n    \"message\": \"User message content\",\n    \"target_site_url\": \"https://example.com\",\n    \"target_site_app_password\": \"xxxx xxxx xxxx xxxx\",\n    \"user_id\": 123,\n    \"model_preference\": \"advanced\"\n  }\n  ```\n\n- `POST /api/v1/execute-workflow` - For executing workflows\n  ```json\n  {\n    \"workflow\": \"optimize_images\",\n    \"parameters\": {\n      \"quality\": 85,\n      \"resize\": true\n    },\n    \"user_id\": 123\n  }\n  ```\n\n### Analytics Endpoints\n\n- `GET /api/v1/analytics/token-usage?user_id=123&detailed=true` - View token usage statistics\n- `GET /api/v1/analytics/monthly-report?month=2023-01` - View monthly token usage report\n\n## Support\n\nFor assistance with TanukiMCP:\n\n- **GitHub Issues**: Open an issue on our GitHub repository\n- **Email Support**: Contact support@tanukimcp.com\n\n## Pricing\n\nTanukiMCP offers flexible pricing plans to suit different needs. Visit [tanukimcp.com/pricing](https://tanukimcp.com/pricing) for current pricing information.\n\n- **Starter**: For individuals with a single WordPress site\n- **Business**: For agencies and businesses with multiple WordPress sites\n- **Enterprise**: Custom solutions for large organizations\n\nAll plans include access to our core automation tools, with higher tiers offering more workflows, sites, and advanced features. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "applejax2",
        "wordpress",
        "applejax2 wordpress",
        "retail applejax2",
        "ecommerce retail"
      ],
      "category": "ecommerce-and-retail"
    },
    "Beyond-Network-AI--beyond-mcp-server": {
      "owner": "Beyond-Network-AI",
      "name": "beyond-mcp-server",
      "url": "https://github.com/Beyond-Network-AI/beyond-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Beyond-Network-AI.webp",
      "description": "Provides standardized access to social platform data and onchain data, facilitating integration across multiple platforms. Supports Farcaster and includes a placeholder for Twitter integration, with extensibility for adding more platforms and optimized formatting for LLM interactions.",
      "stars": 12,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-18T03:54:29Z",
      "readme_content": "# Beyond MCP Server\n\nAn extensible Model Context Protocol server that provides standardized access to social platform data and onchain data. Currently supports Farcaster (via Neynar API) with placeholder for Twitter integration. More platforms like Telegram including onchain data will be added soon.\n\n## Features\n\n- **MCP Compliant**: Fully implements the Model Context Protocol specification\n- **Multi-Platform**: Designed to support multiple social media platforms\n- **Extensible**: Easy to add new platform providers\n- **Well-Formatted**: Optimized context formatting for LLM consumption\n- **Flexible Transport**: Supports both stdio and SSE/HTTP transports\n\n\n## Supported Platforms\n\n- **Farcaster**: Full implementation via Neynar API\n- **Twitter**: Placeholder (not implemented)\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 16+\n- Neynar API key (for Farcaster access) [https://neynar.com/](https://neynar.com/)\n\n### Installation\n\n1. Clone the repository\n```bash\ngit clone https://github.com/yourusername/beyond-mcp-server.git\ncd beyond-mcp-server\n```\n\n2. Install dependencies\n```bash\nnpm install\n```\n\n3. Create a .env file from the template\n```bash\ncp .env.example .env\n# Edit .env with your API keys\n```\n\n4. Configure your environment variables\n   - **Required**: Set `NEYNAR_API_KEY` in your .env file\n   - You can obtain a Neynar API key from [https://neynar.com/](https://neynar.com/)\n   - Without a valid API key, Farcaster functionality will not work\n\n5. Build and start the server\n```bash\nnpm run build\nnpm start  # For stdio mode (default)\n# OR\nnpm run start:http  # For HTTP/SSE mode\n```\n\n## Using with Claude for Desktop\n\n1. Build the server\n```bash\nnpm run build\n```\n\n2. Make sure your .env file is properly configured with your API keys\n   - The server will look for .env in the following locations:\n     - Current working directory\n     - Project root directory\n     - Parent directories (up to 3 levels)\n   - You can also set environment variables directly in your system\n\n3. Add the server to your Claude Desktop configuration at:\n* macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n* Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n  \n\n```json\n{\n  \"mcpServers\": {\n    \"beyond-social\": {\n      \"command\": \"/usr/local/bin/node\",\n      \"args\": [\n        \"/full/path/to/beyond-mcp-server/dist/index.js\",\n        \"--stdio\"\n      ]\n    }\n  }\n}\n```\n\n4. Alternatively, you can pass the API key and other environment variables directly in the Claude Desktop configuration (**recommended**):\n\n```json\n{\n  \"mcpServers\": {\n    \"beyond-social\": {\n      \"command\": \"/usr/local/bin/node\",\n      \"args\": [\n        \"/full/path/to/beyond-mcp-server/dist/index.js\",\n        \"--stdio\"\n      ],\n      \"env\": {\n        \"NEYNAR_API_KEY\": \"YOUR_API_KEY_HERE\",\n        \"ENABLE_FARCASTER\": \"true\",\n        \"ENABLE_TWITTER\": \"false\"\n      }\n    }\n  }\n}\n```\n\n5. Restart Claude for Desktop\n\n## MCP Capabilities\n\n### Resources\n\n* `social://{platform}/{query}/search` - Search content on a platform\n* `social://{platform}/user/{userId}/profile` - Get user profile\n* `social://{platform}/wallet/{walletAddress}/profile` - Get user profile by wallet address (Farcaster only)\n* `social://{platform}/user/{userId}/balance` - Get user's wallet balance (Farcaster only)\n  - Accepts either FID (numeric) or username\n  - If username is provided, automatically converts to FID before fetching balance\n* `social://{platform}/wallet/{walletAddress}/profile` - Get user profile by wallet address\n* `social://{platform}/user/{userId}/content` - Get user content\n* `social://{platform}/thread/{threadId}` - Get conversation thread\n* `social://{platform}/trending` - Get trending topics\n* `social://{platform}/trending-feed` - Get trending feed content with multi-provider support (Farcaster only)\n  - Supports providers: neynar (default), openrank, mbd\n  - Parameters: timeWindow (1h, 6h, 12h, 24h, 7d, 30d), limit\n* `social://{platform}/channels/search` - Search for channels on a platform (Farcaster only)\n  - Parameters: query, limit, cursor\n  - Returns channel details including name, description, follower count, and metadata\n* `social://{platform}/channels/bulk-search` - Search for multiple channels in parallel (Farcaster only)\n  - Parameters: queries (array), limit, cursor\n  - Returns results for each query with channel details and pagination info\n\n### Tools\n\n* `search-content` - Search for content on a social platform\n* `get-user-profile` - Get a user's profile information\n* `get-user-profile-by-wallet` - Get user profile using wallet address (Farcaster only)\n* `get-user-balance` - Get user's wallet balance (Farcaster only)\n  - Accepts either FID (numeric) or username\n  - Automatically handles username to FID conversion\n* `get-user-content` - Get content from a specific user\n* `get-thread` - Get a conversation thread\n* `get-trending-topics` - Get current trending topics\n* `getTrendingFeed` - Get trending feed with multi-provider support (Farcaster only)\n* `get-wallet-profile` - Get profile based on wallet address\n* `search-channels` - Search for channels on a platform (Farcaster only)\n  - Parameters: query, limit, cursor\n  - Returns detailed channel information including follower count and metadata\n* `search-bulk-channels` - Search for multiple channels in parallel (Farcaster only)\n  - Parameters: queries (array), limit, cursor\n  - Returns results for each query with channel details and pagination info\n\n### Prompts\n\n* `analyze-thread` - Analyze a social media thread\n* `summarize-user-activity` - Summarize a user's activity\n* `explore-trending-topics` - Explore trending topics on a platform\n* `analyze-search-results` - Analyze search results for a query\n* `explore-trending-feed` - Analyze trending feed content across different providers\n* `get-wallet-profile` - Get and analyze user profile by wallet address\n* `check-user-balance` - Analyze user's wallet balance and holdings\n  - Works with both FID and username inputs\n  - Handles automatic FID resolution for usernames\n* `explore-channels` - Analyze and explore channels on a platform\n  - Provides insights about channel popularity and content\n  - Helps discover relevant channels based on search criteria\n* `explore-bulk-channels` - Analyze and compare multiple channels in parallel\n  - Efficiently searches and compares multiple channels\n  - Provides insights about channel relationships and trends\n\n## Extending with New Providers\n\nTo add a new social platform provider:\n\n1. Create a new directory in `src/providers/`\n2. Implement the `ContentProvider` interface\n3. Register the provider in the registry\n\nExample:\n\n```typescript\nimport { ContentProvider } from '../interfaces/provider';\n\nexport class MyPlatformProvider implements ContentProvider {\n  public name = 'myplatform';\n  public platform = 'myplatform';\n  \n  // Implement all required methods\n}\n```\n\n## Development\n\n### Running in Development Mode\n\n```bash\nnpm run dev        # stdio mode\nnpm run dev:http   # HTTP mode\n```\n\n### Testing\n\n```bash\nnpm test\n```\n\n### Linting\n\n```bash\nnpm run lint\nnpm run lint:fix\n```\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Changelog\n\n   All notable changes to this project will be documented in this file.\n   \n   ### [1.0.0] - 2025-Mar-10\n   \n   #### Added\n   - Initial release\n   - Farcaster integration via Neynar API\n   - MCP compliant server implementation\n   - Support for both stdio and HTTP modes\n\n   ### [1.0.1] - 2025-Mar-19\n   \n   #### Added\n   - Added new tools and resource to fetch user profile with wallet address\n   - Added new tests\n     \n   ### [1.0.2] - 2025-Mar-21\n   \n   #### Added\n   - Added functionality to retrieve wallet balances of Farcaster users via ID or username\n   - Implemented multi-provider support for trending feed content\n   - Enhanced updateUserProfile with additional user details\n   - Added comprehensive tests to ensure reliability and performance\n  \n   ### [1.0.3] - 2025-Mar-24\n   \n   #### Added\n   - Add support to fetch Single and Bulk farcaster channel information \n   \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "twitter",
        "onchain",
        "twitter integration",
        "social platform",
        "mcp server"
      ],
      "category": "ecommerce-and-retail"
    },
    "CooKey-Monster--EbayMcpServer": {
      "owner": "CooKey-Monster",
      "name": "EbayMcpServer",
      "url": "https://github.com/CooKey-Monster/EbayMcpServer",
      "imageUrl": "/freedevtools/mcp/pfp/CooKey-Monster.webp",
      "description": "Fetches auction listings from Ebay.com using simple prompts to discover various items, like comics or collectibles, by leveraging Ebay's REST API for real-time auction data.",
      "stars": 6,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T05:23:12Z",
      "readme_content": "# Ebay MCP server\n\nSimple Ebay server that lets you fetch auctions from Ebay.com\n\nUses the official [MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) to handle protocol communication and server interactions.\n\n## Example\n\nLet's you use prompts like, \"Find me 10 auctions for batman comics\"\n\n## Components\n\n### Tools\n\nThe server provides a single tool:\n\n- list_auction: Scan ebay for auctions. This tool is helpful for finding auctions on ebay.\n  - Required \"query\" argument for the search query\n  - Optional \"ammount\" argument for ammount of results\n    - defaults to 0\n  - Returns result from Ebay's REST API\n\n## Installation\n\n### Requires [UV](https://github.com/astral-sh/uv) (Fast Python package and project manager)\n\nIf uv isn't installed.\n\n```bash\n# Using Homebrew on macOS\nbrew install uv\n```\n\nor\n\n```bash\n# On macOS and Linux.\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# On Windows.\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nNext, install the MCP server\n\n```bash\n# Install from source\nuv pip install git+https://github.com/CooKey-Monster/EbayMcpServer.git\n```\n\n### Environment Variables\n\nThe following environment variable is required; you can find them on the [Ebay developer portal](https://developer.ebay.com/develop)\n\n- `CLIENT_ID`: Your Ebay client ID\n- `CLIENT_SECRET`: Your Ebay client secret\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ebaymcpserver",
        "ecommerce",
        "auction",
        "monster ebaymcpserver",
        "ebaymcpserver fetches",
        "leveraging ebay"
      ],
      "category": "ecommerce-and-retail"
    },
    "Crossmint--mcp-crossmint-checkout": {
      "owner": "Crossmint",
      "name": "mcp-crossmint-checkout",
      "url": "https://github.com/Crossmint/mcp-crossmint-checkout",
      "imageUrl": "/freedevtools/mcp/pfp/Crossmint.webp",
      "description": "Enable programmatic purchasing of physical and virtual goods using stablecoins with a single API call. Offers reliable purchases including expedited shipping, receipts, tax collection, and support for returns and refunds across a vast inventory.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-04T00:52:44Z",
      "readme_content": "# Crossmint Checkout MCP Server\n\nCrossmint's Checkout allows programmatic purchase of physical and virtual goods and services, \nwith programmable money. It enables your AI agent to reliably purchase over 1 billion items, \nwithout any cost overhead, nor hassle and unreliability of having to use virtual debit cards and browser\nuse to pay in online forms. \n\nIf your agent can obtain an item SKU/identifier, this API can let it buy it. \n\n\n\n## Capabilities\n\nThis MCP server takes an item identifier (from URL to SKUs) and allows you to execute a purchase of it\nin a single API call. \n\nThese purchases are real: \n- The item is delivered with expedited shipping\n- A receipt is generated\n- Sales tax is properly collected\n- Returns and refunds are allowed\n\n### Available Inventory\n- **Amazon** (US only)\n   - Prime shipping included\n- **Shopify** (Global) \n   - Buy anything from any shopify store\n\nComing soon:\n- Flights\n- Hotels\n- Dining\n- Tickets\n\n## How are purchases paid\n\nThis MCP server is configured to perform purchases with Crossmint credits. Please [contact us](support@crossmint.io) if you are interested to learn more. To use USDC instead of credits:\n1. Change  TOKEN variable to \"usdc\" in src/index.ts\n2. Change the CREDIT_TOKEN_ADDRESS to the USDC address on ethereum `0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48`\n\n### How to get a company treasury wallet\n\nCrossmint will create a wallet for your company and share with you the wallet address. \n\n### How to get credits\n\nCrossmint will securely transfer credits to the company wallet. The company will then be able to transfer credits to agent wallets whenever agents want to top up their wallet or complete a transaction.\n\n## Setup\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/Crossmint/mcp-crossmint-checkout.git\n   cd mcp-crossmint-checkout\n   ```\n\n2. **Install dependencies**\n   ```bash\n   npm install\n   ```\n\n3. **Create .env file** \n\n   ```bash\n   cp .env.template .env\n   ```\n\n4. **Obtain Crossmint API key**\n\n   - Login to [Crossmint Console](https://www.crossmint.com/signin?callbackUrl=/console) and navigate to Integrate > API Keys > Create new server key \n   - Select scopes: `orders.create`, `orders.read`, `wallets:transactions.create`, `wallets.create`, `wallets.read`, `wallets.balance:read`. \n   - Copy API key and paste it in your .env file\n\n5. **Fill in user & delivery information**\n\n   Specify the user's id as well as their name, shipping address, and email in the .env file. Also make sure to fill in your company's wallet address.\n\n6. **Test vs. production**\n\n   Keep the `ENV` variable in your .env file to \"test\" so you can test orders. Change it to \"prod\" to complete real orders. \n\n7. **Generate an agent wallet**\n   ```bash\n   npm run generate-agent-wallet\n   ```\n\n8. **Transfer credits to agent wallet**\n   \n   To transfer 5 credits from the company's wallet to a user identified via userId \"johnjoe\", run the following\n   ```bash\n   npm run transfer-credits -- 5 johndoe\n   ```\n   If instead you uniquely identify users via email, you can adjust the user locator in `generate-wallet.js` and `credit-transfer.js` \n\n9. **Update Claude's configuration**\n   ```bash\n   npm run update-claude-config\n   ```\n\n10. **Build the project**\n\n    ```bash\n    npm run build\n    ```\n\n11. **Run the server**\n\n    ```bash\n    npm run crossmint-checkout\n    ```\n\n## Use it with Claude\n\nAsk Claude to:\n1. Describe the product you are looking for and ask for its Amazon.com link, i.e. \"I'm looking to buy non-flavored LaCroix sprankling water! Can you look up available listings on Amazon and find something under $5? Share the Amazon link when you are done.\"\n2. Ask Claude to buy it for you, i.e. \"Buy this https://www.amazon.com/Sparkling-Naturally-Essenced-Calories-Sweeteners/dp/B00O79SKV6\"\n3. Check your email for the purchase receipt\n\n## Tools\n\n1. `create-order`\n   Creates a new order for a specified product. Amazon products are specified as 'amazon:<amazon_product_id>' or 'amazon:<asin>', while Shopify products as 'shopify:<product-url>:<variant-id>'.\n\n   Example Prompt:\n   > \"Buy me this https://www.amazon.com/Sparkling-Naturally-Essenced-Calories-Sweeteners/dp/B00O79SKV6\"\n\n2. `check-order`\n   Checks the status of an existing order. \n\n   Example Prompt:\n   > \"What's the status of my order? \n\n3. `get-usd-balance`\n   Gets the USD balance of the wallet.\n\n   Example Prompt:\n   > \"What's my wallet's balance?\"\n\n## Support\n\nReach out directly to Crossmint via support@crossmint.io with any questions.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "crossmint",
        "stablecoins",
        "retail crossmint",
        "crossmint checkout",
        "mcp crossmint"
      ],
      "category": "ecommerce-and-retail"
    },
    "Domoteek--mcp-server-airbnb": {
      "owner": "Domoteek",
      "name": "mcp-server-airbnb",
      "url": "https://github.com/Domoteek/mcp-server-airbnb",
      "imageUrl": "/freedevtools/mcp/pfp/Domoteek.webp",
      "description": "Search for Airbnb listings based on various parameters such as location, check-in and check-out dates, and guest count. Retrieve detailed information and direct links to the listings for easy access and trip planning.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-03-24T15:59:47Z",
      "readme_content": "# Serveur MCP Airbnb\n[![smithery badge](https://smithery.ai/badge/@Domoteek/mcp-server-airbnb)](https://smithery.ai/server/@Domoteek/mcp-server-airbnb)\n\nServeur MCP pour rechercher des annonces Airbnb et obtenir les d√©tails des logements. Fournit des liens directs vers les annonces Airbnb dans les r√©sultats de recherche.\n\n## Outils\n\n1. `airbnb_search`\n   - Recherche d'annonces Airbnb\n   - Entr√©e requise : `location` (cha√Æne de caract√®res)\n   - Entr√©es optionnelles :\n     - `placeId` (cha√Æne de caract√®res)\n     - `checkin` (cha√Æne de caract√®res, AAAA-MM-JJ)\n     - `checkout` (cha√Æne de caract√®res, AAAA-MM-JJ)\n     - `adults` (nombre)\n     - `children` (nombre)\n     - `infants` (nombre)\n     - `pets` (nombre)\n     - `minPrice` (nombre)\n     - `maxPrice` (nombre)\n     - `cursor` (cha√Æne de caract√®res)\n     - `ignoreRobotsText` (bool√©en)\n   - Retourne : Tableau d'annonces avec des d√©tails comme le nom, le prix, l'emplacement, etc. Chaque annonce inclut une `url` directe vers la page Airbnb.\n\n2. `airbnb_listing_details`\n   - Obtenir des informations d√©taill√©es sur une annonce Airbnb sp√©cifique\n   - Entr√©e requise : `id` (cha√Æne de caract√®res)\n   - Entr√©es optionnelles :\n     - `checkin` (cha√Æne de caract√®res, AAAA-MM-JJ)\n     - `checkout` (cha√Æne de caract√®res, AAAA-MM-JJ)\n     - `adults` (nombre)\n     - `children` (nombre)\n     - `infants` (nombre)\n     - `pets` (nombre)\n     - `ignoreRobotsText` (bool√©en)\n   - Retourne : Informations d√©taill√©es sur l'annonce, y compris la description, les d√©tails de l'h√¥te, les √©quipements, les tarifs, etc. La r√©ponse inclut une `url` directe vers la page de l'annonce Airbnb.\n\n## Fonctionnalit√©s\n\n- Respecte les r√®gles du fichier robots.txt d'Airbnb\n- Utilise cheerio pour l'analyse HTML\n- Aucune cl√© API requise\n- Retourne des donn√©es JSON structur√©es\n- R√©duit la charge de contexte en aplatissant et en s√©lectionnant les donn√©es\n- Fournit des URL directes vers les annonces Airbnb\n\n## Installation\n\n### Installation sur Claude Desktop\nAvant de commencer, assurez-vous que [Node.js](https://nodejs.org/) est install√© sur votre ordinateur pour que `npx` fonctionne.\n\n1. Allez dans : Param√®tres > D√©veloppeur > Modifier la configuration\n\n2. Ajoutez ce qui suit √† votre fichier `claude_desktop_config.json` :\n\n```json\n{\n  \"mcpServers\": {\n    \"airbnb\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@Domoteek/mcp-server-airbnb\"\n      ]\n    }\n  }\n}\n```\n\nPour ignorer le fichier robots.txt pour toutes les requ√™tes, utilisez cette version avec l'argument `--ignore-robots-txt` :\n\n```json\n{\n  \"mcpServers\": {\n    \"airbnb\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@Domoteek/mcp-server-airbnb\",\n        \"--ignore-robots-txt\"\n      ]\n    }\n  }\n}\n```\n3. Red√©marrez Claude Desktop et planifiez votre prochain voyage incluant des Airbnbs !\n\n### Autre option : Installation via Smithery\n\nPour installer mcp-server-airbnb pour Claude Desktop automatiquement via [Smithery](https://smithery.ai/server/@Domoteek/mcp-server-airbnb) :\n\n```bash\nnpx -y @smithery/cli install @Domoteek/mcp-server-airbnb --client claude\n```\n\n## Compilation (pour les d√©veloppeurs)\n\n```bash\nnpm install\nnpm run build\n```\n\n## Licence\n\nCe serveur MCP est sous licence MIT.\n\n## Avertissement\n\nAirbnb est une marque d√©pos√©e d'Airbnb, Inc.\nDomoteek n'est pas li√© √† Airbnb, Inc. ou √† ses filiales\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "airbnb",
        "listings",
        "ecommerce",
        "airbnb search",
        "search airbnb",
        "airbnb listings"
      ],
      "category": "ecommerce-and-retail"
    },
    "Fewsats--fewsats-mcp": {
      "owner": "Fewsats",
      "name": "fewsats-mcp",
      "url": "https://github.com/Fewsats/fewsats-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Fewsats.webp",
      "description": "Integrates with Fewsats to enable secure transactions for AI agents, allowing retrieval of wallet balances, available payment methods, and management of purchase transactions.",
      "stars": 21,
      "forks": 9,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-30T09:46:39Z",
      "readme_content": "# fewsats-mcp: A Fewsats MCP Server\n\n## Overview\n\nThis MCP server integrates with [Fewsats](https://fewsats.com) and allows AI Agents to purchase anything in a secure way.\n\nMCP is\n\n\n### Tools\n\n1. `balance`\n   - Retrieve the balance of the user's wallet\n   - Input: None\n   - Returns: Current wallet balance information\n\n2. `payment_methods`\n   - Retrieve the user's payment methods\n   - Input: None\n   - Returns: List of available payment methods\n\n3. `pay_offer`\n   - Pays an offer with the specified ID from the l402_offers\n   - Input:\n     - `offer_id` (string): String identifier for the offer\n     - `l402_offer` (object): Offer details containing:\n       - `offers`: Array of offer objects with ID, amount, currency, description, title\n       - `payment_context_token`: Payment context token string\n       - `payment_request_url`: URL for payment request\n       - `version`: API version string\n   - Returns: Payment status response\n\n4. `payment_info`\n   - Retrieve the details of a payment\n   - Input:\n     - `pid` (string): Payment ID to retrieve information for\n   - Returns: Detailed payment information\n\n\n## Installation\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *fewsats-mcp*.\n\n```bash\nuvx fewsats-mcp\n```\n\n### Using PIP\n\nAlternatively you can install `fewsats-mcp` via pip:\n\n```bash\npip install fewsats-mcp\n```\n\nAfter installation, you can run it as a script using:\n\n```bash\nfewsats-mcp\n```\n\n## Configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n**Important**: Replace `YOUR_FEWSATS_API_KEY` with the API key you obtained from [Fewsats.com](https://fewsats.com/).\n\n<details>\n<summary>Using uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"Fewsats Server\": {\n    \"command\": \"uvx\",\n    \"args\": [\"fewsats-mcp\"],\n    \"env\": {\n      \"FEWSATS_API_KEY\": \"YOUR_FEWSATS_API_KEY\"\n    }\n  }\n}\n```\n</details>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fewsats",
        "ecommerce",
        "mcp",
        "retail fewsats",
        "fewsats mcp",
        "fewsats enable"
      ],
      "category": "ecommerce-and-retail"
    },
    "Funmula-Corp--BigGo-MCP-Server": {
      "owner": "Funmula-Corp",
      "name": "BigGo-MCP-Server",
      "url": "https://github.com/Funmula-Corp/BigGo-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/Funmula-Corp.webp",
      "description": "Enables product search across multiple e-commerce platforms, tracks product price histories, and performs specifications comparison (disabled in certain versions). Utilizes APIs from BigGo for data retrieval.",
      "stars": 14,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-27T13:30:09Z",
      "readme_content": "# BigGo MCP Server\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/BigGo-MCP-Server?style=for-the-badge)\n[![PyPI - Version](https://img.shields.io/pypi/v/BigGo-MCP-Server?style=for-the-badge)](https://pypi.org/project/BigGo-MCP-Server/)\n![PyPI - License](https://img.shields.io/pypi/l/BigGo-MCP-Server?style=for-the-badge)\n\n## Introduction\nBigGo MCP Server utilizes APIs from BigGo, a professional price comparison website.\n## Features\n> Supports `stdio` and `SSE` transports\n\n- **Product Discovery**: Search for products across multiple e-commerce platforms (Amazon, Aliexpress, Ebay, Taobao, Shopee ... etc.)\n- **Price History Tracking**: Track product price history by supplying product url or related terms.\n- **Spec Comparison [Disabled on versions >= v0.1.28]**: Compare and find products based on their specifications, from basic infos to more complex technical specs.\n\n\n## Installation\n### Prerequisites\n1. Python >= 3.10\n2. [uvx package manager ( Included with uv )](https://docs.astral.sh/uv/getting-started/installation/)\n3. BigGo Certification (`client_id` and `client_secret`) for specification search. \n\n#### How to obtain BigGo certification?\n  - [Register](https://account.biggo.com/?url=https%3A%2F%2Fbiggo.com%2F&lang=en&source=web&type=biggo3&method=register) a BigGo account if you don't have one.\n  - Go to [BigGo Certification Page](https://account.biggo.com/setting/token)\n  - Click \"Generate certification\" button\n  - \n  - Copy the `client_id` and `client_secret`\n  - Use them in the MCP Server configuration (`BIGGO_MCP_SERVER_CLIENT_ID` and `BIGGO_MCP_SERVER_CLIENT_SECRET`)\n\n### Installation Config\n```json\n{\n  \"mcpServers\": {\n    \"biggo-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [ \"BigGo-MCP-Server@latest\"],\n      \"env\": {\n        \"BIGGO_MCP_SERVER_CLIENT_ID\": \"CLIENT_ID\",\n        \"BIGGO_MCP_SERVER_CLIENT_SECRET\": \"CLIENT_SECRET\",\n        \"BIGGO_MCP_SERVER_REGION\": \"REGION\"\n      }\n    }\n  }\n}\n```\n> For specific version use `BigGo-MCP-Server@VERSION`, ex: `BigGo-MCP-Server@0.1.1`\n\n## Environment Variables\n| Variable                         | Description               | Default | Choices                                    |\n| -------------------------------- | ------------------------- | ------- | ------------------------------------------ |\n| `BIGGO_MCP_SERVER_CLIENT_ID`     | Client ID                 | None    | Required for specification search          |\n| `BIGGO_MCP_SERVER_CLIENT_SECRET` | Client Secret             | None    | Required for specification search          |\n| `BIGGO_MCP_SERVER_REGION`        | Region for product search | TW      | US, TW, JP, HK, SG, MY, IN, PH, TH, VN, ID |\n| `BIGGO_MCP_SERVER_SSE_PORT`      | Port for SSE server       | 9876    | Any available port number                  |\n| `BIGGO_MCP_SERVER_SERVER_TYPE`   | Server transport type     | stdio   | stdio, sse                                 |\n\n> Default SSE URL: http://localhost:9876/sse\n\n## Available Tools\n- `product_search`: Product search with BigGo search api\n- `price_history_graph`: Link that visualizes product price history\n- `price_history_with_history_id`: Uses history IDs from product search results\n- `price_history_with_url`: Tracks price history using product URLs\n- `spec_indexes`: Lists available Elasticsearch indexes for product specifications\n- `spec_mapping`: Shows Elasticsearch index mapping with example documents\n- `spec_search`: Query product specifications from Elasticsearch\n- `get_current_region`: Get the current region\n\n## FAQ\n### How to trigger tool usage?\nFor **Product Discovery** related:\n```\nLook for Nike running shoes\n```\nFor **Price History Tracking** related:\n```\nShow me the price history of this product: https://some-product-url\n```\nFor **Spec Comparison** related:\n```\nFind me phones with 16GB RAM and 1TB storage\n```\n```\nPlease show me diving watches that can withstand the most water pressure\n```\n\n## Build\nSee [build.md](docs/build.md) for more details.\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "biggo",
        "commerce",
        "biggo data",
        "ecommerce retail",
        "apis biggo"
      ],
      "category": "ecommerce-and-retail"
    },
    "GeLi2001--shopify-mcp": {
      "owner": "GeLi2001",
      "name": "shopify-mcp",
      "url": "https://github.com/GeLi2001/shopify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/GeLi2001.webp",
      "description": "Manage Shopify store data through a GraphQL API, enabling interaction with products, customers, and orders. Streamline e-commerce operations with advanced querying and filtering capabilities for efficient data management.",
      "stars": 81,
      "forks": 27,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T04:17:45Z",
      "readme_content": "# Shopify MCP Server\n\n(please leave a star if you like!)\n\nMCP Server for Shopify API, enabling interaction with store data through GraphQL API. This server provides tools for managing products, customers, orders, and more.\n\n**üì¶ Package Name: `shopify-mcp`**  \n**üöÄ Command: `shopify-mcp` (NOT `shopify-mcp-server`)**\n\n<a href=\"https://glama.ai/mcp/servers/@GeLi2001/shopify-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@GeLi2001/shopify-mcp/badge\" alt=\"Shopify MCP server\" />\n</a>\n\n## Features\n\n- **Product Management**: Search and retrieve product information\n- **Customer Management**: Load customer data and manage customer tags\n- **Order Management**: Advanced order querying and filtering\n- **GraphQL Integration**: Direct integration with Shopify's GraphQL Admin API\n- **Comprehensive Error Handling**: Clear error messages for API and authentication issues\n\n## Prerequisites\n\n1. Node.js (version 16 or higher)\n2. Shopify Custom App Access Token (see setup instructions below)\n\n## Setup\n\n### Shopify Access Token\n\nTo use this MCP server, you'll need to create a custom app in your Shopify store:\n\n1. From your Shopify admin, go to **Settings** > **Apps and sales channels**\n2. Click **Develop apps** (you may need to enable developer preview first)\n3. Click **Create an app**\n4. Set a name for your app (e.g., \"Shopify MCP Server\")\n5. Click **Configure Admin API scopes**\n6. Select the following scopes:\n   - `read_products`, `write_products`\n   - `read_customers`, `write_customers`\n   - `read_orders`, `write_orders`\n7. Click **Save**\n8. Click **Install app**\n9. Click **Install** to give the app access to your store data\n10. After installation, you'll see your **Admin API access token**\n11. Copy this token - you'll need it for configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"shopify-mcp\",\n        \"--accessToken\",\n        \"<YOUR_ACCESS_TOKEN>\",\n        \"--domain\",\n        \"<YOUR_SHOP>.myshopify.com\"\n      ]\n    }\n  }\n}\n```\n\nLocations for the Claude Desktop config file:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Alternative: Run Locally with Environment Variables\n\nIf you prefer to use environment variables instead of command-line arguments:\n\n1. Create a `.env` file with your Shopify credentials:\n\n   ```\n   SHOPIFY_ACCESS_TOKEN=your_access_token\n   MYSHOPIFY_DOMAIN=your-store.myshopify.com\n   ```\n\n2. Run the server with npx:\n   ```\n   npx shopify-mcp\n   ```\n\n### Direct Installation (Optional)\n\nIf you want to install the package globally:\n\n```\nnpm install -g shopify-mcp\n```\n\nThen run it:\n\n```\nshopify-mcp --accessToken=<YOUR_ACCESS_TOKEN> --domain=<YOUR_SHOP>.myshopify.com\n```\n\n**‚ö†Ô∏è Important:** If you see errors about \"SHOPIFY_ACCESS_TOKEN environment variable is required\" when using command-line arguments, you might have a different package installed. Make sure you're using `shopify-mcp`, not `shopify-mcp-server`.\n\n## Available Tools\n\n### Product Management\n\n1. `get-products`\n\n   - Get all products or search by title\n   - Inputs:\n     - `searchTitle` (optional string): Filter products by title\n     - `limit` (number): Maximum number of products to return\n\n2. `get-product-by-id`\n   - Get a specific product by ID\n   - Inputs:\n     - `productId` (string): ID of the product to retrieve\n\n3. `createProduct`\n    - Create new product in store \n    - Inputs:\n        - `title` (string): Title of the product\n        - `descriptionHtml` (string): Description of the product\n        - `vendor` (string): Vendor of the product\n        - `productType` (string): Type of the product\n        - `tags` (string): Tags of the product\n        - `status` (string): Status of the product \"ACTIVE\", \"DRAFT\", \"ARCHIVED\". Default \"DRAFT\"\n\n### Customer Management\n1. `get-customers`\n\n   - Get customers or search by name/email\n   - Inputs:\n     - `searchQuery` (optional string): Filter customers by name or email\n     - `limit` (optional number, default: 10): Maximum number of customers to return\n\n2. `update-customer`\n\n   - Update a customer's information\n   - Inputs:\n     - `id` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `firstName` (string, optional): Customer's first name\n     - `lastName` (string, optional): Customer's last name\n     - `email` (string, optional): Customer's email address\n     - `phone` (string, optional): Customer's phone number\n     - `tags` (array of strings, optional): Tags to apply to the customer\n     - `note` (string, optional): Note about the customer\n     - `taxExempt` (boolean, optional): Whether the customer is exempt from taxes\n     - `metafields` (array of objects, optional): Customer metafields for storing additional data\n\n3. `get-customer-orders`\n   - Get orders for a specific customer\n   - Inputs:\n     - `customerId` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n### Order Management\n\n1. `get-orders`\n\n   - Get orders with optional filtering\n   - Inputs:\n     - `status` (optional string): Filter by order status\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n2. `get-order-by-id`\n\n   - Get a specific order by ID\n   - Inputs:\n     - `orderId` (string, required): Full Shopify order ID (e.g., \"gid://shopify/Order/6090960994370\")\n\n3. `update-order`\n\n   - Update an existing order with new information\n   - Inputs:\n     - `id` (string, required): Shopify order ID\n     - `tags` (array of strings, optional): New tags for the order\n     - `email` (string, optional): Update customer email\n     - `note` (string, optional): Order notes\n     - `customAttributes` (array of objects, optional): Custom attributes for the order\n     - `metafields` (array of objects, optional): Order metafields\n     - `shippingAddress` (object, optional): Shipping address information\n\n## Debugging\n\nIf you encounter issues, check Claude Desktop's MCP logs:\n\n```\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "commerce",
        "manage shopify",
        "shopify store",
        "shopify mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "Hypefury--hypefury-mcp": {
      "owner": "Hypefury",
      "name": "hypefury-mcp",
      "url": "https://github.com/Hypefury/hypefury-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Hypefury.webp",
      "description": "Authenticate with Hypefury to schedule social media posts and streamline social media management. Integrates with Hypefury's API for seamless post scheduling.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-15T16:23:22Z",
      "readme_content": "# Hypefury MCP Server\n\nThis project is a Model Context Protocol (MCP) server for integrating with Hypefury, a social media scheduling and growth platform. The server provides tools for authenticating with Hypefury and scheduling posts.\n\n## Features\n\n- Authentication with Hypefury API\n- Scheduling posts on social media via Hypefury\n- Deployment-ready for Smithery.ai\n- Local testing capability\n\n## Getting Started\n\n### Prerequisites\n\n- Node.js 16 or higher\n- npm or yarn\n\n### Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/eugenechabanov/hf-mcp.git\ncd hf-mcp\n\n# Install dependencies\nnpm install\n```\n\n### Environment Variables\n\nCreate a `.env` file in the root directory with the following variables:\n\n```\nHF_API_KEY=your_hypefury_api_key\n```\n\nAlternatively, when deploying to Smithery, set these as environment secrets.\n\n## Local Testing\n\nTest the MCP server locally with:\n\n```bash\n# Build and start with local testing transport\nnpm run dev:local\n```\n\nOr test with MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector node build/local.js\n```\n\nThen open http://localhost:5173 in your browser to interact with the MCP server.\n\n## Deployment to Smithery\n\n1. Push this repository to GitHub\n2. Create a new server on Smithery.ai\n3. Connect to this repository\n4. Set `HF_API_KEY` as a secret\n5. Deploy\n\n## Tools\n\nThis MCP server provides the following tools:\n\n1. `auth` - Authenticate with Hypefury\n2. `schedule_post` - Schedule a post to be published via Hypefury\n\n## License\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hypefury",
        "ecommerce",
        "mcp",
        "authenticate hypefury",
        "hypefury api",
        "retail hypefury"
      ],
      "category": "ecommerce-and-retail"
    },
    "KhryptorGraphics--giggatek": {
      "owner": "KhryptorGraphics",
      "name": "giggatek",
      "url": "https://github.com/KhryptorGraphics/giggatek",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "GigGatek is an ecommerce platform focused on refurbished computer hardware, offering functionalities for direct sales and rent-to-own services. It supports user interactions through a web interface with backend operations in Python and a MySQL database for data management.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "giggatek",
        "ecommerce",
        "retail",
        "giggatek ecommerce",
        "giggatek giggatek",
        "khryptorgraphics giggatek"
      ],
      "category": "ecommerce-and-retail"
    },
    "Leonelberio--the-wordpress-mcp-server": {
      "owner": "Leonelberio",
      "name": "the-wordpress-mcp-server",
      "url": "https://github.com/Leonelberio/the-wordpress-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Leonelberio.webp",
      "description": "Interact seamlessly with WordPress sites using the WordPress REST API to create, retrieve, and update posts in an efficient manner.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-03T13:06:53Z",
      "readme_content": "# WordPress MCP Server\n\nA Model Context Protocol (MCP) server for WordPress integration, compatible with Windows, macOS, and Linux.\n\n## Overview\n\nThis MCP server enables interaction with WordPress sites through the WordPress REST API. It provides tools for creating, retrieving, and updating posts using JSON-RPC 2.0 protocol.\n\n## Installation\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\nAdd the server to your MCP settings file with environment variables for WordPress credentials:\n\n```json\n{\n  \"mcpServers\": {\n    \"wordpress\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/build/index.js\"],\n      \"env\": {\n        \"WORDPRESS_SITE_URL\": \"https://your-wordpress-site.com\",\n        \"WORDPRESS_USERNAME\": \"your-username\",\n        \"WORDPRESS_PASSWORD\": \"your-app-password\"\n      }\n    }\n  }\n}\n```\n\nThe environment variables are:\n- WORDPRESS_SITE_URL: Your WordPress site URL\n- WORDPRESS_USERNAME: WordPress username\n- WORDPRESS_PASSWORD: WordPress application password\n\nYou can also provide these credentials in the request parameters if you prefer not to use environment variables.\n\n## Available Methods\n\n### create_post\nCreates a new WordPress post.\n\nParameters:\n- siteUrl: (optional if set in env) WordPress site URL\n- username: (optional if set in env) WordPress username\n- password: (optional if set in env) WordPress application password\n- title: Post title\n- content: Post content\n- status: (optional) 'draft' | 'publish' | 'private' (default: 'draft')\n\n### get_posts\nRetrieves WordPress posts.\n\nParameters:\n- siteUrl: (optional if set in env) WordPress site URL\n- username: (optional if set in env) WordPress username\n- password: (optional if set in env) WordPress application password\n- perPage: (optional) Number of posts per page (default: 10)\n- page: (optional) Page number (default: 1)\n\n### update_post\nUpdates an existing WordPress post.\n\nParameters:\n- siteUrl: (optional if set in env) WordPress site URL\n- username: (optional if set in env) WordPress username\n- password: (optional if set in env) WordPress application password\n- postId: ID of the post to update\n- title: (optional) New post title\n- content: (optional) New post content\n- status: (optional) 'draft' | 'publish' | 'private'\n\n## Security Note\n\nFor security, it's recommended to use WordPress application passwords instead of your main account password. You can generate an application password in your WordPress dashboard under Users ‚Üí Security ‚Üí Application Passwords.\n\n## Example Usage\n\nUsing environment variables:\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_post\",\n  \"params\": {\n    \"title\": \"My New Post\",\n    \"content\": \"Hello World!\",\n    \"status\": \"draft\"\n  }\n}\n```\n\nWithout environment variables:\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_post\",\n  \"params\": {\n    \"siteUrl\": \"https://your-wordpress-site.com\",\n    \"username\": \"your-username\",\n    \"password\": \"your-app-password\",\n    \"title\": \"My New Post\",\n    \"content\": \"Hello World!\",\n    \"status\": \"draft\"\n  }\n}\n```\n\n## Requirements\n\n- Node.js 20.0.0 or higher\n- WordPress site with REST API enabled\n- WordPress application password for authentication\n\n## License\n\nMIT License - See LICENSE file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "wordpress",
        "retail",
        "ecommerce retail",
        "wordpress mcp",
        "wordpress rest"
      ],
      "category": "ecommerce-and-retail"
    },
    "NFTGo--mcp-nftgo-api": {
      "owner": "NFTGo",
      "name": "mcp-nftgo-api",
      "url": "https://github.com/NFTGo/mcp-nftgo-api",
      "imageUrl": "/freedevtools/mcp/pfp/NFTGo.webp",
      "description": "Access comprehensive data and analytics for NFTs through the NFTGo API, providing detailed collection and asset information, market trends, and wallet holdings for Ethereum-based NFTs. Supports advanced search, filtering, and webhook notifications for real-time insights in the NFT ecosystem.",
      "stars": 4,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-24T23:54:35Z",
      "readme_content": "# NFTGo MCP\n\nA Model Context Protocol server that provides HTTP request to NFTGo Developer API based on NFTGo [API documentation](https://docs.nftgo.io/reference/introduction).\n\nCurrently only support Ethereum.\n\n## Key Features\n**1. NFT Collection**\n- Retrieve Collection Details: Fetch metadata and statistics for specific NFT collections.\n- List Collections: Obtain a list of NFT collections with filtering and sorting options.\n\n**2. NFT Asset**\n- Get NFT Details: Access detailed information about individual NFTs, including metadata and ownership.\n- List NFTs: Retrieve lists of NFTs based on various criteria such as collection, owner, or traits.\n\n**3. Market Data and Analytics**\n- Market Trends: Analyze market trends and metrics over time.\n- Price History: Access historical pricing data for NFTs and collections.\n- Volume and Sales Data: Retrieve data on trading volumes and sales activities.\n\n**4. User and Wallet Information**\n- Wallet Holdings: View NFTs held by specific wallet addresses.\n- Transaction History: Access the transaction history associated with wallets or NFTs.\n\n**5. Search and Filtering Capabilities**\n- Advanced Search: Perform searches across NFTs and collections using various filters and parameters.\n- Trait-Based Filtering: Filter NFTs based on specific traits or attributes.\n\n**6. Real-Time Data and Notifications**\n- Webhooks: Set up webhooks to receive real-time updates on specific events or changes.\n- Live Data Feeds: Access live data streams for market activities and NFT events.\n\n## Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"nftgoapi\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@nftgo/mcp-nftgo-api\", \"NFTGO-API-KEY\"]\n    }\n  }\n}\n```\n\nReplace `NFTGO-API-KEY` with your API key. You can create your free `NFTGo-API-KEY` [here](https://nftgo.io/developers).\n\n## Building\n\n```sh\npnpm install\npnpm build\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nftgo",
        "nft",
        "nfts",
        "nftgo api",
        "analytics nfts",
        "retail nftgo"
      ],
      "category": "ecommerce-and-retail"
    },
    "NosytLabs--KickMCP": {
      "owner": "NosytLabs",
      "name": "KickMCP",
      "url": "https://github.com/NosytLabs/KickMCP",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Integrate with Kick's streaming platform for real-time communication and monitoring. Provides secure and optimized API interactions for application enhancement.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kickmcp",
        "nosytlabs",
        "streaming",
        "nosytlabs kickmcp",
        "retail nosytlabs",
        "kick streaming"
      ],
      "category": "ecommerce-and-retail"
    },
    "Octember--flights-mcp-ts": {
      "owner": "Octember",
      "name": "flights-mcp-ts",
      "url": "https://github.com/Octember/flights-mcp-ts",
      "imageUrl": "/freedevtools/mcp/pfp/Octember.webp",
      "description": "Provides comprehensive search capabilities for flights and accommodations by utilizing the Duffel API, allowing users to search for various flight types and travel stays along with detailed offers and reviews.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-29T19:39:50Z",
      "readme_content": "# Flight + Stay Search MCP (TypeScript)\n\nA TypeScript implementation of a flight & Stay search MCP server that uses the Duffel API to search for flights. This MCP server provides tools to search for one-way, round-trip, and multi-city flights.\n\n[![smithery badge](https://smithery.ai/badge/@clockworked247/flights-mcp-ts)](https://smithery.ai/server/@clockworked247/flights-mcp-ts)\n\n## Features\n\n- Search for one-way, round-trip, and multi-city flights\n- Get detailed information about specific flight offers\n- Specify cabin class, number of passengers, and connection preferences\n- Filter by departure and arrival time windows\n- Search for travel stays (hotels/accommodations)\n- Get guest reviews for a specific stay/hotel\n\n## Setup\n\n1. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n2. Build the project:\n   ```bash\n   npm run build\n   ```\n\n3. Start the server:\n   ```bash\n   npm start\n   ```\n\n## Environment Variables\n\nCreate a `.env` file with:\n```\nDUFFEL_API_KEY=your_duffel_api_key\n```\n\nYou can start with a test API key (`duffel_test`) to try the functionality.\n\n## Using with Smithery\n\nTo publish this MCP to Smithery:\n```bash\nnpx @smithery/cli publish\n```\n\nTo run the published MCP:\n```bash\nnpx @smithery/cli run @your-username/flights-mcp-ts --config \"{\\\"duffelApiKey\\\":\\\"your_duffel_api_key\\\"}\"\n```\n\n## Available Tools\n\nThis MCP provides the following tools:\n\n1. `search_flights` - Search for one-way, round-trip, or multi-city flights\n2. `get_offer_details` - Get detailed information about a specific flight offer\n3. `search_multi_city` - A specialized tool for multi-city flight searches\n4. `search_stays` - Search for travel stays (hotels/accommodations)\n5. `get_stay_reviews` - Get guest reviews for a specific stay/hotel\n\n## Example Queries\n\n- \"Find flights from SFO to NYC on May 15, 2025\"\n- \"Search for a round-trip flight from LAX to LHR departing June 10 and returning June 20\"\n- \"Find business class flights from Tokyo to Paris for 2 adults\"\n- \"Get details for flight offer [offer_id]\"\n- \"Find hotels in London for 2 guests from 2025-06-10 to 2025-06-12\"\n- \"Get reviews for stay [hotel_id]\"\n\n---\n\n## Stays/Hotel Search and Reviews\n\n### 1. Search for Stays (`search_stays`)\n\n**Parameters:**\n- `location` (string): City, airport code, or area to search for stays\n- `check_in_date` (string): Check-in date (YYYY-MM-DD)\n- `check_out_date` (string): Check-out date (YYYY-MM-DD)\n- `guests` (number): Number of guests\n- `rooms` (number, optional): Number of rooms\n- `radius_km` (number, optional): Search radius in kilometers\n\n**Example Request:**\n```json\n{\n  \"location\": \"London\",\n  \"check_in_date\": \"2025-06-10\",\n  \"check_out_date\": \"2025-06-12\",\n  \"guests\": 2\n}\n```\n\n**Example Response:**\n```json\n{\n  \"offers\": [\n    {\n      \"offer_id\": \"off_123\",\n      \"hotel_id\": \"acc_0000AWr2VsUNIF1Vl91xg0\",\n      \"hotel_name\": \"The Grand Hotel\",\n      \"address\": \"1 Main St, London\",\n      \"price\": { \"amount\": \"350.00\", \"currency\": \"GBP\" },\n      \"room_type\": \"Deluxe Suite\",\n      \"cancellation_policy\": \"Free cancellation until 24h before check-in\"\n    }\n  ]\n}\n```\n\n**Note:** Use the `hotel_id` from the search results as the `stay_id` for reviews.\n\n---\n\n### 2. Get Stay Reviews (`get_stay_reviews`)\n\n**Parameters:**\n- `stay_id` (string): The unique Duffel stay/hotel ID (from the search_stays result)\n- `after` (string, optional): Pagination cursor (after)\n- `before` (string, optional): Pagination cursor (before)\n- `limit` (number, optional): Max reviews to return (1-200)\n\n**Example Request:**\n```json\n{\n  \"stay_id\": \"acc_0000AWr2VsUNIF1Vl91xg0\"\n}\n```\n\n**Example Response:**\n```json\n{\n  \"meta\": { \"limit\": 50, \"after\": \"...\" },\n  \"reviews\": [\n    {\n      \"text\": \"Excellent facilities. Polite staff.\\nAir conditioning could use some maintenance.\\n\",\n      \"score\": 8.4,\n      \"reviewer_name\": \"Bessie Coleman\",\n      \"created_at\": \"2025-01-01\"\n    }\n  ]\n}\n```\n\n## Local Development\n\nFor development with automatic reloading:\n```bash\nnpm run dev\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "flights",
        "flight",
        "ecommerce",
        "flights mcp",
        "octember flights",
        "mcp ts"
      ],
      "category": "ecommerce-and-retail"
    },
    "PaddleHQ--paddle-mcp-server": {
      "owner": "PaddleHQ",
      "name": "paddle-mcp-server",
      "url": "https://github.com/PaddleHQ/paddle-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/PaddleHQ.webp",
      "description": "Interact with the Paddle API to manage payments, subscriptions, and customer data, providing a unified interface for billing processes. It supports product listing, creation, and price management.",
      "stars": 28,
      "forks": 8,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-22T09:53:01Z",
      "readme_content": "# MCP Server for Paddle Billing\n\n[Paddle Billing](https://www.paddle.com/billing?utm_source=dx&utm_medium=paddle-mcp-server) is the developer-first merchant of record. We take care of payments, tax, subscriptions, and metrics with one unified API that does it all.\n\nThis is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server that provides tools for interacting with the Paddle API.\n\n> **Important:** This MCP server works with Paddle Billing. It does not support Paddle Classic. To work with Paddle Classic, see: [Paddle Classic API reference](https://developer.paddle.com/classic/api-reference/1384a288aca7a-api-reference?utm_source=dx&utm_medium=paddle-mcp-server)\n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/install-mcp?name=paddle&config=eyJjb21tYW5kIjoibnB4IC15IEBwYWRkbGUvcGFkZGxlLW1jcCIsImVudiI6eyJQQURETEVfQVBJX0tFWSI6InBkbF9zZGJ4X2FwaWtleV8iLCJQQURETEVfRU5WSVJPTk1FTlQiOiJzYW5kYm94In19)\n\n## Features\n\n- List products in your Paddle catalog\n- Create new products\n- List prices for products\n- Create new prices for products\n- List customers\n- List transactions\n- List subscriptions\n- Create custom reports for financial analysis\n\n## Installation\n\nTo use the MCP server, you'll need an API key. You can create and manage API keys in **Paddle > Developer tools > Authentication**:\n\n- Sandbox: https://sandbox-vendors.paddle.com/authentication-v2\n- Live: https://vendors.paddle.com/authentication-v2\n\nTo run the server in a client like Claude Desktop, Cursor or Windsurf, add the following to your MCP config:\n\n```json\n{\n  \"mcpServers\": {\n    \"paddle\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@paddle/paddle-mcp\", \"--api-key=PADDLE_API_KEY\", \"--environment=(sandbox|production)\"]\n    }\n  }\n}\n```\n\nReplace `PADDLE_API_KEY` with your API key, and pass the correct value as `environment`.\n\nFor detailed setup guides, see:\n\n- [Claude Desktop](https://modelcontextprotocol.io/quickstart/user)\n- [Cursor](https://docs.cursor.com/context/model-context-protocol)\n- [Windsurf](https://docs.codeium.com/windsurf/mcp)\n\n## Development\n\n1. Install dependencies:\n\n   ```bash\n   pnpm install\n   ```\n\n2. Build the server:\n\n   ```bash\n   pnpm build\n   ```\n\n3. Update client to use the local build:\n   ```json\n   {\n     \"mcpServers\": {\n       \"paddle\": {\n         \"command\": \"node\",\n         \"args\": [\"path/to/paddle-mcp-server/build/index.js\"],\n         \"env\": {\n           \"PADDLE_API_KEY\": \"your_api_key\",\n           \"PADDLE_ENVIRONMENT\": \"sandbox\"\n         }\n       }\n     }\n   }\n   ```\n\n## Debugging\n\nTo debug the MCP server, you can use the MCP Inspector tool:\n\n1. Run the server with the inspector:\n\n   ```bash\n   pnpm inspector\n   ```\n\n2. Open the provided URL in your browser to view and debug the MCP requests and responses.\n\n3. Include the `--api-key` and `--environment` arguments.\n\n## Learn more\n\n- [Paddle developer docs](https://developer.paddle.com?utm_source=dx&utm_medium=paddle-mcp-server)\n- [Paddle API reference](https://developer.paddle.com/api-reference/overview?utm_source=dx&utm_medium=paddle-mcp-server)\n- [Sign up for Paddle Billing](https://login.paddle.com/signup?utm_source=dx&utm_medium=paddle-mcp-server)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "paddlehq",
        "paddle",
        "mcp",
        "retail paddlehq",
        "paddle mcp",
        "paddle api"
      ],
      "category": "ecommerce-and-retail"
    },
    "Redtri-git--Ecomm-MCP": {
      "owner": "Redtri-git",
      "name": "Ecomm-MCP",
      "url": "https://github.com/Redtri-git/Ecomm-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/Redtri-git.webp",
      "description": "Provides product search capabilities by querying an API for product listings and returns markdown-formatted responses that include clickable product links and prices.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-25T01:12:22Z",
      "readme_content": "# üõí Ecomm MCP Server\r\n\r\nThis is a minimal MCP (Multi-Command Protocol) server implementation for product search, designed to work seamlessly with Claude's tool integration. It uses `FastMCP` to expose a simple tool that allows language models to query an API for product listings.\r\n\r\n---\r\n\r\n## üöÄ Features\r\n\r\n- MCP-compatible server for Claude integration  \r\n- `search_products` tool for querying product  \r\n- Markdown-formatted responses with clickable product links and prices  \r\n- Easy testing and integration with Claude desktop app  \r\n\r\n---\r\n## Running\r\n\r\n### Running with NPX\r\n`npx -y redtry-product-scraper-mcp`\r\n\r\n### To run with SSE instead of Stdio:\r\n`env SSE_LOCAL=true npx -y redtry-product-scraper-mcp`\r\n\r\n### Manual install with NPM\r\n`npm install -g redtry-product-scraper-mcp`\r\n\r\n\r\n## Adding to Claude Desktop\r\nGo to:\r\n\r\nClaude > Settings > Developer > Edit Config\r\n\r\nFind or add your configuration for the tool in claude_desktop_config.json. It should look like this:\r\nAdd the following  to your configuration file:\r\n```\r\n{\r\n  \"mcpServers\": {\r\n    \"redtry\": {\r\n      \"command\": \"npx\",\r\n      \"args\": [\"-y\", \"redtry-product-scraper-mcp\"]\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n## Adding to Cursor\r\n\r\n- Open Cursor Settings\r\n- Go to Features > MCP Servers\r\n- Click \"+ Add new global MCP server\"\r\n- Enter the following code:\r\n\r\n```\r\n    {\r\n      \"mcpServers\": {\r\n        \"redtry\": {\r\n          \"command\": \"npx\",\r\n          \"args\": [\"-y\", \"redtry-product-scraper-mcp\"],\r\n        }\r\n      }\r\n    }\r\n```\r\n\r\n## Adding to Windsurf\r\n\r\nAdd this to your ./codeium/windsurf/model_config.json:\r\n\r\n```\r\n{\r\n  \"mcpServers\": {\r\n    \"redtry\": {\r\n      \"command\": \"npx\",\r\n      \"args\": [\"-y\", \"redtry-product-scraper-mcp\"],\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "ecomm",
        "mcp",
        "ecomm mcp",
        "product search",
        "ecommerce retail"
      ],
      "category": "ecommerce-and-retail"
    },
    "Shopify--dev-mcp": {
      "owner": "Shopify",
      "name": "dev-mcp",
      "url": "https://github.com/Shopify/dev-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Interact with Shopify APIs, search documentation, and access the Shopify Admin GraphQL schema. Provides tailored prompts for efficient GraphQL operations during development.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "graphql",
        "shopify dev",
        "retail shopify",
        "shopify apis"
      ],
      "category": "ecommerce-and-retail"
    },
    "Sifu213--monad-mcp-magiceden": {
      "owner": "Sifu213",
      "name": "monad-mcp-magiceden",
      "url": "https://github.com/Sifu213/monad-mcp-magiceden",
      "imageUrl": "/freedevtools/mcp/pfp/Sifu213.webp",
      "description": "Provides real-time NFT data tools for the Monad testnet, including holder addresses, total NFT values, user collections, and trending collections by sales and volume. Facilitates access to comprehensive NFT insights through a simple interface.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-27T17:52:55Z",
      "readme_content": "# Monad MCP Magic Eden\n\nThis project allows you to create an MCP server that interacts with various APIs to retrieve NFT-related data on the Monad testnet. The MCP server provides several tools:\n\n- Retrieve the list of holder addresses for an NFT contract\n-Calculate the total NFT value held by an address using floor prices\n- List all NFT collections that an address holds\n- Get the top-selling collections by number of sales (5 min, 10 min, 30 min, 1 h, 6 h, 24 h, 1 d, 7 d, 30 d)\n- Get the top-selling collections by volume (5 min, 10 min, 30 min, 1 h, 6 h, 24 h, 1 d, 7 d, 30 d)\n\n## Prerequisites\n\n- Node.js (v16 or later)\n- npm\n- Claude Desktop\n\n## Getting Started\n\n1. Clone this repository\n\n```shell\ngit clone https://github.com/Sifu213/monad-mcp-magiceden.git\n```\n\n2. Install dependencies:\n\n```\nnpm install\n```\n\n3. Add a Thirdweb client key :\n   \nGet an Thirdweb client key to be able to use the list of holders for a NFT collection by creating a project and make the origin allowance to *.\nAdd you api client key in the nft-owners.ts file on line  :\n\n```\nconst THIRDWEB_CLIENT_ID = \"yourclientkey\";\n```\n\n4. Build the project\n\n```shell\nnpm run build\n```\n\nThe server is now ready to use!\n\n### Adding the MCP server to Claude Desktop\n\n1. Open \"Claude Desktop\"\n\n2. Open Settings\n\nClaude > Settings > Developer\n\n3. Open `claude_desktop_config.json` \n\n4. Add details about the MCP server and save the file.\nUse your machine absolute path to the js files resulting from the build\n\n```json\n{\n    \"mcpServers\": {\n\t\t\"top-selling-collections\": {\n            \"command\": \"node\",\n            \"args\": [\"*absolutepath*\\\\dist\\\\top-selling-collections.js\"]\n        },\n\t\t\"top-volume-collections\": {\n            \"command\": \"node\",\n            \"args\": [\"*absolutepath*\\\\dist\\\\top-volume-collections.js\"]\n        },\n        \"collections\": {\n            \"command\": \"node\",\n            \"args\": [\"*absolutepath*\\\\dist\\\\user-collection.js\"]\n        },\n        \"totalValue\": {\n            \"command\": \"node\",\n            \"args\": [\"*absolutepath*\\\\dist\\\\user-nft-value.js\"]\n        },\n\t\t\"nft-owners\": {\n            \"command\": \"node\",\n            \"args\": [\"*absolutepath*\\\\dist\\\\nft-owners.js\"]\n        }\n    }\n}\n```\n\n5. Restart \"Claude Desktop\" and make sure it's a hard restart\n\nAll the MCP tools may be availables\n\n\n\n### Here's the final result\n\nUsing the MCP server for holders adress for an Nft collection\n\n\n\nUsing the MCP server for User Nft value\n\n\n\nUsing the MCP server for User Nft collection\n\n\n\nUsing the MCP server for getting the trendng NFT collection by volume\n\n\n\nUsing the MCP server for getting the trendng NFT collection by number of sales",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nft",
        "monad",
        "ecommerce",
        "nft data",
        "comprehensive nft",
        "nft insights"
      ],
      "category": "ecommerce-and-retail"
    },
    "TSavo--printify-mcp": {
      "owner": "TSavo",
      "name": "printify-mcp",
      "url": "https://github.com/TSavo/printify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/TSavo.webp",
      "description": "Integrates AI assistants with Printify's print-on-demand platform for creating and managing products. Facilitates AI-driven design generation, image uploads, and streamlines shop management workflows.",
      "stars": 15,
      "forks": 10,
      "license": "ISC License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T21:51:33Z",
      "readme_content": "# Printify MCP Server\n\nA Model Context Protocol (MCP) server for integrating AI assistants with Printify's print-on-demand platform.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Usage](#usage)\n  - [Starting the Server](#starting-the-server)\n  - [Using with Claude Desktop](#using-with-claude-desktop)\n  - [Using with Docker](#option-3-use-docker-recommended-for-isolation)\n    - [Docker Hub Image](#option-3a-use-the-docker-image-directly-from-docker-hub)\n    - [Docker Compose](#option-3b-build-and-run-with-docker-compose)\n  - [Development Mode](#development-mode)\n- [Available Tools](#available-tools)\n  - [Shop Management](#shop-management)\n  - [Product Management](#product-management)\n  - [Blueprint and Variant Management](#blueprint-and-variant-management)\n  - [Image Management](#image-management)\n  - [Documentation](#documentation)\n  - [Prompts](#prompts)\n- [Workflow Examples](#workflow-examples)\n  - [Creating a T-Shirt with AI-Generated Design](#creating-a-t-shirt-with-ai-generated-design)\n  - [Managing Existing Products](#managing-existing-products)\n- [Architecture](#architecture)\n  - [Main Components](#main-components)\n  - [Docker Architecture](#docker-architecture)\n  - [Publishing the Docker Image](#publishing-the-docker-image)\n  - [Using the Docker Image Without Node.js](#using-the-docker-image-without-nodejs)\n  - [File Structure](#file-structure)\n- [API Documentation](#api-documentation)\n- [Troubleshooting](#troubleshooting)\n  - [Common Issues](#common-issues)\n  - [Docker-Specific Issues](#docker-specific-issues)\n  - [Debugging](#debugging)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Overview\n\nThe Printify MCP Server is a bridge between AI assistants (like Claude) and Printify's print-on-demand platform. It allows AI assistants to create and manage print-on-demand products, generate designs using AI, and handle all aspects of product management through the Model Context Protocol (MCP).\n\nMCP is an open standard developed by Anthropic that standardizes how applications provide context to Large Language Models (LLMs). This server implements the MCP specification to expose Printify's functionality to AI assistants in a structured way.\n\n## Features\n\nThis MCP server provides the following capabilities:\n\n### Printify API Integration\n\n- **Authentication**: Initialize the Printify API client with your API key\n- **Shops**: List and manage Printify shops\n- **Products**: Create, read, update, delete, and publish products\n- **Catalog**: Browse blueprints, print providers, and variants\n- **Images**: Upload images to use in product designs\n\n### AI Image Generation\n\n- **Replicate Integration**: Generate images using Replicate's Flux 1.1 Pro model\n- **Combined Workflow**: Generate images with AI and upload them directly to Printify in one step\n\n### Documentation\n\n- **In-Tool Documentation**: Comprehensive documentation for all aspects of product creation\n- **Workflow Guidance**: Step-by-step guides for creating products\n\n### Prompts\n\n- **Generate Product Description**: Generate compelling product descriptions based on product details\n\n## Prerequisites\n\n- Node.js (v18 or higher)\n- npm (v7 or higher)\n- Printify API key\n- Replicate API token (for AI image generation)\n- ImgBB API key (required if using the Flux 1.1 Pro Ultra model)\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/tsavo/printify-mcp.git\ncd printify-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Configuration\n\nYou have two options for configuring the environment variables needed by the server:\n\n### Option 1: Using a .env File (Recommended)\n\n1. Create a `.env` file in the root directory of the project with the following variables:\n\n```\n# Required for all functionality\nPRINTIFY_API_KEY=your_printify_api_key\n\n# Required if using the Flux 1.1 Pro Ultra model for image generation\n# The Ultra model generates high-resolution images that are too large for direct base64 upload\nIMGBB_API_KEY=your_imgbb_api_key\n\n# Optional: If not provided, the first shop in your account will be used\nPRINTIFY_SHOP_ID=your_shop_id\n\n# Optional: Only needed if you want to use image generation features\nREPLICATE_API_TOKEN=your_replicate_api_token\n```\n\nYou can use the `.env.example` file as a template by copying it:\n\n```bash\ncp .env.example .env\n# Then edit the .env file with your actual API keys\n```\n\n### Option 2: Using System Environment Variables\n\nAlternatively, you can set these variables directly in your system environment:\n\n**Windows (Command Prompt):**\n```cmd\n:: Required\nset PRINTIFY_API_KEY=your_printify_api_key\n\n:: Optional\nset PRINTIFY_SHOP_ID=your_shop_id\n\n:: Optional - only for image generation\nset REPLICATE_API_TOKEN=your_replicate_api_token\n```\n\n**Windows (PowerShell):**\n```powershell\n# Required\n$env:PRINTIFY_API_KEY = \"your_printify_api_key\"\n\n# Optional\n$env:PRINTIFY_SHOP_ID = \"your_shop_id\"\n\n# Optional - only for image generation\n$env:REPLICATE_API_TOKEN = \"your_replicate_api_token\"\n```\n\n**macOS/Linux:**\n```bash\n# Required\nexport PRINTIFY_API_KEY=your_printify_api_key\n\n# Optional\nexport PRINTIFY_SHOP_ID=your_shop_id\n\n# Optional - only for image generation\nexport REPLICATE_API_TOKEN=your_replicate_api_token\n```\n\nThe server will check for these environment variables at startup, regardless of whether they're set in a `.env` file or in the system environment.\n\n### Getting a Printify API Key\n\n1. Log in to your Printify account\n2. Go to Settings > API\n3. Click \"Create New API Key\"\n4. Copy the API key and add it to your `.env` file\n\n### Getting a Replicate API Token\n\n1. Create an account on [Replicate](https://replicate.com/)\n2. Go to your account settings\n3. Generate an API token\n4. Copy the token and add it to your `.env` file\n\n## Usage\n\n### Starting the Server\n\n```bash\nnpm start\n```\n\nThis will start the MCP server using the stdio transport, which allows it to communicate with MCP clients like Claude Desktop. The server will automatically initialize the Printify API client using the API key from the environment variable.\n\n### Development Mode\n\n```bash\nnpm run dev\n```\n\nThis will start the server in development mode with automatic reloading when files change.\n\n## Using with Claude Desktop\n\nThere are three ways to use this MCP server with Claude Desktop:\n\n### Option 1: Install from npm (Recommended)\n\n1. Install the package globally:\n   ```bash\n   npm install -g @tsavo/printify-mcp\n   ```\n\n2. Configure your environment variables using either a `.env` file in your current directory or system environment variables as described in the [Configuration](#configuration) section.\n\n3. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Go to Settings > MCP Servers\n   - Click \"Add Server\"\n   - Enter a name for the server (e.g., \"Printify MCP\")\n   - Select \"Command\" as the transport type\n   - Enter `printify-mcp` as the command\n   - No arguments are needed\n   - Click \"Add Server\"\n\n4. Test the connection by asking Claude to check the Printify status:\n   ```\n   Can you check the status of my Printify connection?\n   ```\n\n   The `printify-mcp` command runs the same code as the original index.ts file, but packaged as an executable that can be run directly from the command line.\n\n### Option 2: Use with npx\n\nIf you don't want to install the package globally, you can use npx:\n\n1. Configure your environment variables as described in the [Configuration](#configuration) section.\n\n2. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Go to Settings > MCP Servers\n   - Click \"Add Server\"\n   - Enter a name for the server (e.g., \"Printify MCP\")\n   - Select \"Command\" as the transport type\n   - Enter `npx` as the command\n   - Enter `@tsavo/printify-mcp` as the arguments\n   - Click \"Add Server\"\n\n### Option 3: Use Docker (Recommended for Isolation)\n\nIf you prefer to run the server in a Docker container, you have two options:\n\n#### Option 3A: Use the Docker Image Directly from Docker Hub\n\n1. Make sure you have Docker installed on your system\n\n2. Create a directory for your Printify MCP files:\n   ```bash\n   mkdir printify-mcp\n   cd printify-mcp\n   ```\n\n3. Create a `.env` file with your API keys:\n   ```\n   PRINTIFY_API_KEY=your_printify_api_key\n   PRINTIFY_SHOP_ID=your_shop_id (optional)\n   REPLICATE_API_TOKEN=your_replicate_api_token\n   IMGBB_API_KEY=your_imgbb_api_key (required for Flux 1.1 Pro Ultra model)\n   ```\n\n4. Create a temp directory for temporary files:\n   ```bash\n   mkdir temp\n   ```\n\n5. Run the Docker container (two options):\n\n   **Option A: Using environment variables directly (Recommended)**\n   ```bash\n   # For Linux/macOS/Windows PowerShell:\n   docker run -it --name printify-mcp \\\n     -e PRINTIFY_API_KEY=your_printify_api_key \\\n     -e PRINTIFY_SHOP_ID=your_shop_id_optional \\\n     -v $(pwd)/temp:/app/temp \\\n     tsavo/printify-mcp:latest\n\n   # For Windows Command Prompt:\n   docker run -it --name printify-mcp ^\n     -e PRINTIFY_API_KEY=your_printify_api_key ^\n     -e PRINTIFY_SHOP_ID=your_shop_id_optional ^\n     -v %cd%/temp:/app/temp ^\n     tsavo/printify-mcp:latest\n   ```\n\n   **Note:** If you want to use the image generation features (generate-and-upload-image tool), add the Replicate API token:\n   ```bash\n   -e REPLICATE_API_TOKEN=your_replicate_api_token \\\n   ```\n\n   **Important:** If you want to use the Flux 1.1 Pro Ultra model for image generation, you MUST also add the ImgBB API key:\n   ```bash\n   -e IMGBB_API_KEY=your_imgbb_api_key \\\n   ```\n\n   **Option B: Using a .env file**\n   ```bash\n   # For Linux/macOS:\n   docker run -it --name printify-mcp \\\n     -v $(pwd)/.env:/app/.env:ro \\\n     -v $(pwd)/temp:/app/temp \\\n     tsavo/printify-mcp:latest\n\n   # For Windows PowerShell:\n   docker run -it --name printify-mcp -v ${PWD}/.env:/app/.env:ro -v ${PWD}/temp:/app/temp tsavo/printify-mcp:latest\n\n   # For Windows Command Prompt:\n   docker run -it --name printify-mcp -v %cd%/.env:/app/.env:ro -v %cd%/temp:/app/temp tsavo/printify-mcp:latest\n   ```\n\n6. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Go to Settings > MCP Servers\n   - Click \"Add Server\"\n   - Enter a name for the server (e.g., \"Printify MCP Docker\")\n   - Select \"Command\" as the transport type\n   - Enter `docker` as the command\n   - Enter `exec -i printify-mcp node dist/index.js` as the arguments\n   - Click \"Add Server\"\n\n#### Option 3B: Build and Run with Docker Compose\n\n1. Make sure you have Docker and Docker Compose installed on your system\n\n2. Clone this repository to your local machine:\n   ```bash\n   git clone https://github.com/tsavo/printify-mcp.git\n   cd printify-mcp\n   ```\n\n3. Configure environment variables (two options):\n\n   **Option A: Edit docker-compose.yml directly (Recommended)**\n   Open docker-compose.yml and uncomment/edit the environment variables:\n   ```yaml\n   environment:\n     - NODE_ENV=production\n     # Option 1: Set environment variables directly (recommended)\n     - PRINTIFY_API_KEY=your_printify_api_key\n     - PRINTIFY_SHOP_ID=your_shop_id_optional\n     # Optional: Only needed if you want to use image generation features\n     - REPLICATE_API_TOKEN=your_replicate_api_token\n     # Required if using the Flux 1.1 Pro Ultra model for image generation\n     - IMGBB_API_KEY=your_imgbb_api_key\n   ```\n\n   **Option B: Create a `.env` file**\n   ```\n   PRINTIFY_API_KEY=your_printify_api_key\n   PRINTIFY_SHOP_ID=your_shop_id (optional)\n   # Optional: Only needed if you want to use image generation features\n   REPLICATE_API_TOKEN=your_replicate_api_token\n   # Required if using the Flux 1.1 Pro Ultra model for image generation\n   IMGBB_API_KEY=your_imgbb_api_key\n   ```\n   Then uncomment the .env volume mount in docker-compose.yml:\n   ```yaml\n   volumes:\n     # Option 2: Mount a .env file for environment variables\n     - ./.env:/app/.env:ro\n   ```\n\n4. Build and start the Docker container:\n   ```bash\n   docker-compose up -d\n   ```\n\n5. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Go to Settings > MCP Servers\n   - Click \"Add Server\"\n   - Enter a name for the server (e.g., \"Printify MCP Docker\")\n   - Select \"Command\" as the transport type\n   - Enter `docker` as the command\n   - Enter `exec -i printify-mcp node dist/index.js` as the arguments\n   - Click \"Add Server\"\n\n6. Test the connection by asking Claude to check the Printify status:\n   ```\n   Can you check the status of my Printify connection?\n   ```\n\n### Option 4: Clone and Set Up the Repository\n\nIf you prefer to work with the source code directly without Docker:\n\n1. Clone this repository to your local machine:\n   ```bash\n   git clone https://github.com/tsavo/printify-mcp.git\n   cd printify-mcp\n   ```\n\n2. Install dependencies and build the project:\n   ```bash\n   npm install\n   npm run build\n   ```\n\n3. Configure your environment variables using either a `.env` file or system environment variables as described in the [Configuration](#configuration) section.\n\n4. Get the full absolute path to the compiled JavaScript file:\n\n   **Windows:**\n   ```cmd\n   cd dist\n   echo %CD%\\index.js\n   ```\n\n   **macOS/Linux:**\n   ```bash\n   realpath dist/index.js\n   ```\n\n5. Configure Claude Desktop:\n   - Open Claude Desktop\n   - Go to Settings > MCP Servers\n   - Click \"Add Server\"\n   - Enter a name for the server (e.g., \"Printify MCP\")\n   - Select \"Command\" as the transport type\n   - Enter the path to Node.js as the command (e.g., `node`)\n   - Enter the **full absolute path** to the built server as the arguments\n   - Click \"Add Server\"\n\n6. Start the server:\n   ```bash\n   npm start\n   ```\n\n   Keep this terminal window open while you're using Claude Desktop.\n\n### Testing the Connection\n\nIn a conversation with Claude, you can test if the server is working by asking Claude to check the Printify status:\n\n```\nCan you check the status of my Printify connection?\n```\n\nClaude should use the `get-printify-status` tool to check the connection status. You can also ask Claude to list your Printify shops using the `list-shops` tool.\n\nIf you encounter any issues:\n\n1. Check the console output where you started the server for error messages\n2. Verify that your environment variables are set correctly\n3. Make sure the server is still running\n4. Confirm that the path to the server in Claude Desktop is correct\n\n## Available Tools\n\n### Shop Management\n\n#### `get-printify-status`\n\nGet the current status of the Printify API client, including connection status and current shop.\n\n#### `list-shops`\n\nList all available shops in your Printify account. The currently selected shop is marked with an arrow (‚Üí).\n\n#### `switch-shop`\n\nSwitch to a different shop for subsequent API calls.\n\nParameters:\n- `shopId` (string): The ID of the shop to switch to\n\n### Product Tools\n\n#### `list-products`\n\nList products in your Printify shop.\n\nParameters:\n- `page` (number, optional): Page number (default: 1)\n- `limit` (number, optional): Number of products per page (default: 10)\n\n#### `get-product`\n\nGet details of a specific product.\n\nParameters:\n- `productId` (string): Product ID\n\n#### `create-product`\n\nCreate a new product in your Printify shop.\n\nParameters:\n- `title` (string): Product title\n- `description` (string): Product description\n- `blueprintId` (number): Blueprint ID\n- `printProviderId` (number): Print provider ID\n- `variants` (array): Product variants\n- `printAreas` (object, optional): Print areas for the product\n\n#### `update-product`\n\nUpdate an existing product in your Printify shop.\n\nParameters:\n- `productId` (string): Product ID\n- `title` (string, optional): Product title\n- `description` (string, optional): Product description\n- `variants` (array, optional): Product variants\n- `printAreas` (object, optional): Print areas for the product\n\n#### `delete-product`\n\nDelete a product from your Printify shop.\n\nParameters:\n- `productId` (string): Product ID\n\n#### `publish-product`\n\nPublish a product to your connected sales channel.\n\nParameters:\n- `productId` (string): Product ID\n- `publishDetails` (object, optional): Publish details\n\n### Catalog Tools\n\n#### `get-blueprints`\n\nGet a list of available blueprints from the Printify catalog.\n\nParameters:\n- `page` (number, optional): Page number (default: 1)\n- `limit` (number, optional): Number of blueprints per page (default: 10)\n\n#### `get-blueprint`\n\nGet details of a specific blueprint.\n\nParameters:\n- `blueprintId` (string): Blueprint ID\n\n#### `get-print-providers`\n\nGet a list of print providers for a specific blueprint.\n\nParameters:\n- `blueprintId` (string): Blueprint ID\n\n#### `get-variants`\n\nGet a list of variants for a specific blueprint and print provider.\n\nParameters:\n- `blueprintId` (string): Blueprint ID\n- `printProviderId` (string): Print provider ID\n\n### Image Tools\n\n#### `generate-and-upload-image`\n\nGenerate an image using Replicate's Flux models, process it with Sharp, and upload it to Printify in one operation. This tool combines AI image generation with Printify integration for a seamless workflow.\n\nThe tool performs four steps:\n1. Generates an image using Replicate's Flux models based on your text prompt\n2. Processes the image with Sharp to ensure it's a valid image with the correct format for Printify\n3. Uploads the processed image to your Printify account\n4. Cleans up temporary files to avoid disk space issues\n\nParameters:\n- `prompt` (string): Text prompt for image generation\n- `fileName` (string): File name for the uploaded image\n- `model` (string, optional): Override the default model (e.g., \"black-forest-labs/flux-1.1-pro-ultra\")\n- `width` (number, optional): Image width in pixels (default: 1024)\n- `height` (number, optional): Image height in pixels (default: 1024)\n- `aspectRatio` (string, optional): Aspect ratio (e.g., '16:9', '4:3', '1:1'). If provided, overrides width and height\n- `outputFormat` (string, optional): Output format (\"jpeg\", \"png\", \"webp\") (default: \"png\")\n- `numInferenceSteps` (number, optional): Number of inference steps (default: 25)\n- `guidanceScale` (number, optional): Guidance scale (default: 7.5)\n- `negativePrompt` (string, optional): Negative prompt (default: \"low quality, bad quality, sketches\")\n- `seed` (number, optional): Random seed for reproducible generation\n- `raw` (boolean, optional): Generate less processed, more natural-looking images (default: true for Flux 1.1 Pro Ultra)\n\n**Note:** This tool requires the `REPLICATE_API_TOKEN` environment variable to be set with a valid Replicate API token. You can get a token from [replicate.com](https://replicate.com).\n\n**Important:** If you want to use the Flux 1.1 Pro Ultra model, you MUST also set the `IMGBB_API_KEY` environment variable. The Ultra model generates high-resolution images that are too large for direct base64 upload to Printify. You can get a free API key from [api.imgbb.com](https://api.imgbb.com).\n\n#### `generate-image`\n\nGenerate an image using Replicate's Flux models and save it to a local file without uploading to Printify. This tool is useful when you want to generate images for other purposes or when you want to review and potentially edit images before uploading them to Printify.\n\nParameters:\n- `prompt` (string): Text prompt for image generation\n- `outputPath` (string): Full path where the generated image should be saved\n- `model` (string, optional): Override the default model (e.g., \"black-forest-labs/flux-1.1-pro-ultra\")\n- `width` (number, optional): Image width in pixels (default: 1024)\n- `height` (number, optional): Image height in pixels (default: 1024)\n- `aspectRatio` (string, optional): Aspect ratio (e.g., '16:9', '4:3', '1:1'). If provided, overrides width and height\n- `outputFormat` (string, optional): Output format (\"jpeg\", \"png\", \"webp\") (default: \"png\")\n- `numInferenceSteps` (number, optional): Number of inference steps (default: 25)\n- `guidanceScale` (number, optional): Guidance scale (default: 7.5)\n- `negativePrompt` (string, optional): Negative prompt (default: \"low quality, bad quality, sketches\")\n- `seed` (number, optional): Random seed for reproducible generation\n- `raw` (boolean, optional): Generate less processed, more natural-looking images (Flux 1.1 Pro Ultra only)\n\n**Note:** This tool requires the `REPLICATE_API_TOKEN` environment variable to be set with a valid Replicate API token. You can get a token from [replicate.com](https://replicate.com).\n\nUnlike the `generate-and-upload-image` tool, this tool doesn't require the ImgBB API key since it saves directly to a local file.\n\n#### `upload-image`\n\nUpload an image to your Printify account. Supports three types of inputs:\n1. URLs (http:// or https://) - Direct upload to Printify\n2. Local file paths (e.g., c:\\path\\to\\image.png) - Automatically converted using Sharp to ensure compatibility, then uploaded to Printify\n3. Base64 encoded image strings - Direct upload to Printify\n\n**Note on file formats:**\n- Supported formats: PNG, JPEG, and SVG\n- Recommended resolution for JPEG/PNG files is 300 DPI\n- For larger products (leggings, blankets, tapestries), 120-150 DPI is acceptable\n- Some image files may not be compatible with Printify's API if they exceed size limits\n- For files larger than 5MB, URL upload is recommended over base64 encoding\n\nParameters:\n- `fileName` (string): File name\n- `url` (string): URL of the image to upload, path to local file, or base64 encoded image data\n\n### Prompts\n\n#### `generate-product-description`\n\nGenerate a compelling product description.\n\nParameters:\n- `productName` (string): Name of the product\n- `category` (string): Product category\n- `targetAudience` (string, optional): Target audience for the product\n- `keyFeatures` (string, optional): Comma-separated list of key product features\n\n## Setting Up API Keys\n\n### Printify API Key\n\nTo use the Printify features of this MCP server, you'll need a Printify API key. Here's how to get one and set it up:\n\n1. Log in to your Printify account at [printify.com](https://printify.com/app/login)\n2. Go to My Profile > Connections\n3. In the Connections section, you can generate your Personal Access Tokens\n4. Store your API key securely, as it will only be visible immediately after generation\n5. Create a `.env` file in the project root with the following content:\n\n   ```\n   PRINTIFY_API_KEY=your_api_key_here\n   # Optional: Set a default shop ID\n   # PRINTIFY_SHOP_ID=your_shop_id_here\n\n   # For image generation with Replicate\n   REPLICATE_API_TOKEN=your_replicate_token_here\n\n   # Required if using the Flux 1.1 Pro Ultra model for image generation\n   IMGBB_API_KEY=your_imgbb_api_key_here\n   ```\n\n   The server will automatically initialize the Printify API client using the API key from the environment variable. If you don't specify a shop ID, the server will use the first shop in your account as the default.\n\n   You can also set the environment variables directly:\n\n   ```bash\n   # On Windows\n   set PRINTIFY_API_KEY=your_api_key_here\n   set REPLICATE_API_TOKEN=your_replicate_token_here\n   set IMGBB_API_KEY=your_imgbb_api_key_here\n   npm start\n\n   # On macOS/Linux\n   export PRINTIFY_API_KEY=your_api_key_here\n   export REPLICATE_API_TOKEN=your_replicate_token_here\n   export IMGBB_API_KEY=your_imgbb_api_key_here\n   npm start\n   ```\n\n### Replicate API Token\n\nTo use the image generation features of this MCP server, you'll need a Replicate API token. Here's how to get one:\n\n1. Create an account or log in at [replicate.com](https://replicate.com)\n2. Go to your account settings\n3. Generate an API token\n4. Add the token to your `.env` file as shown above\n\n### ImgBB API Key\n\nIf you want to use the Flux 1.1 Pro Ultra model for image generation, you MUST have an ImgBB API key. The Ultra model generates high-resolution images that are too large for direct base64 upload to Printify, so we use ImgBB as an intermediary. Here's how to get an API key:\n\n1. Create an account or log in at [imgbb.com](https://imgbb.com)\n2. Go to [api.imgbb.com](https://api.imgbb.com) to get your API key\n3. Add the key to your `.env` file as shown above\n\n## Workflow Examples\n\n### Creating a T-Shirt with AI-Generated Design\n\nHere's a complete example of creating a t-shirt with front and back designs:\n\n```javascript\n// Step 1: Get blueprints and choose one\nget-blueprints_printify()\n// Selected blueprint ID 12 (Unisex Jersey Short Sleeve Tee)\n\n// Step 2: Get print providers for this blueprint\nget-print-providers_printify({ blueprintId: \"12\" })\n// Selected print provider ID 29 (Monster Digital)\n\n// Step 3: Get variants for this blueprint and print provider\nget-variants_printify({ blueprintId: \"12\", printProviderId: \"29\" })\n// Selected variant IDs 18100 (Black / S), 18101 (Black / M), 18102 (Black / L)\n\n// Step 4: Generate and upload front image\nconst frontImage = await generate-and-upload-image_printify({\n  prompt: \"A futuristic cityscape with neon lights and tall skyscrapers, horizon city logo design\",\n  fileName: \"horizon-city-front\"\n})\n// Got image ID: 68032b22ae74bf725ed406ec\n\n// Step 4b: Generate and upload back image\nconst backImage = await generate-and-upload-image_printify({\n  prompt: \"A minimalist 'Horizon City' text logo with futuristic font, suitable for the back of a t-shirt\",\n  fileName: \"horizon-city-back\"\n})\n// Got image ID: 68032b377e36fbdd32791027\n\n// Step 5: Create the product\ncreate-product_printify({\n  title: \"Horizon City Skyline T-Shirt\",\n  description: \"Step into the future with our Horizon City Skyline T-Shirt. This premium unisex tee features a stunning futuristic cityscape with neon lights and towering skyscrapers on the front, and a sleek minimalist Horizon City logo on the back.\",\n  blueprintId: 12,\n  printProviderId: 29,\n  variants: [\n    { variantId: 18100, price: 2499 },\n    { variantId: 18101, price: 2499 },\n    { variantId: 18102, price: 2499 }\n  ],\n  printAreas: {\n    \"front\": { position: \"front\", imageId: \"68032b22ae74bf725ed406ec\" },\n    \"back\": { position: \"back\", imageId: \"68032b377e36fbdd32791027\" }\n  }\n})\n// Product created with ID: 68032b43a24efbac6502b6f7\n```\n\n### Managing Existing Products\n\n```javascript\n// List products\nlist-products_printify()\n\n// Get details of a specific product\nget-product_printify({ productId: \"68032b43a24efbac6502b6f7\" })\n\n// Update a product\nupdate-product_printify({\n  productId: \"68032b43a24efbac6502b6f7\",\n  title: \"Updated Horizon City Skyline T-Shirt\",\n  description: \"Updated description...\",\n  variants: [\n    { variantId: 18100, price: 2999 },\n    { variantId: 18101, price: 2999 },\n    { variantId: 18102, price: 2999 }\n  ]\n})\n\n// Publish a product to external sales channels\npublish-product_printify({\n  productId: \"68032b43a24efbac6502b6f7\",\n  publishDetails: {\n    title: true,\n    description: true,\n    images: true,\n    variants: true,\n    tags: true\n  }\n})\n\n// Delete a product\ndelete-product_printify({ productId: \"68032b43a24efbac6502b6f7\" })\n```\n\n## Architecture\n\n### Main Components\n\nThe Printify MCP server consists of three main components:\n\n1. **MCP Server (`src/index.ts`)**: Sets up the MCP server with various tools for interacting with Printify's API.\n2. **Printify API Client (`src/printify-api.ts`)**: Handles communication with Printify's API using the official SDK.\n3. **Replicate Client (`src/replicate-client.ts`)**: Integrates with Replicate's API to generate images for product designs.\n\n### Docker Architecture\n\nThe Docker setup consists of the following components:\n\n1. **Dockerfile**: Defines how to build the Docker image\n   - Uses Node.js 22 Alpine as the base image for a small footprint\n   - Installs dependencies and builds the TypeScript code\n   - Sets up the environment and runs the server\n\n2. **docker-compose.yml**: Defines the service configuration\n   - Sets up environment variables\n   - Mounts volumes for .env file and temp directory\n   - Configures stdin and tty for stdio transport\n   - Sets restart policy\n\n3. **Volumes**:\n   - `.env`: Mounted as a read-only volume for environment variables\n   - `temp`: Mounted as a volume for temporary files (like generated images)\n\n### Publishing the Docker Image\n\nYou can publish the Docker image to Docker Hub or any other container registry to make it available to others without requiring them to install Node.js or clone the repository.\n\n1. **Build the Docker image**:\n   ```bash\n   docker build -t tsavo/printify-mcp:latest .\n   ```\n\n2. **Log in to Docker Hub**:\n   ```bash\n   docker login\n   ```\n\n3. **Push the image to Docker Hub**:\n   ```bash\n   docker push tsavo/printify-mcp:latest\n   ```\n\n### Using the Docker Image Without Node.js\n\nUsers can run the Printify MCP server without installing Node.js by using the Docker image directly:\n\n1. **Install Docker**: Users need to have Docker installed on their system\n\n2. **Create a temp directory** for temporary files:\n   ```bash\n   mkdir -p temp\n   ```\n\n3. **Run the Docker container** (two options):\n\n   **Option A: Using environment variables directly (Recommended)**\n   ```bash\n   docker run -it --name printify-mcp \\\n     -e PRINTIFY_API_KEY=their_printify_api_key \\\n     -e PRINTIFY_SHOP_ID=their_shop_id_optional \\\n     -v $(pwd)/temp:/app/temp \\\n     tsavo/printify-mcp:latest\n   ```\n\n   **Note:** If they want to use the image generation features (generate-and-upload-image tool), add the Replicate API token:\n   ```bash\n   -e REPLICATE_API_TOKEN=their_replicate_api_token \\\n   ```\n\n   **Important:** If they want to use the Flux 1.1 Pro Ultra model for image generation, they MUST also add the ImgBB API key:\n   ```bash\n   -e IMGBB_API_KEY=their_imgbb_api_key \\\n   ```\n\n   **Option B: Using a .env file**\n   First, create a .env file with their API keys:\n   ```\n   PRINTIFY_API_KEY=their_printify_api_key\n   PRINTIFY_SHOP_ID=their_shop_id (optional)\n   # Optional: Only needed if they want to use image generation features\n   REPLICATE_API_TOKEN=their_replicate_api_token\n   # Required if using the Flux 1.1 Pro Ultra model for image generation\n   IMGBB_API_KEY=their_imgbb_api_key\n   ```\n\n   Then run the container:\n   ```bash\n   docker run -it --name printify-mcp \\\n     -v $(pwd)/.env:/app/.env:ro \\\n     -v $(pwd)/temp:/app/temp \\\n     tsavo/printify-mcp:latest\n   ```\n\n4. **Configure Claude Desktop**:\n   - Open Claude Desktop\n   - Go to Settings > MCP Servers\n   - Click \"Add Server\"\n   - Enter a name for the server (e.g., \"Printify MCP Docker\")\n   - Select \"Command\" as the transport type\n   - Enter `docker` as the command\n   - Enter `exec -i printify-mcp node dist/index.js` as the arguments\n   - Click \"Add Server\"\n\nThis approach allows users to run the Printify MCP server without installing Node.js or any other dependencies - they only need Docker.\n\n### File Structure\n\n```\nprintify-mcp/\n‚îú‚îÄ‚îÄ dist/                  # Compiled JavaScript files\n‚îú‚îÄ‚îÄ docs/                  # Documentation\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts.md        # Documentation for index.ts\n‚îÇ   ‚îú‚îÄ‚îÄ printify-api.ts.md # Documentation for printify-api.ts\n‚îÇ   ‚îî‚îÄ‚îÄ replicate-client.ts.md # Documentation for replicate-client.ts\n‚îú‚îÄ‚îÄ node_modules/          # Node.js dependencies\n‚îú‚îÄ‚îÄ src/                   # Source code\n‚îÇ   ‚îú‚îÄ‚îÄ index.ts           # Main MCP server\n‚îÇ   ‚îú‚îÄ‚îÄ printify-api.ts    # Printify API client\n‚îÇ   ‚îî‚îÄ‚îÄ replicate-client.ts # Replicate API client\n‚îú‚îÄ‚îÄ temp/                  # Temporary directory for generated images\n‚îú‚îÄ‚îÄ .dockerignore          # Files to exclude from Docker build\n‚îú‚îÄ‚îÄ .env                   # Environment variables (not in repo)\n‚îú‚îÄ‚îÄ .env.example           # Example environment variables\n‚îú‚îÄ‚îÄ .gitignore             # Git ignore file\n‚îú‚îÄ‚îÄ docker-compose.yml     # Docker Compose configuration\n‚îú‚îÄ‚îÄ Dockerfile             # Docker build instructions\n‚îú‚îÄ‚îÄ package.json           # Node.js package configuration\n‚îú‚îÄ‚îÄ package-lock.json      # Node.js package lock\n‚îú‚îÄ‚îÄ README.md              # This file\n‚îî‚îÄ‚îÄ tsconfig.json          # TypeScript configuration\n```\n\n## API Documentation\n\nFor detailed documentation of the codebase, see the following files:\n\n- [index.ts Documentation](docs/index.ts.md)\n- [printify-api.ts Documentation](docs/printify-api.ts.md)\n- [replicate-client.ts Documentation](docs/replicate-client.ts.md)\n\n## Troubleshooting\n\n### Common Issues\n\n#### Printify API Client Not Initialized\n\nIf you see the error \"Printify API client is not initialized\", check that:\n\n1. The `PRINTIFY_API_KEY` environment variable is set correctly in your `.env` file\n2. The API key is valid and has the correct permissions\n\n#### Replicate API Client Not Initialized\n\nIf you see the error \"Replicate API client is not initialized\", check that:\n\n1. The `REPLICATE_API_TOKEN` environment variable is set correctly in your `.env` file\n2. The API token is valid and has the correct permissions\n\n#### Error Creating Product\n\nIf you encounter errors when creating a product, check that:\n\n1. The blueprint ID and print provider ID are valid\n2. The variant IDs are valid for the selected blueprint and print provider\n3. The image IDs in print areas are valid and accessible\n4. All required fields are included in the request\n\n#### Error Uploading Image\n\nIf you encounter errors when uploading an image, check that:\n\n1. The image is a valid format (PNG, JPEG, etc.)\n2. The image is not too large (maximum size is 10MB)\n3. If using a URL, it is publicly accessible\n4. If using a local file, it exists and is readable\n\n#### Docker-Specific Issues\n\nIf you're using the Docker setup and encounter issues:\n\n1. **Container not starting**: Check Docker logs with `docker logs printify-mcp`\n2. **Environment variables not working**: If using a .env file, make sure it's in the same directory as your docker-compose.yml file or the directory where you run the `docker run` command. If setting environment variables directly with `-e`, check for typos in variable names\n3. **Permission issues with temp directory**: The temp directory is mounted as a volume, ensure it has the correct permissions\n4. **Connection issues from Claude**: Make sure the Docker container is running with `docker ps` and that you've configured Claude Desktop correctly\n5. **Image not found**: If using the Docker Hub image directly, make sure you've pulled it with `docker pull tsavo/printify-mcp:latest`\n\nTo restart the Docker container when using docker-compose:\n```bash\ndocker-compose down\ndocker-compose up -d\n```\n\nTo restart the Docker container when using docker run:\n```bash\ndocker stop printify-mcp\ndocker rm printify-mcp\ndocker run -it --name printify-mcp -v $(pwd)/.env:/app/.env:ro -v $(pwd)/temp:/app/temp tsavo/printify-mcp:latest\n```\n\nFor Windows users using PowerShell with the Docker image directly:\n```powershell\ndocker run -it --name printify-mcp -v ${PWD}/.env:/app/.env:ro -v ${PWD}/temp:/app/temp tsavo/printify-mcp:latest\n```\n\nFor Windows users using Command Prompt with the Docker image directly:\n```cmd\ndocker run -it --name printify-mcp -v %cd%/.env:/app/.env:ro -v %cd%/temp:/app/temp tsavo/printify-mcp:latest\n```\n\n### Debugging\n\nThe server includes detailed logging to help troubleshoot issues. Check the console output for error messages and debugging information.\n\nFor Docker deployments, you can view logs with:\n```bash\ndocker logs printify-mcp\n```\n\nTo follow the logs in real-time:\n```bash\ndocker logs -f printify-mcp\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "printify",
        "ecommerce",
        "print",
        "assistants printify",
        "tsavo printify",
        "printify mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "ZubeidHendricks--youtube-mcp-server": {
      "owner": "ZubeidHendricks",
      "name": "youtube-mcp-server",
      "url": "https://github.com/ZubeidHendricks/youtube-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ZubeidHendricks.webp",
      "description": "Interact with YouTube to retrieve video details, manage transcripts, and access channel and playlist information. Search for videos across YouTube and manage content with various statistics.",
      "stars": 356,
      "forks": 62,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:09:26Z",
      "readme_content": "# YouTube MCP Server\n[![smithery badge](https://smithery.ai/badge/@ZubeidHendricks/youtube)](https://smithery.ai/server/@ZubeidHendricks/youtube)\n\nA Model Context Protocol (MCP) server implementation for YouTube, enabling AI language models to interact with YouTube content through a standardized interface.\n\n## Features\n\n### Video Information\n* Get video details (title, description, duration, etc.)\n* List channel videos\n* Get video statistics (views, likes, comments)\n* Search videos across YouTube\n\n### Transcript Management\n* Retrieve video transcripts\n* Support for multiple languages\n* Get timestamped captions\n* Search within transcripts\n\n### Channel Management\n* Get channel details\n* List channel playlists\n* Get channel statistics\n* Search within channel content\n\n### Playlist Management\n* List playlist items\n* Get playlist details\n* Search within playlists\n* Get playlist video transcripts\n\n## Installation\n\n### Quick Setup for Claude Desktop\n\n1. Install the package:\n```bash\nnpm install -g zubeid-youtube-mcp-server\n```\n\n2. Add to your Claude Desktop configuration (`~/Library/Application Support/Claude/claude_desktop_config.json` on macOS or `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"zubeid-youtube-mcp-server\": {\n      \"command\": \"zubeid-youtube-mcp-server\",\n      \"env\": {\n        \"YOUTUBE_API_KEY\": \"your_youtube_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Alternative: Using NPX (No Installation Required)\n\nAdd this to your Claude Desktop configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"zubeid-youtube-mcp-server\"],\n      \"env\": {\n        \"YOUTUBE_API_KEY\": \"your_youtube_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install YouTube MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ZubeidHendricks/youtube):\n\n```bash\nnpx -y @smithery/cli install @ZubeidHendricks/youtube --client claude\n```\n\n## Configuration\nSet the following environment variables:\n* `YOUTUBE_API_KEY`: Your YouTube Data API key (required)\n* `YOUTUBE_TRANSCRIPT_LANG`: Default language for transcripts (optional, defaults to 'en')\n### Using with VS Code\n\nFor one-click installation, click one of the install buttons below:\n\n[![Install with NPX in VS Code](https://img.shields.io/badge/VS_Code-NPM-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=youtube&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22zubeid-youtube-mcp-server%22%5D%2C%22env%22%3A%7B%22YOUTUBE_API_KEY%22%3A%22%24%7Binput%3AapiKey%7D%22%7D%7D&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22apiKey%22%2C%22description%22%3A%22YouTube+API+Key%22%2C%22password%22%3Atrue%7D%5D) [![Install with NPX in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-NPM-24bfa5?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=youtube&config=%7B%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22zubeid-youtube-mcp-server%22%5D%2C%22env%22%3A%7B%22YOUTUBE_API_KEY%22%3A%22%24%7Binput%3AapiKey%7D%22%7D%7D&inputs=%5B%7B%22type%22%3A%22promptString%22%2C%22id%22%3A%22apiKey%22%2C%22description%22%3A%22YouTube+API+Key%22%2C%22password%22%3Atrue%7D%5D&quality=insiders)\n\n### Manual Installation\n\nIf you prefer manual installation, first check the install buttons at the top of this section. Otherwise, follow these steps:\n\nAdd the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing `Ctrl + Shift + P` and typing `Preferences: Open User Settings (JSON)`.\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"apiKey\",\n        \"description\": \"YouTube API Key\",\n        \"password\": true\n      }\n    ],\n    \"servers\": {\n      \"youtube\": {\n        \"command\": \"npx\",\n        \"args\": [\"-y\", \"zubeid-youtube-mcp-server\"],\n        \"env\": {\n          \"YOUTUBE_API_KEY\": \"${input:apiKey}\"\n        }\n      }\n    }\n  }\n}\n```\n\nOptionally, you can add it to a file called `.vscode/mcp.json` in your workspace:\n\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"apiKey\",\n      \"description\": \"YouTube API Key\",\n      \"password\": true\n    }\n  ],\n  \"servers\": {\n    \"youtube\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"zubeid-youtube-mcp-server\"],\n      \"env\": {\n        \"YOUTUBE_API_KEY\": \"${input:apiKey}\"\n      }\n    }\n  }\n}\n```\n## YouTube API Setup\n1. Go to Google Cloud Console\n2. Create a new project or select an existing one\n3. Enable the YouTube Data API v3\n4. Create API credentials (API key)\n5. Copy the API key for configuration\n\n## Examples\n\n### Managing Videos\n\n```javascript\n// Get video details\nconst video = await youtube.videos.getVideo({\n  videoId: \"video-id\"\n});\n\n// Get video transcript\nconst transcript = await youtube.transcripts.getTranscript({\n  videoId: \"video-id\",\n  language: \"en\"\n});\n\n// Search videos\nconst searchResults = await youtube.videos.searchVideos({\n  query: \"search term\",\n  maxResults: 10\n});\n```\n\n### Managing Channels\n\n```javascript\n// Get channel details\nconst channel = await youtube.channels.getChannel({\n  channelId: \"channel-id\"\n});\n\n// List channel videos\nconst videos = await youtube.channels.listVideos({\n  channelId: \"channel-id\",\n  maxResults: 50\n});\n```\n\n### Managing Playlists\n\n```javascript\n// Get playlist items\nconst playlistItems = await youtube.playlists.getPlaylistItems({\n  playlistId: \"playlist-id\",\n  maxResults: 50\n});\n\n// Get playlist details\nconst playlist = await youtube.playlists.getPlaylist({\n  playlistId: \"playlist-id\"\n});\n```\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run tests\nnpm test\n\n# Build\nnpm run build\n\n# Lint\nnpm run lint\n```\n\n## Contributing\nSee CONTRIBUTING.md for information about contributing to this repository.\n\n## License\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "youtube",
        "mcp",
        "youtube mcp",
        "zubeidhendricks youtube",
        "youtube manage"
      ],
      "category": "ecommerce-and-retail"
    },
    "asaricorp--mcp-shopify": {
      "owner": "asaricorp",
      "name": "mcp-shopify",
      "url": "https://github.com/asaricorp/mcp-shopify",
      "imageUrl": "/freedevtools/mcp/pfp/asaricorp.webp",
      "description": "Manage Shopify store data including products, customers, and orders through a GraphQL API. Streamlines e-commerce operations with features for inventory management and customer engagement.",
      "stars": 8,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-04T18:16:35Z",
      "readme_content": "# Shopify MCP Server\n\n\nMCP Server for Shopify API, enabling interaction with store data through GraphQL API. This server provides tools for managing products, customers, orders, and more.\n\n## Features\n\n- **Product Management**: Search and retrieve product information\n- **Customer Management**: Load customer data and manage customer tags\n- **Order Management**: Advanced order querying and filtering\n- **Collection Management**: Create and manage collections\n\n## Setup\n\n### Shopify Access Token\n\nTo use this MCP server, you'll need to create a custom app in your Shopify store:\n\n1. From your Shopify admin, go to **Settings** > **Apps and sales channels**\n2. Click **Develop apps** (you may need to enable developer preview first)\n3. Click **Create an app**\n4. Set a name for your app (e.g., \"Shopify MCP Server\")\n5. Click **Configure Admin API scopes**\n6. Select the following scopes:\n   - `read_products`, `write_products`\n   - `read_customers`, `write_customers`\n   - `read_orders`, `write_orders`\n   - `read_collections`, `write_collections`\n7. Click **Save**\n8. Click **Install app**\n9. Click **Install** to give the app access to your store data\n10. After installation, you'll see your **Admin API access token**\n11. Copy this token - you'll need it for configuration\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"shopify-mcp\",\n        \"--accessToken\",\n        \"<YOUR_ACCESS_TOKEN>\",\n        \"--domain\",\n        \"<YOUR_SHOP>.myshopify.com\"\n      ]\n    }\n  }\n}\n```\n\nLocations for the Claude Desktop config file:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Alternative: Run Locally with Environment Variables\n\nIf you prefer to use environment variables instead of command-line arguments:\n\n1. Create a `.env` file with your Shopify credentials:\n\n   ```\n   SHOPIFY_ACCESS_TOKEN=your_access_token\n   MYSHOPIFY_DOMAIN=your-store.myshopify.com\n   ```\n\n2. Run the server with npx:\n   ```\n   npx shopify-mcp\n   ```\n\n### Direct Installation (Optional)\n\nIf you want to install the package globally:\n\n```\nnpm install -g shopify-mcp\n```\n\nThen run it:\n\n```\nshopify-mcp --accessToken=<YOUR_ACCESS_TOKEN> --domain=<YOUR_SHOP>.myshopify.com\n```\n\n## Available Tools\n\n### Product Management\n\n1. `get-products`\n\n   - Get all products or search by title\n   - Inputs:\n     - `searchTitle` (optional string): Filter products by title\n     - `limit` (number): Maximum number of products to return\n\n2. `get-product-by-id`\n   - Get a specific product by ID\n   - Inputs:\n     - `productId` (string): ID of the product to retrieve\n\n### Customer Management\n\n1. `get-customers`\n\n   - Get customers or search by name/email\n   - Inputs:\n     - `searchQuery` (optional string): Filter customers by name or email\n     - `limit` (optional number, default: 10): Maximum number of customers to return\n\n2. `update-customer`\n\n   - Update a customer's information\n   - Inputs:\n     - `id` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `firstName` (string, optional): Customer's first name\n     - `lastName` (string, optional): Customer's last name\n     - `email` (string, optional): Customer's email address\n     - `phone` (string, optional): Customer's phone number\n     - `tags` (array of strings, optional): Tags to apply to the customer\n     - `note` (string, optional): Note about the customer\n     - `taxExempt` (boolean, optional): Whether the customer is exempt from taxes\n     - `metafields` (array of objects, optional): Customer metafields for storing additional data\n\n3. `get-customer-orders`\n\n   - Get orders for a specific customer\n   - Inputs:\n     - `customerId` (string, required): Shopify customer ID (numeric ID only, like \"6276879810626\")\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n4. `create-customer`\n   - Create a new customer in Shopify\n   - Inputs:\n     - `email` (string, required): Customer's email address\n     - `firstName` (string, optional): Customer's first name\n     - `lastName` (string, optional): Customer's last name\n     - `phone` (string, optional): Customer's phone number\n     - `tags` (array of strings, optional): Tags to apply to the customer\n     - `note` (string, optional): Note about the customer\n     - `taxExempt` (boolean, optional): Whether the customer is exempt from taxes\n     - `password` (string, optional): Password for the customer account\n     - `passwordConfirmation` (string, optional): Confirmation of the password\n     - `addresses` (array of objects, optional): Customer's addresses\n     - `metafields` (array of objects, optional): Customer metafields for storing additional data\n\n### Order Management\n\n1. `get-orders`\n\n   - Get orders with optional filtering\n   - Inputs:\n     - `status` (optional string): Filter by order status\n     - `limit` (optional number, default: 10): Maximum number of orders to return\n\n2. `get-order-by-id`\n\n   - Get a specific order by ID\n   - Inputs:\n     - `orderId` (string, required): Full Shopify order ID (e.g., \"gid://shopify/Order/6090960994370\")\n\n3. `update-order`\n\n   - Update an existing order with new information\n   - Inputs:\n     - `id` (string, required): Shopify order ID\n     - `tags` (array of strings, optional): New tags for the order\n     - `email` (string, optional): Update customer email\n     - `note` (string, optional): Order notes\n     - `customAttributes` (array of objects, optional): Custom attributes for the order\n     - `metafields` (array of objects, optional): Order metafields\n     - `shippingAddress` (object, optional): Shipping address information\n\n4. `create-order`\n\n   - Create a new draft order in Shopify\n   - Inputs:\n     - `lineItems` (array of objects, required): Products to include in the order\n       - `variantId` (string, required): ID of the product variant\n       - `quantity` (number, required): Quantity of the product\n       - `customAttributes` (array of objects, optional): Custom attributes for the line item\n     - `email` (string, optional): Customer email\n     - `phone` (string, optional): Customer phone number\n     - `note` (string, optional): Order notes\n     - `tags` (array of strings, optional): Tags for the order\n     - `customAttributes` (array of objects, optional): Custom attributes for the order\n     - `metafields` (array of objects, optional): Order metafields\n     - `billingAddress` (object, optional): Billing address information\n     - `shippingAddress` (object, optional): Shipping address information\n     - `customerId` (string, optional): ID of an existing customer\n     - `shippingLine` (object, optional): Shipping method and price\n     - `taxExempt` (boolean, optional): Whether the order is exempt from taxes\n     - `presentmentCurrencyCode` (string, optional): Currency code for the order\n\n5. `create-fulfillment`\n   - Create a new fulfillment for an order in Shopify\n   - Inputs:\n     - `orderId` (string, required): ID of the order to fulfill\n     - `notifyCustomer` (boolean, default: true): Whether to notify the customer about the fulfillment\n     - `trackingInfo` (object, optional): Tracking information\n       - `number` (string, optional): Tracking number\n       - `url` (string, optional): Tracking URL\n       - `company` (string, optional): Shipping company\n     - `lineItems` (array of objects, optional): Specific line items to fulfill\n       - `id` (string, required): ID of the line item\n       - `quantity` (number, required): Quantity to fulfill\n     - `locationId` (string, optional): ID of the location fulfilling the order\n     - `trackingNumbers` (array of strings, optional): Multiple tracking numbers\n     - `trackingUrls` (array of strings, optional): Multiple tracking URLs\n     - `metadata` (object, optional): Additional metadata for the fulfillment\n\n### Collection Management\n\n1. `create-collection`\n   - Create a new manual or automated collection in Shopify\n   - Inputs:\n     - `title` (string, required): Collection title\n     - `description` (string, optional): Collection description\n     - `descriptionHtml` (string, optional): HTML version of the description\n     - `handle` (string, optional): URL handle for the collection\n     - `isPublished` (boolean, optional): Whether the collection is published\n     - `seo` (object, optional): SEO settings\n       - `title` (string, optional): SEO title\n       - `description` (string, optional): SEO description\n     - `image` (object, optional): Collection image\n       - `src` (string, required): Image URL\n       - `altText` (string, optional): Alt text for the image\n     - `productsToAdd` (array of strings, optional): Product IDs to add to the collection\n     - `sortOrder` (string, optional): How products are sorted in the collection\n       - Options: \"MANUAL\", \"BEST_SELLING\", \"ALPHA_ASC\", \"ALPHA_DESC\", \"PRICE_DESC\", \"PRICE_ASC\", \"CREATED\", \"CREATED_DESC\", \"ID_DESC\", \"RELEVANCE\"\n     - `templateSuffix` (string, optional): Template suffix for custom templates\n     - `privateMetafields` (array of objects, optional): Private metafields for the collection\n       - `owner` (string, required): Metafield owner\n       - `namespace` (string, required): Metafield namespace\n       - `key` (string, required): Metafield key\n       - `value` (string, required): Metafield value\n       - `valueType` (string, required): Type of the value (e.g., \"STRING\", \"INTEGER\", etc.)\n     - `ruleSet` (object, optional): Rules for automated collections\n       - `rules` (array of objects, required): Collection rules\n         - `column` (string, required): Rule column (e.g., \"TAG\", \"TITLE\", etc.)\n         - `relation` (string, required): Rule relation (e.g., \"EQUALS\", \"CONTAINS\", etc.)\n         - `condition` (string, required): Rule condition value\n       - `appliedDisjunctively` (boolean, optional, default: true): Whether rules are combined with OR (true) or AND (false)\n     - `metafields` (array of objects, optional): Public metafields for the collection\n       - `namespace` (string, required): Metafield namespace\n       - `key` (string, required): Metafield key\n       - `value` (string, required): Metafield value\n       - `type` (string, required): Metafield type\n     - `publications` (array of objects, optional): Publication settings\n       - `publicationId` (string, required): ID of the publication\n       - `publishDate` (string, optional): Date to publish the collection\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "commerce",
        "shopify manage",
        "manage shopify",
        "mcp shopify"
      ],
      "category": "ecommerce-and-retail"
    },
    "attarmau--StyleCLIP": {
      "owner": "attarmau",
      "name": "StyleCLIP",
      "url": "https://github.com/attarmau/StyleCLIP",
      "imageUrl": "/freedevtools/mcp/pfp/attarmau.webp",
      "description": "A CLIP-based fashion recommendation system that enables users to upload clothing images and receive similar clothing tag recommendations through an interactive web interface. It utilizes YOLO for clothing detection and integrates seamlessly with an MCP framework.",
      "stars": 0,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-19T08:44:33Z",
      "readme_content": "# FastMCP_RecSys\nThis is a CLIP-Based Fashion Recommender with MCP. \n\n### üìå Sample Components for UI\n1. Image upload\n2. Submit button\n3. Display clothing tags + recommendations\n\n# Mockup\nA user uploads a clothing image ‚Üí YOLO detects clothing ‚Üí CLIP encodes ‚Üí Recommend similar\n\n<img width=\"463\" alt=\"Screenshot 2025-04-26 at 10 26 13‚ÄØAM\" src=\"https://github.com/user-attachments/assets/93c0a75b-4ed1-4fa1-b25d-5137b8eb6af0\" />\n\n\n# Folder Structure\n```\n/project-root\n‚îÇ\n‚îú‚îÄ‚îÄ /backend\n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile            \n‚îÇ   ‚îú‚îÄ‚îÄ /app\n‚îÇ   ‚îú‚îÄ‚îÄ /aws\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ rekognition_wrapper.py         # AWS Rekognition logic\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /utils\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ image_utils.py                 # Bounding box crop utils\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /controllers\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ clothing_detector.py           # Coordinates Rekognition + cropping\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /tests\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ test_rekognition_wrapper.py\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ test_clothing_tagging.py\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ server.py                    # FastAPI app code\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /routes\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ clothing_routes.py\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /controllers\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ clothing_controller.py\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ clothing_tagging.py\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ tag_extractor.py         # Pending: define core CLIP functionality\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ schemas/\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ clothing_schemas.py\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ config/\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tag_list_en.py           $ Tool for mapping: https://jsoncrack.com/editor\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ database.py       \n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ settings.py       \n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api_keys.py     \n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ requirements.txt      \n‚îÇ   ‚îî‚îÄ‚îÄ .env                      \n‚îÇ                      \n‚îú‚îÄ‚îÄ /frontend \n‚îÇ   ‚îú‚îÄ‚îÄ Dockerfile        \n‚îÇ   ‚îú‚îÄ‚îÄ package.json              \n‚îÇ   ‚îú‚îÄ‚îÄ package-lock.json         \n‚îÇ   ‚îú‚îÄ‚îÄ /public\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ index.html            \n‚îÇ   ‚îú‚îÄ‚îÄ /src\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /components            \n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ ImageUpload.jsx    \n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ DetectedTags.jsx   \n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ Recommendations.jsx \n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ /utils\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ api.js             \n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ App.js                    # Main React component\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.js\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ index.css            \n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ tailwind.config.js        \n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ postcss.config.js                    \n‚îÇ   ‚îî‚îÄ‚îÄ .env                                \n‚îú‚îÄ‚îÄ docker-compose.yml                     \n‚îî‚îÄ‚îÄ README.md \n```\n\n## Quick Start Guide\n### Step 1: Clone the GitHub Project\n### Step 2: Set Up the Python Environment\n```\npython -m venv venv\nsource venv/bin/activate  # On macOS or Linux\nvenv\\Scripts\\activate     # On Windows\n```\n### Step 3: Install Dependencies\n```\npip install -r requirements.txt\n```\n### Step 4: Start the FastAPI Server (Backend)\n```\nuvicorn backend.app.server:app --reload\n```\nOnce the server is running and the database is connected, you should see the following message in the console:\n```\nDatabase connected\nINFO:     Application startup complete.\n```\n<img width=\"750\" alt=\"Screenshot 2025-04-25 at 1 15 45‚ÄØAM\" src=\"https://github.com/user-attachments/assets/7f3fc403-fb33-4107-a00c-61796a48ecec\" />\n\n### Step 5: Install Dependencies\nDatabase connected\nINFO:     Application startup complete.\n```\nnpm install\n```\n### Step 6: Start the Development Server (Frontend)\n```\nnpm start\n```\nOnce running, the server logs a confirmation and opens the app in your browser: [http://localhost:3000/](http://localhost:3000/)\n\n<img width=\"372\" alt=\"Screenshot 2025-04-25 at 9 08 50‚ÄØPM\" src=\"https://github.com/user-attachments/assets/794a6dba-9fbb-40f1-9e57-c5c2e2af1013\" />\n\n# What‚Äôs completed so far:\n1. FastAPI server is up and running (24 Apr)\n2. Database connection is set up (24 Apr)\n3. Backend architecture is functional (24 Apr)\n4. Basic front-end UI for uploading picture (25 Apr)\n## 5. Mock Testing for AWS Rekognition -> bounding box (15 May)\n```\nPYTHONPATH=. pytest backend/app/tests/test_rekognition_wrapper.py\n```\n<img width=\"1067\" alt=\"Screenshot 2025-05-20 at 4 58 14‚ÄØPM\" src=\"https://github.com/user-attachments/assets/7a25a92d-2aca-42a8-abdd-194dd9d2e8a5\" />\n\n- Tested Rekognition integration logic independently using a mock ‚Üí verified it correctly extracts bounding boxes only when labels match the garment set\n- Confirmed the folder structure and PYTHONPATH=. works smoothly with pytest from root\n\n## 6. Mock Testing for AWS Rekognition -> CLIP (20 May)\n```\nPYTHONPATH=. pytest backend/app/tests/test_clothing_tagging.py\n```\n<img width=\"1062\" alt=\"Screenshot 2025-05-21 at 9 25 33‚ÄØAM\" src=\"https://github.com/user-attachments/assets/6c64b658-3414-4115-9e20-520132605cab\" />\n\n- Detecting garments using AWS Rekognition \n\n- Cropping the image around detected bounding boxes\n\n- Tagging the cropped image using CLIP\n\n## 7. Mock Testing for full image tagging pipeline (Image bytes ‚Üí AWS Rekognition (detect garments) ‚Üí Crop images ‚Üí CLIP (predict tags) + Error Handling (25 May)\n| **Negative Test Case**         | **Description**                                                                 |\n| -------------------------------| ------------------------------------------------------------------------------- |\n| No Detection Result            | AWS doesn't detect any garments ‚Äî should return an empty list.                  |\n| Image Not Clothing             | CLIP returns vague or empty tags ‚Äî verify fallback behavior.                    |\n| AWS Returns Exception          | Simulate `rekognition.detect_labels` throwing an error ‚Äî check `try-except`.    |\n| Corrupted Image File           | Simulate a broken (non-JPEG) image ‚Äî verify it raises an error or gives a hint. |\n\n```\nPYTHONPATH=. pytest backend/app/tests/test_clothing_tagging.py\n```\n<img width=\"1072\" alt=\"Screenshot 2025-05-21 at 11 19 47‚ÄØAM\" src=\"https://github.com/user-attachments/assets/b41f07f4-7926-44a3-8b64-34fe3c6ef049\" />\n\n- detect_garments: simulates AWS Rekognition returning one bounding box: {\"Left\": 0.1, \"Top\": 0.1, \"Width\": 0.5, \"Height\": 0.5}\n- crop_by_bounding_box: simulates the cropping step returning a dummy \"cropped_image\" object\n- get_tags_from_clip: simulates CLIP returning a list of tags: [\"T-shirt\", \"Cotton\", \"Casual\"]\n\n## 8. Run Testing for CLIP Output (30 May)\n```\npython3 -m venv venv\npip install -r requirements.txt\npip install git+https://github.com/openai/CLIP.git\npython -m backend.app.tests.test_tag_extractor\n```\n<img width=\"1111\" alt=\"Screenshot 2025-06-06 at 5 12 13‚ÄØPM\" src=\"https://github.com/user-attachments/assets/d0b3b288-20f8-482f-9d39-dcccf9a775ee\" />\n\nNext Step:\n1. Evaluate CLIP‚Äôs tagging accuracy on sample clothing images\n2. Fine-tune the tagging system for better recommendations\n3. Test the backend integration with real-time user data\n4. Set up monitoring for model performance\n5. Front-end demo\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fashion",
        "styleclip",
        "clothing",
        "upload clothing",
        "clothing tag",
        "attarmau styleclip"
      ],
      "category": "ecommerce-and-retail"
    },
    "bitrefill--bitrefill-mcp-server": {
      "owner": "bitrefill",
      "name": "bitrefill-mcp-server",
      "url": "https://github.com/bitrefill/bitrefill-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/bitrefill.webp",
      "description": "Integrates with Bitrefill services to enable searches for gift cards, mobile top-ups, and various products through AI assistants. Facilitates communication via the Model Context Protocol using structured JSON responses.",
      "stars": 5,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-18T15:53:13Z",
      "readme_content": "# Bitrefill MCP Server\n[![smithery badge](https://smithery.ai/badge/@bitrefill/bitrefill-mcp-server)](https://smithery.ai/server/@bitrefill/bitrefill-mcp-server)\n\nA TypeScript-based MCP server that provides access to Bitrefill services, allowing you to search for gift cards, mobile topups, and more. This server implements the Model Context Protocol to expose Bitrefill functionality to AI assistants.\n\n## How It Works\n\nThe server operates using the Model Context Protocol (MCP) to communicate with Claude and similar AI assistants. It:\n\n1. Runs as a standalone process using stdio for communication\n2. Registers resources and tools for accessing Bitrefill services\n3. Interfaces with the Bitrefill API to provide product search and details\n4. Returns structured JSON responses that can be processed by AI assistants\n\n### Architecture\n\nThe app server follows this architecture:\n\n```\nsrc/\n‚îú‚îÄ‚îÄ index.ts                # Main entry point\n‚îú‚îÄ‚îÄ constants/              # Static data\n‚îÇ   ‚îú‚îÄ‚îÄ categories.ts       # Product categories\n‚îÇ   ‚îî‚îÄ‚îÄ payment_methods.ts  # Payment methods\n‚îú‚îÄ‚îÄ handlers/               # MCP request handlers\n‚îÇ   ‚îú‚îÄ‚îÄ resources.ts        # Resource endpoints\n‚îÇ   ‚îî‚îÄ‚îÄ tools.ts            # Tool implementations\n‚îú‚îÄ‚îÄ schemas/                # Data validation schemas\n‚îÇ   ‚îú‚îÄ‚îÄ detail.ts           # Product detail response types\n‚îÇ   ‚îú‚îÄ‚îÄ invoice.ts          # Invoice schemas\n‚îÇ   ‚îú‚îÄ‚îÄ misc.ts             # Miscellaneous schemas\n‚îÇ   ‚îú‚îÄ‚îÄ order.ts            # Order schemas\n‚îÇ   ‚îî‚îÄ‚îÄ search.ts           # Search parameters and response types\n‚îú‚îÄ‚îÄ services/               # API services\n‚îÇ   ‚îú‚îÄ‚îÄ invoices.ts         # Invoice service\n‚îÇ   ‚îú‚îÄ‚îÄ misc.ts             # Miscellaneous services\n‚îÇ   ‚îú‚îÄ‚îÄ orders.ts           # Order services\n‚îÇ   ‚îú‚îÄ‚îÄ products.ts         # Product details service\n‚îÇ   ‚îî‚îÄ‚îÄ search.ts           # Search functionality\n‚îî‚îÄ‚îÄ utils/                  # Utility functions\n    ‚îú‚îÄ‚îÄ index.ts            # Error logging, etc.\n    ‚îî‚îÄ‚îÄ api/                # API clients\n        ‚îú‚îÄ‚îÄ authenticated.ts # Authenticated API client\n        ‚îú‚îÄ‚îÄ base.ts         # Base API client\n        ‚îî‚îÄ‚îÄ public.ts       # Public API client\n```\n\n## Features\n\n### Resources\n- `bitrefill://product-types` - List of available product types on Bitrefill\n- `bitrefill://categories/{type}` - List of available categories for a specific product type (e.g., `bitrefill://categories/gift-cards`)\n\n### Tools\n- `search` - Search for gift cards, esims, mobile topups and more\n  - Required: `query` (e.g., 'Amazon', 'Netflix', 'AT&T' or '*' for all)\n  - Optional: `country`, `language`, `limit`, `skip`, `category`\n  \n- `detail` - Get detailed information about a product\n  - Required: `id` (product identifier)\n\n- `categories` - Get the full product type/categories map\n  - No required parameters\n\n- `create_invoice` - Create a new invoice for purchasing products (requires API key)\n  - Required: `products` (array of products to include in the invoice)\n    - Each product requires: `product_id`\n    - Optional product fields: `quantity`, `value`, `package_id`, `phone_number`, `email`, `send_email`, `send_sms`\n  - Required: `payment_method` (one of: \"balance\", \"bitcoin\", \"lightning\")\n  - Optional: `webhook_url`, `auto_pay`\n\n- `get_invoices` - Retrieve a list of invoices with optional filtering\n  - Optional: `start`, `limit`, `after`, `before`\n\n- `get_invoice` - Retrieve details for a specific invoice by ID\n  - Required: `id` (invoice identifier)\n\n- `pay_invoice` - Pay an unpaid invoice (only works with 'balance' payment method)\n  - Required: `id` (invoice identifier)\n\n- `get_orders` - Retrieve a list of orders with optional filtering\n  - Optional: `start`, `limit`, `after`, `before`\n\n- `get_order` - Retrieve details for a specific order by ID\n  - Required: `id` (order identifier)\n\n- `unseal_order` - Reveal codes and PINs for a specific order by ID\n  - Required: `id` (order identifier)\n\n- `get_account_balance` - Retrieve your account balance\n  - No required parameters\n\n- `ping` - Check if the Bitrefill API is available\n  - No required parameters\n\n## Configuration\n\n### API Key Setup\n\nTo use the all the tools that rely on the Bitrefill API except for `search`, `categories` and `detail`, you need to set up Bitrefill API credentials:\n\n1. Create a Bitrefill account\n2. Ask for a developer API key by filing a request on [this form](https://bitrefill.typeform.com/to/BDmIVEsH?typeform-source=www.github.com)\n3. Create a `.env` file in the root directory (you can copy from `.env.example`)\n4. Add your Bitrefill API credentials:\n   ```\n   BITREFILL_API_SECRET=your_api_key_here\n   BITREFILL_API_ID=your_api_id_here\n   ```\n\nThe `create_invoice` tool will only be available if the API credentials are set. If the API credentials are not set, the tool will not be registered and won't appear in the list of available tools.\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Bitrefill for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@bitrefill/bitrefill-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @bitrefill/bitrefill-mcp-server --client claude\n```\n\n### Claude Desktop\n\nAdd the server config at:\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"bitrefill\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"bitrefill-mcp-server\"],\n      \"env\": {\n        \"BITREFILL_API_SECRET\": \"your_api_key_here\",\n        \"BITREFILL_API_ID\": \"your_api_id_here\"\n      }\n    }\n  }\n}\n```\n\n### Cline\n\n1. Open the Cline extension settings\n2. Open \"MCP Servers\" tab\n3. Click on \"Configure MCP Servers\"\n4. Add the server config:\n\n```json\n{\n  \"mcpServers\": {\n    \"github.com/bitrefill/bitrefill-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"bitrefill-mcp-server\"],\n      \"disabled\": false,\n      \"autoApprove\": [\"search\", \"detail\", \"categories\"],\n      \"env\": {\n        \"BITREFILL_API_ID\": \"your_api_id_here\",\n        \"BITREFILL_API_SECRET\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nAdditional Cline configuration options:\n- `disabled`: Set to `false` to enable the server\n- `autoApprove`: List of tools that don't require explicit approval for each use\n\n### Cursor\n\n1. Open the Cursor settings\n2. Open \"Features\" settings\n3. In the \"MCP Servers\" section, click on \"Add new MCP Server\"\n4. Choose a name, and select \"command\" as \"Type\"\n5. In the \"Command\" field, enter the following:\n\n```\nnpx -y bitrefill-mcp-server\n```\n\n6. (Optional) If you're using the `create_invoice` tool, add environment variables:\n   - BITREFILL_API_SECRET: your_api_key_here\n   - BITREFILL_API_ID: your_api_id_here\n\n### Docker\n\nYou can also run the server using Docker. First, build the image:\n\n```bash\ndocker build -t bitrefill-mcp-server .\n```\n\nThen run the container:\n\n```bash\ndocker run -e BITREFILL_API_SECRET=your_api_key_here -e BITREFILL_API_ID=your_api_id_here bitrefill-mcp-server\n```\n\nFor development, you might want to mount your source code as a volume:\n\n```bash\ndocker run -v $(pwd):/app --env-file .env bitrefill-mcp-server\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "bitrefill",
        "json",
        "retail bitrefill",
        "bitrefill services",
        "bitrefill mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "caiovicentino--mcpGOTAS": {
      "owner": "caiovicentino",
      "name": "mcpGOTAS",
      "url": "https://github.com/caiovicentino/mcpGOTAS",
      "imageUrl": "/freedevtools/mcp/pfp/caiovicentino.webp",
      "description": "Facilitate the generation and verification of USDT cryptocurrency payments through the Gotas Commerce API. Provide tools for creating payment links, checking transaction statuses, and accessing detailed payment information with minimal technical requirements.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-11T20:16:07Z",
      "readme_content": "# Gotas Commerce API & MCP Integration\n\nUma solu√ß√£o robusta para integra√ß√£o de pagamentos em criptomoeda usando o protocolo MCP (Model Context Protocol), permitindo que assistentes de IA como Claude possam criar e verificar transa√ß√µes USDT atrav√©s da API Gotas Commerce.\n\n## üöÄ Vis√£o Geral\n\nEste projeto fornece uma ponte entre assistentes de IA e servi√ßos de pagamento em criptomoeda. Com o servidor MCP implementado, assistentes podem gerar links de pagamento, verificar status de transa√ß√µes e obter informa√ß√µes detalhadas sobre pagamentos USDT sem necessidade de conhecimento t√©cnico especializado em blockchain.\n\n## ‚ú® Recursos\n\n### Ferramentas MCP\n\n#### `create-payment`\nCria uma nova transa√ß√£o de pagamento em USDT e retorna todos os detalhes necess√°rios, incluindo URL para pagamento e endere√ßo da carteira.\n\n**Par√¢metros:**\n- `amount`: Valor do pagamento (ex: 100.50)\n- `currency`: C√≥digo da moeda (atualmente apenas \"USDT\")\n- `return_url`: URL para redirecionamento do cliente ap√≥s o pagamento\n- `description`: Descri√ß√£o opcional do pagamento\n\n**Retorno:**\n- Objeto JSON completo com todos os detalhes do pagamento:\n  - ID √∫nico do pagamento\n  - URL para pagamento\n  - Endere√ßo da carteira\n  - Status (pending, completed, failed, expired)\n  - Datas de cria√ß√£o e expira√ß√£o\n  - Outros metadados relevantes\n\n#### `check-payment-status`\nVerifica o status atual de um pagamento existente atrav√©s de seu identificador √∫nico.\n\n**Par√¢metros:**\n- `payment_id`: ID √∫nico do pagamento a ser verificado\n\n**Retorno:**\n- Objeto JSON completo com o estado atual do pagamento\n- Informa√ß√µes de timestamp para cria√ß√£o, expira√ß√£o e conclus√£o (quando aplic√°vel)\n- Hash da transa√ß√£o blockchain (quando o pagamento for confirmado)\n\n### Recursos MCP\n\n#### `payment-status://{payment_id}`\nFornece uma vers√£o formatada e simplificada do status do pagamento como um recurso MCP.\n\n**Retorno:**\n- Texto formatado com as informa√ß√µes mais relevantes do pagamento\n- Identificador, status, valor, timestamps e descri√ß√£o\n\n### Prompts MCP\n\n#### `create-payment-prompt`\nUm prompt guiado para auxiliar o usu√°rio a fornecer as informa√ß√µes necess√°rias para criar um novo pagamento.\n\n## üîß Arquitetura\n\nO servidor MCP atua como uma camada de abstra√ß√£o sobre a API Gotas Commerce, traduzindo as capacidades da API em ferramentas, recursos e prompts facilmente utiliz√°veis por assistentes de IA como o Claude.\n\n```\n‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê    ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê\n‚îÇ                ‚îÇ    ‚îÇ               ‚îÇ    ‚îÇ                  ‚îÇ\n‚îÇ  Assistente IA ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚î§  Servidor MCP ‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚î§  API Gotas       ‚îÇ\n‚îÇ  (Claude)      ‚îÇ    ‚îÇ  (FastAPI)    ‚îÇ    ‚îÇ  Commerce        ‚îÇ\n‚îÇ                ‚îÇ    ‚îÇ               ‚îÇ    ‚îÇ                  ‚îÇ\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò    ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò\n```\n\n## üìã Pr√©-requisitos\n\n- Python 3.8 ou superior\n- Chave de API da Gotas Commerce (obtenha em: [commerce.gotas.com](https://commerce.gotas.com))\n- Acesso a um assistente compat√≠vel com MCP (como Claude)\n\n## üîå Instala√ß√£o\n\n1. Clone este reposit√≥rio:\n   ```bash\n   git clone https://github.com/caiovicentino/mcpGOTAS.git\n   cd mcpGOTAS\n   ```\n\n2. Instale as depend√™ncias:\n   ```bash\n   pip install -r requirements.txt\n   ```\n   \n   Ou use o script de configura√ß√£o automatizado:\n   ```bash\n   ./setup.bat\n   ```\n\n3. Configure as vari√°veis de ambiente:\n   - Crie um arquivo `.env` com os seguintes valores:\n     ```\n     GOTAS_API_KEY=sua_chave_api_aqui\n     GOTAS_BASE_URL=https://commerce.gotas.com\n     ```\n\n## üèÉ‚Äç‚ôÇÔ∏è Execu√ß√£o\n\n### Servidor MCP\n\nExecute o servidor para disponibilizar as ferramentas via MCP:\n\n```bash\nuvicorn src.gotas_mcp_server:app --host 0.0.0.0 --port 8000\n```\n\n### Integra√ß√£o com Claude Desktop\n\nPara usar diretamente com o Claude Desktop:\n\n```bash\npython install_claude.py\n```\n\nAlternativamente, instale manualmente:\n\n```bash\nmcp install src.gotas_mcp_server.py\n```\n\n### Uso Direto da API (Scripts de Teste)\n\nPara testes diretos sem um assistente:\n\n- **Criar pagamento**: `python test_client.py`\n- **Verificar status**: `python check_payment.py`\n\n## üìä Fluxo de Pagamento\n\n1. **Inicializa√ß√£o do Pagamento**:\n   - O assistente obt√©m do usu√°rio o valor e outros detalhes do pagamento\n   - O assistente chama a ferramenta `create-payment` com os par√¢metros necess√°rios\n   - Um novo pagamento √© criado na Gotas Commerce\n   - O link de pagamento √© retornado ao usu√°rio\n\n2. **Processo de Pagamento**:\n   - O usu√°rio acessa o link de pagamento fornecido\n   - O usu√°rio transfere USDT para o endere√ßo de carteira exibido\n   - A Gotas Commerce monitora a blockchain para confirmar a transa√ß√£o\n\n3. **Verifica√ß√£o de Status**:\n   - O assistente pode verificar o status do pagamento chamando `check-payment-status`\n   - O status pode ser: pending (pendente), completed (conclu√≠do), expired (expirado) ou failed (falhou)\n   - Quando o pagamento √© confirmado, o hash da transa√ß√£o blockchain √© disponibilizado\n\n## üîç Especifica√ß√µes T√©cnicas\n\n### Detalhes da API\n\n**Endpoints da API Gotas Commerce**:\n\n1. **Criar Pagamento**\n   - `POST /api/v1/payments`\n   - Corpo da requisi√ß√£o:\n     ```json\n     {\n       \"amount\": \"100.00\",\n       \"currency\": \"USDT\",\n       \"return_url\": \"https://exemplo.com/retorno\",\n       \"description\": \"Descri√ß√£o do pagamento\"\n     }\n     ```\n\n2. **Verificar Status do Pagamento**\n   - `GET /api/v1/payments/{payment_id}`\n\n### Comunica√ß√£o MCP\n\n- **Transporte**: SSE (Server-Sent Events)\n- **Formato**: JSON para comunica√ß√£o entre assistente e servidor MCP\n- **Autentica√ß√£o**: Chave de API armazenada como vari√°vel de ambiente\n\n## üìÇ Estrutura do Projeto\n\n```\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îî‚îÄ‚îÄ gotas_mcp_server.py  # Implementa√ß√£o principal do servidor MCP\n‚îú‚îÄ‚îÄ .env                     # Vari√°veis de ambiente (API key, etc.)\n‚îú‚îÄ‚îÄ .smithery.json           # Configura√ß√£o para Smithery CLI\n‚îú‚îÄ‚îÄ check_payment.py         # Utilit√°rio para verificar status de pagamentos\n‚îú‚îÄ‚îÄ docsdaapigotas.md        # Documenta√ß√£o detalhada da API\n‚îú‚îÄ‚îÄ install_claude.py        # Script para instala√ß√£o no Claude Desktop\n‚îú‚îÄ‚îÄ mcp.md                   # Documenta√ß√£o do servidor MCP\n‚îú‚îÄ‚îÄ MCPPROTOCOLpython.MD     # Documenta√ß√£o do protocolo MCP em Python\n‚îú‚îÄ‚îÄ requirements.txt         # Depend√™ncias do projeto\n‚îú‚îÄ‚îÄ setup.bat                # Script de configura√ß√£o para Windows\n‚îú‚îÄ‚îÄ smithery.json            # Schema para integra√ß√£o com Smithery\n‚îî‚îÄ‚îÄ test_client.py           # Cliente de teste para cria√ß√£o de pagamentos\n```\n\n## üîí Seguran√ßa\n\n- A chave de API √© armazenada como vari√°vel de ambiente, n√£o no c√≥digo-fonte\n- Comunica√ß√£o com a API da Gotas Commerce √© feita via HTTPS\n- O servidor MCP valida todos os par√¢metros antes de enviar para a API\n- Tratamento de erros adequado para evitar exposi√ß√£o de informa√ß√µes sens√≠veis\n\n## üß© Extensibilidade\n\nO projeto foi projetado para ser facilmente extens√≠vel:\n\n1. **Novas Funcionalidades**: Adicione novas ferramentas MCP implementando fun√ß√µes decoradas com `@mcp.tool()` no servidor\n2. **Integra√ß√£o com Outros Servi√ßos**: A arquitetura permite integrar facilmente outros servi√ßos al√©m da Gotas Commerce\n3. **Suporte a Novas Moedas**: A estrutura est√° preparada para suportar outras criptomoedas al√©m de USDT no futuro\n\n## üìö Exemplos de Uso\n\n### Criando um Pagamento (via Claude)\n\n```\nUsu√°rio: Preciso gerar um link de pagamento de 50 USDT.\n\nClaude: Vou gerar um link de pagamento para voc√™. Para qual URL devo configurar o redirecionamento ap√≥s o pagamento?\n\nUsu√°rio: https://meusite.com.br/obrigado\n\nClaude: [Utilizando ferramenta create-payment]\nCriando pagamento de 50 USDT com redirecionamento para https://meusite.com.br/obrigado...\n\nPronto! Criei um link de pagamento para 50 USDT.\n\nLink de pagamento: [URL gerado pela API]\nEste link expirar√° em 30 minutos. O cliente deve transferir exatamente 50 USDT para o endere√ßo da carteira mostrado na p√°gina de pagamento.\n```\n\n### Verificando Status (via Claude)\n\n```\nUsu√°rio: Verifique o status do meu pagamento com ID xyz123.\n\nClaude: [Utilizando ferramenta check-payment-status]\nVerificando o status do pagamento ID xyz123...\n\nO status atual do pagamento √©: PENDENTE\n- Valor: 50.00 USDT\n- Criado em: [timestamp]\n- Expira em: [timestamp]\n\nO pagamento ainda n√£o foi confirmado na blockchain. Voc√™ pode acompanhar usando o link de pagamento ou me pedir para verificar novamente mais tarde.\n```\n\n## üìû Suporte e Contato\n\nPara suporte ou informa√ß√µes adicionais, entre em contato com a equipe de desenvolvimento da Gotas ou abra uma issue no reposit√≥rio GitHub.\n\n## üìú Licen√ßa\n\n[MIT License](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpgotas",
        "usdt",
        "ecommerce",
        "usdt cryptocurrency",
        "verification usdt",
        "cryptocurrency payments"
      ],
      "category": "ecommerce-and-retail"
    },
    "charlesmuchene--pref-editor-mcp-server": {
      "owner": "charlesmuchene",
      "name": "pref-editor-mcp-server",
      "url": "https://github.com/charlesmuchene/pref-editor-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/charlesmuchene.webp",
      "description": "Natural language editing of Android user preferences during app development, enabling management of preferences, listing connected devices, and querying installed apps through intuitive commands.",
      "stars": 2,
      "forks": 4,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-08-27T04:52:33Z",
      "readme_content": "# Android Preference Editor MCP Server\n\n<a href=\"https://glama.ai/mcp/servers/@charlesmuchene/pref-editor-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@charlesmuchene/pref-editor-mcp-server/badge\" alt=\"Pref-Editor MCP Server\"/>\n</a>\n\n## Overview\n\nUnlock the power of natural language for Android app development with the _Android Preference Editor MCP Server_. Effortlessly edit user preferences in real time using simple, conversational commands‚Äîno manual file editing required! Built on the robust [Android Preference Editor](https://github.com/charlesmuchene/pref-editor-js) library, this server seamlessly connects with **MCP (Model Context Protocol) clients** to supercharge your AI-driven workflows.\n\nJust tell the MCP server what you want to do, for example:\n\n- ‚ÄúToggle the _isVisited_ user preference‚Äù\n- ‚ÄúTurn off the onboarding guide‚Äù\n- ‚ÄúList all the user preference values‚Äù\n- \"Create a timestamp preference with the current epoch time\"\n\nExperience a smarter, faster way to manage Android preferences‚Äîjust ask!\n\n## Available Tools\n\n| Name              | Description                                           |\n| ----------------- | ----------------------------------------------------- |\n| change_preference | Changes the value of an existing preference           |\n| delete_preference | Delete an existing preference                         |\n| add_preference    | Adds a new preference given the name, value, and type |\n| read_preferences  | Reads all user preferences in a file                  |\n| devices           | Lists connected Android devices                       |\n| list_apps         | Lists apps installed on the device                    |\n| list_files        | Lists preference files for an app                     |\n\n## Demo\n\n| Toggle a user preference                       | Available tools                              | Add a preference                                 |\n| ---------------------------------------------- | -------------------------------------------- | ------------------------------------------------ |\n|  |  |  |\n\n> See more demos in the [demo screenshots directory](./demo/)\n\n## Requirements\n\n- Android [adb](https://developer.android.com/tools/adb) (`v1.0.41+`)\n- Node.js 14+ _or_ Docker\n\n## Integrations\n\n> This server is available in the [Docker MCP Catalog](https://hub.docker.com/mcp/server/pref-editor/overview). Enable the Pref Editor server in Docker desktop's MCP [toolkit](https://docs.docker.com/ai/mcp-catalog-and-toolkit/toolkit/) and you'll have access to all the available tools.\n\n### Android Studio\n\n> Assumes an MCP compatible client is installed.\n\nAdd the following configuration to the MCP server config file. For example, for the GitHub Copilot IntelliJ Plugin, the config file is `~/.config/github-copilot/intellij/mcp.json`.\n\n#### Docker\n\n```json\n{\n  \"servers\": {\n    \"pref-editor\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"charlesmuchene/pref-editor-mcp-server\"]\n    }\n  }\n}\n```\n\n#### npx\n\n```json\n{\n  \"servers\": {\n    \"pref-editor\": {\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@charlesmuchene/pref-editor-mcp-server\"]\n    }\n  }\n}\n```\n\n### Claude Desktop\n\nAdd this server to the `/Users/<username>/Library/Application Support/Claude/claude_desktop_config.json` configuration file.\n\n#### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"pref-editor\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"charlesmuchene/pref-editor-mcp-server\"]\n    }\n  }\n}\n```\n\n#### npx\n\n```json\n{\n  \"mcpServers\": {\n    \"pref-editor\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@charlesmuchene/pref-editor-mcp-server\"]\n    }\n  }\n}\n```\n\nYou can troubleshoot problems by tailing the log file:\n\n```sh\ntail -f ~/Library/Logs/Claude/mcp-server-pref-editor.log\n```\n\n### VS Code\n\nTo use the server with VS Code, you need to:\n\n1. Add the MCP Server configuration to your `mcp.json` or `settings.json`:\n\n.vscode/mcp.json\n\n```json\n{\n  \"servers\": {\n    \"pref-editor\": {\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@charlesmuchene/pref-editor-mcp-server\"]\n    }\n  }\n}\n```\n\n~/Library/Application Support/Code/User/settings.json\n\n```json\n{\n  \"mcp\": {\n    \"pref-editor\": {\n      \"type\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@charlesmuchene/pref-editor-mcp-server\"]\n    }\n  }\n}\n```\n\nFor more information, see the [VS Code documentation](https://code.visualstudio.com/docs/copilot/chat/mcp-servers).\n\n## Building Locally\n\nRefer to [DEV.md](./DEV.md) for instructions on how to build this project.\n\n## Testing\n\nYou can use the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) for visual debugging of this MCP Server.\n\n```sh\nnpx @modelcontextprotocol/inspector npm run start\n```\n\n## License\n\nSee [LICENSE](./LICENSE)\n\n## Contact\n\nFor questions or support, reach out via [GitHub Issues](https://github.com/charlesmuchene/pref-editor-mcp-server/issues).\n\n## Contributing\n\nWe welcome contributions from the community! üéâ\n\n**First-time contributors:** Please start by reading our [CONTRIBUTING.md](./CONTRIBUTING.md) guide, which covers:\n\n- PR requirements and title format\n- Development setup and workflow\n- Code quality standards\n- License information\n\nFor detailed development instructions, see [DEV.md](./DEV.md).\n\n[![Contributor Covenant](https://img.shields.io/badge/Contributor%20Covenant-2.1-4baaaa.svg)](./CONTRIBUTING.md)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "apps",
        "ecommerce",
        "android",
        "editing android",
        "preferences app",
        "ecommerce retail"
      ],
      "category": "ecommerce-and-retail"
    },
    "clockworked247--flights-mcp-ts": {
      "owner": "clockworked247",
      "name": "flights-mcp-ts",
      "url": "https://github.com/clockworked247/flights-mcp-ts",
      "imageUrl": "/freedevtools/mcp/pfp/clockworked247.webp",
      "description": "A TypeScript implementation that connects to the Duffel API for searching one-way, round-trip, and multi-city flights, as well as finding accommodation options. It facilitates detailed flight offer retrieval, cabin class specification, passenger count, and time window filtering.",
      "stars": 4,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-13T15:12:23Z",
      "readme_content": "# Flight + Stay Search MCP (TypeScript)\n\nA TypeScript implementation of a flight & Stay search MCP server that uses the Duffel API to search for flights. This MCP server provides tools to search for one-way, round-trip, and multi-city flights.\n\n[![smithery badge](https://smithery.ai/badge/@clockworked247/flights-mcp-ts)](https://smithery.ai/server/@clockworked247/flights-mcp-ts)\n\n## Features\n\n- Search for one-way, round-trip, and multi-city flights\n- Get detailed information about specific flight offers\n- Specify cabin class, number of passengers, and connection preferences\n- Filter by departure and arrival time windows\n- Search for travel stays (hotels/accommodations)\n- Get guest reviews for a specific stay/hotel\n\n## Setup\n\n1. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n2. Build the project:\n   ```bash\n   npm run build\n   ```\n\n3. Start the server:\n   ```bash\n   npm start\n   ```\n\n## Environment Variables\n\nCreate a `.env` file with:\n```\nDUFFEL_API_KEY=your_duffel_api_key\n```\n\nYou can start with a test API key (`duffel_test`) to try the functionality.\n\n## Using with Smithery\n\nTo publish this MCP to Smithery:\n```bash\nnpx @smithery/cli publish\n```\n\nTo run the published MCP:\n```bash\nnpx @smithery/cli run @your-username/flights-mcp-ts --config \"{\\\"duffelApiKey\\\":\\\"your_duffel_api_key\\\"}\"\n```\n\n## Available Tools\n\nThis MCP provides the following tools:\n\n1. `search_flights` - Search for one-way, round-trip, or multi-city flights\n2. `get_offer_details` - Get detailed information about a specific flight offer\n3. `search_multi_city` - A specialized tool for multi-city flight searches\n4. `search_stays` - Search for travel stays (hotels/accommodations)\n5. `get_stay_reviews` - Get guest reviews for a specific stay/hotel\n\n## Example Queries\n\n- \"Find flights from SFO to NYC on May 15, 2025\"\n- \"Search for a round-trip flight from LAX to LHR departing June 10 and returning June 20\"\n- \"Find business class flights from Tokyo to Paris for 2 adults\"\n- \"Get details for flight offer [offer_id]\"\n- \"Find hotels in London for 2 guests from 2025-06-10 to 2025-06-12\"\n- \"Get reviews for stay [hotel_id]\"\n\n---\n\n## Stays/Hotel Search and Reviews\n\n### 1. Search for Stays (`search_stays`)\n\n**Parameters:**\n- `location` (string): City, airport code, or area to search for stays\n- `check_in_date` (string): Check-in date (YYYY-MM-DD)\n- `check_out_date` (string): Check-out date (YYYY-MM-DD)\n- `guests` (number): Number of guests\n- `rooms` (number, optional): Number of rooms\n- `radius_km` (number, optional): Search radius in kilometers\n\n**Example Request:**\n```json\n{\n  \"location\": \"London\",\n  \"check_in_date\": \"2025-06-10\",\n  \"check_out_date\": \"2025-06-12\",\n  \"guests\": 2\n}\n```\n\n**Example Response:**\n```json\n{\n  \"offers\": [\n    {\n      \"offer_id\": \"off_123\",\n      \"hotel_id\": \"acc_0000AWr2VsUNIF1Vl91xg0\",\n      \"hotel_name\": \"The Grand Hotel\",\n      \"address\": \"1 Main St, London\",\n      \"price\": { \"amount\": \"350.00\", \"currency\": \"GBP\" },\n      \"room_type\": \"Deluxe Suite\",\n      \"cancellation_policy\": \"Free cancellation until 24h before check-in\"\n    }\n  ]\n}\n```\n\n**Note:** Use the `hotel_id` from the search results as the `stay_id` for reviews.\n\n---\n\n### 2. Get Stay Reviews (`get_stay_reviews`)\n\n**Parameters:**\n- `stay_id` (string): The unique Duffel stay/hotel ID (from the search_stays result)\n- `after` (string, optional): Pagination cursor (after)\n- `before` (string, optional): Pagination cursor (before)\n- `limit` (number, optional): Max reviews to return (1-200)\n\n**Example Request:**\n```json\n{\n  \"stay_id\": \"acc_0000AWr2VsUNIF1Vl91xg0\"\n}\n```\n\n**Example Response:**\n```json\n{\n  \"meta\": { \"limit\": 50, \"after\": \"...\" },\n  \"reviews\": [\n    {\n      \"text\": \"Excellent facilities. Polite staff.\\nAir conditioning could use some maintenance.\\n\",\n      \"score\": 8.4,\n      \"reviewer_name\": \"Bessie Coleman\",\n      \"created_at\": \"2025-01-01\"\n    }\n  ]\n}\n```\n\n## Local Development\n\nFor development with automatic reloading:\n```bash\nnpm run dev\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "flights",
        "ts",
        "ecommerce",
        "flights mcp",
        "flights finding",
        "mcp ts"
      ],
      "category": "ecommerce-and-retail"
    },
    "dodopayments--dodopayments-typescript": {
      "owner": "dodopayments",
      "name": "dodopayments-typescript",
      "url": "https://github.com/dodopayments/dodopayments-typescript",
      "imageUrl": "/freedevtools/mcp/pfp/dodopayments.webp",
      "description": "Provide access to the Dodo Payments REST API for server-side applications using TypeScript or JavaScript. Simplify payment processing and management while handling errors, retries, and pagination efficiently.",
      "stars": 28,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-30T04:55:34Z",
      "readme_content": "# Dodo Payments TypeScript API Library\n\n[![NPM version](<https://img.shields.io/npm/v/dodopayments.svg?label=npm%20(stable)>)](https://npmjs.org/package/dodopayments) ![npm bundle size](https://img.shields.io/bundlephobia/minzip/dodopayments)\n\nThis library provides convenient access to the [Dodo Payments](https://dodopayments.com) REST API from server-side TypeScript or JavaScript.\n\nThe REST API documentation can be found on [docs.dodopayments.com](https://docs.dodopayments.com/api-reference/introduction). The full API of this library can be found in [api.md](api.md).\n\nIt is generated with [Stainless](https://www.stainless.com/).\n\n## Installation\n\n```sh\nnpm install dodopayments\n```\n\n## Usage\n\nThe full API of this library can be found in [api.md](api.md).\n\n<!-- prettier-ignore -->\n```js\nimport DodoPayments from 'dodopayments';\n\nconst client = new DodoPayments({\n  bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted\n  environment: 'test_mode', // defaults to 'live_mode'\n});\n\nconst checkoutSessionResponse = await client.checkoutSessions.create({\n  product_cart: [{ product_id: 'product_id', quantity: 0 }],\n});\n\nconsole.log(checkoutSessionResponse.session_id);\n```\n\n### Request & Response types\n\nThis library includes TypeScript definitions for all request params and response fields. You may import and use them like so:\n\n<!-- prettier-ignore -->\n```ts\nimport DodoPayments from 'dodopayments';\n\nconst client = new DodoPayments({\n  bearerToken: process.env['DODO_PAYMENTS_API_KEY'], // This is the default and can be omitted\n  environment: 'test_mode', // defaults to 'live_mode'\n});\n\nconst params: DodoPayments.CheckoutSessionCreateParams = {\n  product_cart: [{ product_id: 'product_id', quantity: 0 }],\n};\nconst checkoutSessionResponse: DodoPayments.CheckoutSessionResponse = await client.checkoutSessions.create(\n  params,\n);\n```\n\nDocumentation for each method, request param, and response field are available in docstrings and will appear on hover in most modern editors.\n\n## Handling errors\n\nWhen the library is unable to connect to the API,\nor if the API returns a non-success status code (i.e., 4xx or 5xx response),\na subclass of `APIError` will be thrown:\n\n<!-- prettier-ignore -->\n```ts\nconst checkoutSessionResponse = await client.checkoutSessions\n  .create({ product_cart: [{ product_id: 'product_id', quantity: 0 }] })\n  .catch(async (err) => {\n    if (err instanceof DodoPayments.APIError) {\n      console.log(err.status); // 400\n      console.log(err.name); // BadRequestError\n      console.log(err.headers); // {server: 'nginx', ...}\n    } else {\n      throw err;\n    }\n  });\n```\n\nError codes are as follows:\n\n| Status Code | Error Type                 |\n| ----------- | -------------------------- |\n| 400         | `BadRequestError`          |\n| 401         | `AuthenticationError`      |\n| 403         | `PermissionDeniedError`    |\n| 404         | `NotFoundError`            |\n| 422         | `UnprocessableEntityError` |\n| 429         | `RateLimitError`           |\n| >=500       | `InternalServerError`      |\n| N/A         | `APIConnectionError`       |\n\n### Retries\n\nCertain errors will be automatically retried 2 times by default, with a short exponential backoff.\nConnection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict,\n429 Rate Limit, and >=500 Internal errors will all be retried by default.\n\nYou can use the `maxRetries` option to configure or disable this:\n\n<!-- prettier-ignore -->\n```js\n// Configure the default for all requests:\nconst client = new DodoPayments({\n  maxRetries: 0, // default is 2\n});\n\n// Or, configure per-request:\nawait client.checkoutSessions.create({ product_cart: [{ product_id: 'product_id', quantity: 0 }] }, {\n  maxRetries: 5,\n});\n```\n\n### Timeouts\n\nRequests time out after 1 minute by default. You can configure this with a `timeout` option:\n\n<!-- prettier-ignore -->\n```ts\n// Configure the default for all requests:\nconst client = new DodoPayments({\n  timeout: 20 * 1000, // 20 seconds (default is 1 minute)\n});\n\n// Override per-request:\nawait client.checkoutSessions.create({ product_cart: [{ product_id: 'product_id', quantity: 0 }] }, {\n  timeout: 5 * 1000,\n});\n```\n\nOn timeout, an `APIConnectionTimeoutError` is thrown.\n\nNote that requests which time out will be [retried twice by default](#retries).\n\n## Auto-pagination\n\nList methods in the DodoPayments API are paginated.\nYou can use the `for await ‚Ä¶ of` syntax to iterate through items across all pages:\n\n```ts\nasync function fetchAllPaymentListResponses(params) {\n  const allPaymentListResponses = [];\n  // Automatically fetches more pages as needed.\n  for await (const paymentListResponse of client.payments.list()) {\n    allPaymentListResponses.push(paymentListResponse);\n  }\n  return allPaymentListResponses;\n}\n```\n\nAlternatively, you can request a single page at a time:\n\n```ts\nlet page = await client.payments.list();\nfor (const paymentListResponse of page.items) {\n  console.log(paymentListResponse);\n}\n\n// Convenience methods are provided for manually paginating:\nwhile (page.hasNextPage()) {\n  page = await page.getNextPage();\n  // ...\n}\n```\n\n## Advanced Usage\n\n### Accessing raw Response data (e.g., headers)\n\nThe \"raw\" `Response` returned by `fetch()` can be accessed through the `.asResponse()` method on the `APIPromise` type that all methods return.\nThis method returns as soon as the headers for a successful response are received and does not consume the response body, so you are free to write custom parsing or streaming logic.\n\nYou can also use the `.withResponse()` method to get the raw `Response` along with the parsed data.\nUnlike `.asResponse()` this method consumes the body, returning once it is parsed.\n\n<!-- prettier-ignore -->\n```ts\nconst client = new DodoPayments();\n\nconst response = await client.checkoutSessions\n  .create({ product_cart: [{ product_id: 'product_id', quantity: 0 }] })\n  .asResponse();\nconsole.log(response.headers.get('X-My-Header'));\nconsole.log(response.statusText); // access the underlying Response object\n\nconst { data: checkoutSessionResponse, response: raw } = await client.checkoutSessions\n  .create({ product_cart: [{ product_id: 'product_id', quantity: 0 }] })\n  .withResponse();\nconsole.log(raw.headers.get('X-My-Header'));\nconsole.log(checkoutSessionResponse.session_id);\n```\n\n### Logging\n\n> [!IMPORTANT]\n> All log messages are intended for debugging only. The format and content of log messages\n> may change between releases.\n\n#### Log levels\n\nThe log level can be configured in two ways:\n\n1. Via the `DODO_PAYMENTS_LOG` environment variable\n2. Using the `logLevel` client option (overrides the environment variable if set)\n\n```ts\nimport DodoPayments from 'dodopayments';\n\nconst client = new DodoPayments({\n  logLevel: 'debug', // Show all log messages\n});\n```\n\nAvailable log levels, from most to least verbose:\n\n- `'debug'` - Show debug messages, info, warnings, and errors\n- `'info'` - Show info messages, warnings, and errors\n- `'warn'` - Show warnings and errors (default)\n- `'error'` - Show only errors\n- `'off'` - Disable all logging\n\nAt the `'debug'` level, all HTTP requests and responses are logged, including headers and bodies.\nSome authentication-related headers are redacted, but sensitive data in request and response bodies\nmay still be visible.\n\n#### Custom logger\n\nBy default, this library logs to `globalThis.console`. You can also provide a custom logger.\nMost logging libraries are supported, including [pino](https://www.npmjs.com/package/pino), [winston](https://www.npmjs.com/package/winston), [bunyan](https://www.npmjs.com/package/bunyan), [consola](https://www.npmjs.com/package/consola), [signale](https://www.npmjs.com/package/signale), and [@std/log](https://jsr.io/@std/log). If your logger doesn't work, please open an issue.\n\nWhen providing a custom logger, the `logLevel` option still controls which messages are emitted, messages\nbelow the configured level will not be sent to your logger.\n\n```ts\nimport DodoPayments from 'dodopayments';\nimport pino from 'pino';\n\nconst logger = pino();\n\nconst client = new DodoPayments({\n  logger: logger.child({ name: 'DodoPayments' }),\n  logLevel: 'debug', // Send all messages to pino, allowing it to filter\n});\n```\n\n### Making custom/undocumented requests\n\nThis library is typed for convenient access to the documented API. If you need to access undocumented\nendpoints, params, or response properties, the library can still be used.\n\n#### Undocumented endpoints\n\nTo make requests to undocumented endpoints, you can use `client.get`, `client.post`, and other HTTP verbs.\nOptions on the client, such as retries, will be respected when making these requests.\n\n```ts\nawait client.post('/some/path', {\n  body: { some_prop: 'foo' },\n  query: { some_query_arg: 'bar' },\n});\n```\n\n#### Undocumented request params\n\nTo make requests using undocumented parameters, you may use `// @ts-expect-error` on the undocumented\nparameter. This library doesn't validate at runtime that the request matches the type, so any extra values you\nsend will be sent as-is.\n\n```ts\nclient.checkoutSessions.create({\n  // ...\n  // @ts-expect-error baz is not yet public\n  baz: 'undocumented option',\n});\n```\n\nFor requests with the `GET` verb, any extra params will be in the query, all other requests will send the\nextra param in the body.\n\nIf you want to explicitly send an extra argument, you can do so with the `query`, `body`, and `headers` request\noptions.\n\n#### Undocumented response properties\n\nTo access undocumented response properties, you may access the response object with `// @ts-expect-error` on\nthe response object, or cast the response object to the requisite type. Like the request params, we do not\nvalidate or strip extra properties from the response from the API.\n\n### Customizing the fetch client\n\nBy default, this library expects a global `fetch` function is defined.\n\nIf you want to use a different `fetch` function, you can either polyfill the global:\n\n```ts\nimport fetch from 'my-fetch';\n\nglobalThis.fetch = fetch;\n```\n\nOr pass it to the client:\n\n```ts\nimport DodoPayments from 'dodopayments';\nimport fetch from 'my-fetch';\n\nconst client = new DodoPayments({ fetch });\n```\n\n### Fetch options\n\nIf you want to set custom `fetch` options without overriding the `fetch` function, you can provide a `fetchOptions` object when instantiating the client or making a request. (Request-specific options override client options.)\n\n```ts\nimport DodoPayments from 'dodopayments';\n\nconst client = new DodoPayments({\n  fetchOptions: {\n    // `RequestInit` options\n  },\n});\n```\n\n#### Configuring proxies\n\nTo modify proxy behavior, you can provide custom `fetchOptions` that add runtime-specific proxy\noptions to requests:\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/node.svg\" align=\"top\" width=\"18\" height=\"21\"> **Node** <sup>[[docs](https://github.com/nodejs/undici/blob/main/docs/docs/api/ProxyAgent.md#example---proxyagent-with-fetch)]</sup>\n\n```ts\nimport DodoPayments from 'dodopayments';\nimport * as undici from 'undici';\n\nconst proxyAgent = new undici.ProxyAgent('http://localhost:8888');\nconst client = new DodoPayments({\n  fetchOptions: {\n    dispatcher: proxyAgent,\n  },\n});\n```\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/bun.svg\" align=\"top\" width=\"18\" height=\"21\"> **Bun** <sup>[[docs](https://bun.sh/guides/http/proxy)]</sup>\n\n```ts\nimport DodoPayments from 'dodopayments';\n\nconst client = new DodoPayments({\n  fetchOptions: {\n    proxy: 'http://localhost:8888',\n  },\n});\n```\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/deno.svg\" align=\"top\" width=\"18\" height=\"21\"> **Deno** <sup>[[docs](https://docs.deno.com/api/deno/~/Deno.createHttpClient)]</sup>\n\n```ts\nimport DodoPayments from 'npm:dodopayments';\n\nconst httpClient = Deno.createHttpClient({ proxy: { url: 'http://localhost:8888' } });\nconst client = new DodoPayments({\n  fetchOptions: {\n    client: httpClient,\n  },\n});\n```\n\n## Frequently Asked Questions\n\n## Semantic versioning\n\nThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:\n\n1. Changes that only affect static types, without breaking runtime behavior.\n2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals.)_\n3. Changes that we do not expect to impact the vast majority of users in practice.\n\nWe take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.\n\nWe are keen for your feedback; please open an [issue](https://www.github.com/dodopayments/dodopayments-typescript/issues) with questions, bugs, or suggestions.\n\n## Requirements\n\nTypeScript >= 4.9 is supported.\n\nThe following runtimes are supported:\n\n- Web browsers (Up-to-date Chrome, Firefox, Safari, Edge, and more)\n- Node.js 20 LTS or later ([non-EOL](https://endoflife.date/nodejs)) versions.\n- Deno v1.28.0 or higher.\n- Bun 1.0 or later.\n- Cloudflare Workers.\n- Vercel Edge Runtime.\n- Jest 28 or greater with the `\"node\"` environment (`\"jsdom\"` is not supported at this time).\n- Nitro v2.6 or greater.\n\nNote that React Native is not supported at this time.\n\nIf you are interested in other runtime environments, please open or upvote an issue on GitHub.\n\n## Contributing\n\nSee [the contributing documentation](./CONTRIBUTING.md).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dodopayments",
        "dodo",
        "ecommerce",
        "dodopayments typescript",
        "dodopayments dodopayments",
        "retail dodopayments"
      ],
      "category": "ecommerce-and-retail"
    },
    "ericzakariasson--uber-eats-mcp-server": {
      "owner": "ericzakariasson",
      "name": "uber-eats-mcp-server",
      "url": "https://github.com/ericzakariasson/uber-eats-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ericzakariasson.webp",
      "description": "Integrate with Uber Eats to facilitate food delivery services while leveraging external tools in LLM applications. This server serves as a proof of concept for building rich, interactive solutions centered around food delivery.",
      "stars": 204,
      "forks": 35,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-03T22:30:18Z",
      "readme_content": "# Uber Eats MCP Server\n\nThis is a POC of how you can build an MCP servers on top of Uber Eats\n\nhttps://github.com/user-attachments/assets/05efbf51-1b95-4bd2-a327-55f1fe2f958b\n\n## What is MCP?\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) is an open protocol that enables seamless integration between LLM applications and external tools.\n\n## Prerequisites\n\n- Python 3.12 or higher\n- Anthropic API key or other supported LLM provider\n\n## Setup\n\n1. Ensure you have a virtual environment activated:\n   ```\n   uv venv\n   source .venv/bin/activate  # On Unix/Mac\n   ```\n\n2. Install required packages:\n   ```\n   uv pip install -r requirements.txt\n   playwright install\n   ```\n\n3. Update the `.env` file with your API key:\n   ```\n   ANTHROPIC_API_KEY=your_openai_api_key_here\n   ```\n\n## Note\n\nSince we're using stdio as MCP transport, we have disable all output from browser use\n\n## Debugging\n\nYou can run the MCP inspector tool with this command\n\n```bash\nuv run mcp dev server.py\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "uber",
        "ecommerce",
        "mcp",
        "uber eats",
        "mcp server",
        "integrate uber"
      ],
      "category": "ecommerce-and-retail"
    },
    "everimbaq--mcp-nftgo-api": {
      "owner": "everimbaq",
      "name": "mcp-nftgo-api",
      "url": "https://github.com/everimbaq/mcp-nftgo-api",
      "imageUrl": "/freedevtools/mcp/pfp/everimbaq.webp",
      "description": "Provides access to NFT data and insights through an API, enabling retrieval of metadata, statistics, and analytics for NFT collections and individual assets. Supports features such as market trends analysis and historical pricing data based on the Ethereum blockchain.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-25T02:10:56Z",
      "readme_content": "# NFTGo MCP\n\nA Model Context Protocol server that provides HTTP request to NFTGo Developer API based on NFTGo [API documentation](https://docs.nftgo.io/reference/introduction).\n\nCurrently only support Ethereum.\n\n## Key Features\n**1. NFT Collection**\n- Retrieve Collection Details: Fetch metadata and statistics for specific NFT collections.\n- List Collections: Obtain a list of NFT collections with filtering and sorting options.\n\n**2. NFT Asset**\n- Get NFT Details: Access detailed information about individual NFTs, including metadata and ownership.\n- List NFTs: Retrieve lists of NFTs based on various criteria such as collection, owner, or traits.\n\n**3. Market Data and Analytics**\n- Market Trends: Analyze market trends and metrics over time.\n- Price History: Access historical pricing data for NFTs and collections.\n- Volume and Sales Data: Retrieve data on trading volumes and sales activities.\n\n**4. User and Wallet Information**\n- Wallet Holdings: View NFTs held by specific wallet addresses.\n- Transaction History: Access the transaction history associated with wallets or NFTs.\n\n**5. Search and Filtering Capabilities**\n- Advanced Search: Perform searches across NFTs and collections using various filters and parameters.\n- Trait-Based Filtering: Filter NFTs based on specific traits or attributes.\n\n**6. Real-Time Data and Notifications**\n- Webhooks: Set up webhooks to receive real-time updates on specific events or changes.\n- Live Data Feeds: Access live data streams for market activities and NFT events.\n\n## Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"nftgoapi\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@nftgo/mcp-nftgo-api\", \"NFTGO-API-KEY\"]\n    }\n  }\n}\n```\n\nReplace `NFTGO-API-KEY` with your API key. You can create your free `NFTGo-API-KEY` [here](https://nftgo.io/developers).\n\n## Building\n\n```sh\npnpm install\npnpm build\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nftgo",
        "nft",
        "ecommerce",
        "nftgo api",
        "analytics nft",
        "nft data"
      ],
      "category": "ecommerce-and-retail"
    },
    "findmine--findmine-mcp": {
      "owner": "findmine",
      "name": "findmine-mcp",
      "url": "https://github.com/findmine/findmine-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/findmine.webp",
      "description": "Connects to FindMine's styling API to provide personalized outfit recommendations, detailed product information, and visually similar product suggestions. Offers access to styling advice and outfit guidance through various URI schemes for products and looks.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-09T07:32:47Z",
      "readme_content": "# FindMine Shopping Stylist\n\nA Model Context Protocol (MCP) server that integrates FindMine's powerful product styling and outfitting recommendations with Claude and other MCP-compatible applications.\n\n## Overview\n\nThis MCP server connects to FindMine's styling API and exposes its functionality to Large Language Models through the Model Context Protocol. It allows users to:\n\n- Browse product and outfit information\n- Get outfit recommendations for specific products\n- Find visually similar products\n- Access style guidance and fashion advice\n\n## Features\n\n### Resources\n- **Products**: Detailed product information with `product:///` URI scheme\n- **Looks**: Complete outfit recommendations with `look:///` URI scheme\n\n### Tools\n- **get_style_guide**: Access detailed fashion advice and styling guidelines\n- **get_complete_the_look**: Get outfit recommendations for a product\n- **get_visually_similar**: Find visually similar products\n\n### Prompts\n- **outfit_completion**: Get styling advice for complete outfits\n- **styling_guide**: Access comprehensive fashion styling guidelines\n- **findmine_help**: Learn how to use FindMine's tools and resources\n\n## Installation\n\n### Option 1: Install from npm\n\n```bash\n# Install and run directly (recommended)\nnpx findmine-mcp\n\n# Or install globally\nnpm install -g findmine-mcp\nfindmine-mcp\n```\n\n### Option 2: Run with Docker\n\n```bash\ndocker run -e FINDMINE_APP_ID=your_app_id findmine/mcp-server:latest\n```\n\n### Option 3: Clone and build from source\n\n```bash\n# Clone the repository\ngit clone https://github.com/findmine/findmine-mcp.git\ncd findmine-mcp\n\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# For development with auto-rebuild\nnpm run watch\n```\n\n## Configuration\n\n### Environment Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `FINDMINE_API_URL` | FindMine API base URL | https://api.findmine.com |\n| `FINDMINE_APP_ID` | Your FindMine application ID | DEMO_APP_ID |\n| `FINDMINE_API_VERSION` | API version to use | v3 |\n| `FINDMINE_DEFAULT_REGION` | Default region code | us |\n| `FINDMINE_DEFAULT_LANGUAGE` | Default language code | en |\n| `FINDMINE_CACHE_ENABLED` | Enable response caching | true |\n| `FINDMINE_CACHE_TTL_MS` | Cache time-to-live in ms | 3600000 (1 hour) |\n| `NODE_ENV` | Set to \"development\" for sample data | - |\n\n## Usage with Claude Desktop\n\nThe server automatically configures Claude Desktop during installation. To verify:\n\n**macOS:**\n```bash\ncat ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n**Windows:**\n```\ntype %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n## Development\n\n### MCP Inspector\n\nThe MCP Inspector is a development tool for testing your server:\n\n```bash\nnpm run inspector\n```\n\nThis will open a web interface at http://localhost:5173 where you can interact with your server.\n\n### Development Mode\n\nRun the server with sample data:\n\n```bash\nNODE_ENV=development npm run build && node build/index.js\n```\n\n### Customizing the Style Guide\n\nThe style guide can be customized to match your brand's specific styling philosophies and fashion guidance. To customize the style guide:\n\n1. Locate the style guides in `src/index.ts` (search for `styleGuides`)\n2. Modify the content for each category (`general`, `color_theory`, `body_types`, etc.)\n3. Add new categories by extending the `styleGuides` object\n4. Customize occasion-specific and seasonal advice\n\nExample of adding a custom style guide category:\n\n```typescript\n// In src/index.ts\nconst styleGuides: Record<string, string> = {\n  // Existing categories...\n  \n  // Add your custom category\n  your_brand_style: `# Your Brand Style Guide\n  \n## Brand Aesthetic\n- Key elements of your brand's visual identity\n- Core style principles\n- Signature looks and combinations\n\n## Your Brand's Styling Do's\n- Brand-specific styling recommendations\n- Preferred color combinations\n- Signature styling techniques\n\n## Your Brand's Styling Don'ts\n- Combinations to avoid\n- Styling approaches that don't align with brand identity\n- Common styling mistakes to avoid\n`\n};\n```\n\nFor complete customization, you can modify the entire `get_style_guide` handler in `src/index.ts`.\n\n### Project Structure\n\n- `src/index.ts`: Main MCP server implementation\n- `src/api/`: FindMine API client\n- `src/services/`: Business logic and service layer\n- `src/types/`: TypeScript type definitions\n- `src/utils/`: Utility functions and helpers\n\n## API Examples\n\n### Get Style Guide\n\n```json\n{\n  \"name\": \"get_style_guide\",\n  \"arguments\": {\n    \"category\": \"color_theory\",\n    \"occasion\": \"wedding\"\n  }\n}\n```\n\n### Get Complete the Look\n\n```json\n{\n  \"name\": \"get_complete_the_look\",\n  \"arguments\": {\n    \"product_id\": \"P12345\",\n    \"product_color_id\": \"C789\"\n  }\n}\n```\n\n### Get Visually Similar Products\n\n```json\n{\n  \"name\": \"get_visually_similar\",\n  \"arguments\": {\n    \"product_id\": \"P12345\",\n    \"product_color_id\": \"C789\",\n    \"limit\": 5\n  }\n}\n```\n\n## Publishing\n\n### Publishing to npm\n\n```bash\n# Login to npm\nnpm login\n\n# Publish the package\nnpm publish\n\n# Update the version for future releases\nnpm version patch\n```\n\n### Publishing to Docker Hub\n\n```bash\n# Build the Docker image\ndocker build -t findmine/mcp-server:latest .\n\n# Login to Docker Hub\ndocker login\n\n# Push the image\ndocker push findmine/mcp-server:latest\n```\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "findmine",
        "mcp",
        "ecommerce",
        "retail findmine",
        "findmine mcp",
        "findmine styling"
      ],
      "category": "ecommerce-and-retail"
    },
    "hhw67865--tripadvisor-mcp-server": {
      "owner": "hhw67865",
      "name": "tripadvisor-mcp-server",
      "url": "https://github.com/hhw67865/tripadvisor-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/hhw67865.webp",
      "description": "Access TripAdvisor data to plan vacations by discovering attractions, restaurants, and hotels, while viewing photos and reviews. Offers an interactive prompt for vacation planning and detailed location information.",
      "stars": 2,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-23T08:57:58Z",
      "readme_content": "# TripAdvisor Vacation Planner MCP Server\n\nThis MCP server provides access to TripAdvisor data for planning vacations, finding attractions, restaurants, and hotels.\n\n## Features\n\n- Search for locations by name and category\n- Get detailed information about specific locations\n- Find nearby attractions, restaurants, and hotels\n- View photos and reviews\n- Interactive vacation planning prompt\n\n## Setup Instructions\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) - Fast Python package installer and resolver\n- TripAdvisor API key (get one from [TripAdvisor Developer Portal](https://developer.tripadvisor.com/))\n- Claude Desktop\n- Google Maps MCP Server (https://github.com/modelcontextprotocol/servers/tree/main/src/google-maps)\n\n### Installation with uv\n\n1. Clone this repository\n2. Create and activate a virtual environment:\n   ```bash\n   uv venv\n   # On Windows\n   .venv\\Scripts\\activate\n   # On macOS/Linux\n   source .venv/bin/activate\n   ```\n3. Install the required dependencies:\n   ```bash\n   uv add \"mcp[cli]\"\n   ```\n\n### Running the Server\n\nYou can run the server directly with:\n\n```bash\n# Set your API key as an environment variable\nexport TRIPADVISOR_API_KEY=your_api_key_here  # Linux/macOS\nset TRIPADVISOR_API_KEY=your_api_key_here     # Windows Command Prompt\n$env:TRIPADVISOR_API_KEY=\"your_api_key_here\"  # Windows PowerShell\n\n# Run the server\nmcp run server.py\n```\n\n### Setting up for Claude Desktop\n\nSet up the MCP Server with:\n\n```bash\nmcp install server.py\n```\n\n### Configuring Claude Desktop\n\n1. Open Claude Desktop\n2. Go to Settings > MCP Servers\n3. Add a new server with the following configuration:\n   ```json\n   {\n     \"tripadvisor\": {\n       \"command\": \"uv\",\n       \"args\": [\n         \"run\",\n         \"--with\",\n         \"mcp[cli]\",\n         \"mcp\",\n         \"run\",\n         \"PATH_TO_YOUR_PROJECT\\\\server.py\"\n       ],\n       \"env\": {\n         \"TRIPADVISOR_API_KEY\": \"YOUR_API_KEY_HERE\"\n       }\n     }\n   }\n   ```\n4. Replace `PATH_TO_YOUR_PROJECT` with the absolute path to your project directory\n5. Replace `YOUR_API_KEY_HERE` with your actual TripAdvisor API key\n\n### Using the Vacation Planner\n\n1. Start a new conversation in Claude\n2. Just prompt anything with \"Vacation Planner\" prompt\n3. Follow the interactive prompts to plan your perfect vacation!\n\n## API Endpoints Used\n\n- Location Search: Find locations by name and category\n- Location Details: Get comprehensive information about a location\n- Location Photos: View photos of a location\n- Location Reviews: Read reviews of a location\n- Nearby Search: Find locations near a specific point\n\n## Troubleshooting\n\n- If you see 401 Unauthorized errors, check that your API key is correct and that your IP is whitelisted in the TripAdvisor Developer Portal\n- For issues with Claude Desktop integration, verify your configuration settings and ensure the path to server.py is correct\n- If Claude is failing to complete, then there is a high chance that you are using too many input tokens. get_location_details_tool is usually the culprit.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "tripadvisor",
        "mcp",
        "tripadvisor mcp",
        "ecommerce retail",
        "tripadvisor data"
      ],
      "category": "ecommerce-and-retail"
    },
    "ibraheem4--clover-mcp": {
      "owner": "ibraheem4",
      "name": "clover-mcp",
      "url": "https://github.com/ibraheem4/clover-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Access Clover merchant data to retrieve merchant information, list inventory items, and manage orders through integration with generative AI models using OAuth authentication.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "oauth",
        "ecommerce",
        "merchant",
        "merchant data",
        "merchant information",
        "clover merchant"
      ],
      "category": "ecommerce-and-retail"
    },
    "ibraheem4--eventbrite-mcp": {
      "owner": "ibraheem4",
      "name": "eventbrite-mcp",
      "url": "https://github.com/ibraheem4/eventbrite-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Interact with the Eventbrite API to search for events, retrieve event details, and access venue information based on various criteria such as location, date, and category.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "eventbrite",
        "event",
        "events",
        "ibraheem4 eventbrite",
        "eventbrite mcp",
        "eventbrite api"
      ],
      "category": "ecommerce-and-retail"
    },
    "jgarciaga--overseerr-mcp": {
      "owner": "jgarciaga",
      "name": "overseerr-mcp",
      "url": "https://github.com/jgarciaga/overseerr-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jgarciaga.webp",
      "description": "Manage movie and TV show requests through the Overseerr API, providing real-time status updates and request management. Access pending requests and availability updates to streamline your media library experience.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-29T21:02:31Z",
      "readme_content": "# MCP server for Overseerr\n\nMCP server to interact with Overseerr API for movie and TV show requests management.\n\n<!-- Badge will be added once published -->\n\n## Components\n\n### Tools\n\nThe server implements multiple tools to interact with Overseerr:\n\n- overseerr_status: Get the status of the Overseerr server\n- overseerr_movie_requests: Get the list of all movie requests that satisfies the filter arguments\n- overseerr_tv_requests: Get the list of all TV show requests that satisfies the filter arguments\n\n### Example prompts\n\nIt's good to first instruct Claude to use Overseerr. Then it will always call the tool when appropriate.\n\nTry prompts like these:\n- Get the status of our Overseerr server\n- Show me all the movie requests that are currently pending\n- List all TV show requests from the last month that are now available\n- What movies have been requested but are not available yet?\n- What TV shows have recently become available in our library?\n\n## Configuration\n\n### Overseerr API Key & URL\n\nThere are two ways to configure the environment with the Overseerr API credentials:\n\n1. Add to server config (preferred)\n\n```json\n{\n  \"overseerr-mcp\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"overseerr-mcp\"\n    ],\n    \"env\": {\n      \"OVERSEERR_API_KEY\": \"<your_api_key_here>\",\n      \"OVERSEERR_URL\": \"<your_overseerr_url>\"\n    }\n  }\n}\n```\n\n2. Create a `.env` file in the working directory with the following required variables:\n\n```\nOVERSEERR_API_KEY=your_api_key_here\nOVERSEERR_URL=your_overseerr_url_here\n```\n\nNote: You can find the API key in the Overseerr settings under \"API Keys\".\n\n## Quickstart\n\n### Install\n\n#### Overseerr API Key\n\nYou need an Overseerr instance running and an API key:\n1. Navigate to your Overseerr installation\n2. Go to Settings ‚Üí General\n3. Find the \"API Key\" section\n4. Generate a new API key if you don't already have one\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"overseerr-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<dir_to>/overseerr-mcp\",\n        \"run\",\n        \"overseerr-mcp\"\n      ],\n      \"env\": {\n        \"OVERSEERR_API_KEY\": \"<your_api_key_here>\",\n        \"OVERSEERR_URL\": \"<your_overseerr_url>\"\n      }\n    }\n  }\n}\n```\n</details>\n\n**Note: This MCP server is not yet published. Currently, only the development configuration is available.**\n\n## Development\n\n### Building\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/overseerr-mcp run overseerr-mcp\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nYou can also watch the server logs with this command:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-overseerr-mcp.log",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "overseerr",
        "ecommerce",
        "jgarciaga",
        "overseerr mcp",
        "requests overseerr",
        "overseerr api"
      ],
      "category": "ecommerce-and-retail"
    },
    "jmarcher--tasty-tales": {
      "owner": "jmarcher",
      "name": "tasty-tales",
      "url": "https://github.com/jmarcher/tasty-tales",
      "imageUrl": "/freedevtools/mcp/pfp/jmarcher.webp",
      "description": "Build and manage rich, interactive recipes with features for searching, filtering, and discovering culinary content. Includes dynamic serving size calculators and interactive timers for a customized cooking experience.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-02-06T16:15:41Z",
      "readme_content": "# üçΩÔ∏è TastyTales\n\n<div align=\"center\">\n\n[![Nuxt 3](https://img.shields.io/badge/Nuxt-3-00DC82?style=for-the-badge&logo=nuxt.js)](https://nuxt.com)\n[![Vue 3](https://img.shields.io/badge/Vue-3-4FC08D?style=for-the-badge&logo=vue.js)](https://vuejs.org)\n[![TailwindCSS](https://img.shields.io/badge/Tailwind-CSS-38B2AC?style=for-the-badge&logo=tailwind-css)](https://tailwindcss.com)\n[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript)](https://www.typescriptlang.org)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg?style=for-the-badge)](LICENSE)\n\nA modern, feature-rich recipe platform built with Nuxt 3, Vue 3, and TailwindCSS. Perfect for culinary enthusiasts, food bloggers, and recipe creators.\n\n[Demo](https://demo-link) ¬∑ [Report Bug](https://github.com/yourusername/tastytales/issues) ¬∑ [Request Feature](https://github.com/yourusername/tastytales/issues)\n\n</div>\n\n## üíù Support My Work\n\n<div align=\"center\">\n  <a href=\"https://patreon.com/0xExile\">\n    <img src=\"https://img.shields.io/badge/Sponsor_on-Patreon-FF424D?style=for-the-badge&logo=patreon&logoColor=white\" alt=\"Sponsor on Patreon\" />\n  </a>\n</div>\n\n<p align=\"center\">\n  <strong>üåü Get Exclusive Access to Premium Content! üåü</strong><br>\n  Sponsor me on Patreon and get exclusive access to full Nuxt Apps with stunning designs,<br>components, and exclusive content!\n</p>\n\n## ‚ú® Features\n\n### Core Features\n\n- üìù **Rich Recipe Management**\n  - Step-by-step instructions\n  - Interactive timers with notifications\n  - Dynamic serving size calculator\n  - Ingredient management\n- üé® **Modern UI/UX**\n  - Clean, minimalist design\n  - Smooth animations and transitions\n  - Responsive layout for all devices\n  - Dark mode support\n- üîç **Search & Discovery**\n  - Full-text search\n  - Category and tag filtering\n  - Recipe recommendations\n\n## üß© Modules\n\nTastyTales uses several Nuxt modules to enhance functionality:\n\n- [@nuxt/content v3](https://content.nuxtjs.org) - File-based CMS\n- [@pinia/nuxt](https://pinia.vuejs.org/ssr/nuxt.html) - State Management\n- [@nuxtjs/tailwindcss](https://tailwindcss.nuxtjs.org) - CSS Framework\n- [@nuxtjs/google-fonts](https://google-fonts.nuxtjs.org) - Web Fonts\n- [nuxt-icon](https://github.com/nuxt-modules/icon) - Icon System\n\n## üìù Creating Content\n\n### Adding a New Recipe\n\n1. Create a new JSON file in `content/recipes/` with the following structure:\n\n```json\n{\n  \"title\": \"Classic Margherita Pizza\",\n  \"description\": \"Traditional Neapolitan pizza with fresh ingredients\",\n  \"image\": \"/images/recipes/margherita-pizza.jpg\",\n  \"prepTime\": \"15 minutes\",\n  \"cookTime\": \"12 minutes\",\n  \"servings\": 4,\n  \"difficulty\": \"medium\",\n  \"tags\": [\"italian\", \"pizza\", \"vegetarian\"],\n  \"ingredients\": [\n    \"Pizza dough\",\n    \"San Marzano tomatoes\",\n    \"Fresh mozzarella\",\n    \"Fresh basil\",\n    \"Olive oil\",\n    \"Salt\"\n  ],\n  \"instructions\": [\n    { \"instruction\": \"Preheat oven to 500¬∞F (260¬∞C)\", \"timer\": 1 },\n    { \"instruction\": \"Roll out the pizza dough\", \"timer\": 5 },\n    \"Spread tomato sauce\",\n    \"Add fresh mozzarella\",\n    \"Bake for 12-15 minutes\",\n    \"Garnish with fresh basil\"\n  ]\n}\n```\n\n### Adding a Blog Post\n\n1. Create a new Markdown file in `content/blog/` with the following frontmatter:\n\n```md\n---\ntitle: 'The Art of Pizza Making'\ndescription: 'Learn the secrets of making authentic Neapolitan pizza at home'\ndate: '2025-02-03'\nimage: '/images/blog/pizza-making.jpg'\nauthor:\n  name: 'John Doe'\n  avatar: '/images/authors/john.jpg'\ntags: ['tips', 'techniques', 'italian']\n---\n\n# The Art of Pizza Making\n\nYour blog content goes here in Markdown format...\n\n## Tips for Perfect Pizza\n\n1. Use high-quality ingredients\n2. Let the dough rest properly\n3. Preheat your oven thoroughly\n\n## Common Mistakes to Avoid\n\n- Don't overload toppings\n- Avoid using cold ingredients\n- Don't skip the resting time\n```\n\n### Working with Nuxt Content\n\nQuery your content in components/pages:\n\n```vue\n<script setup>\n// Fetch all recipes\nconst { data: recipes } = await useAsyncData('recipes', () =>\n  queryCollection('recipes').all()\n);\n\n// Fetch a single recipe\nconst { data: recipe } = await useAsyncData('pizza', () =>\n  queryCollection('recipes')\n    .where('title', '=', 'Classic Margherita Pizza')\n    .first()\n);\n\n// Search recipes by tag\nconst { data: italianRecipes } = await useAsyncData('italian', () =>\n  queryContent('recipes').where('tags', 'LIKE', 'italian').all()\n);\n</script>\n```\n\n## üöÄ Quick Start\n\n### Prerequisites\n\n- Node.js 16.x or later\n- pnpm 7.x or later\n\n### Installation\n\n1. Clone the repository\n\n```bash\ngit clone https://github.com/florianjs/tasty-tales.git\ncd tastytales\n```\n\n2. Install dependencies\n\n```bash\npnpm install\n```\n\n3. Start development server\n\n```bash\npnpm dev\n```\n\n4. Build for production\n\n```bash\npnpm build\n```\n\n## üìÅ Project Structure\n\n```\ntastytales/\n‚îú‚îÄ‚îÄ components/           # Reusable Vue components\n‚îÇ   ‚îú‚îÄ‚îÄ recipe/          # Recipe-specific components\n‚îÇ   ‚îî‚îÄ‚îÄ ui/              # UI components\n‚îú‚îÄ‚îÄ composables/         # Composable functions\n‚îú‚îÄ‚îÄ content/            # Recipe content (JSON/Markdown)\n‚îú‚îÄ‚îÄ layouts/            # Page layouts\n‚îú‚îÄ‚îÄ pages/              # Application routes\n‚îú‚îÄ‚îÄ public/             # Static assets\n‚îú‚îÄ‚îÄ stores/             # Pinia stores\n‚îú‚îÄ‚îÄ types/              # TypeScript types\n‚îú‚îÄ‚îÄ app.vue             # Application entry\n‚îú‚îÄ‚îÄ nuxt.config.ts      # Nuxt configuration\n‚îî‚îÄ‚îÄ tailwind.config.ts  # TailwindCSS configuration\n```\n\n## üé® Customization\n\n### Theme\n\nThe default theme uses a warm, inviting color scheme:\n\n```typescript\ncolors: {\n  primary: colors.orange,\n  accent: colors.amber,\n  // Customize in tailwind.config.ts\n}\n```\n\n### Typography\n\n- **Headings**: Playfair Display (elegant serif)\n- **Body**: Inter (modern sans-serif)\n\nCustomize fonts in `nuxt.config.ts`:\n\n```typescript\ngoogleFonts: {\n  families: {\n    'Playfair+Display': [500, 600, 700],\n    'Inter': [400, 500, 600]\n  }\n}\n```\n\n## ‚òÅÔ∏è Deployment\n\n### Recommended: Cloudflare Pages\n\nThis project is optimized for deployment on Cloudflare Pages, which provides:\n\n- Global CDN distribution\n- Automatic HTTPS\n- Zero cold starts\n- Easy deployment process\n\n### Deployment Steps\n\nBasic deployment steps:\n\n1. Connect your repository to Cloudflare Pages\n2. Set build command: `pnpm run build`\n3. Set build output directory: `.output/public`\n4. Add a D1 SQL Database from Cloudflare\n5. Bind your database to your Cloudflare Page\n\nFor detailed deployment instructions, follow the [Nuxt Content deployment guide for Cloudflare](https://content.nuxt.com/docs/deploy/serverless).\n\n## ü§ù Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\n\n1. Fork the Project\n2. Create your Feature Branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your Changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the Branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## üìù License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## üôè Acknowledgments\n\n- [Nuxt.js](https://nuxt.com) - The Intuitive Vue Framework\n- [TailwindCSS](https://tailwindcss.com) - A utility-first CSS framework\n- [Pinia](https://pinia.vuejs.org) - The Vue Store that you will enjoy using\n\n---\n\n<div align=\"center\">\n\nMade with ‚ù§Ô∏è by [0xExile](https://github.com/florianjs)\n\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jmarcher",
        "recipes",
        "culinary",
        "jmarcher tasty",
        "retail jmarcher",
        "interactive recipes"
      ],
      "category": "ecommerce-and-retail"
    },
    "kukapay--uniswap-trader-mcp": {
      "owner": "kukapay",
      "name": "uniswap-trader-mcp",
      "url": "https://github.com/kukapay/uniswap-trader-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Automate token swaps on the Uniswap DEX across multiple blockchains, providing real-time price quotes and executing trades with configurable parameters. Generate trading suggestions based on liquidity and fees while supporting various blockchain networks.",
      "stars": 31,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T20:19:48Z",
      "readme_content": "# Uniswap Trader MCP\n[![smithery badge](https://smithery.ai/badge/@kukapay/uniswap-trader-mcp)](https://smithery.ai/server/@kukapay/uniswap-trader-mcp)\n\nAn MCP server for AI agents to automate token swaps on Uniswap DEX across multiple blockchains.\n\n## Features\n- **Price Quotes**: Get real-time price quotes for token swaps with multi-hop route optimization.\n- **Swap Execution**: Execute swaps on Uniswap V3 with configurable slippage tolerance and deadlines.\n- **Swap Suggestions**: Generate trading suggestions based on liquidity, fees, and optimal paths.\n- **Multi-Chain Support**: Compatible with Ethereum, Optimism, Polygon, Arbitrum, Celo, BNB Chain, Avalanche, and Base.\n\n## Prerequisites\n- **Node.js**: Version 14.x or higher.\n- **npm**: For package management.\n- **Wallet**: A funded wallet with a private key for executing swaps.\n- **RPC Endpoints**: Access to blockchain RPC URLs (e.g., Infura, Alchemy) for supported chains.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Uniswap Trader MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/uniswap-trader-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/uniswap-trader-mcp --client claude\n```\n\n### Manual Installation\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/uniswap-trader-mcp.git\n   cd uniswap-trader-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"Uniswap-Trader-MCP\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/uniswap-trader-mcp/server/index.js\"],\n      \"env\": {\n        \"INFURA_KEY\": \"your infura key\",\n        \"WALLET_PRIVATE_KEY\": \"your private key\"\n      }\n    }\n  }\n}\n```\n## Usage\n\n### Supported Chains\nThe following blockchains are supported. Ensure each chain is configured in `chainConfigs.js` with a valid RPC URL, WETH address, and SwapRouter address.\n\n| Chain ID | Name         | Notes                                      |\n|----------|--------------|--------------------------------------------|\n| 1        | Ethereum     | Mainnet, widely used for Uniswap trades   |\n| 10       | Optimism     | Layer 2, requires Optimism RPC            |\n| 137      | Polygon      | Fast and low-cost, uses MATIC as native   |\n| 42161    | Arbitrum     | Layer 2, Arbitrum One network             |\n| 42220    | Celo         | Mobile-first blockchain, uses CELO        |\n| 56       | BNB Chain    | Binance Smart Chain, uses BNB             |\n| 43114    | Avalanche    | High-throughput, uses AVAX                |\n| 8453     | Base         | Coinbase‚Äôs Layer 2, built on Optimism     |\n\n\n### Tools and Prompts\n\n#### 1. `getPrice`\nFetches a price quote for a Uniswap swap.\n\n**Schema**:\n- `chainId`: Number (default: 1)\n- `tokenIn`: String (e.g., `\"NATIVE\"` or token address)\n- `tokenOut`: String (e.g., `\"NATIVE\"` or token address)\n- `amountIn`: String (optional, required for `\"exactIn\"`)\n- `amountOut`: String (optional, required for `\"exactOut\"`)\n- `tradeType`: `\"exactIn\"` or `\"exactOut\"` (default: `\"exactIn\"`)\n\nExample prompt:\n\n```\nGet me a price quote for swapping 1 ETH to DAI on Ethereum.\n```\n\nOutput:\n\n```\n{\n  \"chainId\": 1,\n  \"tradeType\": \"exactIn\",\n  \"price\": \"3000.50\",\n  \"inputAmount\": \"1.000000\",\n  \"outputAmount\": \"3000.50\",\n  \"minimumReceived\": \"2985.50\",\n  \"maximumInput\": \"1.005000\",\n  \"route\": [\n    {\n      \"tokenIn\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      \"tokenOut\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n      \"fee\": 3000\n    }\n  ],\n  \"estimatedGas\": \"150000\"\n}\n```\n\n#### 2. `executeSwap`\nExecutes a swap on Uniswap.\n\n**Schema**:\n- `chainId`: Number (default: 1)\n- `tokenIn`: String\n- `tokenOut`: String\n- `amountIn`: String (optional, required for `\"exactIn\"`)\n- `amountOut`: String (optional, required for `\"exactOut\"`)\n- `tradeType`: `\"exactIn\"` or `\"exactOut\"` (default: `\"exactIn\"`)\n- `slippageTolerance`: Number (default: 0.5, in percentage)\n- `deadline`: Number (default: 20, in minutes)\n\nExample prompt:\n\n```\nSwap 1 ETH for DAI on Ethereum with a 0.5% slippage tolerance and a 20-minute deadline.\n```\n\nOutput:\n\n```\n{\n  \"chainId\": 1,\n  \"txHash\": \"0x1234...abcd\",\n  \"tradeType\": \"exactIn\",\n  \"amountIn\": \"1.000000\",\n  \"outputAmount\": \"2990.75\",\n  \"minimumReceived\": \"2985.50\",\n  \"maximumInput\": \"1.005000\",\n  \"fromToken\": \"NATIVE\",\n  \"toToken\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  \"route\": [\n    {\n      \"tokenIn\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      \"tokenOut\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n      \"fee\": 3000\n    }\n  ],\n  \"gasUsed\": \"145000\"\n}\n```\n\n## License\nMIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "trader",
        "trading",
        "uniswap",
        "uniswap trader",
        "trader mcp",
        "swaps uniswap"
      ],
      "category": "ecommerce-and-retail"
    },
    "lumile--mercadolibre-mcp": {
      "owner": "lumile",
      "name": "mercadolibre-mcp",
      "url": "https://github.com/lumile/mercadolibre-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/lumile.webp",
      "description": "Access MercadoLibre's API to search products, retrieve reviews, and check seller reputations.",
      "stars": 7,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-22T13:38:45Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/lumile-mercadolibre-mcp-badge.png)](https://mseep.ai/app/lumile-mercadolibre-mcp)\n\n![](https://badge.mcpx.dev?type=server 'MCP Server')\n[![smithery badge](https://smithery.ai/badge/@lumile/mercadolibre-mcp)](https://smithery.ai/server/@lumile/mercadolibre-mcp)\n# MercadoLibre MCP Server\n\nAn MCP server that provides access to MercadoLibre API.\n\n<a href=\"https://glama.ai/mcp/servers/hgsefxwq4c\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/hgsefxwq4c/badge\" alt=\"MercadoLibre Server MCP server\" /></a>\n\n**IMPORTANT**: due to changes in MercadoLibre's API policies, it is no longer possible to access their search API. As a result, we have had to deprecate the `search_products` tool. This change is in compliance with MercadoLibre's new restrictions on API usage. Other tools remain functional and will continue to be supported.\n\n## Features\n\n### Tools\n- `search_products` - **DEPRECATED**: Search products in MercadoLibre, and return a list of products. (No longer available due to API policy changes)\n  - `query` - The search query\n  - `category` - The category to search in\n  - `filters` - The filters to apply\n- `product_reviews` - Get product reviews\n- `product_description` - Get product description\n- `seller_reputation` - Get seller reputation\n\n## Setup\n\n### Prerequisites\n\nYou'll need a MercadoLibre Client ID and Client Secret to use this server.  You can get one for free at https://developers.mercadolibre.com/, create an application and get the credentials.\n\nOnce you have the credentials, you can set the `CLIENT_ID` and `CLIENT_SECRET` environment variables.  And theres also the need to set the `SITE_ID` environment variable to the site you want to use.\n\n### Mercado Libre Site ID\n- MLA: Argentina (default)\n- MLB: Brasil\n- MCO: Colombia\n- MEX: M√©xico\n- MLU: Uruguay\n- MLC: Chile\n\n### Installation\n\nThere are two ways to use this server:\n\n#### Installing via Smithery\n\nTo install MercadoLibre MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lumile/mercadolibre-mcp):\n\n```bash\nnpx -y @smithery/cli install @lumile/mercadolibre-mcp --client claude\n```\n\n#### Option 1: NPX (Recommended)\nAdd this configuration to your Claude Desktop config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mercadolibre-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mercadolibre-mcp\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"SITE_ID\": \"<YOUR_SITE_ID>\"\n      }\n    }\n  }\n}\n```\n#### Option 2: Local Installation\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Add this configuration to your Claude Desktop config:\n```json\n{\n  \"mcpServers\": {\n    \"mercadolibre-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/mercadolibre-mcp/dist/index.js\"\n      ],\n      \"env\": {\n        \"CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\",\n        \"SITE_ID\": \"<YOUR_SITE_ID>\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Contributing\n\nContributions are extremely welcome! Please open a PR with new MCP servers or any other improvements to the codebase.\n\n## Disclaimer\n\nThis project is not affiliated with MercadoLibre. All logos are trademarks of their respective owners.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n------\n\n<p align=\"center\">\nMade with ‚ù§Ô∏è by Lumile\n</p>\n\n<p align=\"center\">\n<a href=\"https://www.lumile.com.ar\">Contact us</a> for custom AI development and automation solutions.\n</p>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "mercadolibre",
        "retail",
        "mercadolibre api",
        "ecommerce retail",
        "retail lumile"
      ],
      "category": "ecommerce-and-retail"
    },
    "mgsrevolver--seo-inspector-mcp": {
      "owner": "mgsrevolver",
      "name": "seo-inspector-mcp",
      "url": "https://github.com/mgsrevolver/seo-inspector-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mgsrevolver.webp",
      "description": "Analyzes HTML files and web pages to identify SEO issues and validate structured data schemas. Provides actionable recommendations for improving SEO quality directly through integrated tools without the need for a browser extension.",
      "stars": 4,
      "forks": 5,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-14T17:34:26Z",
      "readme_content": "// README.md - Instructions for setup and use\n\n# SEO Inspector & Schema Validator MCP\n\nA Model Context Protocol (MCP) server for Cursor that analyzes web pages for SEO issues and validates structured data schemas.\n\n## Features\n\n- Analyze HTML files in a codebase for SEO issues\n- Validate JSON-LD structured data\n- Get recommendations to improve SEO\n- No browser extension required - works directly with your codebase\n\n## Installation\n\n1. Clone this repository:\n\n   ```\n   git clone https://github.com/yourusername/seo-inspector-mcp.git\n   cd seo-inspector-mcp\n   ```\n\n2. Install dependencies:\n\n   ```\n   npm install\n   ```\n\n3. Configure Cursor to use this MCP server:\n   - Go to Settings > Features > MCP in Cursor\n   - Add a new MCP server with:\n     - Name: SEO Inspector\n     - Type: sse\n     - URL: http://localhost:8767/sse\n\n## Usage\n\n1. Start the MCP server:\n\n   ```\n   ./run-mcp.sh\n   ```\n\n2. In Cursor, you can now use the SEO Inspector tools:\n   - `seo.analyze-codebase` - Analyze HTML files in a directory\n   - `seo.analyze-html` - Analyze a specific HTML string\n\n## Prioritized SEO Components\n\nThe tool checks for these key SEO elements (in order of importance):\n\n### Critical\n\n- Page Title\n- Meta Description\n- H1 Heading\n- Canonical URL\n\n### Important\n\n- Heading Structure (H2-H6)\n- Image Alt Text\n- Structured Data (JSON-LD)\n- Robots Directives\n\n### Recommended\n\n- Open Graph Tags\n- Twitter Cards\n- Internal Linking\n- URL Structure\n- Mobile Friendliness\n\n## Schema Validation\n\nThe tool validates the following schema types:\n\n- Organization\n- LocalBusiness\n- Product\n- Article\n- WebPage\n- FAQPage\n- Event\n- Recipe\n- Review\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "seo",
        "ecommerce",
        "mgsrevolver",
        "mgsrevolver seo",
        "seo inspector",
        "retail mgsrevolver"
      ],
      "category": "ecommerce-and-retail"
    },
    "mikechao--balldontlie-mcp": {
      "owner": "mikechao",
      "name": "balldontlie-mcp",
      "url": "https://github.com/mikechao/balldontlie-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mikechao.webp",
      "description": "Provides up-to-date information about players, teams, and games for the NBA, NFL, and MLB. Queries detailed sports data dynamically to enhance applications or agents with real-time sports insights.",
      "stars": 14,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-19T12:13:35Z",
      "readme_content": "# Balldontlie MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@mikechao/balldontlie-mcp)](https://smithery.ai/server/@mikechao/balldontlie-mcp)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/07e29bcd-3fb7-46e6-b4b9-8908b3ef18f2)\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/mikechao-balldontlie-mcp-badge.png)](https://mseep.ai/app/mikechao-balldontlie-mcp)\n\n<a href=\"https://glama.ai/mcp/servers/@mikechao/balldontlie-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mikechao/balldontlie-mcp/badge\" alt=\"balldontlie-mcp MCP server\" />\n</a>\n\nAn MCP Server implementation that integrates the [Balldontlie API](https://www.balldontlie.io/), to provide information about players, teams and games for the NBA, NFL and MLB.\n\n## Tools\n\n- **get_teams**\n\n  - Gets the list of team from one of the following leagues NBA (National Basketball Association), MLB (Major League Baseball), NFL (National Football League)\n  - Inputs:\n    - `league` (enum ['NBA', 'NFL', 'MLB']): The sports league to get teams for\n\n- **get_players**\n\n  - Gets the list of players from one of the following leagues NBA (National Basketball Association), MLB (Major League Baseball), NFL (National Football League)\n  - Inputs:\n    - `league` (enum ['NBA', 'NFL', 'MLB']): The sports league to get players for\n    - `firstName` (string, optional): The first name of the player to search for\n    - `lastName` (string, optional): The last name of the player to search for\n    - `cursor` (number, optional): Cursor for pagination\n\n- **get_games**\n\n  - Gets the list of games from one of the following leagues NBA (National Basketball Association), MLB (Major League Baseball), NFL (National Football League)\n  - Inputs:\n    - `league` (enum ['NBA', 'NFL', 'MLB']): The sports league to get games for\n    - `dates` (string[], optional): Get games for specific dates, format: YYYY-MM-DD\n    - `teamIds` (string[], optional): Get games for specific games\n    - `cursor` (number, optional): Cursor for pagination\n\n- **get_game**\n\n  - Get a specific game from one of the following leagues NBA (National Basketball Association), MLB (Major League Baseball), NFL (National Football League)\n  - Inputs:\n    - `league` (enum ['NBA', 'NFL', 'MLB']): The sports league to get the game for\n    - `gameId` (number): The id of the game from the get_games tool\n\n## Prompts\n\n- **schedule_generator**\n\nGiven a league (NBA, MLB, NFL), a starting date and ending date generates an interactive schedule in Claude Desktop.\n\n![claude desktop example](https://mikechao.github.io/images/schedule_geneartor_prompt.webp)\n\n## Sample queries\n\nWith this MCP Server installed you can ask Claude or other LLM questions like the following.\n\n```\nShow me today's baseball games.\nCan you find football players with the last name Purdy?\nHow many NBA players have the last name Ming?\n```\n\n## Configuration\n\n### Getting an API Key\n\n1. Sign up for account at [Balldontlie.io](https://www.balldontlie.io/)\n2. The free plan is enough for this MCP Server\n\n### Installing using Desktop Extension (DXT)\n\n1. Download the `dxt` file from the [Releases](https://github.com/mikechao/balldontlie-mcp/releases)\n2. Open it with Claude Desktop\n   or\n   Go to File -> Settings -> Extensions and drag the .DXT file to the window to install it\n\n### Installing via Smithery\n\nTo install balldontlie-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mikechao/balldontlie-mcp):\n\n```bash\nnpx -y @smithery/cli install @mikechao/balldontlie-mcp --client claude\n```\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcp-servers\": {\n    \"balldontlie\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"balldontlie-mcp\"\n      ],\n      \"env\": {\n        \"BALLDONTLIE_API_KEY\": \"YOUR API KEY HERE\"\n      }\n    }\n  }\n}\n```\n\n### Usage with LibreChat\n\n```yaml\nmcpServers:\n  balldontlie:\n    command: sh\n    args:\n      - -c\n      - BALLDONTLIE_API_KEY=your-api-key-here npx -y balldontlie-mcp\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n## Disclaimer\n\nThis library is not officially associated with balldontlie.io. It is a third-party implementation of the balldontlie api with a MCP Server.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "mlb",
        "sports",
        "balldontlie mcp",
        "sports data",
        "mlb queries"
      ],
      "category": "ecommerce-and-retail"
    },
    "monostate--100ms-SPL-Token-Sniper-MCP": {
      "owner": "monostate",
      "name": "100ms-SPL-Token-Sniper-MCP",
      "url": "https://github.com/monostate/100ms-SPL-Token-Sniper-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/monostate.webp",
      "description": "Utilizes natural language commands to snipe tokens on the Raydium DEX with rapid execution across multiple regions. Incorporates real-time monitoring of new pools and fast pool discovery through GraphQL integration.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-22T18:17:17Z",
      "readme_content": "# 100ms Raydium Sniper MCP\n\nA high-performance tool for token sniping on Raydium DEX with multi-region support and Claude AI integration.\n\n## Overview\n\nThe 100ms Raydium Sniper uses Model Context Protocol (MCP) to integrate with Claude AI, allowing natural language interaction for sniping tokens on the Raydium DEX on Solana. Key features include:\n\n- **Multi-region execution**: Deploy cloud functions across US, Asia, and Europe for the fastest possible execution\n- **WebSocket monitoring**: Real-time monitoring of new pool creation\n- **GraphQL integration**: Fast pool discovery via indexed data\n- **Claude AI integration**: Natural language instructions for token sniping\n- **Fast execution**: Optimized transaction submission with 100ms target response time\n- **Demo mode**: Test and showcase without real blockchain transactions\n\n## Requirements\n\n- Node.js 18+ (20+ recommended)\n- pnpm\n- Solana wallet with SOL\n- Claude Desktop App\n- Google Cloud account (for multi-region deployment)\n- API keys:\n  - Helius API key (https://helius.xyz)\n  - Shyft API key (https://shyft.to)\n\n## Quick Start\n\n### Basic Setup\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/yourname/100ms-sniper-mcp.git\n   cd 100ms-sniper-mcp\n   ```\n\n2. **Install dependencies**\n   ```bash\n   pnpm install\n   ```\n\n3. **Create environment file**\n   ```bash\n   cp .env.example .env\n   ```\n   Edit `.env` with your API keys and wallet private key.\n\n4. **Build the project**\n   ```bash\n   pnpm run build\n   ```\n\n5. **Launch with Claude Desktop**\n   ```bash\n   pnpm run launch-claude\n   ```\n\n### Demo Mode\n\nTo try the tool in demo mode without real transactions:\n\n```bash\npnpm run setup-demo\n```\n\nThis builds the project and launches Claude Desktop with a mock server that simulates responses without requiring API keys or SOL in your wallet.\n\n## Usage with Claude\n\nOnce Claude Desktop is launched with the MCP installed, you can use natural language to:\n\n- **Check status**:\n  \"Show me the status of the Raydium sniper\"\n\n- **Snipe a token**:\n  \"Snipe token DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263 with 1% slippage\"\n\n- **Configure parameters**:\n  \"Configure my sniper with 2% slippage and 0.1 SOL per transaction\"\n\n## Cloud Deployment\n\nFor multi-region deployment:\n\n1. **Set up cloud configuration**\n   ```bash\n   cp cloud/.env.cloud.example cloud/.env.cloud\n   ```\n   Edit `cloud/.env.cloud` with your API keys, project ID and wallet information.\n\n2. **Run cloud setup**\n   ```bash\n   pnpm run cloud:setup\n   ```\n\n3. **Build and deploy cloud functions**\n   ```bash\n   pnpm run cloud:build\n   pnpm run cloud:deploy\n   ```\n\n4. **Update your environment with function URLs**\n   After deployment, copy the deployed function URLs to your `.env` file.\n\nSee [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed deployment instructions.\n\n## Architecture\n\nThe architecture consists of several components:\n\n- **MCP Server**: Communicates with Claude AI\n- **Cloud Functions**: Multi-region execution points that run on Google Cloud Functions\n- **Region Manager**: Manages connections to different geographical regions\n- **WebSocket Manager**: Handles real-time Solana program subscription\n- **AMM Manager**: Interacts with Raydium AMM protocol\n\n## Troubleshooting\n\n- **\"No pools found\" error**: Ensure the token mint address is correct and has liquidity on Raydium\n- **Slow performance**: Check that your API keys are valid and have sufficient rate limits\n- **Deployment failures**: See [DEPLOYMENT.md](./DEPLOYMENT.md) for specific deployment troubleshooting steps\n- **Claude integration issues**: Ensure Claude Desktop is properly installed and the MCP is correctly configured\n\n## License\n\nMIT License - See [LICENSE](./LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tokens",
        "spl",
        "token",
        "snipe tokens",
        "spl token",
        "tokens raydium"
      ],
      "category": "ecommerce-and-retail"
    },
    "newerton--mcp-mercado-livre": {
      "owner": "newerton",
      "name": "mcp-mercado-livre",
      "url": "https://github.com/newerton/mcp-mercado-livre",
      "imageUrl": "/freedevtools/mcp/pfp/newerton.webp",
      "description": "Scrapes product data, including prices and availability, directly from Mercado Livre. Integrates with Mercado Livre's API to provide reliable and up-to-date marketplace information.",
      "stars": 1,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-31T17:28:35Z",
      "readme_content": "<div align=\"center\">\n\n# Mercado Livre - MCP Server\n\nThis project is part of the Model Context Protocol (MCP) ecosystem and provides tools for integrating with external sources and managing specific domain models. It is designed to demonstrate how to build an MCP server that scrapes products from Mercado Livre, with strong data validation to ensure reliability.\n\n</div>\n\n<table style=\"border-collapse: collapse; width: 100%; table-layout: fixed;\">\n<tr>\n<td style=\"width: 40%; padding: 15px; vertical-align: middle; border: none;\">An integration that enables MCP tools to scrape product data, such as prices and availability, directly from Mercado Livre.</td>\n<td style=\"width: 60%; padding: 0; vertical-align: middle; border: none; min-width: 300px; text-align: center;\"><a href=\"https://glama.ai/mcp/servers/@newerton/mcp-mercado-livre\">\n  <img style=\"max-width: 100%; height: auto; min-width: 300px;\" src=\"https://glama.ai/mcp/servers/@newerton/mcp-mercado-livre/badge\" alt=\"Mercado Livre - MCP Server\" />\n</a></td>\n</tr>\n</table>\n\n## Table of Contents\n\n- [Features](#features)\n- [Architecture](#architecture)\n- [Installation](#installation)\n- [MCP Server Configuration in VSCode](#mcp-server-configuration-in-vscode)\n- [MCP Server Output in VSCode](#mcp-server-output-in-vscode)\n- [Contribution](#contribution)\n- [License](#license)\n\n## Features\n\n- **get-produtos**: Fetch basic product information.\n- Input validation using [Zod](https://github.com/colinhacks/zod).\n- Integration with the Mercado Livre API using `fetch` (infrastructure layer).\n\n## Architecture\n\nThe project follows a layered architecture inspired by **Domain-Driven Design** (DDD) patterns:\n\n- **Domain** (`src/domain`):\n  Defines interfaces and types that represent data structures (e.g., `Mercado Livre`).\n\n- **Infrastructure** (`src/infrastructure`):\n  Implements external services, such as `MercadoLivreApiService`, responsible for making HTTP calls to the Mercado Livre API.\n\n- **Application** (`src/application`):\n  Contains business logic in `MercadoLivreService`, which processes and formats data from the infrastructure.\n\n- **Interface** (`src/interface`):\n  Includes controllers (`MercadoLivreToolsController`) that register tools in the MCP server, define validation schemas, and return results.\n\n- **Entry Point** (`src/main.ts`):\n  Initializes the `McpServer`, configures the transport (`StdioServerTransport`), instantiates services and controllers, and starts listening on _stdio_.\n\nThe folder structure is as follows:\n```\nsrc/\n‚îú‚îÄ‚îÄ domain/\n‚îÇ   ‚îî‚îÄ‚îÄ models/           # Domain interfaces\n‚îú‚îÄ‚îÄ infrastructure/\n‚îÇ   ‚îî‚îÄ‚îÄ services/         # External API implementations (Mercado Livre)\n‚îú‚îÄ‚îÄ application/\n‚îÇ   ‚îî‚îÄ‚îÄ services/         # Business logic and data formatting\n‚îú‚îÄ‚îÄ interface/\n‚îÇ   ‚îî‚îÄ‚îÄ controllers/      # MCP tool registration and validation\n‚îî‚îÄ‚îÄ main.ts               # Server entry point\nbuild/                    # Compiled JavaScript code\n.vscode/                  # Contains the mcp.json file, MCP Server config\n```\n\n## Installation\n\n```bash\ngit clone git@github.com:newerton/mcp-mercado-livre.git\ncd mcp-mercado-livre\nnpm install\nnpm run build\n```\n\n## MCP Server Configuration in VSCode\n\n1. Press `Ctrl+Shift+P` and select \"MCP: List Servers\"\n2. Select \"products\" and then \"Start Server\"\n\n## MCP Server Output in VSCode\n\n1. Press `Ctrl+Shift+P` and select \"MCP: List Servers\"\n2. Select \"products\" and then \"Show Output\"\n\n## Contribution\n\nPull requests are welcome! Feel free to open issues and discuss improvements.\n\n## License\n\nThis project is licensed under the MIT license - see the [LICENSE](https://github.com/imprvhub/mcp-claude-hackernews/blob/main/LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "marketplace",
        "mercado",
        "ecommerce retail",
        "retail newerton",
        "marketplace information"
      ],
      "category": "ecommerce-and-retail"
    },
    "noahgsolomon--pumpfun-mcp-server": {
      "owner": "noahgsolomon",
      "name": "pumpfun-mcp-server",
      "url": "https://github.com/noahgsolomon/pumpfun-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/noahgsolomon.webp",
      "description": "Interact with the Pump.fun platform on Solana to create, buy, and sell tokens while managing Solana accounts. Enhance token transactions and perform account management using AI assistants.",
      "stars": 17,
      "forks": 7,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-26T15:51:59Z",
      "readme_content": "# pumpfun-mcp\n\nA Model Context Protocol (MCP) server for interacting with the [Pump.fun](https://pump.fun) platform on Solana. This server enables AI assistants to create, buy, and sell tokens on the Pump.fun platform.\n\n<img src=\"https://pump.fun/logo.png\" width=\"250\" height=\"250\" alt=\"Pump.fun MCP Demo\">\n\n## Usage\n\nhttps://github.com/user-attachments/assets/0b0f1f6f-6ea6-4ca8-92a8-b4cc895814e4\n\nTo use this server with Claude or other MCP-compatible AI assistants, add the following configuration to your MCP client:\n\nIf you're on MacOS and want to run this in Claude Desktop, in your ~/Library/Application \\Support/Claude/claude_desktop_config.json file, write the following:\n\n```json\n{\n  \"mcpServers\": {\n    \"pumpfun\": {\n      \"command\": \"node\",\n      \"args\": [\"/Users/noahsolomon/Desktop/pumpfun-mcp/build/index.js\"], // note this should be YOUR absolute path to index.js, not mine.\n      \"env\": {\n        \"HELIUS_RPC_URL\": \"https://your-helius-rpc-url.com\"\n      }\n    }\n  }\n}\n```\n\nReplace `https://your-helius-rpc-url.com` with your [Helius RPC URL](https://dev.helius.xyz/).\n\n## Installation\n\n1. Clone this repository:\n\n   ```\n   git clone https://github.com/noahgsolomon/pumpfun-mcp.git\n   cd pumpfun-mcp\n   ```\n\n2. Install dependencies:\n\n   ```\n   npm install\n   ```\n\n3. Create a `.env` file with your Solana RPC URL:\n\n   ```\n   HELIUS_RPC_URL=https://your-helius-rpc-url.com\n   ```\n\n   You can get a free RPC URL from [Helius](https://dev.helius.xyz/).\n\n   To use an existing Solana wallet, add your private key to the `.env` file:\n\n   ```\n   PRIVATE_KEY=your-base58-encoded-private-key\n   ```\n\n   Then run the conversion script to create a keypair file:\n\n   ```\n   node convert-key.js\n   ```\n\n   This will create a `default.json` file in the `.keys` folder with your keypair.\n\n4. Build the project:\n\n   ```\n   npm run build\n   ```\n\n5. Run the MCP server:\n   ```\n   node build/index.js\n   ```\n\n## Components\n\n### Tools\n\n- **get-token-info**\n\n  - Get information about a Pump.fun token\n  - Input parameters:\n    - `tokenAddress` (string, required): The token's mint address\n\n- **create-token**\n\n  - Create a new Pump.fun token\n  - Input parameters:\n    - `name` (string, required): Token name\n    - `symbol` (string, required): Token symbol\n    - `description` (string, required): Token description\n    - `imageUrl` (string, optional): Path to local image file\n    - `initialBuyAmount` (number, required): Initial buy amount in SOL (min 0.0001)\n    - `accountName` (string, optional): Name of the account to use (defaults to \"default\")\n\n- **buy-token**\n\n  - Buy a Pump.fun token\n  - Input parameters:\n    - `tokenAddress` (string, required): The token's mint address\n    - `buyAmount` (number, required): Amount to buy in SOL (min 0.0001)\n    - `accountName` (string, optional): Name of the account to use (defaults to \"default\")\n    - `slippageBasisPoints` (number, optional): Slippage tolerance in basis points (defaults to 100)\n\n- **sell-token**\n\n  - Sell a Pump.fun token\n  - Input parameters:\n    - `tokenAddress` (string, required): The token's mint address\n    - `sellAmount` (number, required): Amount of tokens to sell (use 0 to sell all)\n    - `accountName` (string, optional): Name of the account to use (defaults to \"default\")\n    - `slippageBasisPoints` (number, optional): Slippage tolerance in basis points (defaults to 100)\n\n- **list-accounts**\n\n  - List all accounts in the keys folder\n  - No input parameters required\n\n- **get-account-balance**\n  - Get the SOL and token balances for an account\n  - Input parameters:\n    - `accountName` (string, optional): Name of the account to check (defaults to \"default\")\n    - `tokenAddress` (string, optional): Token address to check balance for\n\n### Account Management\n\nThe MCP automatically creates and manages Solana keypairs in the `.keys` folder. Each keypair is stored as a JSON file with the account name as the filename.\n\nWhen creating a token, the mint keypair is also saved in the `.keys` folder with the prefix `mint-`.\n\nTo use the MCP with your own account, you need to:\n\n1. Add your private key to the `.env` file and run `node convert-key.js`\n2. Have sufficient SOL in that wallet\n\n## Standalone Scripts\n\nThe project includes several standalone scripts that can be run directly:\n\n- **Get Token Info**: `node build/get-token-info.js <token_address>`\n- **Create Token**: `node build/create-token.js <name> <symbol> <description> <initial_buy_amount> [account_name] [image_url]`\n- **Buy Token**: `node build/buy-token.js <token_address> <buy_amount_sol> [account_name] [slippage_basis_points]`\n- **Sell Token**: `node build/sell-token.js <token_address> <sell_amount> [account_name] [slippage_basis_points]`\n- **List Accounts**: `node build/list-accounts.js`\n- **Get Account Balance**: `node build/get-token-balance.js <account_name> [token_address]`\n\n## Important Notes\n\n- **Security**: The keypairs are stored unencrypted in the `.keys` folder. Make sure to secure this folder appropriately.\n- **Fees**: All transactions on Solana require SOL for transaction fees. Make sure your accounts have enough SOL.\n- **Slippage**: The default slippage tolerance is 1% (100 basis points). You can adjust this for each transaction.\n- **Images**: When creating tokens with images, you must provide a local file path to the image. Remote URLs are not supported.\n\n## Development\n\n### Project Structure\n\n- `src/index.ts`: Main MCP server entry point\n- `src/get-token-info.ts`: Token information retrieval\n- `src/create-token.ts`: Token creation functionality\n- `src/buy-token.ts`: Token buying functionality\n- `src/sell-token.ts`: Token selling functionality\n- `src/list-accounts.ts`: Account listing functionality\n- `src/get-token-balance.ts`: Account balance checking\n- `src/utils.ts`: Shared utility functions\n- `convert-key.js`: Utility to convert a base58 private key to a keypair JSON file\n\n### Building\n\n```\nnpm run build\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "solana",
        "pumpfun",
        "ecommerce",
        "solana accounts",
        "managing solana",
        "pumpfun mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "openbnb-org--mcp-server-airbnb": {
      "owner": "openbnb-org",
      "name": "mcp-server-airbnb",
      "url": "https://github.com/openbnb-org/mcp-server-airbnb",
      "imageUrl": "/freedevtools/mcp/pfp/openbnb-org.webp",
      "description": "Search for Airbnb listings and retrieve detailed information about specific properties, utilizing structured data and adhering to Airbnb's guidelines without requiring an API key.",
      "stars": 299,
      "forks": 75,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T11:16:22Z",
      "readme_content": "# Airbnb Search & Listings - Desktop Extension (DXT)\n\nA comprehensive Desktop Extension for searching Airbnb listings with advanced filtering capabilities and detailed property information retrieval. Built as a Model Context Protocol (MCP) server packaged in the Desktop Extension (DXT) format for easy installation and use with compatible AI applications.\n\n## Features\n\n### üîç Advanced Search Capabilities\n- **Location-based search** with support for cities, states, and regions\n- **Google Maps Place ID** integration for precise location targeting\n- **Date filtering** with check-in and check-out date support\n- **Guest configuration** including adults, children, infants, and pets\n- **Price range filtering** with minimum and maximum price constraints\n- **Pagination support** for browsing through large result sets\n\n### üè† Detailed Property Information\n- **Comprehensive listing details** including amenities, policies, and highlights\n- **Location information** with coordinates and neighborhood details\n- **House rules and policies** for informed booking decisions\n- **Property descriptions** and key features\n- **Direct links** to Airbnb listings for easy booking\n\n### üõ°Ô∏è Security & Compliance\n- **Robots.txt compliance** with configurable override for testing\n- **Request timeout management** to prevent hanging requests\n- **Enhanced error handling** with detailed logging\n- **Rate limiting awareness** and respectful API usage\n- **Secure configuration** through DXT user settings\n\n## Installation\n\n### For Claude Desktop\nThis extension is packaged as a Desktop Extension (DXT) file. To install:\n\n1. Download the `.dxt` file from the releases page\n2. Open your compatible AI application (e.g., Claude Desktop)\n3. Install the extension through the application's extension manager\n4. Configure the extension settings as needed\n\n### For Cursor, etc.\n\nBefore starting make sure [Node.js](https://nodejs.org/) is installed on your desktop for `npx` to work.\n1. Go to: Cursor Settings > Tools & Integrations > New MCP Server\n\n2. Add one the following to your `mcp.json`:\n    ```json\n    {\n      \"mcpServers\": {\n        \"airbnb\": {\n          \"command\": \"npx\",\n          \"args\": [\n            \"-y\",\n            \"@openbnb/mcp-server-airbnb\"\n          ]\n        }\n      }\n    }\n    ```\n\n    To ignore robots.txt for all requests, use this version with `--ignore-robots-txt` args\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"airbnb\": {\n          \"command\": \"npx\",\n          \"args\": [\n            \"-y\",\n            \"@openbnb/mcp-server-airbnb\",\n            \"--ignore-robots-txt\"\n          ]\n        }\n      }\n    }\n    ```\n3. Restart.\n\n\n## Configuration\n\nThe extension provides the following user-configurable options:\n\n### Ignore robots.txt\n- **Type**: Boolean (checkbox)\n- **Default**: `false`\n- **Description**: Bypass robots.txt restrictions when making requests to Airbnb\n- **Recommendation**: Keep disabled unless needed for testing purposes\n\n## Tools\n\n### `airbnb_search`\n\nSearch for Airbnb listings with comprehensive filtering options.\n\n**Parameters:**\n- `location` (required): Location to search (e.g., \"San Francisco, CA\")\n- `placeId` (optional): Google Maps Place ID (overrides location)\n- `checkin` (optional): Check-in date in YYYY-MM-DD format\n- `checkout` (optional): Check-out date in YYYY-MM-DD format\n- `adults` (optional): Number of adults (default: 1)\n- `children` (optional): Number of children (default: 0)\n- `infants` (optional): Number of infants (default: 0)\n- `pets` (optional): Number of pets (default: 0)\n- `minPrice` (optional): Minimum price per night\n- `maxPrice` (optional): Maximum price per night\n- `cursor` (optional): Pagination cursor for browsing results\n- `ignoreRobotsText` (optional): Override robots.txt for this request\n\n**Returns:**\n- Search results with property details, pricing, and direct links\n- Pagination information for browsing additional results\n- Search URL for reference\n\n### `airbnb_listing_details`\n\nGet detailed information about a specific Airbnb listing.\n\n**Parameters:**\n- `id` (required): Airbnb listing ID\n- `checkin` (optional): Check-in date in YYYY-MM-DD format\n- `checkout` (optional): Check-out date in YYYY-MM-DD format\n- `adults` (optional): Number of adults (default: 1)\n- `children` (optional): Number of children (default: 0)\n- `infants` (optional): Number of infants (default: 0)\n- `pets` (optional): Number of pets (default: 0)\n- `ignoreRobotsText` (optional): Override robots.txt for this request\n\n**Returns:**\n- Detailed property information including:\n  - Location details with coordinates\n  - Amenities and facilities\n  - House rules and policies\n  - Property highlights and descriptions\n  - Direct link to the listing\n\n## Technical Details\n\n### Architecture\n- **Runtime**: Node.js 18+\n- **Protocol**: Model Context Protocol (MCP) via stdio transport\n- **Format**: Desktop Extension (DXT) v0.1\n- **Dependencies**: Minimal external dependencies for security and reliability\n\n### Error Handling\n- Comprehensive error logging with timestamps\n- Graceful degradation when Airbnb's page structure changes\n- Timeout protection for network requests\n- Detailed error messages for troubleshooting\n\n### Security Measures\n- Robots.txt compliance by default\n- Request timeout limits\n- Input validation and sanitization\n- Secure environment variable handling\n- No sensitive data storage\n\n### Performance\n- Efficient HTML parsing with Cheerio\n- Request caching where appropriate\n- Minimal memory footprint\n- Fast startup and response times\n\n## Compatibility\n\n- **Platforms**: macOS, Windows, Linux\n- **Node.js**: 18.0.0 or higher\n- **Claude Desktop**: 0.10.0 or higher\n- **Other MCP clients**: Compatible with any MCP-supporting application\n\n## Development\n\n### Building from Source\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Watch for changes during development\nnpm run watch\n```\n\n### Testing\n\nThe extension can be tested by running the MCP server directly:\n\n```bash\n# Run with robots.txt compliance (default)\nnode dist/index.js\n\n# Run with robots.txt ignored (for testing)\nnode dist/index.js --ignore-robots-txt\n```\n\n## Legal and Ethical Considerations\n\n- **Respect Airbnb's Terms of Service**: This extension is for legitimate research and booking assistance\n- **Robots.txt Compliance**: The extension respects robots.txt by default\n- **Rate Limiting**: Be mindful of request frequency to avoid overwhelming Airbnb's servers\n- **Data Usage**: Only extract publicly available information for legitimate purposes\n\n## Support\n\n- **Issues**: Report bugs and feature requests on [GitHub Issues](https://github.com/openbnb-org/mcp-server-airbnb/issues)\n- **Documentation**: Additional documentation available in the repository\n- **Community**: Join discussions about MCP and DXT development\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Contributing\n\nContributions are welcome! Please read the contributing guidelines and submit pull requests for any improvements.\n\n---\n\n**Note**: This extension is not affiliated with Airbnb, Inc. It is an independent tool designed to help users search and analyze publicly available Airbnb listings.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "airbnb",
        "openbnb",
        "ecommerce",
        "airbnb search",
        "airbnb listings",
        "search airbnb"
      ],
      "category": "ecommerce-and-retail"
    },
    "opspawn--Google-Flights-MCP-Server": {
      "owner": "opspawn",
      "name": "Google-Flights-MCP-Server",
      "url": "https://github.com/opspawn/Google-Flights-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/opspawn.webp",
      "description": "Fetch and compare flight options in real-time for one-way and round-trip journeys between specified airports and dates. Customize searches based on preferences such as number of adults and seat type.",
      "stars": 15,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-21T15:32:22Z",
      "readme_content": "# Google Flights MCP Server\n\nThis MCP server provides tools to interact with Google Flights data using the bundled `fast_flights` library.\n\n## Features\n\nProvides the following MCP tools:\n\n*   **`get_flights_on_date`**: Fetches available one-way flights for a specific date between two airports.\n    *   Args: `origin` (str), `destination` (str), `date` (str, YYYY-MM-DD), `adults` (int, optional), `seat_type` (str, optional), `return_cheapest_only` (bool, optional, default `False`).\n*   **`get_round_trip_flights`**: Fetches available round-trip flights for specific departure and return dates.\n    *   Args: `origin` (str), `destination` (str), `departure_date` (str, YYYY-MM-DD), `return_date` (str, YYYY-MM-DD), `adults` (int, optional), `seat_type` (str, optional), `return_cheapest_only` (bool, optional, default `False`).\n*   **`find_all_flights_in_range`**: Finds available round-trip flights within a specified date range. Can optionally return only the cheapest flight found for each date pair.\n    *   Args: `origin` (str), `destination` (str), `start_date_str` (str, YYYY-MM-DD), `end_date_str` (str, YYYY-MM-DD), `min_stay_days` (int, optional), `max_stay_days` (int, optional), `adults` (int, optional), `seat_type` (str, optional), `return_cheapest_only` (bool, optional, default `False`).\n\n## Setup\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/opspawn/Google-Flights-MCP-Server.git\n    cd Google-Flights-MCP-Server\n    ```\n2.  **Create a virtual environment (recommended):**\n    ```bash\n    python -m venv .venv\n    source .venv/bin/activate  # On Windows use `.venv\\Scripts\\activate`\n    ```\n3.  **Install dependencies:**\n    ```bash\n    pip install -r requirements.txt\n    ```\n4.  **Install Playwright browsers (needed by `fast_flights`):**\n    ```bash\n    playwright install\n    ```\n\n## Running the Server\n\nYou can run the server directly using Python:\n\n```bash\npython server.py\n```\n\nThe server uses STDIO transport by default.\n\n## Integrating with MCP Clients (e.g., Cline, Claude Desktop)\n\nAdd the server to your MCP client's configuration file. Example for `cline_mcp_settings.json` or `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"google-flights\": {\n      \"command\": \"/path/to/your/.venv/bin/python\", // Use absolute path to venv python\n      \"args\": [\n        \"/absolute/path/to/flight_mcp_server/server.py\" // Use absolute path to server script\n      ],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n    // ... other servers\n  }\n}\n```\n\n**Important:** Replace the paths in `command` and `args` with the absolute paths to your virtual environment's Python executable and the `server.py` script on your system.\n\n## Notes\n\n*   This server bundles the `fast_flights` library (originally from [https://github.com/AWeirdDev/flights](https://github.com/AWeirdDev/flights)) for its core flight scraping functionality. Please refer to the included `LICENSE` file for its terms.\n*   Flight scraping can sometimes be unreliable or slow depending on Google Flights changes and network conditions. The tools include basic error handling.\n*   The `find_all_flights_in_range` tool can be resource-intensive as it checks many date combinations.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "flights",
        "ecommerce",
        "airports",
        "google flights",
        "flights mcp",
        "flight options"
      ],
      "category": "ecommerce-and-retail"
    },
    "pashaydev--terminal.shop.mcp": {
      "owner": "pashaydev",
      "name": "terminal.shop.mcp",
      "url": "https://github.com/pashaydev/terminal.shop.mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pashaydev.webp",
      "description": "Interact with Terminal.shop's API to browse coffee products, manage shopping carts, place orders, and handle subscriptions. The server also facilitates user profile management and secure payment processing.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-27T20:37:18Z",
      "readme_content": "# Terminal.shop MCP Server\n\nThis project implements a mcp server for interacting with the terminal.shop. It allows ai assistants to seamlessly browse products, manage shopping carts, place orders, and handle subscriptions through Terminal.shop's API.\n\n<a href=\"https://glama.ai/mcp/servers/@pashaydev/terminal.shop.mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@pashaydev/terminal.shop.mcp/badge\" alt=\"Terminal.shop Server MCP server\" />\n</a>\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/pashaydev-terminal-shop-mcp-badge.png)](https://mseep.ai/app/pashaydev-terminal-shop-mcp)\n\n## Features\n\n- **Product Management**: Browse and search Terminal.shop's coffee products\n- **Cart Operations**: Add items to cart, set shipping address and payment method\n- **Order Management**: Place orders and view order history\n- **Subscription Handling**: Create and manage recurring coffee subscriptions\n- **User Profile**: Update user information and manage shipping addresses\n- **Payment Methods**: Secure handling of payment information\n\n## Setup\n\n### Prerequisites\n\n- Node.js\n- A Terminal.shop account\n- A Terminal.shop API token\n\n### Installation\n\n1. Clone this repository\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n4. Connect to Terminal.shop and create a new token:\n   ```bash\n   ssh terminal.shop -t tokens\n   ```\n\n5. Open claude.app, go to settings, click 'developer' option and 'edit config':\n\n```\n{\n  \"mcpServers\": {\n    \"terminal-shop-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"path_to_folder/server.js\"],\n      \"env\": {\n        \"TERMINAL_API_TOKEN\": \"token here\"\n      }\n    }\n  }\n}\n```\n\n6. Restart claude.app, and make sure you see hammer icon under input\n\n7. Ask claude to get list of products or create a new address, subscription etc\n\n## Available Resources\n\nThe MCP server provides the following resources:\n\n- `terminal://products` - List all available products\n- `terminal://product/{id}` - Get details for a specific product\n- `terminal://orders` - View order history\n- `terminal://profile` - Access user profile information\n- `terminal://addresses` - Manage shipping addresses\n- `terminal://cards` - Manage payment methods\n- `terminal://cart` - View current shopping cart\n- `terminal://subscriptions` - Manage coffee subscriptions\n\n## Tools\n\nThe server provides various tools for interacting with Terminal.shop:\n\n### Product Tools\n- `search-products` - Search for products by keyword\n- `get-product-details` - Get detailed information about a specific product\n\n### Cart Tools\n- `add-to-cart` - Add a product variant to the cart\n- `set-cart-address` - Set the shipping address for the cart\n- `set-cart-card` - Set the payment method for the cart\n- `clear-cart` - Empty the shopping cart\n- `checkout` - Convert the cart to an order\n\n### Order Tools\n- `create-order` - Create an order directly without using the cart\n\n### User Management Tools\n- `update-profile` - Update user profile information\n- `create-address` - Add a new shipping address\n- `delete-address` - Remove a shipping address\n- `collect-card` - Generate a secure URL for adding payment information\n- `create-card` - Add a card using a Stripe token\n- `delete-card` - Remove a payment method\n\n### Subscription Tools\n- `create-subscription` - Start a new coffee subscription\n- `cancel-subscription` - Cancel an existing subscription\n\n### Account Tools\n- `create-token` - Create a new personal access token\n- `delete-token` - Delete a personal access token\n- `get-app-data` - Fetch all account data at once\n\n## Prompt Templates\n\nThe server includes several prompt templates to help AI assistants provide better responses:\n\n- `browse-products` - Guide for browsing and finding products\n- `manage-cart` - Help with shopping cart management\n- `place-order` - Assistance with placing an order\n- `manage-subscription` - Support for subscription management\n- `manage-profile` - Guide for profile and address management\n\n## API Documentation\n\nThis MCP server is built on top of the Terminal.shop API. For detailed information about the underlying API, refer to the Terminal API documentation.\n\n## Security Considerations\n\n- The server handles sensitive payment information through secure URLs rather than directly processing card details\n- API tokens are stored in environment variables to prevent exposure\n- User data is handled according to Terminal.shop's security practices\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "shop",
        "retail",
        "shop mcp",
        "ecommerce retail",
        "terminal shop"
      ],
      "category": "ecommerce-and-retail"
    },
    "paypal--agent-toolkit": {
      "owner": "paypal",
      "name": "agent-toolkit",
      "url": "https://github.com/paypal/agent-toolkit",
      "imageUrl": "/freedevtools/mcp/pfp/paypal.webp",
      "description": "Integrate with PayPal APIs for managing invoices, orders, and other payment services. This toolkit provides functionalities to create, retrieve, send, and manage invoices efficiently within various agent frameworks.",
      "stars": 161,
      "forks": 83,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-30T01:39:21Z",
      "readme_content": "# PayPal Agent Toolkit\n\nThe PayPal Agent Toolkit enables popular agent frameworks including OpenAI's Agent SDK, LangChain, Vercel's AI SDK, and Model Context Protocol (MCP) to integrate with PayPal APIs through function calling. It includes support for TypeScript and is built on top of PayPal APIs and the PayPal SDKs.\n\n\n## Available tools\n\nThe PayPal Agent toolkit provides the following tools:\n\n**Invoices**\n\n- `create_invoice`: Create a new invoice in the PayPal system\n- `list_invoices`: List invoices with optional pagination and filtering\n- `get_invoice`: Retrieve details of a specific invoice\n- `send_invoice`: Send an invoice to recipients\n- `send_invoice_reminder`: Send a reminder for an existing invoice\n- `cancel_sent_invoice`: Cancel a sent invoice\n- `generate_invoice_qr_code`: Generate a QR code for an invoice\n\n**Payments**\n\n- `create_order`: Create an order in PayPal system based on provided details\n- `get_order`: Retrieve the details of an order\n- `pay_order`: Process payment for an authorized order\n- `create_refund`: Process a refund for a captured payment.\n- `get_refund`: Get the details for a specific refund.\n\n**Dispute Management**\n\n- `list_disputes`: Retrieve a summary of all open disputes\n- `get_dispute`: Retrieve detailed information of a specific dispute\n- `accept_dispute_claim`: Accept a dispute claim\n\n**Shipment Tracking**\n\n- `create_shipment_tracking`: Create a shipment tracking record\n- `get_shipment_tracking`: Retrieve shipment tracking information\n- `update_shipment_tracking`: Update shipment tracking information\n\n**Catalog Management**\n\n- `create_product`: Create a new product in the PayPal catalog\n- `list_products`: List products with optional pagination and filtering\n- `show_product_details`: Retrieve details of a specific product\n\n**Subscription Management**\n\n- `create_subscription_plan`: Create a new subscription plan\n- `list_subscription_plans`: List subscription plans\n- `show_subscription_plan_details`: Retrieve details of a specific subscription plan\n- `create_subscription`: Create a new subscription\n- `show_subscription_details`: Retrieve details of a specific subscription\n- `update_subscription`: update an existing subscription\n- `cancel_subscription`: Cancel an active subscription\n\n\n**Reporting and Insights**\n\n- `list_transactions`: List transactions with optional pagination and filtering\n- `get_merchant_insights`: Retrieve business intelligence metrics and analytics for a merchant\n\n## TypeScript\n\n### Installation\n\nYou don't need this source code unless you want to modify the package. If you just\nwant to use the package run:\n\n```sh\nnpm install @paypal/agent-toolkit\n```\n\n#### Requirements\n\n- Node 18+\n\n### Usage\n\nThe library needs to be configured with your account's client id and secret which is available in your [PayPal Developer Dashboard](https://developer.paypal.com/dashboard/). \n\n\nThe toolkit works with Vercel's AI SDK and can be passed as a list of tools. For more details, refer our [examples](./typescript/examples)\n\n```typescript\nimport { PayPalAgentToolkit } from '@paypal/agent-toolkit/ai-sdk';\nconst paypalToolkit = new PayPalAgentToolkit({\n  clientId: process.env.PAYPAL_CLIENT_ID,\n  clientSecret: process.env.PAYPAL_CLIENT_SECRET,\n  configuration: {\n    actions: {\n      invoices: {\n        create: true,\n        list: true,\n        send: true,\n        sendReminder: true,\n        cancel: true,\n        generateQRC: true,\n      },\n      products: { create: true, list: true, update: true },\n      subscriptionPlans: { create: true, list: true, show: true },\n      shipment: { create: true, show: true, cancel: true },\n      orders: { create: true, get: true },\n      disputes: { list: true, get: true },\n    },\n  },\n});\n```\n\nTo use sandbox mode, add context within your configuration.\n\n```typescript\nconfiguration: {\n  context: {\n    sandbox: true,\n  }\n}\n```\n### Initializing the Workflows\n\n```typescript\nimport { PayPalWorkflows, ALL_TOOLS_ENABLED } from '@paypal/agent-toolkit/ai-sdk';\nconst paypalWorkflows = new PayPalWorkflows({\n  clientId: process.env.PAYPAL_CLIENT_ID,\n  clientSecret: process.env.PAYPAL_CLIENT_SECRET,\n  configuration: {\n    actions: ALL_TOOLS_ENABLED,\n  },\n});\n```\n\n## Usage\n\n### Using the toolkit\n\n```typescript\nconst llm: LanguageModelV1 = getModel(); // The model to be used with ai-sdk\nconst { text: response } = await generateText({\n  model: llm,\n  tools: paypalToolkit.getTools(),\n  maxSteps: 10,\n  prompt: `Create an order for $50 for custom handcrafted item and get the payment link.`,\n});\n\n```\n\n## PayPal Model Context Protocol\n\nThe PayPal [Model Context Protocol](https://modelcontextprotocol.com/) server allows you to integrate with PayPal APIs through function calling. This protocol supports various tools to interact with different PayPal services.\n\n### Running MCP Inspector\n\nTo run the PayPal MCP server using npx, use the following command:\n\n```bash\nnpx -y @paypal/mcp --tools=all PAYPAL_ACCESS_TOKEN=\"YOUR_ACCESS_TOKEN\" PAYPAL_ENVIRONMENT=\"SANDBOX\"\n```\n\nReplace `YOUR_ACCESS_TOKEN` with active access token generated using these steps: [PayPal access token](#generating-an-access-token). Alternatively, you could set the PAYPAL_ACCESS_TOKEN in your environment variables.\n\n### Custom MCP Server\nYou can set up your own MCP server. For example:\n\n```typescript\nimport { PayPalAgentToolkit } from ‚Äú@paypal/agent-toolkit/modelcontextprotocol\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\n\nconst orderSummary = await paypalWorkflows.generateOrder(\n  llm,\n  transactionInfo,\n  merchantInfo,\n);\n\nconst server = new PayPalAgentToolkit({\n\taccessToken: process.env.PAYPAL_ACCESS_TOKEN\n});\n\nasync function main() {\n  const transport = new StdioServerTransport();\n  await server.connect(transport);\n  console.error(\"PayPal MCP Server running on stdio\");\n}\n\nmain().catch((error) => {\n  console.error(\"Fatal error in main():\", error);\n  process.exit(1);\n});\n```\n\n### Usage with MCP host (Claude Desktop/Cline/Cursor/Github Co-Pilot)\n\nThis guide explains how to integrate the PayPal connector with Claude Desktop.\n\n## Prerequisites\n- Claude Desktop application installed\n- installing Node.js locally\n\n## Installation Steps\n\n### 1. Install Node.js\n\nNode.js is required for the PayPal connector to function:\n\n1. Visit the [Node.js official website](https://nodejs.org/), download and install it.\n2. Requirements: Node 18+\n\n### 2. Configure PayPal Connector with MCP host (Claude desktop / Cursor / Cline)\nWe will show the integration with Claude desktop. You can use your favorite MCP host.\n1. Open Claude Desktop\n2. Navigate to Settings\n3. Find the Developer or Advanced settings section\n4. Locate the external tools or connectors configuration area\n5. Add the following PayPal connector configuration to this ~/Claude/claude_desktop_config.json:\n\n```json\n{\n   \"mcpServers\": {\n     \"paypal\": {\n       \"command\": \"npx\",\n       \"args\": [\n         \"-y\",\n         \"@paypal/mcp\",\n         \"--tools=all\"\n       ],\n       \"env\": {\n         \"PAYPAL_ACCESS_TOKEN\": \"YOUR_PAYPAL_ACCESS_TOKEN\",\n         \"PAYPAL_ENVIRONMENT\": \"SANDBOX\"\n       }\n     }\n   }\n}\n```\nMake sure to replace `YOUR_PAYPAL_ACCESS_TOKEN` with your actual PayPal Access Token. Alternatively, you could set the PAYPAL_ACCESS_TOKEN as an environment variable. You can also pass it as an argument using --access-token in \"args\"\nSet `PAYPAL_ENVIRONMENT` value as either `SANDBOX` for stage testing and `PRODUCTION` for production environment.\n\n6. Save your configuration changes\n\n### 3. Test the Integration\n\n1. Quit and restart Claude Desktop to apply changes\n2. Test the connection by asking Claude to perform a PayPal-related task\n   - Example: \\\"List my PayPal invoices\\\"\n\n## Environment Variables\n\nThe following environment variables can be used:\n\n- `PAYPAL_ACCESS_TOKEN`: Your PayPal Access Token\n- `PAYPAL_ENVIRONMENT`: Set to `SANDBOX` for sandbox mode, `PRODUCTION` for production (defaults to `SANDBOX` mode)\n\n\nThis guide explains how to generate an access token for PayPal API integration, including how to find your client ID and client secret.\n\n\n\n## Prerequisites\n\n- PayPal Developer account (for Sandbox)\n- PayPal Business account (for production)\n\n## Finding Your Client ID and Client Secret\n\n1. **Create a PayPal Developer Account**:\n   - Go to [PayPal Developer Dashboard](https://developer.paypal.com/dashboard/)\n   - Sign up or log in with your PayPal credentials\n\n2. **Access Your Credentials**:\n   - In the Developer Dashboard, click on **Apps & Credentials** in the menu\n   - Switch between **Sandbox** and **Live** modes depending on your needs\n   \n3. **Create or View an App**:\n   - To create a new app, click **Create App**\n   - Give your app a name and select a Business account to associate with it\n   - For existing apps, click on the app name to view details\n\n4. **Retrieve Credentials**:\n   - Once your app is created or selected, you'll see a screen with your:\n     - **Client ID**: A public identifier for your app\n     - **Client Secret**: A private key (shown after clicking \\\"Show\\\")\n   - Save these credentials securely as they are required for generating access tokens\n\n## Generating an Access Token\n### Using cURL\n\n```bash\ncurl -v https://api-m.sandbox.paypal.com/v1/oauth2/token \\\\\n  -H \\\"Accept: application/json\\\" \\\\\n  -H \\\"Accept-Language: en_US\\\" \\\\\n  -u \\\"CLIENT_ID:CLIENT_SECRET\\\" \\\\\n  -d \\\"grant_type=client_credentials\\\"\n```\n\nReplace `CLIENT_ID` and `CLIENT_SECRET` with your actual credentials. For production, use `https://api-m.paypal.com` instead of the sandbox URL.\n\n\n### Using Postman\n\n1. Create a new request to `https://api-m.sandbox.paypal.com/v1/oauth2/token`\n2. Set method to **POST**\n3. Under **Authorization**, select **Basic Auth** and enter your Client ID and Client Secret\n4. Under **Body**, select **x-www-form-urlencoded** and add a key `grant_type` with value `client_credentials`\n5. Send the request\n\n### Response\n\nA successful response will look like:\n\n```json\n{\n  \"scope\": \"...\",\n  \"access_token\": \"Your Access Token\",\n  \"token_type\": \"Bearer\",\n  \"app_id\": \"APP-80W284485P519543T\",\n  \"expires_in\": 32400,\n  \"nonce\": \"...\"\n}\n```\n\nCopy the `access_token` value for use in your Claude Desktop integration.\n\n## Token Details\n\n- **Sandbox Tokens**: Valid for 3-8 hours\n- **Production Tokens**: Valid for 8 hours\n- It's recommended to implement token refresh logic before expiration\n\n## Using the Token with Claude Desktop\n\nOnce you have your access token, update the `PAYPAL_ACCESS_TOKEN` value in your Claude Desktop connector configuration:\n\n```json\n{\n  \"env\": {\n    \"PAYPAL_ACCESS_TOKEN\": \"YOUR_NEW_ACCESS_TOKEN\",\n    \"PAYPAL_ENVIRONMENT\": \"SANDBOX\"\n  }\n}\n```\n\n## Best Practices\n\n1. Store client ID and client secret securely\n2. Implement token refresh logic to handle token expiration\n3. Use environment-specific tokens (sandbox for testing, production for real transactions)\n4. Avoid hardcoding tokens in application code\n\n## Disclaimer\n*AI-generated content may be inaccurate or incomplete. Users are responsible for independently verifying any information before relying on it. PayPal makes no guarantees regarding output accuracy and is not liable for any decisions, actions, or consequences resulting from its use.*\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "invoices",
        "toolkit",
        "paypal agent",
        "paypal apis",
        "integrate paypal"
      ],
      "category": "ecommerce-and-retail"
    },
    "ravinahp--flights-mcp": {
      "owner": "ravinahp",
      "name": "flights-mcp",
      "url": "https://github.com/ravinahp/flights-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ravinahp.webp",
      "description": "Search and retrieve flight information through the Duffel API, particularly useful for handling complex travel plans with contextual memory of previous flight searches.",
      "stars": 137,
      "forks": 31,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T21:51:29Z",
      "readme_content": "# Find Flights MCP Server\nMCP server for searching and retrieving flight information using Duffel API.\n\n## How it Works\n![Flight](https://github.com/user-attachments/assets/3ee342a4-c2da-4d4e-a43c-79ae4590d893)\n\n## Video Demo\nhttps://github.com/user-attachments/assets/c111aa4c-9559-4d74-a2f6-60e322c273d4\n\n## Why This is Helpful\nWhile tools like Google Flights work great for simple trips, this tool shines when dealing with complex travel plans. Here's why:\n\n- **Contextual Memory**: Claude remembers all your previous flight searches in the chat, so you don't need to keep multiple tabs open to compare prices\n- **Flexible Date Search**: Easily search across multiple days to find the best prices without manually checking each date\n- **Complex Itineraries**: Perfect for multi-city trips, one-stop flights, or when you need to compare different route options you can just ask!\n- **Natural Conversation**: Just describe what you're looking for - no more clicking through calendar interfaces or juggling search parameters down to parsing city names, dates, and times.\n\nThink of it as having a travel agent in your chat who remembers everything you've discussed and can instantly search across dates and routes.\n\n## Features\n- Search for flights between multiple destinations\n- Support for one-way, round-trip, and multi-city flight queries\n- Detailed flight offer information\n- Flexible search parameters (departure times, cabin class, number of passengers)\n- Automatic handling of flight connections\n- Search for flights within multiple days to find the best flight for your trip (slower)\n## Prerequisites\n- Python 3.x\n- Duffel API Live Key\n\n## Getting Your Duffel API Key\nDuffel requires account verification and payment information setup, but this MCP server only uses the API for searching flights - no actual bookings or charges will be made to your account.\n\nTry using duffel_test first to see the power of this tool. If you end up liking it, you can go through the verification process below to use the live key.\n\n### Test Mode First (Recommended)\nYou can start with a test API key (`duffel_test`) to try out the functionality with simulated data before going through the full verification process:\n1. Visit [Duffel's registration page](https://app.duffel.com/join)\n2. Create an account (you can select \"Personal Use\" for Company Name)\n3. Navigate to More > Developer to find your test API key (one is already provided)\n\n### Getting a Live API Key\nTo access real flight data, follow these steps:\n1. In the Duffel dashboard, toggle \"Test Mode\" off in the top left corner\n2. The verification process requires multiple steps - you'll need to toggle test mode off repeatedly:\n   - First toggle: Verify your email address\n   - Toggle again: Complete company information (Personal Use is fine)\n   - Toggle again: Add payment information (required by Duffel but NO CHARGES will be made by this MCP server)\n   - Toggle again: Complete any remaining verification steps\n   - Final toggle: Access live mode after clicking \"Agree and Submit\"\n3. Once fully verified, go to More > Developer > Create Live Token\n4. Copy your live API key\n\nüí° TIP: Each time you complete a verification step, you'll need to toggle test mode off again to proceed to the next step. Keep toggling until you've completed all requirements.\n\n‚ö†Ô∏è IMPORTANT NOTES:\n- Your payment information is handled directly by Duffel and is not accessed or stored by the MCP server\n- This MCP server is READ-ONLY - it can only search for flights, not book them\n- No charges will be made to your payment method through this integration\n- All sensitive information (including API keys) stays local to your machine\n- You can start with the test API key (`duffel_test`) to evaluate the functionality\n- The verification process may take some time - this is a standard Duffel requirement\n\n### Security Note\nThis MCP server only uses Duffel's search endpoints and cannot make bookings or charges. Your payment information is solely for Duffel's verification process and is never accessed by or shared with the MCP server.\n\n### Note on API Usage Limits\n- Check Duffel's current pricing and usage limits\n- Different tiers available based on your requirements\n- Recommended to review current pricing on their website\n\n## Installation\n\n### Installing via Smithery\n\nTo install Find Flights for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ravinahp/travel-mcp):\n\n```bash\nnpx -y @smithery/cli install @ravinahp/travel-mcp --client claude\n```\n\n### Manual Installation\nClone the repository:\n```bash\ngit clone https://github.com/ravinahp/flights-mcp\ncd flights-mcp\n```\n\nInstall dependencies using uv:\n```bash\nuv sync\n```\nNote: We use uv instead of pip since the project uses pyproject.toml for dependency management.\n\n## Configure as MCP Server\nTo add this tool as an MCP server, modify your Claude desktop configuration file.\n\nConfiguration file locations:\n- MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration to your JSON file:\n```json\n{\n    \"flights-mcp\": {\n        \"command\": \"uv\",\n        \"args\": [\n            \"--directory\",\n            \"/Users/YOUR_USERNAME/Code/flights-mcp\",\n            \"run\",\n            \"flights-mcp\"\n        ],\n        \"env\": {\n            \"DUFFEL_API_KEY_LIVE\": \"your_duffel_live_api_key_here\"\n        }\n    }\n}\n```\n\n‚ö†Ô∏è IMPORTANT:\n- Replace `YOUR_USERNAME` with your actual system username\n- Replace `your_duffel_live_api_key_here` with your actual Duffel Live API key\n- Ensure the directory path matches your local installation\n\n## Deployment\n### Building\nPrepare the package:\n```bash\n# Sync dependencies and update lockfile\nuv sync\n\n# Build package\nuv build\n```\nThis will create distributions in the `dist/` directory.\n\n## Debugging\nFor the best debugging experience, use the MCP Inspector:\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/find-flights-mcp run flights-mcp\n```\n\nThe Inspector provides:\n- Real-time request/response monitoring\n- Input/output validation\n- Error tracking\n- Performance metrics\n\n## Available Tools\n\n### 1. Search Flights\n```python\n@mcp.tool()\nasync def search_flights(params: FlightSearch) -> str:\n    \"\"\"Search for flights based on parameters.\"\"\"\n```\nSupports three flight types:\n- One-way flights\n- Round-trip flights\n- Multi-city flights\n\nParameters include:\n- `type`: Flight type ('one_way', 'round_trip', 'multi_city')\n- `origin`: Origin airport code\n- `destination`: Destination airport code\n- `departure_date`: Departure date (YYYY-MM-DD)\n- Optional parameters:\n  - `return_date`: Return date for round-trips\n  - `adults`: Number of adult passengers\n  - `cabin_class`: Preferred cabin class\n  - `departure_time`: Specific departure time range\n  - `arrival_time`: Specific arrival time range\n  - `max_connections`: Maximum number of connections\n\n### 2. Get Offer Details\n```python\n@mcp.tool()\nasync def get_offer_details(params: OfferDetails) -> str:\n    \"\"\"Get detailed information about a specific flight offer.\"\"\"\n```\nRetrieves comprehensive details for a specific flight offer using its unique ID.\n\n### 3. Search Multi-City Flights\n```python\n@mcp.tool(name=\"search_multi_city\")\nasync def search_multi_city(params: MultiCityRequest) -> str:\n    \"\"\"Search for multi-city flights.\"\"\"\n```\nSpecialized tool for complex multi-city flight itineraries.\n\nParameters include:\n- `segments`: List of flight segments\n- `adults`: Number of adult passengers\n- `cabin_class`: Preferred cabin class\n- `max_connections`: Maximum number of connections\n\n## Use Cases\n### Some Example (But try it out yourself!)\nYou can use these tools to find flights with various complexities:\n- \"Find a one-way flight from SFO to NYC on Jan 7 for 2 adults in business class\"\n- \"Search for a round-trip flight from LAX to London, departing Jan 8 and returning Jan 15\"\n- \"Plan a multi-city trip from New York to Paris on Jan 7, then to Rome on Jan 10, and back to New York on Jan 15\"\n- \"What is the cheapest flight from SFO to LAX from Jan 7 to Jan 15 for 2 adults in economy class?\"\n- You can even search for flights within multiple days to find the best flight for your trip. Right now, the reccomendation is to only search for one-way or round-trip flights this way. Example: \"Find the cheapest flight from SFO to LAX from Jan 7 to Jan 10 for 2 adults in economy class\"\n\n## Response Format\nThe tools return JSON-formatted responses with:\n- Flight offer details\n- Pricing information\n- Slice (route) details\n- Carrier information\n- Connection details\n\n## Error Handling\nThe service includes robust error handling for:\n- API request failures\n- Invalid airport codes\n- Missing or invalid API keys\n- Network timeouts\n- Invalid search parameters\n\n## Contributing\n[Add guidelines for contribution, if applicable]\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Performance Notes\n- Searches are limited to 50 offers for one-way/round-trip flights\n- Multi-city searches are limited to 10 offers\n- Supplier timeout is set to 15-30 seconds depending on the search type\n\n### Cabin Classes\nAvailable cabin classes:\n- `economy`: Standard economy class\n- `premium_economy`: Premium economy class\n- `business`: Business class\n- `first`: First class\n\nExample request with cabin class:\n```json\n{\n  \"params\": {\n    \"type\": \"one_way\",\n    \"adults\": 1,\n    \"origin\": \"SFO\",\n    \"destination\": \"LAX\",\n    \"departure_date\": \"2025-01-12\",\n    \"cabin_class\": \"business\"  // Specify desired cabin class\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "flights",
        "flight",
        "searches",
        "flight searches",
        "retrieve flight",
        "flight information"
      ],
      "category": "ecommerce-and-retail"
    },
    "rishabh17081--paypal-au-subscription-connector": {
      "owner": "rishabh17081",
      "name": "paypal-au-subscription-connector",
      "url": "https://github.com/rishabh17081/paypal-au-subscription-connector",
      "imageUrl": "/freedevtools/mcp/pfp/rishabh17081.webp",
      "description": "Integrate with PayPal's Account Updater service to manage and maintain up-to-date payment card information within e-commerce systems. This server allows for subscribing cards, retrieving subscription details, and processing updates through webhook notifications.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-17T02:49:53Z",
      "readme_content": "# PayPal Account Updater Subscription Connector for MCP\n\nThis MCP (Model Context Protocol) connector provides tools for integrating with PayPal's Account Updater service, which helps maintain fresh payment card information in your e-commerce system.\n\n## Features\n\n- Subscribe payment cards to PayPal's Account Updater service\n- Retrieve subscription details\n- Process webhook notifications for card updates\n- Update your merchant database with fresh card information\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/rishabh17081/paypal-au-subscription-connector.git\n\n# Install dependencies\npip install fastmcp requests\n```\n\n## Usage\n\n### Running the MCP Server\n\n```bash\n# Set environment variables\nexport PAYPAL_CLIENT_ID=\"your_client_id\"\nexport PAYPAL_CLIENT_SECRET=\"your_client_secret\"\nexport PAYPAL_ENVIRONMENT=\"SANDBOX\"  # or \"LIVE\" or \"MOCKDB\"\n\n# Run the MCP server\npython -m fastmcp run paypal_au_subscription_mcp.py\n```\n\n### Using with Claude\n\nAdd the MCP server to your Claude configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"paypal-au\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"fastmcp\", \"run\", \"/path/to/paypal_au_subscription_mcp.py\"],\n      \"env\": {\n        \"PAYPAL_CLIENT_ID\": \"your_client_id\",\n        \"PAYPAL_CLIENT_SECRET\": \"your_client_secret\",\n        \"PAYPAL_ENVIRONMENT\": \"SANDBOX\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### getFreshCardsSolve\n\nProvides information about PayPal Account Updater as a solution for card freshness management.\n\n### create_subscription\n\nCreate an account status subscription in PayPal.\n\n```python\ncreate_subscription(pan=\"4111111111111111\", expiry_date=\"2025-12\")\n```\n\n### get_subscription\n\nGet details of an account status subscription in PayPal.\n\n```python\nget_subscription(subscription_id=\"SUB-1234567890\")\n```\n\n### subscribe_merchant_to_paypal_au_service\n\nProvides instructions for subscribing merchant cards to PayPal AU service.\n\n### setup_webhook_events_in_merchant_code_base\n\nSets up webhook event handling code in the merchant's codebase.\n\n```python\nsetup_webhook_events_in_merchant_code_base(url=\"/path/to/merchant/codebase\")\n```\n\n## Webhook Integration\n\nTo receive card update notifications, set up a webhook endpoint in your application that listens for PayPal's card update events. The connector includes sample code for implementing this webhook.\n\n## Environment Variables\n\n- `PAYPAL_CLIENT_ID`: Your PayPal API client ID\n- `PAYPAL_CLIENT_SECRET`: Your PayPal API client secret\n- `PAYPAL_ENVIRONMENT`: The environment to use (\"SANDBOX\", \"LIVE\", or \"MOCKDB\")\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "paypal",
        "ecommerce",
        "payment",
        "integrate paypal",
        "paypal account",
        "subscription connector"
      ],
      "category": "ecommerce-and-retail"
    },
    "sellersmith--tailorkit-mcp": {
      "owner": "sellersmith",
      "name": "tailorkit-mcp",
      "url": "https://github.com/sellersmith/tailorkit-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sellersmith.webp",
      "description": "Enables AI assistants to manage and customize e-commerce product templates through natural language commands, facilitating the creation, retrieval, and manipulation of product templates and layers with integration into Shopify.",
      "stars": 6,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-23T02:39:54Z",
      "readme_content": "# TailorKit MCP\n\n[TailorKit MCP](https://apps.shopify.com/tailorkit) is a powerful product customization framework for e-commerce that enables merchants to create interactive personalization experiences. Features template management, layer control, and Shopify integration for offering customizable products with minimal development effort.\n\n![TailorKit MCP](https://cdn.shopify.com/app-store/listing_images/958e5ec4440b11eb378c3c27a7a4097d/icon/CKPAh-fW_YYDEAE=.png)\n\n## Overview\n\nThis MCP (Model Context Protocol) server connects Claude and other AI assistants to the TailorKit API, enabling them to manage customizable product templates for e-commerce platforms. With TailorKit MCP, AI assistants can create, retrieve, and manipulate product templates and their layers directly through natural language conversations.\n\n## Tools\n\n1. `get_list_templates`\n\n   - Get a list of templates with shop domain\n   - Required inputs:\n     - `shopDomain` (string): The shop domain ending with .myshopify.com\n   - Optional inputs:\n     - `limit` (number, default: 5): Maximum number of templates to return\n     - `page` (number, default: 1): Page number for pagination\n     - `sort` (string, default: \"updatedAt\\_\\_desc\"): The sort order\n     - `filter` (string): Filter string for template search\n   - Returns: List of templates with their details\n\n2. `get_detail_template`\n\n   - Get detailed information about a specific template\n   - Required inputs:\n     - `_id` (string): The ID of the template\n     - `shopDomain` (string): The shop domain ending with .myshopify.com\n   - Returns: Detailed template information including layers and settings\n\n3. `create_template`\n\n   - Create a new template for a shop\n   - Required inputs:\n     - `shopDomain` (string): The shop domain ending with .myshopify.com\n     - `name` (string, default: \"New Template\"): Name of the template\n     - `dimension` (object): Width, height, measurement unit, and resolution\n   - Optional inputs:\n     - `_id` (string, format: uuid): Custom ID for the template\n     - `layers` (array): Initial layers configuration\n   - Returns: Confirmation of template creation with template ID\n\n4. `get_list_layers_of_template`\n   - Get all layers for a specific template\n   - Required inputs:\n     - `_id` (string): The ID of the template\n     - `shopDomain` (string): The shop domain ending with .myshopify.com\n   - Returns: List of all layers in the template with their properties\n\n## Setup\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"tailorkit-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/your/dist/index.js\"],\n      \"env\": {\n        \"HOST\": \"https://your-api-host.com\",\n        \"ACCESS_TOKEN\": \"your-access-token\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\n1. `HOST`: Required. The host URL for your TailorKit API.\n2. `ACCESS_TOKEN`: Required. Your TailorKit API access token for authentication.\n\n### Access Token\n\nGo to `Settings` -> `Preferences` -> `Generate access token`\n\n![TailorKit Access Token](https://img001.prntscr.com/file/img001/iHKoBGqbRuK9OxeiBqnxHA.png)\n\n## Installation\n\n### From npm\n\n```bash\nnpm install @sellersmith/tailorkit-mcp\n```\n\n### From GitHub\n\n```bash\ngit clone https://github.com/sellersmith/tailorkit-mcp.git\ncd tailorkit-mcp\nnpm install\nnpm run build\n```\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server locally\nnode dist/index.js\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "tailorkit",
        "integration shopify",
        "tailorkit mcp",
        "ecommerce retail"
      ],
      "category": "ecommerce-and-retail"
    },
    "simonwfarrow--worldpay-mcp": {
      "owner": "simonwfarrow",
      "name": "worldpay-mcp",
      "url": "https://github.com/simonwfarrow/worldpay-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Integrate Worldpay payment processing into applications, enabling the generation of customized checkout forms and secure handling of payment data queries. Supports both stdio and SSE transport methods for communication with AI models.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "worldpay",
        "ecommerce",
        "payment",
        "payment processing",
        "worldpay payment",
        "worldpay mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "skudskud--test-repo-mcp": {
      "owner": "skudskud",
      "name": "test-repo-mcp",
      "url": "https://github.com/skudskud/test-repo-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/skudskud.webp",
      "description": "Integrate and connect LLM applications with various APIs and services to leverage real-world data and tools. Provides a framework for building applications that utilize external resources effectively.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-05T11:16:17Z",
      "readme_content": "# Uber Eats MCP Server\n\nThis is a POC of how you can build an MCP servers on top of Uber Eats\n\nhttps://github.com/user-attachments/assets/05efbf51-1b95-4bd2-a327-55f1fe2f958b\n\n## What is MCP?\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) is an open protocol that enables seamless integration between LLM applications and external tools.\n\n## Prerequisites\n\n- Python 3.12 or higher\n- Anthropic API key or other supported LLM provider\n\n## Setup\n\n1. Ensure you have a virtual environment activated:\n   ```\n   uv venv\n   source .venv/bin/activate  # On Unix/Mac\n   ```\n\n2. Install required packages:\n   ```\n   uv pip install -r requirements.txt\n   playwright install\n   ```\n\n3. Update the `.env` file with your API key:\n   ```\n   ANTHROPIC_API_KEY=your_openai_api_key_here\n   ```\n\n## Note\n\nSince we're using stdio as MCP transport, we have disable all output from browser use\n\n## Debugging\n\nYou can run the MCP inspector tool with this command\n\n```bash\nuv run mcp dev server.py\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "llm",
        "retail",
        "llm applications",
        "ecommerce retail",
        "retail skudskud"
      ],
      "category": "ecommerce-and-retail"
    },
    "tanush-yadav--shopify-mcp": {
      "owner": "tanush-yadav",
      "name": "shopify-mcp",
      "url": "https://github.com/tanush-yadav/shopify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/tanush-yadav.webp",
      "description": "Interact with Shopify store data including managing products, customers, orders, discounts, and collections through a GraphQL API. Supports comprehensive management with clear error handling and debugging functionalities.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-10T14:54:01Z",
      "readme_content": "# Shopify MCP Server\n\nMCP Server for Shopify API, enabling interaction with store data (products, customers, orders, etc.) via GraphQL.\n\n\n## Features\n\nProvides tools for product, customer, and order management, direct GraphQL integration, and clear error handling.\n\n## Prerequisites\n\n1. Node.js (v16+)\n2. Shopify Custom App Access Token\n\n## Installation\n\n```bash\ngit clone https://github.com/pashpashpash/shopify-mcp-server.git\ncd shopify-mcp-server\nnpm install\nnpm run build\n```\n\n## Shopify Setup & Configuration\n\n1.  **Create Custom App**: In Shopify admin > **Settings** > **Apps and sales channels** > **Develop apps** > **Create an app**.\n2.  **Configure Scopes**: Grant `read/write` permissions for `products`, `customers`, and `orders`.\n3.  **Install App & Get Token**: Install the app and copy the **Admin API access token**.\n4.  **Create `.env` file** in the project root:\n    ```\n    SHOPIFY_ACCESS_TOKEN=your_access_token\n    MYSHOPIFY_DOMAIN=your-store.myshopify.com\n    ```\n5.  **Configure Claude Desktop** (`claude_desktop_config.json`):\n    *   macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n    *   Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n    ```json\n    {\n      \"mcpServers\": {\n        \"shopify\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/shopify-mcp-server/dist/index.js\"],\n          \"env\": {\n            \"SHOPIFY_ACCESS_TOKEN\": \"your_access_token\",\n            \"MYSHOPIFY_DOMAIN\": \"your-store.myshopify.com\"\n          }\n        }\n      }\n    }\n    ```\n    *Note: Use the correct path to the cloned repo and store your token securely.*\n\n## Available Tools\n\n### Product Management\n\n1.  `findProducts`: Get all products or search by title.\n    *   `searchTitle` (optional string): Filter by title.\n    *   `limit` (number): Max products.\n2.  `listProductsInCollection`: Get products from a collection.\n    *   `collectionId` (string): Collection ID.\n    *   `limit` (optional number, default: 10): Max products.\n3.  `getProductsByIds`: Get products by IDs.\n    *   `productIds` (array of strings): Product IDs.\n4.  `getVariantsByIds`: Get variants by IDs.\n    *   `variantIds` (array of strings): Variant IDs.\n\n### Customer Management\n\n5.  `listCustomers`: Get customers with pagination.\n    *   `limit` (optional number): Max customers.\n    *   `next` (optional string): Next page cursor.\n6.  `addCustomerTags`: Add tags to a customer.\n    *   `customerId` (string): Customer ID.\n    *   `tags` (array of strings): Tags to add.\n\n### Order Management\n\n7.  `findOrders`: Get orders with advanced filtering/sorting.\n    *   `first` (optional number): Limit orders.\n    *   `after` (optional string): Next page cursor.\n    *   `query` (optional string): Filter query.\n    *   `sortKey` (optional enum): Sort field.\n    *   `reverse` (optional boolean): Reverse sort.\n8.  `getOrderById`: Get a single order by ID.\n    *   `orderId` (string): Order ID.\n9.  `createDraftOrder`: Create a draft order.\n    *   `lineItems` (array): Items (variantId, quantity).\n    *   `email` (string): Customer email.\n    *   `shippingAddress` (object): Shipping details.\n    *   `note` (optional string): Order note.\n10. `completeDraftOrder`: Complete a draft order.\n    *   `draftOrderId` (string): Draft order ID.\n    *   `variantId` (string): Variant ID.\n\n### Discount Management\n\n11. `createDiscountCode`: Create a basic discount code.\n    *   `title` (string): Discount title.\n    *   `code` (string): Discount code.\n    *   `valueType` (enum): 'percentage' or 'fixed_amount'.\n    *   `value` (number): Discount value.\n    *   `startsAt` (string): Start date (ISO).\n    *   `endsAt` (optional string): End date (ISO).\n    *   `appliesOncePerCustomer` (boolean): Limit one use per customer.\n\n### Collection Management\n\n12. `listCollections`: Get all collections.\n    *   `limit` (optional number, default: 10): Max collections.\n    *   `name` (optional string): Filter by name.\n\n### Shop Information\n\n13. `getShopDetails`: Get basic shop details (No inputs).\n14. `getExtendedShopDetails`: Get extended shop details (No inputs).\n\n### Webhook Management\n\n15. `manageWebhooks`: Manage webhooks.\n    *   `action` (enum): 'subscribe', 'find', 'unsubscribe'.\n    *   `callbackUrl` (string): Webhook URL.\n    *   `topic` (enum): Webhook topic.\n    *   `webhookId` (optional string): Required for unsubscribe.\n\n### Debugging Tools\n\n16. `debugGetVariantMetafield`: Get variant & `size_chart_json` metafield.\n    *   `variantId` (string): Variant GID.\n\n### Developer Tools\n\n17. `introspect_admin_schema`: Introspect Admin API GraphQL schema.\n    *   `query` (string): Filter term.\n    *   `filter` (optional array): Filter by 'types', 'queries', 'mutations', 'all'.\n18. `search_dev_docs`: Search shopify.dev docs.\n    *   `prompt` (string): Search query.\n\n## Debugging\n\nCheck Claude Desktop MCP logs:\n`tail -n 20 -f ~/Library/Logs/Claude/mcp*.log`\n\nCommon issues:\n*   **Authentication**: Check token, domain format, API scopes.\n*   **API Errors**: Check rate limits, input formats, required fields.\n\n## Development\n\n```bash\nnpm install\nnpm run build\nnpm test\n```\n\n## Dependencies\n\n- @modelcontextprotocol/sdk\n- graphql-request\n- zod\n\n## License\n\nMIT\n\n---\nNote: Fork of [original shopify-mcp-server repository](https://github.com/rezapex/shopify-mcp-server-main)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "graphql",
        "yadav shopify",
        "shopify store",
        "shopify mcp"
      ],
      "category": "ecommerce-and-retail"
    },
    "tdergouzi--mcp-server-web3": {
      "owner": "tdergouzi",
      "name": "mcp-server-web3",
      "url": "https://github.com/tdergouzi/mcp-server-web3",
      "imageUrl": "/freedevtools/mcp/pfp/tdergouzi.webp",
      "description": "Integrates web3 functionalities to facilitate access to blockchain capabilities and decentralized data through a standardized interface. Provides tools and resources for enhancing applications with web3 capabilities.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-19T08:53:42Z",
      "readme_content": "# mcp-server-web3\nThe web3 function plugin server base on MCP of Anthropic.\n\n## Install the libs\n\n```sh\nyarn\n```\n\n## Build the code into index.js\n```sh\nyarn build\n```\n\n## Update the MCP server config according to the client\n```sh\n# MacOS and Claude client\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n    \"mcpServers\": {\n        \"web3\": {\n            \"command\": \"node\",\n            \"args\": [\"/ABSOLUTE/PATH/TO/PARENT/FOLDER/mcp-server-web3/build/index.js\"],\n            \"env\":{\n              \"CMC_API_KEY\": \"your cmc api key\"\n            }\n        }\n    }\n}\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "web3",
        "blockchain",
        "ecommerce retail",
        "integrates web3",
        "web3 capabilities"
      ],
      "category": "ecommerce-and-retail"
    },
    "techspawn--woocommerce-mcp-server": {
      "owner": "techspawn",
      "name": "woocommerce-mcp-server",
      "url": "https://github.com/techspawn/woocommerce-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/techspawn.webp",
      "description": "Manage a WooCommerce store using a unified API with JSON-RPC calls. Interact with various store elements such as products, orders, customers, shipping, and tax configurations directly through the WordPress REST API.",
      "stars": 67,
      "forks": 37,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T18:51:16Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/techspawn-woocommerce-mcp-server)\n\n# WooCommerce MCP Server\n\nA Model Context Protocol (MCP) server for WooCommerce integration, compatible with Windows, macOS, and Linux.\n\n## Overview\n\nThis MCP server enables interaction with WooCommerce stores through the WordPress REST API. It provides comprehensive tools for managing all aspects of products, orders, customers, shipping, taxes, discounts, and store configuration using JSON-RPC 2.0 protocol.\n\n## Installation\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\nAdd the server to your MCP settings file with environment variables for credentials:\n\n```json\n{\n  \"mcpServers\": {\n    \"woocommerce\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/build/index.js\"],\n      \"env\": {\n        \"WORDPRESS_SITE_URL\": \"https://your-wordpress-site.com\",\n        \"WOOCOMMERCE_CONSUMER_KEY\": \"your-woocommerce-consumer-key\",\n        \"WOOCOMMERCE_CONSUMER_SECRET\": \"your-woocommerce-consumer-secret\",\n        \"WORDPRESS_USERNAME\": \"your-wordpress-username\",\n        \"WORDPRESS_PASSWORD\": \"your-wordpress-password\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\n#### Required for WooCommerce API access:\n- `WORDPRESS_SITE_URL`: Your WordPress site URL (WooCommerce is a WordPress plugin)\n- `WOOCOMMERCE_CONSUMER_KEY`: WooCommerce REST API consumer key\n- `WOOCOMMERCE_CONSUMER_SECRET`: WooCommerce REST API consumer secret\n\n#### Required only for WordPress API methods:\n- `WORDPRESS_USERNAME`: WordPress username with appropriate permissions\n- `WORDPRESS_PASSWORD`: WordPress password for authentication\n\nYou can also provide these credentials in the request parameters if you prefer not to use environment variables.\n\n## Authentication Options\n\n### WooCommerce Authentication\nWooCommerce API access requires consumer keys that you can generate in your WordPress dashboard under WooCommerce ‚Üí Settings ‚Üí Advanced ‚Üí REST API.\n\n### WordPress Authentication\nFor WordPress-specific methods (like managing posts), you need to provide:\n- Username/password credentials for basic authentication\n- The WordPress REST API must be enabled on your site\n\n## API Methods\n\nThe server supports both WordPress and WooCommerce API methods. Here's a list of available methods grouped by category:\n\n### WordPress Content Management\n\nThese methods require WordPress username/password credentials and are independent of the WooCommerce API.\n\n| Method | Description |\n|--------|-------------|\n| `create_post` | Create a new WordPress post |\n| `get_posts` | Retrieve WordPress posts |\n| `update_post` | Update an existing WordPress post |\n| `get_post_meta` | Get post metadata |\n| `update_post_meta` | Update post metadata |\n| `create_post_meta` | Create post metadata |\n| `delete_post_meta` | Delete post metadata |\n\n### WooCommerce Products\n\n| Method | Description |\n|--------|-------------|\n| `get_products` | Retrieve a list of products |\n| `get_product` | Get a single product by ID |\n| `create_product` | Create a new product |\n| `update_product` | Update an existing product |\n| `delete_product` | Delete a product |\n| `get_product_meta` | Get product metadata |\n| `create_product_meta` | Create/update product metadata |\n| `update_product_meta` | Update product metadata (alias for create) |\n| `delete_product_meta` | Delete product metadata |\n\n### Product Categories\n\n| Method | Description |\n|--------|-------------|\n| `get_product_categories` | Retrieve product categories |\n| `get_product_category` | Get a single product category |\n| `create_product_category` | Create a new product category |\n| `update_product_category` | Update a product category |\n| `delete_product_category` | Delete a product category |\n\n### Product Tags\n\n| Method | Description |\n|--------|-------------|\n| `get_product_tags` | Retrieve product tags |\n| `get_product_tag` | Get a single product tag |\n| `create_product_tag` | Create a new product tag |\n| `update_product_tag` | Update a product tag |\n| `delete_product_tag` | Delete a product tag |\n\n### Product Attributes\n\n| Method | Description |\n|--------|-------------|\n| `get_product_attributes` | Retrieve product attributes |\n| `get_product_attribute` | Get a single product attribute |\n| `create_product_attribute` | Create a new product attribute |\n| `update_product_attribute` | Update a product attribute |\n| `delete_product_attribute` | Delete a product attribute |\n| `get_attribute_terms` | Retrieve attribute terms |\n| `get_attribute_term` | Get a single attribute term |\n| `create_attribute_term` | Create a new attribute term |\n| `update_attribute_term` | Update an attribute term |\n| `delete_attribute_term` | Delete an attribute term |\n\n### Product Variations\n\n| Method | Description |\n|--------|-------------|\n| `get_product_variations` | Retrieve product variations |\n| `get_product_variation` | Get a single product variation |\n| `create_product_variation` | Create a new product variation |\n| `update_product_variation` | Update a product variation |\n| `delete_product_variation` | Delete a product variation |\n\n### Product Reviews\n\n| Method | Description |\n|--------|-------------|\n| `get_product_reviews` | Retrieve product reviews |\n| `get_product_review` | Get a single product review |\n| `create_product_review` | Create a new product review |\n| `update_product_review` | Update a product review |\n| `delete_product_review` | Delete a product review |\n\n### WooCommerce Orders\n\n| Method | Description |\n|--------|-------------|\n| `get_orders` | Retrieve a list of orders |\n| `get_order` | Get a single order by ID |\n| `create_order` | Create a new order |\n| `update_order` | Update an existing order |\n| `delete_order` | Delete an order |\n| `get_order_meta` | Get order metadata |\n| `create_order_meta` | Create/update order metadata |\n| `update_order_meta` | Update order metadata (alias for create) |\n| `delete_order_meta` | Delete order metadata |\n\n### Order Notes\n\n| Method | Description |\n|--------|-------------|\n| `get_order_notes` | Retrieve order notes |\n| `get_order_note` | Get a single order note |\n| `create_order_note` | Create a new order note |\n| `delete_order_note` | Delete an order note |\n\n### Order Refunds\n\n| Method | Description |\n|--------|-------------|\n| `get_order_refunds` | Retrieve order refunds |\n| `get_order_refund` | Get a single order refund |\n| `create_order_refund` | Create a new order refund |\n| `delete_order_refund` | Delete an order refund |\n\n### WooCommerce Customers\n\n| Method | Description |\n|--------|-------------|\n| `get_customers` | Retrieve a list of customers |\n| `get_customer` | Get a single customer by ID |\n| `create_customer` | Create a new customer |\n| `update_customer` | Update an existing customer |\n| `delete_customer` | Delete a customer |\n| `get_customer_meta` | Get customer metadata |\n| `create_customer_meta` | Create/update customer metadata |\n| `update_customer_meta` | Update customer metadata (alias for create) |\n| `delete_customer_meta` | Delete customer metadata |\n\n### Shipping\n\n| Method | Description |\n|--------|-------------|\n| `get_shipping_zones` | Retrieve shipping zones |\n| `get_shipping_zone` | Get a single shipping zone |\n| `create_shipping_zone` | Create a new shipping zone |\n| `update_shipping_zone` | Update a shipping zone |\n| `delete_shipping_zone` | Delete a shipping zone |\n| `get_shipping_methods` | Retrieve shipping methods |\n| `get_shipping_zone_methods` | Get shipping methods for a zone |\n| `create_shipping_zone_method` | Create a new shipping method for a zone |\n| `update_shipping_zone_method` | Update a shipping method for a zone |\n| `delete_shipping_zone_method` | Delete a shipping method from a zone |\n| `get_shipping_zone_locations` | Get locations for a shipping zone |\n| `update_shipping_zone_locations` | Update locations for a shipping zone |\n\n### Taxes\n\n| Method | Description |\n|--------|-------------|\n| `get_tax_classes` | Retrieve tax classes |\n| `create_tax_class` | Create a new tax class |\n| `delete_tax_class` | Delete a tax class |\n| `get_tax_rates` | Retrieve tax rates |\n| `get_tax_rate` | Get a single tax rate |\n| `create_tax_rate` | Create a new tax rate |\n| `update_tax_rate` | Update a tax rate |\n| `delete_tax_rate` | Delete a tax rate |\n\n### Discounts/Coupons\n\n| Method | Description |\n|--------|-------------|\n| `get_coupons` | Retrieve coupons |\n| `get_coupon` | Get a single coupon |\n| `create_coupon` | Create a new coupon |\n| `update_coupon` | Update a coupon |\n| `delete_coupon` | Delete a coupon |\n\n### Payment Gateways\n\n| Method | Description |\n|--------|-------------|\n| `get_payment_gateways` | Retrieve payment gateways |\n| `get_payment_gateway` | Get a single payment gateway |\n| `update_payment_gateway` | Update a payment gateway |\n\n### Reports\n\n| Method | Description |\n|--------|-------------|\n| `get_sales_report` | Retrieve sales reports |\n| `get_products_report` | Retrieve products reports |\n| `get_orders_report` | Retrieve orders reports |\n| `get_categories_report` | Retrieve categories reports |\n| `get_customers_report` | Retrieve customers reports |\n| `get_stock_report` | Retrieve stock reports |\n| `get_coupons_report` | Retrieve coupons reports |\n| `get_taxes_report` | Retrieve taxes reports |\n\n### Settings\n\n| Method | Description |\n|--------|-------------|\n| `get_settings` | Retrieve all settings |\n| `get_setting_options` | Retrieve options for a setting |\n| `update_setting_option` | Update a setting option |\n\n### System Status\n\n| Method | Description |\n|--------|-------------|\n| `get_system_status` | Retrieve system status |\n| `get_system_status_tools` | Retrieve system status tools |\n| `run_system_status_tool` | Run a system status tool |\n\n### Data\n\n| Method | Description |\n|--------|-------------|\n| `get_data` | Retrieve store data |\n| `get_continents` | Retrieve continents data |\n| `get_countries` | Retrieve countries data |\n| `get_currencies` | Retrieve currencies data |\n| `get_current_currency` | Get the current currency |\n\n## Method Parameters\n\nAll methods follow a similar parameter structure. Here are some examples:\n\n### Common Parameters for All Methods\n\n- `siteUrl`: (optional if set in env) WordPress site URL\n\n### Additional Parameters for WooCommerce Methods\n\n- `consumerKey`: (optional if set in env) WooCommerce consumer key\n- `consumerSecret`: (optional if set in env) WooCommerce consumer secret\n\n### Additional Parameters for WordPress Methods\n\n- `username`: (optional if set in env) WordPress username\n- `password`: (optional if set in env) WordPress password\n\n## Example Usage\n\n### WordPress API Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_post\",\n  \"params\": {\n    \"siteUrl\": \"https://your-wordpress-site.com\",\n    \"username\": \"your-wordpress-username\",\n    \"password\": \"your-wordpress-password\",\n    \"title\": \"My New Blog Post\",\n    \"content\": \"This is the content of my new blog post.\",\n    \"status\": \"publish\"\n  }\n}\n```\n\n### WooCommerce Products Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"get_products\",\n  \"params\": {\n    \"perPage\": 20,\n    \"page\": 1,\n    \"filters\": {\n      \"category\": 19,\n      \"status\": \"publish\"\n    }\n  }\n}\n```\n\n### Create Product Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_product\",\n  \"params\": {\n    \"productData\": {\n      \"name\": \"Premium T-Shirt\",\n      \"type\": \"simple\",\n      \"regular_price\": \"29.99\",\n      \"description\": \"Comfortable cotton t-shirt, available in various sizes.\",\n      \"short_description\": \"Premium quality t-shirt.\",\n      \"categories\": [\n        {\n          \"id\": 19\n        }\n      ],\n      \"images\": [\n        {\n          \"src\": \"http://example.com/wp-content/uploads/2022/06/t-shirt.jpg\"\n        }\n      ]\n    }\n  }\n}\n```\n\n### Product Metadata Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_product_meta\",\n  \"params\": {\n    \"productId\": 456,\n    \"metaKey\": \"_custom_product_field\",\n    \"metaValue\": {\n      \"special_attribute\": \"value\",\n      \"another_attribute\": 42\n    }\n  }\n}\n```\n\n### Order Metadata Example\n\n```json\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"create_order_meta\",\n  \"params\": {\n    \"orderId\": 789,\n    \"metaKey\": \"_delivery_instructions\",\n    \"metaValue\": \"Leave package at the back door\"\n  }\n}\n```\n\n## Security Note\n\nFor WooCommerce REST API access, you need to generate API keys. You can create them in your WordPress dashboard under WooCommerce ‚Üí Settings ‚Üí Advanced ‚Üí REST API.\n\n## Requirements\n\n- Node.js 20.0.0 or higher\n- WordPress site with WooCommerce plugin installed\n- WooCommerce REST API keys\n\n## License\n\nMIT License - See LICENSE file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "woocommerce",
        "ecommerce",
        "retail",
        "woocommerce mcp",
        "ecommerce retail",
        "woocommerce store"
      ],
      "category": "ecommerce-and-retail"
    },
    "therealhexi--shopify-mcp-server-main": {
      "owner": "therealhexi",
      "name": "shopify-mcp-server-main",
      "url": "https://github.com/therealhexi/shopify-mcp-server-main",
      "imageUrl": "/freedevtools/mcp/pfp/therealhexi.webp",
      "description": "Enables interaction with Shopify store data through a GraphQL API, facilitating product, customer, and order management. Supports advanced querying and clear error handling for API interactions.",
      "stars": 8,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-25T18:52:07Z",
      "readme_content": "# Shopify MCP Server\n\nMCP Server for Shopify API, enabling interaction with store data through GraphQL API. This server provides tools for managing products, customers, orders, and more.\n\n<a href=\"https://glama.ai/mcp/servers/bemvhpy885\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/bemvhpy885/badge\" alt=\"Shopify Server MCP server\" /></a>\n\n## Features\n\n* **Product Management**: Search and retrieve product information\n* **Customer Management**: Load customer data and manage customer tags\n* **Order Management**: Advanced order querying and filtering\n* **GraphQL Integration**: Direct integration with Shopify's GraphQL Admin API\n* **Comprehensive Error Handling**: Clear error messages for API and authentication issues\n\n## Tools\n\n1. `get-products`\n   * Get all products or search by title\n   * Inputs:\n     * `searchTitle` (optional string): Filter products by title\n     * `limit` (number): Maximum number of products to return\n   * Returns: Formatted product details including title, description, handle, and variants\n\n2. `get-products-by-collection`\n   * Get products from a specific collection\n   * Inputs:\n     * `collectionId` (string): ID of the collection to get products from\n     * `limit` (optional number, default: 10): Maximum number of products to return\n   * Returns: Formatted product details from the specified collection\n\n3. `get-products-by-ids`\n   * Get products by their IDs\n   * Inputs:\n     * `productIds` (array of strings): Array of product IDs to retrieve\n   * Returns: Formatted product details for the specified products\n\n4. `update-product-price`\n   * Update product prices for its ID\n   * Inputs:\n     * `productId` (string): ID of the product to update\n     * `price` (string): New price for the product\n   * Returns: Response of the update\n\n5. `get-variants-by-ids`\n   * Get product variants by their IDs\n   * Inputs:\n     * `variantIds` (array of strings): Array of variant IDs to retrieve\n   * Returns: Detailed variant information including product details\n\n6. `get-customers`\n   * Get shopify customers with pagination support\n   * Inputs:\n     * `limit` (optional number): Maximum number of customers to return\n     * `next` (optional string): Next page cursor\n   * Returns: Customer data in JSON format\n\n7. `tag-customer`\n   * Add tags to a customer\n   * Inputs:\n     * `customerId` (string): Customer ID to tag\n     * `tags` (array of strings): Tags to add to the customer\n   * Returns: Success or failure message\n\n8. `get-orders`\n   * Get orders with advanced filtering and sorting\n   * Inputs:\n     * `first` (optional number): Limit of orders to return\n     * `after` (optional string): Next page cursor\n     * `query` (optional string): Filter orders using query syntax\n     * `sortKey` (optional enum): Field to sort by ('PROCESSED_AT', 'TOTAL_PRICE', 'ID', 'CREATED_AT', 'UPDATED_AT', 'ORDER_NUMBER')\n     * `reverse` (optional boolean): Reverse sort order\n   * Returns: Formatted order details\n\n9. `get-order`\n   * Get a single order by ID\n   * Inputs:\n     * `orderId` (string): ID of the order to retrieve\n   * Returns: Detailed order information\n\n10. `create-discount`\n   * Create a basic discount code\n   * Inputs:\n     * `title` (string): Title of the discount\n     * `code` (string): Discount code that customers will enter\n     * `valueType` (enum): Type of discount ('percentage' or 'fixed_amount')\n     * `value` (number): Discount value (percentage as decimal or fixed amount)\n     * `startsAt` (string): Start date in ISO format\n     * `endsAt` (optional string): Optional end date in ISO format\n     * `appliesOncePerCustomer` (boolean): Whether discount can be used only once per customer\n   * Returns: Created discount details\n\n11. `create-draft-order`\n    * Create a draft order\n    * Inputs:\n      * `lineItems` (array): Array of items with variantId and quantity\n      * `email` (string): Customer email\n      * `shippingAddress` (object): Shipping address details\n      * `note` (optional string): Optional note for the order\n    * Returns: Created draft order details\n\n12. `complete-draft-order`\n    * Complete a draft order\n    * Inputs:\n      * `draftOrderId` (string): ID of the draft order to complete\n      * `variantId` (string): ID of the variant in the draft order\n    * Returns: Completed order details\n\n13. `get-collections`\n    * Get all collections\n    * Inputs:\n      * `limit` (optional number, default: 10): Maximum number of collections to return\n      * `name` (optional string): Filter collections by name\n    * Returns: Collection details\n\n14. `get-shop`\n    * Get shop details\n    * Inputs: None\n    * Returns: Basic shop information\n\n15. `get-shop-details`\n    * Get extended shop details including shipping countries\n    * Inputs: None\n    * Returns: Extended shop information including shipping countries\n\n16. `manage-webhook`\n    * Subscribe, find, or unsubscribe webhooks\n    * Inputs:\n      * `action` (enum): Action to perform ('subscribe', 'find', 'unsubscribe')\n      * `callbackUrl` (string): Webhook callback URL\n      * `topic` (enum): Webhook topic to subscribe to\n      * `webhookId` (optional string): Webhook ID (required for unsubscribe)\n    * Returns: Webhook details or success message\n\n## Setup\n\n### Shopify Access Token\n\nTo use this MCP server, you'll need to create a custom app in your Shopify store:\n\n1. From your Shopify admin, go to **Settings** > **Apps and sales channels**\n2. Click **Develop apps** (you may need to enable developer preview first)\n3. Click **Create an app**\n4. Set a name for your app (e.g., \"Shopify MCP Server\")\n5. Click **Configure Admin API scopes**\n6. Select the following scopes:\n   * `read_products`, `write_products`\n   * `read_customers`, `write_customers`\n   * `read_orders`, `write_orders`\n7. Click **Save**\n8. Click **Install app**\n9. Click **Install** to give the app access to your store data\n10. After installation, you'll see your **Admin API access token**\n11. Copy this token - you'll need it for configuration\n\nNote: Store your access token securely. It provides access to your store data and should never be shared or committed to version control.\nMore details on how to create a Shopify app can be found [here](https://help.shopify.com/en/manual/apps/app-types/custom-apps).\n\n### Usage with Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"shopify\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"shopify-mcp-server\"],\n      \"env\": {\n        \"SHOPIFY_ACCESS_TOKEN\": \"<YOUR_ACCESS_TOKEN>\",\n        \"MYSHOPIFY_DOMAIN\": \"<YOUR_SHOP>.myshopify.com\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n1. Clone the repository\n2. Install dependencies:\n```bash\nnpm install\n```\n3. Create a `.env` file:\n```\nSHOPIFY_ACCESS_TOKEN=your_access_token\nMYSHOPIFY_DOMAIN=your-store.myshopify.com\n```\n4. Build the project:\n```bash\nnpm run build\n```\n5. Run tests:\n```bash\nnpm test\n```\n\n## Dependencies\n\n- @modelcontextprotocol/sdk - MCP protocol implementation\n- graphql-request - GraphQL client for Shopify API\n- zod - Runtime type validation\n\n## Contributing\n\nContributions are welcome! Please read our [Contributing Guidelines](CONTRIBUTING.md) first.\n\n## License\n\nMIT\n\n## Community\n\n- [MCP GitHub Discussions](https://github.com/modelcontextprotocol/servers/discussions)\n- [Report Issues](https://github.com/your-username/shopify-mcp-server/issues)\n\n---\n\nBuilt with ‚ù§Ô∏è using the [Model Context Protocol](https://modelcontextprotocol.io) \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shopify",
        "ecommerce",
        "retail",
        "shopify store",
        "therealhexi shopify",
        "ecommerce retail"
      ],
      "category": "ecommerce-and-retail"
    },
    "w-beom--shoppingMall": {
      "owner": "w-beom",
      "name": "shoppingMall",
      "url": "https://github.com/w-beom/shoppingMall",
      "imageUrl": "/freedevtools/mcp/pfp/w-beom.webp",
      "description": "A web application for managing user registrations and logins, along with performing CRUD operations on a simple bulletin board. Built using Spring Boot, Gradle, Mybatis, and Thymeleaf, it serves as a foundational project for learning web development in a Java environment.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "HTML",
      "updated_at": "2024-05-28T16:31:54Z",
      "readme_content": "# shoppingMall\n\nSpring Boot GradleÏùÑ Ïù¥Ïö©Ìïú ÏáºÌïëÎ™∞ ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§.\n\nÍ∞ÑÎã®Ìïú Í≤åÏãúÌåê CRUDÍµ¨ÌòÑÍ≥º ÌöåÏõêÍ∞ÄÏûÖ,Î°úÍ∑∏Ïù∏ Îì± Ïõπ Í∞úÎ∞úÏùò Í∏∞Î≥∏Ïóê Ï∂©Ïã§Ìïú ÌîÑÎ°úÏ†ùÌä∏ÏûÖÎãàÎã§.\n\nÌôòÍ≤ΩÏÖãÌåÖ \n\nEcilpse 2019-09\n\njava - jdk 1.8.0\n\nSpring Boot Gradle\n\nMybatis\n\nThymeleaf ÏóîÏßÑ\n\nÎîîÏûêÏù∏ Ï∂úÏ≤ò\nhttp://www.nibbuns.co.kr/\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ecommerce",
        "shoppingmall",
        "retail",
        "ecommerce retail",
        "shoppingmall web",
        "beom shoppingmall"
      ],
      "category": "ecommerce-and-retail"
    }
  }
}