{
  "category": "notetaking-and-knowledge-bases",
  "categoryDisplay": "Note-Taking and Knowledge Bases",
  "description": "",
  "totalRepositories": 133,
  "repositories": {
    "1282saa--mcp_style": {
      "owner": "1282saa",
      "name": "mcp_style",
      "url": "https://github.com/1282saa/mcp_style",
      "imageUrl": "/freedevtools/mcp/pfp/1282saa.webp",
      "description": "The MCP Style Server is an open-source tool that allows users to integrate external resources and prompts into AI workflows easily. It supports customization and quick testing of ML features for enhanced applications involving large language models.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-03T13:09:51Z",
      "readme_content": "# 서울경제신문 스타일북 MCP 서버\n\n이 프로젝트는 서울경제신문 스타일북 데이터를 MCP(Model Context Protocol) 서버로 제공하는 도구입니다.\n\n## 설치 방법\n\n### 필수 라이브러리 설치\n\n```bash\npip install -r requirements.txt\n```\n\n## 기본 사용법\n\n### 1. 직접 실행\n\n```bash\npython stylebook_mcp_fastmcp.py --stdio --data_path \"기사 작성 준칙\"\n```\n\n### 2. 스미더리 연동\n\n1. 스미더리를 설치합니다.\n2. `smithery.yaml` 파일을 스미더리 디렉토리에 복사합니다.\n3. 스미더리에서 `@your-username/mcp_style`을 배포합니다.\n\n### 3. 클로드 데스크탑 연동\n\n1. `claude_desktop_config.json` 파일을 홈 디렉토리의 적절한 위치에 복사합니다:\n\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. 클로드 데스크탑을 재시작합니다.\n\n## 테스트 방법\n\n```bash\n# 기본 테스트\npython test_mcp.py\n\n# 특정 데이터 경로와 함께 테스트\npython test_mcp.py --data-path \"기사 작성 준칙\"\n\n# 특정 검색어로 테스트\npython test_mcp.py --query \"문장부호\"\n```\n\n## MCP Inspector로 테스트\n\n```bash\nnpx @modelcontextprotocol/inspector python -u stylebook_mcp_fastmcp.py --stdio --data_path \".\"\n```\n\n## 디렉토리 구조\n\n이 MCP 서버는 다음과 같은 파일 구조를 사용합니다:\n\n```\n.\n├── smithery.yaml                # 스미더리 설정 파일\n├── stylebook_mcp_fastmcp.py     # MCP 서버 메인 스크립트\n├── claude_desktop_config.json   # 클로드 데스크탑 설정 파일\n├── test_mcp.py                  # 테스트 스크립트\n├── requirements.txt             # 필수 라이브러리 목록\n└── README.md                    # 이 문서\n```\n\n## 스타일북 데이터 구조\n\n스타일북 데이터는 다음과 같은 디렉토리에 있어야 합니다 (기본적으로 스크립트는 자동으로 검색합니다):\n\n```\n.\n├── 기사 작성 준칙/\n├── 기사작성 요령/\n├── 자주 틀리는 말/\n├── 제목과 레이아웃_제목달기/\n├── 제목과 레이아웃_레이아웃 요령/\n└── 뉴스가치 판단/\n```\n\n각 디렉토리에는 `.json` 파일들이 있어야 하며, 메타데이터는 `metadata.json` 또는 `_meta.json` 파일에 있어야 합니다.\n\n## 도구 목록\n\nMCP 서버는 다음과 같은 도구를 제공합니다:\n\n1. `get_metadata` - 스타일북 메타데이터 조회\n2. `get_categories` - 스타일북 카테고리 목록 조회\n3. `get_rule` - 특정 규칙 ID로 스타일북 규칙 조회\n4. `search` - 키워드로 스타일북 검색\n5. `claude_search` - Claude AI를 사용한 스타일북 검색\n6. `download_json` - 스타일북 JSON 파일 다운로드\n\n## 환경 변수\n\n- `PYTHONUNBUFFERED`: 항상 1로 설정하여 버퍼링을 비활성화\n- `PYTHONIOENCODING`: `utf-8`로 설정하여 한글 등 유니코드 문자를 올바르게 처리\n\n## 문제 해결\n\n1. 데이터를 찾을 수 없는 경우:\n\n   - `--data_path` 옵션으로 정확한 경로를 지정하세요.\n   - 스크립트가 자동으로 여러 디렉토리를 검색하지만, 직접 지정하는 것이 더 확실합니다.\n\n2. 클로드 데스크탑에 연결되지 않는 경우:\n\n   - 로그를 확인하세요: `tail -n 20 -F ~/Library/Logs/Claude/mcp*.log`\n   - `claude_desktop_config.json` 파일이 올바른 위치에 있는지 확인하세요.\n\n3. 스미더리에 연결되지 않는 경우:\n   - 스미더리 로그를 확인하세요.\n   - `smithery.yaml` 파일이 올바르게 설정되었는지 확인하세요.\n\n## 라이선스\n\n이 프로젝트는 자유롭게 사용할 수 있습니다.\n\n@mcp.route(\"resources/list\")\ndef handle_resources_list():\nreturn {\"resources\": []}\n\n@mcp.route(\"prompts/list\")\ndef handle_prompts_list():\nreturn {\"prompts\": []}\n\n@mcp.route(\"debug/status\")\ndef debug_status():\nreturn {\n\"loaded_data\": len(stylebook_data),\n\"server_uptime\": \"...\",\n\"memory_usage\": \"...\"\n}\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_style",
        "mcp",
        "notetaking",
        "mcp_style mcp",
        "mcp style",
        "ai workflows"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "9Ninety--MCPNotes": {
      "owner": "9Ninety",
      "name": "MCPNotes",
      "url": "https://github.com/9Ninety/MCPNotes",
      "imageUrl": "/freedevtools/mcp/pfp/9Ninety.webp",
      "description": "A simple note-taking application that enables users to record and manage notes with AI models while utilizing DynamoDB for storage. It provides both an MCP server for AI-driven note management and a web server for manual interaction.",
      "stars": 27,
      "forks": 3,
      "license": "GNU General Public License v2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-03T22:30:44Z",
      "readme_content": "# 📝 MCP Notes\n\n\n\n## ✨ Overview\n\n**MCP Notes Server** is a simple note-taking application built on top of the MCP protocol. Its purpose is to enable users to record and view complex notes and tasks while utilizing AI models, such as recording personal thoughts, notes, inspirations, and insights. It does not rely on creating project files, allowing users to record any content without making it public within the project.\n\nThis project includes two servers: a Node.js server using the Model Context Protocol (MCP) for AI-driven note management and a web server providing a user-friendly interface for manual interaction with your notes.\n\n**Note:** This project requires DynamoDB for note storage. You'll need an AWS account to use it. AWS offers a generous free tier for DynamoDB, making it suitable for frequent personal use at no cost.\n\n---\n\n## 🎯 Core Features\n\n- 🖥️ **Dual Server Architecture:** MCP server for AI-driven note management and Web server for the user interface\n- 🤖 **AI-Powered Note Taking:** Record thoughts, insights, and tasks through AI interactions\n- 🗂️ **Comprehensive Note Management:** Create, list, retrieve, update, and delete notes via AI or web interface\n- 📋 **Reliable Storage:** Secure and efficient note storage with AWS DynamoDB\n- 🔐 **Flexible Authentication:** Support for AWS credentials via connection strings or environment variables\n- 📝 **Project-Independent:** Store personal notes without affecting project files or structure\n\n---\n\n## 🤖 Model Support\n\nYou can use any model that supports function calls as long as your client supports MCP. The following models have been tested and confirmed to work:\n\n- Claude 3.5 Series\n- Gemini 1.5 and 2.0 Series\n- GPT-4 Series\n- Mistral Large\n- Grok-2\n- DeepSeek Chat\n\n---\n\n## 🛠️ Installation\n\n**Recommended**\n\nRun directly with `npx` or `bunx`, see examples below.\n\n**Alternative**\n\n1. Ensure **Node.js** is installed on your system.\n2. Clone this repository and install dependencies with: `npm install`\n3. Configure Claude Desktop or any other tools as shown below\n\n---\n\n## ⚙️ Credential Configuration\n\n### Connection String\n\n```plaintext\ndynamodb://<access_key>:<secret_key>@<region>/<table>\n```\n\n> Example: `dynamodb://AKIAXXXXXXXX:SKXXXXXXXX@us-east-1/mcp-notes`\n\n### Environment Variables\n\n1. Export `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.\n2. Supply connection information without credentials in the URI: `dynamodb://us-east-1/mcp-notes`\n\n---\n\n## 🤖 Integration with Tools\n\n### Claude Desktop\n\nAdd this snippet to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\nor file on local disks:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"file://path/to/notes-mcp-server.js\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n### Cody\n\n> **Note:** Currently, Cody has limited MCP server support.  \n> It only allows one server connection and cannot make tool calls. You'll need to use the web interface to create and manage notes and then reference them in AI chat conversations.\n\nAdd this snippet to your VS Code settings:\n\n```json\n{\n  \"openctx.providers\": {\n    \"https://openctx.org/npm/@openctx/provider-modelcontextprotocol\": {\n      \"nodeCommand\": \"node\",\n      \"mcp.provider.uri\": \"file://path/to/notes-mcp-server.js\",\n      \"mcp.provider.args\": [\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\nalternatively, use with `npx` (not guaranteed to work):\n\n```json\n{\n  \"openctx.providers\": {\n    \"https://openctx.org/npm/@openctx/provider-modelcontextprotocol\": {\n      \"nodeCommand\": \"node\",\n      \"mcp.provider.uri\": \"file:///usr/local/bin/npx\",\n      \"mcp.provider.args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n### Cline\n\nAdd this snippet to `cline_mcp_settings.json`:\n\n> You will find a \"MCP Server\" icon next to the \"New Task\" button, and then there is an \"Edit MCP Settings\" button to open this file.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notes\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"-p\",\n        \"mcp-notes\",\n        \"mcp-notes-server\",\n        \"--dynamodb\",\n        \"dynamodb://access_key:secret_key@region/table\"\n      ]\n    }\n  }\n}\n```\n\n---\n\n## 🚀 Running Web Servers\n\nThe web server provides a user-friendly interface for managing your notes. You can launch web interfaces to manage your notes, add new notes for AI, or modify parts of AI-generated notes.\n\n```bash\nnpx -p mcp-notes mcp-notes-web-server --dynamodb \"dynamodb://access_key:secret_key@region/table\"\n```\n\n```bash\nbun src/notes-web-server.ts --dynamodb \"dynamodb://access_key:secret_key@region/table\"\n```\n\n> Alternatively, compile with `npm run build` and run `node dist/notes-mcp-server.js` or `node dist/notes-web-server.js`\n\nThen navigate to `http://localhost:3100` in your browser to view notes.\n\n---\n\n## 🔧 Available MCP Tools\n\n### listNotes\n\n- **Input:** `{ tags?: string[] }`\n- **Output:** Array of all notes, optionally filtered by tags.\n\n### getNote\n\n- **Input:** `{ id: string }`\n- **Output:** A single note object matching the given ID, or a \"not found\" message if no match exists.\n\n### writeNote\n\n- **Input:** `{ id: string, title: string, summary: string, tags: string[], content: string }`\n- **Output:** A success confirmation message.\n\n### deleteNote\n\n- **Input:** `{ id: string }`\n- **Output:** Deletion confirmation message 🚮.\n\n---\n\n## 📝 Data Structure\n\nNotes are stored using the following structure:\n\n- **`id`**: A unique identifier for the note. It should be descriptive, with a random number suffix, like \"meeting-notes-1362\".\n- **`title`**: The title of the note.\n- **`summary`**: A short summary of the note's content.\n- **`tags`**: An array of tags associated with the note (e.g., [\"meeting\", \"project-x\"]).\n- **`content`**: The main content of the note.\n\n---\n\n## 📸 Screenshots\n\n### Claude Desktop\n\n✅ Full functionality\n\n\n\n\n### Cody\n\n✅ Mention Notes via Resource\n\n❎ Tool calls are not supported\n\n\n\n### Cline\n\n✅ Full functionality with Tool Calls\n\n❓ Resources don't seem to work; help wanted.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "mcpnotes",
        "notes",
        "note management",
        "manage notes",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Arcewoose--SeSac_study_repo": {
      "owner": "Arcewoose",
      "name": "SeSac_study_repo",
      "url": "https://github.com/Arcewoose/SeSac_study_repo",
      "imageUrl": "/freedevtools/mcp/pfp/Arcewoose.webp",
      "description": "Document learning experiences as a developer, sharing insights and resources to improve skills and foster community connections.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Jupyter Notebook",
      "updated_at": "2024-08-02T14:54:38Z",
      "readme_content": "### **새싹 개발자의 공부 기록**\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sesac_study_repo",
        "notetaking",
        "arcewoose",
        "arcewoose sesac_study_repo",
        "sesac_study_repo document",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "CamdenClark--anki-mcp-server": {
      "owner": "CamdenClark",
      "name": "anki-mcp-server",
      "url": "https://github.com/CamdenClark/anki-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/CamdenClark.webp",
      "description": "Integrate with Anki to manage decks and notes through a simple API. Access Anki decks and note models, and perform operations like creating and managing notes.",
      "stars": 75,
      "forks": 12,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-28T00:46:51Z",
      "readme_content": "# anki-mcp MCP Server\n\nA server to integrate with Anki via the AnkiConnect   plugin\n\nThis is a TypeScript-based MCP server that integrates with Anki via the AnkiConnect plugin. It demonstrates core MCP concepts by providing:\n\n- Resources representing Anki decks and note models with URIs\n- Tools for creating and managing Anki notes\n- Integration with AnkiConnect API\n\n## Features\n\n### Resources\n- List and access Anki decks via `anki://decks/{id}` URIs\n- List and access note models via `anki://models/{id}` URIs\n- JSON representation of Anki objects\n\n### Tools\n- `listDecks` - Get names of all decks\n- `listModels` - Get names of all note models\n- `getModel` - Get details of a specific note model\n- `addNote` - Create a single note\n  - Specify deck name, model name, fields and tags\n- `addNotes` - Create multiple notes in bulk\n  - Create many notes with specified parameters\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"anki-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\"d:\\\\anki-mcp-server\\\\build\\\\index.js\"]\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anki",
        "notetaking",
        "notes",
        "anki manage",
        "anki decks",
        "access anki"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Cleversoft-IT--drupal-tools-mcp": {
      "owner": "Cleversoft-IT",
      "name": "drupal-tools-mcp",
      "url": "https://github.com/Cleversoft-IT/drupal-tools-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Cleversoft-IT.webp",
      "description": "Manage a simple notes system with resources for creating and accessing text notes using URIs and metadata. Generate summaries of stored notes through LLM prompts.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-02-07T18:52:01Z",
      "readme_content": "# drupal-modules-mcp MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"drupal-modules-mcp\": {\n      \"command\": \"/path/to/drupal-modules-mcp/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "metadata",
        "notes resources",
        "notes using",
        "stored notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "DJBuildIt--Claude-Think-MCP": {
      "owner": "DJBuildIt",
      "name": "Claude-Think-MCP",
      "url": "https://github.com/DJBuildIt/Claude-Think-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Enables explicit reasoning mode for Claude in Cursor, allowing users to view Claude's step-by-step thought processes and final answers. Start messages with 'think' to trigger detailed problem solving and analysis in chat interactions.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "djbuildit",
        "mcp",
        "reasoning",
        "reasoning mode",
        "thought processes",
        "djbuildit claude"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Dingzeefs--mcp-apple-notes": {
      "owner": "Dingzeefs",
      "name": "mcp-apple-notes",
      "url": "https://github.com/Dingzeefs/mcp-apple-notes",
      "imageUrl": "/freedevtools/mcp/pfp/Dingzeefs.webp",
      "description": "Enables semantic search and retrieval of Apple Notes with advanced indexing capabilities. Supports both semantic and full-text searches, integrating seamlessly with Apple Notes on macOS.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-10T16:32:24Z",
      "readme_content": "# MCP Apple Notes\n\nA Model Context Protocol (MCP) server for semantic search and retrieval over Apple Notes.\n\n## Features\n\n- 🔍 Semantic search using on-device embeddings model\n- 📝 Full-text search capabilities\n- 💾 Vector storage with LanceDB\n- 🍎 Native Apple Notes integration\n\n## Prerequisites\n\n- macOS (required for Apple Notes integration)\n- [Bun](https://bun.sh/) JavaScript runtime\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/Dingzeefs/mcp-apple-notes.git\ncd mcp-apple-notes\n```\n\n2. Install dependencies:\n```bash\nbun install\n```\n\n## Usage\n\n### Configuring in Cursor IDE\n\n1. Open Cursor IDE\n2. Go to Settings → Features → MCP\n3. Add a new MCP server with the following configuration:\n   - **Name**: Apple Notes\n   - **Type**: command\n   - **Command**: `/path/to/bun /path/to/mcp-apple-notes/index.ts`\n   \n   Replace `/path/to/bun` with the actual path to your Bun executable (find it using `which bun`)\n   and `/path/to/mcp-apple-notes` with the actual path to this repository.\n\n4. Restart Cursor IDE\n\n### Using the MCP Server\n\nOnce configured, you can use the following tools in your conversations with Claude:\n\n- **list-notes**: Lists all your Apple Notes titles\n- **index-notes**: Indexes your notes for semantic search (do this first)\n- **get-note**: Retrieves a specific note by title\n- **search-notes**: Searches your notes using semantic or keyword search\n- **create-note**: Creates a new note with specified title and content\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check that the server is running by looking at the MCP server status in Cursor\n2. Verify that the paths in your MCP server configuration are correct\n3. Try running the command directly in your terminal to see any error messages\n4. Make sure Apple Notes is accessible and permissions are granted\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "retrieval",
        "notes macos",
        "apple notes",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "DynamicEndpoints--mesh-scanner": {
      "owner": "DynamicEndpoints",
      "name": "mesh-scanner",
      "url": "https://github.com/DynamicEndpoints/mesh-scanner",
      "imageUrl": "/freedevtools/mcp/pfp/DynamicEndpoints.webp",
      "description": "Create and manage text notes with unique URIs, allowing easy retrieval and organization. Generate summaries of notes through dedicated prompts and tools.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-14T06:16:21Z",
      "readme_content": "# MESH by Viscount Vulnerability Scanner MCP Server\n\n**Version 0.2.0** - Enhanced with prompts, resources, and comprehensive security assessment tools\n\nA comprehensive MCP server for scanning and analyzing MESH by Viscount systems for default credential vulnerabilities. This tool is designed for security research and educational purposes only.\n\n## 🚨 Important Notice\n\n**This tool is for educational and security research purposes only.** Unauthorized access to systems is illegal. Always obtain proper authorization before scanning any systems.\n\n## Features\n\n### 🔍 Scanning Capabilities\n- **Single IP Scanning**: Scan individual IP addresses for MESH systems\n- **IP Range Scanning**: Scan entire IP ranges with configurable concurrency\n- **Default Credential Testing**: Test for the default credentials (freedom:viscount)\n- **System Discovery**: Identify MESH by Viscount systems on networks\n\n### 📊 Security Assessment\n- **Comprehensive Reports**: Generate detailed security assessment reports\n- **Vulnerability Summaries**: Track vulnerabilities across timeframes\n- **Compliance Reports**: Generate reports for NIST, ISO27001, SOC2, and PCI-DSS\n- **Risk Analysis**: Automatic risk level assessment (LOW, MEDIUM, HIGH, CRITICAL)\n\n### 📋 Data Export\n- **Multiple Formats**: Export results as JSON, CSV, or XML\n- **Filtered Export**: Export only vulnerable systems or specific scans\n- **Historical Data**: Maintain scan history and statistics\n\n### 🎯 Advanced Features\n- **System Information**: Extract building details, user lists, and event logs\n- **Entrance Control**: Demonstrate entrance unlocking (educational only)\n- **Real-time Monitoring**: Track scanning progress and results\n- **Rate Limiting**: Configurable rate limiting for responsible scanning\n\n## Installation\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Run the server\nnpm start\n```\n\n## MCP Configuration\n\nAdd to your MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mesh-scanner\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/mesh-scanner/build/index.js\"]\n    }\n  }\n}\n```\n\n## Usage\n\n### Basic Scanning\n\n#### Scan a Single IP\n```json\n{\n  \"tool\": \"scan_ip\",\n  \"arguments\": {\n    \"ipAddress\": \"192.168.1.100\"\n  }\n}\n```\n\n#### Scan an IP Range\n```json\n{\n  \"tool\": \"scan_ip_range\",\n  \"arguments\": {\n    \"startIp\": \"192.168.1.1\",\n    \"endIp\": \"192.168.1.254\",\n    \"concurrency\": 5,\n    \"timeout\": 5000\n  }\n}\n```\n\n### Security Assessment\n\n#### Generate Security Report\n```json\n{\n  \"prompt\": \"security_assessment\",\n  \"arguments\": {\n    \"format\": \"detailed\",\n    \"scan_id\": \"scan_123456789\"\n  }\n}\n```\n\n#### Vulnerability Summary\n```json\n{\n  \"prompt\": \"vulnerability_summary\",\n  \"arguments\": {\n    \"timeframe\": \"7d\"\n  }\n}\n```\n\n#### Compliance Report\n```json\n{\n  \"prompt\": \"compliance_report\",\n  \"arguments\": {\n    \"standard\": \"NIST\"\n  }\n}\n```\n\n#### Remediation Guide\n```json\n{\n  \"prompt\": \"remediation_guide\",\n  \"arguments\": {\n    \"system_ip\": \"192.168.1.100\",\n    \"severity\": \"high\"\n  }\n}\n```\n\n### Data Export\n\n#### Export All Results\n```json\n{\n  \"tool\": \"export_scan_results\",\n  \"arguments\": {\n    \"format\": \"json\"\n  }\n}\n```\n\n#### Export Vulnerable Systems Only\n```json\n{\n  \"tool\": \"export_scan_results\",\n  \"arguments\": {\n    \"format\": \"csv\",\n    \"includeVulnerableOnly\": true\n  }\n}\n```\n\n### System Information\n\n#### Get System Details\n```json\n{\n  \"tool\": \"get_system_info\",\n  \"arguments\": {\n    \"url\": \"http://192.168.1.100\"\n  }\n}\n```\n\n### Resources\n\nAccess real-time data through MCP resources:\n\n- `mesh://scan-results` - Latest scan results\n- `mesh://vulnerable-systems` - List of vulnerable systems\n- `mesh://scan-history` - Historical scan data\n- `mesh://vulnerability-stats` - Statistics and trends\n- `mesh://system-details` - Detailed system information\n- `mesh://security-assessments` - Generated assessments\n\n## Prompts\n\nThe server provides several prompts for comprehensive security analysis:\n\n### 1. Security Assessment\nGenerates detailed security reports with risk analysis and recommendations.\n\n**Arguments:**\n- `scan_id` (optional): Specific scan to analyze\n- `format`: \"detailed\", \"summary\", or \"executive\"\n\n### 2. Vulnerability Summary\nCreates summaries of vulnerabilities found across different timeframes.\n\n**Arguments:**\n- `timeframe`: \"24h\", \"7d\", \"30d\", or \"all\"\n\n### 3. Remediation Guide\nProvides specific remediation steps for vulnerable systems.\n\n**Arguments:**\n- `system_ip`: IP address of vulnerable system\n- `severity`: \"low\", \"medium\", \"high\", or \"critical\"\n\n### 4. Compliance Report\nGenerates compliance reports for various security standards.\n\n**Arguments:**\n- `standard`: \"NIST\", \"ISO27001\", \"SOC2\", or \"PCI-DSS\"\n\n## Tools\n\n### scan_ip\nScan a single IP address for MESH system and test default credentials.\n\n**Parameters:**\n- `ipAddress` (string): IP address to scan\n- `timeout` (number, optional): Timeout in milliseconds\n- `config` (object, optional): Additional configuration\n\n### scan_ip_range\nScan a range of IP addresses for MESH systems.\n\n**Parameters:**\n- `startIp` (string): Starting IP address\n- `endIp` (string): Ending IP address\n- `concurrency` (number, optional): Concurrent scans (max: 20)\n- `timeout` (number, optional): Timeout in milliseconds\n- `config` (object, optional): Additional configuration\n\n### test_default_credentials\nTest if a MESH system is vulnerable to default credentials.\n\n**Parameters:**\n- `url` (string): URL of the MESH system\n- `config` (object, optional): Additional configuration\n\n### get_system_info\nGet detailed information about a vulnerable MESH system.\n\n**Parameters:**\n- `url` (string): URL of the vulnerable system\n- `config` (object, optional): Additional configuration\n\n### unlock_entrance\nUnlock an entrance (educational purposes only).\n\n**Parameters:**\n- `url` (string): URL of the vulnerable system\n- `entranceId` (string): ID of the entrance to unlock\n- `config` (object, optional): Additional configuration\n\n### export_scan_results\nExport scan results to various formats.\n\n**Parameters:**\n- `format` (string): \"json\", \"csv\", or \"xml\"\n- `includeVulnerableOnly` (boolean, optional): Export only vulnerable systems\n- `scanId` (string, optional): Specific scan ID to export\n\n## Configuration\n\n### Scan Configuration\n```typescript\ninterface ScanConfig {\n  timeout: number;        // Request timeout in ms (default: 5000)\n  concurrency: number;    // Concurrent scans (default: 5, max: 20)\n  rateLimit: number;      // Rate limit between requests (default: 100)\n  userAgent: string;      // Custom User-Agent string\n}\n```\n\n### Default Credentials\n- **Username**: freedom\n- **Password**: viscount\n\n## Security Considerations\n\n### Risk Levels\n- **CRITICAL**: >50% of systems vulnerable\n- **HIGH**: >20% of systems vulnerable\n- **MEDIUM**: >10% of systems vulnerable\n- **LOW**: ≤10% of systems vulnerable\n\n### Recommendations\n1. **Immediate**: Change default credentials on all vulnerable systems\n2. **Short-term**: Implement network segmentation and monitoring\n3. **Long-term**: Establish regular security assessments and training\n\n## Legal and Ethical Use\n\nThis tool is provided for:\n- Security research and education\n- Authorized penetration testing\n- Vulnerability assessment with proper authorization\n- Security awareness training\n\n**Users are responsible for ensuring they have proper authorization before scanning any systems.**\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n## License\n\nThis project is provided for educational purposes. Use responsibly and in accordance with applicable laws and regulations.\n\n## Support\n\nFor issues, questions, or contributions, please open an issue on the GitHub repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "dynamicendpoints",
        "text notes",
        "notetaking knowledge",
        "notes dedicated"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Ejb503--systemprompt-mcp-notion": {
      "owner": "Ejb503",
      "name": "systemprompt-mcp-notion",
      "url": "https://github.com/Ejb503/systemprompt-mcp-notion",
      "imageUrl": "/freedevtools/mcp/pfp/Ejb503.webp",
      "description": "Integrates Notion for interactions with pages, databases, and comments, facilitating the management of Notion content within AI workflows.",
      "stars": 24,
      "forks": 11,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-09-13T14:48:03Z",
      "readme_content": "# systemprompt-mcp-notion\n\n[![npm version](https://img.shields.io/npm/v/systemprompt-mcp-notion.svg)](https://www.npmjs.com/package/systemprompt-mcp-notion)\n[![Coverage Status](https://coveralls.io/repos/github/Ejb503/systemprompt-mcp-notion/badge.svg?branch=main)](https://coveralls.io/github/Ejb503/systemprompt-mcp-notion?branch=main)\n[![Twitter Follow](https://img.shields.io/twitter/follow/tyingshoelaces_?style=social)](https://twitter.com/tyingshoelaces_)\n[![Discord](https://img.shields.io/discord/1255160891062620252?color=7289da&label=discord)](https://discord.com/invite/wkAbSuPWpr)\n[![smithery badge](https://smithery.ai/badge/systemprompt-mcp-notion)](https://smithery.ai/server/systemprompt-mcp-notion)\n\n[Website](https://systemprompt.io) | [Documentation](https://systemprompt.io/documentation)\n\n# SystemPrompt MCP Notion Server\n\nA high-performance Model Context Protocol (MCP) server that seamlessly integrates Notion into your AI workflows. This server enables AI agents to interact with Notion pages and databases through a standardized protocol. This server supports and requires MCP Sampling, which is required to the MCP to create and update Notion pages.\n\nA compatible MCP client is available [here](https://github.com/Ejb503/multimodal-mcp-client).\n\n<a href=\"https://glama.ai/mcp/servers/xe6grtrr0k\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/xe6grtrr0k/badge\" alt=\"SystemPrompt Notion Server MCP server\" /></a>\n\n## Server Capabilities\n\n```typescript\nconst serverCapabilities: { capabilities: ServerCapabilities } = {\n  capabilities: {\n    resources: {\n      listChanged: true,\n    },\n    tools: {},\n    prompts: {\n      listChanged: true,\n    },\n    sampling: {},\n  },\n};\n```\n\n## Key Features\n\n- **📝 Comprehensive Content Management**\n\n  - Create and update pages with rich text formatting\n  - Search across your Notion workspace\n\n- **🛠 Developer-Friendly**\n  - Extensive test coverage with Jest\n  - TypeScript support\n  - Comprehensive error handling\n  - Detailed logging and debugging tools\n\n## Prerequisites\n\nBefore using this server, you'll need:\n\n1. **Systemprompt API Key** (Free)\n\n   - Sign up at [systemprompt.io/console](https://systemprompt.io/console)\n   - Create a new API key in your dashboard\n\n2. **Notion Account and Workspace**\n\n   - Active Notion account\n   - Workspace with content you want to access\n\n3. **Notion Integration**\n\n   - Create at [notion.so/my-integrations](https://www.notion.so/my-integrations)\n   - Required capabilities:\n     - Read/Update/Insert content\n     - Database management\n     - Search functionality\n\n4. **MCP-Compatible Client**\n   - [Systemprompt MCP Client](https://github.com/Ejb503/multimodal-mcp-client)\n   - Any other MCP-compatible client\n\n## Quick Start\n\n1. **Installation**\n\n   ### Installing via Smithery\n\n   To install systemprompt-mcp-notion for Claude Desktop automatically via [Smithery](https://smithery.ai/server/systemprompt-mcp-notion):\n\n   ```bash\n   npx -y @smithery/cli install systemprompt-mcp-notion --client claude\n   ```\n\n   ```bash\n   npm install systemprompt-mcp-notion\n   ```\n\n2. **Configuration**\n   Create a `.env` file:\n\n   ```env\n   SYSTEMPROMPT_API_KEY=your_systemprompt_api_key\n   NOTION_API_KEY=your_notion_integration_token\n   ```\n\n3. **MCP Configuration**\n   Add the following to your MCP configuration JSON:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"notion\": {\n         \"command\": \"npx\",\n         \"args\": [\"systemprompt-mcp-notion\"],\n         \"env\": {\n           \"SYSTEMPROMPT_API_KEY\": \"your_systemprompt_api_key\",\n           \"NOTION_API_KEY\": \"your_notion_integration_token\"\n         }\n       }\n     }\n   }\n   ```\n\n   Alternatively, if you've installed the package locally:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"notion\": {\n         \"command\": \"node\",\n         \"args\": [\"./node_modules/systemprompt-mcp-notion/build/index.js\"],\n         \"env\": {\n           \"SYSTEMPROMPT_API_KEY\": \"your_systemprompt_api_key\",\n           \"NOTION_API_KEY\": \"your_notion_integration_token\"\n         }\n       }\n     }\n   }\n   ```\n\n## Development\n\n### Setup\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/systemprompt-io/systemprompt-mcp-notion.git\n   cd systemprompt-mcp-notion\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Set up environment:\n   ```bash\n   cp .env.example .env\n   # Edit .env with your API keys\n   ```\n\n### Testing\n\nWe maintain high test coverage using Jest:\n\n```bash\n# Run all tests\nnpm test\n\n# Watch mode for development\nnpm run test:watch\n\n# Generate coverage report\nnpm run test:coverage\n\n# Test Notion API connection\nnpm run test:notion\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "workflows",
        "notion",
        "notetaking",
        "ai workflows",
        "notion content",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Ejb503--systemprompt-mcp-reddit": {
      "owner": "Ejb503",
      "name": "systemprompt-mcp-reddit",
      "url": "https://github.com/Ejb503/systemprompt-mcp-reddit",
      "imageUrl": "/freedevtools/mcp/pfp/Ejb503.webp",
      "description": "Fetch posts and content from Reddit, manage subreddits, and customize parameters for enhanced social media interaction.",
      "stars": 8,
      "forks": 5,
      "license": "Other",
      "language": "JavaScript",
      "updated_at": "2025-09-10T22:39:42Z",
      "readme_content": "# systemprompt-mcp-reddit\n\n[![npm version](https://img.shields.io/npm/v/systemprompt-mcp-reddit.svg)](https://www.npmjs.com/package/systemprompt-mcp-reddit)\n[![smithery badge](https://smithery.ai/badge/systemprompt-mcp-reddit)](https://smithery.ai/server/systemprompt-mcp-reddit)\n[![License: Apache-2.0](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Twitter Follow](https://img.shields.io/twitter/follow/tyingshoelaces_?style=social)](https://twitter.com/tyingshoelaces_)\n[![Discord](https://img.shields.io/discord/1255160891062620252?color=7289da&label=discord)](https://discord.com/invite/wkAbSuPWpr)\n\n[Website](https://systemprompt.io) | [Documentation](https://systemprompt.io/documentation) | [Blog](https://tyingshoelaces.com) | [Get API Key](https://systemprompt.io/console)\n\nA specialized Model Context Protocol (MCP) server that enables AI agents to interact with Reddit, including reading posts, creating content, and managing subreddit configurations. The server is designed to work specifically with [systemprompt.io](https://systemprompt.io) client that support sampling and notification features, and may not function properly with other MCP clients.\n\nAn API KEY is required to use this server. This is currently free, although this may change in the future. You can get one [here](https://systemprompt.io/console).\n\nThis server uses Sampling and Notification functionality from the [@modelcontextprotocol/sdk](https://github.com/modelcontextprotocol/sdk).\n\n## Features\n\n#### Core Functionality\n\n- **Subreddit Configuration**: Configure and manage multiple subreddits for the AI agent\n- **Content Retrieval**: Fetch hot, new, or controversial posts from configured subreddits\n- **Content Creation**: Generate AI-powered posts and replies with customizable parameters\n- **Writing Style Control**: Configure tone, vocabulary, and content guidelines for the AI\n\n#### Advanced Features\n\n- **Rule Compliance**: Automatic adherence to subreddit rules and requirements\n- **Content Guidelines**: Customizable instructions for content generation\n- **Flexible Post Types**: Support for both text and link posts\n- **Smart Replies**: Context-aware response generation\n\n#### Integration Features\n\n- **MCP Protocol Integration**: Full implementation of Model Context Protocol\n- **Type-Safe Implementation**: Complete TypeScript support\n- **Real-Time Processing**: Supports streaming responses\n- **Advanced Error Handling**: Comprehensive error management\n\n## System Architecture\n\nThis project follows a modular architecture designed to be adaptable for other MCP server implementations:\n\n### Core Components\n\n- **MCP Protocol Layer**: Implements the complete Model Context Protocol\n- **Service Layer**: Abstracts Reddit API interactions\n- **Handler Layer**: Routes and processes MCP requests\n- **Tool Layer**: Defines operations AI agents can perform\n- **Utility Layer**: Provides helpers for validation and data transformation\n\n### Directory Structure\n\n- `/src/config`: Server configuration and capabilities\n- `/src/constants`: Tool schemas, sampling templates, and system constants\n- `/src/handlers`: Request handlers and tool implementations\n- `/src/services`: API integration services\n- `/src/types`: TypeScript type definitions\n- `/src/utils`: Utility functions and helpers\n\nFor detailed documentation of the architecture and implementation patterns, see:\n- [ARCHITECTURE.md](./ARCHITECTURE.md): Complete system overview\n- [TEMPLATE_GUIDE.md](./TEMPLATE_GUIDE.md): Guide for creating new MCP servers\n\n## Using as a Template\n\nThis codebase is designed to serve as a template for creating other MCP servers. The modular architecture makes it straightforward to replace the Reddit integration with other APIs:\n\n1. Replace the service layer with your API implementation\n2. Define new tools appropriate for your domain\n3. Update type definitions and schemas\n4. Configure server capabilities\n\nSee [TEMPLATE_GUIDE.md](./TEMPLATE_GUIDE.md) for detailed step-by-step instructions.\n\n## 🎥 Demo & Showcase\n\nWatch our video demonstration to see Systemprompt MCP Reddit in action:\n\n[▶️ Watch Demo Video](https://www.youtube.com/watch?v=NyXkfVAv7OE)\n\n## Related Links\n\n- [Multimodal MCP Client](https://github.com/Ejb503/multimodal-mcp-client) - Voice-powered MCP client\n- [systemprompt.io Documentation](https://systemprompt.io/docs)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ejb503",
        "social",
        "reddit",
        "reddit manage",
        "social media",
        "manage subreddits"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "HeatherFlux--github-issue-mcp-server": {
      "owner": "HeatherFlux",
      "name": "github-issue-mcp-server",
      "url": "https://github.com/HeatherFlux/github-issue-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/HeatherFlux.webp",
      "description": "Create and manage text notes with URIs, metadata, and the ability to generate summaries of stored notes.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-19T13:55:42Z",
      "readme_content": "# github-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"github-server\": {\n      \"command\": \"/path/to/github-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "metadata",
        "stored notes",
        "text notes",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "IraBond--obsidian-mcp-tools": {
      "owner": "IraBond",
      "name": "obsidian-mcp-tools",
      "url": "https://github.com/IraBond/obsidian-mcp-tools",
      "imageUrl": "/freedevtools/mcp/pfp/IraBond.webp",
      "description": "Facilitates secure access and interaction with Obsidian vaults for AI assistants, enabling semantic searches, template execution, and file management through a local server bridge while ensuring data privacy.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-25T05:20:21Z",
      "readme_content": "# MCP Tools for Obsidian\n\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/jacksteamdev/obsidian-mcp-tools)](https://github.com/jacksteamdev/obsidian-mcp-tools/releases/latest)\n[![Build status](https://img.shields.io/github/actions/workflow/status/jacksteamdev/obsidian-mcp-tools/release.yml)](https://github.com/jacksteamdev/obsidian-mcp-tools/actions)\n[![License](https://img.shields.io/github/license/jacksteamdev/obsidian-mcp-tools)](LICENSE)\n\n[Features](#features) | [Installation](#installation) | [Configuration](#configuration) | [Troubleshooting](#troubleshooting) | [Security](#security) | [Development](#development) | [Support](#support)\n\nMCP Tools for Obsidian enables AI applications like Claude Desktop to securely access and work with your Obsidian vault through the Model Context Protocol (MCP). MCP is an open protocol that standardizes how AI applications can interact with external data sources and tools while maintaining security and user control. [^2]\n\nThis plugin consists of two parts:\n1. An Obsidian plugin that adds MCP capabilities to your vault\n2. A local MCP server that handles communication with AI applications\n\nWhen you install this plugin, it will help you set up both components. The MCP server acts as a secure bridge between your vault and AI applications like Claude Desktop. This means AI assistants can read your notes, execute templates, and perform semantic searches - but only when you allow it and only through the server's secure API. The server never gives AI applications direct access to your vault files. [^3]\n\n> **Privacy Note**: When using Claude Desktop with this plugin, your conversations with Claude are not used to train Anthropic's models by default. [^1]\n\n## Features\n\nWhen connected to an MCP client like Claude Desktop, this plugin enables:\n\n- **Vault Access**: Allows AI assistants to read and reference your notes while maintaining your vault's security [^4]\n- **Semantic Search**: AI assistants can search your vault based on meaning and context, not just keywords [^5]\n- **Template Integration**: Execute Obsidian templates through AI interactions, with dynamic parameters and content generation [^6]\n\nAll features require an MCP-compatible client like Claude Desktop, as this plugin provides the server component that enables these integrations. The plugin does not modify Obsidian's functionality directly - instead, it creates a secure bridge that allows AI applications to work with your vault in powerful ways.\n\n## Prerequisites\n\n### Required\n\n- [Obsidian](https://obsidian.md/) v1.7.7 or higher\n- [Claude Desktop](https://claude.ai/download) installed and configured\n- [Local REST API](https://github.com/coddingtonbear/obsidian-local-rest-api) plugin installed and configured with an API key\n\n### Recommended\n\n- [Templater](https://silentvoid13.github.io/Templater/) plugin for enhanced template functionality\n- [Smart Connections](https://smartconnections.app/) plugin for semantic search capabilities\n\n## Installation\n\n> [!Important]\n> This plugin requires a secure server component that runs locally on your computer. The server is distributed as a signed executable, with its complete source code available in `packages/mcp-server/`. For details about our security measures and code signing process, see the [Security](#security) section.\n\n1. Install the plugin from Obsidian's Community Plugins\n2. Enable the plugin in Obsidian settings\n3. Open the plugin settings\n4. Click \"Install Server\" to download and configure the MCP server\n\nClicking the install button will:\n\n- Download the appropriate MCP server binary for your platform\n- Configure Claude Desktop to use the server\n- Set up necessary permissions and paths\n\n### Installation Locations\n\n- **Server Binary**: {vault}/.obsidian/plugins/obsidian-mcp-tools/bin/\n- **Log Files**:\n  - macOS: ~/Library/Logs/obsidian-mcp-tools\n  - Windows: %APPDATA%\\obsidian-mcp-tools\\logs\n  - Linux: ~/.local/share/obsidian-mcp-tools/logs\n\n## Configuration\n\nAfter clicking the \"Install Server\" button in the plugin settings, the plugin will automatically:\n\n1. Download the appropriate MCP server binary\n2. Use your Local REST API plugin's API key\n3. Configure Claude Desktop to use the MCP server\n4. Set up appropriate paths and permissions\n\nWhile the configuration process is automated, it requires your explicit permission to install the server binary and modify the Claude Desktop configuration. No additional manual configuration is required beyond this initial setup step.\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check the plugin settings to verify:\n   - All required plugins are installed\n   - The server is properly installed\n   - Claude Desktop is configured\n2. Review the logs:\n   - Open plugin settings\n   - Click \"Open Logs\" under Resources\n   - Look for any error messages or warnings\n3. Common Issues:\n   - **Server won't start**: Ensure Claude Desktop is running\n   - **Connection errors**: Verify Local REST API plugin is configured\n   - **Permission errors**: Try reinstalling the server\n\n## Security\n\n### Binary Distribution\n\n- All releases are built using GitHub Actions with reproducible builds\n- Binaries are signed and attested using SLSA provenance\n- Release workflows are fully auditable in the repository\n\n### Runtime Security\n\n- The MCP server runs with minimal required permissions\n- All communication is encrypted\n- API keys are stored securely using platform-specific credential storage\n\n### Binary Verification\n\nThe MCP server binaries are published with [SLSA Provenance attestations](https://slsa.dev/provenance/v1), which provide cryptographic proof of where and how the binaries were built. This helps ensure the integrity and provenance of the binaries you download.\n\nTo verify a binary using the GitHub CLI:\n\n1. Install GitHub CLI:\n\n   ```bash\n   # macOS (Homebrew)\n   brew install gh\n\n   # Windows (Scoop)\n   scoop install gh\n\n   # Linux\n   sudo apt install gh  # Debian/Ubuntu\n   ```\n\n2. Verify the binary:\n   ```bash\n   gh attestation verify --owner jacksteamdev <binary path or URL>\n   ```\n\nThe verification will show:\n\n- The binary's SHA256 hash\n- Confirmation that it was built by this repository's GitHub Actions workflows\n- The specific workflow file and version tag that created it\n- Compliance with SLSA Level 3 build requirements\n\nThis verification ensures the binary hasn't been tampered with and was built directly from this repository's source code.\n\n### Reporting Security Issues\n\nPlease report security vulnerabilities via our [security policy](SECURITY.md).\nDo not report security vulnerabilities in public issues.\n\n## Development\n\nThis project uses a monorepo structure with feature-based architecture. For detailed project architecture documentation, see [.clinerules](.clinerules).\n\n### Using Cline\n\nSome code in this project was implemented using the AI coding agent [Cline](https://cline.bot). Cline uses `cline_docs/` and the `.clinerules` file to understand project architecture and patterns when implementing new features.\n\n### Workspace\n\nThis project uses a [Bun](https://bun.sh/) workspace structure:\n\n```\npackages/\n├── mcp-server/        # Server implementation\n├── obsidian-plugin/   # Obsidian plugin\n└── shared/           # Shared utilities and types\n```\n\n### Building\n\n1. Install dependencies:\n   ```bash\n   bun install\n   ```\n2. Build all packages:\n   ```bash\n   bun run build\n   ```\n3. For development:\n   ```bash\n   bun run dev\n   ```\n\n### Requirements\n\n- [bun](https://bun.sh/) v1.1.42 or higher\n- TypeScript 5.0+\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run tests:\n   ```bash\n   bun test\n   ```\n5. Submit a pull request\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md) for detailed guidelines.\n\n## Support\n\n- [Open an issue](https://github.com/jacksteamdev/obsidian-mcp-tools/issues) for bug reports and feature requests\n- [Start a discussion](https://github.com/jacksteamdev/obsidian-mcp-tools/discussions) for questions and general help\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md) for a list of changes in each release.\n\n## License\n\n[MIT License](LICENSE)\n\n## Footnotes\n\n[^1]: For information about Claude data privacy and security, see [Claude AI's data usage policy](https://support.anthropic.com/en/articles/8325621-i-would-like-to-input-sensitive-data-into-free-claude-ai-or-claude-pro-who-can-view-my-conversations)\n[^2]: For more information about the Model Context Protocol, see [MCP Introduction](https://modelcontextprotocol.io/introduction)\n[^3]: For a list of available MCP Clients, see [MCP Example Clients](https://modelcontextprotocol.io/clients)\n[^4]: Requires Obsidian plugin Local REST API\n[^5]: Requires Obsidian plugin Smart Connections\n[^6]: Requires Obsidian plugin Templater\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "tools",
        "ai",
        "obsidian mcp",
        "obsidian vaults",
        "irabond obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Jordanm37--mcp-obsidian": {
      "owner": "Jordanm37",
      "name": "mcp-obsidian",
      "url": "https://github.com/Jordanm37/mcp-obsidian",
      "imageUrl": "/freedevtools/mcp/pfp/Jordanm37.webp",
      "description": "Interact with an Obsidian vault to retrieve, search, and modify notes. Utilize a Local REST API to enhance productivity and organization through effective note management.",
      "stars": 3,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T22:54:32Z",
      "readme_content": "# MCP server for Obsidian\n\nMCP server to interact with Obsidian via the Local REST API community plugin.\n\n<a href=\"https://glama.ai/mcp/servers/3wko1bhuek\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/3wko1bhuek/badge\" alt=\"server for Obsidian MCP server\" /></a>\n\n## Components\n\n### Tools\n\nThe server implements multiple tools to interact with Obsidian:\n\n- list_files_in_vault: Lists all files and directories in the root directory of your Obsidian vault\n- list_files_in_dir: Lists all files and directories in a specific Obsidian directory\n- get_file_contents: Return the content of a single file in your vault.\n- search: Search for documents matching a specified text query across all files in the vault\n- patch_content: Insert content into an existing note relative to a heading, block reference, or frontmatter field.\n- append_content: Append content to a new or existing file in the vault.\n\n### Example prompts\n\nIts good to first instruct Claude to use Obsidian. Then it will always call the tool.\n\nThe use prompts like this:\n- Get the contents of the last architecture call note and summarize them\n- Search for all files where Azure CosmosDb is mentioned and quickly explain to me the context in which it is mentioned\n- Summarize the last meeting notes and put them into a new note 'summary meeting.md'. Add an introduction so that I can send it via email.\n\n## Configuration\n\n### Obsidian REST API Key\n\nThere are two ways to configure the environment with the Obsidian REST API Key. \n\n1. Add to server config (preferred)\n\n```json\n{\n  \"mcp-obsidian\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"mcp-obsidian\"\n    ],\n    \"env\": {\n      \"OBSIDIAN_API_KEY\":\"<your_api_key_here>\"\n    }\n  }\n```\n\n2. Create a `.env` file in the working directory with the following required variable:\n\n```\nOBSIDIAN_API_KEY=your_api_key_here\n```\n\nNote: You can find the key in the Obsidian plugin config.\n\n## Quickstart\n\n### Install\n\n#### Obsidian REST API\n\nYou need the Obsidian REST API community plugin running: https://github.com/coddingtonbear/obsidian-local-rest-api\n\nInstall and enable it in the settings and copy the api key.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"mcp-obsidian\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<dir_to>/mcp-obsidian\",\n        \"run\",\n        \"mcp-obsidian\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  \n```json\n{\n  \"mcpServers\": {\n    \"mcp-obsidian\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-obsidian\"\n      ],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\" : \"<YOUR_OBSIDIAN_API_KEY>\"\n      }\n    }\n  }\n}\n```\n</details>\n\n## Development\n\n### Building\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/mcp-obsidian run mcp-obsidian\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nYou can also watch the server logs with this command:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-mcp-obsidian.log\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "obsidian",
        "note management",
        "notes utilize",
        "obsidian vault"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "LeonMelamud--mysql-mcp": {
      "owner": "LeonMelamud",
      "name": "mysql-mcp",
      "url": "https://github.com/LeonMelamud/mysql-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/LeonMelamud.webp",
      "description": "Interact with MySQL databases by executing SQL queries, managing notes, and exploring database structures. Create, list, and search database content seamlessly within AI workflows.",
      "stars": 6,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-27T11:24:58Z",
      "readme_content": "# MySQL MCP Server\n\nA powerful MCP server that provides direct access to MySQL databases. This server enables AI agents to interact with MySQL databases, execute SQL queries, and manage database content through a simple interface.\n\n## Features\n\n### Resources\n- Access notes stored in the database via `note:///{id}` URIs\n- Each note has a title and content\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes in the database\n  - Takes title and content as required parameters\n  - Stores note in the MySQL database\n- `list_tables` - List all tables in the connected database\n- `count_tables` - Get the total number of tables in the database\n- `search_tables` - Search for tables using LIKE pattern\n- `describe_table` - Get the structure of a specific table\n- `execute_sql` - Execute custom SQL queries\n\n## Prerequisites\n\n- Node.js 18 or higher\n- MySQL server installed and running\n- A database with appropriate permissions\n\n## Setup\n\n1. Clone this repository:\n   ```bash\n   git clone git@github.com:LeonMelamud/mysql-mcp.git\n   cd mysql-mcp\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Create a `.env` file in the root directory with your MySQL connection details:\n   ```\n   MYSQL_HOST=localhost\n   MYSQL_USER=your_username\n   MYSQL_PASSWORD=your_password\n   MYSQL_DATABASE=your_database\n   ```\n\n4. Build the server:\n   ```bash\n   npm run build\n   ```\n\n## Installation\n\n### For Claude Desktop\n\nAdd the server config to your Claude Desktop configuration file:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mysql\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mysql-server/build/index.js\"],\n      \"env\": {\n        \"MYSQL_HOST\": \"localhost\",\n        \"MYSQL_USER\": \"your_username\",\n        \"MYSQL_PASSWORD\": \"your_password\",\n        \"MYSQL_DATABASE\": \"your_database\"\n      }\n    }\n  }\n}\n```\n\n### For Cline\n\nAdd the server config to your Cline MCP settings file:\n\nOn MacOS: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\nOn Windows: `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mysql\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mysql-server/build/index.js\"],\n      \"env\": {\n        \"MYSQL_HOST\": \"localhost\",\n        \"MYSQL_USER\": \"your_username\",\n        \"MYSQL_PASSWORD\": \"your_password\",\n        \"MYSQL_DATABASE\": \"your_database\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## Usage Examples\n\nOnce installed, you can use the MySQL MCP server in your conversations with Claude:\n\n### List all tables in the database\n```\nPlease list all the tables in my MySQL database.\n```\n\n### Execute a SQL query\n```\nRun this SQL query: SELECT * FROM users LIMIT 5\n```\n\n### Create a note\n```\nCreate a note titled \"Meeting Notes\" with the content \"Discussed project timeline and assigned tasks.\"\n```\n\n## Development\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nUse the MCP Inspector to debug the server:\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mysql",
        "database",
        "databases",
        "mysql mcp",
        "mysql databases",
        "interact mysql"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "LeslieLeung--mcp-server-memos": {
      "owner": "LeslieLeung",
      "name": "mcp-server-memos",
      "url": "https://github.com/LeslieLeung/mcp-server-memos",
      "imageUrl": "/freedevtools/mcp/pfp/LeslieLeung.webp",
      "description": "Search and create memos using a simple API for memo management, enhancing note-taking and organization in applications.",
      "stars": 18,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-23T08:24:51Z",
      "readme_content": "# memos-mcp-server\n[![smithery badge](https://smithery.ai/badge/@LeslieLeung/mcp-server-memos)](https://smithery.ai/server/@LeslieLeung/mcp-server-memos)\n\nA [MCP(Model Context Protocol)](https://modelcontextprotocol.io) server for [Memos](https://github.com/usememos/memos).\n\n## Tools\n\n- `search_memos`: Search memos with keyword.\n- `create_memo`: Create a new memo.\n\n## Usage\n\n### Installing via Smithery\n\nTo install mcp-server-memos for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@LeslieLeung/mcp-server-memos):\n\n```bash\nnpx -y @smithery/cli install @LeslieLeung/mcp-server-memos --client claude\n```\n\n```\n{\n    \"mcpServers\": [\n        \"memos\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"memos-mcp-server\"\n            ],\n            \"env\": {\n                \"MEMOS_URL\": \"https://memos.example.com\",\n                \"MEMOS_API_KEY\": \"your_api_key\",\n                \"DEFAULT_TAG\": \"#mcp\"\n            }\n        }\n    ]\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "memos",
        "memo",
        "notetaking",
        "memo management",
        "memos using",
        "server memos"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Mistizz--mcp-JapaneseTextAnalyzer": {
      "owner": "Mistizz",
      "name": "mcp-JapaneseTextAnalyzer",
      "url": "https://github.com/Mistizz/mcp-JapaneseTextAnalyzer",
      "imageUrl": "/freedevtools/mcp/pfp/Mistizz.webp",
      "description": "Analyzes Japanese and English texts by counting characters and words and evaluating linguistic features such as average sentence length and lexical diversity. Supports input via file paths or direct text input, accommodating both absolute and relative paths.",
      "stars": 2,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-25T18:29:31Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/mistizz-mcp-japanesetextanalyzer-badge.png)](https://mseep.ai/app/mistizz-mcp-japanesetextanalyzer)\n\n# Japanese Text Analyzer MCP Server\n日本語テキストの形態素解析を行えるMCPサーバーです。文章の特徴を言語学的な観点から測定・評価し、文章生成のフィードバックに役立ちます。\n\n[![smithery badge](https://smithery.ai/badge/@Mistizz/mcp-JapaneseTextAnalyzer)](https://smithery.ai/server/@Mistizz/mcp-JapaneseTextAnalyzer)\n<a href=\"https://glama.ai/mcp/servers/@Mistizz/mcp-JapaneseTextAnalyzer\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Mistizz/mcp-JapaneseTextAnalyzer/badge\" alt=\"Japanese Text Analyzer MCP server\" />\n</a>\n\n## 機能\n\n- 日本語テキストの文字数（スペースや改行を除いた実質的な文字数）をカウント\n- 日本語テキストの単語数をカウント\n- 日本語テキストの詳細な言語的特徴の分析（平均文長、品詞の割合、語彙の多様性など）\n- ファイルパスまたは直接テキスト入力の両方に対応\n- 柔軟なファイルパス解決（絶対パス・相対パス・ファイル名のみでも検索可能）\n\n## Tools\n\n現在、以下のツールが実装されています：\n\n### count_chars\n\nファイルの文字数を計測します。絶対パスを指定してください（Windows形式 C:\\Users\\...、またはWSL/Linux形式 /c/Users/... のどちらも可）。スペースや改行を除いた実質的な文字数をカウントします。\n\n**入力:**\n- `filePath` (string): 文字数をカウントするファイルのパス（Windows形式かWSL/Linux形式の絶対パスを推奨）\n\n**出力:**\n- ファイルの文字数（スペースや改行を除外した実質的な文字数）\n\n### count_words\n\nファイルの単語数を計測します。絶対パスを指定してください（Windows形式 C:\\Users\\...、またはWSL/Linux形式 /c/Users/... のどちらも可）。英語ではスペースで区切られた単語をカウントし、日本語では形態素解析を使用します。\n\n**入力:**\n- `filePath` (string): 単語数をカウントするファイルのパス（Windows形式かWSL/Linux形式の絶対パスを推奨）\n- `language` (string, オプション, デフォルト: \"en\"): ファイルの言語 (en: 英語, ja: 日本語)\n\n**出力:**\n- ファイルの単語数\n- 日本語モードの場合は、形態素解析の詳細結果も表示\n\n### count_clipboard_chars\n\nテキストの文字数を計測します。スペースや改行を除いた実質的な文字数をカウントします。\n\n**入力:**\n- `text` (string): 文字数をカウントするテキスト\n\n**出力:**\n- テキストの文字数（スペースや改行を除外した実質的な文字数）\n\n### count_clipboard_words\n\nテキストの単語数を計測します。英語ではスペースで区切られた単語をカウントし、日本語では形態素解析を使用します。\n\n**入力:**\n- `text` (string): 単語数をカウントするテキスト\n- `language` (string, オプション, デフォルト: \"en\"): テキストの言語 (en: 英語, ja: 日本語)\n\n**出力:**\n- テキストの単語数\n- 日本語モードの場合は、形態素解析の詳細結果も表示\n\n### analyze_text\n\nテキストの詳細な形態素解析と言語的特徴の分析を行います。文の複雑さ、品詞の割合、語彙の多様性などを解析します。\n\n**入力:**\n- `text` (string): 分析するテキスト\n\n**出力:**\n- テキストの基本情報（総文字数、文の数、総形態素数）\n- 詳細分析結果（平均文長、品詞の割合、文字種の割合、語彙の多様性など）\n\n### analyze_file\n\nファイルの詳細な形態素解析と言語的特徴の分析を行います。文の複雑さ、品詞の割合、語彙の多様性などを解析します。\n\n**入力:**\n- `filePath` (string): 分析するファイルのパス（Windows形式かWSL/Linux形式の絶対パスを推奨）\n\n**出力:**\n- ファイルの基本情報（総文字数、文の数、総形態素数）\n- 詳細分析結果（平均文長、品詞の割合、文字種の割合、語彙の多様性など）\n\n## 使用方法\n\n### Installing via Smithery\n\nTo install Japanese Text Analyzer for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Mistizz/mcp-JapaneseTextAnalyzer):\n\n```bash\nnpx -y @smithery/cli install @Mistizz/mcp-JapaneseTextAnalyzer --client claude\n```\n\n### npxでの実行\n\nこのパッケージはnpxでGitHubリポジトリから直接実行できます：\n\n```bash\nnpx -y github:Mistizz/mcp-JapaneseTextAnalyzer\n```\n\n### Claude for Desktopでの使用\n\nClaude for Desktopの設定ファイルに以下を追加してください:\n\n**Windows:**\n`%AppData%\\Claude\\claude_desktop_config.json`\n\n**macOS:**\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"JapaneseTextAnalyzer\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"github:Mistizz/mcp-JapaneseTextAnalyzer\"\n      ]\n    }\n  }\n}\n```\n\n### Cursorでの使用\n\nCursorでも同様の設定を`.cursor`フォルダ内の`mcp.json`ファイルに追加します。\n\n**Windows:**\n`%USERPROFILE%\\.cursor\\mcp.json`\n\n**macOS/Linux:**\n`~/.cursor/mcp.json`\n\n一般的な設定(殆どの環境で動作):\n```json\n{\n  \"mcpServers\": {\n    \"JapaneseTextAnalyzer\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"github:Mistizz/mcp-JapaneseTextAnalyzer\"\n      ]\n    }\n  }\n}\n```\n\nWindows環境において、上記で動作しなかった場合、下記を試してみてください：\n```json\n{\n  \"mcpServers\": {\n    \"JapaneseTextAnalyzer\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"github:Mistizz/mcp-JapaneseTextAnalyzer\"\n      ]\n    }\n  }\n}\n```\n\n## 使用例\n\n### 直接テキストの文字数を数える\n```\nこのテキストの文字数を数えてください。\n```\n\n### ファイルの単語数を日本語モードで数える\n```\nC:\\path\\to\\your\\file.txt の単語数を日本語モードで数えてください。\n```\n\n### WSL/Linux形式のパスで単語数を数える\n```\n/c/Users/username/Documents/file.txt の単語数を日本語モードで数えてください。\n```\n\n### ファイル名だけで単語数を数える\n```\nREADME.md の単語数を英語モードで数えてください。\n```\n\n### テキストを貼り付けて日本語の単語数を数える\n```\n次のテキストの日本語の単語数を数えてください：\n\n吾輩は猫である。名前はまだ無い。どこで生れたかとんと見当がつかぬ。何でも薄暗いじめじめした所でニャーニャー泣いていた事だけは記憶している。\n```\n\n### テキストの詳細な言語的特徴を分析する\n```\n次のテキストを詳細に分析してください：\n\n私は昨日、新しい本を買いました。とても面白そうな小説で、友人からの評判も良かったです。今週末にゆっくり読む予定です。\n```\n\n### ファイルの詳細な言語的特徴を分析する\n```\nC:\\path\\to\\your\\file.txt を詳細に分析してください。\n```\n\n## ファイルパス解決機能\n\nこのツールは、ファイルパスが指定された場合に柔軟にファイルを探索します：\n\n1. 絶対パスが指定された場合はそのまま使用\n   - Windows形式の絶対パス（例: `C:\\Users\\username\\Documents\\file.txt`）\n   - WSL/Linux形式の絶対パス（例: `/c/Users/username/Documents/file.txt`）のどちらも自動的に検出・変換\n2. カレントディレクトリ（作業ディレクトリ）を基準に相対パスを解決\n3. ホームディレクトリ（`%USERPROFILE%`や`$HOME`）を基準に検索\n4. デスクトップディレクトリを基準に検索\n5. ドキュメントディレクトリを基準に検索\n\nこれにより、単に「README.md」のようなファイル名だけを指定しても、いくつかの一般的なディレクトリで自動的に検索し、ファイルが見つかった場合はそれを使用します。また、WSL環境やGit Bashなどから取得したパス（`/c/Users/...`形式）も、Windows環境でそのまま使用できます。\n\n## 内部動作について\n\nこのツールは、日本語の単語数カウントに「kuromoji.js」という形態素解析ライブラリを使用しています。形態素解析は自然言語処理の基本的な処理で、文章を意味を持つ最小単位（形態素）に分割します。\n\n形態素解析の処理は初期化に時間がかかることがあります。特に、辞書データを読み込む必要があるため、初回実行時に少々時間がかかる場合があります。サーバー起動時に形態素解析器の初期化を行うことで、ツール実行時の遅延を最小限に抑えています。\n\n### 言語的特徴の分析について\n\n「analyze_text」と「analyze_file」ツールは、形態素解析の結果に基づいて、テキストの様々な言語的特徴を計算します。これらには以下のような指標が含まれます：\n\n- **平均文長**: 一文あたりの平均文字数。この値が大きいほど、読みにくい文章である可能性があります。\n- **文あたりの形態素数**: 一文あたりの平均形態素数。文の密度や構文の複雑さを表します。\n- **品詞の割合**: 名詞・動詞・形容詞などの品詞がテキスト中でどのような割合で使われているかを示します。\n- **助詞の割合**: 特定の助詞がどのような頻度で使われているかを示し、文の構造や流れを分析します。\n- **文字種の割合**: ひらがな・カタカナ・漢字・英数字の構成比率を示します。\n- **語彙の多様性**: 異なった単語数と総単語数の比率（タイプ/トークン比）を示し、語彙の豊かさを計測します。\n- **カタカナ語の割合**: カタカナ語の使用頻度を示し、外来語や専門用語の多さ、文体のカジュアルさを反映します。\n- **敬語の頻度**: 敬語表現の使用頻度を示し、文章の丁寧さやフォーマル度を測定します。\n- **句読点の平均数**: 文あたりの句読点の平均数を示し、文の区切りや読みやすさに関する指標を提供します。\n\nこれらの指標を組み合わせることで、テキストの特性を多角的に分析し、文体や読みやすさ、専門性などを評価することができます。\n\n## ライセンス\n\nこのMCPサーバーはMITライセンスの下で提供されています。これは、MITライセンスの条件に従って、ソフトウェアを自由に使用、変更、配布できることを意味します。詳細については、プロジェクトリポジトリのLICENSEファイルをご覧ください。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "japanesetextanalyzer",
        "texts",
        "analyzes",
        "mcp japanesetextanalyzer",
        "japanesetextanalyzer analyzes",
        "analyzes japanese"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Pratik-Kumar-Cse--script-generation-mcp": {
      "owner": "Pratik-Kumar-Cse",
      "name": "script-generation-mcp",
      "url": "https://github.com/Pratik-Kumar-Cse/script-generation-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Pratik-Kumar-Cse.webp",
      "description": "Store and manage notes with a simple system that allows adding new notes and generating summaries based on user-defined detail levels. Supports accessing notes through a custom URI scheme, enhancing the organization and retrieval of written content.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-26T13:53:43Z",
      "readme_content": "# script_generator_server MCP server\r\n\r\nA MCP server project\r\n\r\n## Components\r\n\r\n### Resources\r\n\r\nThe server implements a simple note storage system with:\r\n\r\n- Custom note:// URI scheme for accessing individual notes\r\n- Each note resource has a name, description and text/plain mimetype\r\n\r\n### Prompts\r\n\r\nThe server provides a single prompt:\r\n\r\n- summarize-notes: Creates summaries of all stored notes\r\n  - Optional \"style\" argument to control detail level (brief/detailed)\r\n  - Generates prompt combining all current notes with style preference\r\n\r\n### Tools\r\n\r\nThe server implements two tools:\r\n\r\n- add-note: Adds a new note to the server\r\n  - Takes \"name\" and \"content\" as required string arguments\r\n  - Updates server state and notifies clients of resource changes\r\n- script_generate: Generates a script based on provided topic and keywords\r\n  - Takes \"topic\" and \"keywords\" as required string arguments\r\n  - Uses multiple agents to generate and refine the script\r\n\r\n## Configuration\r\n\r\n[TODO: Add configuration details specific to your implementation]\r\n\r\n## Quickstart\r\n\r\n### Install\r\n\r\n#### Claude Desktop\r\n\r\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\r\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\r\n\r\n<details>\r\n  <summary>Development/Unpublished Servers Configuration</summary>\r\n  ```\r\n  \"mcpServers\": {\r\n    \"script_generator_server\": {\r\n      \"command\": \"uv\",\r\n      \"args\": [\r\n        \"--directory\",\r\n        \"C:\\Users\\INDIA\\Desktop\\mcp\\script_generator_server\",\r\n        \"run\",\r\n        \"script_generator_server\"\r\n      ]\r\n    }\r\n  }\r\n  ```\r\n</details>\r\n\r\n<details>\r\n  <summary>Published Servers Configuration</summary>\r\n  ```\r\n  \"mcpServers\": {\r\n    \"script_generator_server\": {\r\n      \"command\": \"uvx\",\r\n      \"args\": [\r\n        \"script_generator_server\"\r\n      ]\r\n    }\r\n  }\r\n  ```\r\n</details>\r\n\r\n## Development\r\n\r\n### Building and Publishing\r\n\r\nTo prepare the package for distribution:\r\n\r\n1. Sync dependencies and update lockfile:\r\n\r\n```bash\r\nuv sync\r\n```\r\n\r\n2. Build package distributions:\r\n\r\n```bash\r\nuv build\r\n```\r\n\r\nThis will create source and wheel distributions in the `dist/` directory.\r\n\r\n3. Publish to PyPI:\r\n\r\n```bash\r\nuv publish\r\n```\r\n\r\nNote: You'll need to set PyPI credentials via environment variables or command flags:\r\n\r\n- Token: `--token` or `UV_PUBLISH_TOKEN`\r\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\r\n\r\n### Debugging\r\n\r\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\r\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\r\n\r\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\r\n\r\n```bash\r\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\INDIA\\Desktop\\mcp\\script_generator_server run script-generator-server\r\n```\r\n\r\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "cse",
        "manage notes",
        "notes generating",
        "notes custom"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Promptly-Technologies-LLC--mcp-structured-thinking": {
      "owner": "Promptly-Technologies-LLC",
      "name": "mcp-structured-thinking",
      "url": "https://github.com/Promptly-Technologies-LLC/mcp-structured-thinking",
      "imageUrl": "/freedevtools/mcp/pfp/Promptly-Technologies-LLC.webp",
      "description": "Enables LLMs to construct mind maps programmatically and explore idea spaces while providing metacognitive feedback. Facilitates thought capturing, revising, and management to enhance reasoning and creativity through structured thought stages and memory management.",
      "stars": 23,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:24Z",
      "readme_content": "# Structured Thinking MCP Server\n\nA TypeScript Model Context Protocol (MCP) server based on [Arben Ademi](https://github.com/arben-adm)'s [Sequential Thinking](https://github.com/arben-adm/mcp-sequential-thinking) Python server. The motivation for this project is to allow LLMs to programmatically construct mind maps to explore an idea space, with enforced \"metacognitive\" self-reflection.\n\n## Setup\n\nSet the tool configuration in Claude Desktop, Cursor, or another MCP client as follows:\n\n```json\n{\n  \"structured-thinking\": {\n    \"command\": \"npx\",\n    \"args\": [\"-y\", \"structured-thinking\"]\n  }\n}\n```\n\n## Overview\n\n### Thought Quality Scores\n\nWhen an LLM captures a thought, it assigns that thought a quality score between 0 and 1. This score is used, in combination with the thought's stage, for providing \"metacognitive\" feedback to the LLM how to \"steer\" its thinking process.\n\n### Thought Stages\n\nEach thought is tagged with a stage (e.g., Problem Definition, Analysis, Ideation) to help manage the life-cycle of the LLM's thinking process. In the current implementation, these stages play a very important role. In effect, if the LLM spends too long in a given stage or is having low-quality thoughts in the current stage, the server will provide feedback to the LLM to \"steer\" its thinking toward other stages, or at least toward thinking strategies that are atypical of the current stage. (E.g., in deductive mode, the LLM will be encouraged to consider more creative thoughts.)\n\n### Thought Branching\n\nThe LLM can spawn “branches” off a particular thought to explore different lines of reasoning in parallel. Each branch is tracked separately, letting you manage scenarios where multiple solutions or ideas should coexist.\n\n### Memory Management\n\nThe server maintains a \"short-term\" memory buffer of the LLM's ten most recent thoughts, and a \"long-term\" memory of thoughts that can be retrieved based on their tags for summarization of the entire history of the LLM's thinking process on a given topic.\n\n## Limitations\n\n### Naive Metacognitive Monitoring\n\nCurrently, the quality metrics and metacognitive feedback are derived mechanically from naive stage-based multipliers applied to a single self-reported quality score.\n\nAs part of the future work, I plan to add more sophisticated metacognitive feedback, including semantic analysis of thought content, thought verification processes, and more intelligent monitoring for reasoning errors.\n\n### Lack of User Interface\n\nCurrently, the server stores all thoughts in memory, and does not persist them to a file or database. There is also no user interface for reviewing the thought space or visualizing the mind map.\n\nAs part of the future work, I plan to incorporate a simple visualization client so the user can watch the thought graph evolve.\n\n## MCP Tools\n\nThe server exposes the following MCP tools:\n\n### capture_thought\n\nCreate a thought in the thought history, with metadata about the thought's type, quality, content, and relationships to other thoughts.\n\nParameters:\n- `thought`: The content of the current thought\n- `thought_number`: Current position in the sequence\n- `total_thoughts`: Expected total number of thoughts\n- `next_thought_needed`: Whether another thought should follow\n- `stage`: Current thinking stage (e.g., \"Problem Definition\", \"Analysis\")\n- `is_revision` (optional): Whether this revises a previous thought\n- `revises_thought` (optional): Number of thought being revised\n- `branch_from_thought` (optional): Starting point for a new thought branch\n- `branch_id` (optional): Identifier for the current branch\n- `needs_more_thoughts` (optional): Whether additional thoughts are needed\n- `score` (optional): Quality score (0.0 to 1.0)\n- `tags` (optional): Categories or labels for the thought\n\n### revise_thought\n\nRevise a thought in the thought history, with metadata about the thought's type, quality, content, and relationships to other thoughts.\n\nParameters:\n- `thought_id`: The ID of the thought to revise\n- Parameters from `capture_thought`\n\n### retrieve_relevant_thoughts\n\nRetrieve thoughts from long-term storage that share tags with the specified thought.\n\nParameters:\n- `thought_id`: The ID of the thought to retrieve relevant thoughts for\n\n### get_thinking_summary\n\nGenerate a comprehensive summary of the entire thinking process.\n\n### clear_thinking_history\n\nClear all recorded thoughts and reset the server state.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "metacognitive",
        "thinking",
        "mind",
        "structured thinking",
        "structured thought",
        "construct mind"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "PublikPrinciple--obsidian-mcp-rest": {
      "owner": "PublikPrinciple",
      "name": "obsidian-mcp-rest",
      "url": "https://github.com/PublikPrinciple/obsidian-mcp-rest",
      "imageUrl": "/freedevtools/mcp/pfp/PublikPrinciple.webp",
      "description": "Access Obsidian vault contents via a local REST API, enabling interactions with notes, content management, and search capabilities.",
      "stars": 57,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:02Z",
      "readme_content": "# Obsidian MCP REST Server\n\nAn MCP (Model Context Protocol) server implementation that provides access to Obsidian vaults through a local REST API. This server allows AI assistants to interact with Obsidian notes and manage vault content through a standardized interface.\n\n## Features\n\n- Access Obsidian vault contents through MCP\n- Read and write notes\n- List vault contents\n- Search functionality\n- Secure local REST API integration\n- Compatible with Claude Desktop and other AI assistants\n\n## Prerequisites\n\n- Node.js 16 or higher\n- Obsidian with Local REST API plugin installed and configured\n- An Obsidian vault with Local REST API enabled\n\n## Installation\n\nInstall the package globally:\n\n```bash\nnpm install -g PublikPrinciple/obsidian-mcp-rest\n```\n\nOr if you prefer using a specific version/branch:\n\n```bash\nnpm install -g PublikPrinciple/obsidian-mcp-rest#main\n```\n\n## Configuration\n\n1. First, configure Obsidian Local REST API plugin:\n   - Install the Local REST API plugin in Obsidian\n   - Configure the API port (default: 27123)\n   - Generate and save an API key\n\n2. Create a configuration file `config.json`:\n\n```json\n{\n  \"obsidian\": {\n    \"apiKey\": \"your-api-key-here\",\n    \"port\": 27123,\n    \"host\": \"localhost\"\n  },\n  \"server\": {\n    \"name\": \"obsidian-mcp\",\n    \"version\": \"1.0.0\"\n  }\n}\n```\n\n## Usage\n\n1. Start the server:\n```bash\nobsidian-mcp-rest --config path/to/config.json\n```\n\n2. The server will start and listen for MCP requests via stdin/stdout.\n\n### Using with Claude Desktop\n\n1. Configure Claude Desktop to use this MCP server:\n   - Open Claude Desktop settings\n   - Navigate to the MCP section\n   - Add new server configuration:\n     ```json\n     {\n       \"name\": \"obsidian-mcp\",\n       \"command\": \"obsidian-mcp-rest\",\n       \"args\": [\"--config\", \"path/to/config.json\"]\n     }\n     ```\n\n2. Claude can now access your Obsidian vault through commands like:\n   ```\n   Read note \"Projects/MyProject.md\"\n   List all notes in \"Projects\" folder\n   Search for notes containing \"typescript\"\n   ```\n\n## Available Tools\n\n- `listNotes`: List all notes in the vault or a specific folder\n- `readNote`: Read the contents of a specific note\n- `writeNote`: Create or update a note\n- `searchNotes`: Search for notes using a query string\n- `getMetadata`: Get metadata for a specific note\n\n## Security\n\n- The server only runs locally and communicates through stdin/stdout\n- All requests to Obsidian REST API are authenticated with your API key\n- No external network access is required\n- Data remains local to your machine\n\n## Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/PublikPrinciple/obsidian-mcp-rest.git\ncd obsidian-mcp-rest\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n4. Run tests:\n```bash\nnpm test\n```\n\n## Troubleshooting\n\n### Installation Issues\n\nIf you encounter any installation issues, try these alternatives:\n\n1. Clone and install locally:\n```bash\ngit clone https://github.com/PublikPrinciple/obsidian-mcp-rest.git\ncd obsidian-mcp-rest\nnpm install\nnpm run build\nnpm install -g .\n```\n\n2. If you see TypeScript-related errors, ensure TypeScript is installed globally:\n```bash\nnpm install -g typescript\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\n\n## License\n\nMIT License - see LICENSE file for details",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vault",
        "obsidian",
        "publikprinciple",
        "obsidian vault",
        "publikprinciple obsidian",
        "access obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Rish-it--Notes-MCP": {
      "owner": "Rish-it",
      "name": "Notes-MCP",
      "url": "https://github.com/Rish-it/Notes-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/Rish-it.webp",
      "description": "Enable interaction with Apple Notes through natural language commands, allowing users to create, update, delete, and search for notes. Automatically manages trip planning requests by generating detailed notes based on user input.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-24T04:07:30Z",
      "readme_content": "# NotesY - Apple Notes Integration for Claude\n\nA Claude MCP integration that allows seamless interaction with Apple Notes through natural language.\n\n## Features\n\n* Create notes with content and titles\n* Update existing notes with new content\n* Delete notes by title\n* Search for notes containing specific text\n* Automatically detect trip planning requests and create notes\n\n## Installation\n\n1. Clone and build the project:\n```bash\ngit clone https://github.com/yourusername/NotesY.git\ncd NotesY\nnpm install\nnpm run build\n```\n\n2. Add to Claude's configuration (usually at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"NotesY\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/NotesY/dist/index.js\"]\n    }\n  }\n}\n```\n\n## Usage\n\n### With Claude Desktop\n\nSimply talk to Claude Desktop and ask it to:\n\n```\nCreate a note titled 'shopping list' with items: milk, eggs, bread\n\nAdd meeting notes to my 'work' note\n\nDelete my 'old tasks' note\n\nSearch for notes with 'project'\n```\n\nYou can also just give Claude long text and it will create a note with appropriate title:\n\n```\nCreate a comprehensive trip plan for Krabi, Thailand, including recommended duration, best time to visit, must-see attractions, accommodation options, transportation tips, food recommendations, and budget considerations.\n```\n\n### Using the CLI\n\nFor testing without Claude, you can use the built-in CLI:\n\n```bash\nnpm run cli\n```\n\nThis lets you enter natural language commands directly and see the results.\n\n## Local Development\n\n```bash\ngit clone https://github.com/yourusername/NotesY.git\ncd NotesY\nnpm install\nnpm run build\nnpm run dev\n```\n\nTo run the Express server for API testing:\n```bash\nSTART_EXPRESS_SERVER=true npm run dev\n```\n\n## How it Works\n\nNotesY uses AppleScript to interact with the macOS Notes app, providing natural language understanding through an MCP integration with Claude Desktop.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "rish",
        "notes mcp",
        "rish notes",
        "notes based"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Rupeebw--mcp-image-reader": {
      "owner": "Rupeebw",
      "name": "mcp-image-reader",
      "url": "https://github.com/Rupeebw/mcp-image-reader",
      "imageUrl": "/freedevtools/mcp/pfp/Rupeebw.webp",
      "description": "Manage and summarize text notes efficiently with this MCP server, which supports creating, accessing, and summarizing notes through unique URIs. It integrates note management and summarization capabilities for enhanced workflows with LLMs.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-17T17:20:57Z",
      "readme_content": "# image-reader MCP Server\n\nimage reader\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"image-reader\": {\n      \"command\": \"/path/to/image-reader/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "workflows",
        "note management",
        "summarizing notes",
        "notes efficiently"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Rwb3n--obsidian-mcp": {
      "owner": "Rwb3n",
      "name": "obsidian-mcp",
      "url": "https://github.com/Rwb3n/obsidian-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Rwb3n.webp",
      "description": "Interact with your Obsidian vault to read, write, and manage notes and metadata. Enhance the note-taking experience through various powerful tools designed for seamless integration with Obsidian.",
      "stars": 28,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T09:11:10Z",
      "readme_content": "# Obsidian MCP Tool Server\n\n[](https://github.com/rivassec/obsidian-mcp/actions/workflows/trivy-scan.yml)\n[![Bandit](https://img.shields.io/badge/Bandit-passed-brightgreen?logo=python&logoColor=white)](https://bandit.readthedocs.io)\n[![Trivy](https://img.shields.io/badge/Trivy-passed-blue?logo=datadog&logoColor=white)](https://github.com/aquasecurity/trivy)\n\nThis project provides a Model Context Protocol (MCP) server that exposes tools for interacting with an Obsidian vault.\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Running Manually (for Testing/Debugging)](#running-manually-for-testingdebugging)\n- [Client Configuration (Example: Claude Desktop)](#client-configuration-example-claude-desktop)\n- [Available MCP Tools](#available-mcp-tools)\n- [Roadmap](#roadmap)\n- [Frequently Asked Questions (FAQ)](#frequently-asked-questions-faq)\n- [Contributions Welcome!](#contributions-welcome)\n\n## Features\n\nAllows MCP clients (like AI assistants) to:\n- Read and write notes\n- Manage note metadata (frontmatter)\n- List notes and folders\n- Search notes by content or metadata\n- Manage daily notes\n- Get outgoing links, backlinks, and tags\n\n## Installation\n\n1.  **Clone the repository** (if you haven't already):\n    ```bash\n    # git clone <repository-url>\n    # cd OMCP \n    ```\n\n2.  **Navigate to the project directory**:\n    ```bash\n    cd /path/to/your/OMCP \n    ```\n\n3.  **Create a Python virtual environment** (recommended to avoid dependency conflicts):\n    ```bash\n    python -m venv .venv \n    ```\n\n4.  **Activate the virtual environment**:\n    *   On Windows PowerShell:\n        ```powershell\n        .venv\\Scripts\\Activate.ps1 \n        ```\n    *   On Linux/macOS:\n        ```bash\n        source .venv/bin/activate \n        ```\n    (Your terminal prompt should now show `(.venv)` at the beginning)\n\n5.  **Install the package** and its dependencies:\n    ```bash\n    pip install . \n    ```\n\n## Configuration\n\nThis server is configured using environment variables, which can be conveniently managed using a `.env` file in the project root.\n\n1.  **Copy the example file:**\n    ```bash\n    # From the project root directory (OMCP/)\n    cp .env.example .env \n    ```\n    (On Windows, you might use `copy .env.example .env`)\n\n2.  **Edit the `.env` file:**\n    Open the newly created `.env` file in a text editor.\n\n3.  **Set `OMCP_VAULT_PATH`:** This is the only **required** variable. Update it with the **absolute path** to your Obsidian vault. Use forward slashes (`/`) for paths, even on Windows.\n    ```dotenv\n    OMCP_VAULT_PATH=\"/path/to/your/Obsidian/Vault\" \n    ```\n\n4.  **Review Optional Settings:** Adjust the other `OMCP_` variables for daily notes, server port, or backup directory if needed. Read the comments in the file for explanations.\n\n*(Alternatively, instead of using a `.env` file, you can set these as actual system environment variables. The server will prioritize system environment variables over the `.env` file if both are set.)*\n\n## Running Manually (for Testing/Debugging)\n\nWhile client applications like Claude Desktop will launch the server automatically using the configuration described below, you can also run the server manually from your terminal for direct testing or debugging.\n\n1.  **Ensure Configuration is Done:** Make sure you have created and configured your `.env` file as described in the Configuration section.\n2.  **Activate Virtual Environment:**\n    ```powershell\n    # If not already active\n    .venv\\Scripts\\Activate.ps1 \n    ```\n    *(Use `source .venv/bin/activate` on Linux/macOS)*\n3.  **Run the server script:**\n    ```bash\n    (.venv) ...> python obsidian_mcp_server/main.py \n    ```\n\nThe server will start and print the address it's listening on (e.g., `http://127.0.0.1:8001`). You would typically press `Ctrl+C` to stop it when finished testing.\n\n**Remember:** If you intend to use this server with Claude Desktop or a similar launcher, you should **not** run it manually like this. Configure the client application instead (see next section), and it will handle starting and stopping the server process.\n\n## Client Configuration (Example: Claude Desktop)\n\nMany MCP clients (like Claude Desktop) can launch server processes directly. To configure such a client, you typically need to edit its JSON configuration file (e.g., `claude_desktop_config.json` on macOS/Linux, find the equivalent path on Windows under `AppData`).\n\n⚠️ **Important JSON Formatting Rules:**\n1. JSON files **do not** support comments (remove any `//` or `/* */` comments)\n2. All strings must be properly quoted with double quotes (`\"`)\n3. Windows paths must use escaped backslashes (`\\\\`)\n4. Use a JSON validator (like [jsonlint.com](https://jsonlint.com/)) to check your syntax\n\nHere's an example entry to add under the `mcpServers` key in the client's JSON configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian_vault\": {\n      \"command\": \"C:\\\\path\\\\to\\\\your\\\\project\\\\OMCP\\\\.venv\\\\Scripts\\\\python.exe\",\n      \"args\": [\"C:\\\\path\\\\to\\\\your\\\\project\\\\OMCP\\\\obsidian_mcp_server\\\\main.py\"],\n      \"env\": {\n        \"OMCP_VAULT_PATH\": \"C:/path/to/your/Obsidian/Vault\",\n        \"OMCP_DAILY_NOTE_LOCATION\": \"Journal/Daily\"\n      }\n    }\n  }\n}\n```\n\n**Key Points:**\n\n*   Replace the paths with the **absolute paths** relevant to your system\n*   For Windows paths in the `command` and `args` fields:\n    *   Use double backslashes (`\\\\`) for path separators\n    *   Include the `.exe` extension for the Python executable\n*   For Windows paths in the `env` block:\n    *   Use forward slashes (`/`) for better compatibility\n    *   Do not include the `.exe` extension\n*   The `command` path **must** point to the `python.exe` executable *inside* the `.venv` you created\n*   The `args` path **must** point to the `main.py` file within the `obsidian_mcp_server` subfolder\n*   Using the `env` block is the most reliable way to ensure the server finds your vault path\n*   Remember to **restart the client application** after modifying its JSON configuration\n\n**Common Pitfalls to Avoid:**\n1. Don't use single backslashes in Windows paths\n2. Don't include comments in the JSON\n3. Don't forget to escape backslashes in Windows paths\n4. Don't mix forward and backslashes in the same path\n5. Don't forget to properly quote all strings\n\n## Available MCP Tools\n\n*   `list_folders`\n*   `list_notes`\n*   `get_note_content`\n*   `get_note_metadata`\n*   `get_outgoing_links`\n*   `get_backlinks`\n*   `get_all_tags`\n*   `search_notes_content`\n*   `search_notes_metadata`\n*   `search_folders`\n*   `create_note`\n*   `edit_note`\n*   `append_to_note`\n*   `update_note_metadata`\n*   `delete_note`\n*   `get_daily_note_path`\n*   `create_daily_note`\n*   `append_to_daily_note`\n\n## Roadmap\n\nFor a detailed, phased implementation plan including error handling considerations, please see the [ROADMAP.md](ROADMAP.md) file.\n\nThis project is actively developed. Here's a look at planned features:\n\n**v1.x (Near Term)**\n\n*   **Template-Based Note Creation:**\n    *   Configure a template directory (`OMCP_TEMPLATE_DIR`).\n    *   Implement `create_note_from_template` tool (using template name, target path, optional metadata).\n    *   Add tests for template creation.\n*   **Folder Creation:**\n    *   Implement `create_folder` utility function.\n    *   Implement `create_folder` MCP tool.\n    *   Add tests for folder creation.\n\n**v1.y (Mid Term / Future Enhancements)**\n\n*   Variable substitution in templates (e.g., `{{DATE}}`).\n*   `list_templates` tool.\n*   Advanced note update tools (e.g., `append_to_note_by_metadata`).\n*   `list_vault_structure` tool for comprehensive vault hierarchy view.\n*   Comprehensive testing review and expansion.\n\n**v2.x+ (Potential Ideas / Longer Term)**\n\n*   **Organization Tools:**\n    *   `move_item(source, destination)` (Initial version might not update links).\n    *   `rename_item(path, new_name)` (Initial version might not update links).\n*   **Content Manipulation Tools:**\n    *   `replace_text_in_note(path, old, new, count)`.\n    *   `prepend_to_note(path, content)`.\n    *   `append_to_section(path, heading, content)` (Requires reliable heading parsing).\n*   **Querying Tools:**\n    *   `get_local_graph(path)` (Combine outgoing/backlinks).\n    *   `search_notes_by_metadata_field(key, value)`.\n*   **Plugin Integration Tools:**\n    *   **Dataview Integration:**\n        *   `execute_dataview_query(query_type, query)` - Run Dataview queries and get structured results\n        *   `search_by_dataview_field(field, value)` - Search notes by Dataview fields\n    *   **Task Management:**\n        *   `query_tasks(status, due_date, tags)` - Search and filter tasks across vault\n    *   **Kanban Integration:**\n        *   `get_kanban_data(board_path)` - Get structured kanban board data\n    *   **Calendar Integration:**\n        *   `get_calendar_events(start_date, end_date)` - Query calendar events and tasks\n\n## Frequently Asked Questions (FAQ)\n\n### Configuration Issues\n\n**Q: My server can't find my vault. What's wrong?**\nA: This is usually due to incorrect path configuration. Check:\n1. The `OMCP_VAULT_PATH` in your `.env` file uses forward slashes (`/`) even on Windows\n2. The path is absolute (starts from root)\n3. The path doesn't end with a trailing slash\n4. The vault directory exists and is accessible\n\n**Q: Why am I getting permission errors?**\nA: This typically happens when:\n1. The vault path points to a restricted directory\n2. The Python process doesn't have read/write permissions\n3. The vault is in a cloud-synced folder (like OneDrive) that's currently syncing\n\nTry:\n1. Moving your vault to local directory\n2. Running the server with elevated permissions\n3. Checking your antivirus isn't blocking access\n\n### Client Connection Issues\n\n**Q: My AI client can't connect to the server. What should I check?**\nA: Verify these common issues:\n1. The server is actually running (check terminal output)\n2. The port in your client config matches the server's port\n3. The Python path in your client config points to the correct virtual environment\n4. All environment variables are properly set in the client config\n\n**Q: Why do I get \"Connection refused\" errors?**\nA: This usually means:\n1. The server isn't running\n2. The port is already in use\n3. Firewall is blocking the connection\n\nTry:\n1. Check if the server is running: `netstat -ano | findstr :8001` (Windows)\n2. Try a different port by setting `OMCP_SERVER_PORT` in your `.env`\n3. Temporarily disable firewall to test\n\n**Q: I get \"[error] [obsidian_vault] Unexpected token 'S', \"Starting O\"... is not valid JSON\". What's wrong?**\nA: This error occurs when the client's JSON configuration file is malformed. Common causes:\n1. Missing or extra commas in the JSON\n2. Unescaped backslashes in Windows paths\n3. Comments in the JSON (JSON doesn't support comments)\n\nCheck your client config file (e.g., `claude_desktop_config.json`):\n1. Use a JSON validator (like [jsonlint.com](https://jsonlint.com/)) to check syntax\n2. For Windows paths, escape backslashes: `\"C:\\\\path\\\\to\\\\file\"`\n3. Remove any comments (// or /* */)\n4. Ensure all strings are properly quoted\n5. Check that all brackets and braces are properly closed\n\nExample of correct Windows path formatting:\n```json\n{\n  \"mcpServers\": {\n    \"obsidian_vault\": {\n      \"command\": \"C:\\\\path\\\\to\\\\your\\\\project\\\\OMCP\\\\.venv\\\\Scripts\\\\python.exe\",\n      \"args\": [\"C:\\\\path\\\\to\\\\your\\\\project\\\\OMCP\\\\obsidian_mcp_server\\\\main.py\"]\n    }\n  }\n}\n```\n\n**Q: I get a timeout error and \"Server disconnected\" message. What's happening?**\nA: This error pattern (initialization succeeds, then times out after 60 seconds) usually means:\n1. The server is already running in another process\n2. The port is already in use by another application\n3. The server process is being terminated unexpectedly\n\nTry these steps in order:\n\n1. **Check for running server processes:**\n   ```powershell\n   # On Windows\n   netstat -ano | findstr :8001\n   # Look for the PID and then:\n   taskkill /F /PID <PID>\n   ```\n   ```bash\n   # On Linux/macOS\n   lsof -i :8001\n   # Look for the PID and then:\n   kill -9 <PID>\n   ```\n\n2. **Check for other applications using the port:**\n   - Close any other applications that might use port 8001\n   - This includes other MCP servers, development servers, or any web applications\n   - If you're not sure, try changing the port in your `.env`:\n     ```dotenv\n     OMCP_SERVER_PORT=8002\n     ```\n\n3. **Verify server process:**\n   - Open Task Manager (Windows) or Activity Monitor (macOS)\n   - Look for any Python processes related to the MCP server\n   - End any suspicious processes\n\n4. **Check system resources:**\n   - Ensure you have enough memory and CPU available\n   - Check if any antivirus or security software is blocking the process\n   - Verify your Python environment has proper permissions\n\n5. **Reset everything:**\n   - Stop the client application\n   - Kill any remaining server processes\n   - Delete the `.env` file and create a new one from `.env.example`\n   - Restart your computer (if other steps don't work)\n   - Start fresh with the client application\n\nIf the issue persists after trying all these steps, please share:\n1. The complete error log\n2. The output of `netstat -ano | findstr :8001` (Windows) or `lsof -i :8001` (Linux/macOS)\n3. Any error messages from your system's event logs\n\n**Q: The server disconnects immediately with \"Server transport closed unexpectedly... process exiting early\". What's wrong?**\nA: This error means the Python server process crashed almost immediately after being launched by the client. It's not a timeout; the server script itself failed to run or stay running.\n\nCommon Causes:\n1.  **Incorrect Paths in Client JSON:**\n    *   `command` doesn't point to the correct `python.exe` *inside* the `.venv`.\n    *   `args` doesn't point to the correct `obsidian_mcp_server/main.py` script.\n    *   Incorrect path separators or missing backslash escapes (`\\\\`) on Windows.\n2.  **Missing Dependencies:**\n    *   Required packages from `requirements.txt` are not installed in the `.venv`.\n    *   The client is launching Python without properly activating the virtual environment.\n3.  **Syntax Errors:** A recent code change introduced a Python syntax error.\n4.  **Critical Configuration/Permission Error:**\n    *   Error reading the `.env` file at startup.\n    *   Invalid or inaccessible `OMCP_VAULT_PATH`.\n    *   Python process lacks permissions to run or access files.\n5.  **Early Unhandled Exception:** An error occurs during initial setup before the server starts listening.\n\nTroubleshooting Steps:\n1.  **Verify Client JSON Paths:** Double-check the absolute paths for `command` and `args` in your client's JSON config. Use escaped backslashes (`\\\\`) for Windows paths.\n2.  **Test Manually (Crucial Step):**\n    *   Activate the virtual environment in your terminal:\n        ```powershell\n        # On Windows\n        .\\.venv\\Scripts\\activate\n        ```\n        ```bash\n        # On Linux/macOS\n        source .venv/bin/activate\n        ```\n    *   Run the server directly:\n        ```bash\n        python obsidian_mcp_server/main.py\n        ```\n    *   Look closely for any error messages printed directly in the terminal. This bypasses the client and often reveals the root cause (like `ImportError`, `SyntaxError`, `FileNotFoundError`).\n3.  **Check Dependencies:** With the venv activated, run `pip check` and `pip install -r requirements.txt`.\n4.  **Validate `.env` and Vault Path:** Ensure `.env` exists, is readable, and `OMCP_VAULT_PATH` is correct (use forward slashes `/`).\n5.  **Review Recent Code Changes:** Check for syntax errors or issues in recently edited Python files.\n\n### Note Operations\n\n**Q: Why can't I create/edit notes in certain folders?**\nA: This could be due to:\n1. Path security restrictions (trying to write outside vault)\n2. Folder permissions\n3. File locks from other processes\n\nTry:\n1. Using relative paths within your vault\n2. Checking folder permissions\n3. Closing other programs that might have the files open\n\n**Q: Why are my note updates not being saved?**\nA: Common causes:\n1. The note path is incorrect\n2. The content format is invalid\n3. Backup creation failed\n\nCheck:\n1. The note path exists and is accessible\n2. The content is valid markdown\n3. The backup directory has write permissions\n\n### Daily Notes\n\n**Q: Why aren't my daily notes being created in the right location?**\nA: Verify:\n1. `OMCP_DAILY_NOTE_LOCATION` is set correctly in `.env`\n2. The path uses forward slashes\n3. The target folder exists\n4. The date format matches your vault's settings\n\n### General Troubleshooting\n\n**Q: How do I check if the server is working correctly?**\nA: Run the test client:\n```bash\npython test_client.py\n```\nThis will perform a series of operations and report any issues.\n\n**Q: Where can I find error logs?**\nA: Check:\n1. The terminal where the server is running\n2. The backup directory for failed operations\n3. The system event logs for permission issues\n\n**Q: How do I reset everything to start fresh?**\nA: Try these steps:\n1. Stop the server\n2. Delete the `.env` file\n3. Create a new `.env` from `.env.example`\n4. Restart the server\n\n**Contributions Welcome!**",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "obsidian",
        "notes",
        "rwb3n obsidian",
        "obsidian mcp",
        "integration obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "RyoJerryYu--mcp-server-memos-py": {
      "owner": "RyoJerryYu",
      "name": "mcp-server-memos-py",
      "url": "https://github.com/RyoJerryYu/mcp-server-memos-py",
      "imageUrl": "/freedevtools/mcp/pfp/RyoJerryYu.webp",
      "description": "Interact with a memo hub to search, create, and manage memos with customizable visibility and secure authentication. Enhance LLM applications by integrating memo functionalities seamlessly.",
      "stars": 15,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-03T22:31:19Z",
      "readme_content": "# MCP Server Memos 📝\n\n[![PyPI version](https://img.shields.io/pypi/v/mcp-server-memos.svg)](https://pypi.org/project/mcp-server-memos/)\n[![Python Version](https://img.shields.io/pypi/pyversions/mcp-server-memos.svg)](https://pypi.org/project/mcp-server-memos/)\n[![License](https://img.shields.io/github/license/RyoJerryYu/mcp-server-memos-py.svg)](https://github.com/RyoJerryYu/mcp-server-memos-py/blob/master/LICENSE)\n[![smithery badge](https://smithery.ai/badge/@RyoJerryYu/mcp-server-memos-py)](https://smithery.ai/server/@RyoJerryYu/mcp-server-memos-py)\n\nA Python package that provides LLM models with the ability to interact with [Memos](https://github.com/usememos/memos) server through the [MCP (Model Context Protocol)](https://modelcontextprotocol.io/introduction) interface.\n\n## 🚀 Features\n\n- 🔍 Search memos with keywords\n- ✨ Create new memos with customizable visibility\n- 📖 Retrieve memo content by ID\n- 🏷️ List and manage memo tags\n- 🔐 Secure authentication using access tokens\n\n## 🛠️ Usage\n\nYou can include this package in your config file as bellow, just as you use other Python MCP plugins.\n\n```jsonc\n{\n  ...,\n  \"mcpServers\": {\n    \"fetch\": { // other mcp servers\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-fetch\"]\n    },\n    \"memos\": { // add this to your config\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--prerelease=allow\",\n        \"mcp-server-memos\",\n        \"--host\",\n        \"localhost\",\n        \"--port\",\n        \"5230\",\n        \"--token\",\n        \"your-access-token-here\"\n      ]\n    }\n  }\n}\n```\n\n<details>\n<summary>Other ways to use this package</summary>\n\n### 📦 Installation\n\n#### Installing via Smithery\n\nTo install mcp-server-memos-py for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@RyoJerryYu/mcp-server-memos-py):\n\n```bash\nnpx -y @smithery/cli install @RyoJerryYu/mcp-server-memos-py --client claude\n```\n\n#### Installing Manually\n```bash\npip install mcp-server-memos\n```\n\n### Command Line\n\n```bash\nmcp-server-memos --host localhost --port 8080 --token YOUR_ACCESS_TOKEN\n```\n\n### As a Library\n\n```python\nfrom mcp_server_memos import Config, serve_stdio\n\nconfig = Config(\n    host=\"localhost\",\n    port=8080,\n    token=\"YOUR_ACCESS_TOKEN\"\n)\n\nawait serve_stdio(config=config)\n```\n\n</details>\n\n## 🔧 Configuration\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| `host` | Memos server hostname | `localhost` |\n| `port` | Memos server port | `8080` |\n| `token` | Access token for authentication | `\"\"` |\n\n## 🤝 Available Tools\n\nThis MCP server provides the following tools for interacting with Memos:\n\n| Tool Name | Description | Parameters |\n|-----------|-------------|------------|\n| `list_memo_tags` | List all existing memo tags | - `parent`: The parent who owns the tags (format: memos/{id}, default: \"memos/-\")<br>- `visibility`: Tag visibility (PUBLIC/PROTECTED/PRIVATE, default: PRIVATE) |\n| `search_memo` | Search for memos using keywords | - `key_word`: The keywords to search for in memo content |\n| `create_memo` | Create a new memo | - `content`: The content of the memo<br>- `visibility`: Memo visibility (PUBLIC/PROTECTED/PRIVATE, default: PRIVATE) |\n| `get_memo` | Get a specific memo by ID | - `name`: The name/ID of the memo (format: memos/{id}) |\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\n- [Memos](https://github.com/usememos/memos) - A lightweight, self-hosted memo hub\n- [MCP (Model Context Protocol)](https://modelcontextprotocol.io/introduction) - Protocol for LLM model applications\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "memos",
        "memo",
        "llm",
        "server memos",
        "memos py",
        "memo hub"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Siddhant-K-code--mcp-apple-notes": {
      "owner": "Siddhant-K-code",
      "name": "mcp-apple-notes",
      "url": "https://github.com/Siddhant-K-code/mcp-apple-notes",
      "imageUrl": "/freedevtools/mcp/pfp/Siddhant-K-code.webp",
      "description": "Interact with Apple Notes using natural language to create, search, and retrieve notes. Seamlessly integrates with iCloud for easy access to note content.",
      "stars": 11,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T15:22:37Z",
      "readme_content": "# 📝 Apple Notes MCP Server\n\n**Apple Notes MCP Server** is a Model Context Protocol server that enables seamless interaction with Apple Notes through natural language. Create, search, and retrieve notes effortlessly using Claude or other AI assistants! 🎉\n\n<a href=\"https://glama.ai/mcp/servers/ayr26szokg\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/ayr26szokg/badge\" alt=\"Apple Notes Server MCP server\" />\n</a>\n\n## 🎯 Features\n\n- **Create Notes:** Quickly create new notes with titles, content, and tags 📝\n- **Search Notes:** Find notes using powerful search capabilities 🔍\n- **Retrieve Content:** Get the full content of any note by its title 📖\n- **iCloud Integration:** Works directly with your iCloud Notes account ☁️\n\n## 🚀 Getting Started\n\n### Prerequisites\n\n1. macOS with Apple Notes app configured\n2. Node.js (version 20.0.0 or higher)\n3. Yarn package manager\n\n### Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/Siddhant-K-code/mcp-apple-notes.git\n   cd mcp-apple-notes\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   yarn install\n   ```\n\n3. Build the project:\n\n   ```bash\n   yarn build\n   ```\n\n4. Start the server:\n   ```bash\n   yarn start\n   ```\n\n5. Configure Claude Desktop. Update your `claude_desktop_config.json` with:\n   ```json\n   {\n     \"mcpServers\": {\n       \"apple-notes\": {\n         \"command\": \"yarn\",\n         \"args\": [\"start\"],\n         \"cwd\": \"/path/to/mcp-apple-notes\"\n       }\n     }\n   }\n   ```\n\n   > **Note:** Replace `/path/to/mcp-apple-notes` with the actual path to your cloned repository.\n   > You may need to authorize the script to access Apple Notes when first running commands.\n\n### MCP Server Initialization\n\nWhen the server starts successfully, you'll see:\n```\nStarting Apple Notes MCP server.\n```\n\nThe server is now ready to handle your note operations! 🎉\n\n## 🛠️ Usage\n\n### Available Tools\n\n1. **Create Note**\n\n   - Description: Creates a new note in Apple Notes\n   - Parameters:\n     ```typescript\n     {\n       title: string;      // The title of the note\n       content: string;    // The content of the note\n       tags?: string[];    // Optional tags for the note\n     }\n     ```\n   - Example Response:\n     ```\n     Note created: My New Note\n     ```\n\n2. **Search Notes**\n\n   - Description: Search for notes by title\n   - Parameters:\n     ```typescript\n     {\n       query: string; // The search query\n     }\n     ```\n   - Example Response:\n     ```\n     Meeting Notes\n     Shopping List\n     Ideas for Project\n     ```\n\n3. **Get Note Content**\n   - Description: Retrieve the full content of a specific note\n   - Parameters:\n     ```typescript\n     {\n       title: string; // The exact title of the note\n     }\n     ```\n   - Example Response:\n     ```\n     [Full content of the note]\n     ```\n\n## 📚 Example Use Cases\n\n### 1. Quick Note Taking\n\nCreate notes during meetings or brainstorming sessions:\n\n```ts\n{\n\"title\": \"Team Meeting Notes\",\n\"content\": \"Discussion points:\\n1. Project timeline\\n2. Resource allocation\",\n\"tags\": [\"meetings\", \"work\"]\n}\n```\n\n### 2. Information Retrieval\n\nSearch for specific notes when you need them:\n\n```ts\n{\n\"query\": \"meeting\"\n}\n```\n\n### 3. Content Review\n\nGet the full content of a specific note:\n\n```ts\n{\n\"title\": \"Team Meeting Notes\"\n}\n```\n\n## ⚡ Tips for Best Results\n\n- Ensure your Apple Notes app is properly configured with iCloud\n- Use descriptive titles for better searchability\n- Include relevant tags when creating notes for better organization\n\n## 🔧 Development\n\nThe project uses TypeScript and follows modern ES modules patterns. Key files:\n\n- `src/index.ts`: Main server implementation\n- `src/services/appleNotesManager.ts`: Core note management functionality\n- `src/utils/applescript.ts`: AppleScript integration utilities\n\n### Development Container\n\nA development container configuration is provided for VS Code users, offering:\n\n- TypeScript Node.js environment\n- Prettier for code formatting\n- Automatic dependency installation\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n---\n\nMade with ❤️ for Apple Notes users",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "icloud",
        "apple notes",
        "notes using",
        "note content"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Sjotie--notionMCP": {
      "owner": "Sjotie",
      "name": "notionMCP",
      "url": "https://github.com/Sjotie/notionMCP",
      "imageUrl": "/freedevtools/mcp/pfp/Sjotie.webp",
      "description": "Connect AI assistants to Notion workspaces for interacting with databases, pages, and blocks to streamline content management and retrieval.",
      "stars": 11,
      "forks": 6,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-14T15:43:28Z",
      "readme_content": "# Notion MCP Server\n\nA Model Context Protocol (MCP) server that connects Claude and other AI assistants to your Notion workspace. This integration allows AI assistants to interact with your Notion databases, pages, and blocks.\n\n## What is this?\n\nThis tool acts as a bridge between AI assistants (like Claude) and your Notion workspace. It allows the AI to:\n- View and search your Notion databases\n- Create and update pages\n- Manage content blocks\n- And much more!\n\n## Step-by-Step Setup Guide\n\n### Prerequisites\n- [Node.js](https://nodejs.org/) (version 14 or higher)\n- A Notion account\n- Claude Desktop app (if using with Claude)\n\n### 1. Getting Your Notion API Key\n\n1. Go to [https://www.notion.so/my-integrations](https://www.notion.so/my-integrations)\n2. Click the blue **\"+ New integration\"** button\n3. Fill in the details:\n   - **Name**: Choose a name like \"Claude Assistant\" or \"AI Helper\"\n   - **Logo**: Optional\n   - **Associated workspace**: Select your Notion workspace\n4. Click **\"Submit\"**\n5. On the next page, find the **\"Internal Integration Token\"** section\n6. Click **\"Show\"** and copy the token (it starts with `secret_`)\n\n## 2. Setting Up This Server\n\n### Download the Repository\n\n**Option A: Download as ZIP (Recommended for beginners)**\n1. Go to the GitHub repository: https://github.com/Sjotie/notionMCP/\n2. Click the green \"Code\" button at the top right\n3. Select \"Download ZIP\"\n4. Once downloaded, extract the ZIP file to a location on your computer\n   - Windows: Right-click the ZIP file and select \"Extract All\"\n   - Mac: Double-click the ZIP file to extract\n\n**Option B: Clone with Git (For users familiar with Git)**\n1. Open a command prompt or terminal\n   - Windows: Press `Win+R`, type `cmd`, and press Enter\n   - Mac: Open Terminal from Applications > Utilities\n2. Navigate to where you want to store the repository\n   ```\n   cd path/to/desired/location\n   ```\n3. Clone the repository\n   ```\n   git clone https://github.com/Sjotie/notionMCP/\n   ```\n\n### Navigate to the Project Directory\n\nAfter downloading or cloning, you need to navigate to the project folder using the `cd` (change directory) command:\n\n**If you downloaded the ZIP (Option A):**\n1. Open a command prompt or terminal\n2. Use the `cd` command to navigate to where you extracted the ZIP file:\n   ```\n   cd path/to/extracted/folder/notionMCP\n   ```\n   \n   For example:\n   - On Windows: `cd C:\\Users\\YourName\\Downloads\\notionMCP`\n   - On Mac: `cd /Users/YourName/Downloads/notionMCP`\n\n**If you cloned with Git (Option B):**\n1. The repository should have been cloned into a folder named \"notionMCP\"\n2. If you're still in the same terminal window after cloning, simply type:\n   ```\n   cd notionMCP\n   ```\n\n**How to know you're in the right directory:**\n- After using the `cd` command, you can check your current location:\n  - On Windows: Type `dir` and press Enter - you should see files like `server.js`\n  - On Mac: Type `ls` and press Enter - you should see files like `server.js`\n\n### Install Dependencies\n\nOnce you're in the notionMCP directory, install the required dependencies:\n\n```\nnpm install\n```\n\nThis will install all the necessary Node.js packages. You should see a progress bar and eventually a message indicating the installation is finished. It might say something along the lines of \"X Packages are looking for funding\" - this is completely normal and means it worked.\n\n### 3. Connecting to Notion Pages\n\nFor security, Notion requires you to explicitly grant access to each page or database:\n\n1. Open Notion and navigate to a page or database you want the AI to access\n2. Click the **\"•••\"** (three dots) in the top-right corner\n3. Select **\"Add connections\"**\n4. Find and select the integration you created earlier\n5. Repeat for any other pages or databases you want to make accessible\n\n### 4. Connecting to Claude Desktop\n\n1. Locate your Claude Desktop configuration file:\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n     (Type this path in File Explorer address bar)\n   - Mac: `~/Library/Application Support/Claude/claude_desktop_config.json`\n     (In Finder, press Cmd+Shift+G and paste this path)\n\n2. Open the file in a text editor. If it doesn't exist, create it with the following content:\n   ```json\n   {\n     \"mcpServers\": {\n       \"notion\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"C:\\\\path\\\\to\\\\notion-mcp-server\\\\server.js\"\n         ],\n         \"env\": {\n           \"NOTION_API_KEY\": \"your_notion_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\n3. Replace:\n   - `C:\\\\path\\\\to\\\\notion-mcp-server\\\\server.js` with the actual path to the server.js file\n     - Windows: Use double backslashes (\\\\\\\\) in the path\n     - Mac: Use forward slashes (/)\n   - `your_notion_api_key_here` with your Notion API key\n\n4. Save the file and restart Claude Desktop\n\n### 5. Testing the Connection\n\n1. Start a new conversation in Claude\n2. Ask Claude to interact with your Notion workspace, for example:\n   - \"Show me a list of my Notion databases\"\n   - \"Create a new page in my Tasks database with title 'Test Task'\"\n\n## Available Tools\n\nThe server provides these tools to AI assistants:\n\n- **list-databases**: View all accessible databases\n- **query-database**: Get entries from a database\n- **create-page**: Add a new page to a database\n- **update-page**: Modify an existing page\n- **create-database**: Create a new database\n- **update-database**: Modify a database structure\n- **get-page**: View a specific page\n- **get-block-children**: View content blocks\n- **append-block-children**: Add content to a page\n- **update-block**: Edit content blocks\n- **get-block**: View a specific block\n- **search**: Find content across your workspace\n\n## Troubleshooting\n\n### Common Issues:\n\n1. **\"Connection failed\" in Claude**\n   - Make sure the server path in claude_desktop_config.json is correct\n   - Check that your Notion API key is valid\n   - Ensure Node.js is installed\n\n2. **\"Access denied\" when accessing Notion content**\n   - Make sure you've shared the page/database with your integration\n   - Check that your API key has the necessary permissions\n\n3. **Server won't start**\n   - Ensure all dependencies are installed (`npm install`)\n   - Check that the .env file exists with your API key\n\n### Getting Help\n\nIf you encounter issues not covered here, please:\n- Check the console output for error messages\n- Ensure your Notion API key is valid\n- Verify that your integration has access to the pages/databases\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notionmcp",
        "assistants",
        "retrieval",
        "knowledge bases",
        "ai assistants",
        "assistants notion"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Skywalker-Harrison--mcp-soduku": {
      "owner": "Skywalker-Harrison",
      "name": "mcp-soduku",
      "url": "https://github.com/Skywalker-Harrison/mcp-soduku",
      "imageUrl": "/freedevtools/mcp/pfp/Skywalker-Harrison.webp",
      "description": "Store and manage notes with an efficient system that allows adding notes and generating summaries based on customizable detail levels.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-20T07:49:31Z",
      "readme_content": "# sodukusolver MCP server\n\nA MCP server project\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"sodukusolver\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/harrisonliang/research/fun/soduku\",\n        \"run\",\n        \"sodukusolver\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"sodukusolver\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"sodukusolver\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/harrisonliang/research/fun/soduku run sodukusolver\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "soduku",
        "manage notes",
        "notes generating",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Spritualkb--nuclei-mcp": {
      "owner": "Spritualkb",
      "name": "nuclei-mcp",
      "url": "https://github.com/Spritualkb/nuclei-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Spritualkb.webp",
      "description": "Manage and summarize text notes using a TypeScript-based Model Context Protocol server. Create and access notes through standardized URIs, with tools for generating summaries of stored content.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-30T10:42:27Z",
      "readme_content": "# nuclei-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n<a href=\"https://glama.ai/mcp/servers/@Spritualkb/nuclei-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Spritualkb/nuclei-mcp/badge\" alt=\"nuclei-server Server MCP server\" />\n</a>\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"nuclei-server\": {\n      \"command\": \"/path/to/nuclei-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "typescript",
        "text notes",
        "notes using",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "StevenStavrakis--obsidian-mcp": {
      "owner": "StevenStavrakis",
      "name": "obsidian-mcp",
      "url": "https://github.com/StevenStavrakis/obsidian-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/StevenStavrakis.webp",
      "description": "Interact with Obsidian vaults to manage notes and tags, including reading, creating, editing, moving, and deleting notes and directories.",
      "stars": 545,
      "forks": 53,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:04Z",
      "readme_content": "# Obsidian MCP Server\n\n[![smithery badge](https://smithery.ai/badge/obsidian-mcp)](https://smithery.ai/server/obsidian-mcp)\n\nAn [MCP (Model Context Protocol)](https://modelcontextprotocol.io) server that enables AI assistants to interact with Obsidian vaults, providing tools for reading, creating, editing and managing notes and tags.\n\n## Warning!!!\n\nThis MCP has read and write access (if you allow it). Please. PLEASE backup your Obsidian vault prior to using obsidian-mcp to manage your notes. I recommend using git, but any backup method will work. These tools have been tested, but not thoroughly, and this MCP is in active development.\n\n## Features\n\n- Read and search notes in your vault\n- Create new notes and directories\n- Edit existing notes\n- Move and delete notes\n- Manage tags (add, remove, rename)\n- Search vault contents\n\n## Requirements\n\n- Node.js 20 or higher (might work on lower, but I haven't tested it)\n- An Obsidian vault\n\n## Install\n\n### Installing Manually\n\nAdd to your Claude Desktop configuration:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n    \"mcpServers\": {\n        \"obsidian\": {\n            \"command\": \"npx\",\n            \"args\": [\"-y\", \"obsidian-mcp\", \"/path/to/your/vault\", \"/path/to/your/vault2\"]\n        }\n    }\n}\n```\n\nReplace `/path/to/your/vault` with the absolute path to your Obsidian vault. For example:\n\nMacOS/Linux:\n\n```json\n\"/Users/username/Documents/MyVault\"\n```\n\nWindows:\n\n```json\n\"C:\\\\Users\\\\username\\\\Documents\\\\MyVault\"\n```\n\nRestart Claude for Desktop after saving the configuration. You should see the hammer icon appear, indicating the server is connected.\n\nIf you have connection issues, check the logs at:\n\n- MacOS: `~/Library/Logs/Claude/mcp*.log`\n- Windows: `%APPDATA%\\Claude\\logs\\mcp*.log`\n\n\n### Installing via Smithery\nWarning: I am not affiliated with Smithery. I have not tested using it and encourage users to install manually if they can.\n\nTo install Obsidian for Claude Desktop automatically via [Smithery](https://smithery.ai/server/obsidian-mcp):\n\n```bash\nnpx -y @smithery/cli install obsidian-mcp --client claude\n```\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/StevenStavrakis/obsidian-mcp\ncd obsidian-mcp\n\n# Install dependencies\nnpm install\n\n# Build\nnpm run build\n```\n\nThen add to your Claude Desktop configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"obsidian\": {\n            \"command\": \"node\",\n            \"args\": [\"<absolute-path-to-obsidian-mcp>/build/main.js\", \"/path/to/your/vault\", \"/path/to/your/vault2\"]\n        }\n    }\n}\n```\n\n## Available Tools\n\n- `read-note` - Read the contents of a note\n- `create-note` - Create a new note\n- `edit-note` - Edit an existing note\n- `delete-note` - Delete a note\n- `move-note` - Move a note to a different location\n- `create-directory` - Create a new directory\n- `search-vault` - Search notes in the vault\n- `add-tags` - Add tags to a note\n- `remove-tags` - Remove tags from a note\n- `rename-tag` - Rename a tag across all notes\n- `manage-tags` - List and organize tags\n- `list-available-vaults` - List all available vaults (helps with multi-vault setups)\n\n## Documentation\n\nAdditional documentation can be found in the `docs` directory:\n\n- `creating-tools.md` - Guide for creating new tools\n- `tool-examples.md` - Examples of using the available tools\n\n## Security\n\nThis server requires access to your Obsidian vault directory. When configuring the server, make sure to:\n\n- Only provide access to your intended vault directory\n- Review tool actions before approving them\n\n## Troubleshooting\n\nCommon issues:\n\n1. **Server not showing up in Claude Desktop**\n   - Verify your configuration file syntax\n   - Make sure the vault path is absolute and exists\n   - Restart Claude Desktop\n\n2. **Permission errors**\n   - Ensure the vault path is readable/writable\n   - Check file permissions in your vault\n\n3. **Tool execution failures**\n   - Check Claude Desktop logs at:\n     - macOS: `~/Library/Logs/Claude/mcp*.log`\n     - Windows: `%APPDATA%\\Claude\\logs\\mcp*.log`\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "stevenstavrakis",
        "notetaking",
        "stevenstavrakis obsidian",
        "obsidian vaults",
        "obsidian mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "Tom-Semple--mcp-apple-notes-fixed": {
      "owner": "Tom-Semple",
      "name": "mcp-apple-notes-fixed",
      "url": "https://github.com/Tom-Semple/mcp-apple-notes-fixed",
      "imageUrl": "/freedevtools/mcp/pfp/Tom-Semple.webp",
      "description": "Enables semantic and full-text search over Apple Notes, allowing AI assistants to reference notes during conversations. Supports local execution to ensure data privacy and security without the need for external APIs.",
      "stars": 8,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-08T19:45:05Z",
      "readme_content": "# MCP Apple Notes\n\n\n\nA [Model Context Protocol (MCP)](https://www.anthropic.com/news/model-context-protocol) server that enables semantic search and RAG (Retrieval Augmented Generation) over your Apple Notes. This allows AI assistants like Claude to search and reference your Apple Notes during conversations.\n\n\n\n## Features\n\n- 🔍 Semantic search over Apple Notes using [`all-MiniLM-L6-v2`](https://huggingface.co/sentence-transformers/all-MiniLM-L6-v2) on-device embeddings model\n- 📝 Full-text search capabilities\n- 📊 Vector storage using [LanceDB](https://lancedb.github.io/lancedb/)\n- 🤖 MCP-compatible server for AI assistant integration\n- 🍎 Native Apple Notes integration via JXA\n- 🏃‍♂️ Fully local execution - no API keys needed\n\n## Prerequisites\n\n- [Bun](https://bun.sh/docs/installation)\n- [Claude Desktop](https://claude.ai/download)\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/RafalWilinski/mcp-apple-notes\ncd mcp-apple-notes\n```\n\n2. Install dependencies:\n\n```bash\nbun install\n```\n\n## Usage\n\n1. Open Claude desktop app and go to Settings -> Developer -> Edit Config\n\n\n\n2. Open the `claude_desktop_config.json` and add the following entry:\n\n```json\n{\n  \"mcpServers\": {\n    \"local-machine\": {\n      \"command\": \"/Users/<YOUR_USER_NAME>/.bun/bin/bun\",\n      \"args\": [\"/Users/<YOUR_USER_NAME>/apple-notes-mcp/index.ts\"]\n    }\n  }\n}\n```\n\nImportant: Replace `<YOUR_USER_NAME>` with your actual username.\n\n3. Restart Claude desktop app. You should see this:\n\n\n\n4. Start by indexing your notes. Ask Claude to index your notes by saying something like: \"Index my notes\" or \"Index my Apple Notes\".\n\n## Troubleshooting\n\nTo see logs:\n\n```bash\ntail -n 50 -f ~/Library/Logs/Claude/mcp-server-local-machine.log\n# or\ntail -n 50 -f ~/Library/Logs/Claude/mcp.log\n```\n\n## Todos\n\n- [ ] Apple notes are returned in the HTML format. We should turn them to Markdown and embed that\n- [ ] Chunk source content using recursive text splitter or markdown text splitter\n- [ ] Add an option to use custom embeddings model\n- [ ] More control over DB - purge, custom queries, etc.\n- [x] Storing notes in Notes via Claude",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "text",
        "apple notes",
        "notes conversations",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "YanceyOfficial--obsidian-mcp": {
      "owner": "YanceyOfficial",
      "name": "obsidian-mcp",
      "url": "https://github.com/YanceyOfficial/obsidian-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/YanceyOfficial.webp",
      "description": "Connects Obsidian Vaults stored in iCloud Drive to AI via the Model Context Protocol (MCP), facilitating data retrieval and interaction with notes. Designed for MacOS, it enhances personal knowledge management by leveraging AI capabilities directly within the Obsidian environment.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-16T14:04:29Z",
      "readme_content": "# Obsidian iCloud MCP\n\nConnecting Obsidian Vaults that are stored in iCloud Drive to AI via the Model Context Protocol (MCP).\n\n> [!WARNING]\n> Obsidian iCloud MCP is fully tested on MacOS. If you are using Windows or Linux, please test it and let me know if it works.\n\n## Usage with Claude Desktop\n\nAdd this to your [`claude_desktop_config.json`](https://modelcontextprotocol.io/quickstart/user):\n\n### Debugging in Development\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/obsidian-mcp/build/index.js\",\n        \"/Users/<USERNAME>/Library/Mobile\\\\ Documents/iCloud~md~obsidian/Documents/<VAULT_NAME_1>\",\n        \"/Users/<USERNAME>/Library/Mobile\\\\ Documents/iCloud~md~obsidian/Documents/<VAULT_NAME_2>\"\n      ]\n    }\n  }\n}\n```\n\nUsing [`npx @modelcontextprotocol/inspector node path/to/server/index.js arg1 arg2 arg3 arg...`](https://modelcontextprotocol.io/docs/tools/inspector) to inspect servers locally developed.\n\n### Using in Production\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"obsidian-mcp\",\n        \"/Users/<USERNAME>/Library/Mobile\\\\ Documents/iCloud~md~obsidian/Documents/<VAULT_NAME_1>\",\n        \"/Users/<USERNAME>/Library/Mobile\\\\ Documents/iCloud~md~obsidian/Documents/<VAULT_NAME_2>\"\n      ]\n    }\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "icloud",
        "obsidian",
        "knowledge",
        "obsidian mcp",
        "obsidian vaults",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "YassineTk--mcp-docs-provider": {
      "owner": "YassineTk",
      "name": "mcp-docs-provider",
      "url": "https://github.com/YassineTk/mcp-docs-provider",
      "imageUrl": "/freedevtools/mcp/pfp/YassineTk.webp",
      "description": "Enables AI models to access and query local markdown technical documentation, enhancing context-aware responses. Supports dynamic integration of documentation, allowing updates without server rebuilds.",
      "stars": 5,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-16T13:10:25Z",
      "readme_content": "# MCP Docs Provider\n\n[![smithery badge](https://smithery.ai/badge/@YassineTk/mcp-docs-provider)](https://smithery.ai/server/@YassineTk/mcp-docs-provider)\n\nDocumentation context provider for LLMs via MCP. This server enables AI models to seamlessly access and query your local markdown technical documentation.\n\n### Installing via Smithery\n\nTo install mcp-docs-provider for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@YassineTk/mcp-docs-provider):\n\n```bash\nnpx -y @smithery/cli install @YassineTk/mcp-docs-provider --client claude\n```\n\n## Configuration with cursor\n\nAdd this to your Cursor configuration file (`mcp.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-docs-provider\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-docs-provider\",\n        \"/path/to/your/documentation.md\"\n      ]\n    }\n  }\n}\n```\n\n- `/path/to/your/documentation.md` with the path to your markdown documentation file\n### No rebuild is required after updating your Markdown documentation.\n\n## MCP Client Rules Configuration\n\nAdd the following specification to your MCP Client Rules (eg. Cursor) (This ensures the documentation context is automatically used without explicitly mentioning \"Using my MCP\" in queries.):\n\"If a user ask you about ui pattern then follow the mcp-docs-provider MCP server.\"\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documentation",
        "markdown",
        "notetaking",
        "documentation enhancing",
        "mcp docs",
        "technical documentation"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "YuheiNakasaka--scrapbox-mcp": {
      "owner": "YuheiNakasaka",
      "name": "scrapbox-mcp",
      "url": "https://github.com/YuheiNakasaka/scrapbox-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/YuheiNakasaka.webp",
      "description": "Manage and organize notes using a URI system that supports creating new notes and generating summaries of existing notes. Notes can be accessed and listed by their URIs, with metadata available for each entry.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-14T15:10:38Z",
      "readme_content": "# scrapbox-mcp MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"scrapbox-mcp\": {\n      \"command\": \"/path/to/scrapbox-mcp/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scrapbox",
        "notes",
        "notetaking",
        "yuheinakasaka scrapbox",
        "organize notes",
        "existing notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ZubeidHendricks--azure-onenote-mcp-server": {
      "owner": "ZubeidHendricks",
      "name": "azure-onenote-mcp-server",
      "url": "https://github.com/ZubeidHendricks/azure-onenote-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ZubeidHendricks.webp",
      "description": "Implement interaction with Microsoft OneNote through standardized MCP methods, enabling management of notebooks and sections.",
      "stars": 19,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-19T00:36:06Z",
      "readme_content": "\n# OneNote MCP Server\n[![smithery badge](https://smithery.ai/badge/@modelcontextprotocol/server-onenote)](https://smithery.ai/server/@modelcontextprotocol/server-onenote)\n[![npm version](https://img.shields.io/npm/v/mcp-server-onenote.svg)](https://www.npmjs.com/package/mcp-server-onenote)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/94d05742-a658-483b-b3e3-f8a3e5ec6e23)\n\nA Model Context Protocol (MCP) server implementation for Microsoft OneNote, enabling AI language models to interact with OneNote through a standardized interface.\n\n## Features\n\n### Notebook Management\n- List all notebooks\n- Create new notebooks\n- Get notebook details\n- Delete notebooks\n\n### Section Management\n- List sections in a notebook\n- Create new sections\n- Get section details\n- Delete sections\n\n### Page Management\n- List pages in a section\n- Create new pages with HTML content\n- Read page content\n- Update page content\n- Delete pages\n- Search pages across notebooks\n\n## Installation\n\n### Installing from npm (Recommended)\n```bash\nnpm install -g mcp-server-onenote\n```\nThe package is now available on the npm registry as of April 27, 2025.\n\n### Running the Package\nAfter installation, you can run the package using:\n```bash\nmcp-server-onenote\n```\n\nOr with npx:\n```bash\nnpx mcp-server-onenote\n```\n\n### Installing via Smithery\n\nTo install OneNote Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@modelcontextprotocol/server-onenote):\n\n```bash\nnpx -y @smithery/cli install @modelcontextprotocol/server-onenote --client claude\n```\n\n### Installing from GitHub\n```bash\nnpm install -g github:ZubeidHendricks/azure-onenote-mcp-server\n```\n\n## Configuration\n\nSet the following environment variables:\n- `AZURE_TENANT_ID`: Your Azure tenant ID\n- `AZURE_CLIENT_ID`: Your Azure application (client) ID\n- `AZURE_CLIENT_SECRET`: Your Azure client secret\n\n## Using with MCP Client\n\nAdd this to your MCP client configuration (e.g. Claude Desktop):\n\n```json\n{\n  \"mcpServers\": {\n    \"onenote\": {\n      \"command\": \"mcp-server-onenote\",\n      \"env\": {\n        \"AZURE_TENANT_ID\": \"<YOUR_TENANT_ID>\",\n        \"AZURE_CLIENT_ID\": \"<YOUR_CLIENT_ID>\",\n        \"AZURE_CLIENT_SECRET\": \"<YOUR_CLIENT_SECRET>\"\n      }\n    }\n  }\n}\n```\n\n## Azure App Registration\n\n1. Go to Azure Portal and navigate to App registrations\n2. Create a new registration\n3. Add Microsoft Graph API permissions:\n   - Notes.ReadWrite.All\n   - Notes.Read.All\n4. Create a client secret\n5. Copy the tenant ID, client ID, and client secret for configuration\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run tests\nnpm test\n\n# Build\nnpm run build\n\n# Lint\nnpm run lint\n\n# Run locally\nnpm start\n```\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/zubeidhendricks-azure-onenote-mcp-server-badge.png)](https://mseep.ai/app/zubeidhendricks-azure-onenote-mcp-server)\n\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n\n## Changelog\n\n### 0.1.0 (2025-04-27)\n- Initial release\n- Core functionality for OneNote notebook, section, and page management\n- Published to npm registry\n\n### 0.1.1 (2025-04-27)\n- Added executable bin to package.json\n- Fixed issue where npx command couldn't determine executable to run\n- Updated README with clear running instructions\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "onenote",
        "notetaking",
        "azure",
        "azure onenote",
        "microsoft onenote",
        "onenote mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "adamdude828--mcp-browser-use": {
      "owner": "adamdude828",
      "name": "mcp-browser-use",
      "url": "https://github.com/adamdude828/mcp-browser-use",
      "imageUrl": "/freedevtools/mcp/pfp/adamdude828.webp",
      "description": "A lightweight note storage system that allows users to easily add and summarize notes. Notes can be accessed via a custom URI scheme and are summarized based on user-defined detail levels.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-05T01:13:10Z",
      "readme_content": "# browser-use MCP server\n\nA MCP server project\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/adamholsinger/mcp-servers/browser-use\",\n        \"run\",\n        \"browser-use\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"browser-use\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/adamholsinger/mcp-servers/browser-use run browser-use\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "note",
        "note storage",
        "notes notes",
        "summarize notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "adiom-data--lance-mcp": {
      "owner": "adiom-data",
      "name": "lance-mcp",
      "url": "https://github.com/adiom-data/lance-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/adiom-data.webp",
      "description": "Interact with on-disk documents through retrieval-augmented generation (RAG) and hybrid search capabilities in LanceDB.",
      "stars": 71,
      "forks": 16,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T04:12:32Z",
      "readme_content": "# 🗄️ LanceDB MCP Server for LLMS\n\n[![Node.js 18+](https://img.shields.io/badge/node-18%2B-blue.svg)](https://nodejs.org/en/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol (MCP) server that enables LLMs to interact directly the documents that they have on-disk through agentic RAG and hybrid search in LanceDB. Ask LLMs questions about the dataset as a whole or about specific documents.\n\n## ✨ Features\n\n- 🔍 LanceDB-powered serverless vector index and document summary catalog.\n- 📊 Efficient use of LLM tokens. The LLM itself looks up what it needs when it needs.\n- 📈 Security. The index is stored locally so no data is transferred to the Cloud when using a local LLM.\n\n## 🚀 Quick Start\n\nTo get started, create a local directory to store the index and add this configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"lancedb\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"lance-mcp\",\n        \"PATH_TO_LOCAL_INDEX_DIR\"\n      ]\n    }\n  }\n}\n```\n\n### Prerequisites\n\n- Node.js 18+\n- npx\n- MCP Client (Claude Desktop App for example)\n- Summarization and embedding models installed (see config.ts - by default we use Ollama models)\n  - `ollama pull snowflake-arctic-embed2`\n  - `ollama pull llama3.1:8b`\n\n### Demo\n\n<img src=\"https://github.com/user-attachments/assets/90bfdea9-9edd-4cf6-bb04-94c9c84e4825\" width=\"50%\">\n\n#### Local Development Mode:\n\n```json\n{\n  \"mcpServers\": {\n    \"lancedb\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"PATH_TO_LANCE_MCP/dist/index.js\",\n        \"PATH_TO_LOCAL_INDEX_DIR\"\n      ]\n    }\n  }\n}\n```\nUse `npm run build` to build the project.\n\nUse `npx @modelcontextprotocol/inspector dist/index.js PATH_TO_LOCAL_INDEX_DIR` to run the MCP tool inspector.\n\n### Seed Data\n\nThe seed script creates two tables in LanceDB - one for the catalog of document summaries, and another one - for vectorized documents' chunks.\nTo run the seed script use the following command:\n```console\nnpm run seed -- --dbpath <PATH_TO_LOCAL_INDEX_DIR> --filesdir <PATH_TO_DOCS>\n```\n\nYou can use sample data from the docs/ directory. Feel free to adjust the default summarization and embedding models in the config.ts file. If you need to recreate the index, simply rerun the seed script with the `--overwrite` option.\n\n#### Catalog\n\n- Document summary\n- Metadata\n\n#### Chunks\n\n- Vectorized document chunk\n- Metadata\n\n## 🎯 Example Prompts\n\nTry these prompts with Claude to explore the functionality:\n\n```plaintext\n\"What documents do we have in the catalog?\"\n\"Why is the US healthcare system so broken?\"\n```\n\n## 📝 Available Tools\n\nThe server provides these tools for interaction with the index:\n\n### Catalog Tools\n\n- `catalog_search`: Search for relevant documents in the catalog\n\n### Chunks Tools\n\n- `chunks_search`: Find relevant chunks based on a specific document from the catalog\n- `all_chunks_search`: Find relevant chunks from all known documents\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "retrieval",
        "documents",
        "lancedb",
        "documents retrieval",
        "adiom data",
        "retrieval augmented"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "akseyh--bear-mcp-server": {
      "owner": "akseyh",
      "name": "bear-mcp-server",
      "url": "https://github.com/akseyh/bear-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/akseyh.webp",
      "description": "Access and manage Bear Notes through a Model Context Protocol (MCP) server. Retrieve, search, and list notes and tags stored in a SQLite database.",
      "stars": 39,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-30T12:52:41Z",
      "readme_content": "# Bear MCP Server\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/akseyh-bear-mcp-server-badge.png)](https://mseep.ai/app/akseyh-bear-mcp-server)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/4ba4aa63-76ae-41d7-9d41-851d9acf7013)\n\nThis project is a Model Context Protocol (MCP) server that provides access to the [Bear Notes](https://bear.app).\n\nBear stores notes on SQLite database. This MCP server runs some SQL commands to access this notes.\nhttps://bear.app/faq/where-are-bears-notes-located\n\n\n\n## Features\n\n- Read notes\n- Search notes by text\n- List all tags\n\n## Installation\n\n```bash\n# Clone the project\ngit clone https://github.com/akseyh/bear-mcp-server\n\n# Change directory\ncd bear-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Claude Desktop Config\n\nUpdate your claude_desktop_config.json\n\n### Docker\n```json\n{\n    \"mcpServers\": {\n        \"bear\": {\n            \"command\": \"docker\",\n            \"args\": [\n                \"run\",\n                \"-v\",\n                \"/Users/[YOUR_USER_NAME]/Library/Group Containers/9K33E3U3T4.net.shinyfrog.bear/Application Data:/app/db\",\n                \"-i\",\n                \"akseyh/bear-mcp-server\"\n            ]\n        }\n    }\n}\n```\n\n### NPM\n```json\n{\n  \"mcpServers\": {\n    \"bear\": {\n      \"command\": \"npx\",\n      \"args\": [\n          \"bear-mcp-server\"\n      ]\n    }\n  }\n}\n```\n\nWhen the server is started, the following MCP tools become available:\n\n- `get_notes`: Retrieves all notes\n- `get_tags`: Lists all tags\n- `get_notes_like`: Searches for notes containing specific text\n\n## Requirements\n\n- Node.js\n- Bear note application (macOS)\n- Access to Bear database\n\n## License\n\nISC",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "sqlite",
        "database",
        "mcp server",
        "protocol mcp",
        "bear mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "aldrin-labs--solana-docs-mcp-server": {
      "owner": "aldrin-labs",
      "name": "solana-docs-mcp-server",
      "url": "https://github.com/aldrin-labs/solana-docs-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/aldrin-labs.webp",
      "description": "TypeScript-based MCP server that provides a system for creating and managing text notes, allowing access to notes via URIs along with metadata. It includes functionality for generating summaries of notes and listing note resources.",
      "stars": 4,
      "forks": 5,
      "license": "The Unlicense",
      "language": "JavaScript",
      "updated_at": "2025-05-09T16:21:36Z",
      "readme_content": "# solana-docs-server MCP Server\n[![smithery badge](https://smithery.ai/badge/@aldrin-labs/solana-docs-mcp-server)](https://smithery.ai/server/@aldrin-labs/solana-docs-mcp-server)\n\nsolana docs context\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n<a href=\"https://glama.ai/mcp/servers/v2cs13njts\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/v2cs13njts/badge\" alt=\"solana-docs-mcp-server MCP server\" /></a>\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install solana-docs-server MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@aldrin-labs/solana-docs-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @aldrin-labs/solana-docs-mcp-server --client claude\n```\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"solana-docs-server\": {\n      \"command\": \"/path/to/solana-docs-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "metadata",
        "note resources",
        "text notes",
        "notes listing"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "alekspetrov--mcp-docs-service": {
      "owner": "alekspetrov",
      "name": "mcp-docs-service",
      "url": "https://github.com/alekspetrov/mcp-docs-service",
      "imageUrl": "/freedevtools/mcp/pfp/alekspetrov.webp",
      "description": "Manage markdown documentation by creating, reading, updating, and deleting files while analyzing their health and improving quality. Enhance AI assistants' interactions with documentation through natural language processing capabilities.",
      "stars": 44,
      "forks": 9,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:19Z",
      "readme_content": "# MCP Documentation Service\n\n[![Test Coverage](https://codecov.io/gh/alekspetrov/mcp-docs-service/branch/main/graph/badge.svg)](https://codecov.io/gh/alekspetrov/mcp-docs-service)\n\n<a href=\"https://glama.ai/mcp/servers/icfujodcjd\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/icfujodcjd/badge\" />\n</a>\n\n## What is it?\n\nMCP Documentation Service is a Model Context Protocol (MCP) implementation for documentation management. It provides a set of tools for reading, writing, and managing markdown documentation with frontmatter metadata. The service is designed to work seamlessly with AI assistants like Claude in Cursor or Claude Desktop, making it easy to manage your documentation through natural language interactions.\n\n## Features\n\n- **Read and Write Documents**: Easily read and write markdown documents with frontmatter metadata\n- **Edit Documents**: Make precise line-based edits to documents with diff previews\n- **List and Search**: Find documents by content or metadata\n- **Navigation Generation**: Create navigation structures from your documentation\n- **Health Checks**: Analyze documentation quality and identify issues like missing metadata or broken links\n- **LLM-Optimized Documentation**: Generate consolidated single-document output optimized for large language models\n- **MCP Integration**: Seamless integration with the Model Context Protocol\n- **Frontmatter Support**: Full support for YAML frontmatter in markdown documents\n- **Markdown Compatibility**: Works with standard markdown files\n\n## Quick Start\n\n### Installation\n\nRequires Node to be installed on your machine.\n\n```bash\nnpm install -g mcp-docs-service\n```\n\nOr use directly with npx:\n\n```bash\nnpx mcp-docs-service /path/to/docs\n```\n\n### Cursor Integration\n\nTo use with Cursor, create a `.cursor/mcp.json` file in your project root:\n\n```json\n{\n  \"mcpServers\": {\n    \"docs-manager\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-docs-service\", \"/path/to/your/docs\"]\n    }\n  }\n}\n```\n\n### Claude Desktop Integration\n\nTo use MCP Docs Service with Claude Desktop:\n\n1. **Install Claude Desktop** - Download the latest version from [Claude's website](https://claude.ai/desktop).\n\n2. **Configure Claude Desktop for MCP**:\n\n   - Open Claude Desktop\n   - Click on the Claude menu and select \"Developer Settings\"\n   - This will create a configuration file at:\n     - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n     - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n3. **Edit the configuration file** to add the MCP Docs Service:\n\n```json\n{\n  \"mcpServers\": {\n    \"docs-manager\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-docs-service\", \"/path/to/your/docs\"]\n    }\n  }\n}\n```\n\nMake sure to replace `/path/to/your/docs` with the absolute path to your documentation directory.\n\n4. **Restart Claude Desktop** completely.\n\n5. **Verify the tool is available** - After restarting, you should see a green dot for docs-manager MCP tool (Cursor Settings > MCP)\n\n6. **Troubleshooting**:\n   - If the server doesn't appear, check the logs at:\n     - macOS: `~/Library/Logs/Claude/mcp*.log`\n     - Windows: `%APPDATA%\\Claude\\logs\\mcp*.log`\n   - Ensure Node.js is installed on your system\n   - Make sure the paths in your configuration are absolute and valid\n\n## Examples\n\n### Using with Claude in Cursor\n\nWhen using Claude in Cursor, you can invoke the tools in two ways:\n\n1. **Using Natural Language** (Recommended):\n   - Simply ask Claude to perform the task in plain English:\n\n```\nCan you search my documentation for anything related to \"getting started\"?\n```\n\n```\nPlease list all the markdown files in my docs directory.\n```\n\n```\nCould you check if there are any issues with my documentation?\n```\n\n2. **Using Direct Tool Syntax**:\n   - For more precise control, you can use the direct tool syntax:\n\n```\n@docs-manager mcp_docs_manager_read_document path=docs/getting-started.md\n```\n\n```\n@docs-manager mcp_docs_manager_list_documents recursive=true\n```\n\n```\n@docs-manager mcp_docs_manager_check_documentation_health\n```\n\n### Using with Claude Desktop\n\nWhen using Claude Desktop, you can invoke the tools in two ways:\n\n1. **Using Natural Language** (Recommended):\n\n```\nCan you read the README.md file for me?\n```\n\n```\nPlease find all documents that mention \"API\" in my documentation.\n```\n\n```\nI'd like you to check the health of our documentation and tell me if there are any issues.\n```\n\n2. **Using the Tool Picker**:\n   - Click the hammer icon in the bottom right corner of the input box\n   - Select \"docs-manager\" from the list of available tools\n   - Choose the specific tool you want to use\n   - Fill in the required parameters and click \"Run\"\n\nClaude will interpret your natural language requests and use the appropriate tool with the correct parameters. You don't need to remember the exact tool names or parameter formats - just describe what you want to do!\n\n### Common Tool Commands\n\nHere are some common commands you can use with the tools:\n\n#### Reading a Document\n\n```\n@docs-manager mcp_docs_manager_read_document path=docs/getting-started.md\n```\n\n#### Writing a Document\n\n```\n@docs-manager mcp_docs_manager_write_document path=docs/new-document.md content=\"---\ntitle: New Document\ndescription: A new document created with MCP Docs Service\n---\n\n# New Document\n\nThis is a new document created with MCP Docs Service.\"\n```\n\n#### Editing a Document\n\n```\n@docs-manager mcp_docs_manager_edit_document path=README.md edits=[{\"oldText\":\"# Documentation\", \"newText\":\"# Project Documentation\"}]\n```\n\n#### Searching Documents\n\n```\n@docs-manager mcp_docs_manager_search_documents query=\"getting started\"\n```\n\n#### Generating Navigation\n\n```\n@docs-manager mcp_docs_manager_generate_navigation\n```\n\n## Contributing\n\nContributions are welcome! Here's how you can contribute:\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/my-feature`\n3. Commit your changes: `git commit -am 'Add my feature'`\n4. Push to the branch: `git push origin feature/my-feature`\n5. Submit a pull request\n\nPlease make sure your code follows the existing style and includes appropriate tests.\n\n## Testing and Coverage\n\nThe MCP Docs Service has comprehensive test coverage to ensure reliability and stability. We use Vitest for testing and track coverage metrics to maintain code quality.\n\n### Running Tests\n\n```bash\n# Run all tests\nnpm test\n\n# Run tests with coverage report\nnpm run test:coverage\n```\n\nThe test suite includes:\n\n- Unit tests for utility functions and handlers\n- Integration tests for document flow\n- End-to-end tests for the MCP service\n\nOur tests are designed to be robust and handle potential errors in the implementation, ensuring they pass even if there are issues with the underlying code.\n\n### Coverage Reports\n\nAfter running the coverage command, detailed reports are generated in the `coverage` directory:\n\n- HTML report: `coverage/index.html`\n- JSON report: `coverage/coverage-final.json`\n\nWe maintain high test coverage to ensure the reliability of the service, with a focus on testing critical paths and edge cases.\n\n## Documentation Health\n\nWe use the MCP Docs Service to maintain the health of our own documentation. The health score is based on:\n\n- Completeness of metadata (title, description, etc.)\n- Presence of broken links\n- Orphaned documents (not linked from anywhere)\n- Consistent formatting and style\n\nYou can check the health of your documentation with:\n\n```bash\nnpx mcp-docs-service --health-check /path/to/docs\n```\n\n### Consolidated Documentation for LLMs\n\nMCP Docs Service can generate a consolidated documentation file optimized for large language models. This feature is useful when you want to provide your entire documentation set to an LLM for context:\n\n```bash\n# Generate consolidated documentation with default filename (consolidated-docs.md)\nnpx mcp-docs-service --single-doc /path/to/docs\n\n# Generate with custom output filename\nnpx mcp-docs-service --single-doc --output my-project-context.md /path/to/docs\n\n# Limit the total tokens in the consolidated documentation\nnpx mcp-docs-service --single-doc --max-tokens 100000 /path/to/docs\n```\n\nThe consolidated output includes:\n\n- Project metadata (name, version, description)\n- Table of contents with token counts for each section\n- All documentation organized by section with clear separation\n- Token counting to help stay within LLM context limits\n\n### Resilient by Default\n\nMCP Docs Service is designed to be resilient by default. The service automatically handles incomplete or poorly structured documentation without failing:\n\n- Returns a minimum health score of 80 even with issues\n- Automatically creates missing documentation directories\n- Handles missing documentation directories gracefully\n- Continues processing even when files have errors\n- Provides lenient scoring for metadata completeness and broken links\n\nThis makes the service particularly useful for:\n\n- Legacy projects with minimal documentation\n- Projects in early stages of documentation development\n- When migrating documentation from other formats\n\nThe service will always provide helpful feedback rather than failing, allowing you to incrementally improve your documentation over time.\n\n## Version History\n\n### v0.6.0\n\n- Added LLM-optimized consolidated documentation feature (--single-doc flag)\n- Added token counting for each documentation section\n- Added consolidated document output customization (--output flag)\n- Added maximum token limit configuration (--max-tokens flag)\n\n### v0.5.2\n\n- Enhanced resilience by automatically creating missing documentation directories\n- Improved tolerance mode with a minimum health score of 80\n- Made tolerance mode the default for health checks\n- Updated health check tool description to mention tolerance mode\n\n### v0.5.1\n\n- Added tolerance mode to health checks\n- Fixed issues with test suite reliability\n- Improved error handling in document operations\n\n## Documentation\n\nFor more detailed information, check out our documentation:\n\n- [Getting Started Guide](https://github.com/alekspetrov/mcp-docs-service/blob/main/docs/guides/getting-started.md)\n- [MCP Integration Guide](https://github.com/alekspetrov/mcp-docs-service/blob/main/docs/guides/mcp-integration.md)\n- [MCP Protocol Usage](https://github.com/alekspetrov/mcp-docs-service/blob/main/docs/guides/mcp-protocol-usage.md)\n- [API Reference](https://github.com/alekspetrov/mcp-docs-service/blob/main/docs/api/tools-reference.md)\n- [Examples](https://github.com/alekspetrov/mcp-docs-service/blob/main/docs/examples/basic-usage.md)\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documentation",
        "markdown",
        "docs",
        "docs service",
        "markdown documentation",
        "documentation natural"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "alexander-zuev--kollektiv-mcp": {
      "owner": "alexander-zuev",
      "name": "kollektiv-mcp",
      "url": "https://github.com/alexander-zuev/kollektiv-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/alexander-zuev.webp",
      "description": "Enables rapid retrieval-augmented generation over data by allowing users to upload data and chat through various MCP clients. Securely authenticates with OAuth 2.0 and communicates over HTTPS for a private experience.",
      "stars": 62,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T12:45:35Z",
      "readme_content": "# ⚠️ DEPRECATED - Kollektiv MCP\n\n> **🚨 IMPORTANT: This experimental MCP server is now DEPRECATED and will be shut down soon.**\n>\n> For updates, visit [kollektiv.sh](https://kollektiv.sh)\n>\n> **Please do not use this server for new projects.**\n\n---\n\n[![TypeScript](https://img.shields.io/badge/dynamic/regex?url=https%3A%2F%2Fgithub.com%2Falexander-zuev%2Fkollektiv-mcp%2Fraw%2Fmain%2Fpackage.json&search=%22typescript%22%3A%5Cs*%22%5C%5E%3F(%5B0-9%5D%2B%5C.%5B0-9%5D%2B)&replace=%241&logo=typescript&label=TypeScript)](https://www.typescriptlang.org)\n[![Runtime](https://img.shields.io/badge/Runtime-Cloudflare%20Workers-orange?logo=cloudflare)](https://workers.cloudflare.com/)\n[![Auth Supabase](https://img.shields.io/badge/Auth-Supabase-3ecf8e?logo=supabase)](https://supabase.io/)\n[![Build](https://github.com/alexander-zuev/kollektiv-mcp/actions/workflows/ci.yaml/badge.svg)](https://github.com/alexander-zuev/kollektiv-mcp/actions)\n[![codecov](https://codecov.io/gh/alexander-zuev/kollektiv-mcp/graph/badge.svg)](https://codecov.io/gh/alexander-zuev/kollektiv-mcp)\n[![License](https://img.shields.io/badge/License-Apache--2.0-blue?logo=apache&logoColor=white)](LICENSE)\n\n## ~~🧠 Your personal LLM knowledgebase~~ (DEPRECATED)\n\n**[Original Description - No longer maintained]** Kollektiv MCP enables you to build personal LLM knowledge base in seconds and use it from your\nfavorite editor / client. No more infrastructure setup, chunking, syncing - just upload your\ndata and start chatting. Supports all major MCP clients out of the box - Cursor, Windsurf,\nClaude Desktop, etc.\n\n## ⚠️ Deprecation Notice\n\nThis experimental MCP server is **DEPRECATED** and will be **shut down soon**. The service endpoints may stop working at any time without notice.\n\n**Do not use this for new projects or production use.**\n\n---\n\n## 💿 Connection (DEPRECATED - MAY NOT WORK)\n\nThe simplest way to connect to Kollektiv MCP is to copy & paste the following\nconfiguration into your editor's `mcp.json` file. All clients (Cursor, Windsurf, Claude Desktop,\nVSCode, PyCharm) support this `json` format\n\n```json\n{\n  \"mcpServers\": {\n    \"kollektiv\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://mcp.thekollektiv.ai/mcp\"\n      ]\n    }\n  }\n}\n```\n\n- **name:**\n    - `kollektiv`- you can you give the server any descriptive name\n- **command:**\n    - `npx` - ensure you have node.js install before running this command\n- **args:**\n    - `-y` - this enables your shell to install `mcp-remote` which is currently required to connect\n      to remote servers\n    - `mcp-remote` - this enables your client to connect to a remote MCP server (in this case\n      Kollektiv)\n    - `https://mcp.thekollektiv.ai/mcp` - is the endpoint you are connecting to\n\nCheck out a short demo below or read client-specific instructions on how to connect.\n\n\n\n### Cursor\n\nOpen Cursor and go to `Cursor Settings > MCP > Add new global MCP Server`. Paste the configuration\nabove and save (ctrl/cmd+s).\n\n\n\nIf configuration is successful and you haven't authenticated before, a browser window should\nopen guiding you to the login page.\n\n> 💡After saving the `json` it might take a while for Cursor to connect to the MCP. You might\n> need to restart Cursor or give it a bit of time. If you see 'Client is closed' or other errors,\n> taking these [troubleshooting](#connection-troubleshooting) steps might help.\n\nIf the connection is successful, you should see Kollektiv MCP go green in the settings page:\n\n\n\n### Windsurf\n\nOpen Windsurf and go to `Settings -> Windsurf Settings > MCP Servers > View raw config`.\nPaste the configuration above and save (ctrl/cmd+s).\n\n\n\nIf configuration is successful and you haven't authenticated before, a browser window should\nopen guiding you to the login page.\n\n> 💡Windsurf, in contrast to other clients, in my experience requires a restart of the app to\n> properly connect. If the server doesn't go 'green' after a while, try going over the\n> [troubleshooting](#connection-troubleshooting) steps below.\n\nIf connection is successful you should see Kollektiv MCP go green in the settings page:\n\n\n\n### Claude for Desktop\n\nOpen Claude Desktop and go to `Settings -> Developer > Edit config`. Open `json` file in any\ntext / code editor, paste the configuration above and save (ctrl/cmd+s).\n\n\n\nIf configuration is successful and you haven't authenticated before, a browser window should\nopen guiding you to the login page.\n\n> 💡Claude for Desktop requires a restart of the app to properly connect. If the server doesn't go\n> 'green' after a while, try going over the\n> [troubleshooting](#connection-troubleshooting) steps below.\n\nIf connection is successful you should see Kollektiv MCP go green in the settings page:\n\n\n\n### VS Code\n\nOpen VS Code and go to `Settings -> MCP: Add server > Command (stdio)`:\n\n- **command:**\n    - `npx -y mcp-remote https://mcp.thekollektiv.ai/mcp`\n- **name:**\n    - give your server a descriptive name such as `kollektiv`\n\nYour configuration `settings.json` should look similar to this:\n\n```json\n{\n  \"chat.mcp.discovery.enabled\": true,\n  \"chat.mcp.enabled\": true,\n  \"mcp\": {\n    \"servers\": {\n      \"kollektiv\": {\n        \"type\": \"stdio\",\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"mcp-remote\",\n          \"https://mcp.thekollektiv.ai/mcp\"\n        ]\n      }\n    }\n  }\n}\n```\n\n\n\nNext steps:\n\n- Click **Start** to connect to the MCP Server\n    - if you are not authenticated - you will be taken to the authentication page\n- Remember to add `\"chat.mcp.enabled\": true,` in your `settings.json`\n- Switch to **Agent** mode\n\n> 💡VS Code requires you to manually **start** your server, add `chat.mcp.enabled` and switch to\n> Agent mode to use MCP. If you do not see MCP tools in Agent mode, try going over the\n> [troubleshooting](#connection-troubleshooting) steps below.\n\nIf connection is successful you should see the tools exposed by Kollektiv MCP.\n\n\n\n### Cline\n\nOpen Cline, click on `MCP Servers > Edit Configuration` and add the following configuration to your\n`cline_mcp_settings.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"kollektiv\": {\n      \"timeout\": 60,\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://mcp.thekollektiv.ai/mcp\"\n      ],\n      \"transportType\": \"stdio\",\n      \"disabled\": false\n    }\n  }\n}\n```\n\n> Note: direct connections to remote servers that support Authorization are not supported yet by\n> Cline.\n\nIf connection is successful, you will be taken through to the authentication flow. After logging\nin, you should see Kollektiv MCP enabled in Cline.\n\n\n\n### Others (PyCharm, Claude Code)\n\nMost MCP clients follow the same `.json` format and should work with similar configuration steps\nas previously mentioned clients:\n\n1. Copy & paste configuration into your client's `json` configuration\n2. Restart the app\n3. Authenticate if not already\n4. Kollektiv MCP should go green & be available in chat / agent mode\n\nSuccess of your connection depends on many factors including but not limited to:\n\n- how strong developers of a particular client wanted to support MCP connections\n- whether the client supports the\n  latest [MCP spec](https://modelcontextprotocol.io/specification/2025-03-26) with Oauth support\n\nIf you are experiencing issues, going through these\nsimple [troubleshooting steps](#connection-troubleshooting) might help.\n\n### Supported clients\n\nI've validated connection works to the following MCP clients:\n\n- Cursor ✅\n- Windsurf ✅\n- Claude Desktop ✅\n- VS Code ✅\n- Cline ✅\n\nOther MCP clients _should_ be supported in theory, but in practice things might be a little\ndifferent. If you have a client you really want to connect to - let me know!\n\n## 🎮 Usage\n\n### Available Tools\n\n- `/query_documents` — Submit a question to the documents you’ve uploaded to Kollektiv and\n  receive an answer based on the sources from your documents.\n- `/list_documents` — Return a list of your synced documents together with basic metadata.\n- **Pro tip:** Include the phrase **“use Kollektiv MCP”** so the client knows to call these tools.\n\n#### Usage Tips\n\n- **Always add \"use Kollektiv MCP\"** — This tells the client which MCP server to use.\n- **Wait for document to be Available** — After upload, it takes 1–2 minutes before the document can\n  be queried.\n- **Rephrase queries when needed** — If the client generates a poor query, edit or rewrite it\n  yourself.\n\n## ❓ Troubleshooting & Support\n\nThis MCP server uses Cloudflare Agents SDK as well as other libraries to provide the most modern\nway for users to connect to and use MCP servers. MCP clients on the other hand have yet to\nimplement support for the 2 critical pieces:\n\n- remote MCP servers\n- MCP server authorization\n\nIn case you experience connection issues, please go through the following troubleshooting steps\nwhich should help you connect to the MCP server.\n\n### Support\n\nIf you require additional support please open a GitHub issue or reach out at support@thekollektiv.ai\n\n### Connection Troubleshooting\n\nIf you are getting **Invalid Authorization Request** error as below or can not connect for\nanother reason, try going through the steps below which should fix the issue.\n\n![Authorization Error](https://github.com/user-attachments/assets/1f950fdb-9b46-4799-9a33-5016b89bf117)\n\n1. **Ensure you're connecting to the correct endpoint**:\n    - Use `https://mcp.thekollektiv.ai/mcp` as the MCP endpoint.\n\n2. **Clean mcp-remote cache**:\n    - What this does:\n        - Removes cache of `mcp-remote` library that is used to connect to the remote server from a\n          client that doesn't support remote connections\n    - How:\n        - Run the following command in your terminal\n\n```bash\n# MacOS\nrm -rf ~/.mcp-auth  \n\n# Windows\nRemove-Item -Recurse -Force \"$env:USERPROFILE\\.mcp-auth\"\n```\n\n3. **Clear your browser data & cookies**:\n    - What this does:\n        - Removes browser cookies which are used to store authentication information when logging\n          into Kollektiv.\n    - How:\n        - Open your browser settings and delete browsing data for the last several hours\n\n> ⚠️ Note: this will sign you out from all active sessions, including Kollektiv. Only do this if\n> you're stuck in a broken login flow.\n\n4. **Restart your MCP client and try to reconnect to the MCP server:**\n    - What this does:\n        - MCP clients (Cursor, Windsurf, etc.) often cache connection / configuration settings from\n          previous runs which might interfere with authentication.\n    - How:\n        - Restart your editor / client\n        - Try reconnecting to the MCP server\n\n### Using MCP Inspector\n\nFor debugging purposes, you can use the MCP Inspector to connect to Kollektiv MCP server.\n\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\nSelect either SSE or Streamable HTTP transport\n\n- SSE: connect to the server at `https://mcp.thekollektiv.ai/sse`\n- Streamable HTTP: connect to the server at `https://mcp.thekollektiv.ai/mcp`\n\n## 🛠️ Implementation Details (for the 🤓)\n\n> If you're just here for Kollektiv - skip this. This section is for devs and builders curious\n> about how it works.\n\nKollektiv MCP is part of a modular system enabling users to set up RAG over their data\nin seconds — without the need to manage infrastructure, pipelines, or model configs.\n\nIt consists of three independently deployed services:\n\n- **MCP Server (Cloudflare Worker)**  \n  [`https://mcp.thekollektiv.ai`](https://mcp.thekollektiv.ai)  \n  Acts as a secure gateway for clients to interact with indexed data via the Model Context\n  Protocol. Supports OAuth.\n\n- **Frontend (React + Vite Worker)**  \n  [`https://thekollektiv.ai`](https://thekollektiv.ai)  \n  A clean, minimal user interface for uploading and managing their content.\n\n- **Backend (FastAPI)**  \n  [`https://api.thekollektiv.ai`](https://api.thekollektiv.ai)  \n  Handles source ingestion, validation, and orchestration of a RAG pipeline.\n\n## 🔐 Security\n\nKollektiv MCP implements several security measures:\n\n- Sign-in happens via the standard **OAuth 2.1 “Authorization Code” flow** powered by Supabase; only\n  short-lived, `HttpOnly`, `Secure` cookies are stored—no passwords ever touch this server.\n- All traffic is served **exclusively over HTTPS through Cloudflare’s edge**, and every sensitive\n  POST request carries a one-time CSRF/transaction token.\n- The backend runs inside the **Cloudflare Workers sandbox** (no local file-system, no long-running\n  processes), drastically reducing the attack surface.\n\n  For detailed disclosure guidelines see [SECURITY.md](./SECURITY.md).\n\n## 🪪 License\n\nReleased under the Apache License 2.0 — commercial support or alternative licensing:\nazuev@outlook.com",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "oauth",
        "authenticates",
        "mcp",
        "mcp clients",
        "oauth communicates",
        "authenticates oauth"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "arre-ankit--notion-mcp-server": {
      "owner": "arre-ankit",
      "name": "notion-mcp-server",
      "url": "https://github.com/arre-ankit/notion-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/arre-ankit.webp",
      "description": "Query and manipulate Notion Pages by creating, reading, and updating content directly from prompts. Seamlessly manage Notion databases and enhance productivity through integration.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2024-12-06T06:41:48Z",
      "readme_content": "### Notion MCP Server\n\nThis is a simple MCP server that allows you to query Notion Pages.\n\n### Installation\n\n```bash\ngit clone https://github.com/arre-ankit/notion-mcp-server.git\ncd notion-mcp-server\n```\n\n```bash\nnpm install\n```\n\n### Running the server\n\n```bash\nnpm run build\n```\n\n### Add Notion Integration\n- Go to https://www.notion.so/my-integrations\n- Click on \"New integration\"\n- Name it \"Claude MCP Server\"\n- Select \"Read\" and \"Write\" permissions for \"Pages\"\n- Copy the \"Integration Token\"\n\n### Add Claude Integration\nclaude_desktop_config.json\n```bash\n{\n  \"mcpServers\": \n    \"notion-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"Copy Path\"\n      ],\n      \"env\": {\n        \"NOTION_API_TOKEN\": \"Your Notion Token\"\n      }\n    }\n  }\n}\n```\n\n## How to use\n- Write a prompt to query Notion Pages.\n- Add link to the Notion Page from the link in the prompt.\n- Eg: https://www.notion.so/154916e48026802f97d4df6086787817\n\n\n\n\nPrompt: Make a new Databse entry in notion with this \nof list of movies to watch in 2024\nPage link https://www.notion.so/154916e48026802f97d4df6086787817 \nAdd the movie datase in this page\n\n\n\n\n![alt text](https://github.com/user-attachments/assets/64414f72-2965-4cf1-8e56-c231b88771a2)\n\n🤯 Woah it will be updated in your Notion Page!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notion",
        "databases",
        "pages",
        "notion databases",
        "notion pages",
        "manage notion"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "awkoy--notion-mcp-server": {
      "owner": "awkoy",
      "name": "notion-mcp-server",
      "url": "https://github.com/awkoy/notion-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/awkoy.webp",
      "description": "Integrates with Notion's API to facilitate the creation, updating, and management of pages and blocks. Enables AI interactions with Notion databases and supports batch operations for enhanced productivity.",
      "stars": 136,
      "forks": 19,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T12:06:44Z",
      "readme_content": "# Notion MCP Server\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![TypeScript](https://img.shields.io/badge/TypeScript-4.9+-blue)\n![Model Context Protocol](https://img.shields.io/badge/MCP-Enabled-purple)\n[![smithery badge](https://smithery.ai/badge/@awkoy/notion-mcp-server)](https://smithery.ai/server/@awkoy/notion-mcp-server)\n![NPM Downloads](https://img.shields.io/npm/dw/notion-mcp-server)\n![Stars](https://img.shields.io/github/stars/awkoy/notion-mcp-server)\n\n**Notion MCP Server** is a Model Context Protocol (MCP) server implementation that enables AI assistants to interact with Notion's API. This production-ready server provides a complete set of tools and endpoints for reading, creating, and modifying Notion content through natural language interactions.\n\n> 🚧 **Active Development**: Database support is now available! Comments and user management tools have been added. If you find this project useful, please consider giving it a star - it helps me know that this work is valuable to the community and motivates further development.\n\n<a href=\"https://glama.ai/mcp/servers/zrh07hteaa\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zrh07hteaa/badge\" />\n</a>\n\n## 📑 Table of Contents\n\n- [Getting Started & Integration](#-getting-started--integration)\n  - [Setup Process](#setup-process)\n  - [Cursor Integration](#cursor-integration)\n  - [Claude Desktop Integration](#claude-desktop-integration)\n- [Features](#-features)\n- [Documentation](#-documentation)\n  - [Available Tools](#available-tools)\n  - [Available Resources](#available-resources)\n- [Development](#-development)\n- [Technical Details](#-technical-details)\n- [Troubleshooting](#-troubleshooting)\n- [Contributing](#-contributing)\n- [License](#-license)\n\n## 🚀 Getting Started & Integration\n\n### Setup Process\n\n1. **Obtain a Notion API Key**\n   - Create an integration at [Notion Developers](https://www.notion.so/my-integrations)\n   - Copy your API key\n   \n2. **Enable Integration for Your Pages**\n   - Select an existing page or create a new one in Notion\n   - Click the \"...\" menu in the top right corner\n   - Go to \"Connections\" \n   - Find and enable your integration from the list\n   \n   \n\n3. **Choose Your Integration Method**\n   - Follow one of the integration options below based on your preferred MCP client\n\n4. **Ask Your AI Assistant to Interact with Notion**\n   - \"Create a new page with today's tasks\"\n   - \"Update my meeting notes in Notion\"\n   - \"Add bullet points to my meeting notes page\"\n   - \"Create a new database for tracking projects\"\n   - \"Add new entries to my task database\"\n   - \"Add a comment to my project page\"\n   - \"Show me all comments on this document\"\n   - \"List all users in my workspace\"\n   - \"Get information about a specific user\"\n\n### Cursor Integration\n\n#### Method 1: Using mcp.json\n\n1. Create or edit the `.cursor/mcp.json` file in your project directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"notion-mcp-server\": {\n      \"command\": \"env NOTION_TOKEN=YOUR_KEY NOTION_PAGE_ID=YOUR_PAGE_ID npx\",\n      \"args\": [\"-y\", \"notion-mcp-server\"]\n    }\n  }\n}\n```\n\n2. Replace `YOUR_KEY` and `YOUR_PAGE_ID` with your actual Notion API key and page ID\n3. Restart Cursor to apply the changes\n\n#### Method 2: Manual Mode\n\n1. Open Cursor and go to Settings\n2. Navigate to the \"MCP\" or \"Model Context Protocol\" section\n3. Click \"Add Server\" or equivalent\n4. Enter the following command in the appropriate field:\n\n```\nenv NOTION_TOKEN=YOUR_KEY NOTION_PAGE_ID=YOUR_PAGE_ID npx -y notion-mcp-server\n```\n\n5. Replace `YOUR_KEY` and `YOUR_PAGE_ID` with your actual Notion API key and page ID\n6. Save the settings and restart Cursor if necessary\n\n### Claude Desktop Integration\n\n1. Create or edit the `mcp.json` file in your configuration directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"notion-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"notion-mcp-server\"],\n      \"env\": {\n        \"NOTION_TOKEN\": \"YOUR_KEY\",\n        \"NOTION_PAGE_ID\": \"YOUR_PAGE_ID\"\n      }\n    }\n  }\n}\n```\n\n2. Replace `YOUR_KEY` and `YOUR_PAGE_ID` with your actual Notion API key and page ID\n3. Restart Claude Desktop to apply the changes\n\n## 🌟 Features\n\n- **📝 Notion Integration** - Interact with Notion databases, pages, and blocks\n- **🔌 Universal MCP Compatibility** - Works with all MCP clients including Cursor, Claude Desktop, Cline, and Zed\n- **🔍 Data Retrieval** - Fetch information from Notion pages, blocks, and databases\n- **✏️ Content Creation** - Create and update Notion pages and blocks\n- **📊 Block Management** - Append, update, and delete blocks within Notion pages\n- **💾 Database Operations** - Create, query, and update databases\n- **🔄 Batch Operations** - Perform multiple operations in a single request\n- **🗑️ Archive & Restore** - Archive and restore Notion pages\n- **🔎 Search Functionality** - Search Notion pages and databases by title\n- **💬 Comments Management** - Get, create, and reply to comments on pages and discussions\n- **👥 User Management** - Retrieve workspace users and user information\n\n## 📚 Documentation\n\n### Available Tools\n\nThe server provides the following consolidated tools for interacting with Notion:\n\n#### `notion_pages`\n\nA comprehensive tool for page operations including:\n- Creating new pages with specified content\n- Updating page properties\n- Archiving pages (moving to trash)\n- Restoring previously archived pages\n- Searching for pages by title\n\nExample operations:\n```javascript\n{\n  \"payload\": {\n    \"action\": \"create_page\", // One of: \"create_page\", \"archive_page\", \"restore_page\", \"search_pages\", \"update_page_properties\"\n    \"params\": {\n      // Parameters specific to the chosen action\n    }\n  }\n}\n```\n\n#### `notion_blocks`\n\nA complete toolkit for block operations including:\n- Retrieving block content\n- Fetching child blocks\n- Appending new blocks to a parent\n- Updating existing blocks\n- Deleting blocks\n- Performing batch operations (append, update, delete, mixed)\n\nExample operations:\n```javascript\n{\n  \"payload\": {\n    \"action\": \"append_block_children\", // One of: \"append_block_children\", \"retrieve_block\", \"retrieve_block_children\", \"update_block\", \"delete_block\", \"batch_append_block_children\", \"batch_update_blocks\", \"batch_delete_blocks\", \"batch_mixed_operations\"\n    \"params\": {\n      // Parameters specific to the chosen action\n    }\n  }\n}\n```\n\n#### `notion_database`\n\nA powerful tool for database interactions including:\n- Creating new databases with custom properties\n- Querying databases with filters and sorting\n- Updating database structure and properties\n\nExample operations:\n```javascript\n{\n  \"payload\": {\n    \"action\": \"create_database\", // One of: \"create_database\", \"query_database\", \"update_database\"\n    \"params\": {\n      // Parameters specific to the chosen action\n    }\n  }\n}\n```\n\n#### `notion_comments`\n\nA tool for managing comments on Notion content:\n- Retrieving comments from pages and blocks\n- Adding new comments to pages\n- Replying to existing discussions\n\nExample operations:\n```javascript\n{\n  \"payload\": {\n    \"action\": \"get_comments\", // One of: \"get_comments\", \"add_page_comment\", \"add_discussion_comment\"\n    \"params\": {\n      // Parameters specific to the chosen action\n    }\n  }\n}\n```\n\n#### `notion_users`\n\nA tool for accessing user information:\n- Listing all workspace users\n- Getting details about specific users\n- Retrieving information about the current bot user\n\nExample operations:\n```javascript\n{\n  \"payload\": {\n    \"action\": \"list_users\", // One of: \"list_users\", \"get_user\", \"get_bot_user\"\n    \"params\": {\n      // Parameters specific to the chosen action\n    }\n  }\n}\n```\n\n### Available Resources\n\nThe server currently does not expose any resources, focusing instead on tool-based operations.\n\n## 🛠 Development\n\n1. **Clone the Repository**\n   ```\n   git clone https://github.com/awkoy/notion-mcp-server.git\n   cd notion-mcp-server\n   ```\n\n2. **Install Dependencies**\n   ```\n   npm install\n   ```\n\n3. **Set Up Environment Variables**\n   - Create a `.env` file with:\n     ```\n     NOTION_TOKEN=your_notion_api_key\n     NOTION_PAGE_ID=your_notion_page_id\n     ```\n\n4. **Build the Project**\n   ```\n   npm run build\n   ```\n\n5. **Run the Inspector**\n   ```\n   npm run inspector\n   ```\n\n## 🔧 Technical Details\n\n- Built using TypeScript and the MCP SDK (version 1.7.0+)\n- Uses the official Notion API client (@notionhq/client v2.3.0+)\n- Follows the Model Context Protocol specification\n- Implements tools for CRUD operations on Notion pages, blocks, and databases\n- Supports efficient batch operations for performance optimization\n- Validates input/output with Zod schemas\n\n## ❓ Troubleshooting\n\n- **Common Issues**\n  - **Authentication Errors**: Ensure your Notion token has the correct permissions and integration is enabled for your pages/databases\n  - **Page Access Issues**: Make sure your integration has been added to the pages you're attempting to access\n  - **Rate Limiting**: Notion API has rate limits - use batch operations to optimize requests\n\n- **Getting Help**\n  - Create an issue on the [GitHub repository](https://github.com/awkoy/notion-mcp-server/issues)\n  - Check the [Notion API documentation](https://developers.notion.com/reference/intro)\n  - Visit the MCP community channels for assistance\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notion",
        "awkoy",
        "pages",
        "notion api",
        "notion databases",
        "awkoy notion"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "bart6114--my-bear-mcp-server": {
      "owner": "bart6114",
      "name": "my-bear-mcp-server",
      "url": "https://github.com/bart6114/my-bear-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/bart6114.webp",
      "description": "Connect to Bear notes in read-only mode, allowing retrieval, search, and management of notes without altering the data. Interact with notes through natural language queries to enhance productivity.",
      "stars": 13,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-17T18:41:57Z",
      "readme_content": "# Bear MCP Server\n\nA Model Context Protocol (MCP) server that allows AI assistants like Claude to read notes from the [Bear](https://bear.app/) note-taking app. This implementation connects directly to the Bear SQLite database in a read-only mode, ensuring your notes remain safe and unmodified.\n\n[![Read-Only](https://img.shields.io/badge/Mode-Read%20Only-brightgreen.svg)](https://github.com/bart6114/my-bear-mcp-server)\n[![Bear App](https://img.shields.io/badge/For-Bear%20App-blue.svg)](https://bear.app)\n[![Works with Claude](https://img.shields.io/badge/Works%20with-Claude%20AI-blueviolet.svg)](https://claude.ai)\n[![TypeScript](https://img.shields.io/badge/Made%20with-TypeScript-007ACC.svg)](https://www.typescriptlang.org/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Quick Start\n\n### Option 1: Install from GitHub (Recommended)\n\n```bash\nnpx github:bart6114/my-bear-mcp-server\n```\n\nThat's it! The server will start running and connect to your Bear database.\n\n### Option 2: Clone and Run Locally\n\n```bash\n# Clone the repository\ngit clone https://github.com/bart6114/my-bear-mcp-server.git\ncd my-bear-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build and run\nnpm run build\nnpm start\n```\n\n## Prerequisites\n\n- macOS with Bear app installed\n- Node.js 18 or higher\n\n## Configuration\n\n### For Claude Desktop App\n\nAdd this to your configuration file at `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"bear\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:bart6114/my-bear-mcp-server\"],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### For Claude VS Code Extension\n\nAdd this to your configuration file at `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"bear\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:bart6114/my-bear-mcp-server\"],\n      \"env\": {},\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\nThe Bear MCP server provides these read-only tools (all operations are non-destructive and cannot modify your Bear database):\n\n### open_note\n\nOpen a note by title or ID.\n\n### search_notes\n\nSearch for notes by term or tag.\n\n### get_tags\n\nGet all tags in Bear.\n\n### open_tag\n\nShow all notes with a specific tag.\n\n## Example Usage\n\nHere are examples of how to interact with the Bear MCP tools through AI assistants:\n\n### Searching for Notes\n\nAsk your AI assistant to search for notes containing specific terms:\n\n```\nCan you find all my notes about \"project management\"?\n```\n\n### Opening a Specific Note\n\nAsk your AI assistant to retrieve a specific note by title:\n\n```\nShow me my note titled \"Meeting Notes - March 2025\"\n```\n\n### Viewing Tags\n\nAsk your AI assistant to list all your Bear tags:\n\n```\nWhat tags do I have in my Bear notes?\n```\n\n### Finding Notes with a Specific Tag\n\nAsk your AI assistant to show notes with a particular tag:\n\n```\nShow me all notes with the #work tag\n```\n\n## Advanced Options\n\nIf your Bear database is in a non-standard location:\n\n```bash\nnpx github:bart6114/my-bear-mcp-server --db-path /path/to/your/database.sqlite\n```\n\n## Technical Details\n\n### Read-Only Implementation\n\nThis MCP server connects to your Bear SQLite database using a strict read-only connection. This is enforced at the database driver level:\n\n```typescript\n// From src/bear-db.ts\nthis.db = new Database(dbPath, { readonly: true });\n```\n\nThis ensures that:\n- No write operations can be performed on your database\n- Your notes and tags cannot be modified, deleted, or corrupted\n- The database connection will fail if write permissions are attempted\n\nAll operations performed by this server are SELECT queries that only retrieve data without modifying it.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "retrieval",
        "notetaking knowledge",
        "bear notes",
        "notes read"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "blackwhite084--playwright-plus-python-mcp": {
      "owner": "blackwhite084",
      "name": "playwright-plus-python-mcp",
      "url": "https://github.com/blackwhite084/playwright-plus-python-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/blackwhite084.webp",
      "description": "An MCP server that facilitates web automation tasks using Playwright tools and features a note storage system. It allows summarization of stored notes with customizable detail levels.",
      "stars": 153,
      "forks": 24,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-29T10:40:24Z",
      "readme_content": "# playwright-server MCP server\n\n\\A MCP server with playwright tools\\\n\n<a href=\"https://glama.ai/mcp/servers/c50bsocgzb\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/c50bsocgzb/badge\" alt=\"Playwright Server MCP server\" /></a>\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements the following tools:\n- `playwright_navigate`: Navigates to a specified URL. This operation will automatically create a new session if there is no active session.\n  - Requires a `url` argument (string).\n- `playwright_screenshot`: Takes a screenshot of the current page or a specific element.\n  - Requires a `name` argument (string) for the screenshot file name.\n  - Optional `selector` argument (string) to specify a CSS selector for the element to screenshot. If no selector is provided, a full-page screenshot is taken.\n- `playwright_click`: Clicks an element on the page using a CSS selector.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element to click.\n- `playwright_fill`: Fills out an input field.\n  - Requires a `selector` argument (string) to specify the CSS selector for the input field.\n  - Requires a `value` argument (string) to specify the value to fill.\n- `playwright_evaluate`: Executes JavaScript code in the browser console.\n  - Requires a `script` argument (string) to specify the JavaScript code to execute.\n- `playwright_click_text`: Clicks an element on the page by its text content.\n  - Requires a `text` argument (string) to specify the text content of the element to click.\n- `playwright_get_text_content`: Get the text content of all visiable elements.\n- `playwright_get_html_content`: Get the HTML content of the page.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element.\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Users\\xxxxx\\Documents\\project\\python\\mcp\\playwright-server\",\n        \"run\",\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\YUNYING\\Documents\\project\\python\\mcp\\playwright-server run playwright-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "mcp",
        "playwright tools",
        "stored notes",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "bossjones--datetime-mcp-server": {
      "owner": "bossjones",
      "name": "datetime-mcp-server",
      "url": "https://github.com/bossjones/datetime-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/bossjones.webp",
      "description": "Provides datetime information and simple note management functionalities, including current time, date formatting, and event scheduling prompts.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-02T16:32:41Z",
      "readme_content": "# DateTime MCP Server\n\nA MCP (Model Completions Protocol) server that provides datetime functionality along with simple note management.\n\n## Overview\n\nThis server implements the MCP protocol and offers various datetime-related tools and resources, including:\n\n- Current date and time in different formats\n- Date formatting utilities\n- Event scheduling prompts\n- Simple note management functionality\n\nThe server can be used by any MCP client to access date and time information and manage simple notes.\n\n## Features\n\n### Resources\n\nThe server provides the following resources:\n\n- `datetime://current` - The current date and time\n- `datetime://today` - Today's date in ISO format\n- `datetime://time` - The current time in 24-hour format\n- `note://internal/{name}` - User-created notes\n\n### Tools\n\nThe server provides the following tools:\n\n- `add-note` - Add a new note with a name and content\n- `get-current-time` - Get the current time in various formats (ISO, readable, Unix timestamp, RFC3339)\n- `format-date` - Format a date string according to a specified format pattern\n\n### Prompts\n\nThe server provides the following prompts:\n\n- `summarize-notes` - Creates a summary of all notes\n- `schedule-event` - Helps schedule an event at a specific time\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/bossjones/datetime-mcp-server.git\ncd datetime-mcp-server\n```\n\n2. Create a virtual environment:\n```bash\nuv venv\nsource .venv/bin/activate\n```\n\n3. Install the dependencies:\n```bash\nuv sync\n```\n\n## Usage\n\n### Running the Server\n\nTo run the server:\n\n```bash\nuv run python -m datetime_mcp_server.server\n```\n\nThe server will start and listen on stdin/stdout for MCP protocol messages.\n\n### Connecting to the Server\n\nYou can connect to the server using any MCP client. For example, using the MCP CLI:\n\n```bash\nuv run mcp connect datetime-mcp-server\n```\n\n## Development\n\n### Installing Development Dependencies\n\n```bash\n# Install all dependencies including development dependencies\nuv sync --dev\n```\n\n### Running Tests\n\nTo run the tests:\n\n```bash\nuv run pytest tests/\n```\n\n#### Unit Tests\n\nUnit tests verify that individual server functions work correctly:\n\n```bash\nuv run pytest tests/acceptance/test_server.py\n```\n\n#### Integration Tests\n\nIntegration tests verify that the server implements the MCP protocol correctly:\n\n```bash\nuv run pytest tests/acceptance/test_server_integration.py\n```\n\n### Dependency Management\n\n```bash\n# Add a production dependency\nuv add package_name\n\n# Add a development dependency\nuv add --dev package_name\n\n# Sync dependencies from lockfile\nuv sync --frozen\n\n# List outdated packages\nuv outdated\n```\n\n## Examples\n\n### Using the Server with MCP CLI\n\nList available resources:\n```bash\nuv run mcp resources list\n```\n\nRead a datetime resource:\n```bash\nuv run mcp resources read datetime://current\n```\n\nAdd a note:\n```bash\nuv run mcp tools call add-note --arguments '{\"name\": \"meeting\", \"content\": \"Team meeting at 3pm\"}'\n```\n\nGet the current time in ISO format:\n```bash\nuv run mcp tools call get-current-time --arguments '{\"format\": \"iso\"}'\n```\n\nFormat a date:\n```bash\nuv run mcp tools call format-date --arguments '{\"date\": \"2023-10-15\", \"format\": \"%B %d, %Y\"}'\n```\n\n## Makefile Tasks\n\nThe project includes several Makefile tasks to streamline development:\n\n```bash\n# Sync all dependencies with frozen lockfile\nmake uv-sync-all\n\n# Sync only development dependencies\nmake uv-sync-dev\n\n# Run tests\nmake test\n```\n\n## Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n## Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/malcolm/dev/bossjones/datetime-mcp-server run datetime-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nMIT\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run the tests with `uv run pytest`\n5. Submit a pull request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "datetime",
        "mcp",
        "notetaking",
        "datetime mcp",
        "provides datetime",
        "datetime information"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "brysontang--DeltaTask": {
      "owner": "brysontang",
      "name": "DeltaTask",
      "url": "https://github.com/brysontang/DeltaTask",
      "imageUrl": "/freedevtools/mcp/pfp/brysontang.webp",
      "description": "Manage tasks with the ability to prioritize based on urgency and effort, while integrating seamlessly with Obsidian. The server provides a full API for advanced task management, including task creation, updating, and synchronization.",
      "stars": 9,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-16T01:38:56Z",
      "readme_content": "# DeltaTask - Advanced Task Management System\n\nA powerful, locally-hosted task management application with Obsidian integration and a Model Context Protocol (MCP) server.\n\n## Features\n\n- **Smart Task Management**: Create tasks with urgency levels and effort estimates\n- **Prioritization Engine**: Automatically sorts tasks by urgency and effort\n- **Task Decomposition**: Split larger tasks into manageable subtasks\n- **Tagging System**: Organize tasks with custom tags\n- **Local Storage**: All data stored locally in SQLite database\n- **Obsidian Integration**: Bi-directional sync with Obsidian markdown files\n- **MCP Server**: Full API access through Model Context Protocol\n\n## Technical Details\n\n### Data Model\n\n- **Tasks**: Core task entity with properties:\n  - Title and description\n  - Urgency (1-5 scale, 5 being highest)\n  - Effort (1-21 scale, following Fibonacci sequence)\n  - Completion status\n  - Parent-child relationships for subtasks\n  - Tags for categorization\n\n### Database Schema\n\nThe application uses SQLite with the following tables:\n\n- `todos`: Stores all task items and their properties\n- `tags`: Stores unique tag names\n- `todo_tags`: Junction table for many-to-many relationship between tasks and tags\n\n### Obsidian Integration\n\nDeltaTask creates and maintains a structured Obsidian vault:\n\n- Task files with frontmatter metadata\n- Tag-based views for filtering tasks\n- Statistics dashboard\n- Bi-directional sync between Obsidian markdown and SQLite database\n\n### MCP API Endpoints\n\nThe MCP server exposes the following operations:\n\n- `get_task_by_id`: Get a specific task by ID\n- `search_tasks`: Find tasks by title, description, or tags\n- `create_task`: Create a new task\n- `update_task`: Update a task's properties\n- `delete_task`: Remove a task\n- `sync_tasks`: Sync tasks from Obsidian markdown into SQLite\n- `list_tasks`: List all tasks\n- `get_statistics`: Retrieve metrics about tasks\n- `create_subtasks`: Split a task into multiple subtasks\n- `get_all_tags`: Get all unique tag names\n- `get_subtasks`: Get subtasks for a given parent task\n- `finish_task`: Mark a task as completed\n\n## Getting Started\n\n### Prerequisites\n\n- Python 3.10+\n- SQLite3\n- Obsidian (optional, for markdown integration)\n\n### Installation\n\n1. Clone this repository\n2. Set up the Python environment using `uv`:\n\n   ```\n   # Create and activate the virtual environment\n   uv venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n   # Install dependencies\n   uv pip install -r requirements.txt\n   ```\n\n### Running the MCP Server\n\nThe DeltaTask MCP server can be used with Claude for Desktop:\n\n1. Configure Claude for Desktop:\n\n   - Open or create `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Add the DeltaTask server configuration:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"deltatask\": {\n         \"command\": \"uv\",\n         \"args\": [\n           \"--directory\",\n           \"/ABSOLUTE/PATH/TO/DeltaTask\",\n           \"run\",\n           \"server.py\"\n         ]\n       }\n     }\n   }\n   ```\n\n   - Restart Claude for Desktop\n\nIf you run into issues or want more details, check out the [Docs for the MCP](https://modelcontextprotocol.io/quickstart/server).\n\nFor instance from the docs:\n\nYou may need to put the full path to the `uv` executable in the `command` field. You can get this by running `which uv` on MacOS/Linux or `where uv` on Windows.\n\n2. Use the DeltaTask tools in Claude for Desktop by clicking the hammer icon\n\n## Model Context Protocol (MCP)\n\nThis application implements a Model Context Protocol approach for task management:\n\n1. **Structured Data Model**: Clearly defined schema for tasks with relationships\n2. **Priority Calculation**: Intelligent sorting based on multiple factors\n3. **Hierarchical Organization**: Parent-child relationships for task decomposition\n4. **Tagging System**: Flexible categorization for better context\n5. **Statistics and Insights**: Data aggregation for understanding task patterns\n6. **Obsidian Integration**: Markdown-based visualization and editing\n\n## License\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "deltatask",
        "tasks",
        "task",
        "deltatask manage",
        "task management",
        "manage tasks"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "chatmcp--mcp-server-chatsum": {
      "owner": "chatmcp",
      "name": "mcp-server-chatsum",
      "url": "https://github.com/chatmcp/mcp-server-chatsum",
      "imageUrl": "/freedevtools/mcp/pfp/chatmcp.webp",
      "description": "Summarizes chat messages using provided queries and prompts, facilitating the extraction of key information from conversations.",
      "stars": 1019,
      "forks": 100,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:31:58Z",
      "readme_content": "# mcp-server-chatsum\n\nThis MCP Server is used to summarize your chat messages.\n\n[中文说明](README_CN.md)\n\n\n\n> **Before you start**\n>\n> move to [chatbot](./chatbot) directory, follow the [README](./chatbot/README.md) to setup the chat database.\n>\n> start chatbot to save your chat messages.\n\n## Features\n\n### Resources\n\n### Tools\n\n- `query_chat_messages` - Query chat messages\n  - Query chat messages with given parameters\n  - Summarize chat messages based on the query prompt\n\n### Prompts\n\n## Development\n\n1. Set up environment variables:\n\ncreate `.env` file in the root directory, and set your chat database path.\n\n```txt\nCHAT_DB_PATH=path-to/chatbot/data/chat.db\n```\n\n2. Install dependencies:\n\n```bash\npnpm install\n```\n\nBuild the server:\n\n```bash\npnpm build\n```\n\nFor development with auto-rebuild:\n\n```bash\npnpm watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-chatsum\": {\n      \"command\": \"path-to/bin/node\",\n      \"args\": [\"path-to/mcp-server-chatsum/build/index.js\"],\n      \"env\": {\n        \"CHAT_DB_PATH\": \"path-to/mcp-server-chatsum/chatbot/data/chat.db\"\n      }\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\npnpm inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Community\n\n- [MCP Server Telegram](https://t.me/+N0gv4O9SXio2YWU1)\n- [MCP Server Discord](https://discord.gg/RsYPRrnyqg)\n\n## About the author\n\n- [idoubi](https://bento.me/idoubi)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chatmcp",
        "chatsum",
        "mcp",
        "chatmcp mcp",
        "summarizes chat",
        "chatsum summarizes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "chatmcp--mcp-server-flomo": {
      "owner": "chatmcp",
      "name": "mcp-server-flomo",
      "url": "https://github.com/chatmcp/mcp-server-flomo",
      "imageUrl": "/freedevtools/mcp/pfp/chatmcp.webp",
      "description": "Write notes directly to Flomo by capturing and sending text content through a simple integration, streamlining the note-taking workflow.",
      "stars": 54,
      "forks": 15,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T06:45:58Z",
      "readme_content": "# mcp-server-flomo MCP Server\n\nwrite notes to Flomo.\n\nThis is a TypeScript-based MCP server help you write notes to Flomo.\n\n\n\n## Features\n\n### Tools\n\n- `write_note` - Write text notes to Flomo\n  - Takes content as required parameters\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-flomo\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@chatmcp/mcp-server-flomo\"],\n      \"env\": {\n        \"FLOMO_API_URL\": \"https://flomoapp.com/iwh/xxx/xxx/\"\n      }\n    }\n  }\n}\n```\n\nFind Your Flomo_API_URL [here](https://v.flomoapp.com/mine?source=incoming_webhook)\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chatmcp",
        "flomo",
        "notes",
        "flomo write",
        "server flomo",
        "chatmcp mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "cyanheads--obsidian-mcp-server": {
      "owner": "cyanheads",
      "name": "obsidian-mcp-server",
      "url": "https://github.com/cyanheads/obsidian-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cyanheads.webp",
      "description": "Integrate LLMs with Obsidian vaults to manage knowledge bases through secure API communication and efficient file operations. Features comprehensive search capabilities for enhanced knowledge management.",
      "stars": 223,
      "forks": 36,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:42:55Z",
      "readme_content": "# Obsidian MCP Server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-^5.8.3-blue.svg)](https://www.typescriptlang.org/)\n[![Model Context Protocol](https://img.shields.io/badge/MCP%20SDK-^1.13.0-green.svg)](https://modelcontextprotocol.io/)\n[![Version](https://img.shields.io/badge/Version-2.0.7-blue.svg)](./CHANGELOG.md)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Production-brightgreen.svg)](https://github.com/cyanheads/obsidian-mcp-server/issues)\n[![GitHub](https://img.shields.io/github/stars/cyanheads/obsidian-mcp-server?style=social)](https://github.com/cyanheads/obsidian-mcp-server)\n\n**Empower your AI agents and development tools with seamless Obsidian integration!**\n\nAn MCP (Model Context Protocol) server providing comprehensive access to your Obsidian vault. Enables LLMs and AI agents to read, write, search, and manage your notes and files through the [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api).\n\nBuilt on the [`cyanheads/mcp-ts-template`](https://github.com/cyanheads/mcp-ts-template), this server follows a modular architecture with robust error handling, logging, and security features.\n\n## 🚀 Core Capabilities: Obsidian Tools 🛠️\n\nThis server equips your AI with specialized tools to interact with your Obsidian vault:\n\n| Tool Name                                                                              | Description                                                     | Key Features                                                                                                                                           |\n| :------------------------------------------------------------------------------------- | :-------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [`obsidian_read_note`](./src/mcp-server/tools/obsidianReadNoteTool/)                   | Retrieves the content and metadata of a specified note.         | - Read in `markdown` or `json` format.<br/>- Case-insensitive path fallback.<br/>- Includes file stats (creation/modification time).                   |\n| [`obsidian_update_note`](./src/mcp-server/tools/obsidianUpdateNoteTool/)               | Modifies notes using whole-file operations.                     | - `append`, `prepend`, or `overwrite` content.<br/>- Can create files if they don't exist.<br/>- Targets files by path, active note, or periodic note. |\n| [`obsidian_search_replace`](./src/mcp-server/tools/obsidianSearchReplaceTool/)         | Performs search-and-replace operations within a target note.    | - Supports string or regex search.<br/>- Options for case sensitivity, whole word, and replacing all occurrences.                                      |\n| [`obsidian_global_search`](./src/mcp-server/tools/obsidianGlobalSearchTool/)           | Performs a search across the entire vault.                      | - Text or regex search.<br/>- Filter by path and modification date.<br/>- Paginated results.                                                           |\n| [`obsidian_list_notes`](./src/mcp-server/tools/obsidianListNotesTool/)                 | Lists notes and subdirectories within a specified vault folder. | - Filter by file extension or name regex.<br/>- Provides a formatted tree view of the directory.                                                       |\n| [`obsidian_manage_frontmatter`](./src/mcp-server/tools/obsidianManageFrontmatterTool/) | Atomically manages a note's YAML frontmatter.                   | - `get`, `set`, or `delete` frontmatter keys.<br/>- Avoids rewriting the entire file for metadata changes.                                             |\n| [`obsidian_manage_tags`](./src/mcp-server/tools/obsidianManageTagsTool/)               | Adds, removes, or lists tags for a note.                        | - Manages tags in both YAML frontmatter and inline content.                                                                                            |\n| [`obsidian_delete_note`](./src/mcp-server/tools/obsidianDeleteNoteTool/)               | Permanently deletes a specified note from the vault.            | - Case-insensitive path fallback for safety.                                                                                                           |\n\n---\n\n## Table of Contents\n\n| [Overview](#overview) | [Features](#features) | [Configuration](#configuration) |\n| [Project Structure](#project-structure) | [Vault Cache Service](#vault-cache-service) |\n| [Tools](#tools) | [Resources](#resources) | [Development](#development) | [License](#license) |\n\n## Overview\n\nThe Obsidian MCP Server acts as a bridge, allowing applications (MCP Clients) that understand the Model Context Protocol (MCP) – like advanced AI assistants (LLMs), IDE extensions, or custom scripts – to interact directly and safely with your Obsidian vault.\n\nInstead of complex scripting or manual interaction, your tools can leverage this server to:\n\n- **Automate vault management**: Read notes, update content, manage frontmatter and tags, search across files, list directories, and delete files programmatically.\n- **Integrate Obsidian into AI workflows**: Enable LLMs to access and modify your knowledge base as part of their research, writing, or coding tasks.\n- **Build custom Obsidian tools**: Create external applications that interact with your vault data in novel ways.\n\nBuilt on the robust `mcp-ts-template`, this server provides a standardized, secure, and efficient way to expose Obsidian functionality via the MCP standard. It achieves this by communicating with the powerful [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) running inside your vault.\n\n> **Developer Note**: This repository includes a [.clinerules](.clinerules) file that serves as a developer cheat sheet for your LLM coding agent with quick reference for the codebase patterns, file locations, and code snippets.\n\n## Features\n\n### Core Utilities\n\nLeverages the robust utilities provided by `cyanheads/mcp-ts-template`:\n\n- **Logging**: Structured, configurable logging (file rotation, console, MCP notifications) with sensitive data redaction.\n- **Error Handling**: Centralized error processing, standardized error types (`McpError`), and automatic logging.\n- **Configuration**: Environment variable loading (`dotenv`) with comprehensive validation.\n- **Input Validation/Sanitization**: Uses `zod` for schema validation and custom sanitization logic.\n- **Request Context**: Tracking and correlation of operations via unique request IDs.\n- **Type Safety**: Strong typing enforced by TypeScript and Zod schemas.\n- **HTTP Transport Option**: Built-in Hono server with SSE, session management, CORS support, and pluggable authentication strategies (JWT and OAuth 2.1).\n\n### Obsidian Integration\n\n- **Obsidian Local REST API Integration**: Communicates directly with the Obsidian Local REST API plugin via HTTP requests managed by the `ObsidianRestApiService`.\n- **Comprehensive Command Coverage**: Exposes key vault operations as MCP tools (see [Tools](#tools) section).\n- **Vault Interaction**: Supports reading, updating (append, prepend, overwrite), searching (global text/regex, search/replace), listing, deleting, and managing frontmatter and tags.\n- **Targeting Flexibility**: Tools can target files by path, the currently active file in Obsidian, or periodic notes (daily, weekly, etc.).\n- **Vault Cache Service**: An intelligent in-memory cache that improves performance and resilience. It caches vault content, provides a fallback for the global search tool if the live API fails, and periodically refreshes to stay in sync.\n- **Safety Features**: Case-insensitive path fallbacks for file operations, clear distinction between modification types (append, overwrite, etc.).\n\n## Installation\n\n### Prerequisites\n\n1.  **Obsidian**: You need Obsidian installed.\n2.  **Obsidian Local REST API Plugin**: Install and enable the [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) within your Obsidian vault.\n3.  **API Key**: Configure an API key within the Local REST API plugin settings in Obsidian. You will need this key to configure the server.\n4.  **Node.js & npm**: Ensure you have Node.js (v18 or later recommended) and npm installed.\n\n## Configuration\n\n### MCP Client Settings\n\nAdd the following to your MCP client's configuration file (e.g., `cline_mcp_settings.json`). This configuration uses `npx` to run the server, which will automatically download & install the package if not already present:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"obsidian-mcp-server\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n        \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\",\n        \"OBSIDIAN_VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_ENABLE_CACHE\": \"true\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n**Note**: Verify SSL is set to false here because the Obsidian Local REST API plugin uses a self-signed certificate by default. If you are deploying this in a production environment, consider using the encrypted HTTPS endpoint and set `OBSIDIAN_VERIFY_SSL` to `true` after configuring your server to trust the self-signed certificate.\n\nIf you installed from source, change `command` and `args` to point to your local build:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/your/obsidian-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"YOUR_OBSIDIAN_API_KEY\",\n        \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\",\n        \"OBSIDIAN_VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_ENABLE_CACHE\": \"true\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\nConfigure the server using environment variables. These environmental variables are set within your MCP client config/settings (e.g. `cline_mcp_settings.json` for Cline, `claude_desktop_config.json` for Claude Desktop).\n\n| Variable                              | Description                                                              | Required             | Default                  |\n| :------------------------------------ | :----------------------------------------------------------------------- | :------------------- | :----------------------- |\n| **`OBSIDIAN_API_KEY`**                | API Key from the Obsidian Local REST API plugin.                         | **Yes**              | `undefined`              |\n| **`OBSIDIAN_BASE_URL`**               | Base URL of your Obsidian Local REST API.                                | **Yes**              | `http://127.0.0.1:27123` |\n| `MCP_TRANSPORT_TYPE`                  | Server transport: `stdio` or `http`.                                     | No                   | `stdio`                  |\n| `MCP_HTTP_PORT`                       | Port for the HTTP server.                                                | No                   | `3010`                   |\n| `MCP_HTTP_HOST`                       | Host for the HTTP server.                                                | No                   | `127.0.0.1`              |\n| `MCP_ALLOWED_ORIGINS`                 | Comma-separated origins for CORS. **Set for production.**                | No                   | (none)                   |\n| `MCP_AUTH_MODE`                       | Authentication strategy: `jwt` or `oauth`.                               | No                   | (none)                   |\n| **`MCP_AUTH_SECRET_KEY`**             | 32+ char secret for JWT. **Required for `jwt` mode.**                    | **Yes (if `jwt`)**   | `undefined`              |\n| `OAUTH_ISSUER_URL`                    | URL of the OAuth 2.1 issuer.                                             | **Yes (if `oauth`)** | `undefined`              |\n| `OAUTH_AUDIENCE`                      | Audience claim for OAuth tokens.                                         | **Yes (if `oauth`)** | `undefined`              |\n| `OAUTH_JWKS_URI`                      | URI for the JSON Web Key Set (optional, derived from issuer if omitted). | No                   | (derived)                |\n| `MCP_LOG_LEVEL`                       | Logging level (`debug`, `info`, `error`, etc.).                          | No                   | `info`                   |\n| `OBSIDIAN_VERIFY_SSL`                 | Set to `false` to disable SSL verification.                              | No                   | `true`                   |\n| `OBSIDIAN_ENABLE_CACHE`               | Set to `true` to enable the in-memory vault cache.                       | No                   | `true`                   |\n| `OBSIDIAN_CACHE_REFRESH_INTERVAL_MIN` | Refresh interval for the vault cache in minutes.                         | No                   | `10`                     |\n\n### Connecting to the Obsidian API\n\nTo connect the MCP server to your Obsidian vault, you need to configure the base URL (`OBSIDIAN_BASE_URL`) and API key (`OBSIDIAN_API_KEY`). The Obsidian Local REST API plugin offers two ways to connect:\n\n1.  **Encrypted (HTTPS) - Default**:\n\n    - The plugin provides a secure `https://` endpoint (e.g., `https://127.0.0.1:27124`).\n    - This uses a self-signed certificate, which will cause connection errors by default.\n    - **To fix this**, you must set the `OBSIDIAN_VERIFY_SSL` environment variable to `\"false\"`. This tells the server to trust the self-signed certificate.\n\n2.  **Non-encrypted (HTTP) - Recommended for Simplicity**:\n    - In the plugin's settings within Obsidian, you can enable the \"Non-encrypted (HTTP) Server\".\n    - This provides a simpler `http://` endpoint (e.g., `http://127.0.0.1:27123`).\n    - When using this URL, you do not need to worry about SSL verification.\n\n**Example `env` configuration for your MCP client:**\n\n_Using the non-encrypted HTTP URL (recommended):_\n\n```json\n\"env\": {\n  \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n  \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\"\n}\n```\n\n_Using the encrypted HTTPS URL:_\n\n```json\n\"env\": {\n  \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n  \"OBSIDIAN_BASE_URL\": \"https://127.0.0.1:27124\",\n  \"OBSIDIAN_VERIFY_SSL\": \"false\"\n}\n```\n\n## Project Structure\n\nThe codebase follows a modular structure within the `src/` directory:\n\n```\nsrc/\n├── index.ts           # Entry point: Initializes and starts the server\n├── config/            # Configuration loading (env vars, package info)\n│   └── index.ts\n├── mcp-server/        # Core MCP server logic and capability registration\n│   ├── server.ts      # Server setup, transport handling, tool/resource registration\n│   ├── resources/     # MCP Resource implementations (currently none)\n│   ├── tools/         # MCP Tool implementations (subdirs per tool)\n│   └── transports/    # Stdio and HTTP transport logic\n│       └── auth/      # Authentication strategies (JWT, OAuth)\n├── services/          # Abstractions for external APIs or internal caching\n│   └── obsidianRestAPI/ # Typed client for Obsidian Local REST API\n├── types-global/      # Shared TypeScript type definitions (errors, etc.)\n└── utils/             # Common utility functions (logger, error handler, security, etc.)\n```\n\nFor a detailed file tree, run `npm run tree` or see [docs/tree.md](docs/tree.md).\n\n## Vault Cache Service\n\nThis server includes an intelligent **in-memory cache** designed to enhance performance and resilience when interacting with your vault.\n\n### Purpose and Benefits\n\n- **Performance**: By caching file content and metadata, the server can perform search operations much faster, especially in large vaults. This reduces the number of direct requests to the Obsidian Local REST API, resulting in a snappier experience.\n- **Resilience**: The cache acts as a fallback for the `obsidian_global_search` tool. If the live API search fails or times out, the server seamlessly uses the cache to provide results, ensuring that search functionality remains available even if the Obsidian API is temporarily unresponsive.\n- **Efficiency**: The cache is designed to be efficient. It performs an initial build on startup and then periodically refreshes in the background by checking for file modifications, ensuring it stays reasonably up-to-date without constant, heavy API polling.\n\n### How It Works\n\n1.  **Initialization**: When enabled, the `VaultCacheService` builds an in-memory map of all `.md` files in your vault, storing their content and modification times.\n2.  **Periodic Refresh**: The cache automatically refreshes at a configurable interval (defaulting to 10 minutes). During a refresh, it only fetches content for files that are new or have been modified since the last check.\n3.  **Proactive Updates**: After a file is modified through a tool like `obsidian_update_file`, the service proactively updates the cache for that specific file, ensuring immediate consistency.\n4.  **Search Fallback**: The `obsidian_global_search` tool first attempts a live API search. If this fails, it automatically falls back to searching the in-memory cache.\n\n### Configuration\n\nThe cache is enabled by default but can be configured via environment variables:\n\n- **`OBSIDIAN_ENABLE_CACHE`**: Set to `true` (default) or `false` to enable or disable the cache service.\n- **`OBSIDIAN_CACHE_REFRESH_INTERVAL_MIN`**: Defines the interval in minutes for the periodic background refresh. Defaults to `10`.\n\n## Tools\n\nThe Obsidian MCP Server provides a suite of tools for interacting with your vault, callable via the Model Context Protocol.\n\n| Tool Name                     | Description                                               | Key Arguments                                                 |\n| :---------------------------- | :-------------------------------------------------------- | :------------------------------------------------------------ |\n| `obsidian_read_note`          | Retrieves the content and metadata of a note.             | `filePath`, `format?`, `includeStat?`                         |\n| `obsidian_update_note`        | Modifies a file by appending, prepending, or overwriting. | `targetType`, `content`, `targetIdentifier?`, `wholeFileMode` |\n| `obsidian_search_replace`     | Performs search-and-replace operations in a note.         | `targetType`, `replacements`, `useRegex?`, `replaceAll?`      |\n| `obsidian_global_search`      | Searches the entire vault for content.                    | `query`, `searchInPath?`, `useRegex?`, `page?`, `pageSize?`   |\n| `obsidian_list_notes`         | Lists notes and subdirectories in a folder.               | `dirPath`, `fileExtensionFilter?`, `nameRegexFilter?`         |\n| `obsidian_manage_frontmatter` | Gets, sets, or deletes keys in a note's frontmatter.      | `filePath`, `operation`, `key`, `value?`                      |\n| `obsidian_manage_tags`        | Adds, removes, or lists tags in a note.                   | `filePath`, `operation`, `tags`                               |\n| `obsidian_delete_note`        | Permanently deletes a note from the vault.                | `filePath`                                                    |\n\n_Note: All tools support comprehensive error handling and return structured JSON responses._\n\n## Resources\n\n**MCP Resources are not implemented in this version.**\n\nThis server currently focuses on providing interactive tools for vault manipulation. Future development may introduce resource capabilities (e.g., exposing notes or search results as readable resources).\n\n## Development\n\n### Build and Test\n\nTo get started with development, clone the repository, install dependencies, and use the following scripts:\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project (compile TS to JS in dist/ and make executable)\nnpm run rebuild\n\n# Start the server locally using stdio transport\nnpm start:stdio\n\n# Start the server using http transport\nnpm run start:http\n\n# Format code using Prettier\nnpm run format\n\n# Inspect the server's capabilities using the MCP Inspector tool\nnpm run inspect:stdio\n# or for the http transport:\nnpm run inspect:http\n```\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\nBuilt with the <a href=\"https://modelcontextprotocol.io/\">Model Context Protocol</a>\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "llms",
        "obsidian",
        "vaults",
        "llms obsidian",
        "obsidian vaults",
        "obsidian mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "dailydaniel--logseq-mcp": {
      "owner": "dailydaniel",
      "name": "logseq-mcp",
      "url": "https://github.com/dailydaniel/logseq-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/dailydaniel.webp",
      "description": "Integrate with Logseq's knowledge base to create and manage pages, blocks, and organize information programmatically. Enhance productivity by automating workflows and interacting directly with data within Logseq.",
      "stars": 24,
      "forks": 11,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-25T15:07:13Z",
      "readme_content": "# Logseq MCP Server\nA Model Context Protocol server that provides direct integration with Logseq's knowledge base. This server enables LLMs to interact with Logseq graphs, create pages, manage blocks, and organize information programmatically.\n\n<a href=\"https://glama.ai/mcp/servers/@dailydaniel/logseq-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@dailydaniel/logseq-mcp/badge\" alt=\"Logseq Server MCP server\" />\n</a>\n\n## Usage with Claude Desktop\n```json\n{\n  \"mcpServers\": {\n    \"logseq\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-logseq\"],\n      \"env\": {\n        \"LOGSEQ_API_TOKEN\": \"<YOUR_KEY>\",\n        \"LOGSEQ_API_URL\": \"http://127.0.0.1:12315\"\n      }\n    }\n  }\n}\n```\n\n### If you have errors, use 0.0.1 version:\n```json\n{\n  \"mcpServers\": {\n    \"logseq\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-logseq==0.0.1\"],\n      \"env\": {\n        \"LOGSEQ_API_TOKEN\": \"<YOUR_KEY>\",\n        \"LOGSEQ_API_URL\": \"http://127.0.0.1:12315\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n### Block Operations\n- **logseq_insert_block** - Create new blocks in Logseq\n  **Parameters**:\n  - `parent_block` (string): Parent block UUID or page name\n  - `content` (string, required): Block content\n  - `is_page_block` (boolean): Create as page-level block\n  - `before` (boolean): Insert before parent block\n  - `custom_uuid` (string): Custom UUIDv4 for block\n\n- **logseq_edit_block** - Enter block editing mode\n  **Parameters**:\n  - `src_block` (string, required): Block UUID\n  - `pos` (number): Cursor position\n\n- **logseq_exit_editing_mode** - Exit editing mode\n  **Parameters**:\n  - `select_block` (boolean): Keep block selected\n\n### Page Operations\n- **logseq_create_page** - Create new pages\n  **Parameters**:\n  - `page_name` (string, required): Page name\n  - `properties` (object): Page properties\n  - `journal` (boolean): Create as journal page\n  - `format` (string): Page format (markdown/org)\n\n- **logseq_get_page** - Get page details\n  **Parameters**:\n  - `src_page` (string, required): Page identifier\n  - `include_children` (boolean): Include child blocks\n\n- **logseq_get_all_pages** - List all pages\n  **Parameters**:\n  - `repo` (string): Repository name\n\n### Content Retrieval\n- **logseq_get_current_page** - Get active page/block\n  **Parameters**: None\n\n- **logseq_get_current_blocks_tree** - Current page's block hierarchy\n  **Parameters**: None\n\n- **logseq_get_editing_block_content** - Get content of active block\n  **Parameters**: None\n\n- **logseq_get_page_blocks_tree** - Get page's block structure\n  **Parameters**:\n  - `src_page` (string, required): Page identifier\n\n## Prompts\n\n### logseq_insert_block\nCreate a new block in Logseq\n**Arguments:**\n- `parent_block`: Parent block reference (page name or UUID)\n- `content`: Block content\n- `is_page_block`: Set true for page-level blocks\n\n### logseq_create_page\nCreate a new Logseq page\n**Arguments:**\n- `page_name`: Name of the page\n- `properties`: Page properties as JSON\n- `journal`: Set true for journal pages\n\n## Installation\n\n### Using pip\n```bash\npip install mcp-server-logseq\n```\n### From source\n```bash\ngit clone https://github.com/dailydaniel/logseq-mcp.git\ncd logseq-mcp\ncp .env.example .env\nuv sync\n```\nRun the server:\n```bash\npython -m mcp_server_logseq\n```\n## Configuration\n### API Key\n1. Generate API token in Logseq: API → Authorization tokens\n2. Set environment variable:\n```bash\nexport LOGSEQ_API_TOKEN=your_token_here\n```\nOr pass via command line:\n```bash\npython -m mcp_server_logseq --api-key=your_token_here\n```\n### Graph Configuration\nDefault URL: http://localhost:12315\nTo customize:\n```bash\npython -m mcp_server_logseq --url=http://your-logseq-instance:port\n```\n## Examples\n## Create meeting notes page\n```plaintext\nCreate new page \"Team Meeting 2024-03-15\" with properties:\n- Tags: #meeting #engineering\n- Participants: Alice, Bob, Charlie\n- Status: pending\n```\n### Add task block to existing page\n```plaintext\nAdd task to [[Project Roadmap]]:\n- [ ] Finalize API documentation\n- Due: 2024-03-20\n- Priority: high\n```\n### Create journal entry with first block\n```plaintext\nCreate journal entry for today with initial content:\n- Morning standup completed\n- Started work on new authentication system\n```\n## Debugging\n```bash\nnpx @modelcontextprotocol/inspector uv --directory . run mcp-server-logseq\n```\n## Contributing\nWe welcome contributions to enhance Logseq integration:\n- Add new API endpoints (page linking, query support)\n- Improve block manipulation capabilities\n- Add template support\n- Enhance error handling",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "logseq",
        "workflows",
        "automating",
        "logseq knowledge",
        "dailydaniel logseq",
        "logseq mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "danosb--onenote-mcp": {
      "owner": "danosb",
      "name": "onenote-mcp",
      "url": "https://github.com/danosb/onenote-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/danosb.webp",
      "description": "Access and manage OneNote notebooks through AI interfaces, enabling note creation, content reading, search functionality, and summarization directly within the AI session.",
      "stars": 21,
      "forks": 10,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T17:10:15Z",
      "readme_content": "# OneNote MCP Server\n\nA Model Context Protocol (MCP) server implementation that enables AI language models like Claude and other LLMs to interact with Microsoft OneNote.\n\n> This project is based on [azure-onenote-mcp-server](https://github.com/ZubeidHendricks/azure-onenote-mcp-server) by Zubeid Hendricks, with modifications to simplify authentication and improve usability.\n\n## What Does This Do?\n\nThis server allows AI assistants to:\n- Access your OneNote notebooks, sections, and pages\n- Create new pages in your notebooks\n- Search through your notes\n- Read complete note content, including HTML formatting and text\n- Analyze and summarize your notes directly\n\nAll of this happens directly through the AI interface without you having to switch contexts.\n\n## Using with AI Assistants\n\n### Setup for Cursor\n\n1. Clone this repository and follow the installation steps below\n2. Start the MCP server: `npm start`\n3. Register the server in Cursor:\n   - Open Cursor preferences (Cmd+, on Mac or Ctrl+, on Windows)\n   - Go to the \"MCP\" tab\n   - Add a new MCP server with these settings:\n     - Name: `onenote` \n     - Command: `node`\n     - Args: `[\"/path/to/your/onenote-mcp.mjs\"]` (use absolute path)\n\n   Here's the complete JSON configuration example:\n   ```json\n   {\n     \"mcpServers\": {\n       \"onenote\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/your/onenote-mcp.mjs\"],\n         \"env\": {}\n       }\n     }\n   }\n   ```\n   \n4. Restart Cursor\n5. In Cursor, you can now interact with your OneNote data using natural language:\n\n```\nCan you show me my OneNote notebooks?\nCreate a new page in my first notebook with a summary of this conversation\nFind notes related to \"project planning\" in my OneNote\n```\n\nThe first time you ask about OneNote, the AI will guide you through the authentication process.\n\n### Setup for Claude Desktop (or other MCP-compatible assistants)\n\n1. Clone this repository and follow the installation steps below\n2. Start the MCP server: `npm start`\n3. In the Claude Desktop settings, add the OneNote MCP server:\n   - Name: `onenote`\n   - Command: `node`\n   - Args: `[\"/path/to/your/onenote-mcp.mjs\"]` (use absolute path)\n   \n   JSON configuration example:\n   ```json\n   {\n     \"mcpServers\": {\n       \"onenote\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/your/onenote-mcp.mjs\"],\n         \"env\": {}\n       }\n     }\n   }\n   ```\n   \n4. You can now ask Claude to interact with your OneNote data\n\n## Features\n\n- Authentication with Microsoft OneNote using device code flow (no Azure setup needed)\n- List all notebooks, sections, and pages\n- Create new pages with HTML content\n- Read complete page content, including HTML formatting\n- Extract text content for AI analysis and summaries\n- Summarize content of all pages in a single operation\n- Read full content of all pages in a readable format\n- Search across your notes\n\n## Installation\n\n### Prerequisites\n\n- Node.js 16 or higher (install from [nodejs.org](https://nodejs.org/))\n- An active Microsoft account with access to OneNote\n- Git (install from [git-scm.com](https://git-scm.com/))\n\n### Step 1: Clone the Repository\n\n```bash\ngit clone https://github.com/yourusername/onenote-mcp.git\ncd onenote-mcp\n```\n\n### Step 2: Download the TypeScript SDK\n\nThis project requires the MCP TypeScript SDK, which needs to be downloaded separately:\n\n```bash\ngit clone https://github.com/modelcontextprotocol/typescript-sdk.git\ncd typescript-sdk\nnpm install\nnpm run build\ncd ..\n```\n\n### Step 3: Install Project Dependencies\n\n```bash\nnpm install\n```\n\n### Step 4: Start the MCP Server\n\n```bash\nnpm start\n```\n\nThis will start the MCP server, and you'll see a message:\n```\nServer started successfully.\nUse the \"authenticate\" tool to start the authentication flow,\nor use \"saveAccessToken\" if you already have a token.\n```\n\n### Step 5: Authenticate Through Your AI Assistant\n\nOnce the server is running, you can authenticate directly through your AI assistant:\n\n1. In Cursor, Anthropic's Claude Desktop, or any MCP-compatible assistant, ask to authenticate with OneNote:\n   ```\n   Can you authenticate with my OneNote account?\n   ```\n\n2. The AI will trigger the authentication flow and provide you with:\n   - A URL (typically microsoft.com/devicelogin)\n   - A code to enter\n\n3. Go to the URL, enter the code, and sign in with your Microsoft account\n\n4. After successful authentication, you can start using OneNote with your AI assistant\n\n## Available MCP Tools\n\nOnce authenticated, the following tools are available for AI assistants to use:\n\n| Tool Name | Description |\n|-----------|-------------|\n| `authenticate` | Start the Microsoft authentication flow |\n| `listNotebooks` | Get a list of all your OneNote notebooks |\n| `getNotebook` | Get details of a specific notebook |\n| `listSections` | List all sections in a notebook |\n| `listPages` | List all pages in a section |\n| `getPage` | Get the complete content of a specific page, including HTML formatting |\n| `createPage` | Create a new page with HTML content |\n| `searchPages` | Search for pages across your notebooks |\n\n## Example Interactions\n\nHere are some examples of how you can interact with the OneNote MCP through your AI assistant:\n\n```\nUser: Can you show me my OneNote notebooks?\nAI: (uses listNotebooks) I found 3 notebooks: \"Work\", \"Personal\", and \"Projects\"\n\nUser: What sections are in my Projects notebook?\nAI: (uses listSections) Your Projects notebook has the following sections: \"Active Projects\", \"Ideas\", and \"Completed\"\n\nUser: Create a new page in Projects with today's date as the title\nAI: (uses createPage) I've created a new page titled \"2025-04-12\" in your Projects notebook\n\nUser: Find all my notes about machine learning\nAI: (uses searchPages) I found 5 pages with content related to machine learning...\n\nUser: Can you read and summarize my notes on the \"Project Requirements\" page?\nAI: (uses getPage) Based on your \"Project Requirements\" page, here's a summary: The project requires Python 3.8+, integration with AWS services, and completion by Q3. Key deliverables include a web dashboard, API, and documentation...\n\nUser: Extract all the action items from my \"Team Meeting\" notes\nAI: (uses getPage) Here are all the action items from your \"Team Meeting\" notes:\n1. John to complete API documentation by Friday\n2. Sarah to schedule design review meeting\n3. Team to finalize Q3 roadmap by end of month\n\nUser: Summarize content of all my OneNote pages\nAI: (runs get-all-page-contents.js) Here's a summary of all your pages:\n- Questions: Contains strategic business questions about competitor analysis\n- 2025-04-12: Discussion about monetization strategy for bank transfers\n- Role Specification: Details about the Chief Payments Officer position\n...\n\nUser: I want to read through all my OneNote pages so I can ask questions about them\nAI: (runs read-all-pages.js) I've retrieved the full content of all your pages in a readable format. Now you can ask me specific questions about any of the content.\n```\n\n## Advanced: Direct Script Usage\n\nFor testing or development purposes, you can also use the provided scripts directly:\n\n```bash\n# Authenticate with Microsoft\nnpm run auth\n\n# List your notebooks\nnpm run list-notebooks\n\n# List sections in your first notebook\nnpm run list-sections\n\n# List pages in the first section\nnpm run list-pages\n\n# Create a new page\nnpm run create-page\n\n# Summarize content of all pages\nnode get-all-page-contents.js\n\n# Read full content of all pages\nnode read-all-pages.js\n```\n\n## Troubleshooting\n\n### Authentication Issues\n\n- If authentication fails, make sure you're using a modern browser without tracking prevention\n- Try clearing browser cookies and cache\n- If you get \"expired_token\" errors, restart the authentication process\n\n### Server Won't Start\n\n- Verify Node.js is installed (version 16+): `node --version`\n- Make sure all dependencies are installed: `npm install`\n- Check that the TypeScript SDK was built correctly\n\n### AI Can't Connect to the Server\n\n- Ensure the MCP server is running (`npm start`)\n- Check your AI assistant's settings to make sure it's configured to use MCP\n- For Cursor, make sure it's the latest version that supports MCP\n\n## Security Notes\n\n- Authentication tokens are stored locally in `.access-token.txt`\n- Tokens grant access to your OneNote data, so keep them secure\n- Tokens expire after some time, requiring re-authentication\n- No Azure setup or API keys are required\n\n## Credits\n\nThis project builds upon the [azure-onenote-mcp-server](https://github.com/ZubeidHendricks/azure-onenote-mcp-server) by Zubeid Hendricks, with a focus on simplifying the authentication process and improving the user experience with AI assistants.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "onenote",
        "notetaking",
        "notebooks",
        "danosb onenote",
        "onenote notebooks",
        "manage onenote"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "devassistantai--mcp-servers": {
      "owner": "devassistantai",
      "name": "mcp-servers",
      "url": "https://github.com/devassistantai/mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/devassistantai.webp",
      "description": "Store and retrieve user information across chats using a local knowledge graph to enable persistent memory for an AI assistant. Manage entities, relations, and observations to personalize interactions effectively.",
      "stars": 5,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-30T16:32:40Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references\nto community built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nEach MCP server is implemented with either the [Typescript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk).\n\n> Note: Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the TypeScript and Python SDKs.\n\n- **[AWS KB Retrieval](src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime\n- **[Brave Search](src/brave-search)** - Web and local search using Brave's Search API\n- **[EverArt](src/everart)** - AI image generation using various models\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories\n- **[GitHub](src/github)** - Repository management, file operations, and GitHub API integration\n- **[GitLab](src/gitlab)** - GitLab API, enabling project management\n- **[Google Drive](src/gdrive)** - File access and search capabilities for Google Drive\n- **[Google Maps](src/google-maps)** - Location services, directions, and place details\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system\n- **[PostgreSQL](src/postgres)** - Read-only database access with schema inspection\n- **[Puppeteer](src/puppeteer)** - Browser automation and web scraping\n- **[Sentry](src/sentry)** - Retrieving and analyzing issues from Sentry.io\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences\n- **[Slack](src/slack)** - Channel management and messaging capabilities\n- **[Sqlite](src/sqlite)** - Database interaction and business intelligence capabilities\n- **[Time](src/time)** - Time and timezone conversion capabilities\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/actors-mcp-server)** - [Actors MCP Server](https://apify.com/apify/actors-mcp-server): Use 3,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/mendableai/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers. \n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://github.com/JetBrains/mcp-jetbrains)** – Work on your code with JetBrains IDEs\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n-  **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" /> [Search1API](https://github.com/fatwang2/search1api-mcp) - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> **Note:** Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[AlphaVantage](https://github.com/calvernaz/alphavantage)** - MCP server for stock market data API [AlphaVantage](https://www.alphavantage.co)\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Calendar](https://github.com/GongRzhe/Calendar-MCP-Server)** - Google Calendar integration server enabling AI assistants to manage calendar events through natural language interactions.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DevRev](https://github.com/kpsunil97/devrev-mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed [here](https://devrev.ai/docs/import#available-sources).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discord](https://github.com/v-3/discordmcp)** - A MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[FireCrawl](https://github.com/vrknetha/mcp-server-firecrawl)** - Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[JavaFX](https://github.com/mcpso/mcp-server-javafx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, sqllite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[Monday.com](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - A MCP server to search for scholarly and academic articles.\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protcool actions and growing \n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypescript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chats",
        "ai",
        "knowledge",
        "information chats",
        "ai assistant",
        "memory ai"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "dhkts1--sequentialStory": {
      "owner": "dhkts1",
      "name": "sequentialStory",
      "url": "https://github.com/dhkts1/sequentialStory",
      "imageUrl": "/freedevtools/mcp/pfp/dhkts1.webp",
      "description": "Enhances problem-solving and memory retention by structuring complex problems as engaging stories or sequential thoughts. Integrates with AI systems using the Model Context Protocol and offers techniques for narrative-based and sequential thinking.",
      "stars": 14,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-07T06:06:30Z",
      "readme_content": "# Sequential Story MCP Server\n\nA Model Context Protocol (MCP) server for Sequential Thinking and Sequential Story as mnemonic techniques for problem-solving.\n\n## Overview\n\nThis project offers two complementary MCP tools for structuring complex problems:\n\n1. **Sequential Story** - A narrative-based approach to sequential thinking. Instead of tracking abstract thoughts, it structures problems as story elements with characters, settings, and plot developments to make them more memorable and engaging.\n\n2. **Sequential Thinking** - A pure Python port of the JavaScript implementation, eliminating Node.js dependencies\n\nBoth approaches leverage the power of sequencing and structure to enhance memory retention and problem understanding.\n\n## Features\n\n### Sequential Story\n- Build problem solutions as narrative sequences\n- Revise and branch story elements as needed\n- Track characters, settings, tones, and plot points\n- Formatted, color-coded display of story elements\n\n### Sequential Thinking\n- Structure problems as a sequence of thoughts\n- Revise or branch thinking paths as needed\n- Generate and verify solution hypotheses\n- Track thinking process completion\n- Pure Python implementation (no Node.js required)\n\n### Common Features\n- Formatted, color-coded display of elements\n- Full MCP protocol support for integration with AI systems\n- Support for branching and revision\n\n## Installation\n\n### During Development\n\nWhen working with the package locally before publishing:\n\n```bash\n# Clone the repository\ngit clone https://github.com/dhkts1/sequentialStory\ncd sequentialStory\n\n# Install dependencies using uv\nuv venv\nsource .venv/bin/activate\nuv sync\n\n# Install with development dependencies\nuv sync --group dev\n\n```\n\n\n\n### Installing with MCP\n\n```bash\n# Install in the Claude desktop app\nmcp install -e . src/cli.py -n \"Sequential Story\"\n\n# Install with only the Sequential Thinking tool\nmcp install -e . src/cli.py -n \"Sequential Thinking\" --env-var \"TOOLS='[\\\"thinking\\\"]'\"\n\n# Install with only the Sequential Story tool explicitly\nmcp install -e . src/cli.py -n \"Sequential Story\" --env-var \"TOOLS='[\\\"story\\\"]'\"\n\n# Install with both tools\nmcp install -e . src/cli.py -n \"Sequential Tools\" --env-var \"TOOLS='[\\\"thinking\\\",\\\"story\\\"]'\"\n```\n\nFor development:\n\n```bash\n# For development with the MCP Inspector\nmcp dev src/__main__.py:main\n```\n\nYou can also configure Claude desktop to use the tool with `uvx` by adding this to your Claude mcpServers.json:\n\n```json\n\"mcpServers\": {\n  \"Sequential Story\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"sequential-story\"\n    ]\n  }\n}\n```\n\nThe environment variable `TOOLS` controls which tools are enabled. By default, only the Sequential Story tool is enabled, but the Sequential Thinking tool can be added as needed.\n\nThis is useful when you want to focus on a specific problem-solving approach or when integrating with other MCP tools. You can also update the environment variables directly in the Claude desktop app after installation.\n\n### Example story element\n\n```json\n{\n  \"element\": \"Our protagonist, a data scientist named Alex, encounters a mysterious pattern in the customer behavior data.\",\n  \"elementNumber\": 1,\n  \"totalElements\": 5,\n  \"nextElementNeeded\": true,\n  \"character\": \"Alex (data scientist)\",\n  \"setting\": \"Data analysis lab\",\n  \"tone\": \"Mysterious\",\n  \"plotPoint\": \"Discovery of pattern\"\n}\n```\n\n### Example thought element\n\n```json\n{\n  \"thought\": \"The problem requires analyzing multiple data sources to identify correlations between customer behavior and sales patterns.\",\n  \"thoughtNumber\": 1,\n  \"totalThoughts\": 5,\n  \"nextThoughtNeeded\": true\n}\n```\n\n## Development\n\n```bash\n# Install pre-commit hooks\nuv run pre-commit install\n\n# Run all pre-commit checks\npoe pre\n```\n## Credits\n\nThis project builds on the concepts of sequential thinking and structured problem-solving, adapting these approaches to both analytical and narrative frameworks for enhanced memory and problem-solving.\n\nThe Sequential Thinking implementation is a pure Python port inspired by the JavaScript implementation from the Model Context Protocol repositories:\nhttps://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sequentialstory",
        "sequential",
        "narrative",
        "sequential thinking",
        "stories sequential",
        "sequential thoughts"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "dlamichhane--my-resume": {
      "owner": "dlamichhane",
      "name": "my-resume",
      "url": "https://github.com/dlamichhane/my-resume",
      "imageUrl": "/freedevtools/mcp/pfp/dlamichhane.webp",
      "description": "Showcase and highlight professional qualifications and achievements through a structured resume format. Allows users to effectively communicate their experiences to potential employers.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "HTML",
      "updated_at": "2025-09-01T14:46:38Z",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "resume",
        "dlamichhane",
        "notetaking",
        "dlamichhane resume",
        "structured resume",
        "resume format"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "docdyhr--simplenote-mcp-server": {
      "owner": "docdyhr",
      "name": "simplenote-mcp-server",
      "url": "https://github.com/docdyhr/simplenote-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/docdyhr.webp",
      "description": "Connect and manage your Simplenote notes, enabling actions like creating, updating, and deleting notes directly from LLM applications.",
      "stars": 7,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T13:16:10Z",
      "readme_content": "# Simplenote MCP Server\n\n\n\nA lightweight MCP server that integrates [Simplenote](https://simplenote.com/) with [Claude Desktop](https://github.com/johnsmith9982/claude-desktop) using the [MCP Python SDK](https://github.com/johnsmith9982/mcp-python-sdk).\n\nThis allows Claude Desktop to interact with your Simplenote notes as a memory backend or content source.\n\n<!-- Status & Build Badges -->\n[](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/ci.yml)\n[](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/code-quality.yml)\n[![Security](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/security.yml/badge.svg?branch=main)](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/security.yml)\n[](https://github.com/docdyhr/simplenote-mcp-server/actions/workflows/docker-publish.yml)\n\n<!-- Project Info Badges -->\n[![Python Version](https://img.shields.io/badge/python-3.10%20%7C%203.11%20%7C%203.12%20%7C%203.13-blue)](https://github.com/docdyhr/simplenote-mcp-server)\n[![Version](https://img.shields.io/badge/version-1.7.0-blue.svg)](./CHANGELOG.md)\n[![Test Coverage](https://img.shields.io/badge/coverage-15.6%25-yellow)](./htmlcov/index.html)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Docker](https://img.shields.io/docker/v/docdyhr/simplenote-mcp-server?label=docker&color=blue)](https://hub.docker.com/r/docdyhr/simplenote-mcp-server)\n\n<!-- Download & Stats Badges -->\n[![PyPI Downloads](https://img.shields.io/pypi/dm/simplenote-mcp-server?label=PyPI%20downloads)](https://pypi.org/project/simplenote-mcp-server/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/docdyhr/simplenote-mcp-server?label=Docker%20pulls)](https://hub.docker.com/r/docdyhr/simplenote-mcp-server)\n[![GitHub Stars](https://img.shields.io/github/stars/docdyhr/simplenote-mcp-server?style=social)](https://github.com/docdyhr/simplenote-mcp-server)\n\n<!-- Development & Quality Badges -->\n[![MCP Server](https://img.shields.io/badge/MCP-Server-purple.svg)](https://github.com/modelcontextprotocol)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/psf/black)\n[![Ruff](https://img.shields.io/endpoint?url=https://raw.githubusercontent.com/astral-sh/ruff/main/assets/badge/v2.json)](https://github.com/astral-sh/ruff)\n[![Smithery](https://smithery.ai/badge/@docdyhr/simplenote-mcp-server)](https://smithery.ai/server/@docdyhr/simplenote-mcp-server)\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/b215d030-b511-457d-8a6d-3e1e6ea3b541)\n---\n\n## 🔧 Features\n\n- 📝 **Full Note Management**: Read, create, update, and delete Simplenote notes\n- 🔍 **Advanced Search**: Boolean operators, phrase matching, tag and date filters\n- ⚡ **High Performance**: In-memory caching with background synchronization\n- 🔐 **Secure Authentication**: Token-based authentication via environment variables\n- 🧩 **MCP Compatible**: Works with Claude Desktop and other MCP clients\n- 🐳 **Docker Ready**: Full containerization with multi-stage builds and security hardening\n- 📊 **Monitoring**: Optional HTTP endpoints for health, readiness, and metrics\n- 🧪 **Robust Testing**: Comprehensive test suite with 700+ tests and continuous integration\n- 🔒 **Security Hardened**: Regular security scanning with Bandit, pip-audit, and dependency checks\n\n---\n\n## 🚀 Quick Start\n\n### Prerequisites\n\n- Simplenote account (create one at [simplenote.com](https://simplenote.com/))\n- Python 3.10+ (for non-Docker installs) or Docker\n\n### Option 1: Docker (Recommended)\n\nThe fastest way to get started is using our pre-built Docker image:\n\n```bash\n# Pull and run the latest image\ndocker run -d \\\n  --name simplenote-mcp \\\n  -e SIMPLENOTE_EMAIL=your.email@example.com \\\n  -e SIMPLENOTE_PASSWORD=your-password \\\n  -p 8000:8000 \\\n  docdyhr/simplenote-mcp-server:latest\n```\n\n**Docker Health Checks:** The container includes built-in health monitoring endpoints:\n- Health: `http://localhost:8000/health`\n- Readiness: `http://localhost:8000/ready`  \n- Metrics: `http://localhost:8000/metrics` (Prometheus format)\n\nOr use Docker Compose:\n\n```bash\n# Clone the repository for docker-compose.yml\ngit clone https://github.com/docdyhr/simplenote-mcp-server.git\ncd simplenote-mcp-server\n\n# Set environment variables\nexport SIMPLENOTE_EMAIL=your.email@example.com\nexport SIMPLENOTE_PASSWORD=your-password\n\n# Run with Docker Compose\ndocker-compose up -d\n```\n\n### Option 2: Smithery (One-click install)\n\nInstall automatically via [Smithery](https://smithery.ai/server/@docdyhr/simplenote-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @docdyhr/simplenote-mcp-server --client claude\n```\n\nThis method automatically configures Claude Desktop with the MCP server.\n\n### Option 3: Traditional Python Install\n\n```bash\ngit clone https://github.com/docdyhr/simplenote-mcp-server.git\ncd simplenote-mcp-server\npip install -e .\nsimplenote-mcp-server\n```\n\n---\n\n## 🐳 Docker Deployment\n\n### Container Features\n\n- **Multi-stage builds** for optimized image size\n- **Security hardening** with non-root user and minimal attack surface\n- **Health monitoring** endpoints built-in\n- **Resource limits** and proper signal handling\n- **Volume support** for persistent data\n\n### Using Pre-built Images\n\nThe easiest way to use the server is with our pre-built Docker images:\n\n```bash\n# Pull the latest image\ndocker pull docdyhr/simplenote-mcp-server:latest\n\n# Run with Docker\ndocker run -d \\\n  -e SIMPLENOTE_EMAIL=your.email@example.com \\\n  -e SIMPLENOTE_PASSWORD=your-password \\\n  -p 8000:8000 \\\n  docdyhr/simplenote-mcp-server:latest\n\n# Or use Docker Compose\ndocker-compose up -d\n```\n\nAvailable tags:\n\n- `latest` - Latest stable release\n- `v1.6.0` - Specific version\n- `main` - Latest development build\n\n### Production Deployment\n\n```bash\n# Build and run the production container\ndocker-compose up -d\n\n# Or build manually\ndocker build -t simplenote-mcp-server .\ndocker run -d \\\n  -e SIMPLENOTE_EMAIL=your.email@example.com \\\n  -e SIMPLENOTE_PASSWORD=your-password \\\n  -p 8000:8000 \\\n  simplenote-mcp-server\n```\n\n### Development with Docker\n\n```bash\n# Use the development compose file for live code mounting\ndocker-compose -f docker-compose.dev.yml up\n```\n\n### Docker Features\n\n- **Multi-stage build** for optimized image size (346MB)\n- **Multi-platform support**: `linux/amd64` and `linux/arm64`\n- **Security hardening**: Non-root user, read-only filesystem, no new privileges\n- **Health checks** and automatic restart policies\n- **Resource limits**: 1 CPU, 512MB memory\n- **Logging**: Persistent log volumes\n- **Environment-based configuration**\n- **CI/CD Pipeline**: Automated builds and publishing to Docker Hub\n- **Security scanning**: Trivy vulnerability scanning on all images\n- **Container signing**: Sigstore cosign signatures for supply chain security\n- **Kubernetes ready**: Production-grade Helm chart with security hardening\n- **Automated updates**: Dependabot for dependencies, auto-versioning workflows\n- **Health monitoring**: Continuous health checks and alerting\n- **Enterprise notifications**: Slack and email integration for CI/CD status\n\n---\n\n## ☸️ Kubernetes Deployment\n\n### Using Helm (Recommended)\n\nDeploy to Kubernetes with our production-ready Helm chart:\n\n```bash\n# Install from local chart\nhelm install my-simplenote ./helm/simplenote-mcp-server \\\n  --set simplenote.email=\"your-email@example.com\" \\\n  --set simplenote.password=\"your-password\"\n\n# Or with external secrets (recommended for production)\nhelm install my-simplenote ./helm/simplenote-mcp-server \\\n  --set externalSecrets.enabled=true \\\n  --set externalSecrets.secretStore.name=\"vault-backend\"\n```\n\n### Kubernetes Features\n\n- **Security hardening**: Non-root user, read-only filesystem, dropped capabilities\n- **Resource management**: CPU/memory limits and requests configured\n- **Auto-scaling**: Horizontal Pod Autoscaler support\n- **Health checks**: Liveness and readiness probes\n- **External secrets**: Integration with external secret management\n- **Service mesh ready**: Compatible with Istio and other service meshes\n\n### Production Configuration\n\n```yaml\n# values.yaml for production\nreplicaCount: 3\nautoscaling:\n  enabled: true\n  minReplicas: 2\n  maxReplicas: 10\nresources:\n  limits:\n    cpu: 1000m\n    memory: 512Mi\n  requests:\n    cpu: 500m\n    memory: 256Mi\n```\n\n---\n\n## ⚙️ Configuration\n\n### Environment Variables\n\n| Variable                | Required | Default | Description                                 |\n| ----------------------- | -------- | ------- | ------------------------------------------- |\n| `SIMPLENOTE_EMAIL`      | Yes      | -       | Your Simplenote account email               |\n| `SIMPLENOTE_PASSWORD`   | Yes      | -       | Your Simplenote account password            |\n| `SYNC_INTERVAL_SECONDS` | No       | 120     | Cache synchronization interval              |\n| `LOG_LEVEL`             | No       | INFO    | Logging level (DEBUG, INFO, WARNING, ERROR) |\n\n### Claude Desktop Integration\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"simplenote\": {\n      \"description\": \"Access and manage your Simplenote notes\",\n      \"command\": \"simplenote-mcp-server\",\n      \"env\": {\n        \"SIMPLENOTE_EMAIL\": \"your.email@example.com\",\n        \"SIMPLENOTE_PASSWORD\": \"your-password\"\n      }\n    }\n  }\n}\n```\n\n---\n\n## 🔍 Advanced Search\n\nPowerful search with boolean logic and filters:\n\n```text\n# Boolean operators\nproject AND meeting AND NOT cancelled\n\n# Phrase matching\n\"action items\" AND project\n\n# Tag filtering\nmeeting tag:work tag:important\n\n# Date ranges\nproject from:2023-01-01 to:2023-12-31\n\n# Combined query\n\"status update\" AND project tag:work from:2023-01-01 NOT cancelled\n```\n\n---\n\n## 🛠️ Available Tools\n\n| Tool           | Description                  | Parameters                                                 |\n| -------------- | ---------------------------- | ---------------------------------------------------------- |\n| `create_note`  | Create a new note            | `content`, `tags` (optional)                               |\n| `update_note`  | Update an existing note      | `note_id`, `content`, `tags` (optional)                    |\n| `delete_note`  | Move a note to trash         | `note_id`                                                  |\n| `get_note`     | Get a note by ID             | `note_id`                                                  |\n| `search_notes` | Advanced search with filters | `query`, `limit`, `offset`, `tags`, `from_date`, `to_date` |\n| `add_tags`     | Add tags to a note           | `note_id`, `tags`                                          |\n| `remove_tags`  | Remove tags from a note      | `note_id`, `tags`                                          |\n| `replace_tags` | Replace all tags on a note   | `note_id`, `tags`                                          |\n\n---\n\n## 📊 Performance & Caching\n\n- **In-memory caching** with background synchronization\n- **Pagination support** for large note collections\n- **Indexed lookups** for tags and content\n- **Query result caching** for repeated searches\n- **Optimized API usage** with minimal Simplenote calls\n\n---\n\n## 🎯 Recent Improvements (September 2025)\n\n### ✅ Quality & Reliability Enhancements\n\n**Test Suite Stabilization**: \n- Fixed test isolation issues that caused intermittent failures\n- Improved test cleanup with proper timeout handling\n- Enhanced fixture management for better test reliability\n- Achieved consistent test results across individual and suite runs\n\n**CI/CD Pipeline Optimization**:\n- Consolidated 28 workflows down to 16 active workflows\n- Implemented unified monitoring workflow combining security, health, and badge checks\n- Improved test coverage reporting with realistic 15.6% baseline\n- Enhanced Docker build validation and security scanning\n\n**Code Quality Improvements**:\n- All linting (Ruff), formatting, and type checking (MyPy) now pass consistently  \n- Zero high-severity security vulnerabilities (verified with Bandit, pip-audit, safety)\n- Standardized code formatting and pre-commit hooks configuration\n- Enhanced error handling and user-facing error messages\n\n### 🔧 Developer Experience\n\n**Improved Testing**:\n- 724 comprehensive tests covering core functionality\n- Function-scoped fixtures for better test isolation  \n- Realistic coverage baseline established (15.6%)\n- Streamlined test execution with proper cleanup\n\n**Enhanced Documentation**:\n- Updated deployment guides with current Docker setup\n- Improved health monitoring endpoint documentation\n- Added troubleshooting guides for common issues\n- Current status and roadmap documentation\n\n**Container Improvements**:\n- Multi-stage Docker builds for optimized image size\n- Built-in health monitoring endpoints (`/health`, `/ready`, `/metrics`)\n- Enhanced security hardening with non-root user\n- Improved signal handling and graceful shutdown\n\n---\n\n## 🧪 Testing & Evaluation\n\n### MCP Evaluations ✅\n\n**Status**: ✅ **WORKING** - Complete mcp-evals integration with TypeScript wrapper!\n\nThis project includes comprehensive evaluations using [mcp-evals](https://github.com/mclenhard/mcp-evals) to ensure reliability and performance:\n\n```bash\n# Setup evaluation environment\nnpm install\nnpm run validate:evals\n\n# Run evaluation suites\nnpm run eval:smoke          # Quick smoke tests (2-3 minutes) ✅ VERIFIED\nnpm run eval:basic          # Standard evaluations (5-10 minutes)\nnpm run eval:comprehensive  # Full evaluation suite (15-30 minutes)\n```\n\n**Latest Test Results**: 4/5 tests passing excellently (avg 4.1/5):\n\n- **Server Startup**: 4.6/5 ⭐ (Excellent)\n- **Authentication**: 4.0/5 ⭐ (Good)\n- **Note Operations**: 3.8/5 ⭐ (Good)\n- **Search**: 5.0/5 ⭐ (Perfect)\n- **Error Handling**: 1.4/5 ⚠️ (Needs improvement)\n\n#### Evaluation Types\n\n- **Smoke Tests**: Basic functionality validation\n- **CRUD Operations**: Note creation, reading, updating, deletion\n- **Search & Filtering**: Boolean search, tag filtering, date ranges\n- **Error Handling**: Authentication, network issues, edge cases\n- **Performance**: Large datasets, concurrent operations\n- **Security**: Input validation, authentication enforcement\n\n#### Automated Testing\n\nEvaluations run automatically on:\n\n- **Pull Requests**: Smoke + basic tests\n- **Releases**: Comprehensive evaluation suite\n- **Manual Trigger**: Full test matrix with detailed reporting\n\nThe evaluations use OpenAI's GPT models to assess:\n\n- **Accuracy**: Correctness of responses\n- **Completeness**: Thoroughness of results\n- **Relevance**: Response appropriateness\n- **Clarity**: Response readability\n- **Performance**: Operation efficiency\n\n📁 See [`evals/README.md`](./evals/README.md) for detailed evaluation documentation.\n\n### Traditional Testing\n\n```bash\n# Python unit tests\npytest\n\n# Code quality checks\nruff check .\nmypy simplenote_mcp\n```\n\n---\n\n## 🛡️ Security\n\n- **Token-based authentication** via environment variables\n- **No hardcoded credentials** in Docker images\n- **Security-hardened containers** with non-root users\n- **Read-only filesystem** in production containers\n- **Resource limits** to prevent abuse\n\n---\n\n## 🚨 Troubleshooting\n\n### Common Issues\n\n**Authentication Problems**:\n\n- Verify `SIMPLENOTE_EMAIL` and `SIMPLENOTE_PASSWORD` are set correctly\n- Check for typos in credentials\n\n**Docker Issues**:\n\n```bash\n# Check container logs\ndocker-compose logs\n\n# Restart services\ndocker-compose restart\n\n# Rebuild if needed\ndocker-compose up --build\n```\n\n**Claude Desktop Connection**:\n\n```bash\n# Verify tools are available\n./simplenote_mcp/scripts/verify_tools.sh\n\n# Monitor logs\n./simplenote_mcp/scripts/watch_logs.sh\n```\n\n### Diagnostic Commands\n\n```bash\n# Test connectivity\npython simplenote_mcp/tests/test_mcp_client.py\n\n# Check server status\n./simplenote_mcp/scripts/check_server_pid.sh\n\n# Clean up and restart\n./simplenote_mcp/scripts/cleanup_servers.sh\n```\n\n---\n\n## 📚 Development\n\n### Quick Setup with mcp-evals\n\n```bash\n# One-command setup including evaluations\n./setup-dev-env-with-evals.sh\n\n# Or manual setup\ngit clone https://github.com/docdyhr/simplenote-mcp-server.git\ncd simplenote-mcp-server\npip install -e \".[dev,test]\"\nnpm install  # For mcp-evals\n```\n\n### Local Development\n\n```bash\n# Run the server\npython simplenote_mcp_server.py\n\n# Run Python tests\npytest\n\n# Run mcp-evals\nnpm run eval:smoke    # Quick validation\nnpm run eval:basic    # Standard tests\nnpm run eval:all      # Full test suite\n\n# Code quality\nruff check .\nruff format .\nmypy simplenote_mcp\n```\n\n### Development Environment\n\nThe setup script creates:\n\n- Python development environment with all dependencies\n- Node.js environment for mcp-evals\n- Example configuration files\n- Pre-commit hooks\n- Validation for all evaluation files\n\n### Testing Strategy\n\n1. **Unit Tests**: Traditional Python pytest for core logic\n2. **Integration Tests**: MCP protocol compliance testing\n3. **Smoke Tests**: Quick validation of basic functionality\n4. **Evaluation Tests**: LLM-based assessment of real-world usage\n5. **Performance Tests**: Load and stress testing\n\n### Running MCP Evaluations\n\n#### Docker Method (Recommended)\nDue to potential permission issues with tsx, we recommend running MCP evaluations in Docker:\n\n```bash\n# Run smoke tests\n./scripts/run-evals-docker.sh smoke\n\n# Run basic evaluations\n./scripts/run-evals-docker.sh basic\n\n# Run comprehensive evaluations\n./scripts/run-evals-docker.sh comprehensive\n\n# Run all evaluations\n./scripts/run-evals-docker.sh all\n```\n\n#### Direct Method (if permissions allow)\n```bash\nnpm run eval:smoke\nnpm run eval:basic\nnpm run eval:comprehensive\nnpm run eval:all\n```\n\n### Docker Development\n\n```bash\n# Development with live code reload\ndocker-compose -f docker-compose.dev.yml up\n\n# Build and test\ndocker build -t simplenote-mcp-server:test .\ndocker run --rm simplenote-mcp-server:test --help\n```\n\n---\n\n## 🤝 Contributing\n\nContributions are welcome! Please read [CONTRIBUTING.md](./CONTRIBUTING.md) for guidelines.\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🔗 Related Projects\n\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [MCP Example Servers](https://modelcontextprotocol.io/examples)\n\n---\n\n## ⭐ Support the Project\n\nIf you find this project helpful, please consider giving it a star on GitHub! Your support helps:\n\n- 🚀 **Increase visibility** for other developers who might benefit from this tool\n- 💪 **Motivate continued development** and maintenance\n- 📈 **Build community** around the Model Context Protocol ecosystem\n- 🛡️ **Validate trust** through community engagement\n\n[![GitHub stars](https://img.shields.io/github/stars/docdyhr/simplenote-mcp-server?style=social)](https://github.com/docdyhr/simplenote-mcp-server/stargazers)\n\n**[⭐ Star this repository](https://github.com/docdyhr/simplenote-mcp-server)** — it takes just one click and means a lot!\n\n---\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/docdyhr-simplenote-mcp-server-badge.png)](https://mseep.ai/app/docdyhr-simplenote-mcp-server)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "simplenote",
        "notes",
        "notetaking",
        "simplenote mcp",
        "simplenote notes",
        "manage simplenote"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "dragonjump--mcp-ARCknowledge": {
      "owner": "dragonjump",
      "name": "mcp-ARCknowledge",
      "url": "https://github.com/dragonjump/mcp-ARCknowledge",
      "imageUrl": "/freedevtools/mcp/pfp/dragonjump.webp",
      "description": "Manage and query a custom knowledge base by registering document sources, querying information, and aggregating results from multiple webhook endpoints. Simplifies knowledge management and enhances querying capabilities.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-16T16:46:03Z",
      "readme_content": "# MCP ArcKnowledge\n\n[![smithery badge](https://smithery.ai/badge/@dragonjump/mcp-ARCknowledge)](https://smithery.ai/server/@dragonjump/mcp-ARCknowledge)\n![arc knowledge MCP](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/logo.jpg)\n\n## How it works?\n![arc knowledge diagram](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/diagram.png)\n\n\nThis is a Model Context Protocol (MCP) server for your custom webhook endpoints (knowledgebase).\n\nWith this you can  you can easily manage and query your list of knowledge base(webhook endpoints).\nYou can add new document sources by registering their URLs, and optionally provide a description and API key.\n\nYou can also list all the registered document sources and view their details.\n \nWhen you're ready to ask/search, you can query the knowledge base with a text question  , specifying which sources to search or leaving it blank to search all of them. \n\nThe tool will then aggregate the results from the queried sources and provide them to you.\n\n\n### Prerequisites\n\n- Go\n- Python 3.6+\n- Anthropic Claude Desktop app (or Cursor or Cline)\n- UV (Python package manager), install with `curl -LsSf https://astral.sh/uv/install.sh | sh`\n \n\n## Concept\nImagine being able to bridge 1 unified setup where you can connect all your custom knowledge base endpoints webhook in one configuration, eliminating the need for multiple MCP servers.\n \n## Demo\n \n![arcknowledge demo cursor](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/demo_video/arcknowledge-demo-1.gif) \n![arcknowledge demo cursor](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/demo_video/arcknowledge-demo-2.gif) \n![arcknowledge demo cline](https://github.com/dragonjump/mcp-ARCknowledge/raw/main/demo-cline.gif) \n \n[See mcp cursor video](https://github.com/dragonjump/mcp-arcknowledge/tree/main/demo%20video)\n\n\n## Setup Installation\n\n### Installing via Smithery\n\nTo install ArcKnowledge for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@dragonjump/mcp-ARCknowledge):\n\n```bash\nnpx -y @smithery/cli install @dragonjump/mcp-ARCknowledge --client claude\n```\n\n1.**Clone repo**  \n```bash\ngit clone https://github.com/dragonjump/mcp-arcknowledge\ncd mcp-arcknowledge\n```\n\n \n2. **Configure endpoints** \nMake a copy or change`knowledge_document_sources.json`.\nSee `sample_endpoint` folder for references on current knowledge endpoints api schema supported. You may change the code as you wish to fit your need.\n\n3. **Connect to the MCP server**\n\n   Copy the below json with the appropriate {{PATH}} values:\n\n   ```json\n    {\n        \"mcpServers\": {\n            \"mcp-arcknowledge\": {\n                \"command\": \"cmd /c uv\",\n                \"args\": [\n                    \"--directory\",\n                    \"C:/Users/Acer/OneDrive/GitHub/YourDrive\",\n                    \"run\",\n                    \"main.py\"\n                ],\n                \"env\": {\n                    \"DOCUMENT_SOURCES_PATH\": \"C:/Users/Acer/OneDrive/GitHub/YourDrive/testcustomother.json\"\n                }\n            }\n        }\n    }\n   ```\nFor **Claude**, save this as `claude_desktop_config.json` in your Claude Desktop configuration directory at:\n\n   ```\n   ~/Library/Application Support/Claude/claude_desktop_config.json\n   \n   ```\n\nFor **Cursor**, save this as `mcp.json` in your Cursor configuration directory at:\n\n   ```\n   ~/.cursor/mcp.json\n   ```\n\nFor **cline**, save this as `cline_mcp_settings.json` in your configuration  \n\n4. **Restart Client: Claude Desktop / Cursor / Cline / Windsurf**\n   Open and restart your client ide for mcp. eg Claude/Cursor/Cline/etc\n\n\n### Windows Compatibility\n\nIf you're running this project on Windows, be aware that `go-sqlite3` requires **CGO to be enabled** in order to compile and work properly. By default, **CGO is disabled on Windows**, so you need to explicitly enable it and have a C compiler installed.\n\n#### Steps to get it working:\n\n1. **Install a C compiler**  \n   We recommend using [MSYS2](https://www.msys2.org/) to install a C compiler for Windows. After installing MSYS2, make sure to add the `ucrt64\\bin` folder to your `PATH`.  \n   → A step-by-step guide is available [here](https://code.visualstudio.com/docs/cpp/config-mingw).\n\n \n \n## Architecture Overview\n\nThis application consists of simple main component:\n \n**Python MCP Server** (`main.py`): A Python server implementing the Model Context Protocol (MCP), which provides standardized tools client to interact with data and invoke api call.\n\n### Data Storage\n\n- All storage is runtime local main python server.\n \n\n \n## Technical Details\n\n1. Client sends requests to the Python MCP server\n2. The MCP server lookup its runtime config knowledge base.\n3. Then based on your queries, it calls your knowledge base endpoint api,\n\n## Troubleshooting\n\n- If you encounter permission issues when running uv, you may need to add it to your PATH or use the full path to the executable.\n- Make sure both the Go application and the Python server are running for the integration to work properly.\n\n### Starting the Server\n1. Config\nRun the server in development mode:\n```bash\nfastmcp dev main.py\n```\n\nOr install it for use with Claude:\n```bash\nfastmcp install main.py\n```\n\n### Available Tools\n  \n\n#### 1. Default Loads knowledge list from knowledge_document_sources.json\nDefault loads knowledge sources from config\n``` \nknowledge_document_sources.json\n \n```\nYou may Load custom knowledge from mcp.json environment config\n\n```\n\n        \"env\": {\n            \"DOCUMENT_SOURCES_PATH\": \"C:/Users/Acer/OneDrive/Somewhere/YourDrive/your-custom.json\"\n        }\n```\n#### 2. List all  currently registered knowledge sources\nShows and explains the list of all registered knowledge sources.\n\n``` \neg. Show me my arcknowledge list \n \n```\n#### 3. Add New Knowledge Document Source  \nAdd new arcknowledge   endpoint url document sources. \nProvide url, description purpose and apikey(if any)\n\n``` \neg. Add new arcknowledge data source. Endpoint is http://something.com/api/123.\nPurpose is to handle questions on 123 topic. Api key is 'sk-2123123' \n \n```\n\n#### 4. Querying Specific Knowledge Doc Source\nQuery the arcknowledge base built from these sources using query_knowledge_base. \n\n``` \neg. Query for me my  knowledge base for product. Question is : Which is most expensive product? \n\n\neg. Query for me my  arcknowledge base for business. Question is :When is the business established? \n\neg. Query for me all my  arcknowledge base  . Question is :When is the business established? Which is most expensive product?\n```\n \n \n#### Tool Functions \n\n1.  `add_new_knowledge_document_source(url: str, description:str = None, apikey:str = None) -> str`\n    *   Registers a new document source URL, optionally with a description and API key.\n    *   Returns: Confirmation message with the new source ID.\n\n2.  `list_knowledge_document_sources() -> Dict[str, Dict[str, str]]`\n    *   Lists all registered document sources.\n    *   Returns: Dictionary mapping source IDs to their details (URL, description, API key).\n\n3.  `query_knowledge_base(query: str, source_ids: List[str] = [], image: str = '') -> str`\n    *   Queries specified document sources (or all if none specified) with a text query and optional image data.\n    *   Returns: Aggregated results from the queried sources.\n## Development\n\n### Crucial filesProject Structure\n\n```\nmcp-arcknowledge/\n├── main.py          # Main server implementation\n├── README.md           # Documentation\n├── requirements.txt    # Project dependencies\n```\n\n### Cursor AI MCP Configuration\n\n1. Create an `mcp.json` file in your project root:\n```json\n{\n    \"name\": \"mcp-webhook-ai-agent\",\n    \"version\": \"1.0.0\",\n    \"description\": \"Webhook AI agent with RAG capabilities\",\n    \"main\": \"main.py\",\n    \"tools\": [\n        {\n            \"name\": \"set_document_source\",\n            \"description\": \"Register a new document source URL for RAG operations\"\n        },\n        {\n            \"name\": \"list_document_sources\",\n            \"description\": \"List all registered document sources\"\n        },\n        {\n            \"name\": \"query_rag\",\n            \"description\": \"Query the specified document sources using RAG\"\n        },\n        {\n            \"name\": \"process_post_query\",\n            \"description\": \"Process a POST request with a query payload\"\n        }\n    ],\n    \"dependencies\": {\n        \"fastmcp\": \">=0.4.0\",\n        \"requests\": \">=2.31.0\",\n        \"pydantic\": \">=2.0.0\"\n    }\n}\n```\n\n2. Configure Cursor AI:\n   - Open Cursor AI settings\n   - Navigate to the MCP section\n   - Add the path to your `mcp.json` file\n   - Restart Cursor AI to apply changes\n\n3. Verify Configuration:\n```bash\n# Check if MCP is properly configured\nfastmcp check mcp.json\n\n# List available tools\nfastmcp list\n```\n\n### Adding New Features\n\n1. Define new models in `main.py`\n2. Add new tools using the `@mcp.tool()` decorator\n3. Update documentation as needed\n\n## License\nMIT\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a new Pull Request\n \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "webhook",
        "knowledge",
        "arcknowledge",
        "knowledge base",
        "knowledge management",
        "knowledge bases"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "emmanuelsystems--mcpnotionslack": {
      "owner": "emmanuelsystems",
      "name": "mcpnotionslack",
      "url": "https://github.com/emmanuelsystems/mcpnotionslack",
      "imageUrl": "/freedevtools/mcp/pfp/emmanuelsystems.webp",
      "description": "Connect to Notion workspaces to enable AI assistants to interact with databases, pages, and blocks for efficient content management and retrieval.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-14T16:12:41Z",
      "readme_content": "# Notion MCP Server\n\nA Model Context Protocol (MCP) server that connects Claude and other AI assistants to your Notion workspace. This integration allows AI assistants to interact with your Notion databases, pages, and blocks.\n\n## What is this?\n\nThis tool acts as a bridge between AI assistants (like Claude) and your Notion workspace. It allows the AI to:\n- View and search your Notion databases\n- Create and update pages\n- Manage content blocks\n- And much more!\n\n## Step-by-Step Setup Guide\n\n### Prerequisites\n- [Node.js](https://nodejs.org/) (version 14 or higher)\n- A Notion account\n- Claude Desktop app (if using with Claude)\n\n### 1. Getting Your Notion API Key\n\n1. Go to [https://www.notion.so/my-integrations](https://www.notion.so/my-integrations)\n2. Click the blue **\"+ New integration\"** button\n3. Fill in the details:\n   - **Name**: Choose a name like \"Claude Assistant\" or \"AI Helper\"\n   - **Logo**: Optional\n   - **Associated workspace**: Select your Notion workspace\n4. Click **\"Submit\"**\n5. On the next page, find the **\"Internal Integration Token\"** section\n6. Click **\"Show\"** and copy the token (it starts with `secret_`)\n\n### 2. Setting Up This Server\n\n1. Download this repository to your computer\n   - If you have Git: `git clone [repository-url]`\n   - Or download and extract the ZIP file\n\n2. Open a command prompt or terminal\n   - Windows: Press `Win+R`, type `cmd`, and press Enter\n   - Mac: Open Terminal from Applications > Utilities\n\n3. Navigate to the folder where you downloaded this repository:\n   ```\n   cd path/to/notion-mcp-server\n   ```\n\n4. Install the required dependencies:\n   ```\n   npm install\n   ```\n\n5. Create a configuration file:\n   - Make a copy of `.env.example` and name it `.env`\n   - Open the `.env` file in a text editor\n   - Replace `your_notion_api_key_here` with the token you copied earlier\n   - Save the file\n\n### 3. Connecting to Notion Pages\n\nFor security, Notion requires you to explicitly grant access to each page or database:\n\n1. Open Notion and navigate to a page or database you want the AI to access\n2. Click the **\"•••\"** (three dots) in the top-right corner\n3. Select **\"Add connections\"**\n4. Find and select the integration you created earlier\n5. Repeat for any other pages or databases you want to make accessible\n\n### 4. Connecting to Claude Desktop\n\n1. Locate your Claude Desktop configuration file:\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n     (Type this path in File Explorer address bar)\n   - Mac: `~/Library/Application Support/Claude/claude_desktop_config.json`\n     (In Finder, press Cmd+Shift+G and paste this path)\n\n2. Open the file in a text editor. If it doesn't exist, create it with the following content:\n   ```json\n   {\n     \"mcpServers\": {\n       \"notion\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"C:\\\\path\\\\to\\\\notion-mcp-server\\\\server.js\"\n         ],\n         \"env\": {\n           \"NOTION_API_KEY\": \"your_notion_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\n3. Replace:\n   - `C:\\\\path\\\\to\\\\notion-mcp-server\\\\server.js` with the actual path to the server.js file\n     - Windows: Use double backslashes (\\\\\\\\) in the path\n     - Mac: Use forward slashes (/)\n   - `your_notion_api_key_here` with your Notion API key\n\n4. Save the file and restart Claude Desktop\n\n### 5. Testing the Connection\n\n1. Start a new conversation in Claude\n2. Ask Claude to interact with your Notion workspace, for example:\n   - \"Show me a list of my Notion databases\"\n   - \"Create a new page in my Tasks database with title 'Test Task'\"\n\n## Available Tools\n\nThe server provides these tools to AI assistants:\n\n- **list-databases**: View all accessible databases\n- **query-database**: Get entries from a database\n- **create-page**: Add a new page to a database\n- **update-page**: Modify an existing page\n- **create-database**: Create a new database\n- **update-database**: Modify a database structure\n- **get-page**: View a specific page\n- **get-block-children**: View content blocks\n- **append-block-children**: Add content to a page\n- **update-block**: Edit content blocks\n- **get-block**: View a specific block\n- **search**: Find content across your workspace\n\n## Troubleshooting\n\n### Common Issues:\n\n1. **\"Connection failed\" in Claude**\n   - Make sure the server path in claude_desktop_config.json is correct\n   - Check that your Notion API key is valid\n   - Ensure Node.js is installed correctly\n\n2. **\"Access denied\" when accessing Notion content**\n   - Make sure you've shared the page/database with your integration\n   - Check that your API key has the necessary permissions\n\n3. **Server won't start**\n   - Ensure all dependencies are installed (`npm install`)\n   - Check that the .env file exists with your API key\n\n### Getting Help\n\nIf you encounter issues not covered here, please:\n- Check the console output for error messages\n- Ensure your Notion API key is valid\n- Verify that your integration has access to the pages/databases\n\n## Running Tests\n\n### Environment Setup\n\n1. Copy `.env.example` to `.env`\n2. Fill in all required tokens such as `NOTION_API_KEY`, `NOTION_DATABASE_ID`,\n   `SLACK_BOT_TOKEN`, and `SLACK_APP_TOKEN`\n\n### Python Tests\n\nRun each test file directly with Python:\n\n```bash\npython test_notion.py\npython test_database.py\npython test_create_entry.py\npython test_add_content.py\npython test_read_content.py\npython test_update_entry.py\n```\n\n### Node Tests\n\nExecute individual Node test scripts using Node. For example:\n\n```bash\nnode slack-mcp/test_mcp_server.js\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "emmanuelsystems",
        "workspaces",
        "ai assistants",
        "notion workspaces",
        "emmanuelsystems mcpnotionslack"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "epicweb-dev--epic-me-mcp": {
      "owner": "epicweb-dev",
      "name": "epic-me-mcp",
      "url": "https://github.com/epicweb-dev/epic-me-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/epicweb-dev.webp",
      "description": "Facilitates natural language interaction with applications, managing user registration, authentication, and data operations through the Model Context Protocol. It allows users to interact with applications using LLMs without traditional interfaces.",
      "stars": 58,
      "forks": 6,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T18:50:14Z",
      "readme_content": "# EpicMe MCP\n\nThis is an example of an application that's exclusively accessible via Model\nContext Protocol (MCP).\n\nEverything from user registration and authentication to interacting with user\ndata is handled via MCP tools.\n\nThe goal is to demonstrate a possible future of applications where users\ninteract with our apps via natural language with LLMs and the MCP protocol. This\nwill also be the basis upon which I will teach how to build MCP tools on\n[EpicAI.pro](https://www.epicai.pro).\n\n## How to Use\n\n**⚠️ Important Disclaimer: This is an experimental playground, not a production\nservice. There are no SLAs, guarantees of data privacy, or data retention\npolicies. Use at your own risk and don't store anything important or\nsensitive.**\n\n### Server URL\n\nThe EpicMe MCP server is deployed at:\n\n```\nhttps://epic-me-mcp.kentcdodds.workers.dev/mcp\n```\n\n### What You Can Do\n\nEpicMe is a personal journaling application that allows you to:\n\n- **Create and manage journal entries** with titles, content, mood, location,\n  weather, and privacy settings\n- **Organize entries with tags** for better categorization and filtering\n- **Get AI-powered tag suggestions** for your entries\n- **Summarize your journal entries** with optional filtering by tags or date\n  range\n- **Mark entries as favorites** and set privacy levels\n\n### Getting Started\n\n1. **Connect to the MCP server** using your preferred MCP client (like\n   [Claude Desktop](https://claude.ai/download))\n2. **Authenticate** by providing your email address - you'll receive a\n   validation code\n3. **Start journaling** using natural language commands\n\n### Authentication Flow\n\nThe authentication is unique because it works with users who don't exist yet:\n\n1. Use the `authenticate` tool with your email address\n2. Check your email for a TOTP validation code\n3. Use the `validate_token` tool with the code to complete authentication\n4. You're now logged in and can access all authenticated features\n\n### Available Tools\n\n#### Authentication Tools (Unauthenticated)\n\n- **`authenticate`** - Start authentication process with your email\n- **`validate_token`** - Complete authentication with emailed validation code\n\n#### User Management Tools (Authenticated)\n\n- **`whoami`** - Get information about the current user\n- **`logout`** - Remove authentication\n\n#### Journal Entry Tools (Authenticated)\n\n- **`create_entry`** - Create a new journal entry with optional tags, mood,\n  location, weather\n- **`get_entry`** - Retrieve a specific journal entry by ID\n- **`list_entries`** - List all entries, optionally filtered by tags\n- **`update_entry`** - Update any field of an existing entry\n- **`delete_entry`** - Delete a journal entry\n\n#### Tag Management Tools (Authenticated)\n\n- **`create_tag`** - Create a new tag for organizing entries\n- **`get_tag`** - Get details of a specific tag\n- **`list_tags`** - List all your tags\n- **`update_tag`** - Update tag properties\n- **`delete_tag`** - Delete a tag\n- **`add_tag_to_entry`** - Associate a tag with an entry\n\n### Available Prompts\n\n- **`suggest_tags`** - Get AI-powered tag suggestions for a specific journal\n  entry\n- **`summarize_journal_entries`** - Get a summary of your journal entries, with\n  optional filtering by tags or date range\n\n### Available Resources\n\n- **`epicme://credits`** - Credits information\n- **`epicme://users/current`** - Current user information\n- **`epicme://entries/{id}`** - Specific journal entry data\n- **`epicme://entries`** - List of all journal entries\n- **`epicme://tags/{id}`** - Specific tag data\n- **`epicme://tags`** - List of all tags\n\n### Example Usage\n\nHere are some example natural language commands you can use:\n\n- \"Authenticate me with my email address\"\n- \"Create a new journal entry about my day at the beach\"\n- \"List all my journal entries\"\n- \"Show me entries tagged with 'work'\"\n- \"Suggest tags for my latest entry\"\n- \"Summarize my journal entries from last week\"\n- \"Update my entry to mark it as a favorite\"\n- \"Create a new tag called 'personal goals'\"\n\n## Authentication\n\nThe authentication flow is unique because we need to be able to go through OAuth\nfor users who don't exist yet (users need to register first). So we generate a\ngrant automatically without the user having to go through the OAuth flow\nthemselves. Then we allow the user to claim the grant via a TOTP code which is\nemailed to them.\n\nThis works well enough.\n\n## Known Issues\n\nDuring development, if you delete the `.wrangler` directory, you're deleting the\ndynamically registered clients. Those clients don't know that their entries have\nbeen deleted so they won't attempt to re-register. In the MCP Inspector, you can\ngo in the browser dev tools and clear the session storage and it will\nre-register. In other clients I do not know how to make them re-register.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "epicweb",
        "epic",
        "mcp",
        "epicweb dev",
        "epic mcp",
        "dev epic"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ergut--mcp-logseq": {
      "owner": "ergut",
      "name": "mcp-logseq",
      "url": "https://github.com/ergut/mcp-logseq",
      "imageUrl": "/freedevtools/mcp/pfp/ergut.webp",
      "description": "Interact with LogSeq knowledge management system via its API to manage and retrieve information from graphs and pages.",
      "stars": 117,
      "forks": 13,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-28T08:41:00Z",
      "readme_content": "<div align=\"center\">\n  \n  <h1>MCP server for LogSeq</h1>\n  <p>MCP server to interact with LogSeq via its API. Enables Claude to read, create, and manage LogSeq pages through a comprehensive set of tools.</p>\n</div>\n\n## ✨ What You Can Do\n\nTransform your LogSeq knowledge base into an AI-powered workspace! This MCP server enables Claude to seamlessly interact with your LogSeq graphs.\n\n### 🎯 Real-World Examples\n\n**📊 Intelligent Knowledge Management**\n```\n\"Analyze all my project notes from the past month and create a status summary\"\n\"Find pages mentioning 'machine learning' and create a study roadmap\"\n\"Search for incomplete tasks across all my pages\"\n```\n\n**📝 Automated Content Creation**\n```\n\"Create a new page called 'Today's Standup' with my meeting notes\"\n\"Add today's progress update to my existing project timeline page\"  \n\"Create a weekly review page from my recent notes\"\n```\n\n**🔍 Smart Research & Analysis** \n```\n\"Compare my notes on React vs Vue and highlight key differences\"\n\"Find all references to 'customer feedback' and summarize themes\"\n\"Create a knowledge map connecting related topics across pages\"\n```\n\n**🤝 Meeting & Documentation Workflow**\n```\n\"Read my meeting notes and create individual task pages for each action item\"\n\"Get my journal entries from this week and create a summary page\"\n\"Search for 'Q4 planning' and organize all related content into a new overview page\"\n```\n\n### 💡 Key Benefits\n- **Zero Context Switching**: Claude works directly with your LogSeq data\n- **Preserve Your Workflow**: No need to export or copy content manually  \n- **Intelligent Organization**: AI-powered page creation, linking, and search\n- **Enhanced Productivity**: Automate repetitive knowledge work\n\n---\n\n## 🚀 Quick Start\n\n### Step 1: Enable LogSeq API\n1. **Settings** → **Features** → Check \"Enable HTTP APIs server\"\n2. Click the **API button (🔌)** in LogSeq → **\"Start server\"**\n3. **Generate API token**: API panel → \"Authorization tokens\" → Create new\n\n### Step 2: Add to Claude (No Installation Required!)\n\n#### Claude Code\n```bash\nclaude mcp add mcp-logseq \\\n  --env LOGSEQ_API_TOKEN=your_token_here \\\n  --env LOGSEQ_API_URL=http://localhost:12315 \\\n  -- uv run --with mcp-logseq mcp-logseq\n```\n\n#### Claude Desktop\nAdd to your config file (`Settings → Developer → Edit Config`):\n```json\n{\n  \"mcpServers\": {\n    \"mcp-logseq\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"--with\", \"mcp-logseq\", \"mcp-logseq\"],\n      \"env\": {\n        \"LOGSEQ_API_TOKEN\": \"your_token_here\",\n        \"LOGSEQ_API_URL\": \"http://localhost:12315\"\n      }\n    }\n  }\n}\n```\n\n### Step 3: Start Using!\n```\n\"Please help me organize my LogSeq notes. Show me what pages I have.\"\n```\n\n---\n\n## 🛠️ Available Tools\n\nThe server provides 6 comprehensive tools:\n\n| Tool | Purpose | Example Use |\n|------|---------|-------------|\n| **`list_pages`** | Browse your graph | \"Show me all my pages\" |\n| **`get_page_content`** | Read page content | \"Get my project notes\" |\n| **`create_page`** | Add new pages | \"Create a meeting notes page\" |  \n| **`update_page`** | Modify existing pages | \"Update my task list\" |\n| **`delete_page`** | Remove pages | \"Delete the old draft page\" |\n| **`search`** | Find content across graph | \"Search for 'productivity tips'\" |\n\n---\n\n## ⚙️ Prerequisites\n\n### LogSeq Setup\n- **LogSeq installed** and running\n- **HTTP APIs server enabled** (Settings → Features)\n- **API server started** (🔌 button → \"Start server\")  \n- **API token generated** (API panel → Authorization tokens)\n\n### System Requirements\n- **[uv](https://docs.astral.sh/uv/)** Python package manager\n- **MCP-compatible client** (Claude Code, Claude Desktop, etc.)\n\n---\n\n## 🔧 Configuration\n\n### Environment Variables\n- **`LOGSEQ_API_TOKEN`** (required): Your LogSeq API token\n- **`LOGSEQ_API_URL`** (optional): Server URL (default: `http://localhost:12315`)\n\n### Alternative Setup Methods\n\n#### Using .env file\n```bash\n# .env\nLOGSEQ_API_TOKEN=your_token_here\nLOGSEQ_API_URL=http://localhost:12315\n```\n\n#### System environment variables\n```bash\nexport LOGSEQ_API_TOKEN=your_token_here\nexport LOGSEQ_API_URL=http://localhost:12315\n```\n\n---\n\n## 🔍 Verification & Testing\n\n### Test LogSeq Connection\n```bash\nuv run --with mcp-logseq python -c \"\nfrom mcp_logseq.logseq import LogSeq\napi = LogSeq(api_key='your_token')\nprint(f'Connected! Found {len(api.list_pages())} pages')\n\"\n```\n\n### Verify MCP Registration\n```bash\nclaude mcp list  # Should show mcp-logseq\n```\n\n### Debug with MCP Inspector\n```bash\nnpx @modelcontextprotocol/inspector uv run --with mcp-logseq mcp-logseq\n```\n\n---\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n#### \"LOGSEQ_API_TOKEN environment variable required\"\n- ✅ Enable HTTP APIs in **Settings → Features**\n- ✅ Click **🔌 button** → **\"Start server\"** in LogSeq\n- ✅ Generate token in **API panel → Authorization tokens**\n- ✅ Verify token in your configuration\n\n#### \"spawn uv ENOENT\" (Claude Desktop)\nClaude Desktop can't find `uv`. Use the full path:\n\n```bash\nwhich uv  # Find your uv location\n```\n\nUpdate config with full path:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-logseq\": {\n      \"command\": \"/Users/username/.local/bin/uv\",\n      \"args\": [\"run\", \"--with\", \"mcp-logseq\", \"mcp-logseq\"],\n      \"env\": { \"LOGSEQ_API_TOKEN\": \"your_token_here\" }\n    }\n  }\n}\n```\n\n**Common uv locations:**\n- Curl install: `~/.local/bin/uv`\n- Homebrew: `/opt/homebrew/bin/uv` \n- Pip install: Check with `which uv`\n\n#### Connection Issues\n- ✅ Confirm LogSeq is running\n- ✅ Verify API server is **started** (not just enabled)\n- ✅ Check port 12315 is accessible\n- ✅ Test with verification command above\n\n---\n\n## 👩‍💻 Development\n\nFor local development, testing, and contributing, see **[DEVELOPMENT.md](DEVELOPMENT.md)**.\n\n---\n\n<div align=\"center\">\n  <p><strong>Ready to supercharge your LogSeq workflow with AI?</strong></p>\n  <p>⭐ <strong>Star this repo</strong> if you find it helpful!</p>\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "logseq",
        "knowledge",
        "api",
        "logseq knowledge",
        "logseq interact",
        "interact logseq"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "feuerdev--keep-mcp": {
      "owner": "feuerdev",
      "name": "keep-mcp",
      "url": "https://github.com/feuerdev/keep-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/feuerdev.webp",
      "description": "Manage Google Keep notes by creating, updating, searching, and deleting them through an integrated interface. Supports seamless interaction with Google Keep for productivity enhancement.",
      "stars": 47,
      "forks": 16,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T00:24:33Z",
      "readme_content": "# keep-mcp\n\nMCP server for Google Keep\n\n![keep-mcp](https://github.com/user-attachments/assets/f50c4ae6-4d35-4bb6-a494-51c67385f1b6)\n\n## How to use\n\n1. Add the MCP server to your MCP servers:\n\n```json\n  \"mcpServers\": {\n    \"keep-mcp-pipx\": {\n      \"command\": \"pipx\",\n      \"args\": [\n        \"run\",\n        \"keep-mcp\"\n      ],\n      \"env\": {\n        \"GOOGLE_EMAIL\": \"Your Google Email\",\n        \"GOOGLE_MASTER_TOKEN\": \"Your Google Master Token - see README.md\"\n      }\n    }\n  }\n```\n\n2. Add your credentials:\n* `GOOGLE_EMAIL`: Your Google account email address\n* `GOOGLE_MASTER_TOKEN`: Your Google account master token\n\nCheck https://gkeepapi.readthedocs.io/en/latest/#obtaining-a-master-token and https://github.com/simon-weber/gpsoauth?tab=readme-ov-file#alternative-flow for more information.\n\n## Features\n\n* `find`: Search for notes based on a query string\n* `create_note`: Create a new note with title and text (automatically adds keep-mcp label)\n* `update_note`: Update a note's title and text\n* `delete_note`: Mark a note for deletion\n\nBy default, all destructive and modification operations are restricted to notes that have were created by the MCP server (i.e. have the keep-mcp label). Set `UNSAFE_MODE` to `true` to bypass this restriction.\n\n```\n\"env\": {\n  ...\n  \"UNSAFE_MODE\": \"true\"\n}\n```\n\n## Publishing\n\nTo publish a new version to PyPI:\n\n1. Update the version in `pyproject.toml`\n2. Build the package:\n   ```bash\n   pipx run build\n   ```\n3. Upload to PyPI:\n   ```bash\n   pipx run twine upload --repository pypi dist/*\n   ```\n\n## Troubleshooting\n\n* If you get \"DeviceManagementRequiredOrSyncDisabled\" check https://admin.google.com/ac/devices/settings/general and turn \"Turn off mobile management (Unmanaged)\"\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "manage",
        "google notes",
        "google productivity",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "freestylefly--mcp-server-weread": {
      "owner": "freestylefly",
      "name": "mcp-server-weread",
      "url": "https://github.com/freestylefly/mcp-server-weread",
      "imageUrl": "/freedevtools/mcp/pfp/freestylefly.webp",
      "description": "Bridge WeChat reading data with AI for access to notes and reading insights. Extract and analyze reading notes through intelligent conversations.",
      "stars": 469,
      "forks": 52,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T12:59:18Z",
      "readme_content": "<p align=\"center\"><img src= \"https://cdn.canghecode.com/blog/%E5%BE%AE%E4%BF%A1%E8%AF%BB%E4%B9%A6MCP%20bac.png\" alt=\"MaxKB\" width=\"300\" /></p>\n<h3 align=\"center\">一个为微信读书提供 MCP 服务的工具</h3>\n<p align=\"center\">\n  <a href=\"https://opensource.org/license/MIT\"><img src=\"https://img.shields.io/github/license/freestylefly/mcp-server-weread?color=rgb(25%2C%20121%2C%20255)\" alt=\"The MIT License\"></a>\n  <a href=\"\"><img src=\"https://img.shields.io/github/forks/freestylefly/mcp-server-weread?color=green\" alt=\"Forks\"></a>\n  <a href=\"https://canghecode.com/\"><img src=\"https://img.shields.io/badge/介绍-%E5%AE%98%E7%BD%91-green\" alt=\"Official\"></a>\n  <a href=\"https://github.com/laigeoffer/pmhub\"><img src=\"https://img.shields.io/github/stars/freestylefly/mcp-server-weread?style=flat-square&color=rgb(25%2C%20121%2C%20255)\" alt=\"Stars\"></a>    \n  <a href=\"https://mp.weixin.qq.com/s/NQslbUBgWIBMyvTIa3PfYQ\"><img src=\"https://img.shields.io/badge/WeReadMCP-教程-blue\" alt=\"Experience\"></a>  \n</p>\n\n<hr/>\n\n微信读书 MCP Server 是一个为微信读书提供 MCP（Model Context Protocol）服务的工具，支持将微信读书的书籍、笔记和划线数据提供给支持MCP的大语言模型客户端，如Cursor、Claude Desktop。\n\n## 功能特点\n\n- 从微信读书获取书架信息\n- 搜索书架中的图书\n- 获取图书的笔记和划线\n- 获取图书的热门书评\n- 支持按章节组织笔记和划线\n- 与支持MCP协议的LLM客户端无缝集成\n\n## 主要工具\n\n1. **get_bookshelf** - 获取用户书架上所有书籍\n   - 返回书籍基本信息，包括书名、作者、译者和分类等\n\n2. **search_books** - 通过关键词检索用户书架上的书籍\n   - 支持模糊匹配和精确匹配\n   - 可选是否包含详细信息\n   - 可设置最大结果数量\n\n3. **get_book_notes_and_highlights** - 获取指定书籍的所有划线和笔记\n   - 支持按章节组织结果\n   - 支持筛选划线样式\n   - 返回结构化的数据以便于LLM理解\n\n4. **get_book_best_reviews** - 获取指定书籍的热门书评\n   - 支持设置返回数量\n   - 支持分页浏览\n   - 包含评分、点赞数和评论者信息\n\n## 安装与使用\n\n### 先决条件\n\n- Node.js 16.x 或更高版本\n- 微信读书账号和有效的Cookie\n\n### 安装教程\n\n详见：\n- [用微信读书MCP在Cursor中构建私人图书馆，太哇塞了！](https://mp.weixin.qq.com/s/NQslbUBgWIBMyvTIa3PfYQ)\n- [Weread MCP Server 使用指南](https://chenge.ink/article/post20250505)\n\n### 与Claude Desktop集成\n\n有多种方式可以与Claude Desktop集成：\n\n#### 方式一：通过 npx 使用（最简单，推荐）\n1. 打开Claude Desktop\n2. 进入设置 -> MCP配置\n3. 添加工具，使用以下JSON配置：\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-server-weread\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"mcp-server-weread\"],\n         \"env\": {\n           // 方式1：使用Cookie Cloud（推荐）\n           \"CC_URL\": \"https://cc.chenge.ink\",  // Cookie Cloud的URL\n           \"CC_ID\": \"您的ID\",                   // Cookie Cloud的ID\n           \"CC_PASSWORD\": \"您的密码\"            // Cookie Cloud的密码\n           \n           // 或方式2：直接提供Cookie\n           // \"WEREAD_COOKIE\": \"您的微信读书Cookie\"\n         }\n       }\n     }\n   }\n   ```\n\n#### 方式二：全局安装后使用\n\n1. 全局安装包：\n   ```bash\n   npm install -g mcp-server-weread\n   ```\n\n2. 在Claude配置中使用：\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-server-weread\": {\n         \"command\": \"mcp-server-weread\",\n         \"env\": {\n           // 同上方式配置环境变量\n         }\n       }\n     }\n   }\n   ```\n\n> 提示：直接在Claude配置中提供环境变量的方式更加方便，无需设置.env文件，推荐使用。\n\n## CookieCloud 配置说明\n为了解决 Cookie 频繁过期，需要重新获取并更新环境变量的问题。本项目支持 [CookieCloud](https://github.com/easychen/CookieCloud) 服务来自动同步和更新 Cookie。CookieCloud 是一个开源的跨浏览器 Cookie 同步工具，支持自建服务器。\n\n### 配置步骤：\n安装浏览器插件\nEdge商店：[CookieCloud for Edge](https://microsoftedge.microsoft.com/addons/detail/cookiecloud/bffenpfpjikaeocaihdonmgnjjdpjkeo)\nChrome商店：[CookieCloud for Chrome](https://chromewebstore.google.com/detail/cookiecloud/ffjiejobkoibkjlhjnlgmcnnigeelbdl)\n\n### 配置 CookieCloud 插件\n服务器地址：使用默认服务器 https://cc.chenge.ink 或填入自建服务器地址\n点击 \"自动生成密码\"\n同步域名关键词中填入 \"weread\"\n点击\"保存\" ，然后点击 \"手动同步\"确保配置生效\n[可选] 如果需要插件自动保活，可以在保活中填入 https://weread.qq.com，插件会自动刷新 Cookie\n\n在MCP Json中配置CookieCloud变量：\nCC_URL=你的CookieCloud服务器地址 （或使用我的默认服务器地址 https://cc.chenge.ink ）\nCC_ID=你的CookieCloud用户UUID\nCC_PASSWORD=你的CookieCloud密码\n注意：配置 CookieCloud 后，系统会优先使用 CookieCloud 获取 Cookie，获取失败才会使用 WEREAD_COOKIE 环境变量的值。\n\n## Cookie获取方法\n微信读书的Cookie可以通过以下步骤获取：\n1. 使用Chrome浏览器登录[微信读书网页版](https://weread.qq.com/)\n2. 按F12打开开发者工具，切换到Network标签页\n3. 刷新页面，在请求列表中找到weread.qq.com的请求\n4. 在Headers中找到Cookie字段，复制其完整内容\n5. 将复制的内容添加到MCP Json 或 .env文件的WEREAD_COOKIE变量中\n\n## 使用示例\n以下是一些与LLM对话的示例：\n\n**获取书架信息**\n```\n用户: 帮我查看我的微信读书书架\nLLM: 我将获取您的微信读书书架信息。\n[LLM调用get_bookshelf工具]\n我从您的微信读书书架获取到了208本书籍。以下是部分书籍：\n1. 《隐藏的自我》- 大卫·伊格曼\n2. 《思考，快与慢》- 丹尼尔·卡尼曼\n3. 《人类简史》- 尤瓦尔·赫拉利\n...\n```\n\n**搜索特定书籍**\n```\n用户: 帮我找关于心理学的书\nLLM: 我将搜索您书架上与心理学相关的书籍。\n[LLM调用search_books工具，参数为keyword=\"心理学\"]\n在您的书架上，我找到了3本与心理学相关的书籍：\n1. 《思考，快与慢》- 丹尼尔·卡尼曼（进度：75%）\n2. 《乌合之众》- 古斯塔夫·勒庞（进度：50%）\n3. 《心理学与生活》- 理查德·格里格（进度：30%）\n您想了解哪一本书的更多信息？\n```\n\n**获取笔记和划线**\n```\n用户: 帮我整理《思考，快与慢》这本书的笔记\nLLM: 我将获取《思考，快与慢》的笔记和划线。\n[LLM调用search_books工具，找到书籍ID]\n[LLM调用get_book_notes_and_highlights工具]\n以下是您在《思考，快与慢》中的笔记和划线（按章节组织）：\n\n第一章：系统1和系统2\n- 划线：「系统1的运行是无意识且快速的，不怎么费脑力，没有感觉，完全处于自主控制状态。」\n- 您的笔记：「系统1负责直觉和快速判断，系统2负责缓慢的理性思考。」\n\n第三章：锚定效应\n- 划线：「锚定效应指的是在不确定情境下进行数字估计时，会过度受到事先接触的不相干数字的影响。」\n...\n```\n\n**获取热门书评**\n```\n用户: 这本《原则》有哪些热门书评？\nLLM: 我会为您查找《原则》的热门书评。\n[LLM调用search_books工具，找到书籍ID]\n[LLM调用get_book_best_reviews工具]\n以下是《原则》的热门书评：\n\n1. 评论者\"思考者\"（评分：5星）：\n   \"这是一本关于如何思考的书。达利欧将自己多年的经验总结为可操作的原则，帮助我们做出更好的决策。特别喜欢他关于'痛苦+反思=进步'的观点，非常实用。\"\n   👍 182 | 💬 23\n\n2. 评论者\"投资学习者\"（评分：4星）：\n   \"桥水基金创始人的思想精华，值得反复阅读。书中的工作原则部分对管理者特别有帮助，建议先读生活原则，再读工作原则。\"\n   👍 94 | 💬 12\n...\n```\n\n## 九、友情链接\n\n- [mcp-server-weread](https://github.com/ChenyqThu/mcp-server-weread) ：🚀一个为微信读书提供MCP（Model Context Protocol）服务的工具，支持将微信读书的书籍、笔记和划线数据提供给支持MCP的大语言模型客户端，如Claude Desktop。\n- [CodeCanvas](https://github.com/freestylefly/CodeCanvas) ：📚本代码仓库是作者苍何多年从事一线互联网Java开发的学习历程技术汇总，旨在为大家提供一个清晰详细的学习教程，侧重点更倾向编写Java核心内容。💪🏻\n- [PmHub](https://github.com/laigeoffer/pmhub) ：🔥PmHub 是一套基于 SpringCloud & LLM 的微服务智能项目管理系统，这个项目旨在帮助小伙伴们快速掌握微服务/分布式项目的架构设计和开发流程，如果想在校招或者社招中拿到一个满意的 offer，PmHub 将是一个非常 nice 的选择。\n\n## 十、鸣谢\n\n此项目 fork 自 ChenyqThu 的[mcp-server-weread](https://github.com/ChenyqThu/mcp-server-weread)项目，做了一些小修改，突然就🔥了，这里也请大家去作者GitHub原项目上star，另外ChenyqThu新的更新我也会做同步，项目也会保持使用教程的更新，感谢大家的喜欢。\n\n## 十一、star 趋势图\n\n[![Star History Chart](https://api.star-history.com/svg?repos=freestylefly/mcp-server-weread&type=Date)](https://star-history.com/#freestylefly/mcp-server-weread&Date)\n\n## 十二、公众号\n\n微信搜 **苍何** 或扫描下方二维码关注苍何的原创公众号，回复 **AI** 即可和 5000+ 好友一同探讨AI，一同学习MCP。\n\n![苍何微信公众号](https://cdn.tobebetterjavaer.com/stutymore/%E6%89%AB%E7%A0%81_%E6%90%9C%E7%B4%A2%E8%81%94%E5%90%88%E4%BC%A0%E6%92%AD%E6%A0%B7%E5%BC%8F-%E6%A0%87%E5%87%86%E8%89%B2%E7%89%88.png)\n\n## 十三、许可证\n\n[MIT License (MIT)](https://opensource.org/licenses/MIT)<hr/>\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nCopyright (c) 2025-2026 mcp-server-weread\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "ai",
        "notes",
        "notes intelligent",
        "notes reading",
        "reading notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ghubnerr--Notion-MCP": {
      "owner": "ghubnerr",
      "name": "Notion-MCP",
      "url": "https://github.com/ghubnerr/Notion-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/ghubnerr.webp",
      "description": "Integrate AI models with Notion to access and manage tasks, deadlines, and project statuses. Supports querying and modifying content within Notion workspaces through a standardized interface.",
      "stars": 4,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-15T02:04:30Z",
      "readme_content": "# Notion MCP Server\n\nA Model Context Protocol (MCP) server for integrating with Notion workspaces. This server provides a standardized interface for AI models to access, query, and modify content in Notion.\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Notion API Key (from your [Notion integrations](https://www.notion.so/my-integrations))\n- Connected Notion workspace with appropriate permissions\n\n## Installation\n\n1. Clone this repository:\n\n   ```\n   git clone https://github.com/yourusername/notion-mcp-server.git\n   cd notion-mcp-server\n   ```\n\n2. Install dependencies:\n\n   ```\n   npm install\n   ```\n\n3. Create a `.env` file in the root directory with your Notion API key:\n\n   ```\n   # Required\n   NOTION_API_KEY=your_notion_api_key_here\n\n   # Optional settings\n   DEBUG=false\n   REQUIRE_CONFIRMATION_FOR_CREATE=true\n   REQUIRE_CONFIRMATION_FOR_UPDATE=true\n   REQUIRE_CONFIRMATION_FOR_DELETE=true\n   UPDATE_POLLING_INTERVAL=60000\n   MAX_BLOCK_DEPTH=3\n   BACKUP_DIR=./backups\n   BACKUP_RETENTION_DAYS=30\n   MAX_BACKUPS_PER_PAGE=5\n   ```\n\n4. Build the project:\n\n   ```\n   npm run build\n   ```\n\n5. Start the server:\n   ```\n   npm start\n   ```\n\n## Using with Claude for Desktop\n\nTo use this Notion MCP server with Claude for Desktop:\n\n1. Ensure Claude for Desktop is installed and updated to the latest version\n2. Open Claude for Desktop's configuration file:\n\n   - On macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - On Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n3. Add the server configuration:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"notion\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/notion-mcp-server/build/index.js\"],\n         \"env\": {\n           \"NOTION_API_KEY\": \"your_notion_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\n4. Save the file and restart Claude for Desktop\n\n## Resources\n\nThe server exposes the following resources:\n\n| Resource URI                              | Description                                           |\n| ----------------------------------------- | ----------------------------------------------------- |\n| `notion://databases`                      | Lists all databases in the workspace                  |\n| `notion://databases/{databaseId}/schema`  | Retrieves the schema of a specific database           |\n| `notion://databases/{databaseId}/content` | Retrieves all pages/items from a specific database    |\n| `notion://pages/{pageId}`                 | Retrieves the content of a specific page              |\n| `notion://updates`                        | Retrieves recent updates and changes in the workspace |\n\n# Tools\n\nThe server provides the following tools:\n\n## Prompts\n\nThe server includes these pre-configured prompts:\n\n| Prompt Name          | Description                       |\n| -------------------- | --------------------------------- |\n| `upcoming-deadlines` | Get a list of upcoming deadlines  |\n| `project-status`     | Summarize the status of a project |\n| `daily-tasks`        | Get a list of tasks for today     |\n\n## Example Queries\n\nOnce connected to Claude, you can ask natural language questions about your Notion workspace:\n\n1. \"What tasks are due today in my workspace?\"\n2. \"Show me the status of Project X\"\n3. \"Create a new page in my 'Ideas' database with title 'New Feature Concept'\"\n4. \"Update the status of task Y to 'Completed'\"\n5. \"What changes were made to my workspace in the last 24 hours?\"\n6. \"Summarize the upcoming deadlines for the next week\"\n7. \"Show me all backups for page abc123\"\n8. \"Restore page abc123 from the backup file page_abc123_2023-01-01.json\"\n\n### Extending the Server\n\nTo add new functionality:\n\n1. **Add Resources**: Extend the resource handlers in `index.ts`\n2. **Add Tools**: Create new tool definitions in `index.ts`\n3. **Add Prompts**: Define new prompt templates in `index.ts`\n4. **Enhance API Integration**: Add new API functions in `notion-api.ts`\n\n### Logs\n\nCheck server logs for detailed error information:\n\n- **Claude for Desktop Logs**: Look in the Claude logs directory for MCP-related logs\n- **Server Output**: Check standard output and error streams for server logs\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tasks",
        "notetaking",
        "ai",
        "notion workspaces",
        "manage tasks",
        "notion access"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "gregkonush--mcp-obsidian": {
      "owner": "gregkonush",
      "name": "mcp-obsidian",
      "url": "https://github.com/gregkonush/mcp-obsidian",
      "imageUrl": "/freedevtools/mcp/pfp/gregkonush.webp",
      "description": "Integrate with Obsidian to manage notes by reading, creating, and manipulating files in the vault. Supports various operations including searching notes and handling file content.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-13T19:40:26Z",
      "readme_content": "# MCP Obsidian\n\nA server implementation of the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/protocol) for integrating with [Obsidian](https://obsidian.md/). This allows AI assistants to read, create, and manipulate notes in your Obsidian vault.\n\n## Features\n\n- Read the active file in Obsidian\n- Delete the active file\n- Insert content at specific positions (headings, block references, frontmatter)\n- Append content to files\n- Open specific files\n- List files in your vault\n- Search through your notes\n\n## Prerequisites\n\n- [Bun](https://bun.sh/) runtime\n- [Obsidian](https://obsidian.md/) desktop application\n- An MCP-compatible AI assistant\n\n## Add to cursor\nPlace your secret in .env file\n\nChoose command MCP and then enter this command\n\n```\nbun __REPO_PATH__/src/index.ts\n```\n\n## Installation\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/gregkonush/mcp-obsidian.git\n   cd mcp-obsidian\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   bun install\n   ```\n\n3. Copy the example environment file and configure it:\n   ```bash\n   cp .env.example .env\n   ```\n\n## Configuration\n\nEdit the `.env` file with your specific configurations:\n\n```\nOBSIDIAN_BASE_URL=http://localhost:27123\nOBSIDIAN_TOKEN=your_token_here\nDEBUG=false\n```\n\n## Usage\n\nStart the MCP server:\n\n```bash\nbun run src/index.ts\n```\n\nThe server will start and communicate with MCP-compatible AI assistants via standard I/O.\n\n## Available Tools\n\nThis implementation provides the following tools to AI assistants:\n\n- `get_active_file` - Returns the content of the currently active file\n- `delete_active_file` - Deletes the currently active file\n- `insert_active_file` - Modifies content relative to a heading, block reference, or frontmatter field\n- `append_active_file` - Appends content to the end of the active file\n- `open_file` - Opens a specific file in Obsidian\n- `search_simple` - Searches for documents matching a text query\n- `list_files` - Lists files in the root directory of your vault\n- `list_directory_files` - Lists files in a specific directory of your vault\n\n## Development\n\n### Project Structure\n\n```\nmcp-obsidian/\n├── src/\n│   ├── index.ts            # Main server implementation\n│   └── tools/              # Individual tool implementations\n│       ├── get-active-file.ts\n│       ├── delete-active-file.ts\n│       └── ...\n├── .env                    # Environment configuration\n├── package.json            # Project dependencies\n└── tsconfig.json           # TypeScript configuration\n```\n\n### Adding New Tools\n\nTo add a new tool:\n\n1. Create a new file in the `src/tools/` directory\n2. Implement the tool using the MCP SDK\n3. Import and register the tool in `src/index.ts`\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "obsidian",
        "notes",
        "mcp obsidian",
        "obsidian manage",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "gyger--mcp-pyzotero": {
      "owner": "gyger",
      "name": "mcp-pyzotero",
      "url": "https://github.com/gyger/mcp-pyzotero",
      "imageUrl": "/freedevtools/mcp/pfp/gyger.webp",
      "description": "Integrates a local Zotero library with Claude Desktop, enabling direct read access to bibliographic data through a local web API in Zotero 7.",
      "stars": 52,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-17T14:22:13Z",
      "readme_content": "# Zotero MCP Connector\n\nA Model Control Protocol (MCP) connector for integrating your local Zotero with Claude.  \nThis enables direct read access to your local Zotero library through Claude's Desktop interface.\nIt depends on the ability to access a local web-api in Zotero 7.\n\nThis was inspired by a repository using Node.js and the web api: [mcp-zotero](https://github.com/kaliaboi/mcp-zotero).  \nThis builds on the shoulders of the fantastic [pyzotero](https://github.com/urschrei/pyzotero) library.\n\n## Installation\n\n### Run from local code (Recommended)\nInformation about Claude Desktop interacting with MCPs can be found [here](https://modelcontextprotocol.io/quickstart/user).\n\n1. Use `uv`. Installation instructions can be found [here](https://docs.astral.sh/uv/getting-started/installation/).\n\n2. Checkout the git project to local space and activate the virtual environment inside:\n```bash\ngit clone https://github.com/gyger/mcp-pyzotero.git\ncd mcp-pyzotero\nuv sync\n```\n\n3. Enable the local API in Zotero 7:\n   \n\n4. Add the server to your local Claude installation:\n```bash\nuv run mcp install zotero.py\n```\n\n### Run encapsulated with uvx (Should work)\nEdit the configuration for your Claude Desktop softare in the file.\n\n    - macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n    - Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n\nand add the Zotero entry\n```json\n{\n    \"mcpServers\": {\n        \"Zotero\": {\n            \"command\": \"uvx\",\n            \"args\": [\"--from\", \"git+https://github.com/gyger/mcp-pyzotero.git\", \n                     \"--with\", \"mcp[cli]\",\n                     \"--with\", \"pyzotero\",\n                     \"mcp\", \"run\", \"zotero.py\"\n                    ],\n        }\n    }\n}\n```\n\n## Configuration\n\nThe connector is configured to work with local Zotero installations and currently only `user` libraries are supported. \nBy default it uses the userid `0`, but you can also set the environment variable `ZOTERO_USER_ID` if needed:\n\n```bash\nuv run mcp install zotero.py -v ZOTERO_USER_ID=0\n```\n\n## Available Functions\n\n### Available tools\n- `get_zotero_summary()`: Lists properties about your library including collections, recent items or tags.\n- `get_collection_items(collection_key)`: Get all items in a specific collection\n- `get_items_metadata(item_key)`: Get detailed information about specific paper(s), including abstract.\n- `search_library(query, mode)`: Search your Zotero library, with two possible modes: everything or titleCreatorYear.\n\nThis functionality should be extended in the future.\n\n## Requirements\n\n- Python 3.10+\n  - pyzotero\n  - mcp[cli]\n- Local Zotero installation\n\n## Contributing\n\nContributions are welcome! Please visit the [GitHub repository](https://github.com/gyger/mcp-pyzotero) to:\n- Report issues\n- Submit pull requests\n- Suggest improvements\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zotero",
        "library",
        "bibliographic",
        "zotero library",
        "api zotero",
        "local zotero"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "hannesrudolph--imessage-query-fastmcp-mcp-server": {
      "owner": "hannesrudolph",
      "name": "imessage-query-fastmcp-mcp-server",
      "url": "https://github.com/hannesrudolph/imessage-query-fastmcp-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/hannesrudolph.webp",
      "description": "Provides secure access to the iMessage database, enabling queries and analysis of iMessage conversations with validated phone numbers and attachment handling.",
      "stars": 69,
      "forks": 13,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-04T05:33:48Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/hannesrudolph-imessage-query-fastmcp-mcp-server-badge.png)](https://mseep.ai/app/hannesrudolph-imessage-query-fastmcp-mcp-server)\n\n# iMessage Query MCP Server\n\nAn MCP server that provides safe access to your iMessage database through Model Context Protocol (MCP). This server is built with the FastMCP framework and the imessagedb library, enabling LLMs to query and analyze iMessage conversations with proper phone number validation and automatic macOS permission handling.\n\n## 📋 System Requirements\n\n- macOS (required for iMessage database access)\n- Python 3.12+ (required for modern type hints)\n- **uv** (modern Python package manager)\n- **Full Disk Access permission** for your MCP client (Claude Desktop, Cursor, VS Code, etc.)\n\n## 📦 Dependencies\n\n### Install uv (Required)\n\nThis project uses `uv` for fast, reliable Python package management. Install it first:\n\n```bash\n# Install uv using Homebrew (recommended)\nbrew install uv\n\n# Or install using the official installer\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n### Python Dependencies\n\nThe script automatically manages its dependencies using the embedded metadata. No separate installation needed! Dependencies include:\n\n- **fastmcp**: Framework for building Model Context Protocol servers\n- **imessagedb**: Python library for accessing and querying the macOS Messages database\n- **phonenumbers**: Google's phone number handling library for proper number validation and formatting\n\nAll dependencies are automatically installed when the script runs via `uv`.\n\n## 📑 Table of Contents\n- [System Requirements](#-system-requirements)\n- [Dependencies](#-dependencies)\n- [MCP Tools](#%EF%B8%8F-mcp-tools)\n- [Getting Started](#-getting-started)\n- [Installation Options](#-installation-options)\n  - [Claude Desktop](#option-1-install-for-claude-desktop)\n  - [Cline VSCode Plugin](#option-2-install-for-cline-vscode-plugin)\n- [macOS Permissions Setup](#-macos-permissions-setup)\n- [Safety Features](#-safety-features)\n- [Development Documentation](#-development-documentation)\n- [Environment Variables](#%EF%B8%8F-environment-variables)\n\n## 🛠️ MCP Tools\n\nThe server exposes the following tools to LLMs:\n\n### get_chat_transcript\nRetrieve message history for a specific phone number with optional date filtering.\n\n**Parameters:**\n- `phone_number` (required): Phone number in any format (E.164 format preferred)\n- `start_date` (optional): Start date in ISO format (YYYY-MM-DD)\n- `end_date` (optional): End date in ISO format (YYYY-MM-DD)\n\n**Features:**\n- Automatic phone number validation and formatting\n- Message text and timestamps\n- Attachment information with missing file detection\n- Date range filtering (defaults to last 7 days if no dates specified)\n- Sender identification (is_from_me flag)\n\n## 🚀 Getting Started\n\nClone the repository:\n\n```bash\ngit clone https://github.com/hannesrudolph/imessage-query-fastmcp-mcp-server.git\ncd imessage-query-fastmcp-mcp-server\n```\n\n## 📦 Installation Options\n\nYou can install this MCP server in Claude Desktop, Cline VSCode plugin, or any other MCP client. Choose the option that best suits your needs.\n\n### Option 1: Claude Desktop\n\n1. **Find your Claude Desktop config file:**\n   - **Location**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Create the file if it doesn't exist\n\n2. **Add the server configuration:**\n\n```json\n{\n  \"mcpServers\": {\n    \"imessage-query\": {\n      \"command\": \"/full/path/to/imessage-query-server.py\"\n    }\n  }\n}\n```\n\n3. **Replace the path** with the full path to your cloned repository (e.g., `/Users/username/Projects/imessage-query-fastmcp-mcp-server/imessage-query-server.py`)\n\n4. **Restart Claude Desktop** completely (Cmd+Q, then relaunch)\n\n### Option 2: Cline VSCode Plugin\n\nTo use this server with the [Cline VSCode plugin](http://cline.bot):\n\n1. In VSCode, click the server icon (☰) in the Cline plugin sidebar\n2. Click the \"Edit MCP Settings\" button (✎)\n3. Add the following configuration to the settings file:\n\n```json\n{\n  \"imessage-query\": {\n    \"command\": \"/full/path/to/imessage-query-server.py\"\n  }\n}\n```\n\n4. **Replace the path** with the full path to your cloned repository\n\n### Option 3: Other MCP Clients\n\nFor other MCP clients, use the direct script path as the command:\n\n```\n/full/path/to/imessage-query-server.py\n```\n\nThe script's shebang (`#!/usr/bin/env -S uv run --script`) handles dependency management automatically.\n\n> **Note**: This simplified configuration replaces the previous FastMCP installation method. The script is now self-contained and manages its own dependencies through `uv`.\n\n## 🔐 macOS Permissions Setup\n\nThis server requires **Full Disk Access** permission to read the iMessage database. The server includes intelligent permission detection and will guide you through the setup process.\n\n### Automatic Permission Detection\n\nWhen you first use the server, it will:\n1. **Detect your MCP client** (Claude Desktop, Cursor, VS Code, etc.)\n2. **Check for Full Disk Access** permission\n3. **Automatically open System Preferences** to the correct settings panel\n4. **Provide step-by-step instructions** specific to your application\n\n### Manual Permission Setup\n\nIf automatic detection doesn't work, follow these steps:\n\n1. **Open System Preferences** → **Privacy & Security** → **Full Disk Access**\n2. **Click the lock icon** and enter your password to make changes\n3. **Click the '+' button** to add an application\n4. **Navigate to and select your MCP client:**\n   - **Claude Desktop**: `/Applications/Claude.app`\n   - **Cursor**: `/Applications/Cursor.app`\n   - **VS Code**: `/Applications/Visual Studio Code.app`\n5. **Restart your MCP client** completely (Cmd+Q, then relaunch)\n\n### Common Issues\n\n- **Permission denied errors**: Make sure you've restarted your MCP client after granting permission\n- **\"uv\" instead of app name**: The server will auto-detect your actual MCP client and provide correct instructions\n- **Database not found**: Ensure you've used the Messages app and iMessage is enabled\n\n### Security Note\n\nThis server only requires **read access** to your iMessage database. It cannot modify, delete, or send messages.\n\n## 🔒 Safety Features\n\n- **Read-only access** to the iMessage database (cannot modify, delete, or send messages)\n- **Phone number validation** using Google's phonenumbers library with proper E.164 formatting\n- **Safe attachment handling** with missing file detection and metadata extraction\n- **Date range validation** to prevent invalid queries\n- **Progress output suppression** for clean JSON responses in MCP protocol\n- **Intelligent permission detection** with automatic System Preferences navigation\n- **MCP client identification** for accurate permission guidance\n\n## 📚 Development Documentation\n\nThe repository includes comprehensive documentation for development:\n\n- `dev_docs/imessagedb-documentation.txt`: Complete documentation about the iMessage database structure and the imessagedb library's capabilities\n- `dev_docs/fastmcp-documentation.txt`: FastMCP framework details and MCP tool development\n- `dev_docs/mcp-documentation.txt`: Model Context Protocol specification\n\nThis documentation serves as context when developing features and can be used with LLMs to assist in development.\n\n## ⚙️ Environment Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `SQLITE_DB_PATH` | Custom path to iMessage database | `~/Library/Messages/chat.db` |\n\nThe server automatically locates the iMessage database in the default macOS location. The environment variable is only needed for custom database locations.\n\n## 🔧 Advanced Usage\n\n### Custom Database Path\n\nIf you need to use a custom database path:\n\n```bash\nexport SQLITE_DB_PATH=\"/path/to/custom/chat.db\"\n```\n\n### Testing the Server\n\nTest the server directly using mcptools (github.com/f/mcptools):\n\n```bash\n# Navigate to the repository directory\ncd /path/to/imessage-query-fastmcp-mcp-server\n\n# List available tools\nmcp tools ./imessage-query-server.py\n\n# Test a tool call\nmcp call get_chat_transcript ./imessage-query-server.py -p '{\"phone_number\": \"+1234567890\"}'\n```\n\nThe script will automatically handle dependency installation via `uv` when first run.\n\n## 🐛 Troubleshooting\n\n### Common Error Messages\n\n**\"❌ Full Disk Access permission required\"**\n- Follow the [macOS Permissions Setup](#-macos-permissions-setup) section\n- Ensure you've restarted your MCP client after granting permission\n\n**\"Messages database not found\"**\n- Make sure you've used the Messages app at least once\n- Verify iMessage is enabled in Messages preferences\n\n**\"Invalid phone number\"**\n- Phone numbers are validated using Google's phonenumbers library\n- Try using E.164 format (e.g., \"+1234567890\")\n- US numbers without country code will be assumed to be US numbers\n\n### Getting Help\n\nIf you encounter issues:\n1. Check the error message for specific guidance\n2. Ensure your MCP client has Full Disk Access permission\n3. Verify the Messages app has been used and iMessage is enabled\n4. Try testing the server directly with mcptools (see Advanced Usage)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "imessage",
        "fastmcp",
        "hannesrudolph",
        "hannesrudolph imessage",
        "imessage database",
        "imessage query"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "honeybluesky--my-apple-remembers": {
      "owner": "honeybluesky",
      "name": "my-apple-remembers",
      "url": "https://github.com/honeybluesky/my-apple-remembers",
      "imageUrl": "/freedevtools/mcp/pfp/honeybluesky.webp",
      "description": "Recalls and saves memories from Apple Notes, accessing notes, calendar events, messages, and files on macOS. Facilitates the persistence of important information for future reference with minimal setup.",
      "stars": 9,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-13T14:48:09Z",
      "readme_content": "# MCP Server - My Apple Remembers\n**A simple MCP server that recalls and saves memories from and to Apple Notes.**\n\n[![Docker Pulls](https://img.shields.io/docker/pulls/buryhuang/mcp-my-apple-remembers)](https://hub.docker.com/r/buryhuang/mcp-my-apple-remembers)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n<img width=\"600\" alt=\"image\" src=\"https://github.com/user-attachments/assets/9bd5bc1c-02fe-4e71-88c4-46b3e9438ac0\" />\n\n\n## Features\n\n* **Memory Recall**: Access notes, calendar events, messages, files and other information from your Mac\n* **Memory Persistence**: Save important information to Apple Notes for future reference\n* **Minimal Setup**: Just enable Remote Login on the target Mac\n* **Universal Compatibility**: Works with all macOS versions\n\n## Control in your hand\nYou can use prompt to instruct how you want your memory to be save. For example:\n```\nYou should always use Folder \"baryhuang\" on recall and save memory.\n```\n\n## Installation\n- [Enable SSH on macOS](https://support.apple.com/guide/mac-help/allow-a-remote-computer-to-access-your-mac-mchlp1066/mac)\n- [Install Docker Desktop for local Mac](https://docs.docker.com/desktop/setup/install/mac-install/)\n- [Add this MCP server to Claude Desktop](https://modelcontextprotocol.io/quickstart/user)\n\nYou can configure Claude Desktop to use the Docker image by adding the following to your Claude configuration:\n```json\n{\n  \"mcpServers\": {\n    \"my-apple-remembers\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"-e\",\n        \"MACOS_USERNAME=your_macos_username\",\n        \"-e\",\n        \"MACOS_PASSWORD=your_macos_password\",\n        \"-e\",\n        \"MACOS_HOST=localhost\",\n        \"--rm\",\n        \"buryhuang/mcp-my-apple-remembers:latest\"\n      ]\n    }\n  }\n}\n```\n\n## Developer Instructions\n### Clone the repo\n```bash\n# Clone the repository\ngit clone https://github.com/baryhuang/mcp-my-apple-remembers.git\ncd mcp-my-apple-remembers\n```\n\n### Building the Docker Image\n\n```bash\n# Build the Docker image\ndocker build -t mcp-my-apple-remembers .\n```\n\n### Publishing Multi-Platform Docker Images\n\n```bash\n# Set up Docker buildx for multi-platform builds\ndocker buildx create --use\n\n# Build and push the multi-platform image\ndocker buildx build --platform linux/amd64,linux/arm64 -t buryhuang/mcp-my-apple-remembers:latest --push .\n```\n\n### Tools Specifications\n\n#### my_apple_recall_memory\nRun AppleScript commands on a remote macOS system to recall memories. This tool helps access Apple Notes, Calendar events, iMessages, chat history, files, and other information on your Mac.\n\n#### my_apple_save_memory\nRun AppleScript commands on a remote macOS system to save important information. This tool allows AI to persist relevant information to Apple Notes for future reference. \n\nAll tools require macOS SSH access, with host and password.\n\n## Security Note\n\nAlways use secure, authenticated connections when accessing remote macOS machines. This tool should only be used with servers you trust and have permission to access.\n\n## License\n\nSee the LICENSE file for details. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "saves",
        "apple remembers",
        "apple notes",
        "saves memories"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "inkdropapp--mcp-server": {
      "owner": "inkdropapp",
      "name": "mcp-server",
      "url": "https://github.com/inkdropapp/mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/inkdropapp.webp",
      "description": "Retrieve, create, and manage notes with a local HTTP server for efficient note handling in Inkdrop. Access and organize notebooks through a standardized model context protocol.",
      "stars": 40,
      "forks": 8,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-10-03T23:38:29Z",
      "readme_content": "## Inkdrop MCP Server\n\nA [Model Context Protocol](https://github.com/modelcontextprotocol) server for the [Inkdrop Local HTTP Server API](https://developers.inkdrop.app/data-access/local-http-server).\n\n<a href=\"https://glama.ai/mcp/servers/c7fgtnckbv\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/c7fgtnckbv/badge\" alt=\"Inkdrop Server MCP server\" />\n</a>\n\n## Installation\n\n1. [Set up a local HTTP server](https://developers.inkdrop.app/guides/integrate-with-external-programs)\n\n2. Add server config to Claude Desktop:\n   - MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"inkdrop\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@inkdropapp/mcp-server\"],\n      \"env\": {\n        \"INKDROP_LOCAL_SERVER_URL\": \"http://localhost:19840\",\n        \"INKDROP_LOCAL_USERNAME\": \"your-local-server-username\",\n        \"INKDROP_LOCAL_PASSWORD\": \"your-local-server-password\"\n      }\n    }\n  }\n}\n```\n\n## Components\n\n### Tools\n\n1. **`read-note`**: Retrieve the complete contents of the note by its ID from the database.\n   - Required inputs:\n     - `noteId`: The ID of the note to retrieve. It can be found as `_id` in the note docs. It always starts with `note:`.\n2. **`search-notes`**: List all notes that contain a given keyword.\n   - Required inputs:\n     - `keyword`: Keyword to search for.\n   - Note: Results include truncated note bodies (200 characters). Use `read-note` to get full content.\n   - Supports advanced search qualifiers like `book:`, `tag:`, `status:`, `title:`, etc.\n3. **`list-notes`**: List all notes with specified conditions.\n   - Required inputs:\n     - `bookId`: The notebook ID. It always starts with 'book:'.\n   - Optional inputs:\n     - `tagIds`: An array of tag IDs to filter. Each starts with 'tag:'.\n     - `keyword`: Keyword to filter notes.\n     - `sort`: Sort field (`updatedAt`, `createdAt`, or `title`). Default: `updatedAt`.\n     - `descending`: Reverse the order of output. Default: `true`.\n   - Note: Results include truncated note bodies (200 characters). Use `read-note` to get full content.\n4. **`create-note`**: Create a new note in the database.\n   - Required inputs:\n     - `bookId`: The notebook ID. Must start with 'book:' or be 'trash'.\n     - `title`: The note title.\n     - `body`: The content of the note in Markdown.\n   - Optional inputs:\n     - `status`: The note status (`none`, `active`, `onHold`, `completed`, `dropped`).\n     - `tags`: An array of tag IDs to assign to the note. Each must start with 'tag:'.\n5. **`update-note`**: Update an existing note in the database.\n   - Required inputs:\n     - `_id`: The note ID. Must start with 'note:'.\n     - `_rev`: The revision ID (CouchDB MVCC-token).\n     - `bookId`: The notebook ID. Must start with 'book:' or be 'trash'.\n     - `title`: The note title.\n     - `body`: The content of the note in Markdown.\n   - Optional inputs:\n     - `status`: The note status (`none`, `active`, `onHold`, `completed`, `dropped`).\n     - `tags`: An array of tag IDs to assign to the note. Each must start with 'tag:'.\n6. **`list-notebooks`**: Retrieve a list of all notebooks.\n7. **`read-book`**: Retrieve a single notebook by its ID.\n   - Required inputs:\n     - `bookId`: The notebook ID. Must start with 'book:'.\n8. **`list-tags`**: Retrieve a list of all tags.\n9. **`read-tag`**: Retrieve a single tag by its ID.\n   - Required inputs:\n     - `tagId`: The tag ID. Must start with 'tag:'.\n10. **`create-tag`**: Create a new tag in the database.\n    - Required inputs:\n      - `name`: The name of the tag.\n    - Optional inputs:\n      - `color`: The color type of the tag (`default`, `red`, `orange`, `yellow`, `olive`, `green`, `teal`, `blue`, `violet`, `purple`, `pink`, `brown`, `grey`, `black`). Default: `default`.\n11. **`update-tag`**: Update an existing tag in the database.\n    - Required inputs:\n      - `_id`: The tag ID. Must start with 'tag:'.\n      - `_rev`: The revision ID (CouchDB MVCC-token).\n      - `name`: The name of the tag.\n    - Optional inputs:\n      - `color`: The color type of the tag. Default: `default`.\n\n## Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector \"./dist/index.js\"\n```\n\nBe sure that environment variables are properly configured.\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nYou can also watch the server logs with this command:\n\n```bash\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-inkdrop.log\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "inkdropapp",
        "inkdrop",
        "notes",
        "inkdropapp mcp",
        "inkdrop access",
        "handling inkdrop"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ipospelov--mcp-memory-bank": {
      "owner": "ipospelov",
      "name": "mcp-memory-bank",
      "url": "https://github.com/ipospelov/mcp-memory-bank",
      "imageUrl": "/freedevtools/mcp/pfp/ipospelov.webp",
      "description": "Facilitates the setup and management of a structured Memory Bank for context preservation in AI assistant environments, offering detailed guidance on file structures, template generation, and project summary analysis. Enhances AI context management through organized documentation and relevant content suggestions.",
      "stars": 72,
      "forks": 13,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T23:15:52Z",
      "readme_content": "# Memory Bank MCP Server\n\nThis MCP server helps to build structured documentation system based on [Cline's Memory Bank pattern](https://docs.cline.bot/improving-your-prompting-skills/cline-memory-bank) for context preservation in AI assistant environments. \n\nPowered by [Enlighter](https://enlightby.ai) and [Hyperskill](https://hyperskill.org).\n\nLearn how to setup and use Memory Bank directly in Cursor: http://enlightby.ai/projects/37\n\n[![smithery badge](https://smithery.ai/badge/@ipospelov/mcp-memory-bank)](https://smithery.ai/server/@ipospelov/mcp-memory-bank)\n\n<a href=\"https://glama.ai/mcp/servers/@ipospelov/mcp-memory-bank\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@ipospelov/mcp-memory-bank/badge\" alt=\"Memory Bank Server MCP server\" />\n</a>\n\n## Features\n\n- Get detailed information about Memory Bank structure\n- Generate templates for Memory Bank files\n- Analyze project and provide suggestions for Memory Bank content\n\n## Running the Server\n\nThere are a few options to use this MCP server:\n\n### With UVX\n\nAdd this to your mcp.json config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-memory-bank\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/ipospelov/mcp-memory-bank\",\n        \"mcp_memory_bank\"\n      ]\n    }\n  }\n}\n```\n\n### With [Smithery](https://smithery.ai/server/@ipospelov/mcp-memory-bank)\n\nAdd this to your mcp.json config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory-bank\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@ipospelov/mcp-memory-bank\",\n        \"--key\",\n        \"your_smithery_key\"\n      ]\n    }\n  }\n}\n```\n\n### With Docker\n\nAdd this to your mcp.json config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory-bank\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"19283744/mcp-memory-bank:latest\"\n      ]\n    }\n  }\n}\n```\n\n### Manually\n\nClone repository and run the following commands:\n\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\npip install -r requirements.txt\n```\n\nThen add this to your mcp.json config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory-bank\": {\n      \"command\": \"python\",\n      \"args\": [\"src/mcp_memory_bank/main.py\"]\n    }\n  }\n}\n```\n\n## Usage Example\n\nAsk Cursor or any other AI code assistant with Memory Bank MCP:\n```\nCreate memory bank for To Do list application with your tools\n```\nProvide more context to get better results.\n\n## Available Tools\n\n### get_memory_bank_structure\n\nReturns a detailed description of the Memory Bank file structure.\n\n### generate_memory_bank_template\n\nReturns a template for a specific Memory Bank file.\n\nExample:\n```json\n{\n  \"file_name\": \"projectbrief.md\"\n}\n```\n\n### analyze_project_summary\n\nAnalyzes a project summary and provides suggestions for Memory Bank content.\n\nExample:\n```json\n{\n  \"project_summary\": \"Building a React web app for inventory management with barcode scanning\"\n}\n```\n\n## Memory Bank Structure\n\nThe Memory Bank consists of core files and optional context files, all in Markdown format:\n\n### Core Files (Required)\n\n1. `projectbrief.md` - Foundation document that shapes all other files\n2. `productContext.md` - Explains why the project exists, problems being solved\n3. `activeContext.md` - Current work focus, recent changes, next steps\n4. `systemPatterns.md` - System architecture, technical decisions, design patterns\n5. `techContext.md` - Technologies used, development setup, constraints\n6. `progress.md` - What works, what's left to build\n7. `memory_bank_instructions.md` - How to work with Memory Bank, instructtions for AI-agent",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "memory",
        "notetaking",
        "structured",
        "memory bank",
        "structured memory",
        "ai context"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "jacksteamdev--obsidian-mcp-tools": {
      "owner": "jacksteamdev",
      "name": "obsidian-mcp-tools",
      "url": "https://github.com/jacksteamdev/obsidian-mcp-tools",
      "imageUrl": "/freedevtools/mcp/pfp/jacksteamdev.webp",
      "description": "Connects AI applications like Claude Desktop to an Obsidian vault, enabling access to notes, execution of templates, and semantic searches while maintaining data security and privacy.",
      "stars": 363,
      "forks": 51,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:51:00Z",
      "readme_content": "# MCP Tools for Obsidian\n\n[![GitHub release (latest by date)](https://img.shields.io/github/v/release/jacksteamdev/obsidian-mcp-tools)](https://github.com/jacksteamdev/obsidian-mcp-tools/releases/latest)\n[![Build status](https://img.shields.io/github/actions/workflow/status/jacksteamdev/obsidian-mcp-tools/release.yml)](https://github.com/jacksteamdev/obsidian-mcp-tools/actions)\n[![License](https://img.shields.io/github/license/jacksteamdev/obsidian-mcp-tools)](LICENSE)\n\n[Features](#features) | [Installation](#installation) | [Configuration](#configuration) | [Troubleshooting](#troubleshooting) | [Security](#security) | [Development](#development) | [Support](#support)\n\n> **🔄 Seeking Project Maintainers**\n> \n> This project is actively seeking dedicated maintainers to take over development and community management. The project will remain under the current GitHub account for Obsidian plugin store compliance, with new maintainers added as collaborators.\n> \n> **Interested?** Join our [Discord community](https://discord.gg/q59pTrN9AA) or check our [maintainer requirements](CONTRIBUTING.md#maintainer-responsibilities).\n> \n> **Timeline**: Applications open until **September 15, 2025**. Selection by **September 30, 2025**.\n\nMCP Tools for Obsidian enables AI applications like Claude Desktop to securely access and work with your Obsidian vault through the Model Context Protocol (MCP). MCP is an open protocol that standardizes how AI applications can interact with external data sources and tools while maintaining security and user control. [^2]\n\nThis plugin consists of two parts:\n1. An Obsidian plugin that adds MCP capabilities to your vault\n2. A local MCP server that handles communication with AI applications\n\nWhen you install this plugin, it will help you set up both components. The MCP server acts as a secure bridge between your vault and AI applications like Claude Desktop. This means AI assistants can read your notes, execute templates, and perform semantic searches - but only when you allow it and only through the server's secure API. The server never gives AI applications direct access to your vault files. [^3]\n\n> **Privacy Note**: When using Claude Desktop with this plugin, your conversations with Claude are not used to train Anthropic's models by default. [^1]\n\n## Features\n\nWhen connected to an MCP client like Claude Desktop, this plugin enables:\n\n- **Vault Access**: Allows AI assistants to read and reference your notes while maintaining your vault's security [^4]\n- **Semantic Search**: AI assistants can search your vault based on meaning and context, not just keywords [^5]\n- **Template Integration**: Execute Obsidian templates through AI interactions, with dynamic parameters and content generation [^6]\n\nAll features require an MCP-compatible client like Claude Desktop, as this plugin provides the server component that enables these integrations. The plugin does not modify Obsidian's functionality directly - instead, it creates a secure bridge that allows AI applications to work with your vault in powerful ways.\n\n## Prerequisites\n\n### Required\n\n- [Obsidian](https://obsidian.md/) v1.7.7 or higher\n- [Claude Desktop](https://claude.ai/download) installed and configured\n- [Local REST API](https://github.com/coddingtonbear/obsidian-local-rest-api) plugin installed and configured with an API key\n\n### Recommended\n\n- [Templater](https://silentvoid13.github.io/Templater/) plugin for enhanced template functionality\n- [Smart Connections](https://smartconnections.app/) plugin for semantic search capabilities\n\n## Installation\n\n> [!Important]\n> This plugin requires a secure server component that runs locally on your computer. The server is distributed as a signed executable, with its complete source code available in `packages/mcp-server/`. For details about our security measures and code signing process, see the [Security](#security) section.\n\n1. Install the plugin from Obsidian's Community Plugins\n2. Enable the plugin in Obsidian settings\n3. Open the plugin settings\n4. Click \"Install Server\" to download and configure the MCP server\n\nClicking the install button will:\n\n- Download the appropriate MCP server binary for your platform\n- Configure Claude Desktop to use the server\n- Set up necessary permissions and paths\n\n### Installation Locations\n\n- **Server Binary**: {vault}/.obsidian/plugins/obsidian-mcp-tools/bin/\n- **Log Files**:\n  - macOS: ~/Library/Logs/obsidian-mcp-tools\n  - Windows: %APPDATA%\\obsidian-mcp-tools\\logs\n  - Linux: ~/.local/share/obsidian-mcp-tools/logs\n\n## Configuration\n\nAfter clicking the \"Install Server\" button in the plugin settings, the plugin will automatically:\n\n1. Download the appropriate MCP server binary\n2. Use your Local REST API plugin's API key\n3. Configure Claude Desktop to use the MCP server\n4. Set up appropriate paths and permissions\n\nWhile the configuration process is automated, it requires your explicit permission to install the server binary and modify the Claude Desktop configuration. No additional manual configuration is required beyond this initial setup step.\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check the plugin settings to verify:\n   - All required plugins are installed\n   - The server is properly installed\n   - Claude Desktop is configured\n2. Review the logs:\n   - Open plugin settings\n   - Click \"Open Logs\" under Resources\n   - Look for any error messages or warnings\n3. Common Issues:\n   - **Server won't start**: Ensure Claude Desktop is running\n   - **Connection errors**: Verify Local REST API plugin is configured\n   - **Permission errors**: Try reinstalling the server\n\n## Security\n\n### Binary Distribution\n\n- All releases are built using GitHub Actions with reproducible builds\n- Binaries are signed and attested using SLSA provenance\n- Release workflows are fully auditable in the repository\n\n### Runtime Security\n\n- The MCP server runs with minimal required permissions\n- All communication is encrypted\n- API keys are stored securely using platform-specific credential storage\n\n### Binary Verification\n\nThe MCP server binaries are published with [SLSA Provenance attestations](https://slsa.dev/provenance/v1), which provide cryptographic proof of where and how the binaries were built. This helps ensure the integrity and provenance of the binaries you download.\n\nTo verify a binary using the GitHub CLI:\n\n1. Install GitHub CLI:\n\n   ```bash\n   # macOS (Homebrew)\n   brew install gh\n\n   # Windows (Scoop)\n   scoop install gh\n\n   # Linux\n   sudo apt install gh  # Debian/Ubuntu\n   ```\n\n2. Verify the binary:\n   ```bash\n   gh attestation verify --owner jacksteamdev <binary path or URL>\n   ```\n\nThe verification will show:\n\n- The binary's SHA256 hash\n- Confirmation that it was built by this repository's GitHub Actions workflows\n- The specific workflow file and version tag that created it\n- Compliance with SLSA Level 3 build requirements\n\nThis verification ensures the binary hasn't been tampered with and was built directly from this repository's source code.\n\n### Reporting Security Issues\n\nPlease report security vulnerabilities via our [security policy](SECURITY.md).\nDo not report security vulnerabilities in public issues.\n\n## Development\n\nThis project uses a monorepo structure with feature-based architecture. For detailed project architecture documentation, see [.clinerules](.clinerules).\n\n### Using Cline\n\nSome code in this project was implemented using the AI coding agent [Cline](https://cline.bot). Cline uses `cline_docs/` and the `.clinerules` file to understand project architecture and patterns when implementing new features.\n\n### Workspace\n\nThis project uses a [Bun](https://bun.sh/) workspace structure:\n\n```\npackages/\n├── mcp-server/        # Server implementation\n├── obsidian-plugin/   # Obsidian plugin\n└── shared/           # Shared utilities and types\n```\n\n### Building\n\n1. Install dependencies:\n   ```bash\n   bun install\n   ```\n2. Build all packages:\n   ```bash\n   bun run build\n   ```\n3. For development:\n   ```bash\n   bun run dev\n   ```\n\n### Requirements\n\n- [bun](https://bun.sh/) v1.1.42 or higher\n- TypeScript 5.0+\n\n## Contributing\n\n**Before contributing, please read our [Contributing Guidelines](CONTRIBUTING.md) including our community standards and behavioral expectations.**\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Run tests:\n   ```bash\n   bun test\n   ```\n5. Submit a pull request\n\nWe welcome genuine contributions but maintain strict community standards. Be respectful and constructive in all interactions.\n\n## Support\n\n- 💬 [Join our Discord](https://discord.gg/q59pTrN9AA) for questions, discussions, and community support\n- [Open an issue](https://github.com/jacksteamdev/obsidian-mcp-tools/issues) for bug reports and feature requests\n\n**Please read our [Contributing Guidelines](CONTRIBUTING.md) before posting.** We maintain high community standards and have zero tolerance for toxic behavior.\n\n## Changelog\n\nSee [GitHub Releases](https://github.com/jacksteamdev/obsidian-mcp-tools/releases) for detailed changelog information.\n\n## License\n\n[MIT License](LICENSE)\n\n## Footnotes\n\n[^1]: For information about Claude data privacy and security, see [Claude AI's data usage policy](https://support.anthropic.com/en/articles/8325621-i-would-like-to-input-sensitive-data-into-free-claude-ai-or-claude-pro-who-can-view-my-conversations)\n[^2]: For more information about the Model Context Protocol, see [MCP Introduction](https://modelcontextprotocol.io/introduction)\n[^3]: For a list of available MCP Clients, see [MCP Example Clients](https://modelcontextprotocol.io/clients)\n[^4]: Requires Obsidian plugin Local REST API\n[^5]: Requires Obsidian plugin Smart Connections\n[^6]: Requires Obsidian plugin Templater\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "tools",
        "jacksteamdev",
        "jacksteamdev obsidian",
        "obsidian mcp",
        "desktop obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "jeanibarz--knowledge-base-mcp-server": {
      "owner": "jeanibarz",
      "name": "knowledge-base-mcp-server",
      "url": "https://github.com/jeanibarz/knowledge-base-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/jeanibarz.webp",
      "description": "Retrieve and list content from various knowledge bases with enhanced semantic search capabilities for efficient information access and management.",
      "stars": 26,
      "forks": 6,
      "license": "The Unlicense",
      "language": "TypeScript",
      "updated_at": "2025-09-28T11:50:44Z",
      "readme_content": "# Knowledge Base MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@jeanibarz/knowledge-base-mcp-server)](https://smithery.ai/server/@jeanibarz/knowledge-base-mcp-server)\nThis MCP server provides tools for listing and retrieving content from different knowledge bases.\n\n<a href=\"https://glama.ai/mcp/servers/n0p6v0o0a4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/n0p6v0o0a4/badge\" alt=\"Knowledge Base Server MCP server\" />\n</a>\n\n## Setup Instructions\n\nThese instructions assume you have Node.js and npm installed on your system.\n\n### Installing via Smithery\n\nTo install Knowledge Base Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@jeanibarz/knowledge-base-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @jeanibarz/knowledge-base-mcp-server --client claude\n```\n\n### Manual Installation\n**Prerequisites**\n\n*   [Node.js](https://nodejs.org/) (version 16 or higher)\n*   [npm](https://www.npmjs.com/) (Node Package Manager)\n\n1.  **Clone the repository:**\n\n    ```bash\n    git clone <repository_url>\n    cd knowledge-base-mcp-server\n    ```\n\n2.  **Install dependencies:**\n\n    ```bash\n    npm install\n    ```\n\n3.  **Configure environment variables:**\n\n    This server supports two embedding providers: **Ollama** (recommended for reliability) and **HuggingFace** (fallback option).\n\n    ### Option 1: Ollama Configuration (Recommended)\n    \n    *   Set `EMBEDDING_PROVIDER=ollama` to use local Ollama embeddings\n    *   Install [Ollama](https://ollama.ai/) and pull an embedding model: `ollama pull dengcao/Qwen3-Embedding-0.6B:Q8_0`\n    *   Configure the following environment variables:\n        ```bash\n        EMBEDDING_PROVIDER=ollama\n        OLLAMA_BASE_URL=http://localhost:11434  # Default Ollama URL\n        OLLAMA_MODEL=dengcao/Qwen3-Embedding-0.6B:Q8_0          # Default embedding model\n        KNOWLEDGE_BASES_ROOT_DIR=$HOME/knowledge_bases\n        ```\n\n    ### Option 2: HuggingFace Configuration (Fallback)\n    \n    *   Set `EMBEDDING_PROVIDER=huggingface` or leave unset (default)\n    *   Obtain a free API key from [HuggingFace](https://huggingface.co/)\n    *   Configure the following environment variables:\n        ```bash\n        EMBEDDING_PROVIDER=huggingface          # Optional, this is the default\n        HUGGINGFACE_API_KEY=your_api_key_here\n        HUGGINGFACE_MODEL_NAME=sentence-transformers/all-MiniLM-L6-v2\n        KNOWLEDGE_BASES_ROOT_DIR=$HOME/knowledge_bases\n        ```\n\n    ### Additional Configuration\n    \n    *   The server supports the `FAISS_INDEX_PATH` environment variable to specify the path to the FAISS index. If not set, it will default to `$HOME/knowledge_bases/.faiss`.\n    *   You can set these environment variables in your `.bashrc` or `.zshrc` file, or directly in the MCP settings.\n\n4.  **Build the server:**\n\n    ```bash\n    npm run build\n    ```\n\n5.  **Add the server to the MCP settings:**\n\n    *   Edit the `cline_mcp_settings.json` file located at `/home/jean/.vscode-server/data/User/globalStorage/saoudrizwan.claude-dev/settings/`.\n    *   Add the following configuration to the `mcpServers` object:\n\n    *   **Option 1: Ollama Configuration**\n\n    ```json\n    \"knowledge-base-mcp-ollama\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/knowledge-base-mcp-server/build/index.js\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": [],\n      \"env\": {\n        \"KNOWLEDGE_BASES_ROOT_DIR\": \"/path/to/knowledge_bases\",\n        \"EMBEDDING_PROVIDER\": \"ollama\",\n        \"OLLAMA_BASE_URL\": \"http://localhost:11434\",\n        \"OLLAMA_MODEL\": \"dengcao/Qwen3-Embedding-0.6B:Q8_0\"\n      },\n      \"description\": \"Retrieves similar chunks from the knowledge base based on a query using Ollama.\"\n    },\n    ```\n\n    *   **Option 2: HuggingFace Configuration**\n\n    ```json\n    \"knowledge-base-mcp-huggingface\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/knowledge-base-mcp-server/build/index.js\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": [],\n      \"env\": {\n        \"KNOWLEDGE_BASES_ROOT_DIR\": \"/path/to/knowledge_bases\",\n        \"EMBEDDING_PROVIDER\": \"huggingface\",\n        \"HUGGINGFACE_API_KEY\": \"YOUR_HUGGINGFACE_API_KEY\",\n        \"HUGGINGFACE_MODEL_NAME\": \"sentence-transformers/all-MiniLM-L6-v2\"\n      },\n      \"description\": \"Retrieves similar chunks from the knowledge base based on a query using HuggingFace.\"\n    },\n    ```\n\n    *   **Note:** You only need to add one of the above configurations (either Ollama or HuggingFace) to your `cline_mcp_settings.json` file, depending on your preferred embedding provider.\n    ```\n\n    *   Replace `/path/to/knowledge-base-mcp-server` with the actual path to the server directory.\n    *   Replace `/path/to/knowledge_bases` with the actual path to the knowledge bases directory.\n\n6.  **Create knowledge base directories:**\n\n    *   Create subdirectories within the `KNOWLEDGE_BASES_ROOT_DIR` for each knowledge base (e.g., `company`, `it_support`, `onboarding`).\n    *   Place text files (e.g., `.txt`, `.md`) containing the knowledge base content within these subdirectories.\n\n*   The server recursively reads all text files (e.g., `.txt`, `.md`) within the specified knowledge base subdirectories.\n*   The server skips hidden files and directories (those starting with a `.`).\n*   For each file, the server calculates the SHA256 hash and stores it in a file with the same name in a hidden `.index` subdirectory. This hash is used to determine if the file has been modified since the last indexing.\n*   The file content is splitted into chunks using the `MarkdownTextSplitter` from `langchain/text_splitter`.\n*   The content of each chunk is then added to a FAISS index, which is used for similarity search.\n*   The FAISS index is automatically initialized when the server starts. It checks for changes in the knowledge base files and updates the index accordingly.\n\n## Usage\n\nThe server exposes two tools:\n\n*   `list_knowledge_bases`: Lists the available knowledge bases.\n*   `retrieve_knowledge`: Retrieves similar chunks from the knowledge base based on a query. Optionally, if a knowledge base is specified, only that one is searched; otherwise, all available knowledge bases are considered. By default, at most 10 document chunks are returned with a score below a threshold of 2. A different threshold can optionally be provided using the `threshold` parameter.\n\nYou can use these tools through the MCP interface.\n\nThe `retrieve_knowledge` tool performs a semantic search using a FAISS index. The index is automatically updated when the server starts or when a file in a knowledge base is modified.\n\nThe output of the `retrieve_knowledge` tool is a markdown formatted string with the following structure:\n\n````markdown\n## Semantic Search Results\n\n**Result 1:**\n\n[Content of the most similar chunk]\n\n**Source:**\n```json\n{\n  \"source\": \"[Path to the file containing the chunk]\"\n}\n```\n\n---\n\n**Result 2:**\n\n[Content of the second most similar chunk]\n\n**Source:**\n```json\n{\n  \"source\": \"[Path to the file containing the chunk]\"\n}\n```\n\n> **Disclaimer:** The provided results might not all be relevant. Please cross-check the relevance of the information.\n````\n\nEach result includes the content of the most similar chunk, the source file, and a similarity score.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "knowledge",
        "semantic",
        "search",
        "knowledge base",
        "knowledge bases",
        "semantic search"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "jlia0--servers": {
      "owner": "jlia0",
      "name": "servers",
      "url": "https://github.com/jlia0/servers",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Utilizes a local knowledge graph to enable persistent memory for AI agents, allowing them to create, update, and retrieve personalized user information across chat sessions. Facilitates tailored interactions by managing entities, relations, and observations.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jlia0",
        "knowledge",
        "persistent",
        "jlia0 servers",
        "memory ai",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "joelhooks--logseq-mcp-tools": {
      "owner": "joelhooks",
      "name": "logseq-mcp-tools",
      "url": "https://github.com/joelhooks/logseq-mcp-tools",
      "imageUrl": "/freedevtools/mcp/pfp/joelhooks.webp",
      "description": "Integrate Logseq knowledge graphs with AI assistants to manage notes and journal entries effectively. Retrieve content from specific pages, generate journal summaries, and explore linked pages.",
      "stars": 51,
      "forks": 10,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T04:06:05Z",
      "readme_content": "# Logseq MCP Tools\n\n[![smithery badge](https://smithery.ai/badge/@joelhooks/logseq-mcp-tools)](https://smithery.ai/server/@joelhooks/logseq-mcp-tools)\n\nA Model Context Protocol (MCP) server that provides AI assistants with structured access to your Logseq knowledge graph.\n\n## Overview\n\nThis project creates an MCP server that allows AI assistants like Claude to interact with your Logseq knowledge base. It provides tools for:\n\n- Retrieving a list of all pages\n- Getting content from specific pages\n- Generating journal summaries for flexible date ranges\n- Extracting linked pages and exploring connections\n\n## Installation\n\n### Installing via Smithery\n\nTo install Logseq Tools for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@joelhooks/logseq-mcp-tools):\n\n```bash\nnpx -y @smithery/cli install @joelhooks/logseq-mcp-tools --client claude\n```\n\n1. Clone this repository\n2. Install dependencies using npm, yarn, or pnpm:\n\n```bash\n# Using npm\nnpm install\n\n# Using yarn\nyarn install\n\n# Using pnpm\npnpm install\n```\n\n3. Copy the environment template and configure your Logseq token:\n\n```bash\ncp .env.template .env\n# Edit .env with your Logseq authentication token\n```\n\n## Configuration\n\nThis project includes a `.env.template` file that you can copy and rename to `.env`.\n\nYou can find your Logseq auth token by:\n\n1. Opening Logseq\n2. Enabling the HTTP API in Settings > Features > Enable HTTP API\n3. Setting your authentication token in Settings > Features > HTTP API Authentication Token\n\n## Usage\n\n### Running the MCP Server\n\nThe server can be started using:\n\n```bash\n# Using the npm script\nnpm start\n\n# Or directly with tsx\nnpx tsx index.ts\n```\n\n### Connecting with Claude\n\n#### Claude Desktop\n\nFollow the [Claude MCP Quickstart guide](https://modelcontextprotocol.io/quickstart/user):\n\n1. **Important**: Install Node.js globally via Homebrew (or whatever):\n\n```bash\nbrew install node\n```\n\n2. Install the Claude desktop app\n3. Open the Claude menu and select \"Settings...\"\n4. Click on \"Developer\" in the left sidebar, then click \"Edit Config\"\n5. This will open your `claude_desktop_config.json` file. Replace its contents with:\n\n```json\n{\n\t\"mcpServers\": {\n\t\t\"logseq\": {\n\t\t\t\"command\": \"npx\",\n\t\t\t\"args\": [\"tsx\", \"/path/to/your/index.ts\"]\n\t\t}\n\t}\n}\n```\n\n**IMPORTANT:** Replace `/path/to/your/index.ts` with the **exact** absolute path to your index.ts file (e.g., `/Users/username/Code/logseq-mcp-tools/index.ts`)\n\n6. Save the file and restart Claude Desktop\n\nNow you can chat with Claude and ask it to use your Logseq data:\n\n- \"Show me my recent journal entries\"\n- \"Summarize my notes from last week\"\n- \"Find all pages related to [topic]\"\n\n#### Claude in Cursor\n\nFollow the [Cursor MCP documentation](https://docs.cursor.com/context/model-context-protocol):\n\n1. Open Cursor\n2. Add a new MCP service from settings\n3. Enter the following command:\n\n```\nnpx tsx \"/path/to/index.ts\"\n```\n\n4. Give your service a name like \"Logseq Tools\"\n\nNow you can use Claude in Cursor with your Logseq data.\n\n#### Claude in Anthropic API (generic)\n\nWhen using the Claude API or CLI tools, you can add the MCP service with:\n\n```\nclaude mcp add \"logseq\" npx tsx \"/path/to/index.ts\"\n```\n\n## Available Tools\n\n### getAllPages\n\nRetrieves a list of all pages in your Logseq graph.\n\n### getPage\n\nGets the content of a specific page.\n\nParameters:\n\n- `pageName`: The name of the page to retrieve\n\n### getJournalSummary\n\nGenerates a summary of journal entries for a specified date range.\n\nParameters:\n\n- `dateRange`: Natural language date range like \"today\", \"this week\", \"last month\", \"this year\", etc.\n\nThis tool will:\n\n- Collect journal entries in the specified range\n- Format them in a readable way\n- Extract and analyze referenced pages/concepts\n- Show the most frequently referenced concepts\n\n### createPage\n\nCreates a new page in your Logseq graph.\n\nParameters:\n\n- `pageName`: Name for the new page\n- `content`: (Optional) Initial content for the page\n\n### searchPages\n\nSearches for pages by name.\n\nParameters:\n\n- `query`: Search query to filter pages by name\n\n### getBacklinks\n\nFinds all pages that reference a specific page.\n\nParameters:\n\n- `pageName`: The page name for which to find backlinks\n\n### analyzeGraph\n\nPerforms a comprehensive analysis of your knowledge graph.\n\nParameters:\n\n- `daysThreshold`: (Optional) Number of days to look back for \"recent\" content (default: 30)\n\nFeatures:\n\n- Identifies frequently referenced pages\n- Tracks recent updates\n- Discovers page clusters and connections\n- Lists outstanding tasks\n- Suggests potential updates needed\n\n### findKnowledgeGaps\n\nAnalyzes your knowledge graph to identify potential gaps and areas for improvement.\n\nParameters:\n\n- `minReferenceCount`: (Optional) Minimum references to consider (default: 3)\n- `includeOrphans`: (Optional) Include orphaned pages in analysis (default: true)\n\nFeatures:\n\n- Identifies missing pages that are frequently referenced\n- Finds underdeveloped pages that need expansion\n- Lists orphaned pages with no incoming links\n- Provides summary statistics\n\n### analyzeJournalPatterns\n\nAnalyzes patterns in your journal entries over time.\n\nParameters:\n\n- `timeframe`: (Optional) Time period to analyze (e.g., \"last 30 days\", \"this year\")\n- `includeMood`: (Optional) Analyze mood patterns if present (default: true)\n- `includeTopics`: (Optional) Analyze topic patterns (default: true)\n\nFeatures:\n\n- Topic trends and evolution\n- Mood pattern analysis\n- Habit tracking statistics\n- Project progress tracking\n\n### smartQuery\n\nExecutes natural language queries using Logseq's DataScript capabilities.\n\nParameters:\n\n- `request`: Natural language description of what you want to find\n- `includeQuery`: (Optional) Include the generated Datalog query in results\n- `advanced`: (Optional) Use advanced analysis features\n\nFeatures:\n\n- Page connections and relationships\n- Content clustering\n- Task progress analysis\n- Concept evolution tracking\n\n### suggestConnections\n\nUses AI to analyze your graph and suggest interesting connections.\n\nParameters:\n\n- `minConfidence`: (Optional) Minimum confidence score for suggestions (0-1, default: 0.6)\n- `maxSuggestions`: (Optional) Maximum number of suggestions to return (default: 10)\n- `focusArea`: (Optional) Topic or area to focus suggestions around\n\nFeatures:\n\n- Discovers potential connections between pages\n- Identifies knowledge synthesis opportunities\n- Suggests exploration paths based on recent interests\n- Provides confidence scores for suggestions\n\n## Development\n\nThe server is built using:\n\n- Model Context Protocol TypeScript SDK\n- Zod for parameter validation\n- Logseq HTTP API for data access\n\nTo extend with new tools, add additional `server.tool()` definitions in `index.ts`.\n\n## Troubleshooting\n\n### Common Issues\n\n#### Node.js Version Managers (fnm, nvm, etc.)\n\nIf you're using a Node.js version manager like fnm or nvm, Claude Desktop won't be able to access the Node.js binaries properly, as it runs outside of your shell environment where the PATH is modified.\n\n**Solution**: Install a system-wide Node.js with Homebrew:\n\n```bash\nbrew install node\n```\n\nThis ensures Node.js is available to all applications, including Claude Desktop.\n\n#### Basic Troubleshooting Steps\n\n- Ensure Logseq is running with the HTTP API enabled\n- Verify your auth token in `.env` matches the one set in Logseq\n- Check that the path to your index.ts file is correct in the Claude configuration\n- Try running `npx tsx index.ts` directly in your terminal to verify it works\n\n#### Viewing Logs in Claude Desktop\n\nMonitor logs in real-time:\n\n```bash\n# macOS\ntail -n 20 -F ~/Library/Logs/Claude/mcp*.log\n```\n\nFor more detailed debugging information, refer to the [official MCP debugging documentation](https://modelcontextprotocol.io/docs/tools/debugging).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "logseq",
        "notetaking",
        "journal",
        "logseq knowledge",
        "joelhooks logseq",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "jonpojonpo--comfy-ui-mcp-server": {
      "owner": "jonpojonpo",
      "name": "comfy-ui-mcp-server",
      "url": "https://github.com/jonpojonpo/comfy-ui-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/jonpojonpo.webp",
      "description": "Connect and manage notes using a streamlined interface that supports adding, summarizing, and accessing notes through a custom URI scheme. It features a single prompt for summarizing all notes with customizable detail levels.",
      "stars": 4,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-01T09:47:24Z",
      "readme_content": "# comfy-ui-mcp-server MCP server\n\nA server for connnecting to a local comfyUI\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"comfy-ui-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"E:\\Claude\\comfy-ui-mcp-server\",\n        \"run\",\n        \"comfy-ui-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"comfy-ui-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"comfy-ui-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory E:\\Claude\\comfy-ui-mcp-server run comfy-ui-mcp-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "ui",
        "manage notes",
        "notes using",
        "summarizing notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "kimbj0204--khoj": {
      "owner": "kimbj0204",
      "name": "khoj",
      "url": "https://github.com/kimbj0204/khoj",
      "imageUrl": "/freedevtools/mcp/pfp/kimbj0204.webp",
      "description": "Khoj integrates with various local and online LLMs to enhance productivity through automated research and content generation. It supports accessing information from diverse formats seamlessly, functioning as a versatile AI assistant.",
      "stars": 0,
      "forks": 0,
      "license": "GNU Affero General Public License v3.0",
      "language": "",
      "updated_at": "2025-03-28T09:06:24Z",
      "readme_content": "<p align=\"center\"><img src=\"https://assets.khoj.dev/khoj-logo-sideways-1200x540.png\" width=\"230\" alt=\"Khoj Logo\"></p>\n\n<div align=\"center\">\n\n[![test](https://github.com/khoj-ai/khoj/actions/workflows/test.yml/badge.svg)](https://github.com/khoj-ai/khoj/actions/workflows/test.yml)\n[![docker](https://github.com/khoj-ai/khoj/actions/workflows/dockerize.yml/badge.svg)](https://github.com/khoj-ai/khoj/pkgs/container/khoj)\n[![pypi](https://github.com/khoj-ai/khoj/actions/workflows/pypi.yml/badge.svg)](https://pypi.org/project/khoj/)\n[![discord](https://img.shields.io/discord/1112065956647284756?style=plastic&label=discord)](https://discord.gg/BDgyabRM6e)\n\n</div>\n\n<div align=\"center\">\n<b>Your AI second brain</b>\n</div>\n\n<br />\n\n<div align=\"center\">\n\n[📑 Docs](https://docs.khoj.dev)\n<span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n[🌐 Web](https://khoj.dev)\n<span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n[🔥 App](https://app.khoj.dev)\n<span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n[💬 Discord](https://discord.gg/BDgyabRM6e)\n<span>&nbsp;&nbsp;•&nbsp;&nbsp;</span>\n[✍🏽 Blog](https://blog.khoj.dev)\n\n</div>\n\n***\n\n### 🎁 New\n* Start any message with `/research` to try out the experimental research mode with Khoj.\n* Anyone can now [create custom agents](https://blog.khoj.dev/posts/create-agents-on-khoj/) with tunable personality, tools and knowledge bases.\n* [Read](https://blog.khoj.dev/posts/evaluate-khoj-quality/) about Khoj's excellent performance on modern retrieval and reasoning benchmarks.\n\n***\n\n## Overview\n\n[Khoj](https://khoj.dev) is a personal AI app to extend your capabilities. It smoothly scales up from an on-device personal AI to a cloud-scale enterprise AI.\n\n- Chat with any local or online LLM (e.g llama3, qwen, gemma, mistral, gpt, claude, gemini).\n- Get answers from the internet and your docs (including image, pdf, markdown, org-mode, word, notion files).\n- Access it from your Browser, Obsidian, Emacs, Desktop, Phone or Whatsapp.\n- Create agents with custom knowledge, persona, chat model and tools to take on any role.\n- Automate away repetitive research. Get personal newsletters and smart notifications delivered to your inbox.\n- Find relevant docs quickly and easily using our advanced semantic search.\n- Generate images, talk out loud, play your messages.\n- Khoj is open-source, self-hostable. Always.\n- Run it privately on [your computer](https://docs.khoj.dev/get-started/setup) or try it on our [cloud app](https://app.khoj.dev).\n\n***\n\n## See it in action\n\n![demo_chat](https://github.com/khoj-ai/khoj/blob/master/documentation/assets/img/quadratic_equation_khoj_web.gif?raw=true)\n\nGo to https://app.khoj.dev to see Khoj live.\n\n## Full feature list\nYou can see the full feature list [here](https://docs.khoj.dev/category/features).\n\n## Self-Host\n\nTo get started with self-hosting Khoj, [read the docs](https://docs.khoj.dev/get-started/setup).\n\n## Enterprise\n\nKhoj is available as a cloud service, on-premises, or as a hybrid solution. To learn more about Khoj Enterprise, [visit our website](https://khoj.dev/teams).\n\n## Contributors\nCheers to our awesome contributors! 🎉\n\n<a href=\"https://github.com/khoj-ai/khoj/graphs/contributors\">\n  <img src=\"https://contrib.rocks/image?repo=khoj-ai/khoj\" />\n</a>\n\nMade with [contrib.rocks](https://contrib.rocks).\n\n### Interested in Contributing?\n\nWe are always looking for contributors to help us build new features, improve the project documentation, or fix bugs. If you're interested, please see our [Contributing Guidelines](https://docs.khoj.dev/contributing/development) and check out our [Contributors Project Board](https://github.com/orgs/khoj-ai/projects/4).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "notetaking",
        "automated",
        "ai assistant",
        "notetaking knowledge",
        "productivity automated"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "kj455--mcp-kibela": {
      "owner": "kj455",
      "name": "mcp-kibela",
      "url": "https://github.com/kj455/mcp-kibela",
      "imageUrl": "/freedevtools/mcp/pfp/kj455.webp",
      "description": "Integrate with Kibela to search and fetch notes, enabling AI models to access and reference content stored in Kibela securely.",
      "stars": 12,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-01T23:49:03Z",
      "readme_content": "# mcp-kibela 🗒️\n\n[![smithery badge](https://smithery.ai/badge/@kj455/mcp-kibela)](https://smithery.ai/server/@kj455/mcp-kibela)\n[![npm version](https://badge.fury.io/js/@kj455%2Fmcp-kibela.svg)](https://www.npmjs.com/package/@kj455/mcp-kibela)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol (MCP) server implementation that enables AI assistants to search and reference Kibela content. This setup allows AI models like Claude to securely access information stored in Kibela.\n\n## Features 🚀\n\nThe mcp-kibela server provides the following features:\n\n- **Note Search**: Search Kibela notes by keywords\n- **My Notes**: Fetch your latest notes\n- **Note Content**: Get note content and comments by ID\n- **Note by Path**: Get note content by path\n- **Create Note**: Create a new note\n- **Update Note Content**: Update note content by note id\n\n---\n\n## Prerequisites 📋\n\nBefore you begin, ensure you have:\n\n- Node.js (v18 or higher)\n- MCP Client (Claude Desktop, Cursor, etc.)\n- Kibela Access Token ([How to get a token](https://support.kibe.la/hc/ja/articles/360036089931-API%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%83%88%E3%83%BC%E3%82%AF%E3%83%B3%E3%81%AE%E5%8F%96%E5%BE%97%E6%96%B9%E6%B3%95%E3%82%92%E6%95%99%E3%81%88%E3%81%A6%E3%81%8F%E3%81%A0%E3%81%95%E3%81%84))\n- Git (if building from source)\n\n## Installation 🛠️\n\n### Usage with Cursor\n\n```json\n{\n  \"kibela\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"-i\",\n      \"--rm\",\n      \"-e\",\n      \"KIBELA_TEAM\",\n      \"-e\",\n      \"KIBELA_TOKEN\",\n      \"ghcr.io/kj455/mcp-kibela:latest\"\n    ],\n    \"env\": {\n      \"KIBELA_TEAM\": \"your-team-name from https://[team-name].kibe.la\",\n      \"KIBELA_TOKEN\": \"your-token\"\n    }\n  }\n}\n```\n\n### Usage with VSCode\n\n```json\n{\n  \"mcp\": {\n    \"inputs\": [\n      {\n        \"type\": \"promptString\",\n        \"id\": \"kibela_team\",\n        \"description\": \"Kibela team name\",\n        \"password\": false\n      },\n      {\n        \"type\": \"promptString\",\n        \"id\": \"kibela_token\",\n        \"description\": \"Kibela token\",\n        \"password\": true\n      },\n    ],\n    \"servers\": {\n      \"kibela\": {\n        \"command\": \"docker\",\n        \"args\": [\n          \"run\",\n          \"-i\",\n          \"--rm\",\n          \"-e\",\n          \"KIBELA_TEAM\",\n          \"-e\",\n          \"KIBELA_TOKEN\",\n          \"ghcr.io/kj455/mcp-kibela:latest\"\n        ],\n        \"env\": {\n          \"KIBELA_TEAM\": \"${input:kibela_team}\",\n          \"KIBELA_TOKEN\": \"${input:kibela_token}\"\n        }\n      }\n    }\n  }\n}\n```\n\n\n### Usage with Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-kibela\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"KIBELA_TEAM\",\n        \"-e\",\n        \"KIBELA_TOKEN\",\n        \"ghcr.io/kj455/mcp-kibela:latest\"\n      ],\n      \"env\": {\n        \"KIBELA_TEAM\": \"your-team-name from https://[team-name].kibe.la\",\n        \"KIBELA_TOKEN\": \"your-token\"\n      }\n    }\n  }\n}\n```\n\n### Using Smithery\n\n```bash\nnpx -y @smithery/cli install @kj455/mcp-kibela --client claude\n```\n\n## Environment Variables\n\nThe following environment variables are required:\n\n- `KIBELA_TEAM`: Your Kibela team name (required). You can find it from the URL of your Kibela team page. e.g. https://[team-name].kibe.la\n- `KIBELA_TOKEN`: Your Kibela API token (required)\n\n## Contributing\n\nAny contributions are welcome!\n\n## Development\n\n1. Use `npm run build:watch` to build the project in watch mode.\n\n```bash\nnpm run build:watch\n```\n\n2. Use `npx @modelcontextprotocol/inspector` to inspect the MCP server.\n\n```bash\nnpx @modelcontextprotocol/inspector node /path/to/mcp-kibela/dist/index.js\n```\n\n\n## License 📄\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kibela",
        "notetaking",
        "notes",
        "kibela search",
        "kibela securely",
        "stored kibela"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "koladev32--mcp-discord-chat": {
      "owner": "koladev32",
      "name": "mcp-discord-chat",
      "url": "https://github.com/koladev32/mcp-discord-chat",
      "imageUrl": "/freedevtools/mcp/pfp/koladev32.webp",
      "description": "Stores and summarizes notes in a Discord chat environment using a custom note URI scheme. Users can add notes and create summaries based on stored content with options for detail level.",
      "stars": 0,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-13T13:15:26Z",
      "readme_content": "# mcp-discord-chat MCP server\n\nA MCP server project\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mcp-discord-chat\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/koladev/speakeasy-projects/mcp-discord-chat\",\n        \"run\",\n        \"mcp-discord-chat\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mcp-discord-chat\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-discord-chat\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/speakeasy-projects/mcp-discord-chat run mcp-discord-chat\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "discord",
        "notes",
        "notetaking",
        "notes discord",
        "discord chat",
        "summarizes notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "kujenga--zotero-mcp": {
      "owner": "kujenga",
      "name": "zotero-mcp",
      "url": "https://github.com/kujenga/zotero-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kujenga.webp",
      "description": "Access and manage your Zotero library through a Model Context Protocol server, enabling interactions with AI assistants. It provides a focused set of functionalities to streamline library management and integration.",
      "stars": 115,
      "forks": 18,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-25T14:33:13Z",
      "readme_content": "# Model Context Protocol server for Zotero\n\n[![GitHub branch status](https://img.shields.io/github/check-runs/kujenga/zotero-mcp/main)](https://github.com/kujenga/zotero-mcp/actions)\n[![PyPI - Version](https://img.shields.io/pypi/v/zotero-mcp)](https://pypi.org/project/zotero-mcp/)\n\nThis project is a python server that implements the [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) for [Zotero](https://www.zotero.org/), giving you access to your Zotero library within AI assistants. It is intended to implement a small but maximally useful set of interactions with Zotero for use with [MCP clients](https://modelcontextprotocol.io/clients).\n\n<a href=\"https://glama.ai/mcp/servers/jknz38ntu4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/jknz38ntu4/badge\" alt=\"Zotero Server MCP server\" />\n</a>\n\n## Features\n\nThis MCP server provides the following tools:\n\n- `zotero_search_items`: Search for items in your Zotero library using a text query\n- `zotero_item_metadata`: Get detailed metadata information about a specific Zotero item\n- `zotero_item_fulltext`: Get the full text of a specific Zotero item (i.e. PDF contents)\n\nThese can be discovered and accessed through any MCP client or through the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector).\n\nEach tool returns formatted text containing relevant information from your Zotero items, and AI assistants such as Claude can use them sequentially, searching for items then retrieving their metadata or text content.\n\n## Installation\n\nThis server can either run against either a [local API offered by the Zotero desktop application](https://groups.google.com/g/zotero-dev/c/ElvHhIFAXrY/m/fA7SKKwsAgAJ)) or through the [Zotero Web API](https://www.zotero.org/support/dev/web_api/v3/start). The local API can be a bit more responsive, but requires that the Zotero app be running on the same computer with the API enabled. To enable the local API, do the following steps:\n\n1. Open Zotero and open \"Zotero Settings\"\n1. Under the \"Advanced\" tab, check the box that says \"Allow other applications on this computer to communicate with Zotero\".\n\n> [!IMPORTANT]\n> For access to the `/fulltext` endpoint on the local API which allows retrieving the full content of items in your library, you'll need to install a [Zotero Beta Build](https://www.zotero.org/support/beta_builds) (as of 2025-03-30). Once 7.1 is released this will no longer be the case. See https://github.com/zotero/zotero/pull/5004 for more information. If you do not want to do this, use the Web API instead.\n\nTo use the Zotero Web API, you'll need to create an API key and find your Library ID (usually your User ID) in your Zotero account settings here: <https://www.zotero.org/settings/keys>\n\nThese are the available configuration options:\n\n- `ZOTERO_LOCAL=true`: Use the local Zotero API (default: false, see note below)\n- `ZOTERO_API_KEY`: Your Zotero API key (not required for the local API)\n- `ZOTERO_LIBRARY_ID`: Your Zotero library ID (your user ID for user libraries, not required for the local API)\n- `ZOTERO_LIBRARY_TYPE`: The type of library (user or group, default: user)\n\n### [`uvx`](https://docs.astral.sh/uv/getting-started/installation/) with Local Zotero API\n\nTo use this with Claude Desktop and a direct python install with [`uvx`](https://docs.astral.sh/uv/getting-started/installation/), add the following to the `mcpServers` configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"zotero\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--upgrade\", \"zotero-mcp\"],\n      \"env\": {\n        \"ZOTERO_LOCAL\": \"true\",\n        \"ZOTERO_API_KEY\": \"\",\n        \"ZOTERO_LIBRARY_ID\": \"\"\n      }\n    }\n  }\n}\n```\n\nThe `--upgrade` flag is optional and will pull the latest version when new ones are available. If you don't have `uvx` installed you can use `pipx run` instead, or clone this repository locally and use the instructions in [Development](#development) below.\n\n### Docker with Zotero Web API\n\nIf you want to run this MCP server in a Docker container, you can use the following configuration, inserting your API key and library ID:\n\n```json\n{\n  \"mcpServers\": {\n    \"zotero\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"ZOTERO_API_KEY=PLACEHOLDER\",\n        \"-e\", \"ZOTERO_LIBRARY_ID=PLACEHOLDER\",\n        \"ghcr.io/kujenga/zotero-mcp:main\"\n      ],\n    }\n  }\n}\n```\n\nTo update to a newer version, run `docker pull ghcr.io/kujenga/zotero-mcp:main`. It is also possible to use the docker-based installation to talk to the local Zotero API, but you'll need to modify the above command to ensure that there is network connectivity to the Zotero application's local API interface.\n\n## Development\n\nInformation on making changes and contributing to the project.\n\n1. Clone this repository\n1. Install dependencies with [uv](https://docs.astral.sh/uv/) by running: `uv sync`\n1. Create a `.env` file in the project root with the environment variables above\n\nStart the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) for local development:\n\n```bash\nnpx @modelcontextprotocol/inspector uv run zotero-mcp\n```\n\nTo test the local repository against Claude Desktop, run `echo $PWD/.venv/bin/zotero-mcp` in your shell within this directory, then set the following within your Claude Desktop configuration\n```json\n{\n  \"mcpServers\": {\n    \"zotero\": {\n      \"command\": \"/path/to/zotero-mcp/.venv/bin/zotero-mcp\"\n      \"env\": {\n        // Whatever configuration is desired.\n      }\n    }\n  }\n}\n```\n\n### Running Tests\n\nTo run the test suite:\n\n```bash\nuv run pytest\n```\n\n### Docker Development\n\nBuild the container image with this command:\n\n```sh\ndocker build . -t zotero-mcp:local\n```\n\nTo test the container with the MCP inspector, run the following command:\n\n```sh\nnpx @modelcontextprotocol/inspector \\\n    -e ZOTERO_API_KEY=$ZOTERO_API_KEY \\\n    -e ZOTERO_LIBRARY_ID=$ZOTERO_LIBRARY_ID \\\n    docker run --rm -i \\\n        --env ZOTERO_API_KEY \\\n        --env ZOTERO_LIBRARY_ID \\\n        zotero-mcp:local\n```\n\n## Relevant Documentation\n\n- https://modelcontextprotocol.io/tutorials/building-mcp-with-llms\n- https://github.com/modelcontextprotocol/python-sdk\n- https://pyzotero.readthedocs.io/en/latest/\n- https://www.zotero.org/support/dev/web_api/v3/start\n- https://modelcontextprotocol.io/llms-full.txt can be utilized by LLMs\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zotero",
        "library",
        "protocol",
        "zotero library",
        "manage zotero",
        "zotero mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "landicefu--divide-and-conquer-mcp-server": {
      "owner": "landicefu",
      "name": "divide-and-conquer-mcp-server",
      "url": "https://github.com/landicefu/divide-and-conquer-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/landicefu.webp",
      "description": "Breaks down complex tasks into manageable pieces using a structured JSON format, tracks progress, and maintains context across multiple conversations.",
      "stars": 6,
      "forks": 6,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-28T04:35:30Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/landicefu-divide-and-conquer-mcp-server-badge.png)](https://mseep.ai/app/landicefu-divide-and-conquer-mcp-server)\n\n# Divide and Conquer MCP Server\n[![smithery badge](https://smithery.ai/badge/@landicefu/divide-and-conquer-mcp-server)](https://smithery.ai/server/@landicefu/divide-and-conquer-mcp-server)\n\nA Model Context Protocol (MCP) server that enables AI agents to break down complex tasks into manageable pieces using a structured JSON format.\n\n## Table of Contents\n\n- [Purpose](#purpose)\n- [Key Features](#key-features)\n- [Quick Start](#quick-start)\n- [Installation](#installation)\n- [Tools](#tools)\n- [Usage Examples](#usage-examples)\n- [Use Cases](#use-cases)\n- [Configuration Storage](#configuration-storage)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Purpose\n\nThe Divide and Conquer MCP Server is an evolution of the Temp Notes MCP Server, designed specifically for complex tasks that need to be broken down into manageable pieces. Instead of using a simple text file, this server uses a structured JSON format to store task information, checklists, and context, making it easier to track progress and maintain context across multiple conversations.\n\n## Key Features\n\n- **Structured JSON Format**: Instead of plain text, uses a JSON structure to store task information\n- **Task Tracking**: Includes checklist functionality with completion status tracking\n- **Context Preservation**: Dedicated fields for task context and detailed descriptions\n- **Progress Monitoring**: Easy visualization of completed vs. remaining tasks\n- **Task Ordering**: Maintains the order of tasks for sequential execution\n- **Task Insertion**: Ability to insert new tasks at specific positions in the checklist\n- **Metadata**: Track additional information like tags, priority, and estimated completion time\n- **Notes and Resources**: Store additional notes and resources related to the task\n\n## Quick Start\n\n1. Add the server to your MCP configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"divide-and-conquer\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@landicefu/divide-and-conquer-mcp-server\"],\n         \"disabled\": false\n       }\n     }\n   }\n   ```\n\n2. Start using it in your conversations:\n   ```javascript\n   // Initialize a new task\n   await use_mcp_tool({\n     server_name: \"divide-and-conquer\",\n     tool_name: \"initialize_task\",\n     arguments: {\n       task_description: \"Refactor the authentication system\",\n       context_for_all_tasks: \"The current system uses session-based authentication.\"\n     }\n   });\n   \n   // Add checklist items\n   await use_mcp_tool({\n     server_name: \"divide-and-conquer\",\n     tool_name: \"add_checklist_item\",\n     arguments: {\n       task: \"Analyze current authentication flow\",\n       detailed_description: \"Review the existing authentication code.\",\n       context_and_plan: \"Look at src/auth/* files. The current implementation uses express-session with MongoDB store.\"\n     }\n   });\n   ```\n\n## Installation\n\n### Installing via Smithery\n\nTo install Divide and Conquer Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@landicefu/divide-and-conquer-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @landicefu/divide-and-conquer-mcp-server --client claude\n```\n\n### Option 1: Using npx (Recommended)\n\nAdd the server to your MCP configuration:\n```json\n{\n  \"mcpServers\": {\n    \"divide-and-conquer\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@landicefu/divide-and-conquer-mcp-server\"],\n      \"disabled\": false\n    }\n  }\n}\n```\n\n### Option 2: Install from source\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/landicefu/divide-and-conquer-mcp-server.git\n   cd divide-and-conquer-mcp-server\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. Build the server:\n   ```bash\n   npm run build\n   ```\n\n4. Add the server to your MCP configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"divide-and-conquer\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/divide-and-conquer-mcp-server/build/index.js\"],\n         \"disabled\": false\n       }\n     }\n   }\n   ```\n\n## Tools\n\nThe Divide and Conquer MCP Server provides the following tools:\n\n### `initialize_task`\n\nCreates a new task with the specified description and optional initial checklist items.\n\n### `update_task_description`\n\nUpdates the main task description.\n\n### `update_context`\n\nUpdates the context information for all tasks.\n\n### `add_checklist_item`\n\nAdds a new item to the checklist.\n\n### `update_checklist_item`\n\nUpdates an existing checklist item.\n\n### `mark_task_done`\n\nMarks a checklist item as done.\n\n### `mark_task_undone`\n\nMarks a checklist item as not done.\n\n### `remove_checklist_item`\n\nRemoves a checklist item.\n\n### `reorder_checklist_item`\n\nMoves a checklist item to a new position.\n\n### `add_note`\n\nAdds a note to the task.\n\n### `add_resource`\n\nAdds a resource to the task.\n\n### `update_metadata`\n\nUpdates the task metadata.\n\n### `clear_task`\n\nClears the current task data.\n\n### `get_checklist_summary`\n\nReturns a summary of the checklist with completion status. Context information is intentionally excluded from the summary to save context window space.\n\n### `get_current_task_details`\n\nRetrieves details of the current task (first uncompleted task) with full context, along with all other tasks with limited fields. For the current task, all fields including context_and_plan are included. For other tasks, only task, detailed_description, and done status are included (context_and_plan is excluded). This is the recommended tool to use when working with tasks.\n\n## Usage Examples\n\n### Initializing a Complex Task\n\n```javascript\nawait use_mcp_tool({\n  server_name: \"divide-and-conquer\",\n  tool_name: \"initialize_task\",\n  arguments: {\n    task_description: \"Refactor the authentication system to use JWT tokens and improve security\",\n    context_for_all_tasks: \"The current system uses session-based authentication with cookies. We need to migrate to JWT for better scalability and security.\",\n    initial_checklist: [\n      {\n        task: \"Analyze current authentication flow\",\n        detailed_description: \"Review the existing authentication code to understand the current flow.\",\n        context_and_plan: \"Look at src/auth/* files. The current implementation uses express-session with MongoDB store. Pay special attention to session expiration handling.\"\n      },\n      {\n        task: \"Design JWT implementation\",\n        detailed_description: \"Create a design document outlining how JWT will be implemented.\",\n        context_and_plan: \"Consider token structure, storage, and refresh mechanisms. Research best practices for JWT implementation in Node.js applications. Reference the security requirements document in docs/security.md.\"\n      }\n    ],\n    metadata: {\n      tags: [\"security\", \"refactoring\", \"authentication\"],\n      priority: \"high\",\n      estimated_completion_time: \"2 weeks\"\n    }\n  }\n});\n```\n\n### Getting a Checklist Summary\n\n```javascript\nconst summary = await use_mcp_tool({\n  server_name: \"divide-and-conquer\",\n  tool_name: \"get_checklist_summary\",\n  arguments: {\n    include_descriptions: true\n  }\n});\n\n// Result contains a formatted summary of the checklist with completion status (context is excluded to save space)\n```\n\n### Getting Current Task Details\n\n```javascript\nconst taskDetails = await use_mcp_tool({\n  server_name: \"divide-and-conquer\",\n  tool_name: \"get_current_task_details\",\n  arguments: {}\n});\n\n// Result contains:\n// - ultimate_goal: The final goal of the entire task (task_description)\n// - tasks: Array of all tasks, where the current task (first uncompleted) has all fields including context_and_plan,\n//   while other tasks have limited fields (task, detailed_description, done) without context_and_plan\n// - current_task_index: Index of the current task (first uncompleted)\n// - Additional task metadata, notes, resources, etc.\n```\n\n## Use Cases\n\n### 1. Complex Software Development Tasks\n\nWhen working on complex software development tasks, AI agents often face context window limitations that make it difficult to complete all steps in a single conversation. The Divide and Conquer MCP Server allows agents to:\n\n- Break down large tasks into smaller, manageable pieces\n- Track progress across multiple conversations\n- Maintain important context that would otherwise be lost\n- Organize tasks in a logical sequence\n- Document decisions and resources\n\n### 2. Project Planning and Management\n\nFor project planning and management tasks, the server enables:\n\n- Creating structured project plans with tasks and subtasks\n- Tracking progress and completion status\n- Maintaining context and requirements\n- Documenting decisions and resources\n- Collaborating across multiple conversations\n\n### 3. Research and Analysis\n\nWhen conducting research and analysis, agents can:\n\n- Break down research questions into specific areas to investigate\n- Track progress and findings\n- Maintain context and background information\n- Document sources and resources\n- Organize findings in a structured way\n\n## JSON Structure\n\nThe server uses the following JSON structure to store task information:\n\n```json\n{\n  \"task_description\": \"A medium-level detailed description about the whole task. The final goal we want to achieve.\",\n  \n  \"checklist\": [\n    {\n      \"done\": false,\n      \"task\": \"A short yet comprehensive name for the task\",\n      \"detailed_description\": \"A longer description about what we want to achieve with this task\",\n      \"context_and_plan\": \"Related information, files the agent should read, and more details from other tasks, as well as a detailed plan for this task. This is typically the longest string.\"\n    }\n  ],\n  \n  \"context_for_all_tasks\": \"Information that all tasks in the checklist should include.\",\n  \n  \"metadata\": {\n    \"created_at\": \"ISO timestamp\",\n    \"updated_at\": \"ISO timestamp\",\n    \"progress\": {\n      \"completed\": 0,\n      \"total\": 1,\n      \"percentage\": 0\n    },\n    \"tags\": [\"tag1\", \"tag2\"],\n    \"priority\": \"high|medium|low\",\n    \"estimated_completion_time\": \"ISO timestamp or duration\"\n  },\n  \n  \"notes\": [\n    {\n      \"timestamp\": \"ISO timestamp\",\n      \"content\": \"Additional notes or observations about the overall task\"\n    }\n  ],\n  \n  \"resources\": [\n    {\n      \"name\": \"Resource name\",\n      \"url\": \"URL or file path\",\n      \"description\": \"Description of the resource\"\n    }\n  ]\n}\n```\n\n## Configuration Storage\n\nBy default, the Divide and Conquer MCP Server stores task data in the following location:\n\n- On macOS/Linux: `~/.mcp_config/divide_and_conquer.json` (which expands to `/Users/username/.mcp_config/divide_and_conquer.json`)\n- On Windows: `C:\\Users\\username\\.mcp_config\\divide_and_conquer.json`\n\nThis file is created automatically when you first initialize a task. If the file doesn't exist when you try to read task data, the server will return an empty task structure and create the file when you write to it next time.\n\nThe server handles the following scenarios:\n\n- If the file doesn't exist when reading: Returns an empty task structure\n- If the directory doesn't exist: Creates the directory structure automatically when writing\n- If the file is corrupted or inaccessible: Returns appropriate error messages\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tasks",
        "notetaking",
        "structured",
        "notetaking knowledge",
        "mcp server",
        "tasks manageable"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "liaoweiqiang-dao42--notion-api-mcp": {
      "owner": "liaoweiqiang-dao42",
      "name": "notion-api-mcp",
      "url": "https://github.com/liaoweiqiang-dao42/notion-api-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/liaoweiqiang-dao42.webp",
      "description": "Integrate with Notion's API to manage tasks and content, enabling users to create, update, and track todos, manage databases, and structure content. Supports advanced features such as nested subtasks, Markdown formatting, and custom database views for effective productivity.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-29T08:51:53Z",
      "readme_content": "# Notion API MCP\n\n[![smithery badge](https://smithery.ai/badge/@liaoweiqiang-dao42/notion-api-mcp)](https://smithery.ai/server/@liaoweiqiang-dao42/notion-api-mcp)\n\nA Model Context Protocol (MCP) server that provides advanced todo list management and content organization capabilities through Notion's API. MCP enables AI models to interact with external tools and services, allowing seamless integration with Notion's powerful features.\n\n## MCP Overview\n\nPython-based MCP server that enables AI models to interact with Notion's API, providing:\n- **Todo Management**: Create, update, and track tasks with rich text, due dates, priorities, and nested subtasks\n- **Database Operations**: Create and manage Notion databases with custom properties, filters, and views\n- **Content Organization**: Structure and format content with Markdown support, hierarchical lists, and block operations\n- **Real-time Integration**: Direct interaction with Notion's workspace, pages, and databases through clean async implementation\n\n[Full feature list →](docs/features.md)\n\n## Quick Start\n\n### Installing via Smithery\n\nTo install notion-api-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@liaoweiqiang-dao42/notion-api-mcp):\n\n```bash\nnpx -y @smithery/cli install @liaoweiqiang-dao42/notion-api-mcp --client claude\n```\n\n### Installing manually\n\n```bash\n# Clone and setup\ngit clone https://github.com/yourusername/notion-api-mcp.git\ncd notion-api-mcp\nuv venv && source .venv/bin/activate\n\n# Install and configure\nuv pip install -e .\ncp .env.integration.template .env\n\n# Add your Notion credentials to .env:\n# NOTION_API_KEY=ntn_your_integration_token_here\n# NOTION_PARENT_PAGE_ID=your_page_id_here  # For new databases\n# NOTION_DATABASE_ID=your_database_id_here  # For existing databases\n\n# Run the server\npython -m notion_api_mcp\n```\n\n## Getting Started\n\n### 1. Create a Notion Integration\n\n1. Go to https://www.notion.so/my-integrations\n2. Click \"New integration\"\n3. Name your integration (e.g., \"My MCP Integration\")\n4. Select the workspace where you'll use the integration\n5. Copy the \"Internal Integration Token\" - this will be your `NOTION_API_KEY`\n   - Should start with \"ntn_\"\n\n### 2. Set Up Notion Access\n\nYou'll need either a parent page (for creating new databases) or an existing database ID:\n\n#### Option A: Parent Page for New Databases\n1. Open Notion in your browser\n2. Create a new page or open an existing one where you want to create databases\n3. Click the ••• menu in the top right\n4. Select \"Add connections\" and choose your integration\n5. Copy the page ID from the URL - it's the string after the last slash and before the question mark\n   - Example: In `https://notion.so/myworkspace/123456abcdef...`, the ID is `123456abcdef...`\n   - This will be your `NOTION_PARENT_PAGE_ID`\n\n#### Option B: Existing Database\n1. Open your existing Notion database\n2. Make sure it's connected to your integration (••• menu > Add connections)\n3. Copy the database ID from the URL\n   - Example: In `https://notion.so/myworkspace/123456abcdef...?v=...`, the ID is `123456abcdef...`\n   - This will be your `NOTION_DATABASE_ID`\n\n### 3. Install the MCP Server\n\n1. Create virtual environment:\n```bash\ncd notion-api-mcp\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n2. Install dependencies:\n```bash\nuv pip install -e .\n```\n\n3. Configure environment:\n```bash\ncp .env.integration.template .env\n```\n\n4. Edit .env with your Notion credentials:\n```env\nNOTION_API_KEY=ntn_your_integration_token_here\n\n# Choose one or both of these depending on your needs:\nNOTION_PARENT_PAGE_ID=your_page_id_here  # For creating new databases\nNOTION_DATABASE_ID=your_database_id_here  # For working with existing databases\n```\n\n### 4. Configure Claude Desktop\n\nIMPORTANT: While the server supports both .env files and environment variables, Claude Desktop specifically requires configuration in its config file to use the MCP.\n\nAdd to Claude Desktop's config (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"notion-api\": {\n      \"command\": \"/path/to/your/.venv/bin/python\",\n      \"args\": [\"-m\", \"notion_api_mcp\"],\n      \"env\": {\n        \"NOTION_API_KEY\": \"ntn_your_integration_token_here\",\n        \n        // Choose one or both:\n        \"NOTION_PARENT_PAGE_ID\": \"your_page_id_here\",\n        \"NOTION_DATABASE_ID\": \"your_database_id_here\"\n      }\n    }\n  }\n}\n```\n\nNote: Even if you have a .env file configured, you must add these environment variables to the Claude Desktop config for Claude to use the MCP. The .env file is primarily for local development and testing.\n\n## Documentation\n\n- [Configuration Details](docs/configuration.md) - Detailed configuration options and environment variables\n- [Features](docs/features.md) - Complete feature list and capabilities\n- [Architecture](docs/ARCHITECTURE.md) - Overview of available tools and usage examples\n- [API Reference](docs/api_reference.md) - Detailed API endpoints and implementation details\n- [Test Coverage Matrix](docs/test_coverage_matrix.md) - Test coverage and validation status\n- [Dependencies](docs/dependencies.md) - Project dependencies and version information\n- [Changelog](docs/CHANGELOG.md) - Development progress and updates\n\n## Development\n\nThe server uses modern Python async features throughout:\n- Type-safe configuration using Pydantic models\n- Async HTTP using httpx for better performance\n- Clean MCP integration for exposing Notion capabilities\n- Proper resource cleanup and error handling\n\n### Debugging\n\nThe server includes comprehensive logging:\n- Console output for development\n- File logging when running as a service\n- Detailed error messages\n- Request/response logging at debug level\n\nSet `PYTHONPATH` to include the project root when running directly:\n\n```bash\nPYTHONPATH=/path/to/project python -m notion_api_mcp\n```\n\n## Future Development\n\nPlanned enhancements:\n1. Performance Optimization\n   - Add request caching\n   - Optimize database queries\n   - Implement connection pooling\n\n2. Advanced Features\n   - Multi-workspace support\n   - Batch operations\n   - Real-time updates\n   - Advanced search capabilities\n\n3. Developer Experience\n   - Interactive API documentation\n   - CLI tools for common operations\n   - Additional code examples\n   - Performance monitoring\n\n4. Testing Enhancements\n   - Performance benchmarks\n   - Load testing\n   - Additional edge cases\n   - Extended integration tests\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notion",
        "api",
        "notetaking",
        "notion api",
        "dao42 notion",
        "todos manage"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "lnehc--mcp-sequential-thinking": {
      "owner": "lnehc",
      "name": "mcp-sequential-thinking",
      "url": "https://github.com/lnehc/mcp-sequential-thinking",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Facilitates structured problem-solving and decision-making by breaking down complex issues into manageable stages, while tracking progress and categorizing thoughts for better organization. Dynamically adapts the thinking process as new insights emerge and generates comprehensive summaries of the problem-solving journey.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "thinking",
        "sequential",
        "mcp",
        "sequential thinking",
        "thinking process",
        "thinking facilitates"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "lucasoeth--mitmproxy-mcp": {
      "owner": "lucasoeth",
      "name": "mitmproxy-mcp",
      "url": "https://github.com/lucasoeth/mitmproxy-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/lucasoeth.webp",
      "description": "Store and summarize notes with a simple note storage system featuring a custom note URI scheme. Provides functionality to add notes and generate summaries with different detail levels.",
      "stars": 6,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-01T03:04:28Z",
      "readme_content": "# mitmproxy-mcp MCP server\n\nA MCP server project\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mitmproxy-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/lucas/Coding/mitmproxy-mcp\",\n        \"run\",\n        \"mitmproxy-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"mitmproxy-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mitmproxy-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/lucas/Coding/mitmproxy-mcp run mitmproxy-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "mitmproxy",
        "summarize notes",
        "note storage",
        "notes generate"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "m-siles--branch-thinking": {
      "owner": "m-siles",
      "name": "branch-thinking",
      "url": "https://github.com/m-siles/branch-thinking",
      "imageUrl": "/freedevtools/mcp/pfp/m-siles.webp",
      "description": "Manage branching lines of thought with features for navigation, cross-references, insight generation, and priority tracking based on confidence and connections.",
      "stars": 40,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T23:21:39Z",
      "readme_content": "# Branch Thinking\n\nAn MCP server that implements branch-based thought navigation, with support for:\n- Multiple branches of thought\n- Branch navigation (list, focus, history)\n- Cross-references between related thoughts\n- Insight generation from key points\n- Branch priority tracking\n\nThis is based on the `sequential-thinking` tool available here:\nhttps://github.com/modelcontextprotocol/servers/tree/main/src/sequentialthinking\n\n## Features\n\n- **Branch Management**: Create and navigate between different lines of thought\n- **Cross References**: Link related thoughts across branches with typed relationships\n- **Insights**: Automatically generate insights from key points in thoughts\n- **Priority Tracking**: Track branch priorities based on confidence and connections\n\n## Commands\n\n- `list`: Show all branches with their current status\n- `focus [branchId]`: Switch focus to a specific branch\n- `history [branchId?]`: Show the history of thoughts in a branch\n\n## Installation\nPlace this project in your custom MCP tool directory.\n\n```bash\nnpm install\nnpm run build \n```\n\nAdd to your `claude_desktop_config.json`:\n```json\n\"branch-thinking\": {\n  \"command\": \"node\",\n  \"args\": [\n    \"/your-custom-mcp-dir-here/branch-thinking/dist/index.js\"\n  ]\n}\n```\n\n## Tips\nClaude often will not use tools unless explicitly prompted to do so.\n\nIf you want to use this tool without being prompted, add to either your Claude Profile Settings (or a system prompt) something like so:\n\n\n_If I ask you to \"think step by step,\" \"think before you respond,\" or \"use chain of thought,\" that means use the branch-thinking tool. Don't hesitate to use the branch-thinking tool on your own if you think your response would benefit from multiple steps._\n\n## Credits\nI can't pretend that I wrote most of this code. Most of it was generated by Claude. The concept was my own, and so were testing, fixes, and implementation. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "branching",
        "branch",
        "thinking",
        "branch thinking",
        "thinking manage",
        "manage branching"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "marcelmarais--obsidian-mcp-server": {
      "owner": "marcelmarais",
      "name": "obsidian-mcp-server",
      "url": "https://github.com/marcelmarais/obsidian-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/marcelmarais.webp",
      "description": "Facilitates interaction with Obsidian vaults by enabling reading, writing, and managing notes and todos through natural language commands, all while allowing direct filesystem access even when the Obsidian app is not running.",
      "stars": 17,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-29T09:07:11Z",
      "readme_content": "# Obsidian MCP Server\n\nA lightweight [Model Context Protocol (MCP)](https://modelcontextprotocol.io) server that enables AI assistants like Cursor & Claude to read from and write to your Obsidian vault.\n\n## Example Interactions\n\n- \"Create a new note for standup tomorrow describing the code changes I've made today\" (should also use Git)\n- \"Check my notes about project ideas\"\n- \"Check what todos I have related to refactoring\"\n\n## Tools\n\n### Read\n\n1. **getAllFilenames**\n\n   - Gets a list of all filenames in the Obsidian vault\n   - Useful for discovering what files are available\n2. **readMultipleFiles**\n\n   - Retrieves the contents of specified files from the Obsidian vault\n   - Supports exact filenames, partial filenames, or case-insensitive matches\n   - Each file's content is prefixed with '# File: filename' for clear identification\n3. **getOpenTodos**\n\n   - Retrieves all open TODO items from markdown files in the Obsidian vault\n   - Finds unchecked checkbox items (lines containing '- [ ] ')\n   - Returns them with their file locations\n\n### Write\n\n1. **updateFileContent**\n   - Updates the content of a specified file in the Obsidian vault with new markdown content\n   - If the file doesn't exist, it will be created\n   - Automatically creates any necessary directories\n\n## Install & build\n\n```bash\nnpm install obsidian-mcp-server\nnpm run build\n```\n\n## Integrating with Claude Desktop and Cursor\n\nTo use your MCP server with Claude Desktop add it to your Claude configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"obsidian-mcp-server/build/index.js\",\n        \"/path/to/your/vault\"\n      ]\n    }\n  }\n}\n```\n\nFor Cursor go to the MCP tab `Cursor Settings` (command + shift + J). Add a server with this command:\n\n```bash\nnode obsidian-mcp-server/build/index.js /path/to/your/vault\n```\n\n## Comparison with Other Solutions\n\nWhile this implementation is intentionally lightweight, other solutions like [jacksteamdev/obsidian-mcp-tools](https://github.com/jacksteamdev/obsidian-mcp-tools) offer a more feature-rich approach as an Obsidian plugin.\n\nThis standalone server has the advantage of direct filesystem access without requiring the Obsidian application to be running.\n\n## Resources\n\n- [Model Context Protocol Documentation](https://modelcontextprotocol.io)\n- [MCP Servers Repository](https://github.com/modelcontextprotocol/servers)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "notetaking",
        "notes",
        "obsidian mcp",
        "obsidian app",
        "access obsidian"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "marcopesani--think-mcp-server": {
      "owner": "marcopesani",
      "name": "think-mcp-server",
      "url": "https://github.com/marcopesani/think-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/marcopesani.webp",
      "description": "Provides a mechanism for AI models to incorporate a structured thinking step in problem-solving, enhancing decision-making and policy adherence during complex multi-step tasks.",
      "stars": 20,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-18T13:01:01Z",
      "readme_content": "# think-mcp-server\n[![smithery badge](https://smithery.ai/badge/@marcopesani/think-mcp-server)](https://smithery.ai/server/@marcopesani/think-mcp-server)\n\nA minimal MCP Server based on the Anthropic's \"think\" tool research\n\n## Overview\n\nThis project implements a minimal Message Control Protocol (MCP) server that provides Claude AI models with the \"think\" tool capability. Based on Anthropic's research published on March 20, 2025, this implementation enables Claude to perform better on complex reasoning tasks involving multi-step tool usage.\n\n## What is the \"think\" tool?\n\nThe \"think\" tool gives Claude the ability to include an additional thinking step—with its own designated space—as part of reaching a final answer. Unlike extended thinking (which happens before response generation), the \"think\" tool allows Claude to pause during response generation to consider whether it has all necessary information to proceed.\n\nKey benefits:\n- Improves complex problem-solving performance\n- Enhances policy adherence in tool usage\n- Increases consistency in decision making\n- Helps with multi-step problems requiring careful reasoning\n\n## Implementation\n\nThis server implements the \"think\" tool with the following specification:\n\n```json\n{\n  \"name\": \"think\",\n  \"description\": \"Use the tool to think about something. It will not obtain new information or change the database, but just append the thought to the log. Use it when complex reasoning or some cache memory is needed.\",\n  \"input_schema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"thought\": {\n        \"type\": \"string\",\n        \"description\": \"A thought to think about.\"\n      }\n    },\n    \"required\": [\"thought\"]\n  }\n}\n```\n\n## When to Use the \"think\" Tool\n\nBased on Anthropic's research, this tool is most beneficial for:\n\n1. **Tool Output Analysis**: When Claude needs to process previous tool call outputs before acting\n2. **Policy-Heavy Environments**: When Claude must follow detailed guidelines\n3. **Sequential Decision Making**: When each action builds on previous ones and mistakes are costly\n\n## Implementation Best Practices\n\n### Strategic Prompting\n\nFor best results, include clear instructions in your prompts on when and how to use the \"think\" tool. Consider providing domain-specific examples that show:\n- Expected detail level in reasoning\n- How to break down complex instructions into steps\n- Decision trees for common scenarios\n- Information verification processes\n\n### System Prompt Integration\n\nComplex guidance works best when placed in the system prompt rather than the tool description itself.\n\n## How It Works\n\nThe server operates using the Model Context Protocol (MCP) to communicate with Claude and similar AI assistants. It:\n\n- Runs as a standalone process using stdio for communication\n- Registers the \"think\" tool for Claude to use during reasoning\n- Returns structured responses that can be processed by AI assistants\n- Logs thinking steps without affecting the external environment\n\n## Features\n\n### Tools\n\n- **think** - Enables Claude to think about a problem or analyze information\n  - Required: thought (string containing Claude's thinking process)\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the MCP Inspector:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Installation\n\n### Installing via Smithery\n\nTo install think-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@marcopesani/think-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @marcopesani/think-mcp-server --client claude\n```\n\n### Installing via npm\n\n```bash\nnpm install -g think-mcp-server\n```\n\n### Claude Desktop\n\nAdd the server config at:\n\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"think\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"think-mcp-server\"]\n    }\n  }\n}\n```\n\n### Cline\n\n1. Open the Cline extension settings\n2. Open \"MCP Servers\" tab\n3. Click on \"Configure MCP Servers\"\n4. Add the server config:\n\n```json\n{\n  \"mcpServers\": {\n    \"github.com/marcopesani/think-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"think-mcp-server\"],\n      \"disabled\": false,\n      \"autoApprove\": [\"think\"]\n    }\n  }\n}\n```\n\nAdditional Cline configuration options:\n- `disabled`: Set to false to enable the server\n- `autoApprove`: List of tools that don't require explicit approval for each use\n\n### Cursor\n\n1. Open the Cursor settings\n2. Open \"Features\" settings\n3. In the \"MCP Servers\" section, click on \"Add new MCP Server\"\n4. Choose a name, and select \"command\" as \"Type\"\n5. In the \"Command\" field, enter the following:\n```\nnpx -y think-mcp-server\n```\n\n### Docker\n\nYou can also run the server using Docker. First, build the image:\n\n```bash\ndocker build -t think-mcp-server .\n```\n\nThen run the container:\n\n```bash\ndocker run -it think-mcp-server\n```\n\nFor development, you might want to mount your source code as a volume:\n\n```bash\ndocker run -v $(pwd):/app think-mcp-server\n```\n\n## Getting Started\n\n1. Install the server using one of the methods above\n2. Configure your AI client to use the think-mcp-server\n3. In your prompts to Claude, include instructions for using the \"think\" tool\n4. For best results, add examples of effective thinking patterns in your system prompt\n\n## TypeScript Development Example\n\nHere's an example prompt focused on TypeScript development to help Claude leverage the \"think\" tool effectively:\n\n```\n## Using the think tool for TypeScript Development\n\nBefore implementing any TypeScript code or responding to technical questions, use the think tool to:\n- Analyze type definitions and interfaces that might be relevant\n- Check for potential type errors or edge cases\n- Reason through generics and type constraints\n- Verify the correct usage of TypeScript features\n\nHere's an example of TypeScript-specific reasoning with the think tool:\n\n<think_tool_typescript_example>\nUser wants to implement a generic state management hook in React TypeScript\n- Analysis of requirements:\n  * Need to handle any data type (generic typing)\n  * Must preserve type information throughout state lifecycle\n  * Should provide typesafe update methods\n  * Need to consider immutability patterns\n\n- Type constraints to consider:\n  * Should T extend object, or allow primitives?\n  * Is Partial<T> appropriate for updates?\n  * Should we use Record<string, unknown> as fallback?\n\n- Implementation considerations:\n  * useState<T> as foundation\n  * Add typed setter methods that preserve generics\n  * Consider callback pattern for atomic updates\n  * Check for compatibility with React's rules of hooks\n\n- Approach:\n1. Define generic interface for the hook's return value\n2. Implement useState with proper generic typing\n3. Create typed update methods that maintain type safety\n4. Add JSDoc comments for better developer experience\n5. Return immutable state with properly typed methods\n</think_tool_typescript_example>\n\nWhen helping with TypeScript challenges:\n1. First analyze the type system implications\n2. Consider TypeScript-specific edge cases\n3. Reason through type narrowing and widening\n4. Check for compatibility with the TypeScript compiler version\n5. Consider type inference and explicit type annotations\n```\n\n## Performance Benefits\n\nAnthropic's evaluations showed significant improvements when using the \"think\" tool:\n- 54% relative improvement on τ-Bench airline domain (pass^1 metric: 0.570 vs 0.370 baseline)\n- Improved performance on SWE-bench by 1.6% on average\n- Enhanced consistency across multiple trials\n\n## References\n\nThis implementation is based on Anthropic's research article \"[The 'think' tool: Enabling Claude to stop and think in complex tool use situations](https://www.anthropic.com/engineering/claude-think-tool)\" published March 20, 2025.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "thinking",
        "mcp",
        "structured thinking",
        "thinking step",
        "mechanism ai"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "markacianfrani--mcp-notes": {
      "owner": "markacianfrani",
      "name": "mcp-notes",
      "url": "https://github.com/markacianfrani/mcp-notes",
      "imageUrl": "/freedevtools/mcp/pfp/markacianfrani.webp",
      "description": "A personal knowledge management system that captures and organizes daily notes into a searchable format using AI-assisted categorization and summarization. It integrates with MCP-compatible clients to enhance productivity and manage fragmented knowledge effectively.",
      "stars": 5,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T15:16:16Z",
      "readme_content": "# 📚 MCP Notes\n\nA personal knowledge management system built on the Model Context Protocol (MCP) that transforms daily notes into organized, searchable knowledge.\n\n## 🚀 Usage\n\n### 🛠️ Manual Setup\n\n1. **Clone the repository**\n\n   ```bash\n   git clone git@github.com:markacianfrani/mcp-notes.git\n   cd mcp-notes\n   npm i\n   npm run build\n   ```\n\n2. **Setup MCP**\n\n### 🖥️ Claude Desktop\n\nAdd to your claude-desktop-config.json:\n\n```json\n\"notes\": {\n    \"command\": \"node\",\n    \"args\": [\n        \"path/to/this/repo/mcp-notes/dist/index.js\",\n        \"path/to/your/notes\"\n    ],\n},\n```\n\n## 🌟 Project Vision\n\nMCP Notes aims to solve the problem of knowledge fragmentation by creating a system where daily thoughts, accomplishments, and insights can be:\n\n1. 📥 Captured quickly with minimal friction\n2. 🗂️ Organized automatically into meaningful structures\n3. 🧠 Synthesized into higher-level knowledge\n4. 🔍 Retrieved easily when needed\n\nThe goal is to build an external rubber duck that can dump your working memory in real-time from any tool and sort through the garbage.\n\n## 🧩 Core Concepts\n\n### 1. 📅 Daily Logs\n\nDaily logs are the atomic unit of capture in MCP Notes. Each day gets its own markdown file where you can record observations throughout the day. Think of daily logs like a running ledger.\n\n> 💡 TIP: Make use of Claude Desktop's Quick Entry Keyboard Shortcut\n\nMCP is tool-agnostic so you can /log across conversations but also tools as well--ask Copilot or Cursor to log a summary of lessons-learned after fixing a bug or make Claude Desktop save a new approach to an old problem.\n\n### 2. 📊 Rollups\n\nRollups are automatically generated summaries that condense daily logs into higher-level insights and patterns. They help connect isolated pieces of information into a coherent narrative of your work and thinking.\n\n### 3. 📚 Knowledge Categories\n\nAll notes in the system fall into one of four categories:\n\n- **🏆 Accomplishment**: Solving problems, completing features, fixing bugs\n- **💡 Insight**: Patterns, architectural decisions, better ways of working\n- **📝 TODO**: Tasks connected to larger goals, meaningful improvements\n- **📖 Knowledge**: Technical details, context, rationales, techniques\n\n## 🎨 Design Principles\n\nMCP Notes is built on several core design principles:\n\n### 1. 📄 Plain Text First\n\nAll notes are stored as plain text Markdown files, ensuring:\n\n- Future-proof storage that won't be locked into proprietary formats\n- Version control compatibility\n- Easy editing with any text editor\n- Transparent data structure\n\n### 2. ✍️ Low Friction Capture\n\nThe primary interface is designed to minimize the friction of recording thoughts:\n\n- Simple text input\n- Automatic categorization assistance\n- No complex organization required at capture time\n\n### 3. 🔄 Progressive Organization\n\nRather than requiring rigid organization upfront, MCP Notes employs a progressive approach:\n\n- Capture raw thoughts and activities\n- Automatically categorize content\n- Generate periodic summaries\n- Connect related items over time\n\n### 4. 🤖 AI Augmentation\n\nThe system leverages AI to enhance human thinking, not replace it:\n\n- Help categorize information\n- Generate summaries and connections\n- Surface relevant past notes\n- Identify patterns across time\n\n\n## 🧰 Available Tools\n\nMCP Notes provides a set of tools that can be invoked through Claude Desktop or other MCP-compatible clients. These tools allow you to capture, organize, and retrieve your notes.\n\n### 📝 Core Note Tools\n\n#### `/log`\n\nCreates or updates today's daily log file with your notes.\n\nInvoke with: \"log this to my daily log: ...\", \"add a summary of that to my log: ....\"\n\n#### `/rollup`\n\nSynthesizes daily notes into an organized summary with categories, connections, and action items.\n\nInvoke with: \"rollup my notes for today\"\n\n#### `write_note`\n\nCreates a new note or overwrites an existing note with content.\n\n#### `sticky`\n\nEvaluates the \"stickiness\" of a thought based on actionability, longevity, findability, and future reference value.\n\nInvoke with: \"Is this idea sticky?\"\n\n#### `evaluateInsight`\n\nEvaluates the long-term value and significance of an insight or thought.\n\nInvoke with: \"Is this insight valuable for the long term?\"\n\n### 📂 File System Tools\n\n#### `search_files`\n\nRecursively searches for files and directories matching a pattern in your notes directory.\n\n#### `read_note`\n\nReads the complete contents of a note file from your notes directory.\n\n#### `read_multiple_notes`\n\nReads the contents of multiple note files simultaneously.\n\n#### `list_directory`\n\nLists the contents of a directory in your notes.\n\n#### `create_directory`\n\nCreates a new directory in your notes.\n\nSee the [CHANGELOG.md](CHANGELOG.md) file for version history and changes.\n\n## 💡 Available Prompts\n\n### Is this atomic?\n\nBreaks down ideas into their simplest standalone parts. Use this prompt to turn large ideas into smaller concepts. Smaller notes can be linked to other notes much more easily.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "knowledge",
        "notetaking knowledge",
        "notes personal",
        "notes searchable"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "mastercode-io--scaflog-zoho-mcp-server": {
      "owner": "mastercode-io",
      "name": "scaflog-zoho-mcp-server",
      "url": "https://github.com/mastercode-io/scaflog-zoho-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/mastercode-io.webp",
      "description": "Store and manage notes, providing features for summarizing and organizing content through a custom URI scheme. It integrates with Zoho Creator to enhance productivity in note-taking tasks.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-21T11:46:34Z",
      "readme_content": "# scaflog-zoho-mcp-server MCP server\n\nZoho Creator Scaflog App MCP Server\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"scaflog-zoho-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/alexsherin/Documents/Projects/MCP Servers\",\n        \"run\",\n        \"scaflog-zoho-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"scaflog-zoho-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"scaflog-zoho-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/alexsherin/Documents/Projects/MCP Servers run scaflog-zoho-mcp-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "zoho",
        "notes",
        "manage notes",
        "zoho creator",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "modelcontextprotocol--servers": {
      "owner": "modelcontextprotocol",
      "name": "servers",
      "url": "https://github.com/modelcontextprotocol/servers",
      "imageUrl": "/freedevtools/mcp/pfp/modelcontextprotocol.webp",
      "description": "A basic implementation of persistent memory using a local knowledge graph that enables storage and retrieval of user-specific information across chats by defining entities and their relationships.",
      "stars": 69476,
      "forks": 8235,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T12:31:15Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references to community-built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nTypically, each MCP server is implemented with an MCP SDK:\n\n- [C# MCP SDK](https://github.com/modelcontextprotocol/csharp-sdk)\n- [Go MCP SDK](https://github.com/modelcontextprotocol/go-sdk)\n- [Java MCP SDK](https://github.com/modelcontextprotocol/java-sdk)\n- [Kotlin MCP SDK](https://github.com/modelcontextprotocol/kotlin-sdk)\n- [PHP MCP SDK](https://github.com/modelcontextprotocol/php-sdk)\n- [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)\n- [Ruby MCP SDK](https://github.com/modelcontextprotocol/ruby-sdk)\n- [Rust MCP SDK](https://github.com/modelcontextprotocol/rust-sdk)\n- [Swift MCP SDK](https://github.com/modelcontextprotocol/swift-sdk)\n- [TypeScript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n\n> [!NOTE]\n> Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the official SDKs.\n\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools.\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage.\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls.\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories.\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system.\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences.\n- **[Time](src/time)** - Time and timezone conversion capabilities.\n\n### Archived\n\nThe following reference servers are now archived and can be found at [servers-archived](https://github.com/modelcontextprotocol/servers-archived).\n\n- **[AWS KB Retrieval](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime.\n- **[Brave Search](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/brave-search)** - Web and local search using Brave's Search API.  Has been replaced by the [official server](https://github.com/brave/brave-search-mcp-server).\n- **[EverArt](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/everart)** - AI image generation using various models.\n- **[GitHub](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/github)** - Repository management, file operations, and GitHub API integration.\n- **[GitLab](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gitlab)** - GitLab API, enabling project management.\n- **[Google Drive](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gdrive)** - File access and search capabilities for Google Drive.\n- **[Google Maps](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/google-maps)** - Location services, directions, and place details.\n- **[PostgreSQL](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/postgres)** - Read-only database access with schema inspection.\n- **[Puppeteer](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/puppeteer)** - Browser automation and web scraping.\n- **[Redis](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/redis)** - Interact with Redis key-value stores.\n- **[Sentry](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sentry)** - Retrieving and analyzing issues from Sentry.io.\n- **[Slack](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)** - Channel management and messaging capabilities. Now maintained by [Zencoder](https://github.com/zencoderai/slack-mcp-server)\n- **[SQLite](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sqlite)** - Database interaction and business intelligence capabilities.\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/LpSK1tSZweomrAHOMAj9Gea96lA.svg\" alt=\"Paragon Logo\" /> **[ActionKit by Paragon](https://github.com/useparagon/paragon-mcp)** - Connect to 130+ SaaS integrations (e.g. Slack, Salesforce, Gmail) with Paragon’s [ActionKit](https://www.useparagon.com/actionkit) API.\n- <img height=\"12\" width=\"12\" src=\"https://invoxx-public-bucket.s3.eu-central-1.amazonaws.com/frontend-resources/adfin-logo-small.svg\" alt=\"Adfin Logo\" /> **[Adfin](https://github.com/Adfin-Engineering/mcp-server-adfin)** - The only platform you need to get paid - all payments in one place, invoicing and accounting reconciliations with [Adfin](https://www.adfin.com/).\n- <img height=\"12\" width=\"12\" src=\"https://github.com/AgentOps-AI/agentops/blob/main/docs/favicon.png\" alt=\"AgentOps Logo\" /> **[AgentOps](https://github.com/AgentOps-AI/agentops-mcp)** - Provide observability and tracing for debugging AI agents with [AgentOps](https://www.agentops.ai/) API.\n- <img height=\"12\" width=\"12\" src=\"https://www.agentql.com/favicon/favicon.png\" alt=\"AgentQL Logo\" /> **[AgentQL](https://github.com/tinyfish-io/agentql-mcp)** - Enable AI agents to get structured data from unstructured web with [AgentQL](https://www.agentql.com/).\n- <img height=\"12\" width=\"12\" src=\"https://agentrpc.com/favicon.ico\" alt=\"AgentRPC Logo\" /> **[AgentRPC](https://github.com/agentrpc/agentrpc)** - Connect to any function, any language, across network boundaries using [AgentRPC](https://www.agentrpc.com/).\n- **[Agentset](https://github.com/agentset-ai/mcp-server)** - RAG for your knowledge base connected to [Agentset](https://agentset.ai).\n- <img height=\"12\" width=\"12\" src=\"https://aiven.io/favicon.ico\" alt=\"Aiven Logo\" /> **[Aiven](https://github.com/Aiven-Open/mcp-aiven)** - Navigate your [Aiven projects](https://go.aiven.io/mcp-server) and interact with the PostgreSQL®, Apache Kafka®, ClickHouse® and OpenSearch® services\n- <img height=\"12\" width=\"12\" src=\"https://www.alation.com/resource-center/download/7p3vnbbznfiw/34FMtBTex5ppvs2hNYa9Fc/c877c37e88e5339878658697c46d2d58/Alation-Logo-Bug-Primary.svg\" alt=\"Alation Logo\" /> **[Alation](https://github.com/Alation/alation-ai-agent-sdk)** - Unlock the power of the enterprise Data Catalog by harnessing tools provided by the Alation MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://i.postimg.cc/5NYw9qjS/alby-icon-head-yellow-500x500.png\" alt=\"Alby Logo\" /> **[Alby Bitcoin Payments](https://github.com/getAlby/mcp)** - Connect any bitcoin lightning wallet to your agent to send and receive instant payments globally with your agent.\n- **[Algolia](https://github.com/algolia/mcp)** - Use AI agents to provision, configure, and query your [Algolia](https://algolia.com) search indices.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i4/O1CN01epkXwH1WLAXkZfV6N_!!6000000002771-2-tps-200-200.png\" alt=\"Alibaba Cloud AnalyticDB for MySQL Logo\" /> **[Alibaba Cloud AnalyticDB for MySQL](https://github.com/aliyun/alibabacloud-adb-mysql-mcp-server)** - Connect to an [AnalyticDB for MySQL](https://www.alibabacloud.com/en/product/analyticdb-for-mysql) cluster for getting database or table metadata, querying and analyzing data. It will be supported to add the OpenAPI for cluster operation in the future.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibabacloud-adbpg-mcp-server/blob/master/images/AnalyticDB.png\" alt=\"Alibaba Cloud AnalyticDB for PostgreSQL Logo\" /> **[Alibaba Cloud AnalyticDB for PostgreSQL](https://github.com/aliyun/alibabacloud-adbpg-mcp-server)** - An MCP server to connect to [AnalyticDB for PostgreSQL](https://github.com/aliyun/alibabacloud-adbpg-mcp-server) instances, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN0101UWWF1UYn3rAe3HU_!!6000000002530-2-tps-32-32.png\" alt=\"DataWorks Logo\" /> **[Alibaba Cloud DataWorks](https://github.com/aliyun/alibabacloud-dataworks-mcp-server)** - A Model Context Protocol (MCP) server that provides tools for AI, allowing it to interact with the [DataWorks](https://www.alibabacloud.com/help/en/dataworks/) Open API through a standardized interface. This implementation is based on the Alibaba Cloud Open API and enables AI agents to perform cloud resources operations seamlessly.\n- <img height=\"12\" width=\"12\" src=\"https://opensearch-shanghai.oss-cn-shanghai.aliyuncs.com/ouhuang/aliyun-icon.png\" alt=\"Alibaba Cloud OpenSearch Logo\" /> **[Alibaba Cloud OpenSearch](https://github.com/aliyun/alibabacloud-opensearch-mcp-server)** - This MCP server equips AI Agents with tools to interact with [OpenSearch](https://help.aliyun.com/zh/open-search/?spm=5176.7946605.J_5253785160.6.28098651AaYZXC) through a standardized and extensible interface.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibaba-cloud-ops-mcp-server/blob/master/image/alibaba-cloud.png\" alt=\"Alibaba Cloud OPS Logo\" /> **[Alibaba Cloud OPS](https://github.com/aliyun/alibaba-cloud-ops-mcp-server)** - Manage the lifecycle of your Alibaba Cloud resources with [CloudOps Orchestration Service](https://www.alibabacloud.com/en/product/oos) and Alibaba Cloud OpenAPI.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibabacloud-rds-openapi-mcp-server/blob/main/assets/alibabacloudrds.png\" alt=\"Alibaba Cloud RDS MySQL Logo\" /> **[Alibaba Cloud RDS](https://github.com/aliyun/alibabacloud-rds-openapi-mcp-server)** - An MCP server designed to interact with the Alibaba Cloud RDS OpenAPI, enabling programmatic management of RDS resources via an LLM.\n- <img height=\"12\" width=\"12\" src=\"https://www.alipayplus.com/favicon.ico\" alt=\"AlipayPlus Logo\" /> **[AlipayPlus](https://github.com/alipay/global-alipayplus-mcp)** - Connect your AI Agents to AlipayPlus Checkout Payment.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.allvoicelab.com/resources/workbench/dist/icon-dark.ico\" alt=\"AllVoiceLab Logo\" /> **[AllVoiceLab](https://www.allvoicelab.com/mcp)** - An AI voice toolkit with TTS, voice cloning, and video translation, now available as an MCP server for smarter agent integration.\n- <img height=\"12\" width=\"12\" src=\"https://files.alpaca.markets/webassets/favicon-32x32.png\" alt=\"Alpaca Logo\" /> **[Alpaca](https://github.com/alpacahq/alpaca-mcp-server)** – Alpaca's MCP server lets you trade stocks and options, analyze market data, and build strategies through [Alpaca's Trading API](https://alpaca.markets/)\n- <img height=\"12\" width=\"12\" src=\"https://www.alphavantage.co/logo.png/\" alt=\"AlphaVantage Logo\" /> **[AlphaVantage](https://mcp.alphavantage.co/)** - Connect to 100+ APIs for financial market data, including stock prices, fundamentals, and more from [AlphaVantage](https://www.alphavantage.co)\n- <img height=\"12\" width=\"12\" src=\"https://alttester.com/app/themes/alttester-sage-theme/public/images/logo-alttester.038ec8.png\" alt=\"AltTester Logo\" /> **[AltTester®](https://alttester.com/docs/desktop/latest/pages/ai-extension.html)** - Use AltTester® capabilities to connect and test your Unity or Unreal game. Write game test automation faster and smarter, using [AltTester](https://alttester.com) and the AltTester® MCP server. \n- <img height=\"12\" width=\"12\" src=\"https://www.antom.com/favicon.ico\" alt=\"Antom Logo\" /> **[Antom](https://github.com/alipay/global-antom-mcp)** - Connect your AI Agents to Antom Checkout Payment.\n- <img height=\"12\" width=\"12\" src=\"https://developers.anytype.io/img/favicon.ico\" alt=\"Anytype Logo\" /> **[Anytype](https://github.com/anyproto/anytype-mcp)** - An MCP server enabling AI assistants to interact with [Anytype](https://anytype.io) - a local and collaborative wiki - to organize objects, lists, and more through natural language.\n- <img height=\"12\" width=\"12\" src=\"https://doris.apache.org/images/favicon.ico\" alt=\"Apache Doris Logo\" /> **[Apache Doris](https://github.com/apache/doris-mcp-server)** - MCP Server For [Apache Doris](https://doris.apache.org/), an MPP-based real-time data warehouse.\n- <img height=\"12\" width=\"12\" src=\"https://iotdb.apache.org/img/logo.svg\" alt=\"Apache IoTDB Logo\" /> **[Apache IoTDB](https://github.com/apache/iotdb-mcp-server)** - MCP Server for [Apache IoTDB](https://github.com/apache/iotdb) database and its tools\n- **[Apache Pinot](https://github.com/startreedata/mcp-pinot)** – MCP server for running real - time analytics queries on Apache Pinot, an open-source OLAP database built for high-throughput, low-latency powering real-time applications.\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/apify-mcp-server)** - Use 6,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://2052727.fs1.hubspotusercontent-na1.net/hubfs/2052727/cropped-cropped-apimaticio-favicon-1-32x32.png\" alt=\"APIMatic Logo\" /> **[APIMatic MCP](https://github.com/apimatic/apimatic-validator-mcp)** - APIMatic MCP Server is used to validate OpenAPI specifications using [APIMatic](https://www.apimatic.io/). The server processes OpenAPI files and returns validation summaries by leveraging APIMatic's API.\n- <img height=\"12\" width=\"12\" src=\"https://apollo-server-landing-page.cdn.apollographql.com/_latest/assets/favicon.png\" alt=\"Apollo Graph Logo\" /> **[Apollo MCP Server](https://github.com/apollographql/apollo-mcp-server/)** - Connect your GraphQL APIs to AI agents\n- <img height=\"12\" width=\"12\" src=\"https://developer.aqara.com/favicon.ico\" alt=\"Aqara Logo\" /> **[Aqara MCP Server](https://github.com/aqara/aqara-mcp-server/)** - Control  [Aqara](https://www.aqara.com/) smart home devices, query status, execute scenes, and much more using natural language.\n- <img height=\"12\" width=\"12\" src=\"https://media.licdn.com/dms/image/v2/C4D0BAQEeD7Dxbpadkw/company-logo_200_200/company-logo_200_200/0/1644692667545/archbee_logo?e=2147483647&v=beta&t=lTi9GRIoqzG6jN3kJC26uZWh0q3uiQelsH6mGoq_Wfw\" alt=\"Archbee Logo\" /> **[Archbee](https://www.npmjs.com/package/@archbee/mcp)** - Write and publish documentation that becomes the trusted source for instant answers with AI. Stop cobbling tools and use [Archbee](https://www.archbee.com/) — the first complete documentation platform.\n- <img height=\"12\" width=\"12\" src=\"https://phoenix.arize.com/wp-content/uploads/2023/04/cropped-Favicon-32x32.png\" alt=\"Arize-Phoenix Logo\" /> **[Arize Phoenix](https://github.com/Arize-ai/phoenix/tree/main/js/packages/phoenix-mcp)** - Inspect traces, manage prompts, curate datasets, and run experiments using [Arize Phoenix](https://github.com/Arize-ai/phoenix), an open-source AI and LLM observability tool.\n- <img height=\"12\" width=\"12\" src=\"https://731523176-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FaVUBXRZbpAgtjYf5HsvO%2Fuploads%2FaRRrVVocXCTr6GkepfCx%2Flogo_color.svg?alt=media&token=3ba24089-0ab2-421f-a9d9-41f2f94f954a\" alt=\"Armor Logo\" /> **[Armor Crypto MCP](https://github.com/armorwallet/armor-crypto-mcp)** - MCP to interface with multiple blockchains, staking, DeFi, swap, bridging, wallet management, DCA, Limit Orders, Coin Lookup, Tracking and more.\n- <img height=\"12\" width=\"12\" src=\"https://console.asgardeo.io/app/libs/themes/wso2is/assets/images/branding/favicon.ico\" alt=\"Asgardeo Logo\" /> **[Asgardeo](https://github.com/asgardeo/asgardeo-mcp-server)** - MCP server to interact with your [Asgardeo](https://wso2.com/asgardeo) organization through LLM tools.\n- <img height=\"12\" width=\"12\" src=\"https://www.datastax.com/favicon-32x32.png\" alt=\"DataStax logo\" /> **[Astra DB](https://github.com/datastax/astra-db-mcp)** - Comprehensive tools for managing collections and documents in a [DataStax Astra DB](https://www.datastax.com/products/datastax-astra) NoSQL database with a full range of operations such as create, update, delete, find, and associated bulk actions.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/66598898fd13d51606c3215d/66ccbfef13bd8bc19d587578_favicon-32x32.png\" alt=\"Atla Logo\" /> **[Atla](https://github.com/atla-ai/atla-mcp-server)** - Enable AI agents to interact with the [Atla API](https://docs.atla-ai.com/) for state-of-the-art LLMJ evaluation.\n- <img height=\"12\" width=\"12\" src=\"https://assets.atlan.com/assets/atlan-a-logo-blue-background.png\" alt=\"Atlan Logo\" /> **[Atlan](https://github.com/atlanhq/agent-toolkit/tree/main/modelcontextprotocol)** - The Atlan Model Context Protocol server allows you to interact with the [Atlan](https://www.atlan.com/) services through multiple tools.\n- <img height=\"12\" width=\"12\" src=\"https://www.atlassian.com/favicon.ico\" alt=\"Atlassian Logo\" /> **[Atlassian](https://www.atlassian.com/platform/remote-mcp-server)** - Securely interact with Jira work items and Confluence pages, and search across both.\n- <img height=\"12\" width=\"12\" src=\"https://res.oafimg.cn/-/737b3b3ffed9b19e/logo.png\" alt=\"AtomGit Logo\" /> **[AtomGit](https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server)** - Official AtomGit server for integration with repository management, PRs, issues, branches, labels, and more.\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.auth0.com/website/website/favicons/auth0-favicon.svg\" alt=\"Auth0 Logo\" /> **[Auth0](https://github.com/auth0/auth0-mcp-server)** - MCP server for interacting with your Auth0 tenant, supporting creating and modifying actions, applications, forms, logs, resource servers, and more.\n- <img height=\"12\" width=\"12\" src=\"https://firstorder.ai/favicon_auth.ico\" alt=\"Authenticator App Logo\" /> **[Authenticator App · 2FA](https://github.com/firstorderai/authenticator_mcp)** - A secure MCP (Model Context Protocol) server that enables AI agents to interact with the Authenticator App.\n- <img height=\"12\" width=\"12\" src=\"https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico\" alt=\"AWS Logo\" /> **[AWS](https://github.com/awslabs/mcp)** -  Specialized MCP servers that bring AWS best practices directly to your development workflow.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://cdn-dynmedia-1.microsoft.com/is/content/microsoftcorp/acom_social_icon_azure\" alt=\"Microsoft Azure Logo\" /> **[Azure](https://github.com/microsoft/mcp/tree/main/servers/Azure.Mcp.Server)** - The Azure MCP Server gives MCP Clients access to key Azure services and tools like Azure Storage, Cosmos DB, the Azure CLI, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn-dynmedia-1.microsoft.com/is/content/microsoftcorp/1062064-Products-1.2-24x24\" alt=\"Microsoft Azure DevOps Logo\" /> **[Azure DevOps](https://github.com/microsoft/azure-devops-mcp)** - Interact with Azure DevOps services like repositories, work items, builds, releases, test plans, and code search.\n- <img height=\"12\" width=\"12\" src=\"https://application.backdocket.com/favicon.ico\" alt=\"Backdocket Logo\" /> **[Backdocket](https://ai.backdocket.com)** - Search, Retrieve, and Update your **[Backdocket](https://backdocket.com)** data. This currently includes Claims, Matters, Contacts, Tasks and Advanced Searches. To easily use the Remote Mcp Server utilize the following url: **[https://ai.backdocket.com/mcp]([https://backdocket.com](https://ai.backdocket.com/mcp))**\n- <img height=\"12\" width=\"12\" src=\"https://mapopen-website-wiki.cdn.bcebos.com/LOGO/lbsyunlogo_icon.ico\" alt=\"Baidu Map Logo\" /> **[Baidu Map](https://github.com/baidu-maps/mcp)** - [Baidu Map MCP Server](https://lbsyun.baidu.com/faq/api?title=mcpserver/base) provides tools for AI agents to interact with Baidu Maps APIs, enabling location-based services and geospatial data analysis.\n- <img height=\"12\" width=\"12\" src=\"https://www.bankless.com/favicon.ico\" alt=\"Bankless Logo\" /> **[Bankless Onchain](https://github.com/bankless/onchain-mcp)** - Query Onchain data, like ERC20 tokens, transaction history, smart contract state.\n- <img height=\"12\" width=\"12\" src=\"https://baserow.io/img/logo_baserow_square_large.png\" alt=\"Baserow Logo\" /> **[Baserow](https://gitlab.com/baserow/baserow/-/tree/develop/backend/src/baserow/api/mcp)** - Query data from Baserow self-hosted or SaaS databases using MCP integration.\n- <img height=\"12\" width=\"12\" src=\"https://bicscan.io/favicon.png\" alt=\"BICScan Logo\" /> **[BICScan](https://github.com/ahnlabio/bicscan-mcp)** - Risk score / asset holdings of EVM blockchain address (EOA, CA, ENS) and even domain names.\n- <img height=\"12\" width=\"12\" src=\"https://web-cdn.bitrise.io/favicon.ico\" alt=\"Bitrise Logo\" /> **[Bitrise](https://github.com/bitrise-io/bitrise-mcp)** - Chat with your builds, CI, and [more](https://bitrise.io/blog/post/chat-with-your-builds-ci-and-more-introducing-the-bitrise-mcp-server).\n- <img height=\"12\" width=\"12\" src=\"https://boikot.xyz/assets/favicon.svg\" alt=\"boikot Logo\" /> **[Boikot](https://github.com/boikot-xyz/boikot)** - Learn about the ethical and unethical actions of major companies with [boikot.xyz](https://boikot.xyz/).\n- <img height=\"12\" width=\"12\" src=\"https://boldsign.com/favicon.ico\" alt=\"BoldSign Logo\" /> **[BoldSign](https://github.com/boldsign/boldsign-mcp)** - Search, request, and manage e-signature contracts effortlessly with [BoldSign](https://boldsign.com/).\n- <img height=\"12\" width=\"12\" src=\"https://boost.space/favicon.ico\" alt=\"Boost.space Logo\" /> **[Boost.space](https://github.com/boostspace/boostspace-mcp-server)** - An MCP server integrating with [Boost.space](https://boost.space) for centralized, automated business data from 2000+ sources.\n- <img height=\"12\" width=\"12\" src=\"https://www.box.com/favicon.ico\" alt=\"Box Logo\" /> **[Box](https://github.com/box-community/mcp-server-box)** - Interact with the Intelligent Content Management platform through Box AI.\n- <img height=\"12\" width=\"12\" src=\"https://www.brightdata.com/favicon.ico\" alt=\"BrightData Logo\" /> **[BrightData](https://github.com/luminati-io/brightdata-mcp)** - Discover, extract, and interact with the web - one interface powering automated access across the public internet.\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://browserstack.wpenginepowered.com/wp-content/themes/browserstack/img/favicons/favicon.ico\" alt=\"BrowserStack Logo\" /> **[BrowserStack](https://github.com/browserstack/mcp-server)** - Access BrowserStack's [Test Platform](https://www.browserstack.com/test-platform) to debug, write and fix tests, do accessibility testing and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.google.com/s2/favicons?domain=buildkite.com&sz=24\" alt=\"Buildkite Logo\" /> **[Buildkite](https://github.com/buildkite/buildkite-mcp-server)** - Exposing Buildkite data (pipelines, builds, jobs, tests) to AI tooling and editors.\n- <img height=\"12\" width=\"12\" src=\"https://bldbl.dev/favico.png\" alt=\"Buildable Logo\" />**[Buildable](https://github.com/chunkydotdev/bldbl-mcp)** (TypeScript) - Official MCP server for Buildable AI-powered development platform. Enables AI assistants to manage tasks, track progress, get project context, and collaborate with humans on software projects.\n- <img height=\"12\" width=\"12\" src=\"https://builtwith.com/favicon.ico\" alt=\"BuiltWith Logo\" /> **[BuiltWith](https://github.com/builtwith/mcp)** - Identify the technology stack behind any website.\n- <img height=\"12\" width=\"12\" src=\"https://portswigger.net/favicon.ico\" alt=\"PortSwigger Logo\" /> **[Burp Suite](https://github.com/PortSwigger/mcp-server)** - MCP Server extension allowing AI clients to connect to [Burp Suite](https://portswigger.net)\n- <img src=\"https://app.cal.com/favicon.ico\" alt=\"Cal.com\" width=\"12\" height=\"12\"> **[Cal.com](https://www.npmjs.com/package/@calcom/cal-mcp?activeTab=readme)** - Connect to the Cal.com API to schedule and manage bookings and appointments.\n- <img height=\"12\" width=\"12\" src=\"https://campertunity.com/assets/icon/favicon.ico\" alt=\"Campertunity Logo\" /> **[Campertunity](https://github.com/campertunity/mcp-server)** - Search campgrounds around the world on campertunity, check availability, and provide booking links.\n- <img height=\"12\" width=\"12\" src=\"https://static.canva.com/static/images/favicon.ico\" alt=\"Canva logo\" /> **[Canva](https://www.canva.dev/docs/apps/mcp-server/)** — Provide AI - powered development assistance for [Canva](https://canva.com) apps and integrations.\n- <img height=\"12\" width=\"12\" src=\"https://carbonvoice.app/favicon.ico\" alt=\"Carbon Voice Logo\" /> **[Carbon Voice](https://github.com/PhononX/cv-mcp-server)** - MCP Server that connects AI Agents to [Carbon Voice](https://getcarbon.app). Create, manage, and interact with voice messages, conversations, direct messages, folders, voice memos, AI actions and more in [Carbon Voice](https://getcarbon.app).\n-  **[Cartesia](https://github.com/cartesia-ai/cartesia-mcp)** - Connect to the [Cartesia](https://cartesia.ai/) voice platform to perform text-to-speech, voice cloning etc.\n- <img height=\"12\" width=\"12\" src=\"https://www.cashfree.com/favicon.ico\" alt=\"Cashfree logo\" /> **[Cashfree](https://github.com/cashfree/cashfree-mcp)** - [Cashfree Payments](https://www.cashfree.com/) official MCP server.\n- **[CB Insights](https://github.com/cbinsights/cbi-mcp-server)** - Use the [CB Insights](https://www.cbinsights.com) MCP Server to connect to [ChatCBI](https://www.cbinsights.com/chatcbi/)\n- <img height=\"12\" width=\"12\" src=\"https://cleanupcrew.ai/favicon-light.png\" alt=\"Cleanup Crew logo\" /> **[Cleanup Crew](https://cleanupcrew.ai/install)** - Real-time human support service for non-technical founders using AI coding tools. When AI hits a wall, request instant human help directly from your IDE.\n- <img height=\"12\" width=\"12\" src=\"https://www.chargebee.com/static/resources/brand/favicon.png\" alt=\"Chargebee Logo\" /> **[Chargebee](https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol)** - MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com).\n- <img height=\"12\" width=\"12\" src=\"https://cheqd.io/wp-content/uploads/2023/03/logo_cheqd_favicon.png\" alt=\"Cheqd Logo\" /> **[Cheqd](https://github.com/cheqd/mcp-toolkit)** - Enable AI Agents to be trusted, verified, prevent fraud, protect your reputation, and more through [cheqd's](https://cheqd.io) Trust Registries and Credentials.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.chiki.studio/brand/logo.png\" alt=\"Chiki StudIO Logo\" /> **[Chiki StudIO](https://chiki.studio/galimybes/mcp/)** - Create your own configurable MCP servers purely via configuration (no code), with instructions, prompts, and tools support.\n- <img height=\"12\" width=\"12\" src=\"https://trychroma.com/_next/static/media/chroma-logo.ae2d6e4b.svg\" alt=\"Chroma Logo\" /> **[Chroma](https://github.com/chroma-core/chroma-mcp)** - Embeddings, vector search, document storage, and full-text search with the open-source AI application database\n- <img height=\"12\" width=\"12\" src=\"https://www.chronulus.com/favicon/chronulus-logo-blue-on-alpha-square-128x128.ico\" alt=\"Chronulus AI Logo\" /> **[Chronulus AI](https://github.com/ChronulusAI/chronulus-mcp)** - Predict anything with Chronulus AI forecasting and prediction agents.\n- <img height=\"12\" width=\"12\" src=\"https://circleci.com/favicon.ico\" alt=\"CircleCI Logo\" /> **[CircleCI](https://github.com/CircleCI-Public/mcp-server-circleci)** - Enable AI Agents to fix build failures from CircleCI.\n- <img height=\"12\" width=\"12\" src=\"https://assets.zilliz.com/Zilliz_Logo_Mark_White_20230223_041013_86057436cc.png\" alt=\"Claude Context Logo\" /> **[Claude Context](https://github.com/zilliztech/claude-context)** - Bring your codebase as context to Claude Code\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://brand.clicksend.com/_ipx/s_794x608/img/clicksend_icon_only.svg\" alt=\"ClickSend Logo\" /> **[ClickSend](https://github.com/ClickSend/clicksend-mcp-server/)** - This is the official ClickSend MCP Server developed by ClickSend team.\n- <img height=\"12\" width=\"12\" src=\"https://7463-tcb-advanced-a656fc-1257967285.tcb.qcloud.la/mcp/cloudbase-logo.svg\" alt=\"CloudBase Logo\" /> **[CloudBase](https://github.com/TencentCloudBase/CloudBase-AI-ToolKit)** - One-stop backend services for WeChat Mini-Programs and full-stack apps with serverless cloud functions and databases by [Tencent CloudBase](https://tcb.cloud.tencent.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.cloudbet.com/favicon.ico\" alt=\"Cloudbet Logo\" /> **[Cloudbet](https://github.com/cloudbet/sports-mcp-server)** - Structured sports and esports data via Cloudbet API: fixtures, live odds, stake limits, and markets.\n- <img height=\"12\" width=\"12\" src=\"https://www.cloudbees.com/favicon.ico\" alt=\"CloudBees Logo\" /> **[CloudBees](https://docs.cloudbees.com/docs/cloudbees-mcp/latest/)** - Enable AI access to your [CloudBees Unify](https://www.cloudbees.com/unify) environment.\n- <img src=\"http://www.google.com/s2/favicons?domain=www.cloudera.com\" alt=\"Cloudera Iceberg\" width=\"12\" height=\"12\"> **[Cloudera Iceberg](https://github.com/cloudera/iceberg-mcp-server)** - enabling AI on the [Open Data Lakehouse](https://www.cloudera.com/products/open-data-lakehouse.html).\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img src=\"https://cdn.prod.website-files.com/64d41aab8183c7c3324ddb29/67c0f1e272e51cf3c511c17c_Gyph.svg\" alt=\"Cloudinary\" width=\"12\" height=\"12\"> **[Cloudinary](https://github.com/cloudinary/mcp-servers)** - Exposes Cloudinary's media upload, transformation, AI analysis, management, optimization and delivery as tools usable by AI agents\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/Cloudsway-AI/smartsearch/refs/heads/main/plugin_cloudsway.ico\" alt=\"Cloudsway Logo\" /> **[Cloudsway SmartSearch](https://github.com/Cloudsway-AI/smartsearch)** - Web search MCP server powered by Cloudsway, supporting keyword search, language, and safety options. Returns structured JSON results.\n-  **[Codacy](https://github.com/codacy/codacy-mcp-server/)** - Interact with [Codacy](https://www.codacy.com) API to query code quality issues, vulnerabilities, and coverage insights about your code.\n-  **[CodeLogic](https://github.com/CodeLogicIncEngineering/codelogic-mcp-server)** - Interact with [CodeLogic](https://codelogic.com), a Software Intelligence platform that graphs complex code and data architecture dependencies, to boost AI accuracy and insight.\n- <img height=\"12\" width=\"12\" src=\"https://www.coingecko.com/favicon.ico\" alt=\"CoinGecko Logo\" /> **[CoinGecko](https://github.com/coingecko/coingecko-typescript/tree/main/packages/mcp-server)** - Official [CoinGecko API](https://www.coingecko.com/en/api) MCP Server for Crypto Price & Market Data, across 200+ Blockchain Networks and 8M+ Tokens.\n- <img height=\"12\" width=\"12\" src=\"https://www.comet.com/favicon.ico\" alt=\"Comet Logo\" /> **[Comet Opik](https://github.com/comet-ml/opik-mcp)** - Query and analyze your [Opik](https://github.com/comet-ml/opik) logs, traces, prompts and all other telemetry data from your LLMs in natural language.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6572bd8c27ee5db3eb91f4b3/6572bd8d27ee5db3eb91f55e_favicon-dashflow-webflow-template.svg\" alt=\"OSS Conductor Logo\" /> <img height=\"12\" width=\"12\" src=\"https://orkes.io/icons/icon-48x48.png\" alt=\"Orkes Conductor Logo\" />**[Conductor](https://github.com/conductor-oss/conductor-mcp)** - Interact with Conductor (OSS and Orkes) REST APIs.\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\" /> **[Composio](https://docs.composio.dev/docs/mcp-overview#-getting-started)** – Use [Composio](https://composio.dev) to connect 100+ tools. Zero setup. Auth built-in. Made for agents, works for humans.\n- <img height=\"12\" width=\"12\" src=\"https://www.confluent.io/favicon.ico\" alt=\"Confluent Logo\" /> **[Confluent](https://github.com/confluentinc/mcp-confluent)** - Interact with Confluent Kafka and Confluent Cloud REST APIs.\n- <img src=\"https://contrastsecurity.com/favicon.ico\" alt=\"Contrast Security\" width=\"12\" height=\"12\"> **[Contrast Security](https://github.com/Contrast-Security-OSS/mcp-contrast)** - Brings Contrast's vulnerability and SCA data into your coding agent to quickly remediate vulnerabilities.\n- <img height=\"12\" width=\"12\" src=\"https://www.convex.dev/favicon.ico\" alt=\"Convex Logo\" /> **[Convex](https://stack.convex.dev/convex-mcp-server)** - Introspect and query your apps deployed to Convex.\n- <img height=\"12\" width=\"12\" src=\"https://www.cortex.io/favicon.ico\" alt=\"Cortex Logo\" /> **[Cortex](https://github.com/cortexapps/cortex-mcp)** - Official MCP server for [Cortex](https://www.cortex.io).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/605755?s=200&v=4\" alt=\"Couchbase Logo\" /> **[Couchbase](https://github.com/Couchbase-Ecosystem/mcp-server-couchbase)** - Interact with the data stored in Couchbase clusters.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/user-attachments/assets/b256f9fa-2020-4b37-9644-c77229ef182b\" alt=\"CRIC 克而瑞 LOGO\"> **[CRIC Wuye AI](https://github.com/wuye-ai/mcp-server-wuye-ai)** - Interact with capabilities of the CRIC Wuye AI platform, an intelligent assistant specifically for the property management industry.\n- <img height=\"12\" width=\"12\" src=\"https://www.crowdstrike.com/etc.clientlibs/crowdstrike/clientlibs/crowdstrike-common/resources/favicon.ico\" alt=\"CrowdStrike Logo\" /> **[CrowdStrike Falcon](https://github.com/CrowdStrike/falcon-mcp)** - Connects AI agents with the CrowdStrike Falcon platform for intelligent security analysis, providing programmatic access to detections, incidents, behaviors, threat intelligence, hosts, vulnerabilities, and identity protection capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58433296\" alt=\"CTERA Edge Filer\" /> **[CTERA Edge Filer](https://github.com/ctera/mcp-ctera-edge)** - CTERA Edge Filer delivers intelligent edge caching and multiprotocol file access, enabling fast, secure access to files across core and remote sites.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58433296\" alt=\"CTERA Portal\" /> **[CTERA Portal](https://github.com/ctera/mcp-ctera-core)** - CTERA Portal is a multi-tenant, multi-cloud platform that delivers a global namespace and unified management across petabytes of distributed content.\n- <img height=\"12\" width=\"12\" src=\"https://app.cycode.com/img/favicon.ico\" alt=\"Cycode Logo\" /> **[Cycode](https://github.com/cycodehq/cycode-cli#mcp-command-experiment)** - Boost security in your dev lifecycle via SAST, SCA, Secrets & IaC scanning with [Cycode](https://cycode.com/).\n- <img height=\"12\" width=\"12\" src=\"http://app.itsdart.com/static/img/favicon.png\" alt=\"Dart Logo\" /> **[Dart](https://github.com/its-dart/dart-mcp-server)** - Interact with task, doc, and project data in [Dart](https://itsdart.com), an AI-native project management tool\n- <img height=\"12\" width=\"12\" src=\"https://cdn.bfldr.com/9AYANS2F/at/k8bgnnxhb4bggjk88r4x9snf/databricks-symbol-color.svg?auto=webp&format=png&width=12&height=13\" alt=\"Databricks Logo\" /> **[Databricks](https://docs.databricks.com/aws/en/generative-ai/mcp/)** - Connect to data, AI tools & agents, and the rest of the Databricks platform using turnkey managed MCP servers. Or, host your own custom MCP servers within the Databricks security and data governance boundary.\n- <img height=\"12\" width=\"12\" src=\"https://datahub.com/wp-content/uploads/2025/04/cropped-Artboard-1-32x32.png\" alt=\"DataHub Logo\" /> **[DataHub](https://github.com/acryldata/mcp-server-datahub)** - Search your data assets, traverse data lineage, write SQL queries, and more using [DataHub](https://datahub.com/) metadata.\n- <img height=\"12\" width=\"12\" src=\"https://www.daytona.io/brand/social-daytona-icon.png\" alt=\"Daytona Logo\" /> **[Daytona](https://github.com/daytonaio/daytona/tree/main/apps/cli/mcp)** - Fast and secure execution of your AI generated code with [Daytona](https://daytona.io) sandboxes\n- <img height=\"12\" width=\"12\" src=\"https://debugg.ai/favicon.svg\" alt=\"Debugg AI Logo\" /> **[Debugg.AI](https://github.com/debugg-ai/debugg-ai-mcp)** - Zero-Config, Fully AI-Managed End-to-End Testing for any code gen platform via [Debugg.AI](https://debugg.ai) remote browsing test agents.\n- <img height=\"12\" width=\"12\" src=\"https://www.deepl.com/img/logo/deepl-logo-blue.svg\" alt=\"DeepL Logo\" /> **[DeepL](https://github.com/DeepLcom/deepl-mcp-server)** - Translate or rewrite text with [DeepL](https://deepl.com)'s very own AI models using [the DeepL API](https://developers.deepl.com/docs)\n- <img height=\"12\" width=\"12\" src=\"https://defang.io/_next/static/media/defang-icon-dark-colour.25f95b77.svg\" alt=\"Defang Logo\" /> **[Defang](https://github.com/DefangLabs/defang/blob/main/src/pkg/mcp/README.md)** - Deploy your project to the cloud seamlessly with the [Defang](https://www.defang.io) platform without leaving your integrated development environment\n- <img height=\"12\" width=\"12\" src=\"https://detailer.ginylil.com/favicon.ico\" alt=\"Detailer Logo\" /> **[Detailer](https://detailer.ginylil.com/)** – Instantly generate rich, AI-powered documentation for your GitHub repositories. Designed for AI agents to gain deep project context before taking action.\n- <img height=\"12\" width=\"12\" src=\"https://devcycle.com/_next/image?url=%2Fassets%2Fbrand%2FColor-logo-mark.png&w=384&q=75\" alt=\"DevCycle Logo\" /> **[DevCycle](https://docs.devcycle.com/cli-mcp/mcp-getting-started)** - Create and monitor feature flags using natural language in your AI coding assistant.\n- <img height=\"12\" width=\"12\" src=\"https://www.devhub.com/img/upload/favicon-196x196-dh.png\" alt=\"DevHub Logo\" /> **[DevHub](https://github.com/devhub/devhub-cms-mcp)** - Manage and utilize website content within the [DevHub](https://www.devhub.com) CMS platform\n- <img height=\"12\" width=\"12\" src=\"https://devrev.ai/favicon.ico\" alt=\"DevRev Logo\" /> **[DevRev](https://github.com/devrev/mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. Sources listed [here](https://devrev.ai/docs/import#available-sources).\n- <img height=\"12\" width=\"12\" src=\"https://dexpaprika.com/favicon.ico\" alt=\"DexPaprika Logo\" /> **[DexPaprika (CoinPaprika)](https://github.com/coinpaprika/dexpaprika-mcp)** - Access real-time DEX data, liquidity pools, token information, and trading analytics across multiple blockchain networks with [DexPaprika](https://dexpaprika.com) by CoinPaprika.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/dolthub/dolt/raw/main/images/Dolt-Logo@3x.svg\" alt=\"Dolt Logo\" /> **[Dolt](https://github.com/dolthub/dolt-mcp)** - The official MCP server for version-controlled [Dolt](https://doltdb.com/) databases.\n- <img height=\"12\" width=\"12\" src=\"https://eu.getdot.ai/favicon.ico\" alt=\"GetDot.ai Logo\" /> **[Dot (GetDot.ai)](https://docs.getdot.ai/dot/integrations/mcp)** - Fetch, analyze or visualize data from your favorite database or data warehouse (Snowflake, BigQuery, Redshift, Databricks, Clickhouse, ...) with [Dot](https://getdot.ai), your AI Data Analyst. This remote MCP server is a one-click integration for user that have setup Dot.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/65421071?s=200&v=4\" alt=\"Drata Logo\" /> **[Drata](https://drata.com/mcp)** - Get hands-on with our experimental MCP server—bringing real-time compliance intelligence into your AI workflows.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/204530939?s=200&v=4\" alt=\"Dumpling AI Logo\" /> **[Dumpling AI](https://github.com/Dumpling-AI/mcp-server-dumplingai)** - Access data, web scraping, and document conversion APIs by [Dumpling AI](https://www.dumplingai.com/)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58178984\" alt=\"Dynatrace Logo\" /> **[Dynatrace](https://github.com/dynatrace-oss/dynatrace-mcp)** - Manage and interact with the [Dynatrace Platform ](https://www.dynatrace.com/platform) for real-time observability and monitoring.\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://www.edgee.cloud/favicon.ico\" alt=\"Edgee Logo\" /> **[Edgee](https://github.com/edgee-cloud/mcp-server-edgee)** - Deploy and manage [Edgee](https://www.edgee.cloud) components and projects\n- <img height=\"12\" width=\"12\" src=\"https://static.edubase.net/media/brand/favicon/favicon-32x32.png\" alt=\"EduBase Logo\" /> **[EduBase](https://github.com/EduBase/MCP)** - Interact with [EduBase](https://www.edubase.net), a comprehensive e-learning platform with advanced quizzing, exam management, and content organization capabilities\n- <img height=\"12\" width=\"12\" src=\"https://www.elastic.co/favicon.ico\" alt=\"Elasticsearch Logo\" /> **[Elasticsearch](https://github.com/elastic/mcp-server-elasticsearch)** - Query your data in [Elasticsearch](https://www.elastic.co/elasticsearch)\n- <img height=\"12\" width=\"12\" src=\"https://github.com/EmberAGI/arbitrum-vibekit/blob/main/img/Ember%20Black.png?raw=true\" alt=\"Ember AI Logo\" /> **[Ember AI](https://docs.emberai.xyz/)** - A unified MCP server that enables AI agents to execute cross-chain DeFi strategies.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/656eaf5c6da3527caf362363/656ecc07555afac40df4c40e_Facicon.png\" alt=\"Endor Labs Logo\" /> **[Endor Labs](https://docs.endorlabs.com/deployment/ide/mcp/)** - Find and fix security risks in you code. Integrate [Endor Labs](https://endorlabs.com) to scan and secure your code from vulnerabilities and secret leaks.\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://rainmaker.espressif.com/favicon.ico\" alt=\"ESP RainMaker Logo\" /> **[ESP RainMaker](https://github.com/espressif/esp-rainmaker-mcp)** - Official Espressif MCP Server to Control and Manage ESP RainMaker Devices.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://www.explorium.ai/wp-content/uploads/2025/04/Favicon-Purple-512x512-1-150x150.png\" alt=\"Explorium Logo\" /> **[Explorium](https://github.com/explorium-ai/mcp-explorium)** - B2B data and infrastructure for AI SDR & GTM Agents [Explorium](https://www.explorium.ai)\n- **[FalkorDB](https://github.com/FalkorDB/FalkorDB-MCPServer)** - FalkorDB graph database server get schema and read/write-cypher [FalkorDB](https://www.falkordb.com)\n- <img height=\"12\" width=\"12\" src=\"https://fetchserp.com/icon.png\" alt=\"fetchSERP Logo\" /> **[fetchSERP](https://github.com/fetchSERP/fetchserp-mcp-server-node)** - All-in-One SEO & Web Intelligence Toolkit API [fetchSERP](https://www.fetchserp.com/)\n- <img height=\"12\" width=\"12\" src=\"https://fewsats.com/favicon.svg\" alt=\"Fewsats Logo\" /> **[Fewsats](https://github.com/Fewsats/fewsats-mcp)** - Enable AI Agents to purchase anything in a secure way using [Fewsats](https://fewsats.com)\n- <img height=\"12\" width=\"12\" src=\"https://fibery.io/favicon.svg\" alt=\"Fibery Logo\" /> **[Fibery](https://github.com/Fibery-inc/fibery-mcp-server)** - Perform queries and entity operations in your [Fibery](https://fibery.io) workspace.\n- <img height=\"12\" width=\"12\" src=\"https://financialdatasets.ai/favicon.ico\" alt=\"Financial Datasets Logo\" /> **[Financial Datasets](https://github.com/financial-datasets/mcp-server)** - Stock market API made for AI agents\n- <img height=\"12\" width=\"12\" src=\"https://www.gstatic.com/devrel-devsite/prod/v7aeef7f1393bb1d75a4489145c511cdd5aeaa8e13ad0a83ec1b5b03612e66330/firebase/images/favicon.png\" alt=\"Firebase Logo\" /> **[Firebase](https://github.com/firebase/firebase-tools/blob/master/src/mcp)** - Firebase's experimental [MCP Server](https://firebase.google.com/docs/cli/mcp-server) to power your AI Tools\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/firecrawl/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/100200663?s=200&v=4\" alt=\"Firefly Logo\" /> **[Firefly](https://github.com/gofireflyio/firefly-mcp)** - Integrates, discovers, manages, and codifies cloud resources with [Firefly](https://firefly.ai).\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://fixparser.dev/favicon.ico\" alt=\"FIXParser Logo\" /> **[FIXParser](https://gitlab.com/logotype/fixparser/-/tree/main/packages/fixparser-plugin-mcp)** - A modern FIX Protocol engine for AI-powered trading agents\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/52471808\" alt=\"Fluid Attacks Logo\" /> **[Fluid Attacks](https://github.com/fluidattacks/mcp)** - Interact with the [Fluid Attacks](https://fluidattacks.com/) API, enabling vulnerability management, organization insights, and GraphQL query execution.\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://flutterwave.com/favicon.ico\" alt=\"Flutterwave Logo\" /> **[Flutterwave](https://github.com/bajoski34/mcp-flutterwave/tree/main)** - Interact with Flutterwave payment solutions API, to manage transactions, payment links and more.\n- <img height=\"12\" width=\"12\" src=\"https://app.gibsonai.com/favicon.ico\" alt=\"GibsonAI Logo\" /> **[GibsonAI](https://github.com/GibsonAI/mcp)** - AI-Powered Cloud databases: Build, migrate, and deploy database instances with AI\n- <img height=\"12\" width=\"12\" src=\"https://gcore.com/assets/favicon/favicon-16x16.png\" alt=\"Gcore Logo\" /> **[Gcore](https://github.com/G-Core/gcore-mcp-server)** - Interact with Gcore platform services via LLM assistants, providing unified access to CDN, GPU Cloud & AI Inference, Video Streaming, WAAP, and cloud resources including instances and networks.\n- <img height=\"12\" width=\"12\" src=\"https://gitea.com/assets/img/favicon.svg\" alt=\"Gitea Logo\" /> **[Gitea](https://gitea.com/gitea/gitea-mcp)** - Interact with Gitea instances with MCP.\n- <img height=\"12\" width=\"12\" src=\"https://gitee.com/favicon.ico\" alt=\"Gitee Logo\" /> **[Gitee](https://github.com/oschina/mcp-gitee)** - Gitee API integration, repository, issue, and pull request management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/5ee25cbe47310017adf964da/6323888a9b9f4e22a7bc766b_GG%20Favicon.svg\" alt=\"GitGuardian Logo\" /> **[GitGuardian](https://github.com/GitGuardian/gg-mcp)** - GitGuardian official MCP server - Scan projects using GitGuardian's industry-leading API, which features over 500 secret detectors to prevent credential leaks before they reach public repositories. Resolve security incidents directly with rich contextual data for rapid, automated remediation.\n- <img height=\"12\" width=\"12\" src=\"https://gitlab.com/favicon.ico\" alt=\"GitLab Logo\" /> **[GitLab](https://docs.gitlab.com/user/gitlab_duo/model_context_protocol/mcp_server/)** - GitLab's official MCP server enabling AI tools to securely access GitLab project data, manage issues, and perform repository operations via OAuth 2.0.\n- <img height=\"12\" width=\"12\" src=\"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png\" alt=\"GitHub Logo\" /> **[GitHub](https://github.com/github/github-mcp-server)** - GitHub's official MCP Server.\n- <img height=\"12\" width=\"12\" src=\"https://www.gitkraken.com/wp-content/uploads/2021/03/android-chrome-144x144-1.png\" alt=\"GitKraken Logo\" /> **[GitKraken](https://github.com/gitkraken/gk-cli?tab=readme-ov-file#mcp-server)** - A CLI for interacting with GitKraken APIs. Includes an MCP server via `gk mcp` that not only wraps GitKraken APIs, but also Jira, GitHub, GitLab, and more.\n- <img height=\"12\" width=\"12\" src=\"https://app.glean.com/images/favicon3-196x196.png\" alt=\"Glean Logo\" /> **[Glean](https://github.com/gleanwork/mcp-server)** - Enterprise search and chat using Glean's API.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.jsdelivr.net/gh/jsdelivr/globalping-media@refs/heads/master/icons/android-chrome-192x192.png\" alt=\"Globalping Logo\" /> **[Globalping](https://github.com/jsdelivr/globalping-mcp-server)** - Access a network of thousands of probes to run network commands like ping, traceroute, mtr, http and DNS resolve.\n- <img height=\"12\" width=\"12\" src=\"https://gnucleus.ai/favicon.ico\" alt=\"gNucleus Logo\" /> **[gNucleus Text-To-CAD](https://github.com/gNucleus/text-to-cad-mcp)** - Generate CAD parts and assemblies from text using gNucleus AI models.\n- <img height=\"12\" width=\"12\" src=\"https://www.gstatic.com/cgc/favicon.ico\" alt=\"Google Cloud Logo\" /> **[Google Cloud Run](https://github.com/GoogleCloudPlatform/cloud-run-mcp)** - Deploy code to Google Cloud Run\n- <img height=\"12\" width=\"12\" src=\"https://api.gologin.com/favicon.ico\" alt=\"GoLogin Logo\" /> **[GoLogin MCP server](https://github.com/gologinapp/gologin-mcp)** - Manage your GoLogin browser profiles and automation directly through AI conversations!\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/3717923?s=200&v=4\" alt=\"Google Maps Platform Logo\" /> **[Google Maps Platform Code Assist](https://github.com/googlemaps/platform-ai/tree/main/packages/code-assist)** - Ground agents on fresh, official documentation and code samples for optimal geo-related guidance and code..\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6605a2979ff17b2cd1939cd4/6605a460de47e7596ed84f06_icon256.png\" alt=\"gotoHuman Logo\" /> **[gotoHuman](https://github.com/gotohuman/gotohuman-mcp-server)** - Human-in-the-loop platform - Allow AI agents and automations to send requests for approval to your [gotoHuman](https://www.gotohuman.com) inbox.\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- <img height=\"12\" width=\"12\" src=\"https://grafbase.com/favicon.ico\" alt=\"Grafbase Logo\" /> **[Grafbase](https://github.com/grafbase/grafbase/tree/main/crates/mcp)** - Turn your GraphQL API into an efficient MCP server with schema intelligence in a single command.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/5f5e90c17e7c9eb95c7acb17/61d3457a519242f2c75c725c_favicon.png\" alt=\"Grain Logo\" /> **[Grain](https://grain.com/release-note/06-18-2025)** - Access your Grain meetings notes & transcripts directly in claude and generate reports with native Claude Prompts.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/KCOWBYLKunDff1Dr452y6EfjiU.png\" alt=\"Graphlit Logo\" /> **[Graphlit](https://github.com/graphlit/graphlit-mcp-server)** - Ingest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a searchable [Graphlit](https://www.graphlit.com) project.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/64a5291e7847ac04fe1531ad/64a529af2f1fc7debc26f2a6_favicon-32x32.avif\" alt=\"Gremlin favicon\" /> **[Gremlin](https://github.com/gremlin/mcp)** - The official [Gremlin](https://www.gremlin.com) MCP server. Analyze your reliability posture, review recent tests and chaos engineering experiments, and create detailed reports.\n- <img height=\"12\" width=\"12\" src=\"https://greptime.com/favicon.ico\" alt=\"Greptime Logo\" /> **[GreptimeDB](https://github.com/GreptimeTeam/greptimedb-mcp-server)** - Provides AI assistants with a secure and structured way to explore and analyze data in [GreptimeDB](https://github.com/GreptimeTeam/greptimedb).\n- <img height=\"12\" width=\"12\" src=\"https://growi.org/assets/images/favicon.ico\" alt=\"GROWI Logo\" /> **[GROWI](https://github.com/growilabs/growi-mcp-server)** - Official MCP Server to integrate with GROWI APIs.\n- <img height=\"12\" width=\"12\" src=\"https://gyazo.com/favicon.ico\" alt=\"Gyazo Logo\" /> **[Gyazo](https://github.com/nota/gyazo-mcp-server)** - Search, fetch, upload, and interact with Gyazo images, including metadata and OCR data.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6374050260446c42f94dc90f/63d828be3e13d32ee6973f35_favicon-32x32.png\" alt=\"Harper Logo\" /> **[Harper](https://github.com/HarperDB/mcp-server)** - An MCP server providing an interface for MCP clients to access data within [Harper](https://www.harpersystems.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://www.herokucdn.com/favicons/favicon.ico\" alt=\"Heroku Logo\" /> **[Heroku](https://github.com/heroku/heroku-mcp-server)** - Interact with the Heroku Platform through LLM-driven tools for managing apps, add-ons, dynos, databases, and more.\n- <img height=\"12\" width=\"12\" src=\"https://heyoncall.com/favicon.ico\" alt=\"HeyOnCall Logo\" /> **[HeyOnCall](https://heyoncall.com/blog/mcp-server-for-paging-a-human)** - Page a human, sending critical or non-critical alerts to the free [HeyOnCall](https://heyoncall.com/) iOS or Android apps.\n- <img height=\"12\" width=\"12\" src=\"https://www.hiveflow.ai/favicon.ico\" alt=\"Hiveflow Logo\" /> **[Hiveflow](https://github.com/hiveflowai/hiveflow-mcp-server)** - Create, manage, and execute agentic AI workflows directly from your assistant.\n- <img height=\"12\" width=\"12\" src=\"https://hiveintelligence.xyz/favicon.ico\" alt=\"Hive Intelligence Logo\" /> **[Hive Intelligence](https://github.com/hive-intel/hive-crypto-mcp)** - Ultimate cryptocurrency MCP for AI assistants with unified access to crypto, DeFi, and Web3 analytics\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN01d9qrry1i6lTNa2BRa_!!6000000004364-2-tps-218-200.png\" alt=\"Hologres Logo\" /> **[Hologres](https://github.com/aliyun/alibabacloud-hologres-mcp-server)** - Connect to a [Hologres](https://www.alibabacloud.com/en/product/hologres) instance, get table metadata, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://brew.sh/assets/img/favicon.ico\" alt=\"Homebrew Logo\" /> **[Homebrew](https://docs.brew.sh/MCP-Server)** Allows [Homebrew](https://brew.sh) users to run Homebrew commands locally.\n- <img height=\"12\" width=\"12\" src=\"https://www.honeycomb.io/favicon.ico\" alt=\"Honeycomb Logo\" /> **[Honeycomb](https://github.com/honeycombio/honeycomb-mcp)** Allows [Honeycomb](https://www.honeycomb.io/) Enterprise customers to query and analyze their data, alerts, dashboards, and more; and cross-reference production behavior with the codebase.\n- <img height=\"12\" width=\"12\" src=\"https://static.hsinfrastatic.net/StyleGuideUI/static-3.438/img/sprocket/favicon-32x32.png\" alt=\"HubSpot Logo\" /> **[HubSpot](https://developer.hubspot.com/mcp)** - Connect, manage, and interact with [HubSpot](https://www.hubspot.com/) CRM data\n- <img height=\"12\" width=\"12\" src=\"https://huggingface.co/datasets/huggingface/brand-assets/resolve/main/hf-logo.svg\" alt=\"HuggingFace Logo\" /> **[Hugging Face](https://huggingface.co/settings/mcp)** - Connect to the Hugging Face Hub APIs programmatically: semantic search for spaces and papers, exploration of datasets and models, and access to all compatible MCP Gradio tool spaces!\n- <img height=\"12\" width=\"12\" src=\"https://hunter.io/favicon.ico\" alt=\"Hunter Logo\" /> **[Hunter](https://github.com/hunter-io/hunter-mcp)** - Interact with the [Hunter API](https://hunter.io) to get B2B data using natural language.\n- <img height=\"12\" width=\"12\" src=\"https://app.hyperbolic.xyz/hyperbolic-logo.svg\" alt=\"Hyperbolic Labs Logo\" /> **[Hyperbolic](https://github.com/HyperbolicLabs/hyperbolic-mcp)** - Interact with Hyperbolic's GPU cloud, enabling agents and LLMs to view and rent available GPUs, SSH into them, and run GPU-powered workloads for you.\n- <img height=\"12\" width=\"12\" src=\"https://hyperbrowser-assets-bucket.s3.us-east-1.amazonaws.com/Hyperbrowser-logo.png\" alt=\"Hyperbrowsers23 Logo\" /> **[Hyperbrowser](https://github.com/hyperbrowserai/mcp)** - [Hyperbrowser](https://www.hyperbrowser.ai/) is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation.\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://www.getinboxzero.com/icon.png\" alt=\"Inbox Zero Logo\" /> **[Inbox Zero](https://github.com/elie222/inbox-zero/tree/main/apps/mcp-server)** - AI personal assistant for email [Inbox Zero](https://www.getinboxzero.com)\n- <img height=\"12\" width=\"12\" src=\"https://www.inflectra.com/Favicon.ico\" alt=\"Inflectra Logo\" /> **[Inflectra Spira](https://github.com/Inflectra/mcp-server-spira)** - Connect to your instance of the SpiraTest, SpiraTeam or SpiraPlan application lifecycle management platform by [Inflectra](https://www.inflectra.com)\n-  **[Inkeep](https://github.com/inkeep/mcp-server-python)** - RAG Search over your content powered by [Inkeep](https://inkeep.com)\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers.\n- <img height=\"12\" width=\"12\" src=\"https://www.ip2location.io/favicon.ico\" alt=\"IP2Location.io Icon\" /> **[IP2Location.io](https://github.com/ip2location/mcp-ip2location-io)** - Interact with IP2Location.io API to retrieve the geolocation information for an IP address.\n- <img height=\"12\" width=\"12\" src=\"https://static.iplocate.io/custom/logo-square-rounded.png\" alt=\"IPLocate Icon\" /> **[IPLocate](https://github.com/iplocate/mcp-server-iplocate)** - Look up IP address geolocation, network information, detect proxies and VPNs, and find abuse contact details using [IPLocate.io](https://www.iplocate.io)\n- <img height=\"12\" width=\"12\" src=\"https://jellyfish.co/favicon.ico\" alt=\"Jellyfish Logo\" /> **[Jellyfish](https://github.com/Jellyfish-AI/jellyfish-mcp)** – Give your AI agent context about your team's software engineering allocations and workflow via the [Jellyfish](https://jellyfish.co) platform\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://www.jetbrains.com/help/idea/mcp-server.html)** – Work on your code with JetBrains IDEs: IntelliJ IDEA, PhpStorm, etc.\n- <img height=\"12\" width=\"12\" src=\"https://speedmedia.jfrog.com/08612fe1-9391-4cf3-ac1a-6dd49c36b276/media.jfrog.com/wp-content/uploads/2019/04/20131046/Jfrog16-1.png\" alt=\"JFrog Logo\" /> **[JFrog](https://github.com/jfrog/mcp-jfrog)** - Model Context Protocol (MCP) Server for the [JFrog](https://jfrog.com/) Platform API, enabling repository management, build tracking, release lifecycle management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://jenkins.io/images/logos/jenkins/jenkins.svg\" alt=\"Jenkins Logo\" /> **[Jenkins](https://plugins.jenkins.io/mcp-server/)** - Official Jenkins MCP Server plugin enabling AI assistants to manage builds, check job statuses, retrieve logs, and integrate with CI/CD pipelines through standardized MCP interface.\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://connection.keboola.com/favicon.ico\" alt=\"Keboola Logo\" /> **[Keboola](https://github.com/keboola/keboola-mcp-server)** - Build robust data workflows, integrations, and analytics on a single intuitive platform.\n- <img height=\"12\" width=\"12\" src=\"https://mcp.onkernel.com/favicon.svg\" alt=\"Kernel Logo\" /> **[Kernel](https://github.com/onkernel/kernel-mcp-server)** – Access Kernel's cloud‑based browsers via MCP.\n- <img height=\"12\" width=\"12\" src=\"https://keywordseverywhere.com/favicon.ico\" alt=\"Keywords Everywhere Logo\" /> **[Keywords Everywhere](https://api.keywordseverywhere.com/docs/#/mcp_integration)** – Access SEO data through the official Keywords Everywhere API MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://keywordspeopleuse.com/favicon.ico\" alt=\"KeywordsPeopleUse Logo\" /> **[KeywordsPeopleUse.com](https://github.com/data-skunks/kpu-mcp)** - Find questions people ask online with [KeywordsPeopleUse](https://keywordspeopleuse.com).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/4815054\" alt=\"Kintone Logo\" /> **[Kintone](https://github.com/kintone/mcp-server)** - The official local MCP server for [Kintone](https://kintone.com).\n- <img height=\"12\" width=\"12\" src=\"https://kirokuforms.com/favicon.svg\" alt=\"KirokuForms Logo\" /> **[KirokuForms](https://www.kirokuforms.com/ai/mcp)** - [KirokuForms](https://www.kirokuforms.com) is an AI-powered form platform combining professional form building with Human-in-the-Loop (HITL) capabilities. Create custom forms, collect submissions, and integrate human oversight into AI workflows through [MCP integration](https://kirokuforms.com/ai/mcp).\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" alt=\"Klavis Logo\" /> **[Klavis ReportGen](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/report_generation)** - Create professional reports from a simple user query.\n- <img height=\"12\" width=\"12\" src=\"https://www.klaviyo.com/media/Favicon-16by16.png\" alt=\"Klaviyo Logo\" /> **[Klaviyo](https://developers.klaviyo.com/en/docs/klaviyo_mcp_server)** - Interact with your [Klaviyo](https://www.klaviyo.com/) marketing data.\n- <img height=\"12\" width=\"12\" src=\"https://platform.kluster.ai/logo-light.svg\" alt=\"kluster.ai Logo\" /> **[kluster.ai](https://docs.kluster.ai/get-started/mcp/overview/)** - kluster.ai provides MCP servers that bring AI services directly into your development workflow, including guardrails like hallucination detection.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6347ea26001f0287c592ff91/649953ef7a9ffe1f3e492b5a_Knit%20Logo.svg\" alt=\"Knit Logo\" /> **[Knit MCP Server](https://developers.getknit.dev/docs/knit-mcp-server-getting-started)** - Production-ready remote MCP servers that enable you to connect with 10000+ tools across CRM, HRIS, Payroll, Accounting, ERP, Calendar, Expense Management, and Chat categories.\n- <img height=\"12\" width=\"12\" src=\"https://knock.app/favicon/favicon-dark.svg\" alt=\"Knock Logo\" /> **[Knock MCP Server](https://github.com/knocklabs/agent-toolkit#model-context-protocol-mcp)** - Send product and customer messaging across email, in-app, push, SMS, Slack, MS Teams.\n- <img height=\"12\" width=\"12\" src=\"https://kumo-sdk-public.s3.us-west-2.amazonaws.com/rfm-colabs/kumo_ai_logo.jpeg\" alt=\"Kumo Logo\" /> **[Kumo](https://github.com/kumo-ai/kumo-rfm-mcp)** - MCP Server to interact with KumoRFM, a foundation model for generating predictions from your relational data.\n- <img height=\"12\" width=\"12\" src=\"https://www.kurrent.io/favicon.ico\" alt=\"Kurrent Logo\" /> **[KurrentDB](https://github.com/kurrent-io/mcp-server)** - This is a simple MCP server to help you explore data and prototype projections faster on top of KurrentDB.\n- <img height=\"12\" width=\"12\" src=\"https://kuzudb.com/favicon.ico\" alt=\"Kuzu Logo\" /> **[Kuzu](https://github.com/kuzudb/kuzu-mcp-server)** - This server enables LLMs to inspect database schemas and execute queries on the provided Kuzu graph database. See [blog](https://blog.kuzudb.com/post/2025-03-23-kuzu-mcp-server/)) for a debugging use case.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/187484914\" alt=\"KWDB Logo\" /> **[KWDB](https://github.com/KWDB/kwdb-mcp-server)** - Reading, writing, querying, modifying data, and performing DDL operations with data in your KWDB Database.\n- <img height=\"12\" width=\"12\" src=\"https://labelstud.io/favicon-16x16.png\" alt=\"Label Studio Logo\" /> **[Label Studio](https://github.com/HumanSignal/label-studio-mcp-server)** - Open Source data labeling platform.\n- <img src=\"https://avatars.githubusercontent.com/u/188884511?s=48&v=4\" alt=\"Lambda Capture\" width=\"12\" height=\"12\"> **[Lambda Capture](https://github.com/lambda-capture/mcp-server)** - Macroeconomic Forecasts & Semantic Context from Federal Reserve, Bank of England, ECB.\n- <img src=\"https://www.lambdatest.com/resources/images/header/professional-service.svg\" alt=\"LambdaTest MCP server\" width=\"12\" height=\"12\"> **[LambdaTest](https://www.lambdatest.com/mcp)** - LambdaTest MCP Servers ranging from Accessibility, SmartUI, Automation, and HyperExecute allows you to connect AI assistants with your testing workflow, streamlining setup, analyzing failures, and generating fixes to speed up testing and improve efficiency.\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://laratranslate.com/favicon.ico\" alt=\"Lara Translate Logo\" /> **[Lara Translate](https://github.com/translated/lara-mcp)** - MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.\n- <img height=\"12\" width=\"12\" src=\"https://last9.io/favicon.png\" alt=\"Last9 Logo\" /> **[Last9](https://github.com/last9/last9-mcp-server)** - Seamlessly bring real-time production context—logs, metrics, and traces—into your local environment to auto-fix code faster.\n- <img height=\"12\" width=\"12\" src=\"https://www.launchdarkly.com/favicon.ico\" alt=\"LaunchDarkly Logo\" /> **[LaunchDarkly](https://github.com/launchdarkly/mcp-server)** - LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely.\n- <img height=\"12\" width=\"12\" src=\"https://www.line.me/favicon-32x32.png\" alt=\"LINE Logo\" /> **[LINE](https://github.com/line/line-bot-mcp-server)** - Integrates the LINE Messaging API to connect an AI Agent to the LINE Official Account.\n- <img height=\"12\" width=\"12\" src=\"https://linear.app/favicon.ico\" alt=\"Linear Logo\" /> **[Linear](https://linear.app/docs/mcp)** - Search, create, and update Linear issues, projects, and comments.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://ligo.ertiqah.com/favicon.avif\" alt=\"LiGo Logo\" /> **[LinkedIn MCP Runner](https://github.com/ertiqah/linkedin-mcp-runner)** - Write, edit, and schedule LinkedIn posts right from ChatGPT and Claude with [LiGo](https://ligo.ertiqah.com/).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/175112039?s=200&v=4\" alt=\"Linkup Logo\" /> **[Linkup](https://github.com/LinkupPlatform/js-mcp-server)** - (JS version) MCP server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/175112039?s=200&v=4\" alt=\"Linkup Logo\" /> **[Linkup](https://github.com/LinkupPlatform/python-mcp-server)** - (Python version) MCP server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\n- <img src=\"https://avatars.githubusercontent.com/u/149083471\" alt=\"Lippia.io\" width=\"12\" height=\"12\"> **[Lippia](https://github.com/Lippia-io/Lippia-MCP-Server/blob/main/getting-started.md)** - MCP Server to accelerate Test Automation using Lippia Framework.\n- <img src=\"https://gornschool.com/gorn.png\" alt=\"Lisply\" width=\"12\" height=\"12\"> **[Lisply](https://github.com/gornskew/lisply-mcp)** - Flexible frontend for compliant Lisp-speaking backends.\n- <img height=\"12\" width=\"12\" src=\"https://litmus.io/favicon.ico\" alt=\"Litmus.io Logo\" /> **[Litmus.io](https://github.com/litmusautomation/litmus-mcp-server)** - Official MCP server for configuring [Litmus](https://litmus.io) Edge for Industrial Data Collection, Edge Analytics & Industrial AI.\n- <img height=\"12\" width=\"12\" src=\"https://liveblocks.io/favicon.ico\" alt=\"Liveblocks Logo\" /> **[Liveblocks](https://github.com/liveblocks/liveblocks-mcp-server)** - Ready‑made features for AI & human collaboration—use this to develop your [Liveblocks](https://liveblocks.io) app quicker.\n- <img height=\"12\" width=\"12\" src=\"https://logfire.pydantic.dev/favicon.ico\" alt=\"Logfire Logo\" /> **[Logfire](https://github.com/pydantic/logfire-mcp)** - Provides access to OpenTelemetry traces and metrics through Logfire.\n- <img height=\"12\" width=\"12\" src=\"https://make.magicmealkits.com/favicon.ico\" alt=\"Magic Meal Kits Logo\" /> **[Magic Meal Kits](https://github.com/pureugong/mmk-mcp)** - Unleash Make's Full Potential by [Magic Meal Kits](https://make.magicmealkits.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.mailgun.com/favicon.ico\" alt=\"Mailgun Logo\" /> **[Mailgun](https://github.com/mailgun/mailgun-mcp-server)** - Interact with Mailgun API.\n- <img height=\"12\" width=\"12\" src=\"https://www.mailjet.com/favicon.ico\" alt=\"Mailjet Logo\" /> **[Mailjet](https://github.com/mailgun/mailjet-mcp-server)** - Official MCP server which allows AI agents to interact with contact, campaign, segmentation, statistics, workflow (and more) APIs from [Sinch Mailjet](https://www.mailjet.com).\n- <img height=\"12\" width=\"12\" src=\"https://www.make.com/favicon.ico\" alt=\"Make Logo\" /> **[Make](https://github.com/integromat/make-mcp-server)** - Turn your [Make](https://www.make.com/) scenarios into callable tools for AI assistants.\n- <img height=\"12\" width=\"12\" src=\"https://static-assets.mapbox.com/branding/favicon/v1/favicon.ico\" alt=\"Mapbox Logo\" /> **[Mapbox](https://github.com/mapbox/mcp-server)** - Unlock geospatial intelligence through Mapbox APIs like geocoding, POI search, directions, isochrones and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.mariadb.com/favicon.ico\" alt=\"MariaDB Logo\" /> **[MariaDB](https://github.com/mariadb/mcp)** - A standard interface for managing and querying MariaDB databases, supporting both standard SQL operations and advanced vector/embedding-based search.\n- <img height=\"14\" width=\"14\" src=\"https://raw.githubusercontent.com/rust-mcp-stack/mcp-discovery/refs/heads/main/docs/_media/mcp-discovery-logo.png\" alt=\"mcp-discovery logo\" /> **[MCP Discovery](https://github.com/rust-mcp-stack/mcp-discovery)** - A lightweight CLI tool built in Rust for discovering MCP server capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://googleapis.github.io/genai-toolbox/favicons/favicon.ico\" alt=\"MCP Toolbox for Databases Logo\" /> **[MCP Toolbox for Databases](https://github.com/googleapis/genai-toolbox)** - Open source MCP server specializing in easy, fast, and secure tools for Databases. Supports  AlloyDB, BigQuery, Bigtable, Cloud SQL, Dgraph, Looker, MySQL, Neo4j, Postgres, Spanner, and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://memgraph.com/favicon.png\" alt=\"Memgraph Logo\" /> **[Memgraph](https://github.com/memgraph/ai-toolkit/tree/main/integrations/mcp-memgraph)** - Query your data in [Memgraph](https://memgraph.com/) graph database.\n- <img height=\"12\" width=\"12\" src=\"https://www.mercadolibre.com.ar/favicon.ico\" alt=\"MercadoLibre Logo\" /> **[Mercado Libre](https://mcp.mercadolibre.com/)** - Mercado Libre's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.mercadopago.com/favicon.ico\" alt=\"MercadoPago Logo\" /> **[Mercado Pago](https://mcp.mercadopago.com/)** - Mercado Pago's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/MetoroLogo.png\" alt=\"Metoro Logo\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://claritystatic.azureedge.net/images/logo.ico\" alt=\"Microsoft Clarity Logo\"/> **[Microsoft Clarity](https://github.com/microsoft/clarity-mcp-server)** - Official MCP Server to get your behavioral analytics data and insights from [Clarity](https://clarity.microsoft.com)\n- <img height=\"12\" width=\"12\" src=\"https://conn-afd-prod-endpoint-bmc9bqahasf3grgk.b01.azurefd.net/releases/v1.0.1735/1.0.1735.4099/commondataserviceforapps/icon.png\" alt=\"Microsoft Dataverse Logo\" /> **[Microsoft Dataverse](https://go.microsoft.com/fwlink/?linkid=2320176)** - Chat over your business data using NL - Discover tables, run queries, retrieve data, insert or update records, and execute custom prompts grounded in business knowledge and context.\n- <img height=\"12\" width=\"12\" src=\"https://learn.microsoft.com/favicon.ico\" alt=\"Microsoft Learn Logo\" /> **[Microsoft Learn Docs](https://github.com/microsoftdocs/mcp)** - An MCP server that provides structured access to Microsoft's official documentation. Retrieves accurate, authoritative, and context-aware technical content for code generation, question answering, and workflow grounding.\n- <img height=\"12\" width=\"12\" src=\"https://statics.teams.microsoft.com/hashedassets/favicon/prod/favicon-9f45b466.ico\" alt=\"Microsoft Teams Logo\" /> **[Microsoft Teams](https://devblogs.microsoft.com/microsoft365dev/announcing-the-updated-teams-ai-library-and-mcp-support/)** - Official Microsoft Teams AI Library with MCP support enabling advanced agent orchestration, multi-agent collaboration, and seamless integration with Teams messaging and collaboration features.\n- <img height=\"12\" width=\"12\" src=\"https://milvus.io/favicon-32x32.png\" /> **[Milvus](https://github.com/zilliztech/mcp-server-milvus)** - Search, Query and interact with data in your Milvus Vector Database.\n- <img src=\"https://www.mimilabs.ai/logos/mimilabsSquare.svg\" alt=\"mimilabs\" width=\"12\" height=\"12\"> **[mimilabs](https://www.mimilabs.ai/mcp)** - A US healthcare data discovery guide for 50+ gov sources and thousands of publicly available US healthcare datasets regarding gov-funded programs, policies, drug pricings, clinical trials, etc.\n- <img src=\"https://avatars.githubusercontent.com/u/94089762?s=48&v=4\" alt=\"Mobb\" width=\"12\" height=\"12\"> **[Mobb](https://github.com/mobb-dev/bugsy?tab=readme-ov-file#model-context-protocol-mcp-server)** - The [Mobb Vibe Shield](https://vibe.mobb.ai/) MCP server identifies and remediates vulnerabilities in both human and AI-written code, ensuring your applications remain secure without slowing development.\n- <img height=\"12\" width=\"12\" src=\"https://console.gomomento.com/favicon.ico\" /> **[Momento](https://github.com/momentohq/mcp-momento)** - Momento Cache lets you quickly improve your performance, reduce costs, and handle load at any scale.\n- <img height=\"12\" width=\"12\" src=\"https://www.monday.com/favicon.ico\" alt=\"Monday.com Logo\" /> **[Monday.com](https://github.com/mondaycom/mcp)** - Interact with Monday.com boards, items, accounts and work forms.\n- <img height=\"12\" width=\"12\" src=\"https://www.mongodb.com/favicon.ico\" /> **[MongoDB](https://github.com/mongodb-js/mongodb-mcp-server)** - Both MongoDB Community Server and MongoDB Atlas are supported.\n- <img height=\"12\" width=\"12\" src=\"https://moorcheh.ai/Moorcheh-mcp.ico\" alt=\"Moorcheh Logo\" /> **[Moorcheh](https://github.com/moorcheh-ai/moorcheh-mcp)** - Embed, store, and search your documents, and build secure chatbots and RAG systems with Moorcheh's information-theoretic semantic search engine\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://docs.mulesoft.com/_/img/favicon.ico\" alt=\"Mulesoft Logo\" /> **[Mulesoft](https://www.npmjs.com/package/@mulesoft/mcp-server)** - Build, deploy, and manage MuleSoft applications with natural language, directly inside any compatible IDE.\n- <img height=\"12\" width=\"12\" src=\"https://www.multiplayer.app/favicon-32x32.png\" alt=\"Multiplayer Logo\" /> **[Multiplayer](https://www.multiplayer.app/docs/ai/mcp-server)** - Analyze your full stack session recordings easily. Record a bug with Multiplayer, analyze and fix it with LLM\n-  **[Nango](https://docs.nango.dev/guides/use-cases/mcp-server)** - Integrate your AI agent with 500+ APIs: Auth, custom tools, and observability. Open-source.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/38020270\" alt=\"NanoVMs Logo\" /> **[NanoVMs](https://github.com/nanovms/ops-mcp)** - Easily Build and Deploy unikernels to any cloud.\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- <img height=\"12\" width=\"12\" src=\"https://knowall.ai/favicon.ico\" alt=\"Neo4j Agent Memory Logo\" /> **[Neo4j Agent Memory](https://github.com/knowall-ai/mcp-neo4j-agent-memory)** - Memory management for AI agents using Neo4j knowledge graphs\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j GDS](https://github.com/neo4j-contrib/gds-agent)** - Neo4j graph data science server with comprehensive graph algorithms that enables complex graph reasoning and Q&A.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/183852044?s=48&v=4\" alt=\"Neon Logo\" /> **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://app.usenerve.com/favicon.ico\" alt=\"Nerve Logo\" /> **[Nerve](https://github.com/nerve-hq/nerve-mcp-server)** - Search and Act on all your company data across all your SaaS apps via [Nerve](https://www.usenerve.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.netdata.cloud/favicon-32x32.png\" alt=\"Netdata Logo\" /> **[Netdata](https://github.com/netdata/netdata/blob/master/src/web/mcp/README.md)** - Discovery, exploration, reporting and root cause analysis using all observability data, including metrics, logs, systems, containers, processes, and network connections\n- <img height=\"12\" width=\"12\" src=\"https://www.netlify.com/favicon/icon.svg\" alt=\"Netlify Logo\" /> **[Netlify](https://docs.netlify.com/welcome/build-with-ai/netlify-mcp-server/)** - Create, build, deploy, and manage your websites with Netlify web platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.thenile.dev/favicon.ico\" alt=\"Nile Logo\" /> **[Nile](https://github.com/niledatabase/nile-mcp-server)** - An MCP server that talks to Nile - Postgres re-engineered for B2B apps. Manage and query databases, tenants, users, auth using LLMs\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/208441832?s=400&v=4\" alt=\"Nodit Logo\" /> **[Nodit](https://github.com/noditlabs/nodit-mcp-server)** - Official Nodit MCP Server enabling access to multi-chain RPC Nodes and Data APIs for blockchain data.\n- <img height=\"12\" width=\"12\" src=\"https://app.norman.finance/favicons/favicon-32x32.png\" alt=\"Norman Logo\" /> **[Norman Finance](https://github.com/norman-finance/norman-mcp-server)** - MCP server for managing accounting and taxes with Norman Finance.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/4792552?s=200&v=4\" alt=\"Notion Logo\" /> **[Notion](https://github.com/makenotion/notion-mcp-server#readme)** - This project implements an MCP server for the Notion API.\n-  **[Nutrient](https://github.com/PSPDFKit/nutrient-dws-mcp-server)** - Create, Edit, Sign, Extract Documents using Natural Language\n- <img height=\"12\" width=\"12\" src=\"https://nx.dev/favicon/favicon.svg\" alt=\"Nx Logo\" /> **[Nx](https://github.com/nrwl/nx-console/blob/master/apps/nx-mcp)** - Makes [Nx's understanding](https://nx.dev/features/enhance-AI) of your codebase accessible to LLMs, providing insights into the codebase architecture, project relationships and runnable tasks thus allowing AI to make precise code suggestions.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/82347605?s=48&v=4\" alt=\"OceanBase Logo\" /> **[OceanBase](https://github.com/oceanbase/mcp-oceanbase)** - MCP Server for OceanBase database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[Octagon](https://github.com/OctagonAI/octagon-mcp-server)** - Deliver real-time investment research with extensive private and public market data.\n- <img height=\"12\" width=\"12\" src=\"https://octoeverywhere.com/img/logo.png\" alt=\"OctoEverywhere Logo\" /> **[OctoEverywhere](https://github.com/OctoEverywhere/mcp)** - A 3D Printing MCP server that allows for querying for live state, webcam snapshots, and 3D printer control.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/211697972\" alt=\"Offorte Logo\" /> **[Offorte](https://github.com/offorte/offorte-mcp-server#readme)** - Offorte Proposal Software official MCP server enables creation and sending of business proposals.\n-  **[OlaMaps](https://pypi.org/project/ola-maps-mcp-server)** - Official Ola Maps MCP Server for services like geocode, directions, place details and many more.\n- <img height=\"12\" width=\"12\" src=\"https://www.olostep.com/favicon.ico\" alt=\"Olostep\" /> **[Olostep](https://github.com/olostep/olostep-mcp-server)** - Search, scrape and crawl content from web. Real-time results in clean markdown.\n- <img height=\"12\" width=\"12\" src=\"https://static.onlyoffice.com/images/favicon.ico\" alt=\"ONLYOFFICE DocSpace\" /> **[ONLYOFFICE DocSpace](https://github.com/ONLYOFFICE/docspace-mcp)** - Interact with [ONLYOFFICE DocSpace](https://www.onlyoffice.com/docspace.aspx) API to create rooms, manage files and folders.\n- **[OMOP MCP](https://github.com/OHNLP/omop_mcp)** - Map clinical terminology to OMOP concepts using LLMs for healthcare data standardization.\n- <img height=\"12\" width=\"12\" src=\"https://op.gg/favicon.ico\" alt=\"OP.GG Logo\" /> **[OP.GG](https://github.com/opgginc/opgg-mcp)** - Access real-time gaming data across popular titles like League of Legends, TFT, and Valorant, offering champion analytics, esports schedules, meta compositions, and character statistics.\n- <img height=\"12\" width=\"12\" src=\"https://www.openfort.io/img/icon.svg\" alt=\"Openfort\" /> **[Openfort](https://github.com/openfort-xyz/mcp)** - Connect your AI to Openfort's smart wallet, auth, and project infrastructure.\n- <img height=\"12\" width=\"12\" src=\"https://open-metadata.org/favicon.ico\" alt=\"OpenMetadata\" /> **[OpenMetadata](https://open-metadata.org/mcp)** - The first Enterprise-grade MCP server for metadata\n- <img height=\"12\" width=\"12\" src=\"https://opensearch.org/wp-content/uploads/2025/01/opensearch_mark_default.svg\" alt=\"OpenSearch Logo\" /> **[OpenSearch](https://github.com/opensearch-project/opensearch-mcp-server-py)** -  MCP server that enables AI agents to perform search and analytics use cases on data stored in [OpenSearch](https://opensearch.org/).\n- <img height=\"12\" width=\"12\" src=\"https://app.opslevel.com/favicon.ico\" alt=\"OpsLevel\" /> **[OpsLevel](https://github.com/opslevel/opslevel-mcp)** - Official MCP Server for [OpsLevel](https://www.opslevel.com).\n- <img height=\"12\" width=\"12\" src=\"https://optuna.org/assets/img/favicon.ico\" alt=\"Optuna Logo\" /> **[Optuna](https://github.com/optuna/optuna-mcp)** - Official MCP server enabling seamless orchestration of hyperparameter search and other optimization tasks with [Optuna](https://optuna.org/).\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/oracle/mcp/refs/heads/main/oracle.svg\" alt=\"Oracle Logo\" /> **[Oracle](https://docs.oracle.com/en/database/oracle/sql-developer-command-line/25.2/sqcug/starting-and-managing-sqlcl-mcp-server.html#GUID-5F916B5D-8670-42BD-9F8B-D3D2424EC47E)** - Official [Oracle Database: SQLcl ](https://www.oracle.com/database/sqldeveloper/technologies/sqlcl/download/) MCP server enabling all access to any Oracle Database via native MCP support directly in SQLcl.\n- <img height=\"12\" width=\"12\" src=\"https://orshot.com/brand/favicon.svg\" alt=\"Orshot Logo\" /> **[Orshot](https://github.com/rishimohan/orshot-mcp-server)** - Official [Orshot](https://orshot.com) MCP server to dynamically generate images from custom design templates.\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://developer.paddle.com/favicon.svg\" alt=\"Paddle Logo\" /> **[Paddle](https://github.com/PaddleHQ/paddle-mcp-server)** - Interact with the Paddle API. Manage product catalog, billing and subscriptions, and reports.\n- **[PaddleOCR](https://paddlepaddle.github.io/PaddleOCR/latest/en/version3.x/deployment/mcp_server.html)** - An MCP server that brings enterprise-grade OCR and document parsing capabilities to AI applications.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.brandfolder.io/YX9ETPCP/at/266537g8kh6mmvt24jvsjb/P-GreenRGB.svg\" alt=\"PagerDuty Logo\" /> **[PagerDuty](https://github.com/PagerDuty/pagerduty-mcp-server)** - Interact with your PagerDuty account, allowing you to manage incidents, services, schedules, and more directly from your MCP-enabled client.\n- **[Pagos](https://github.com/pagos-ai/pagos-mcp)** - Interact with the Pagos API. Query Credit Card BIN Data with more to come.\n- <img height=\"12\" width=\"12\" src=\"https://paiml.com/favicon.ico\" alt=\"PAIML Logo\" /> **[PAIML MCP Agent Toolkit](https://github.com/paiml/paiml-mcp-agent-toolkit)** - Professional project scaffolding toolkit with zero-configuration AI context generation, template generation for Rust/Deno/Python projects, and hybrid neuro-symbolic code analysis.\n- <img height=\"12\" width=\"12\" src=\"https://app.paperinvest.io/favicon.svg\" alt=\"Paper Logo\" /> **[Paper](https://github.com/paperinvest/mcp-server)** - Realistic paper trading platform with market simulation, 22 broker emulations, and professional tools for risk-free trading practice. First trading platform with MCP integration.\n- **[Patronus AI](https://github.com/patronus-ai/patronus-mcp-server)** - Test, evaluate, and optimize AI agents and RAG apps\n- <img height=\"12\" width=\"12\" src=\"https://mcp.paubox.com/paubox.png\" alt=\"Paubox Logo\" />**[Paubox](https://mcp.paubox.com)** - Official MCP server which allows AI agents to interact with Paubox Email API. HITRUST certified.\n- <img height=\"12\" width=\"12\" src=\"https://www.paypalobjects.com/webstatic/icon/favicon.ico\" alt=\"PayPal Logo\" /> **[PayPal](https://mcp.paypal.com)** - PayPal's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://ww2-secure.pearl.com/static/pearl/pearl-logo.svg\" alt=\"Pearl Logo\" /> **[Pearl](https://github.com/Pearl-com/pearl_mcp_server)** - Official MCP Server to interact with Pearl API. Connect your AI Agents with 12,000+ certified experts instantly.\n- <img height=\"12\" width=\"12\" src=\"https://www.perplexity.ai/favicon.ico\" alt=\"Perplexity Logo\" /> **[Perplexity](https://github.com/ppl-ai/modelcontextprotocol)** - An MCP server that connects to Perplexity's Sonar API, enabling real-time web-wide research in conversational AI.\n- <img height=\"12\" width=\"12\" src=\"https://www.foxit.com/favicon.ico\" alt=\"Foxit Logo\" /> **[PDFActionInspector](https://github.com/foxitsoftware/PDFActionInspector/tree/develop)** - A Model Context Protocol server for extracting and analyzing JavaScript Actions from PDF files. Provides comprehensive security analysis to detect malicious PDF behaviors, hidden scripts, and potential security threats through AI-assisted risk assessment.\n- <img height=\"12\" width=\"12\" src=\"https://www.pga.com/favicon.ico\" alt=\"PGA Logo\" /> **[PGA (Golf)](https://mcp.pga.com)** - PGA's official MCP Server for all things golf-related. Find a coach, play golf, improve your game, and more.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/54333248\" /> **[Pinecone](https://github.com/pinecone-io/pinecone-mcp)** - [Pinecone](https://docs.pinecone.io/guides/operations/mcp-server)'s developer MCP Server assist developers in searching documentation and managing data within their development environment.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/54333248\" /> **[Pinecone Assistant](https://github.com/pinecone-io/assistant-mcp)** - Retrieves context from your [Pinecone Assistant](https://docs.pinecone.io/guides/assistant/mcp-server) knowledge base.\n- <img height=\"12\" width=\"12\" src=\"https://pipedream.com/favicon.ico\" alt=\"Pipedream Logo\" /> **[Pipedream](https://github.com/PipedreamHQ/pipedream/tree/master/modelcontextprotocol)** - Connect with 2,500 APIs with 8,000+ prebuilt tools.\n- <img height=\"12\" width=\"12\" src=\"https://playcanvas.com/static-assets/images/icons/favicon.png\" alt=\"PlayCanvas Logo\" /> **[PlayCanvas](https://github.com/playcanvas/editor-mcp-server)** - Create interactive 3D web apps with the PlayCanvas Editor.\n- <img height=\"12\" width=\"12\" src=\"https://playwright.dev/img/playwright-logo.ico\" alt=\"Playwright Logo\" /> **[Playwright](https://github.com/microsoft/playwright-mcp)** — Browser automation MCP server using Playwright to run tests, navigate pages, capture screenshots, scrape content, and automate web interactions reliably.\n- <img height=\"12\" width=\"12\" src=\"https://www.plugged.in/favicon.ico\" alt=\"Plugged.in Logo\" /> **[Plugged.in](https://github.com/VeriTeknik/pluggedin-mcp)** - A comprehensive proxy that combines multiple MCP servers into a single MCP. It provides discovery and management of tools, prompts, resources, and templates across servers, plus a playground for debugging when building MCP servers.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/port-labs/port-mcp-server/blob/main/assets/port_symbol_white.svg\" alt=\"Port Logo\" /> **[Port IO](https://github.com/port-labs/port-mcp-server)** - Access and manage your software catalog to improve service quality and compliance.\n- **[PostHog](https://github.com/posthog/mcp)** - Interact with PostHog analytics, feature flags, error tracking and more with the official PostHog MCP server.\n- **[Postman API](https://github.com/postmanlabs/postman-api-mcp)** - Manage your Postman resources using the [Postman API](https://www.postman.com/postman/postman-public-workspace/collection/i2uqzpp/postman-api).\n- <img height=\"12\" width=\"12\" src=\"https://powerdrill.ai/_next/static/media/powerdrill.0fa27d00.webp\" alt=\"Powerdrill Logo\" /> **[Powerdrill](https://github.com/powerdrillai/powerdrill-mcp)** - An MCP server that provides tools to interact with Powerdrill datasets, enabling smart AI data analysis and insights.\n- <img height=\"12\" width=\"12\" src=\"https://www.prisma.io/images/favicon-32x32.png\" alt=\"Prisma Logo\" /> **[Prisma](https://www.prisma.io/docs/postgres/mcp-server)** - Create and manage Prisma Postgres databases\n- <img height=\"12\" width=\"12\" src=\"https://probe.dev/favicon.ico\" alt=\"Probe.dev Logo\" /> **[Probe.dev](https://docs.probe.dev/guides/mcp-integration)** - Comprehensive media analysis and validation powered by [Probe.dev](https://probe.dev). Hosted MCP server with FFprobe, MediaInfo, and Probe Report analysis capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/FGzpihs4MxmSJhyGZ6n7f2Xj0.png\" alt=\"Prode.ai Logo\" /> **[ProdE](https://github.com/CuriousBox-AI/ProdE-mcp)** - Your 24/7 production engineer that preserves context across multiple codebases.\n- <img height=\"12\" width=\"12\" src=\"https://programintegrity.org/wp-content/uploads/2024/07/PIA-Favicon.svg\" alt=\"Program Integrity Alliance (PIA) Logo\" /> **[Program Integrity Alliance (PIA)](https://github.com/Program-Integrity-Alliance/pia-mcp-local)** - Local and Hosted MCP servers providing AI-friendly access to U.S. Government Open Datasets. Also available on [Docker MCP Catalog](https://hub.docker.com/mcp/explore?search=PIA). See [our website](https://programintegrity.org) for more details.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/newtype-01/prompthouse-mcp/raw/main/prompthouse-logo-12x12.png\" alt=\"PromptHouse Logo\" /> **[PromptHouse](https://github.com/newtype-01/prompthouse-mcp)** - Personal prompt library with MCP integration for AI clients.\n- <img height=\"12\" width=\"12\" src=\"https://docs.speedscale.com/img/favicon.ico\" alt=\"proxymock Logo\" /> **[proxymock](https://docs.speedscale.com/proxymock/reference/mcp/)** - An MCP server that automatically generates tests and mocks by recording a live app.\n- <img src=\"https://www.pubnub.com/favicon/favicon-32x32.png\" alt=\"PubNub\" width=\"12\" height=\"12\"> **[PubNub](https://github.com/pubnub/pubnub-mcp-server)** - Retrieves context for developing with PubNub SDKs and calling APIs.\n- <img height=\"12\" width=\"12\" src=\"https://www.pulumi.com/images/favicon.ico\" alt=\"Pulumi Logo\" /> **[Pulumi](https://github.com/pulumi/mcp-server)** - Deploy and manage cloud infrastructure using [Pulumi](https://pulumi.com).\n- <img height=\"12\" width=\"12\" src=\"https://pure.md/favicon.png\" alt=\"Pure.md Logo\" /> **[Pure.md](https://github.com/puremd/puremd-mcp)** - Reliably access web content in markdown format with [pure.md](https://pure.md) (bot detection avoidance, proxy rotation, and headless JS rendering built in).\n- <img height=\"12\" width=\"12\" src=\"https://put.io/images/favicon.ico\" alt=\"Put.io Logo\" /> **[Put.io](https://github.com/putdotio/putio-mcp-server)** - Interact with your Put.io account to download torrents.\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- <img src=\"https://api.qoretechnologies.com/api/public/apps/Qorus/qorus-logo.svg\" alt=\"Qorus\" width=\"12\" height=\"12\"> **[Qorus](https://qoretechnologies.com/manual/qorus/current/qorus/sysarch.html#mcp_server)** - Connect to any application, system, or technology and automate your business processes without coding and with AI\n- <img src=\"https://avatars.githubusercontent.com/u/18053493?s=200&v=4\" alt=\"Qonto\" width=\"12\" height=\"12\"> **[Qonto](https://github.com/qonto/qonto-mcp-server)** - Access and interact your Qonto account through LLMs using MCP.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/3912814\" alt=\"QuantConnect Logo\" /> **[QuantConnect](https://github.com/QuantConnect/mcp-server)** - Interact with your [QuantConnect](https://www.quantconnect.com/) account to update projects, write strategies, run backtest, and deploying strategies to production live-trading.\n- **[Quickchat AI](https://github.com/incentivai/quickchat-ai-mcp)** - Launch your conversational [Quickchat AI](https://quickchat.ai) agent as an MCP to give AI apps real-time access to its Knowledge Base and conversational capabilities\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/165178062\" alt=\"Ragie Logo\" /> **[Ragie](https://github.com/ragieai/ragie-mcp-server/)** - Retrieve context from your [Ragie](https://www.ragie.ai) (RAG) knowledge base connected to integrations like Google Drive, Notion, JIRA and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.ramp.com/favicon.ico\" /> **[Ramp](https://github.com/ramp-public/ramp-mcp)** - Interact with [Ramp](https://ramp.com)'s Developer API to run analysis on your spend and gain insights leveraging LLMs\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/CU1m0xFonUl76ZeaW0IdkQ0M.png\" alt=\"Razorpay Logo\" /> **[Razorpay](https://github.com/razorpay/razorpay-mcp-server)** - Razorpay's official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://www.recraft.ai/favicons/icon.svg\" alt=\"Recraft Logo\" /> **[Recraft](https://github.com/recraft-ai/mcp-recraft-server)** - Generate raster and vector (SVG) images using [Recraft](https://recraft.ai). Also you can edit, upscale images, create your own styles, and vectorize raster images\n- <img height=\"12\" width=\"12\" src=\"https://www.redhat.com/favicon.ico\" alt=\"Red Hat Logo\" /> **[Red Hat Insights](https://github.com/RedHatInsights/insights-mcp)** - Interact with [Red Hat Insights](https://www.redhat.com/en/technologies/management/insights) - build images, manage vulnerabilities, or view targeted recommendations.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1529926\" alt=\"Redis Logo\" /> **[Redis](https://github.com/redis/mcp-redis/)** - The Redis official MCP Server offers an interface to manage and search data in Redis.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1529926\" alt=\"Redis Logo\" /> **[Redis Cloud API](https://github.com/redis/mcp-redis-cloud/)** - The Redis Cloud API MCP Server allows you to manage your Redis Cloud resources using natural language.\n- <img src=\"https://avatars.githubusercontent.com/u/149024635\" alt=\"Reexpress\" width=\"12\" height=\"12\"> **[Reexpress](https://github.com/ReexpressAI/reexpress_mcp_server)** - Enable Similarity-Distance-Magnitude statistical verification for your search, software, and data science workflows\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/68a872edf3df6064de547670/68b7f089c45a6083ce25acb1_reflag-favicon-32.png\" alt=\"Reflag\" /> **[Reflag](https://github.com/reflagcom/javascript/tree/main/packages/cli#model-context-protocol)** - Create and manage feature flags using [Reflag](https://reflag.com)\n- <img height=\"12\" width=\"12\" src=\"https://www.reltio.com/wp-content/uploads/2024/03/cropped-cropped-Reltio_Light_Mode_Dark_Mode_Favicon-270x270.png\" alt=\"Reltio Logo\" /> **[Reltio](https://github.com/reltio-ai/reltio-mcp-server)** - A lightweight, plugin-based MCP server designed to perform advanced entity matching with language models in Reltio environments.\n- <img height=\"12\" width=\"12\" src=\"https://www.rember.com/favicon.ico\" alt=\"Rember Logo\" /> **[Rember](https://github.com/rember/rember-mcp)** - Create spaced repetition flashcards in [Rember](https://rember.com) to remember anything you learn in your chats\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/114033652\" alt=\"Render Logo\" /> **[Render](https://render.com/docs/mcp-server)** - The official Render MCP server: spin up new services, run queries against your databases, and debug rapidly with direct access to service metrics and logs.\n- <img height=\"12\" width=\"12\" src=\"https://reportportal.io/favicon.ico\" alt=\"ReportPortal Logo\" /> **[ReportPortal](https://github.com/reportportal/reportportal-mcp-server)** - explore and analyze automated test results from [ReportPortal](https://reportportal.io) using your favourite LLM.\n- <img height=\"12\" width=\"12\" src=\"http://nonica.io/Nonica-logo.ico\" alt=\"Nonica Logo\" /> **[Revit](https://github.com/NonicaTeam/AI-Connector-for-Revit)** - Connect and interact with your Revit models live.\n- <img height=\"12\" width=\"12\" src=\"https://ui.rilldata.com/favicon.png\" alt=\"Rill Data Logo\" /> **[Rill Data](https://docs.rilldata.com/explore/mcp)** - Interact with Rill Data to query and analyze your data.\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.foundation.roblox.com/current/RobloxStudio.ico\" alt=\"Roblox Studio\" /> **[Roblox Studio](https://github.com/Roblox/studio-rust-mcp-server)** - Roblox Studio MCP Server, create and manipulate scenes, scripts in Roblox Studio\n- <img src=\"https://hyper3d.ai/favicon.ico\" alt=\"Rodin\" width=\"12\" height=\"12\"> **[Rodin](https://github.com/DeemosTech/rodin-api-mcp)** - Generate 3D Models with [Hyper3D Rodin](https://hyper3d.ai)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/66b7de6a233c04f4dac200a6/66bed52680d689629483c18b_faviconV2%20(2).png\" alt=\"Root Signals Logo\" /> **[Root Signals](https://github.com/root-signals/root-signals-mcp)** - Improve and quality control your outputs with evaluations using LLM-as-Judge\n- **[Routine](https://github.com/routineco/mcp-server)** - MCP server to interact with [Routine](https://routine.co/): calendars, tasks, notes, etc.\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\"> **[Rube](https://github.com/ComposioHQ/Rube)** - Rube is a Model Context Protocol (MCP) server that connects your AI tools to 500+ apps like Gmail, Slack, GitHub, and Notion. Simply install it in your AI client, authenticate once with your apps, and start asking your AI to perform real actions like \"Send an email\" or \"Create a task.\"\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/safedep/.github/refs/heads/main/assets/logo/1.png\" alt=\"SafeDep Logo\" /> **[SafeDep](https://github.com/safedep/vet/blob/main/docs/mcp.md)** - SafeDep `vet-mcp` helps in  vetting open source packages for security risks—such as vulnerabilities and malicious code—before they're used in your project, especially with AI-generated code suggestions.\n- <img height=\"12\" width=\"12\" src=\"https://waf-ce.chaitin.cn/favicon.ico\" alt=\"SafeLine Logo\" /> **[SafeLine](https://github.com/chaitin/SafeLine/tree/main/mcp_server)** - [SafeLine](https://safepoint.cloud/landing/safeline) is a self-hosted WAF(Web Application Firewall) to protect your web apps from attacks and exploits.\n- <img height=\"12\" width=\"12\" src=\"https://scrapi.tech/favicon.ico\" alt=\"ScrAPI Logo\" /> **[ScrAPI](https://github.com/DevEnterpriseSoftware/scrapi-mcp)** - Web scraping using [ScrAPI](https://scrapi.tech). Extract website content that is difficult to access because of bot detection, captchas or even geolocation restrictions.\n- <img height=\"12\" width=\"12\" src=\"https://upnorthmedia.co/favicon.ico\" alt=\"Up North Media Logo\" /> **[ScreenshotMCP](https://github.com/upnorthmedia/ScreenshotMCP/)** - A Model Context Protocol MCP server for capturing website screenshots with full page, element, and device size features.\n- <img height=\"12\" width=\"12\" src=\"https://screenshotone.com/favicon.ico\" alt=\"ScreenshotOne Logo\" /> **[ScreenshotOne](https://github.com/screenshotone/mcp/)** - Render website screenshots with [ScreenshotOne](https://screenshotone.com/)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" alt=\"Search1API Logo\" /> **[Search1API](https://github.com/fatwang2/search1api-mcp)** - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://www.searchunify.com/favicon.ico\" alt=\"SearchUnify Logo\" /> **[SearchUnify](https://github.com/searchunify/su-mcp/)** - SearchUnify MCP Server (su-mcp) enables seamless integration of SearchUnify with Claude Desktop\n- <img height=\"12\" width=\"12\" src=\"https://secureframe.com/favicon.ico\" alt=\"Secureframe Logo\" /> **[Secureframe](https://github.com/secureframe/secureframe-mcp-server)** - Query security controls, monitor compliance tests, and access audit data across SOC 2, ISO 27001, CMMC, FedRAMP, and other frameworks from [Secureframe](https://secureframe.com).\n- <img height=\"12\" width=\"12\" src=\"https://semgrep.dev/favicon.ico\" alt=\"Semgrep Logo\" /> **[Semgrep](https://github.com/semgrep/mcp)** - Enable AI agents to secure code with [Semgrep](https://semgrep.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/187640573?s=48&v=4\" alt=\"Sequa Logo\" /> **[Sequa.AI](https://github.com/sequa-ai/sequa-mcp)** - Stop stitching context for Copilot and Cursor. With [Sequa MCP](https://github.com/sequa-ai/sequa-mcp), your AI tools know all your codebases and docs out of the box.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6372338e5477e047032b37a5/64f85e6388a2a5c8c9525b4d_favLogo.png\" alt=\"Shortcut Logo\" /> **[Shortcut](https://github.com/useshortcut/mcp-server-shortcut)** - Access and implement all of your projects and tasks (Stories) from [Shortcut](https://shortcut.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.singlestore.com/favicon-32x32.png?v=277b9cbbe31e8bc416504cf3b902d430\"/> **[SingleStore](https://github.com/singlestore-labs/mcp-server-singlestore)** - Interact with the SingleStore database platform\n- <img height=\"12\" width=\"12\" src=\"https://smartbear.com/smartbear/assets/img/favicon.png\" alt=\"SmartBear Logo\" /> **[SmartBear](https://github.com/SmartBear/smartbear-mcp)** - Provides access to multiple capabilities across SmartBear's API Hub, Test Hub, and Insight Hub, all through [dedicated tools and resources](https://developer.smartbear.com/smartbear-mcp/docs/mcp-server).\n- <img src=\"https://smooth-operator.online/logo48.png\" alt=\"Smooth Operator\" width=\"12\" height=\"12\"> **[Smooth Operator](https://smooth-operator.online/agent-tools-api-docs/toolserverdocs)** - Tools to automate Windows via AI Vision, Mouse, Keyboard, Automation Trees, Webbrowser\n- <img height=\"12\" width=\"12\" src=\"https://app.snyk.io/bundle/favicon-faj49uD9.png\" alt=\"Snyk Logo\" /> **[Snyk](https://github.com/snyk/snyk-ls/blob/main/mcp_extension/README.md)** - Enhance security posture by embedding [Snyk](https://snyk.io/) vulnerability scanning directly into agentic workflows.\n- <img height=\"12\" width=\"12\" src=\"https://www.sonarsource.com/favicon.ico\" alt=\"SonarQube Logo\" /> **[SonarQube](https://github.com/SonarSource/sonarqube-mcp-server)** - Enables seamless integration with [SonarQube](https://www.sonarsource.com/) Server or Cloud and allows for code snippet analysis within the agent context.\n- <img src=\"https://sophtron.com/favicon.ico\" alt=\"Sophtron\" width=\"12\" height=\"12\"> **[Sophtron](https://github.com/sophtron/Sophtron-Integration/tree/main/modelcontextprotocol)** - Connect to your bank, credit card, utilities accounts to retrieve account balances and transactions with [Sophtron Bank Integration](https://sophtron.com).\n- <img height=\"12\" width=\"12\" src=\"https://www.stackhawk.com/wp-content/uploads/2025/03/icon-512x512-2-150x150.png\" alt=\"StackHawk Logo\" /> **[StackHawk](https://github.com/stackhawk/stackhawk-mcp)** - Use [StackHawk](https://www.stackhawk.com/) to test for and FIX security problems in your code or vibe coded app.\n- <img height=\"12\" width=\"12\" src=\"https://www.starrocks.io/favicon.ico\" alt=\"StarRocks Logo\" /> **[StarRocks](https://github.com/StarRocks/mcp-server-starrocks)** - Interact with [StarRocks](https://www.starrocks.io/)\n- <img height=\"12\" width=\"12\" src=\"https://downloads.steadybit.com/logomark.svg\" alt=\"Steadybit Logo\" /> **[Steadybit](https://github.com/steadybit/mcp)** - Interact with [Steadybit](https://www.steadybit.com/)\n- <img height=\"12\" width=\"12\" src=\"https://steuerboard.net/favicon.ico\" alt=\"Steuerboard Logo\" /> **[Steuerboard](https://github.com/steuerboard/steuerboard-mcp-typescript)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/22632046?s=200&v=4\" alt=\"Storybook Logo\" /> **[Storybook](https://github.com/storybookjs/addon-mcp)** - Interact with [Storybook](https://storybook.js.org/) to automate UI component testing and documentation\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://sunra.ai/favicon.ico\" alt=\"Sunra AI Logo\" /> **[Sunra AI](https://github.com/sunra-ai/sunra-clients/tree/main/mcp-server)** - Search for and run AI models on [Sunra.ai](https://sunra.ai). Discover models, create video, image, and 3D model content, track their status, and manage the generated media.\n- <img height=\"12\" width=\"12\" src=\"https://supabase.com/favicon/favicon.ico\" alt=\"Supabase Logo\" /> **[Supabase](https://github.com/supabase-community/supabase-mcp)** - Interact with Supabase: Create tables, query data, deploy edge functions, and more.\n- <img height=\"12\" width=\"12\" src=\"https://supadata.ai/favicon.ico\" alt=\"Supadata Logo\" /> **[Supadata](https://github.com/supadata-ai/mcp)** - Official MCP server for [Supadata](https://supadata.ai) - YouTube, TikTok, X and Web data for makers.\n- <img height=\"12\" width=\"12\" src=\"https://d12w4pyrrczi5e.cloudfront.net/archive/50eb154ab859c63a8f1c850f9fe094e25d35e929/images/favicon.ico\" alt=\"Tako Logo\" /> **[Tako](https://github.com/TakoData/tako-mcp)** - Use natural language to search [Tako](https://trytako.com) for real-time financial, sports, weather, and public data with visualization\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/10522416?s=200&v=4\" alt=\"Telnyx Logo\" /> **[Telnyx](https://github.com/team-telnyx/telnyx-mcp-server)** - Official MCP server for building AI-powered communication apps. Create voice assistants, send SMS campaigns, manage phone numbers, and integrate real-time messaging with enterprise-grade reliability. Includes remote [streamable-http](https://api.telnyx.com/v2/mcp) and [sse](https://api.telnyx.com/mcp/sse) servers.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1615979?s=200&v=4\" alt=\"Teradata Logo\" /> **[Teradata](https://github.com/Teradata/teradata-mcp-server)** - This MCP Server support tools and prompts for multi task data analytics on a [Teradata](https://teradata.com) platform.\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/hashicorp/terraform-mcp-server/main/public/images/Terraform-LogoMark_onDark.svg\" alt=\"Terraform Logo\" /> **[Terraform](https://github.com/hashicorp/terraform-mcp-server)** - Seamlessly integrate with Terraform ecosystem, enabling advanced automation and interaction capabilities for Infrastructure as Code (IaC) development powered by [Terraform](https://www.hashicorp.com/en/products/terraform)\n- <img height=\"12\" width=\"12\" src=\"https://www.textin.com/favicon.png\" alt=\"TextIn Logo\" /> **[TextIn](https://github.com/intsig-textin/textin-mcp)** - An MCP server for the [TextIn](https://www.textin.com/?from=github_mcp) API, is a tool for extracting text and performing OCR on documents, it also supports converting documents into Markdown\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/106156665?s=200\" alt=\"Thena Logo\" /> **[Thena](https://mcp.thena.ai)** - Thena's MCP server for enabling users and AI agents to interact with Thena's services and manage customers across different channels such as Slack, Email, Web, Discord etc.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/24291394?v=4\" alt=\"ThingsBoard\" /> **[ThingsBoard](https://github.com/thingsboard/thingsboard-mcp)** - The ThingsBoard MCP Server provides a natural language interface for LLMs and AI agents to interact with your ThingsBoard IoT platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.lg.com/favicon.ico\" alt=\"ThinQ Logo\" /> **[ThinQ Connect](https://github.com/thinq-connect/thinqconnect-mcp)** - Interact with LG ThinQ smart home devices and appliances through the ThinQ Connect MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://thirdweb.com/favicon.ico\" alt=\"Thirdweb Logo\" /> **[Thirdweb](https://github.com/thirdweb-dev/ai/tree/main/python/thirdweb-mcp)** - Read/write to over 2k blockchains, enabling data querying, contract analysis/deployment, and transaction execution, powered by [Thirdweb](https://thirdweb.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.thoughtspot.com/favicon-16x16.png\" alt=\"ThoughtSpot Logo\" /> **[ThoughtSpot](https://github.com/thoughtspot/mcp-server)** - AI is the new BI. A dedicated data analyst for everyone on your team. Bring [ThoughtSpot](https://thoughtspot.com) powers into Claude or any MCP host.\n- <img height=\"12\" width=\"12\" src=\"https://tianji.msgbyte.com/img/dark-brand.svg\" alt=\"Tianji Logo\" /> **[Tianji](https://github.com/msgbyte/tianji/tree/master/apps/mcp-server)** - Interact with Tianji platform whatever selfhosted or cloud platform, powered by [Tianji](https://tianji.msgbyte.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.pingcap.com/favicon.ico\" alt=\"TiDB Logo\" /> **[TiDB](https://github.com/pingcap/pytidb)** - MCP Server to interact with TiDB database platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://b2729162.smushcdn.com/2729162/wp-content/uploads/2023/10/cropped-Favicon-1-192x192.png?lossy=1&strip=1&webp=1\" alt=\"Tldv Logo\" /> **[Tldv](https://gitlab.com/tldv/tldv-mcp-server)** - Connect your AI agents to Google-Meet, Zoom & Microsoft Teams through [tl;dv](https://tldv.io)\n- <img height=\"12\" width=\"12\" src=\"https://www.todoist.com/static/favicon-32x32.png\" alt=\"Todoist Logo\" /> **[Todoist](https://github.com/doist/todoist-ai)** - Search, add, and update [Todoist](https://todoist.com) tasks, projects, sections, comments, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.tokenmetrics.com/logo.svg\" alt=\"Token Metrics Logo\" /> **[Token Metrics](https://github.com/token-metrics/mcp)** - [Token Metrics](https://www.tokenmetrics.com/) integration for fetching real-time crypto market data, trading signals, price predictions, and advanced analytics.\n- <img height=\"12\" width=\"12\" src=\"https://di8m9w6rqrh5d.cloudfront.net/2G3TRwfv1w3GTLfmT7Dmco1VddoFTI5P/1920_6b7e7ec2-d897-4cd7-94f3-46a8301212c3.png\" alt=\"TomTom Logo\" /> **[TomTom-MCP](https://github.com/tomtom-international/tomtom-mcp)** - The [TomTom](https://www.tomtom.com/) MCP Server simplifies geospatial development by providing seamless access to TomTom's location services, including search, routing, traffic and static maps data.\n- <img height=\"12\" width=\"12\" src=\"https://images.thetradeagent.ai/trade_agent/logo.svg\" alt=\"Trade Agent Logo\" /> **[Trade Agent](https://github.com/Trade-Agent/trade-agent-mcp)** - Execute stock and crypto trades on your brokerage via [Trade Agent](https://thetradeagent.ai)\n-  **[Twelve Data](https://github.com/twelvedata/mcp)** — Integrate your AI agents with real-time and historical financial market data through our official [Twelve Data](https://twelvedata.com) MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.twilio.com/content/dam/twilio-com/core-assets/social/favicon-16x16.png\" alt=\"Twilio Logo\" /> **[Twilio](https://github.com/twilio-labs/mcp)** - Interact with [Twilio](https://www.twilio.com/en-us) APIs to send SMS messages, manage phone numbers, configure your account, and more.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/91520705?s=48&v=4\" alt=\"Tencent RTC Logo\" /> **[Tencent RTC](https://github.com/Tencent-RTC/mcp)** - The MCP Server enables AI IDEs to more effectively understand and use [Tencent's Real-Time Communication](https://trtc.io/) SDKs and APIs, which significantly streamlines the process for developers to build audio/video call applications.\n- <img height=\"12\" width=\"12\" src=\"https://uberall.com/media/favicon.svg\" alt=\"Uberall Logo\" /> **[Uberall](https://github.com/uberall/uberall-mcp-server)** – Manage multi - location presence, including listings, reviews, and social posting, via [uberall](https://uberall.com).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/91906527\" alt=\"Unblocked Logo\" /> **[Unblocked](https://docs.getunblocked.com/unblocked-mcp)** Help your AI-powered IDEs generate faster, more accurate code by giving them access to context from Slack, Confluence, Google Docs, JIRA, and more with [Unblocked](https://getunblocked.com).\n- <img height=\"12\" width=\"12\" src=\"https://unifai.network/favicon.ico\" alt=\"UnifAI Logo\" /> **[UnifAI](https://github.com/unifai-network/unifai-mcp-server)** - Dynamically search and call tools using [UnifAI Network](https://unifai.network)\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/plcQevjrOYnyriuGw90NfQBPoQ.jpg\" alt=\"Unstructured Logo\" /> **[Unstructured](https://github.com/Unstructured-IO/UNS-MCP)** - Set up and interact with your unstructured data processing workflows in [Unstructured Platform](https://unstructured.io)\n- <img height=\"12\" width=\"12\" src=\"https://upstash.com/icons/favicon-32x32.png\" alt=\"Upstash Logo\" /> **[Upstash](https://github.com/upstash/mcp-server)** - Manage Redis databases and run Redis commands on [Upstash](https://upstash.com/) with natural language.\n-  **[Vantage](https://github.com/vantage-sh/vantage-mcp-server)** - Interact with your organization's cloud cost spend.\n- <img height=\"12\" width=\"12\" src=\"https://mcp.variflight.com/favicon.ico\" alt=\"VariFlight Logo\" /> **[VariFlight](https://github.com/variflight/variflight-mcp)** - VariFlight's official MCP server provides tools to query flight information, weather data, comfort metrics, the lowest available fares, and other civil aviation-related data.\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[VCAgents](https://github.com/OctagonAI/octagon-vc-agents)** - Interact with investor agents—think Wilson or Thiel—continuously updated with market intel.\n- **[Vectorize](https://github.com/vectorize-io/vectorize-mcp-server/)** - [Vectorize](https://vectorize.io) MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.\n- <img height=\"12\" width=\"12\" src=\"https://static.verbwire.com/favicon-16x16.png\" alt=\"Verbwire Logo\" /> **[Verbwire](https://github.com/verbwire/verbwire-mcp-server)** - Deploy smart contracts, mint NFTs, manage IPFS storage, and more through the Verbwire API\n- <img height=\"12\" width=\"12\" src=\"http://vercel.com/favicon.ico\" alt=\"Vercel Logo\" /> **[Vercel](https://vercel.com/docs/mcp/vercel-mcp)** - Access logs, search docs, and manage projects and deployments.\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n- <img height=\"12\" width=\"12\" src=\"https://www.veyrax.com/favicon.ico\" alt=\"VeyraX Logo\" /> **[VeyraX](https://github.com/VeyraX/veyrax-mcp)** - Single tool to control all 100+ API integrations, and UI components\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/174736222?s=200&v=4\" alt=\"VictoriaMetrics Logo\" /> **[VictoriaMetrics](https://github.com/VictoriaMetrics-Community/mcp-victoriametrics)** - Comprehensive integration with [VictoriaMetrics APIs](https://docs.victoriametrics.com/victoriametrics/url-examples/) and [documentation](https://docs.victoriametrics.com/) for monitoring, observability, and debugging tasks related to your VictoriaMetrics instances.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/ijlYG00LOcMD6zR1XLMxHbAwZkM.png\" alt=\"VideoDB Director\" /> **[VideoDB Director](https://github.com/video-db/agent-toolkit/tree/main/modelcontextprotocol)** - Create AI-powered video workflows including automatic editing, content moderation, voice cloning, highlight generation, and searchable video moments—all accessible via simple APIs and intuitive chat-based interfaces.\n- <img height=\"12\" width=\"12\" src=\"https://landing.ai/wp-content/uploads/2024/04/cropped-favicon-192x192.png\" alt=\"LandingAI VisionAgent\" /> **[VisionAgent MCP](https://github.com/landing-ai/vision-agent-mcp)** - A simple MCP server that enables your LLM to better reason over images, video and documents.\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/mckinsey/vizro/main/vizro-core/docs/assets/images/favicon.png\" alt=\"Vizro Logo\" /> **[Vizro](https://github.com/mckinsey/vizro/tree/main/vizro-mcp)** - Tools and templates to create validated and maintainable data charts and dashboards\n- <img height=\"12\" width=\"12\" src=\"https://wavespeed.ai/logo.webp\" alt=\"WaveSpeed Logo\" /> **[WaveSpeed](https://github.com/WaveSpeedAI/mcp-server)** - WaveSpeed MCP server providing AI agents with image and video generation capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://waystation.ai/images/logo.svg\" alt=\"WayStation Logo\" /> **[WayStation](https://github.com/waystation-ai/mcp)** - Universal MCP server to connect to popular productivity tools such as Notion, Monday, AirTable, and many more\n- <img height=\"12\" width=\"12\" src=\"https://static.whatsapp.net/rsrc.php/v3/yz/r/ujTY9i_Jhs1.png\" alt=\"WhatsApp Business Logo\" /> **[WhatsApp Business](https://medium.com/@wassenger/introducing-whatsapp-mcp-ai-connector-3d393b52d1b0)** - WhatsApp Business MCP connector enabling AI agents to send messages, manage conversations, access templates, and integrate with WhatsApp Business API for automated customer communication.\n- <img height=\"12\" width=\"12\" src=\"https://www.webflow.com/favicon.ico\" alt=\"Webflow Logo\"> **[Webflow](https://github.com/webflow/mcp-server)** - Interact with Webflow sites, pages, and collections\n- <img height=\"12\" width=\"12\" src=\"https://webscraping.ai/favicon.ico\" alt=\"WebScraping.AI Logo\" /> **[WebScraping.AI](https://github.com/webscraping-ai/webscraping-ai-mcp-server)** - Interact with **[WebScraping.AI](https://WebScraping.AI)** for web data extraction and scraping\n- <img height=\"12\" width=\"12\" src=\"https://winston-app-production-public.s3.us-east-1.amazonaws.com/winston-ai-favicon-light.svg\" alt=\"Winston.AI Logo\" /> **[Winston AI](https://github.com/gowinston-ai/winston-ai-mcp-server)** - AI detector MCP server with industry leading accuracy rates in detecting use of AI in text and images. The [Winston AI](https://gowinston.ai) MCP server also offers a robust plagiarism checker to help maintain integrity.\n- <img height=\"12\" width=\"12\" src=\"https://www.xero.com/favicon.ico\" alt=\"Xero Logo\" /> **[Xero](https://github.com/XeroAPI/xero-mcp-server)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://storage.yandexcloud.net/ydb-www-prod-site-assets/favicon-202305/favicon.ico\" alt=\"YDB Logo\" /> **[YDB](https://github.com/ydb-platform/ydb-mcp)** - Query [YDB](https://ydb.tech/) databases\n- <img height=\"12\" width=\"12\" src=\"https://fe-resource.yeelight.com/logo-black.jpeg\" alt=\"Yeelight Logo\" /> **[Yeelight MCP Server](https://github.com/Yeelight/yeelight-iot-mcp)** - The official [Yeelight MCP Server](https://github.com/Yeelight/yeelight-iot-mcp) enables users to control and query their [Yeelight](https://en.yeelight.com/) smart devices using natural language, offering a seamless and efficient human-AI interaction experience.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/632cd328ed2b485519c3f689/6334977a5d1a542102d4b9b5_favicon-32x32.png\" alt=\"YepCode Logo\" /> **[YepCode](https://github.com/yepcode/mcp-server-js)** - Run code in a secure, scalable sandbox environment with full support for dependencies, secrets, logs, and access to APIs or databases. Powered by [YepCode](https://yepcode.io)\n- <img height=\"12\" width=\"12\" src=\"https://www.yugabyte.com/favicon-16x16.png\" alt=\"YugabyteDB Logo\" /> **[YugabyteDB](https://github.com/yugabyte/yugabytedb-mcp-server)** -  MCP Server to interact with your [YugabyteDB](https://www.yugabyte.com/) database\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/14069894\" alt=\"Yunxin Logo\" /> **[Yunxin](https://github.com/netease-im/yunxin-mcp-server)** - An MCP server that connects to Yunxin's IM/RTC/DATA Open-API\n- <img height=\"12\" width=\"12\" src=\"https://cdn.zapier.com/zapier/images/favicon.ico\" alt=\"Zapier Logo\" /> **[Zapier](https://zapier.com/mcp)** - Connect your AI Agents to 8,000 apps instantly.\n- <img height=\"12\" width=\"12\" src=\"https://www.zenable.app/zenable_light.svg\" alt=\"Zenable Logo\" /> **[Zenable](https://docs.zenable.io/integrations/mcp/getting-started)** - Clean up sloppy AI code and prevent vulnerabilities\n- **[ZenML](https://github.com/zenml-io/mcp-zenml)** - Interact with your MLOps and LLMOps pipelines through your [ZenML](https://www.zenml.io) MCP server\n- <img height=\"12\" width=\"12\" src=\"https://www.zine.ai/images/zine-logo.png\" alt=\"Zine Logo\" /> **[Zine](https://www.zine.ai)** - Your memory, everywhere AI goes. Think iPhoto for your knowledge - upload and curate. Like ChatGPT but portable - context that travels with you.\n- <img height=\"12\" width=\"12\" src=\"https://zizai.work/images/logo.jpg\" alt=\"ZIZAI Logo\" /> **[ZIZAI Recruitment](https://github.com/zaiwork/mcp)** - Interact with the next-generation intelligent recruitment platform for employees and employers, powered by [ZIZAI Recruitment](https://zizai.work).\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> [!NOTE]\n> Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[1mcpserver](https://github.com/particlefuture/1mcpserver)** - MCP of MCPs. Automatically discover, configure, and add MCP servers on your local machine.\n- **[1Panel](https://github.com/1Panel-dev/mcp-1panel)** - MCP server implementation that provides 1Panel interaction.\n- **[A2A](https://github.com/GongRzhe/A2A-MCP-Server)** - An MCP server that bridges the Model Context Protocol (MCP) with the Agent-to-Agent (A2A) protocol, enabling MCP-compatible AI assistants (like Claude) to seamlessly interact with A2A agents.\n- **[Ableton Live](https://github.com/Simon-Kansara/ableton-live-mcp-server)** - an MCP server to control Ableton Live.\n- **[Ableton Live](https://github.com/ahujasid/ableton-mcp)** (by ahujasid) - Ableton integration allowing prompt enabled music creation.\n- **[Actor Critic Thinking](https://github.com/aquarius-wing/actor-critic-thinking-mcp)** - Actor-critic thinking for performance evaluation\n- **[Adobe Commerce](https://github.com/rafaelstz/adobe-commerce-dev-mcp)** — MCP to interact with Adobe Commerce GraphQL API, including orders, products, customers, etc.\n- **[ADR Analysis](https://github.com/tosin2013/mcp-adr-analysis-server)** - AI-powered Architectural Decision Records (ADR) analysis server that provides architectural insights, technology stack detection, security checks, and TDD workflow enhancement for software development projects.\n- **[AgentBay](https://github.com/Michael98671/agentbay)** - An MCP server for providing serverless cloud infrastructure for AI agents.\n- **[AgentMode](https://www.agentmode.app)** - Connect to dozens of databases, data warehouses, Github & more, from a single MCP server.  Run the Docker image locally, in the cloud, or on-premise.\n- **[AI Agent Marketplace Index](https://github.com/AI-Agent-Hub/ai-agent-marketplace-index-mcp)** - MCP server to search more than 5000+ AI agents and tools of various categories from [AI Agent Marketplace Index](http://www.deepnlp.org/store/ai-agent) and monitor traffic of AI Agents.\n- **[AI Tasks](https://github.com/jbrinkman/valkey-ai-tasks)** - Let the AI manage complex plans with integrated task management and tracking tools. Supports STDIO, SSE and Streamable HTTP transports.\n- **[ai-Bible](https://github.com/AdbC99/ai-bible)** - Search the bible reliably and repeatably [ai-Bible Labs](https://ai-bible.com)\n- **[Airbnb](https://github.com/openbnb-org/mcp-server-airbnb)** - Provides tools to search Airbnb and get listing details.\n- **[Airflow](https://github.com/yangkyeongmo/mcp-server-apache-airflow)** - An MCP Server that connects to [Apache Airflow](https://airflow.apache.org/) using official python client.\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[Algorand](https://github.com/GoPlausible/algorand-mcp)** - A comprehensive MCP server for tooling interactions (40+) and resource accessibility (60+) plus many useful prompts for interacting with the Algorand blockchain.\n- **[Amadeus](https://github.com/donghyun-chae/mcp-amadeus)** (by donghyun-chae) - An MCP server to access, explore, and interact with Amadeus Flight Offers Search API for retrieving detailed flight options, including airline, times, duration, and pricing data.\n- **[Amazon Ads](https://github.com/MarketplaceAdPros/amazon-ads-mcp-server)** - MCP Server that provides interaction capabilities with Amazon Advertising through [MarketplaceAdPros](https://marketplaceadpros.com)/\n- **[AniList](https://github.com/yuna0x0/anilist-mcp)** (by yuna0x0) - An MCP server to interact with AniList API, allowing you to search for anime and manga, retrieve user data, and manage your watchlist.\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Anki](https://github.com/nietus/anki-mcp)** - MCP server to run locally with Anki and Ankiconnect. Supports creating, updating, searching and filtering cards and decks. Include mass update and other advanced tools.\n- **[AntV Chart](https://github.com/antvis/mcp-server-chart)** - A Model Context Protocol server for generating 15+ visual charts using [AntV](https://github.com/antvis).\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[Apache Gravitino(incubating)](https://github.com/datastrato/mcp-server-gravitino)** - Allow LLMs to explore metadata of structured data and unstructured data with Gravitino, and perform data governance tasks including tagging/classification.\n- **[API Lab MCP](https://github.com/atototo/api-lab-mcp)** - Transform Claude into your AI-powered API testing laboratory. Test, debug, and document APIs through natural conversation with authentication support, response validation, and performance metrics.\n- **[APIWeaver](https://github.com/GongRzhe/APIWeaver)** - An MCP server that dynamically creates MCP  servers from web API configurations. This allows you to easily integrate any REST API, GraphQL endpoint, or web service into an MCP-compatible tool that can be used by AI assistants like Claude.\n- **[Apollo IO MCP Server](https://github.com/AgentX-ai/apollo-io-mcp-server)** - apollo.io mcp server. Get/enrich contact data for people and organizations agentically.\n- **[Apple Books](https://github.com/vgnshiyer/apple-books-mcp)** - Interact with your library on Apple Books, manage your book collection, summarize highlights, notes, and much more.\n- **[Apple Calendar](https://github.com/Omar-v2/mcp-ical)** - An MCP server that allows you to interact with your macOS Calendar through natural language, including features such as event creation, modification, schedule listing, finding free time slots etc.\n- **[Apple Docs](https://github.com/kimsungwhee/apple-docs-mcp)** - A powerful Model Context Protocol (MCP) server that provides seamless access to Apple Developer Documentation through natural language queries. Search, explore, and get detailed information about Apple frameworks, APIs, sample code, and more directly in your AI-powered development environment.\n- **[Apple Script](https://github.com/peakmojo/applescript-mcp)** - MCP server that lets LLM run AppleScript code to to fully control anything on Mac, no setup needed.\n- **[APT MCP](https://github.com/GdMacmillan/apt-mcp-server)** - MCP server which runs debian package manager (apt) commands for you using ai agents.\n- **[Aranet4](https://github.com/diegobit/aranet4-mcp-server)** - MCP Server to manage your Aranet4 CO2 sensor. Fetch data and store in a local SQLite. Ask questions about historical data.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[ArangoDB Graph](https://github.com/PCfVW/mcp-arangodb-async)** - Async-first Python architecture, wrapping the official [python-arango driver](https://github.com/arangodb/python-arango) with graph management capabilities, content conversion utilities (JSON, Markdown, YAML and Table), backup/restore functionality, and graph analytics capabilities; the 33 MCP tools use strict [Pydantic](https://github.com/pydantic/pydantic) validation.\n- **[Arduino](https://github.com/vishalmysore/choturobo)** - MCP Server that enables AI-powered robotics using Claude AI and Arduino (ESP32) for real-world automation and interaction with robots.\n- **[arXiv API](https://github.com/prashalruchiranga/arxiv-mcp-server)** - An MCP server that enables interacting with the arXiv API using natural language.\n- **[arxiv-latex-mcp](https://github.com/takashiishida/arxiv-latex-mcp)** - MCP server that fetches and processes arXiv LaTeX sources for precise interpretation of mathematical expressions in papers.\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Atlassian Server (by phuc-nt)](https://github.com/phuc-nt/mcp-atlassian-server)** - An MCP server that connects AI agents (Cline, Claude Desktop, Cursor, etc.) to Atlassian Jira & Confluence, enabling data queries and actions through the Model Context Protocol.\n- **[Attestable MCP](https://github.com/co-browser/attestable-mcp-server)** - An MCP server running inside a trusted execution environment (TEE) via Gramine, showcasing remote attestation using [RA-TLS](https://gramine.readthedocs.io/en/stable/attestation.html). This allows an MCP client to verify the server before connecting.\n- **[Audius](https://github.com/glassBead-tc/audius-mcp-atris)** - Audius + AI = Atris. Interact with fans, stream music, tip your favorite artists, and more on Audius: all through Claude.\n- **[AutoML](https://github.com/emircansoftware/MCP_Server_DataScience)** – An MCP server for data analysis workflows including reading, preprocessing, feature engineering, model selection, visualization, and hyperparameter tuning.\n- **[AX-Platform](https://github.com/AX-MCP/PaxAI?tab=readme-ov-file#mcp-setup-guides)** - AI Agent collaboration platform. Collaborate on tasks, share context, and coordinate workflows.\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM.\n- **[AWS Athena](https://github.com/lishenxydlgzs/aws-athena-mcp)** - An MCP server for AWS Athena to run SQL queries on Glue Catalog.\n- **[AWS Cognito](https://github.com/gitCarrot/mcp-server-aws-cognito)** - An MCP server that connects to AWS Cognito for authentication and user management.\n- **[AWS Cost Explorer](https://github.com/aarora79/aws-cost-explorer-mcp-server)** - Optimize your AWS spend (including Amazon Bedrock spend) with this MCP server by examining spend across regions, services, instance types and foundation models ([demo video](https://www.youtube.com/watch?v=WuVOmYLRFmI&feature=youtu.be)).\n- **[AWS Resources Operations](https://github.com/baryhuang/mcp-server-aws-resources-python)** - Run generated python code to securely query or modify any AWS resources supported by boto3.\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents.\n- **[AWS SES](https://github.com/aws-samples/sample-for-amazon-ses-mcp)** Sample MCP Server for Amazon SES (SESv2). See [AWS blog post](https://aws.amazon.com/blogs/messaging - and-targeting/use-ai-agents-and-the-model-context-protocol-with-amazon-ses/) for more details.\n- **[Azure ADX](https://github.com/pab1it0/adx-mcp-server)** - Query and analyze Azure Data Explorer databases.\n- **[Azure DevOps](https://github.com/Vortiago/mcp-azure-devops)** - An MCP server that provides a bridge to Azure DevOps services, enabling AI assistants to query and manage work items.\n- **[Azure MCP Hub](https://github.com/Azure-Samples/mcp)** - A curated list of all MCP servers and related resources for Azure developers by **[Arun Sekhar](https://github.com/achandmsft)**\n- **[Azure OpenAI DALL-E 3 MCP Server](https://github.com/jacwu/mcp-server-aoai-dalle3)** - An MCP server for Azure OpenAI DALL-E 3 service to generate image from text.\n- **[Azure Wiki Search](https://github.com/coder-linping/azure-wiki-search-server)** - An MCP that enables AI to query the wiki hosted on Azure Devops Wiki.\n- **[Baidu AI Search](https://github.com/baidubce/app-builder/tree/master/python/mcp_server/ai_search)** - Web search with Baidu Cloud's AI Search\n- **[BambooHR MCP](https://github.com/encoreshao/bamboohr-mcp)** - An MCP server that interfaces with the BambooHR APIs, providing access to employee data, time tracking, and HR management features.\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n- **[Basic Memory](https://github.com/basicmachines-co/basic-memory)** - Local-first knowledge management system that builds a semantic graph from Markdown files, enabling persistent memory across conversations with LLMs.\n- **[BGG MCP](https://github.com/kkjdaniel/bgg-mcp)** (by kkjdaniel) - MCP to enable interaction with the BoardGameGeek API via AI tooling.\n- **[Bible](https://github.com/trevato/bible-mcp)** - Add biblical context to your generative AI applications.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Bilibili](https://github.com/wangshunnn/bilibili-mcp-server)** - This MCP server provides tools to fetch Bilibili user profiles, video metadata, search videos, and more.\n- **[Binance](https://github.com/ethancod1ng/binance-mcp-server)** - Cryptocurrency trading and market data access through Binance API integration.\n- **[Binance](https://github.com/AnalyticAce/BinanceMCPServer)** (by dosseh shalom) - Unofficial tools and server implementation for Binance's Model Context Protocol (MCP). Designed to support developers building crypto trading AI Agents.\n- **[Bing Web Search API](https://github.com/leehanchung/bing-search-mcp)** (by hanchunglee) - Server implementation for Microsoft Bing Web Search API.\n- **[BioMCP](https://github.com/genomoncology/biomcp)** (by imaurer) - Biomedical research assistant server providing access to PubMed, ClinicalTrials.gov, and MyVariant.info.\n- **[bioRxiv](https://github.com/JackKuo666/bioRxiv-MCP-Server)** - 🔍 Enable AI assistants to search and access bioRxiv papers through a simple MCP interface.\n- **[Bitable MCP](https://github.com/lloydzhou/bitable-mcp)** (by lloydzhou) - MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.\n- **[Blender](https://github.com/ahujasid/blender-mcp)** (by ahujasid) - Blender integration allowing prompt enabled 3D scene creation, modeling and manipulation.\n- **[Blender MCP](https://github.com/pranav-deshmukh/blender-mcp)** - MCP server to create professional like 3d scenes on blender using natural language.\n- **[Blockbench MCP Plugin](https://github.com/jasonjgardner/blockbench-mcp-plugin)** (by jasonjgardner) - Blockbench plugin to connect AI agents to Blockbench's JavaScript API. Allows for creating and editing 3D models or pixel art textures with AI in Blockbench.\n- **[Blockchain MCP](https://github.com/tatumio/blockchain-mcp)** - MCP Server for Blockchain Data from **[Tatum](http://tatum.io/mcp)** that instantly unlocks blockchain access for your AI agents. This official Tatum MCP server connects to any LLM in seconds.\n- **[Bluesky](https://github.com/semioz/bluesky-mcp)** (by semioz) - An MCP server for Bluesky, a decentralized social network. It enables automated interactions with the AT Protocol, supporting features like posting, liking, reposting, timeline management, and profile operations.\n- **[Bluetooth MCP Server](https://github.com/Hypijump31/bluetooth-mcp-server)** - Control Bluetooth devices and manage connections through natural language commands, including device discovery, pairing, and audio controls.\n- **[BNBChain MCP](https://github.com/bnb-chain/bnbchain-mcp)** - An MCP server for interacting with BSC, opBNB, and the Greenfield blockchain.\n- **[Braintree](https://github.com/QuentinCody/braintree-mcp-server)** - Unofficial PayPal Braintree payment gateway MCP Server for AI agents to process payments, manage customers, and handle transactions securely.\n- **[Brazilian Law](https://github.com/pdmtt/brlaw_mcp_server/)** (by pdmtt) - Agent-driven research on Brazilian law using official sources.\n- **[BreakoutRoom](https://github.com/agree-able/room-mcp)** - Agents accomplishing goals together in p2p rooms\n- **[Browser MCP](https://github.com/bytedance/UI-TARS-desktop/tree/main/packages/agent-infra/mcp-servers/browser)** (by UI-TARS) - A fast, lightweight MCP server that empowers LLMs with browser automation via Puppeteer’s structured accessibility data, featuring optional vision mode for complex visual understanding and flexible, cross-platform configuration.\n- **[browser-use](https://github.com/co-browser/browser-use-mcp-server)** (by co-browser) - browser-use MCP server with dockerized playwright + chromium + vnc. supports stdio & resumable http.\n- **[BrowserLoop](https://github.com/mattiasw/browserloop)** - An MCP server for taking screenshots of web pages using Playwright. Supports high-quality capture with configurable formats, viewport sizes, cookie-based authentication, and both full page and element-specific screenshots.\n- **[Bsc-mcp](https://github.com/TermiX-official/bsc-mcp)** The first MCP server that serves as the bridge between AI and BNB Chain, enabling AI agents to execute complex on-chain operations through seamless integration with the BNB Chain, including transfer, swap, launch, security check on any token and even more.\n- **[BugBug MCP Server](https://github.com/simplypixi/bugbug-mcp-server)** - Unofficial MCP server for BugBug API.\n- **[BVG MCP Server - (Unofficial) ](https://github.com/svkaizoku/mcp-bvg)** - Unofficial MCP server for Berliner Verkehrsbetriebe Api.\n- **[Bybit](https://github.com/ethancod1ng/bybit-mcp-server)** - A Model Context Protocol (MCP) server for integrating AI assistants with Bybit cryptocurrency exchange APIs, enabling automated trading, market data access, and account management.\n- **[CAD-MCP](https://github.com/daobataotie/CAD-MCP#)** (by daobataotie) - Drawing CAD(Line,Circle,Text,Annotation...) through MCP server, supporting mainstream CAD software.\n- **[Calculator](https://github.com/githejie/mcp-server-calculator)** - This server enables LLMs to use calculator for precise numerical calculations.\n- **[CalDAV MCP](https://github.com/dominik1001/caldav-mcp)** - A CalDAV MCP server to expose calendar operations as tools for AI assistants.\n- **[Calendly-mcp-server](https://github.com/meAmitPatil/calendly-mcp-server)** - Open source calendly mcp server.\n- **[Catalysis Hub](https://github.com/QuentinCody/catalysishub-mcp-server)** - Unofficial MCP server for searching and retrieving scientific data from the Catalysis Hub database, providing access to computational catalysis research and surface reaction data.\n- **[CCTV VMS MCP](https://github.com/jyjune/mcp_vms)** - A Model Context Protocol (MCP) server designed to connect to a CCTV recording program (VMS) to retrieve recorded and live video streams. It also provides tools to control the VMS software, such as showing live or playback dialogs for specific channels at specified times.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chess.com](https://github.com/pab1it0/chess-mcp)** - Access Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.\n- **[ChessPal Chess Engine (stockfish)](https://github.com/wilson-urdaneta/chesspal-mcp-engine)** - A Stockfish-powered chess engine exposed as an MCP server. Calculates best moves and supports both HTTP/SSE and stdio transports.\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[Chrome history](https://github.com/vincent-pli/chrome-history-mcp)** - Talk with AI about your browser history, get fun ^_^\n- **[CIViC](https://github.com/QuentinCody/civic-mcp-server)** - MCP server for the Clinical Interpretation of Variants in Cancer (CIViC) database, providing access to clinical variant interpretations and genomic evidence for cancer research.\n- **[Claude Thread Continuity](https://github.com/peless/claude-thread-continuity)** - Persistent memory system enabling Claude Desktop conversations to resume with full context across sessions. Maintains conversation history, project states, and user preferences for seamless multi-session workflows.\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[CLDGeminiPDF Analyzer](https://github.com/tfll37/CLDGeminiPDF-Analyzer)** - MCP server tool enabling sharing large PDF files to Google LLMs via API for further/additional analysis and response retrieval to Claude Desktop.\n- **[ClearML MCP](https://github.com/prassanna-ravishankar/clearml-mcp)** - Get comprehensive ML experiment context and analysis directly from [ClearML](https://clear.ml) in your AI conversations.\n- **[ClickUp](https://github.com/TaazKareem/clickup-mcp-server)** - MCP server for ClickUp task management, supporting task creation, updates, bulk operations, and markdown descriptions.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[CockroachDB](https://github.com/amineelkouhen/mcp-cockroachdb)** - MCP server enabling AI agents and LLMs to manage, monitor, and query **[CockroachDB](https://www.cockroachlabs.com/)** using natural language.\n- **[CockroachDB MCP Server](https://github.com/viragtripathi/cockroachdb-mcp-server)** – Full - featured MCP implementation built with FastAPI and CockroachDB. Supports schema bootstrapping, JSONB storage, LLM-ready CLI, and optional `/debug` endpoints.\n- **[code-assistant](https://github.com/stippi/code-assistant)** - A coding assistant MCP server that allows to explore a code-base and make changes to code. Should be used with trusted repos only (insufficient protection against prompt injections).\n- **[code-context-provider-mcp](https://github.com/AB498/code-context-provider-mcp)** - MCP server that provides code context and analysis for AI assistants. Extracts directory structure and code symbols using WebAssembly Tree-sitter parsers without Native Dependencies.\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[CoinMarketCap](https://github.com/shinzo-labs/coinmarketcap-mcp)** - Implements the complete [CoinMarketCap](https://coinmarketcap.com/) API for accessing cryptocurrency market data, exchange information, and other blockchain-related metrics.\n- **[commands](https://github.com/g0t4/mcp-server-commands)** - Run commands and scripts. Just like in a terminal.\n- **[Companies House MCP](https://github.com/stefanoamorelli/companies-house-mcp)** (by Stefano Amorelli) - MCP server to connect with the UK Companies House API.\n- **[computer-control-mcp](https://github.com/AB498/computer-control-mcp)** - MCP server that provides computer control capabilities, like mouse, keyboard, OCR, etc. using PyAutoGUI, RapidOCR, ONNXRuntime Without External Dependencies.\n- **[Computer-Use - Remote MacOS Use](https://github.com/baryhuang/mcp-remote-macos-use)** - Open-source out-of-the-box alternative to OpenAI Operator, providing a full desktop experience and optimized for using remote macOS machines as autonomous AI agents.\n- **[Congress.gov API](https://github.com/AshwinSundar/congress_gov_mcp)** - An MCP server to interact with real-time data from the Congress.gov API, which is the official API for the United States Congress.\n- **[consul-mcp](https://github.com/kocierik/consul-mcp-server)** - A consul MCP server for service management, health check and Key-Value Store\n- **[consult7](https://github.com/szeider/consult7)** - Analyze large codebases and document collections using high-context models via OpenRouter, OpenAI, or Google AI -- very useful, e.g., with Claude Code\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Context Crystallizer](https://github.com/hubertciebiada/context-crystallizer)** - AI Context Engineering tool that transforms large repositories into crystallized, AI-consumable knowledge through systematic analysis and optimization.\n- **[MCP Context Provider](https://github.com/doobidoo/MCP-Context-Provider)** - Static server that provides AI models with persistent tool-specific context and rules, preventing context loss between chat sessions and enabling consistent behavior across interactions.\n- **[context-portal](https://github.com/GreatScottyMac/context-portal)** - Context Portal (ConPort) is a memory bank database system that effectively builds a project-specific knowledge graph, capturing entities like decisions, progress, and architecture, along with their relationships. This serves as a powerful backend for Retrieval Augmented Generation (RAG), enabling AI assistants to access precise, up-to-date project information.\n- **[cplusplus-mcp](https://github.com/kandrwmrtn/cplusplus_mcp)** - Semantic C++ code analysis using libclang. Enables Claude to understand C++ codebases through AST parsing rather than text search - find classes, navigate inheritance, trace function calls, and explore code relationships.\n- **[CreateveAI Nexus](https://github.com/spgoodman/createveai-nexus-server)** - Open-Source Bridge Between AI Agents and Enterprise Systems, with simple custom API plug-in capabilities (including close compatibility with ComfyUI nodes), support for Copilot Studio's MCP agent integations, and support for Azure deployment in secure environments with secrets stored in Azure Key Vault, as well as straightforward on-premises deployment.\n- **[CRASH](https://github.com/nikkoxgonzales/crash-mcp)** - MCP server for structured, iterative reasoning and thinking with flexible validation, confidence tracking, revision mechanisms, and branching support.\n- **[Creatify](https://github.com/TSavo/creatify-mcp)** - MCP Server that exposes Creatify AI API capabilities for AI video generation, including avatar videos, URL-to-video conversion, text-to-speech, and AI-powered editing tools.\n- **[Cronlytic](https://github.com/Cronlytic/cronlytic-mcp-server)** - Create CRUD operations for serverless cron jobs through [Cronlytic](https://cronlytic.com) MCP Server\n- **[crypto-feargreed-mcp](https://github.com/kukapay/crypto-feargreed-mcp)**  -  Providing real-time and historical Crypto Fear & Greed Index data.\n- **[crypto-indicators-mcp](https://github.com/kukapay/crypto-indicators-mcp)**  -  An MCP server providing a range of cryptocurrency technical analysis indicators and strategies.\n- **[crypto-sentiment-mcp](https://github.com/kukapay/crypto-sentiment-mcp)**  -  An MCP server that delivers cryptocurrency sentiment analysis to AI agents.\n- **[cryptopanic-mcp-server](https://github.com/kukapay/cryptopanic-mcp-server)** - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.\n- **[CSV Editor](https://github.com/santoshray02/csv-editor)** - Comprehensive CSV processing with 40+ operations for data manipulation, analysis, and validation. Features auto-save, undo/redo, and handles GB+ files. Built with FastMCP & Pandas.\n- **[Cursor MCP Installer](https://github.com/matthewdcage/cursor-mcp-installer)** - A tool to easily install and configure other MCP servers within Cursor IDE, with support for npm packages, local directories, and Git repositories.\n- **[CVE Intelligence Server](https://github.com/gnlds/mcp-cve-intelligence-server-lite)** – Provides vulnerability intelligence via multi - source CVE data, essential exploit discovery, and EPSS risk scoring through the MCP. Useful for security research, automation, and agent workflows.\n- **[D365FO](https://github.com/mafzaal/d365fo-client)** - A comprehensive MCP server for Microsoft Dynamics 365 Finance & Operations (D365 F&O) that provides easy access to OData endpoints, metadata operations, label management, and AI assistant integration.\n- **[Dagster](https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-dg-cli)** - An MCP server to easily build data pipelines using [Dagster](https://dagster.io/).\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Databricks](https://github.com/JordiNeil/mcp-databricks-server)** - Allows LLMs to run SQL queries, list and get details of jobs executions in a Databricks account.\n- **[Databricks Genie](https://github.com/yashshingvi/databricks-genie-MCP)** - A server that connects to the Databricks Genie, allowing LLMs to ask natural language questions, run SQL queries, and interact with Databricks conversational agents.\n- **[Databricks Smart SQL](https://github.com/RafaelCartenet/mcp-databricks-server)** - Leveraging Databricks Unity Catalog metadata, perform smart efficient SQL queries to solve Ad-hoc queries and explore data.\n- **[DataCite](https://github.com/QuentinCody/datacite-mcp-server)** - Unofficial MCP server for DataCite, providing access to research data and publication metadata through DataCite's REST API and GraphQL interface for scholarly research discovery.\n- **[Datadog](https://github.com/GeLi2001/datadog-mcp-server)** - Datadog MCP Server for application tracing, monitoring, dashboard, incidents queries built on official datadog api.\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DataWorks](https://github.com/aliyun/alibabacloud-dataworks-mcp-server)** - A Model Context Protocol (MCP) server that provides tools for AI, allowing it to interact with the [DataWorks](https://www.alibabacloud.com/help/en/dataworks/) Open API through a standardized interface. This implementation is based on the Alibaba Cloud Open API and enables AI agents to perform cloud resources operations seamlessly.\n- **[Data4library](https://github.com/isnow890/data4library-mcp)** (by isnow890) - MCP server for Korea's Library Information Naru API, providing comprehensive access to public library data, book searches, loan status, reading statistics, and GPS-based nearby library discovery across South Korea.\n\n- **[DaVinci Resolve](https://github.com/samuelgursky/davinci-resolve-mcp)** - MCP server integration for DaVinci Resolve providing powerful tools for video editing, color grading, media management, and project control.\n- **[DBHub](https://github.com/bytebase/dbhub/)** - Universal database MCP server connecting to MySQL, MariaDB, PostgreSQL, and SQL Server.\n- **[Deebo](https://github.com/snagasuri/deebo-prototype)** – Agentic debugging MCP server that helps AI coding agents delegate and fix hard bugs through isolated multi-agent hypothesis testing.\n- **[Deep Research](https://github.com/reading-plus-ai/mcp-server-deep-research)** - Lightweight MCP server offering Grok/OpenAI/Gemini/Perplexity-style automated deep research exploration and structured reporting.\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[Depyler](https://github.com/paiml/depyler/blob/main/docs/mcp-integration.md)** - Energy-efficient Python-to-Rust transpiler with progressive verification, enabling AI assistants to convert Python code to safe, performant Rust while reducing energy consumption by 75-85%.\n- **[deploy-mcp](https://github.com/alexpota/deploy-mcp)** - Universal deployment tracker for AI assistants with live status badges and deployment monitoring.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DesktopCommander](https://github.com/wonderwhy-er/DesktopCommanderMCP)** - Let AI edit and manage files on your computer, run terminal commands, and connect to remote servers via SSH - all powered by one of the most popular local MCP servers.\n- **[Devcontainer](https://github.com/AI-QL/mcp-devcontainers)** - An MCP server for devcontainer to generate and configure development containers directly from devcontainer configuration files.\n- **[DevDb](https://github.com/damms005/devdb-vscode?tab=readme-ov-file#mcp-configuration)** - An MCP server that runs right inside the IDE, for connecting to MySQL, Postgres, SQLite, and MSSQL databases.\n- **[DevOps AI Toolkit](https://github.com/vfarcic/dot-ai)** - AI-powered development productivity platform that enhances software development workflows through intelligent automation and AI-driven assistance.\n- **[DevOps-MCP](https://github.com/wangkanai/devops-mcp)** - Dynamic Azure DevOps MCP server with directory-based authentication switching, supporting work items, repositories, builds, pipelines, and multi-project management with local configuration files.\n- **[DGIdb](https://github.com/QuentinCody/dgidb-mcp-server)** - MCP server for the Drug Gene Interaction Database (DGIdb), providing access to drug-gene interaction data, druggable genome information, and pharmacogenomics research.\n- **[Dicom](https://github.com/ChristianHinge/dicom-mcp)** - An MCP server to query and retrieve medical images and for parsing and reading dicom-encapsulated documents (pdf etc.).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discogs](https://github.com/cswkim/discogs-mcp-server)** - An MCP server that connects to the Discogs API for interacting with your music collection.\n- **[Discord](https://github.com/v-3/discordmcp)** - An MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Discord](https://github.com/SaseQ/discord-mcp)** - An MCP server, which connects to Discord through a bot, and provides comprehensive integration with Discord.\n- **[Discord](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/discord)** - For Discord API integration by Klavis AI\n- **[Discourse](https://github.com/AshDevFr/discourse-mcp-server)** - An MCP server to search Discourse posts on a Discourse forum.\n- **[DocBase](https://help.docbase.io/posts/3925317)** - Official MCP server for DocBase API integration, enabling post management, user collaboration, group administration, and more.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Docker](https://github.com/0xshariq/docker-mcp-server)** - Docker MCP Server provides advanced, unified Docker management via CLI and MCP workflows, supporting containers, images, volumes, networks, and orchestration.\n- **[Docs](https://github.com/da1z/docsmcp)** - Enable documentation access for the AI agent, supporting llms.txt and other remote or local files.\n- **[documcp](https://github.com/tosin2013/documcp)** - An MCP server for intelligent document processing and management, supporting multiple formats and document operations.\n- **[Docy](https://github.com/oborchers/mcp-server-docy)** - Docy gives your AI direct access to the technical documentation it needs, right when it needs it. No more outdated information, broken links, or rate limits - just accurate, real-time documentation access for more precise coding assistance.\n- **[Dodo Payments](https://github.com/dodopayments/dodopayments-node/tree/main/packages/mcp-server)** - Enables AI agents to securely perform payment operations via a lightweight, serverless-compatible interface to the [Dodo Payments](https://dodopayments.com) API.\n- **[Domain Tools](https://github.com/deshabhishek007/domain-tools-mcp-server)** - A Model Context Protocol (MCP) server for comprehensive domain analysis: WHOIS, DNS records, and DNS health checks.\n- **[DPLP](https://github.com/szeider/mcp-dblp)**  - Searches the [DBLP](https://dblp.org) computer science bibliography database.\n- **[Druid MCP Server](https://github.com/iunera/druid-mcp-server)** - STDIO/SEE MCP Server for Apache Druid by [iunera](https://www.iunera.com) that provides extensive tools, resources, and prompts for managing and analyzing Druid clusters.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[dune-analytics-mcp](https://github.com/kukapay/dune-analytics-mcp)** -  A mcp server that bridges Dune Analytics data to AI agents.\n- **[DynamoDB-Toolbox](https://www.dynamodbtoolbox.com/docs/databases/actions/mcp-toolkit)** - Leverages your Schemas and Access Patterns to interact with your [DynamoDB](https://aws.amazon.com/dynamodb) Database using natural language.\n- **[eBook-mcp](https://github.com/onebirdrocks/ebook-mcp)** - A lightweight MCP server that allows LLMs to read and interact with your personal PDF and EPUB ebooks. Ideal for building AI reading assistants or chat-based ebook interfaces.\n- **[ECharts MCP Server](https://github.com/hustcc/mcp-echarts)** - Generate visual charts using ECharts with AI MCP dynamically, used for chart generation and data analysis.\n- **[EDA MCP Server](https://github.com/NellyW8/mcp-EDA)** - A comprehensive Model Context Protocol server for Electronic Design Automation tools, enabling AI assistants to synthesize Verilog with Yosys, simulate designs with Icarus Verilog, run complete ASIC flows with OpenLane, and view results with GTKWave and KLayout.\n- **[EdgeOne Pages MCP](https://github.com/TencentEdgeOne/edgeone-pages-mcp)** - An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.\n- **[Edwin](https://github.com/edwin-finance/edwin/tree/main/examples/mcp-server)** - MCP server for edwin SDK - enabling AI agents to interact with DeFi protocols across EVM, Solana and other blockchains.\n- **[eechat](https://github.com/Lucassssss/eechat)** - An open-source, cross-platform desktop application that seamlessly connects with MCP servers, across Linux, macOS, and Windows.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Email](https://github.com/Shy2593666979/mcp-server-email)** - This server enables users to send emails through various email providers, including Gmail, Outlook, Yahoo, Sina, Sohu, 126, 163, and QQ Mail. It also supports attaching files from specified directories, making it easy to upload attachments along with the email content.\n- **[Email SMTP](https://github.com/egyptianego17/email-mcp-server)** - A simple MCP server that lets your AI agent send emails and attach files through SMTP.\n- **[Enhance Prompt](https://github.com/FelixFoster/mcp-enhance-prompt)** - An MCP service for enhance you prompt.\n- **[Entrez](https://github.com/QuentinCody/entrez-mcp-server)** - Unofficial MCP server for NCBI Entrez databases, providing access to PubMed articles, gene information, protein data, and other biomedical research resources through NCBI's E-utilities API.\n- **[Ergo Blockchain MCP](https://github.com/marctheshark3/ergo-mcp)** -An MCP server to integrate Ergo Blockchain Node and Explorer APIs for checking address balances, analyzing transactions, viewing transaction history, performing forensic analysis of addresses, searching for tokens, and monitoring network status.\n- **[ESP MCP Server](https://github.com/horw/esp-mcp)** - An MCP server that integrates ESP IDF commands like building and flashing code for ESP Microcontrollers using an LLM.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[EVM MCP Server](https://github.com/mcpdotdirect/evm-mcp-server)** - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.\n- **[Excel](https://github.com/haris-musa/excel-mcp-server)** - Excel manipulation including data reading/writing, worksheet management, formatting, charts, and pivot table.\n- **[Excel to JSON MCP by WTSolutions](https://github.com/he-yang/excel-to-json-mcp)** - MCP Server providing a standardized interface for converting (1) Excel or CSV data into JSON format ;(2) Excel(.xlsx) file into Structured JSON.\n- **[Extended Memory](https://github.com/ssmirnovpro/extended-memory-mcp)** - Persistent memory across Claude conversations with multi-project support, automatic importance scoring, and tag-based organization. Production-ready with 400+ tests.\n- **[F1](https://github.com/AbhiJ2706/f1-mcp/tree/main)** - Access to Formula 1 data including race results, driver information, lap times, telemetry, and circuit details.\n- **[Fabric MCP](https://github.com/aci-labs/ms-fabric-mcp)** - Microsoft Fabric MCP server to accelerate working in your Fabric Tenant with the help of your favorite LLM models.\n- **[Fabric Real-Time Intelligence MCP](https://github.com/Microsoft/fabric-rti-mcp)** - Official Microsoft Fabric RTI server to accelerate working with Eventhouse, Azure Data Explorer(Kusto), Eventstreams and other RTI items using your favorite LLM models.\n- **[fabric-mcp-server](https://github.com/adapoet/fabric-mcp-server)** - The fabric-mcp-server is an MCP server that integrates [Fabric](https://github.com/danielmiessler/fabric) patterns with [Cline](https://cline.bot/), exposing them as tools for AI-driven task execution and enhancing Cline's capabilities.\n- **[Fal MCP Server](https://github.com/raveenb/fal-mcp-server)** - Generate AI images, videos, and music using Fal.ai models (FLUX, Stable Diffusion, MusicGen) directly in Claude\n- **[Facebook Ads](https://github.com/gomarble-ai/facebook-ads-mcp-server)** - MCP server acting as an interface to the Facebook Ads, enabling programmatic access to Facebook Ads data and management features.\n- **[Facebook Ads 10xeR](https://github.com/fortytwode/10xer)** - Advanced Facebook Ads MCP server with enhanced creative insights, multi-dimensional breakdowns, and comprehensive ad performance analytics.\n- **[Facebook Ads Library](https://github.com/trypeggy/facebook-ads-library-mcp)** - Get any answer from the Facebook Ads Library, conduct deep research including messaging, creative testing and comparisons in seconds.\n- **[Fantasy PL](https://github.com/rishijatia/fantasy-pl-mcp)** - Give your coding agent direct access to up-to date Fantasy Premier League data\n- **[Fastmail MCP](https://github.com/MadLlama25/fastmail-mcp)** - Access Fastmail via JMAP: list/search emails, send and move mail, handle attachments/threads, plus contacts and calendar tools.\n- **[fastn.ai – Unified API MCP Server](https://github.com/fastnai/mcp-fastn)** - A remote, dynamic MCP server with a unified API that connects to 1,000+ tools, actions, and workflows, featuring built-in authentication and monitoring.\n- **[FDIC BankFind MCP Server - (Unofficial)](https://github.com/clafollett/fdic-bank-find-mcp-server)** - The is a MCPserver that brings the power of FDIC BankFind APIs straight to your AI tools and workflows. Structured U.S. banking data, delivered with maximum vibes. 😎📊\n- **[FPE Demo MCP](https://github.com/Horizon-Digital-Engineering/fpe-demo-mcp)** - FF3 Format Preserving Encryption with authentication patterns for secure data protection in LLM workflows.\n- **[Federal Reserve Economic Data (FRED)](https://github.com/stefanoamorelli/fred-mcp-server)** (by Stefano Amorelli) - Community developed MCP server to interact with the Federal Reserve Economic Data.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[Feyod](https://github.com/jeroenvdmeer/feyod-mcp)** - A server that answers questions about football matches, and specialised in the football club Feyenoord.\n- **[Fast Filesystem](https://github.com/efforthye/fast-filesystem-mcp)** - Advanced filesystem operations with large file handling capabilities and Claude-optimized features. Provides fast file reading/writing, sequential reading for large files, directory operations, file search, and streaming writes with backup & recovery.\n- **[FHIR](https://github.com/wso2/fhir-mcp-server)** - A Model Context Protocol server that provides seamless, standardized access to Fast Healthcare Interoperability Resources (FHIR) data from any compatible FHIR server. Designed for easy integration with AI tools, developer workflows, and healthcare applications, it enables natural language and programmatic search, retrieval, and analysis of clinical data.\n- **[Fibaro HC3](https://github.com/coding-sailor/mcp-server-hc3)** - MCP server for Fibaro Home Center 3 smart home systems.\n- **[Figma](https://github.com/GLips/Figma-Context-MCP)** - Give your coding agent direct access to Figma file data, helping it one-shot design implementation.\n- **[Figma](https://github.com/paulvandermeijs/figma-mcp)** - A blazingly fast MCP server to read and export your Figma design files.\n- **[Figma to Flutter](https://github.com/mhmzdev/figma-flutter-mcp)** - Write down clean and better Flutter code from Figma design tokens and enrich nodes data in Flutter terminology.\n- **[Files](https://github.com/flesler/mcp-files)** - Enables agents to quickly find and edit code in a codebase with surgical precision. Find symbols, edit them everywhere.\n- **[FileSystem Server](https://github.com/Oncorporation/filesystem_server)** - Local MCP server for Visual Studio 2022 that provides code-workspace functionality by giving AI agents selective access to project folders and files\n- **[finmap.org](https://github.com/finmap-org/mcp-server)** MCP server provides comprehensive historical data from the US, UK, Russian and Turkish stock exchanges. Access sectors, tickers, company profiles, market cap, volume, value, and trade counts, as well as treemap and histogram visualizations.\n- **[Firebase](https://github.com/gannonh/firebase-mcp)** - Server to interact with Firebase services including Firebase Authentication, Firestore, and Firebase Storage.\n- **[Fish Audio](https://github.com/da-okazaki/mcp-fish-audio-server)** - Text-to-Speech integration with Fish Audio's API, supporting multiple voices, streaming, and real-time playback\n- **[FitBit MCP Server](https://github.com/NitayRabi/fitbit-mcp)** - An MCP server that connects to FitBit API using a token obtained from OAuth flow.\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Fluent-MCP](https://github.com/modesty/fluent-mcp)** - MCP server for Fluent (ServiceNow SDK) providing access to ServiceNow SDK CLI, API specifications, code snippets, and more.\n- **[Flyworks Avatar](https://github.com/Flyworks-AI/flyworks-mcp)** - Fast and free zeroshot lipsync MCP server.\n- **[fmp-mcp-server](https://github.com/vipbat/fmp-mcp-server)** - Enable your agent for M&A analysis and investment banking workflows. Access company profiles, financial statements, ratios, and perform sector analysis with the [Financial Modeling Prep APIs]\n- **[FoundationModels](https://github.com/phimage/mcp-foundation-models)** - An MCP server that integrates Apple's [FoundationModels](https://developer.apple.com/documentation/foundationmodels) for text generation.\n- **[Foursquare](https://github.com/foursquare/foursquare-places-mcp)** - Enable your agent to recommend places around the world with the [Foursquare Places API](https://location.foursquare.com/products/places-api/)\n- **[FrankfurterMCP](https://github.com/anirbanbasu/frankfurtermcp)** - MCP server acting as an interface to the [Frankfurter API](https://frankfurter.dev/) for currency exchange data.\n- **[freqtrade-mcp](https://github.com/kukapay/freqtrade-mcp)** - An MCP server that integrates with the Freqtrade cryptocurrency trading bot.\n- **[Geolocation](https://github.com/jackyang25/geolocation-mcp-server)** - WalkScore API integration for walkability, transit, and bike scores.\n- **[GDB](https://github.com/pansila/mcp_server_gdb)** - A GDB/MI protocol server based on the MCP protocol, providing remote application debugging capabilities with AI assistants.\n- **[ggRMCP](https://github.com/aalobaidi/ggRMCP)** - A Go gateway that converts gRPC services into MCP-compatible tools, allowing AI models like Claude to directly call your gRPC services.\n- **[Gemini Bridge](https://github.com/eLyiN/gemini-bridge)** - Lightweight MCP server that enables Claude to interact with Google's Gemini AI through the official CLI, offering zero API costs and stateless architecture.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Git](https://github.com/geropl/git-mcp-go)** - Allows LLM to interact with a local git repository, incl. optional push support.\n- **[Git Mob](https://github.com/Mubashwer/git-mob-mcp-server)** - MCP server that interfaces with the [git-mob](https://github.com/Mubashwer/git-mob) CLI app for managing co-authors in git commits during pair/mob programming.\n- **[Github](https://github.com/0xshariq/github-mcp-server)** - A Model Context Protocol (MCP) server that provides 29 Git operations + 11 workflow combinations for AI assistants and developers. This server exposes comprehensive Git repository management through a standardized interface, enabling AI models and developers to safely manage complex version control workflows.\n- **[GitHub Actions](https://github.com/ko1ynnky/github-actions-mcp-server)** - A Model Context Protocol (MCP) server for interacting with GitHub Actions.\n- **[GitHub Enterprise MCP](https://github.com/ddukbg/github-enterprise-mcp)** - A Model Context Protocol (MCP) server for interacting with GitHub Enterprise.\n- **[GitHub GraphQL](https://github.com/QuentinCody/github-graphql-mcp-server)** - Unofficial GitHub MCP server that provides access to GitHub's GraphQL API, enabling more powerful and flexible queries for repository data, issues, pull requests, and other GitHub resources.\n- **[GitHub Projects](https://github.com/redducklabs/github-projects-mcp)** — Manage GitHub Projects with full GraphQL API access including items, fields, and milestones.\n- **[GitHub Repos Manager MCP Server](https://github.com/kurdin/github-repos-manager-mcp)** - Token-based GitHub automation management. No Docker, Flexible configuration, 80+ tools with direct API integration.\n- **[GitMCP](https://github.com/idosal/git-mcp)** - gitmcp.io is a generic remote MCP server to connect to ANY GitHub repository or project documentation effortlessly\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Gmail](https://github.com/Ayush-k-Shukla/gmail-mcp-server)** - A Simple MCP server for Gmail with support for all basic operations with oauth2.0.\n- **[Gmail Headless](https://github.com/baryhuang/mcp-headless-gmail)** - Remote hostable MCP server that can get and send Gmail messages without local credential or file system setup.\n- **[Gmail MCP](https://github.com/gangradeamitesh/mcp-google-email)** - A Gmail service implementation using MCP (Model Context Protocol) that provides functionality for sending, receiving, and managing emails through Gmail's API.\n- **[Gnuradio](https://github.com/yoelbassin/gnuradioMCP)** - An MCP server for GNU Radio that enables LLMs to autonomously create and modify RF .grc flowcharts.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[GOAT](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)** - Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\n- **[Godot](https://github.com/Coding-Solo/godot-mcp)** - An MCP server providing comprehensive Godot engine integration for project editing, debugging, and scene management.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Goodnews](https://github.com/VectorInstitute/mcp-goodnews)** - A simple MCP server that delivers curated positive and uplifting news stories.\n- **[Gopher MCP](https://github.com/cameronrye/gopher-mcp)** - Modern, cross-platform MCP server that enables AI assistants to browse and interact with both Gopher protocol and Gemini protocol resources safely and efficiently.\n- **[Google Ads](https://github.com/gomarble-ai/google-ads-mcp-server)** - MCP server acting as an interface to the Google Ads, enabling programmatic access to Facebook Ads data and management features.\n- **[Google Analytics](https://github.com/surendranb/google-analytics-mcp)** - Google Analytics MCP Server to bring data across 200+ dimensions & metrics for LLMs to analyse.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Maps](https://github.com/Mastan1301/google_maps_mcp)** - Provides location results using Google Places API.\n- **[Google Sheets](https://github.com/xing5/mcp-google-sheets)** - Access and editing data to your Google Sheets.\n- **[Google Sheets](https://github.com/rohans2/mcp-google-sheets)** - An MCP Server written in TypeScript to access and edit data in your Google Sheets.\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Google Vertex AI Search](https://github.com/ubie-oss/mcp-vertexai-search)** - Provides Google Vertex AI Search results by grounding a Gemini model with your own private data\n- **[Google Workspace](https://github.com/taylorwilsdon/google_workspace_mcp)** - Comprehensive Google Workspace MCP with full support for Calendar, Drive, Gmail, and Docs using Streamable HTTP or SSE transport.\n- **[Google-Scholar](https://github.com/JackKuo666/Google-Scholar-MCP-Server)** - Enable AI assistants to search and access Google Scholar papers through a simple MCP interface.\n- **[Google-Scholar](https://github.com/mochow13/google-scholar-mcp)** - An MCP server for Google Scholar written in TypeScript with Streamable HTTP transport, along with a `client` implementations that integrates with the server and interacts with `gemini-2.5-flash`.\n- **[gx-mcp-server](https://github.com/davidf9999/gx-mcp-server)** - Expose Great Expectations data validation and quality checks as MCP tools for AI agents.\n- **[Gralio SaaS Database](https://github.com/tymonTe/gralio-mcp)** - Find and compare SaaS products, including data from G2 reviews, Trustpilot, Crunchbase, Linkedin, pricing, features and more, using [Gralio MCP](https://gralio.ai/mcp) server\n- **[GraphQL](https://github.com/drestrepom/mcp_graphql)** - Comprehensive GraphQL API integration that automatically exposes each GraphQL query as a separate tool.\n- **[GraphQL Schema](https://github.com/hannesj/mcp-graphql-schema)** - Allow LLMs to explore large GraphQL schemas without bloating the context.\n- **[HackMD](https://github.com/yuna0x0/hackmd-mcp)** (by yuna0x0) - An MCP server for HackMD, a collaborative markdown editor. It allows users to create, read, and update documents in HackMD using the Model Context Protocol.\n- **[HAProxy](https://github.com/tuannvm/haproxy-mcp-server)** - A Model Context Protocol (MCP) server for HAProxy implemented in Go, leveraging HAProxy Runtime API.\n- **[Hashing MCP Server](https://github.com/kanad13/MCP-Server-for-Hashing)** - MCP Server with cryptographic hashing functions e.g. SHA256, MD5, etc.\n- **[HDW LinkedIn](https://github.com/horizondatawave/hdw-mcp-server)** - Access to profile data and management of user account with [HorizonDataWave.ai](https://horizondatawave.ai/).\n- **[HeatPump](https://github.com/jiweiqi/heatpump-mcp-server)** — Residential heat - pump sizing & cost-estimation tools by **HeatPumpHQ**.\n- **[Helm Chart CLI](https://github.com/jeff-nasseri/helm-chart-cli-mcp)** - Helm MCP provides a bridge between AI assistants and the Helm package manager for Kubernetes. It allows AI assistants to interact with Helm through natural language requests, executing commands like installing charts, managing repositories, and more.\n- **[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server)** - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\n- **[HLedger MCP](https://github.com/iiAtlas/hledger-mcp)** - Double entry plain text accounting, right in your LLM! This MCP enables comprehensive read, and (optional) write access to your local [HLedger](https://hledger.org/) accounting journals.\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[Home Assistant](https://github.com/voska/hass-mcp)** - Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Human-In-the-Loop](https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server)** - A powerful MCP Server that enables AI assistants like Claude to interact with humans through intuitive GUI dialogs. This server bridges the gap between automated AI processes and human decision-making by providing real-time user input tools, choices, confirmations, and feedback mechanisms.\n- **[Human-use](https://github.com/RapidataAI/human-use)** - Instant human feedback through an MCP, have your AI interact with humans around the world. Powered by [Rapidata](https://www.rapidata.ai/)\n- **[Hyperledger Fabric Agent Suite](https://github.com/padmarajkore/hlf-fabric-agent)** - Modular toolkit for managing Fabric test networks and chaincode lifecycle via MCP tools.\n- **[Hyperliquid](https://github.com/mektigboy/server-hyperliquid)** - An MCP server implementation that integrates the Hyperliquid SDK for exchange data.\n- **[Hypertool](https://github.com/toolprint/hypertool-mcp)** – MCP that let's you create hot - swappable, \"persona toolsets\" from multiple MCP servers to reduce tool overload and improve tool execution.\n- **[hyprmcp](https://github.com/stefanoamorelli/hyprmcp)** (by Stefano Amorelli) - Lightweight MCP server for `hyprland`.\n- **[iFlytek SparkAgent Platform](https://github.com/iflytek/ifly-spark-agent-mcp)** - This is a simple example of using MCP Server to invoke the task chain of the  iFlytek SparkAgent Platform.\n- **[iFlytek Workflow](https://github.com/iflytek/ifly-workflow-mcp-server)** - Connect to iFlytek Workflow via the MCP server and run your own Agent.\n- **[IIIF](https://github.com/code4history/IIIF_MCP)** - Comprehensive IIIF (International Image Interoperability Framework) protocol support for searching, navigating, and manipulating digital collections from museums, libraries, and archives worldwide.\n- **[Image Generation](https://github.com/GongRzhe/Image-Generation-MCP-Server)** - This MCP server provides image generation capabilities using the Replicate Flux model.\n- **[ImageSorcery MCP](https://github.com/sunriseapps/imagesorcery-mcp)** - ComputerVision-based 🪄 sorcery of image recognition and editing tools for AI assistants.\n- **[IMAP MCP](https://github.com/dominik1001/imap-mcp)** - 📧 An IMAP Model Context Protocol (MCP) server to expose IMAP operations as tools for AI assistants.\n- **[iMCP](https://github.com/loopwork-ai/iMCP)** - A macOS app that provides an MCP server for your iMessage, Reminders, and other Apple services.\n- **[InfluxDB](https://github.com/idoru/influxdb-mcp-server)** - Run queries against InfluxDB OSS API v2.\n- **[Intelligent Image Generator](https://github.com/shinpr/mcp-image)** - Turn casual prompts into professional-quality images with AI enhancement\n- **[Inner Monologue MCP](https://github.com/abhinav-mangla/inner-monologue-mcp)** - A cognitive reasoning tool that enables LLMs to engage in private, structured self-reflection and multi-step reasoning before generating responses, improving response quality and problem-solving capabilities.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Instagram DM](https://github.com/trypeggy/instagram_dm_mcp)** - Send DMs on Instagram via your LLM\n- **[interactive-mcp](https://github.com/ttommyth/interactive-mcp)** - Enables interactive LLM workflows by adding local user prompts and chat capabilities directly into the MCP loop.\n- **[Intercom](https://github.com/raoulbia-ai/mcp-server-for-intercom)** - An MCP-compliant server for retrieving customer support tickets from Intercom. This tool enables AI assistants like Claude Desktop and Cline to access and analyze your Intercom support tickets.\n- **[iOS Simulator](https://github.com/InditexTech/mcp-server-simulator-ios-idb)** - A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators (iPhone, iPad, etc.) through natural language commands.\n- **[ipybox](https://github.com/gradion-ai/ipybox)** - Python code execution sandbox based on IPython and Docker. Stateful code execution, file transfer between host and container, configurable network access. See [ipybox MCP server](https://gradion-ai.github.io/ipybox/mcp-server/) for details.\n- **[it-tools-mcp](https://github.com/wrenchpilot/it-tools-mcp)** - A Model Context Protocol server that recreates [CorentinTh it-tools](https://github.com/CorentinTh/it-tools) utilities for AI agents, enabling access to a wide range of developer tools (encoding, decoding, conversions, and more) via MCP.\n- **[itemit MCP](https://github.com/umin-ai/itemit-mcp)** - itemit is Asset Tracking MCP that manage the inventory, monitoring and location tracking that powers over +300 organizations.\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[iTerm MCP Server](https://github.com/rishabkoul/iTerm-MCP-Server)** - A Model Context Protocol (MCP) server implementation for iTerm2 terminal integration. Able to manage multiple iTerm Sessions.\n- **[Java Decompiler](https://github.com/idachev/mcp-javadc)** - Decompile Java bytecode into readable source code from .class files, package names, or JAR archives using CFR decompiler\n- **[JavaFX](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jfx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, SQLite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[Jenkins](https://github.com/jasonkylelol/jenkins-mcp-server)** - This MCP server allow you to create Jenkins tasks.\n- **[JMeter](https://github.com/QAInsights/jmeter-mcp-server)** - Run load testing using Apache JMeter via MCP-compliant tools.\n- **[Job Searcher](https://github.com/0xDAEF0F/job-searchoor)** - A FastMCP server that provides tools for retrieving and filtering job listings based on time period, keywords, and remote work preferences.\n- **[jobswithgpt](https://github.com/jobswithgpt/mcp)** - Job search MCP using jobswithgpt which indexes 500K+ public job listings and refreshed continously.\n- **[joinly](https://github.com/joinly-ai/joinly)** - MCP server to interact with browser-based meeting platforms (Zoom, Teams, Google Meet). Enables AI agents to send bots to online meetings, gather live transcripts, speak text, and send messages in the meeting chat.\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[JSON](https://github.com/kehvinbehvin/json-mcp-filter)** - JSON schema generation and filtering server with TypeScript type creation optimised for retrieving relevant context JSON data using quicktype-core and support for shape-based data extraction, nested object filtering, and array processing operations.\n- **[JSON to Excel by WTSolutions](https://github.com/he-yang/json-to-excel-mcp)** - Converting JSON into CSV format string from (1) JSON data, (2) URLs pointing to publiclly available .json files.\n- **[JSON2Video MCP](https://github.com/omergocmen/json2video-mcp-server)** - A Model Context Protocol (MCP) server implementation for programmatically generating videos using the json2video API. This server exposes powerful video generation and status-checking tools for use with LLMs, agents, or any MCP-compatible client.\n- **[jupiter-mcp](https://github.com/kukapay/jupiter-mcp)** - An MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API.\n- **[Jupyter MCP Server](https://github.com/datalayer/jupyter-mcp-server)** – Real-time interaction with Jupyter Notebooks, allowing AI to edit, document and execute code for data analysis, visualization etc. Compatible with any Jupyter deployment (local, JupyterHub, ...).\n- **[Jupyter Notebook](https://github.com/jjsantos01/jupyter-notebook-mcp)** - connects Jupyter Notebook to Claude AI, allowing Claude to directly interact with and control Jupyter Notebooks. This integration enables AI-assisted code execution, data analysis, visualization, and more.\n- **[k8s-multicluster-mcp](https://github.com/razvanmacovei/k8s-multicluster-mcp)** - An MCP server for interact with multiple Kubernetes clusters simultaneously using multiple kubeconfig files.\n- **[Kafka](https://github.com/tuannvm/kafka-mcp-server)** - A Model Context Protocol (MCP) server for Apache Kafka implemented in Go, leveraging [franz-go](https://github.com/twmb/franz-go).\n- **[Kafka Schema Registry MCP](https://github.com/aywengo/kafka-schema-reg-mcp)** \\ - A comprehensive MCP server for Kafka Schema Registry with 48 tools, multi-registry support, authentication, and production safety features. Enables AI-powered schema management with enterprise-grade capabilities including schema contexts, migration tools, and comprehensive export capabilities.\n- **[kafka-mcp](https://github.com/shivamxtech/kafka-mcp)** - An MCP Server for Kafka clusters to interact with kafka environment via tools on messages, topics, offsets, partitions for consumer and producers along with seamless integration with MCP clients.\n- **[Keycloak](https://github.com/idoyudha/mcp-keycloak)** - The Keycloak MCP Server designed for agentic applications to manage and search data in Keycloak efficiently.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Keycloak MCP Server](https://github.com/sshaaf/keycloak-mcp-server)** - designed to work with Keycloak for identity and access management, with about 40+ tools covering, Users, Realms, Clients, Roles, Groups, IDPs, Authentication. Native builds available.\n- **[Kibana MCP](https://github.com/TocharianOU/mcp-server-kibana.git)** (by TocharianOU) - A community-maintained MCP server implementation that allows any MCP-compatible client to access and manage Kibana instances through natural language or programmatic requests.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[KiCad MCP](https://github.com/lamaalrajih/kicad-mcp)** - MCP server for KiCad on Mac, Windows, and Linux.\n- **[kill-process-mcp](https://github.com/misiektoja/kill-process-mcp)** - List and terminate OS processes via natural language queries\n- **[Kindred Offers & Discounts MCP](https://github.com/kindred-app/mcp-server-kindred-offers)** (by kindred.co) - This MCP server allows you to get live deals and offers/coupons from e-commerce merchant sites all over the world.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kokoro TTS](https://github.com/mberg/kokoro-tts-mcp)** - Use Kokoro text to speech to convert text to MP3s with optional autoupload to S3.\n- **[Kong Konnect](https://github.com/Kong/mcp-konnect)** - A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.\n- **[Korea Stock Analyzer](https://github.com/Mrbaeksang/korea-stock-analyzer-mcp)** - Analyze Korean stocks (KOSPI/KOSDAQ) with 6 legendary investment strategies including Buffett, Lynch, Graham, Greenblatt, Fisher, and Templeton.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Kubernetes and OpenShift](https://github.com/manusa/kubernetes-mcp-server)** - A powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for any Kubernetes resource, this server provides specialized tools to interact with your cluster.\n- **[KubeSphere](https://github.com/kubesphere/ks-mcp-server)** - The KubeSphere MCP Server is a Model Context Protocol(MCP) server that provides integration with KubeSphere APIs, enabling to get resources from KubeSphere. Divided into four tools modules: Workspace Management, Cluster Management, User and Roles, Extensions Center.\n- **[Kukapay MCP Servers](https://github.com/kukapay/kukapay-mcp-servers)** - A comprehensive suite of Model Context Protocol (MCP) servers dedicated to cryptocurrency, blockchain, and Web3 data aggregation, analysis, and services from Kukapay.\n- **[kwrds.ai](https://github.com/mkotsollaris/kwrds_ai_mcp)** - Keyword research, people also ask, SERP and other SEO tools for [kwrds.ai](https://www.kwrds.ai/)\n- **[KYC-mcp-server](https://github.com/vishnurudra-ai/KYC-mcp-server)** - Know Your Computer (KYC) - MCP Server compatible with Claude Desktop. Comprehensive system diagnostics for Windows, Mac OS and Linux operating system with AI-powered recommendations.\n- **[Langflow-DOC-QA-SERVER](https://github.com/GongRzhe/Langflow-DOC-QA-SERVER)** - A Model Context Protocol server for document Q&A powered by Langflow. It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.\n- **[Language Server](https://github.com/isaacphi/mcp-language-server)** - MCP Language Server helps MCP enabled clients navigate codebases more easily by giving them access to semantic tools like get definition, references, rename, and diagnostics.\n- **[Lark(Feishu)](https://github.com/kone-net/mcp_server_lark)** - A Model Context Protocol(MCP) server for Lark(Feishu) sheet, message, doc and etc.\n- **[Lazy Toggl MCP](https://github.com/movstox/lazy-toggl-mcp)** - Simple unofficial MCP server to track time via Toggl API\n- **[lean-lsp-mcp](https://github.com/oOo0oOo/lean-lsp-mcp)** - Interact with the [Lean theorem prover](https://lean-lang.org/) via the Language Server Protocol.\n- **[librenms-mcp](https://github.com/mhajder/librenms-mcp)** - MCP server for [LibreNMS](https://www.librenms.org/) management\n- **[libvirt-mcp](https://github.com/MatiasVara/libvirt-mcp)** - Allows LLM to interact with libvirt thus enabling to create, destroy or list the Virtual Machines in a system.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[LINE](https://github.com/amornpan/py-mcp-line)** (by amornpan) - Implementation for LINE Bot integration that enables Language Models to read and analyze LINE conversations through a standardized interface. Features asynchronous operation, comprehensive logging, webhook event handling, and support for various message types.\n- **[Linear](https://github.com/tacticlaunch/mcp-linear)** - Interact with Linear project management system.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[Linear (Go)](https://github.com/geropl/linear-mcp-go)** - Allows LLM to interact with Linear's API via a single static binary.\n- **[Linear MCP](https://github.com/anoncam/linear-mcp)** - Full blown implementation of the Linear SDK to support comprehensive Linear management of projects, initiatives, issues, users, teams and states.\n- **[Linked API MCP](https://github.com/Linked-API/linkedapi-mcp)** - MCP server that lets AI assistants control LinkedIn accounts and retrieve real-time data.\n- **[Listmonk MCP Server](https://github.com/rhnvrm/listmonk-mcp)** (by rhnvrm) - Full API coverage of [Listmonk](https://github.com/knadh/listmonk) email marketing FOSS.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[lldb-mcp](https://github.com/stass/lldb-mcp)** - A Model Context Protocol server for LLDB that provides LLM-driven debugging.\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[Local History](https://github.com/xxczaki/local-history-mcp)** – MCP server for accessing VS Code/Cursor's Local History.\n- **[Locust](https://github.com/QAInsights/locust-mcp-server)** - Allows running and analyzing Locust tests using MCP compatible clients.\n- **[Loki](https://github.com/scottlepp/loki-mcp)** - Golang based MCP Server to query logs from [Grafana Loki](https://github.com/grafana/loki).\n- **[Loki MCP Server](https://github.com/mo-silent/loki-mcp-server)** - Python based MCP Server for querying and analyzing logs from Grafana Loki with advanced filtering and authentication support.\n- **[LottieFiles](https://github.com/junmer/mcp-server-lottiefiles)** - Searching and retrieving Lottie animations from [LottieFiles](https://lottiefiles.com/)\n- **[lsp-mcp](https://github.com/Tritlo/lsp-mcp)** - Interact with Language Servers usint the Language Server Protocol to provide additional context information via hover, code actions and completions.\n- **[Lspace](https://github.com/Lspace-io/lspace-server)** - Turn scattered ChatGPT/Claude/Cursor conversations into persistent, searchable knowledge.\n- **[lucene-mcp-server](https://github.com/VivekKumarNeu/MCP-Lucene-Server)** - spring boot server using Lucene for fast document search and management.\n- **[lucid-mcp-server](https://github.com/smartzan63/lucid-mcp-server)** – An MCP server for Lucidchart and Lucidspark: connect, search, and obtain text representations of your Lucid documents and diagrams via LLM - driven AI Vision analysis. [npm](https://www.npmjs.com/package/lucid-mcp-server)\n- **[LunarCrush Remote MCP](https://github.com/lunarcrush/mcp-server)** - Get the latest social metrics and posts for both current live social context as well as historical metrics in LLM and token optimized outputs. Ideal for automated trading / financial advisory.\n- **[mac-messages-mcp](https://github.com/carterlasalle/mac_messages_mcp)** - An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.\n- **[Maestro MCP](https://github.com/maestro-org/maestro-mcp)** - An MCP server for interacting with Bitcoin via the Maestro RPC API.\n- **[Magg: The MCP Aggregator](https://github.com/sitbon/magg)** - A meta-MCP server that acts as a universal hub, allowing LLMs to autonomously discover, install, and orchestrate multiple MCP servers - essentially giving AI assistants the power to extend their own capabilities on-demand. Includes `mbro`, a powerful CLI MCP server browser with scripting capability.\n- **[Mailchimp MCP](https://github.com/AgentX-ai/mailchimp-mcp)** - Allows AI agents to interact with the Mailchimp API (read-only)\n- **[MalwareBazaar_MCP](https://github.com/mytechnotalent/MalwareBazaar_MCP)** (by Kevin Thomas) - An AI-driven MCP server that autonomously interfaces with MalwareBazaar, delivering real-time threat intel and sample metadata for authorized cybersecurity research workflows.\n- **[Mandoline](https://github.com/mandoline-ai/mandoline-mcp-server)** - Enable AI assistants to reflect on, critique, and continuously improve their own performance using Mandoline's evaluation framework.\n- **[Matrix](https://github.com/mjknowles/matrix-mcp-server)** - Interact with a Matrix homeserver.\n- **[man-mcp-server](https://github.com/guyru/man-mcp-server)** - MCP to search and access man pages on the local machine.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[Markdown2doc](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/pandoc)** - Convert between various file formats using Pandoc\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[market-fiyati](https://github.com/mtcnbzks/market-fiyati-mcp-server)** - The MCP server for marketfiyati.org.tr, offering grocery price search and comparison across Turkish markets.)\n- **[Markitdown](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/markitdown)** - Convert files to Markdown\n- **[Masquerade](https://github.com/postralai/masquerade)** - Redact sensitive information from your PDF documents before sending them to Claude. Masquerade serves as a privacy firewall for LLMs.\n- **[MasterGo](https://github.com/mastergo-design/mastergo-magic-mcp)** - The server designed to connect MasterGo design tools with AI models. It enables AI models to directly retrieve DSL data from MasterGo design files.\n- **[Matlab-MCP-Tools](https://github.com/neuromechanist/matlab-mcp-tools)** - An MCP to write and execute MATLAB scripts, maintain workspace context between MCP calls, visualize plots, and perform section-by-section analysis of MATLAB code with full access to MATLAB's computational capabilities.\n- **[Maton](https://github.com/maton-ai/agent-toolkit/tree/main/modelcontextprotocol)** - Connect to your SaaS tools like HubSpot, Salesforce, and more.\n- **[Maven Tools MCP](https://github.com/arvindand/maven-tools-mcp)** - Maven Central dependency intelligence for JVM build tools. Supports all build tools (Maven, Gradle, SBT, Mill) with Context7 integration for documentation support.\n- **[MCP-Airflow-API](https://github.com/call518/MCP-Airflow-API)** - Model Context Protocol (MCP) server for Apache Airflow API integration. Provides comprehensive tools for managing Airflow clusters including service operations, configuration management, status monitoring, and request tracking.\n- **[mcpcap](https://github.com/mcpcap/mcpcap)** - A modular Python MCP (Model Context Protocol) Server for analyzing PCAP files.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Create](https://github.com/tesla0225/mcp-create)** - A dynamic MCP server management service that creates, runs, and manages Model Context Protocol servers on-the-fly.\n- **[MCP Documentation Server](https://github.com/andrea9293/mcp-documentation-server)** - Server that provides local-first document management and semantic search via embeddings or Gemini AI (recommended). Optimized for performance with disk persistence, an in-memory index, and caching.\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[MCP ProjectManage OpenProject](https://github.com/boma086/mcp-projectmanage-openproject)** - This server provides the MCP service for project weekly reports, with project management information supplied by OpenProject.\n- **[MCP Proxy Server](https://github.com/TBXark/mcp-proxy)** - An MCP proxy server that aggregates and serves multiple MCP resource servers through a single HTTP server.\n- **[MCP Server Creator](https://github.com/GongRzhe/MCP-Server-Creator)** - A powerful Model Context Protocol (MCP) server that creates other MCP servers! This meta-server provides tools for dynamically generating FastMCP server configurations and Python code.\n- **[MCP Server Generator](https://github.com/SerhatUzbas/mcp-server-generator)** - An MCP server that creates and manages  MCP servers! Helps both non-technical users and developers build custom JavaScript MCP servers with AI guidance, automatic dependency management, and Claude Desktop integration.\n- **[MCP STDIO to Streamable HTTP Adapter](https://github.com/pyroprompts/mcp-stdio-to-streamable-http-adapter)** - Connect to Streamable HTTP MCP Servers even if the MCP Client only supports STDIO.\n- **[MCP-Ambari-API](https://github.com/call518/MCP-Ambari-API)** - Model Context Protocol (MCP) server for Apache Ambari API integration. This project provides tools for managing Hadoop clusters, including service operations, configuration management, status monitoring, and request tracking.\n- **[MCP-OpenStack-Ops](https://github.com/call518/MCP-OpenStack-Ops)** - Professional OpenStack operations automation via MCP server. Specialized tools for cluster monitoring, instance management, volume control & network analysis. FastMCP + OpenStack SDK + Bearer auth. Claude Desktop ready. Perfect for DevOps & cloud automation.\n- **[MCP-PostgreSQL-Ops](https://github.com/call518/MCP-PostgreSQL-Ops)** - Model Context Protocol (MCP) server for Apache Ambari API integration. This project provides tools for managing Hadoop clusters, including service operations, configuration management, status monitoring, and request tracking.\n- **[mcp-containerd](https://github.com/jokemanfire/mcp-containerd)** - The containerd MCP implemented by Rust supports the operation of the CRI interface.\n- **[MCP-Database-Server](https://github.com/executeautomation/mcp-database-server)** - Fastest way to interact with your Database such as SQL Server, SQLite and PostgreSQL\n- **[mcp-grep](https://github.com/erniebrodeur/mcp-grep)** - Python-based MCP server that brings grep functionality to LLMs. Supports common grep features including pattern searching, case-insensitive matching, context lines, and recursive directory searches.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-local-rag](https://github.com/nkapila6/mcp-local-rag)** - \"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search.\n- **[mcp-mcp](https://github.com/wojtyniak/mcp-mcp)** - Meta-MCP Server that acts as a tool discovery service for MCP clients.\n- **[mcp-meme-sticky](https://github.com/nkapila6/mcp-meme-sticky)** - Make memes or stickers using MCP server for WhatsApp or Telegram.\n- **[mcp-memory-service](https://github.com/doobidoo/mcp-memory-service)** - Universal MCP memory service providing semantic memory search, persistent storage, and autonomous memory consolidation for AI assistants across 13+ AI applications.\n- **[MCP-NixOS](https://github.com/utensils/mcp-nixos)** - A Model Context Protocol server that provides AI assistants with accurate, real-time information about NixOS packages, system options, Home Manager settings, and nix-darwin macOS configurations.\n- **[mcp-open-library](https://github.com/8enSmith/mcp-open-library)** - A Model Context Protocol (MCP) server for the Open Library API that enables AI assistants to search for book and author information.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[mcp-read-website-fast](https://github.com/just-every/mcp-read-website-fast)** - Fast, token-efficient web content extraction that converts websites to clean Markdown. Features Mozilla Readability, smart caching, polite crawling with robots.txt support, and concurrent fetching with minimal dependencies.\n- **[mcp-salesforce](https://github.com/lciesielski/mcp-salesforce-example)** - MCP server with basic demonstration of interactions with your Salesforce instance\n- **[mcp-sanctions](https://github.com/madupay/mcp-sanctions)** - Screen individuals and organizations against global sanctions lists (OFAC, SDN, UN, etc). Query by prompt or document upload.\n- **[mcp-screenshot-website-fast](https://github.com/just-every/mcp-screenshot-website-fast)** - High-quality screenshot capture optimized for Claude Vision API. Automatically tiles full pages into 1072x1072 chunks (1.15 megapixels) with configurable viewports and wait strategies for dynamic content.\n- **[mcp-server-leetcode](https://github.com/doggybee/mcp-server-leetcode)** - Practice and retrieve problems from LeetCode. Automate problem retrieval, solutions, and insights for coding practice and competitions.\n- **[Mcp-Swagger-Server](https://github.com/zaizaizhao/mcp-swagger-server)** (by zaizaizhao) - This MCP server transforms OpenAPI specifications into MCP tools, enabling AI assistants to interact with REST APIs through standardized protocol\n- **[MCP Dynamic Tool Groups](https://github.com/ECF/MCPToolGroups)** - Example MCP servers that use [annotated](https://github.com/spring-ai-community/mcp-annotations) Java interfaces/classes as 'tool groups'.  Using standard MCP annotations, service implementations can then, at runtime, be used to generate tool specifications, and then dynamically added or removed from MCP servers.   The functionality is demonstrated in a sample tool group, but can be similarly used for any API or service.\n- **[mcp-vision](https://github.com/groundlight/mcp-vision)** - An MCP server exposing HuggingFace computer vision models such as zero-shot object detection as tools, enhancing the vision capabilities of large language or vision-language models.\n- **[mcp-weather](https://github.com/TimLukaHorstmann/mcp-weather)** - Accurate weather forecasts via the AccuWeather API (free tier available).\n- **[KnowAir Weather MCP](https://github.com/shuowang-ai/Weather-MCP)** - A comprehensive Model Context Protocol (MCP) server providing real-time weather data, air quality monitoring, forecasts, and astronomical information powered by Caiyun Weather API.\n- **[mcp-youtube-extract](https://github.com/sinjab/mcp_youtube_extract)** - A Model Context Protocol server for YouTube operations, extracting video information and transcripts with intelligent fallback logic. Features comprehensive logging, error handling, and support for both auto-generated and manual transcripts.\n- **[mcp_weather](https://github.com/isdaniel/mcp_weather_server)** - Get weather information from https://api.open-meteo.com API.\n- **[MCPfinder](https://github.com/mcpfinder/server)** - The AI Agent's \"App Store\": Discover, install, and monetize AI capabilities — all within the MCP ecosystem.\n- **[MCPIgnore Filesytem](https://github.com/CyberhavenInc/filesystem-mcpignore)** - A Data Security First filesystem MCP server that implements .mcpignore to prevent MCP clients from accessing sensitive data.\n- **[MCPJungle](https://github.com/mcpjungle/MCPJungle)** - Self-hosted MCP Registry and Gateway for enterprise AI Agents\n- **[Md2doc](https://github.com/Yorick-Ryu/md2doc-mcp)** - Convert Markdown text to DOCX format using an external conversion service\n- **[MeasureSpace MCP](https://github.com/MeasureSpace/measure-space-mcp-server)** - A free [Model Context Protocol (MCP) Server](https://smithery.ai/server/@MeasureSpace/measure-space-mcp-server) that provides global weather, climate, air quality forecast and geocoding services by [measurespace.io](https://measurespace.io).\n- **[MediaWiki](https://github.com/ProfessionalWiki/MediaWiki-MCP-Server)** - A Model Context Protocol (MCP) Server that interacts with any MediaWiki wiki\n- **[MediaWiki MCP adapter](https://github.com/lucamauri/MediaWiki-MCP-adapter)** - A custom Model Context Protocol adapter for MediaWiki and WikiBase APIs\n- **[medRxiv](https://github.com/JackKuo666/medRxiv-MCP-Server)** - Enable AI assistants to search and access medRxiv papers through a simple MCP interface.\n- **[mem0-mcp](https://github.com/mem0ai/mem0-mcp)** - A Model Context Protocol server for Mem0, which helps with managing coding preferences.\n- **[Membase](https://github.com/unibaseio/membase-mcp)** - Save and query your agent memory in distributed way by Membase.\n- **[Meme MCP](https://github.com/lidorshimoni/meme-mcp)** - Generate memes via AI using the Imgflip API through the Model Context Protocol.\n- **[memento-mcp](https://github.com/gannonh/memento-mcp)** - Knowledge graph memory system built on Neo4j with semantic search, temporal awareness.\n- **[Meta Ads Remote MCP](https://github.com/pipeboard-co/meta-ads-mcp)** - Remote MCP server to interact with Meta Ads API - access, analyze, and manage Facebook, Instagram, and other Meta platforms advertising campaigns.\n- **[MetaTrader MCP](https://github.com/ariadng/metatrader-mcp-server)** - Enable AI LLMs to execute trades using MetaTrader 5 platform.\n- **[Metricool MCP](https://github.com/metricool/mcp-metricool)** - A Model Context Protocol server that integrates with Metricool's social media analytics platform to retrieve performance metrics and schedule content across networks like Instagram, Facebook, Twitter, LinkedIn, TikTok and YouTube.\n- **[Microsoft 365](https://github.com/merill/lokka)** - (by Merill) A Model Context Protocol (MCP) server for Microsoft 365. Includes support for all services including Teams, SharePoint, Exchange, OneDrive, Entra, Intune and more. See [Lokka](https://lokka.dev/) for more details.\n- **[Microsoft 365](https://github.com/softeria/ms-365-mcp-server)** - MCP server that connects to Microsoft Office and the whole Microsoft 365 suite using Graph API (including Outlook/mail, files, Excel, calendar)\n- **[Microsoft 365](https://github.com/pnp/cli-microsoft365-mcp-server)** - Single MCP server that allows to manage many different areas of Microsoft 365, for example: Entra ID, OneDrive, OneNote, Outlook, Planner, Power Apps, Power Automate, Power Platform, SharePoint Embedded, SharePoint Online, Teams, Viva Engage, and many more.\n- **[Microsoft 365 Files (SharePoint/OneDrive)](https://github.com/godwin3737/mcp-server-microsoft365-filesearch)** (by godwin3737) - MCP server with tools to search and get file content from Microsoft 365 including Onedrive and SharePoint. Works with Documents (pdf/docx), Presentations, Spreadsheets and Images.\n- **[Microsoft Teams](https://github.com/InditexTech/mcp-teams-server)** - MCP server that integrates Microsoft Teams messaging (read, post, mention, list members and threads)\n- **[Mifos X](https://github.com/openMF/mcp-mifosx)** - An MCP server for the Mifos X Open Source Banking useful for managing clients, loans, savings, shares, financial transactions and generating financial reports.\n- **[Mikrotik](https://github.com/jeff-nasseri/mikrotik-mcp)** - Mikrotik MCP server which cover networking operations (IP, DHCP, Firewall, etc)\n- **[Mindmap](https://github.com/YuChenSSR/mindmap-mcp-server)** (by YuChenSSR) - A server that generates mindmaps from input containing markdown code.\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[Modao Proto MCP](https://github.com/modao-dev/modao-proto-mcp)** - AI-powered HTML prototype generation server that converts natural language descriptions into complete HTML code with modern design and responsive layouts. Supports design description expansion and seamless integration with Modao workspace.\n- **[Mobile MCP](https://github.com/mobile-next/mobile-mcp)** (by Mobile Next) - MCP server for Mobile(iOS/Android) automation, app scraping and development using physical devices or simulators/emulators.\n- **[Monday.com (unofficial)](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MongoDB & Mongoose](https://github.com/nabid-pf/mongo-mongoose-mcp)** - MongoDB MCP Server with Mongoose Schema and Validation.\n- **[MongoDB Lens](https://github.com/furey/mongodb-lens)** - Full Featured MCP Server for MongoDB Databases.\n- **[Monzo](https://github.com/BfdCampos/monzo-mcp-bfdcampos)** - Access and manage your Monzo bank accounts through natural language, including balance checking, pot management, transaction listing, and transaction annotation across multiple account types (personal, joint, flex).\n- **[Morningstar](https://github.com/Morningstar/morningstar-mcp-server)** - MCP Server to interact with Morningstar Research, Editorial and Datapoints\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-MCP](https://github.com/daobataotie/mssql-mcp)** (by daobataotie) - MSSQL MCP that refer to the official website's SQLite MCP for modifications to adapt to MSSQL\n- **[MSSQL-MCP-Node](https://github.com/mihai-dulgheru/mssql-mcp-node)** (by mihai - dulgheru) – Node.js MCP server for Microsoft SQL Server featuring auto-detected single / multi-database configs, execute-SQL and schema tools, robust Zod validation, and optional Express endpoints for local testing\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[Multi-Model Advisor](https://github.com/YuChenSSR/multi-ai-advisor-mcp)** - A Model Context Protocol (MCP) server that orchestrates queries across multiple Ollama models, synthesizing their insights to deliver a comprehensive and multifaceted AI perspective on any given query.\n- **[Multicluster-MCP-Sever](https://github.com/yanmxa/multicluster-mcp-server)** - The gateway for GenAI systems to interact with multiple Kubernetes clusters.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[MySQL-Server](https://github.com/tonycai/mcp-mysql-server)** (by TonyCai) - MySQL Database Integration using Python script with configurable access controls and schema inspection, usng stdio mode to suitable local deployment, you can run it in docker container.\n- **[n8n](https://github.com/leonardsellem/n8n-mcp-server)** - This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, and deleting workflows, as well as monitoring their execution status.\n- **[Nacos MCP Router](https://github.com/nacos-group/nacos-mcp-router)** - This MCP(Model Context Protocol) Server provides tools to search, install, proxy other MCP servers.\n- **[NASA](https://github.com/ProgramComputer/NASA-MCP-server)** (by ProgramComputer) - Access to a unified gateway of NASA's data sources including but not limited to APOD, NEO, EPIC, GIBS.\n- **[NASA Image MCP Server](https://github.com/adithya1012/NASA-MCP-Server/blob/main/README.md)** - MCP server providing access to NASA's visual data APIs including Mars Rover photos, Earth satellite imagery (EPIC/GIBS), and Astronomy picture of the day. Features built-in image analysis tools with automatic format detection, compression, and base64 conversion for LLM integration.\n- **[Nasdaq Data Link](https://github.com/stefanoamorelli/nasdaq-data-link-mcp)** (by stefanoamorelli) - An MCP server to access, explore, and interact with Nasdaq Data Link's extensive and valuable financial and economic datasets.\n- **[National Parks](https://github.com/KyrieTangSheng/mcp-server-nationalparks)** - The server provides latest information of park details, alerts, visitor centers, campgrounds, hiking trails, and events for U.S. National Parks.\n- **[NAVER](https://github.com/pfldy2850/py-mcp-naver)** (by pfldy2850) - This MCP server provides tools to interact with various Naver services, such as searching blogs, news, books, and more.\n- **[Naver](https://github.com/isnow890/naver-search-mcp)** (by isnow890) - MCP server for Naver Search API integration, supporting blog, news, shopping search and DataLab analytics features.\n- **[NBA](https://github.com/Taidgh-Robinson/nba-mcp-server)** - This MCP server provides tools to fetch recent and historical NBA games including basic and advanced statistics.\n- **[NCI GDC](https://github.com/QuentinCody/nci-gdc-mcp-server)** - Unofficial MCP server for the National Cancer Institute's Genomic Data Commons (GDC), providing access to harmonized cancer genomic and clinical data for oncology research.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Netbird](https://github.com/aantti/mcp-netbird)** - List and analyze Netbird network peers, groups, policies, and more.\n- **[NetMind ParsePro](https://github.com/protagolabs/Netmind-Parse-PDF-MCP)** - The PDF Parser AI service, built and customized by the [NetMind](https://www.netmind.ai/) team.\n- **[Nikto MCP](https://github.com/weldpua2008/nikto-mcp)** (by weldpua2008) - A secure MCP server that enables AI agents to interact with Nikto web server scanner](- use with npx or docker).\n- **[NocoDB](https://github.com/edwinbernadus/nocodb-mcp-server)** - Read and write access to NocoDB database.\n- **[Node Code Sandbox](https://github.com/alfonsograziano/node-code-sandbox-mcp)** – A Node.js MCP server that spins up isolated Docker - based sandboxes for executing JavaScript snippets with on-the-fly npm dependency installation\n- **[nomad-mcp](https://github.com/kocierik/mcp-nomad)** - A server that provides a set of tools for managing Nomad clusters through the MCP.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[NPM Plus](https://github.com/shacharsol/js-package-manager-mcp)** - AI-powered JavaScript package management with security scanning, bundle analysis, and intelligent dependency management for MCP-compatible editors.\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[ntfy-mcp](https://github.com/teddyzxcv/ntfy-mcp)** (by teddyzxcv) - The MCP server that keeps you informed by sending the notification on phone using ntfy\n- **[ntfy-me-mcp](https://github.com/gitmotion/ntfy-me-mcp)** (by gitmotion) - An ntfy MCP server for sending/fetching ntfy notifications to your self-hosted ntfy server from AI Agents 📤 (supports secure token auth & more - use with npx or docker!)\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[OceanBase](https://github.com/yuanoOo/oceanbase_mcp_server)** - (by yuanoOo) A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases.\n- **[Octocode](https://github.com/bgauryy/octocode-mcp)** - (by Guy Bary) AI-powered developer assistant that enables advanced code research, analysis and discovery across GitHub and NPM realms in realtime\n- **[Odoo](https://github.com/ivnvxd/mcp-server-odoo)** - Connect AI assistants to Odoo ERP systems for business data access and workflow automation.\n- **[Office-PowerPoint-MCP-Server](https://github.com/GongRzhe/Office-PowerPoint-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft PowerPoint documents.\n- **[Office-Visio-MCP-Server](https://github.com/GongRzhe/Office-Visio-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Visio documents.\n- **[Office-Word-MCP-Server](https://github.com/GongRzhe/Office-Word-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Word documents.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OKX-MCP-Server](https://github.com/memetus/okx-mcp-playground)** - An MCP server provides various blockchain data and market price data via the OKX API. The server enables Claude to perform operations like retrieve assets prices, transaction data, account history data and trade instruction data.\n- **[OneNote](https://github.com/rajvirtual/MCP-Servers/tree/master/onenote)** - (by Rajesh Vijay) An MCP server that connects to Microsoft OneNote using the Microsoft Graph API. Reading notebooks, sections, and pages from OneNote,Creating new notebooks, sections, and pages in OneNote.\n- **[Onyx MCP Sandbox](https://github.com/avd1729/Onyx)** – (by Aravind) A secure MCP server that executes code in isolated Docker sandboxes. Supports Python, Java, C, C++, JavaScript, and Rust. Provides the `run_code` tool, enforces CPU/memory limits, includes comprehensive tests, and detailed setup instructions.\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[OpenAI WebSearch MCP](https://github.com/ConechoAI/openai-websearch-mcp)** - This is a Python-based MCP server that provides OpenAI `web_search` built-in tool.\n- **[OpenAlex.org MCP](https://github.com/drAbreu/alex-mcp)** - Professional MCP server providing ML-powered author disambiguation and comprehensive researcher profiles using the OpenAlex database.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenAPI AnyApi](https://github.com/baryhuang/mcp-server-any-openapi)** - Interact with large [OpenAPI](https://www.openapis.org/) docs using built-in semantic search for endpoints. Allows for customizing the MCP server prefix.\n- **[OpenAPI Schema](https://github.com/hannesj/mcp-openapi-schema)** - Allow LLMs to explore large [OpenAPI](https://www.openapis.org/) schemas without bloating the context.\n- **[OpenAPI Schema Explorer](https://github.com/kadykov/mcp-openapi-schema-explorer)** - Token-efficient access to local or remote OpenAPI/Swagger specs via MCP Resources.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenCV](https://github.com/GongRzhe/opencv-mcp-server)** - An MCP server providing OpenCV computer vision capabilities. This allows AI assistants and language models to access powerful computer vision tools.\n- **[OpenDota](https://github.com/asusevski/opendota-mcp-server)** - Interact with OpenDota API to retrieve Dota 2 match data, player statistics, and more.\n- **[OpenLink Generic Java Database Connectivity](https://github.com/OpenLinkSoftware/mcp-jdbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers)\n- **[OpenLink Generic Open Database Connectivity](https://github.com/OpenLinkSoftware/mcp-odbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers)\n- **[OpenLink Generic Python Open Database Connectivity](https://github.com/OpenLinkSoftware/mcp-pyodbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers) for PyODBC\n- **[OpenLink Generic SQLAlchemy Object-Relational Database Connectivity for PyODBC](https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server)** - Generic Database Management System (DBMS) access via SQLAlchemy (PyODBC) Connectors (Drivers)\n- **[OpenMetadata](https://github.com/yangkyeongmo/mcp-server-openmetadata)** - MCP Server for OpenMetadata, an open-source metadata management platform.\n- **[OpenNeuro](https://github.com/QuentinCody/open-neuro-mcp-server)** - Unofficial MCP server for OpenNeuro, providing access to open neuroimaging datasets, study metadata, and brain imaging data for neuroscience research and analysis.\n- **[OpenReview](https://github.com/anyakors/openreview-mcp-server)** - An MCP server for [OpenReview](https://openreview.net/) to fetch, read and save manuscripts from AI/ML conferences.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[OpenStack](https://github.com/wangsqly0407/openstack-mcp-server)** - MCP server implementation that provides OpenStack interaction.\n- **[Open Targets](https://github.com/QuentinCody/open-targets-mcp-server)** - Unofficial MCP server for the Open Targets Platform, providing access to target-disease associations, drug discovery data, and therapeutic hypothesis generation for biomedical research.\n- **[OpenWeather](https://github.com/mschneider82/mcp-openweather)** - Interact with the free openweathermap API to get the current and forecast weather for a location.\n- **[OpenZIM MCP](https://github.com/cameronrye/openzim-mcp)** - Modern, secure, and high-performance MCP server that enables AI models to access and search ZIM format knowledge bases offline, including Wikipedia and educational content archives.\n- **[Operative WebEvalAgent](https://github.com/Operative-Sh/web-eval-agent)** (by [Operative.sh](https://www.operative.sh)) - An MCP server to test, debug, and fix web applications autonomously.\n- **[OPNSense MCP](https://github.com/vespo92/OPNSenseMCP)** - MCP Server for OPNSense Firewall Management and API access\n- **[OpenAI GPT Image](https://github.com/SureScaleAI/openai-gpt-image-mcp)** - OpenAI GPT image generation/editing MCP server.\n- **[Optimade MCP](https://github.com/dianfengxiaobo/optimade-mcp-server)** - An MCP server conducts real-time material science data queries with the Optimade database (for example, elemental composition, crystal structure).\n- **[Oracle](https://github.com/marcelo-ochoa/servers)** (by marcelo-ochoa) - Oracle Database integration in NodeJS with configurable access controls, query explain, stats and schema inspection\n- **[Oracle Cloud Infrastructure (OCI)](https://github.com/karthiksuku/oci-mcp)** (by karthiksukumar) - Python MCP server for OCI infrastructure (Compute, Autonomous Database, Object Storage). Read-heavy by default with safe instance actions (start/stop/reset). Includes Claude Desktop config and `.env` compartment scoping.\n- **[Oura MCP server](https://github.com/tomekkorbak/oura-mcp-server)** - MCP server for Oura API to retrieve one's sleep data\n- **[Oura Ring](https://github.com/rajvirtual/oura-mcp-server)** (by Rajesh Vijay) - MCP Server to access and analyze your Oura Ring data. It provides a structured way to fetch and understand your health metrics.\n- **[Outline](https://github.com/Vortiago/mcp-outline)** - MCP Server to interact with [Outline](https://www.getoutline.com) knowledge base to search, read, create, and manage documents and their content, access collections, add comments, and manage document backlinks.\n- **[Outlook Mail + Calendar + OneDrive](https://github.com/Norcim133/OutlookMCPServer) - Virtual assistant with Outlook Mail, Calendar, and early OneDrive support (requires Azure admin).\n- **[Pacman](https://github.com/oborchers/mcp-server-pacman)** - An MCP server that provides package index querying capabilities. This server is able to search and retrieve information from package repositories like PyPI, npm, crates.io, Docker Hub, and Terraform Registry.\n- **[pancakeswap-poolspy-mcp](https://github.com/kukapay/pancakeswap-poolspy-mcp)** - An MCP server that tracks newly created liquidity pools on Pancake Swap.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[Paradex MCP](https://github.com/sv/mcp-paradex-py)** - MCP native server for interacting with Paradex platform, including fully features trading.\n- **[Parliament MCP]([https://github.com/sv/mcp-paradex-py](https://github.com/i-dot-ai/parliament-mcp))** - MCP server for querying UK parliamentary data.\n- **[PDF reader MCP](https://github.com/gpetraroli/mcp_pdf_reader)** - MCP server to read and search text in a local PDF file.\n- **[PDF Tools MCP](https://github.com/Sohaib-2/pdf-mcp-server)** - Comprehensive PDF manipulation toolkit (merge, split, encrypt, optimize and much more)\n- **[PDMT](https://github.com/paiml/pdmt)** - Pragmatic Deterministic MCP Templating - High-performance deterministic templating library with comprehensive todo validation, quality enforcement, and 0.0 temperature generation for reproducible outputs.\n- **[Peacock for VS Code](https://github.com/johnpapa/peacock-mcp)** - MCP Server for the Peacock extension for VS Code, coloring your world, one Code editor at a time. The main goal of the project is to show how an MCP server can be used to interact with APIs.\n- **[persistproc](https://github.com/irskep/persistproc)** - MCP server + command line tool that allows agents to see & control long-running processes like web servers.\n- **[Pexels](https://github.com/garylab/pexels-mcp-server)** - A MCP server providing access to Pexels Free Image API, enabling seamless search, retrieval, and download of high-quality royalty-free images.\n- **[Pharos](https://github.com/QuentinCody/pharos-mcp-server)** - Unofficial MCP server for the Pharos database by the National Center for Advancing Translational Sciences (NCATS), providing access to target, drug, and disease information for drug discovery research.\n- **[Phone MCP](https://github.com/hao-cyber/phone-mcp)** - 📱 A powerful plugin that lets you control your Android phone. Enables AI agents to perform complex tasks like automatically playing music based on weather or making calls and sending texts.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Pinner MCP](https://github.com/safedep/pinner-mcp)** - An MCP server for pinning GitHub Actions and container base images to their immutable SHA hashes to prevent supply chain attacks.\n- **[Pixelle MCP](https://github.com/AIDC-AI/Pixelle-MCP)** - An omnimodal AIGC framework that seamlessly converts ComfyUI workflows into MCP tools with zero code, enabling full-modal support for Text, Image, Sound, and Video generation with Chainlit-based web interface.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Plane](https://github.com/kelvin6365/plane-mcp-server)** - This MCP Server will help you to manage projects and issues through Plane's API\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Podbean](https://github.com/amurshak/podbeanMCP)** - MCP server for managing your podcasts, episodes, and analytics through the Podbean API. Allows for updating, adding, deleting podcasts, querying show description, notes, analytics, and more.\n- **[Polarsteps](https://github.com/remuzel/polarsteps-mcp)** - An MCP server to help you review your previous Trips and plan new ones!\n- **[PostgreSQL](https://github.com/ahmedmustahid/postgres-mcp-server)** - A PostgreSQL MCP server offering dual HTTP/Stdio transports for database schema inspection and read-only query execution with session management and Podman(or Docker) support.\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Powerdrill](https://github.com/powerdrillai/powerdrill-mcp)** - Interact with Powerdrill datasets, authenticated with [Powerdrill](https://powerdrill.ai) User ID and Project API Key.\n- **[Prefect](https://github.com/allen-munsch/mcp-prefect)** - MCP Server for workflow orchestration and ELT/ETL with Prefect Server, and Prefect Cloud [https://www.prefect.io/] using the `prefect` python client.\n- **[Productboard](https://github.com/kenjihikmatullah/productboard-mcp)** - Integrate the Productboard API into agentic workflows via MCP.\n- **[Prometheus](https://github.com/pab1it0/prometheus-mcp-server)** - Query and analyze Prometheus - open-source monitoring system.\n- **[Prometheus (TypeScript)](https://github.com/yanmxa/prometheus-mcp-server)** - Enable AI assistants to query Prometheus using natural language with TypeScript implementation.\n- **[Prometheus (Golang)](https://github.com/tjhop/prometheus-mcp-server/)** - A Prometheus MCP server with full API support for comprehensive management and deep interaction with Prometheus beyond basic query support. Written in go, it is a single binary install that is capable of STDIO, SSE, and HTTP transports for complex deployments. \n- **[PubChem](https://github.com/sssjiang/pubchem_mcp_server)** - extract drug information from pubchem API.\n- **[PubMed](https://github.com/JackKuo666/PubMed-MCP-Server)** - Enable AI assistants to search, access, and analyze PubMed articles through a simple MCP interface.\n- **[Pulumi](https://github.com/dogukanakkaya/pulumi-mcp-server)** - MCP Server to Interact with Pulumi API, creates and lists Stacks\n- **[Puppeteer vision](https://github.com/djannot/puppeteer-vision-mcp)** - Use Puppeteer to browse a webpage and return a high quality Markdown. Use AI vision capabilities to handle cookies, captchas, and other interactive elements automatically.\n- **[Pushover](https://github.com/ashiknesin/pushover-mcp)** - Send instant notifications to your devices using [Pushover.net](https://pushover.net/)\n- **[py-mcp-qdrant-rag](https://github.com/amornpan/py-mcp-qdrant-rag)** (by amornpan) - A Model Context Protocol server implementation that provides RAG capabilities through Qdrant vector database integration, enabling AI agents to perform semantic search and document retrieval with local or cloud-based embedding generation support across Mac, Linux, and Windows platforms.\n- **[pydantic/pydantic-ai/mcp-run-python](https://github.com/pydantic/pydantic-ai/tree/main/mcp-run-python)** - Run Python code in a secure sandbox via MCP tool calls, powered by Deno and Pyodide\n- **[Python CLI MCP](https://github.com/ofek/pycli-mcp)** - Interact with local Python command line applications.\n- **[QGIS](https://github.com/jjsantos01/qgis_mcp)** - connects QGIS to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.\n- **[Qiniu MCP Server](https://github.com/qiniu/qiniu-mcp-server)** - The Model Context Protocol (MCP) Server built on Qiniu Cloud products supports users in accessing Qiniu Cloud Storage, intelligent multimedia services, and more through this MCP Server within the context of AI large model clients.\n- **[QuantConnect](https://github.com/taylorwilsdon/quantconnect-mcp)** - QuantConnect Algorithmic Trading Platform Orchestration MCP - Agentic LLM Driven Trading Strategy Design, Research & Implementation.\n- **[Quarkus](https://github.com/quarkiverse/quarkus-mcp-servers)** - MCP servers for the Quarkus Java framework.\n- **[QuickChart](https://github.com/GongRzhe/Quickchart-MCP-Server)** - A Model Context Protocol server for generating charts using QuickChart.io\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAE](https://github.com/rae-api-com/rae-mcp)** - MPC Server to connect your preferred model with rae-api.com, Roya Academy of Spanish Dictionary\n- **[RAG Local](https://github.com/renl/mcp-rag-local)** - This MCP server for storing and retrieving text passages locally based on their semantic meaning.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Raindrop.io](https://github.com/hiromitsusasaki/raindrop-io-mcp-server)** - An integration that allows LLMs to interact with Raindrop.io bookmarks using the Model Context Protocol (MCP).\n- **[Random Number](https://github.com/zazencodes/random-number-mcp)** - Provides LLMs with essential random generation abilities, built entirely on Python's standard library.\n- **[RCSB PDB](https://github.com/QuentinCody/rcsb-pdb-mcp-server)** - Unofficial MCP server for the Research Collaboratory for Structural Bioinformatics Protein Data Bank (RCSB PDB), providing access to 3D protein structures, experimental data, and structural bioinformatics information.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redbee](https://github.com/Tamsi/redbee-mcp)** - Redbee MCP server that provides support for interacting with Redbee API.\n- **[Redfish](https://github.com/nokia/mcp-redfish)** - Redfish MCP server that provides support for interacting with [DMTF Redfish API](https://www.dmtf.org/standards/redfish).\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[RedNote MCP](https://github.com/ifuryst/rednote-mcp)** - MCP server for accessing RedNote(XiaoHongShu, xhs) content\n- **[Reed Jobs](https://github.com/kld3v/reed_jobs_mcp)** - Search and retrieve job listings from Reed.co.uk.\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Resend](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/resend)** - Send email using Resend services\n- **[Revit MCP](https://github.com/revit-mcp)** - A service implementing the MCP protocol for Autodesk Revit.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Riot Games](https://github.com/jifrozen0110/mcp-riot)** - MCP server for League of Legends – fetch player info, ranks, champion stats, and match history via Riot API.\n- **[Rohlik](https://github.com/tomaspavlin/rohlik-mcp)** - Shop groceries across the Rohlik Group platforms (Rohlik.cz, Knuspr.de, Gurkerl.at, Kifli.hu, Sezamo.ro)\n- **[Rquest](https://github.com/xxxbrian/mcp-rquest)** - An MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures.\n- **[Rust MCP Filesystem](https://github.com/rust-mcp-stack/rust-mcp-filesystem)** - Fast, asynchronous MCP server for efficient handling of various filesystem operations built with the power of Rust.\n- **[SafetySearch](https://github.com/surabhya/SafetySearch)** - Real-time FDA food safety data: recalls, adverse events, analysis.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Salesforce MCP (AiondaDotCom)](https://github.com/AiondaDotCom/mcp-salesforce)** - Universal Salesforce integration with OAuth authentication, smart learning system, comprehensive backup capabilities, and full CRUD operations for any Salesforce org including custom objects and fields.\n- **[Salesforce MCP Server](https://github.com/tsmztech/mcp-server-salesforce)** - Comprehensive Salesforce integration with tools for querying records, executing Apex, managing fields/objects, and handling debug logs\n- **[Scanova MCP Server](https://github.com/trycon/scanova-mcp)** - MCP server for creating and managing QR codes using the [Scanova](https://scanova.io) API. Provides tools for generating, managing, and downloading QR codes.\n- **[SchemaCrawler](https://github.com/schemacrawler/SchemaCrawler-MCP-Server-Usage)** - Connect to any relational database, and be able to get valid SQL, and ask questions like what does a certain column prefix mean.\n- **[SchemaFlow](https://github.com/CryptoRadi/schemaflow-mcp-server)** - Real-time PostgreSQL & Supabase database schema access for AI-IDEs via Model Context Protocol. Provides live database context through secure SSE connections with three powerful tools: get_schema, analyze_database, and check_schema_alignment. [SchemaFlow](https://schemaflow.dev)\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - An MCP server to search for scholarly and academic articles.\n- **[scrapling-fetch](https://github.com/cyberchitta/scrapling-fetch-mcp)** - Access text content from bot-protected websites. Fetches HTML/markdown from sites with anti-automation measures using Scrapling.\n- **[Screeny](https://github.com/rohanrav/screeny)** - Privacy-first macOS MCP server that provides visual context for AI agents through window screenshots\n- **[ScriptFlow](https://github.com/yanmxa/scriptflow-mcp)** - Transform complex, repetitive AI interactions into persistent, executable scripts with comprehensive script management (add, edit, remove, list, search, execute) and multi-language support (Bash, Python, Node.js, TypeScript).\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[SearXNG](https://github.com/erhwenkuo/mcp-searxng)** - An MCP server provide web searching via [SearXNG](https://docs.searxng.org) & retrieve url as makrdown.\n- **[SearXNG Public](https://github.com/pwilkin/mcp-searxng-public)** - A Model Context Protocol Server for retrieving data from public [SearXNG](https://docs.searxng.org) instances, with fallback support\n- **[SEC EDGAR](https://github.com/stefanoamorelli/sec-edgar-mcp)** - (by Stefano Amorelli) A community Model Context Protocol Server to access financial filings and data through the U.S. Securities and Exchange Commission ([SEC](https://www.sec.gov/)) `Electronic Data Gathering, Analysis, and Retrieval` ([EDGAR](https://www.sec.gov/submit-filings/about-edgar)) database\n- **[SEO MCP](https://github.com/cnych/seo-mcp)** - A free SEO tool MCP (Model Control Protocol) service based on Ahrefs data. Includes features such as backlinks, keyword ideas, and more. by [claudemcp](https://www.claudemcp.com/servers/seo-mcp).\n- **[Serper](https://github.com/garylab/serper-mcp-server)** - An MCP server that performs Google searches using [Serper](https://serper.dev).\n- **[ServiceNow](https://github.com/osomai/servicenow-mcp)** - An MCP server to interact with a ServiceNow instance\n- **[ShaderToy](https://github.com/wilsonchenghy/ShaderToy-MCP)** - This MCP server lets LLMs to interact with the ShaderToy API, allowing LLMs to learn from compute shaders examples and enabling them to create complex GLSL shaders that they are previously not capable of.\n- **[ShareSeer](https://github.com/shareseer/shareseer-mcp-server)** - MCP to Access SEC filings, financials & insider trading data in real time using [ShareSeer](https://shareseer.com)\n- **[Shell](https://github.com/sonirico/mcp-shell)** - Give hands to AI. MCP server to run shell commands securely, auditably, and on demand\n- **[Shodan MCP](https://github.com/Hexix23/shodan-mcp)** - MCP server to interact with [Shodan](https://www.shodan.io/)\n- **[Shopify](https://github.com/GeLi2001/shopify-mcp)** - MCP to interact with Shopify API including order, product, customers and so on.\n- **[Shopify Storefront](https://github.com/QuentinCody/shopify-storefront-mcp-server)** - Unofficial MCP server that allows AI agents to discover Shopify storefronts and interact with them to fetch products, collections, and other store data through the Storefront API.\n- **[Simple Loki MCP](https://github.com/ghrud92/simple-loki-mcp)** - A simple MCP server to query Loki logs using logcli.\n- **[Siri Shortcuts](https://github.com/dvcrn/mcp-server-siri-shortcuts)** - MCP to interact with Siri Shortcuts on macOS. Exposes all Shortcuts as MCP tools.\n- **[Skyvern](https://github.com/Skyvern-AI/skyvern/tree/main/integrations/mcp)** - MCP to let Claude / Windsurf / Cursor / your LLM control the browser\n- **[Slack](https://github.com/korotovsky/slack-mcp-server)** - The most powerful MCP server for Slack Workspaces. This integration supports both Stdio and SSE transports, proxy settings and does not require any permissions or bots being created or approved by Workspace admins 😏.\n- **[Slack](https://github.com/zencoderai/slack-mcp-server)** - Slack MCP server which supports both stdio and Streamable HTTP transports. Extended from the original Anthropic's implementation which is now [archived](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)\n- **[Slidespeak](https://github.com/SlideSpeak/slidespeak-mcp)** - Create PowerPoint presentations using the [Slidespeak](https://slidespeak.com/) API.\n- **[Smartlead](https://github.com/jean-technologies/smartlead-mcp-server-local)** - MCP to connect to Smartlead. Additional, tooling, functionality, and connection to workflow automation platforms also available.\n- **[Snowflake](https://github.com/Snowflake-Labs/mcp)** - Open-source MCP server for Snowflake from official Snowflake-Labs supports prompting Cortex Agents, querying structured & unstructured data, object management, SQL execution, semantic view querying, and more. RBAC, fine-grained CRUD controls, and all authentication methods supported.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Snowflake Cortex MCP Server](https://github.com/thisisbhanuj/Snowflake-Cortex-MCP-Server)** -This Snowflake MCP server provides tooling for Snowflake Cortex AI features, bringing these capabilities to the MCP ecosystem. When connected to an MCP Client (e.g. Claude for Desktop, fast-agent, Agentic Orchestration Framework), users can leverage these Cortex AI features.\n- **[SoccerDataAPI](https://github.com/yeonupark/mcp-soccer-data)** - This MCP server provides real-time football match data based on the SoccerDataAPI.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protocol actions and growing\n- **[Solr MCP](https://github.com/mjochum64/mcp-solr-search)** - This MCP server offers a basic functionality to perform a search on Solr servers.\n- **[Solver](https://github.com/szeider/mcp-solver)** - Solves constraint satisfaction and optimization problems .\n- **[Solvitor](https://github.com/Adeptus-Innovatio/solvitor-mcp)** – Solvitor MCP server provides tools to access reverse engineering tools that help developers extract IDL files from closed - source Solana smart contracts and decompile them.\n- **[Sourcerer](https://github.com/st3v3nmw/sourcerer-mcp)** - MCP for semantic code search & navigation that reduces token waste.\n- **[Specbridge](https://github.com/TBosak/specbridge)** - Easily turn your OpenAPI specs into MCP Tools.\n- **[Splunk](https://github.com/jkosik/mcp-server-splunk)** - Golang MCP server for Splunk (lists saved searches, alerts, indexes, macros...). Supports SSE and STDIO.\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Spring Initializr](https://github.com/hpalma/springinitializr-mcp)** - This MCP allows an LLM to create Spring Boot projects with custom configurations. Instead of manually visiting start.spring.io, you can now ask your AI assistant to generate projects with specific dependencies, Java versions, and project structures.\n- **[Squad AI](https://github.com/the-basilisk-ai/squad-mcp)** – Product‑discovery and strategy platform integration. Create, query and update opportunities, solutions, outcomes, requirements and feedback from any MCP‑aware LLM.\n- **[SSH](https://github.com/AiondaDotCom/mcp-ssh)** - Agent for managing and controlling SSH connections.\n- **[SSH](https://github.com/classfang/ssh-mcp-server)** - An MCP server that can execute SSH commands remotely, upload files, download files, and so on.\n- **[SSH MCP Server](https://github.com/sinjab/mcp_ssh)** - A production-ready Model Context Protocol server for SSH automation with background execution, file transfers, and comprehensive timeout protection. Features structured output, progress tracking, and enterprise-grade testing (87% coverage).\n- **[sslmon](https://github.com/firesh/sslmon-mcp)** - Domain/HTTPS/SSL domain registration information and SSL certificate monitoring capabilities. Query domain registration and expiration information, and SSL certificate information and validity status for any domain.\n- **[Standard Korean Dictionary](https://github.com/privetin/stdict)** - Search the dictionary using API\n- **[Star Wars](https://github.com/johnpapa/mcp-starwars)** -MCP Server for the SWAPI Star Wars API. The main goal of the project is to show how an MCP server can be used to interact with APIs.\n- **[Starknet MCP Server](https://github.com/mcpdotdirect/starknet-mcp-server)** - A comprehensive MCP server for interacting with the Starknet blockchain, providing tools for querying blockchain data, resolving StarknetIDs, and performing token transfers.\n- **[Starwind UI](https://github.com/Boston343/starwind-ui-mcp/)** - This MCP provides relevant commands, documentation, and other information to allow LLMs to take full advantage of Starwind UI's open source Astro components.\n- **[Stellar](https://github.com/syronlabs/stellar-mcp/)** - This MCP server enables LLMs to interact with the Stellar blockchain to create accounts, check address balances, analyze transactions, view transaction history, mint new assets, interact with smart contracts and much more.\n- **[Stitch AI](https://github.com/StitchAI/stitch-ai-mcp/)** - Knowledge management system for AI agents with memory space creation and retrieval capabilities.\n- **[Stockfish](https://github.com/sonirico/mcp-stockfish)** - MCP server connecting AI systems to Stockfish chess engine\n- **[Storybook](https://github.com/stefanoamorelli/storybook-mcp-server)** (by Stefano Amorelli) - Interact with Storybook component libraries, enabling component discovery, story management, prop inspection, and visual testing across different viewports.\n- **[Strava](https://github.com/r-huijts/strava-mcp)** - Connect to the Strava API to access activity data, athlete profiles, segments, and routes, enabling fitness tracking and analysis with Claude.\n- **[Strava API](https://github.com/tomekkorbak/strava-mcp-server)** - MCP server for Strava API to retrieve one's activities\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[Substack/Medium](https://github.com/jonathan-politzki/mcp-writer-substack)** - Connect Claude to your Substack/Medium writing, enabling semantic search and analysis of your published content.\n- **[System Health](https://github.com/thanhtung0201/mcp-remote-system-health)** - The MCP (Multi-Channel Protocol) System Health Monitoring is a robust, real-time monitoring solution designed to provide comprehensive health metrics and alerts for remote Linux servers.\n- **[SystemSage](https://github.com/Tarusharma1/SystemSage)** - A powerful, cross-platform system management and monitoring tool for Windows, Linux, and macOS.\n- **[Talk To Figma](https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp)** - This MCP server enables LLMs to interact with Figma, allowing them to read and modify designs programmatically.\n- **[Talk To Figma via Claude](https://github.com/gaganmanku96/talk-with-figma-claude)** - TMCP server that provides seamless Figma integration specifically for Claude Desktop, enabling design creation, modification, and real-time collaboration through natural language commands.\n- **[TAM MCP Server](https://github.com/gvaibhav/TAM-MCP-Server)** - Market research and business intelligence with TAM/SAM calculations and integration across 8 economic data sources: Alpha Vantage, BLS, Census Bureau, FRED, IMF, Nasdaq Data Link, OECD, and World Bank.\n- **[Tasks](https://github.com/flesler/mcp-tasks)** - An efficient task manager. Designed to minimize tool confusion and maximize LLM budget efficiency while providing powerful search, filtering, and organization capabilities across multiple file formats (Markdown, JSON, YAML)\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[TcpSocketMCP](https://github.com/SpaceyKasey/TcpSocketMCP/)** - A Model Context Protocol (MCP) server that provides raw TCP socket access, enabling AI models to interact directly with network services using raw TCP Sockets. Supports multiple concurrent connections, buffering of response data and triggering automatic responses.\n- **[TeamRetro](https://github.com/adepanges/teamretro-mcp-server)** - This MCP server allows LLMs to interact with TeamRetro, allowing LLMs to manage user, team, team member, retrospective, health check, action, agreement and fetch the reports.\n- **[Telegram](https://github.com/chigwell/telegram-mcp)** - An MCP server that provides paginated chat reading, message retrieval, and message sending capabilities for Telegram through Telethon integration.\n- **[Telegram-Client](https://github.com/chaindead/telegram-mcp)** - A Telegram API bridge that manages user data, dialogs, messages, drafts, read status, and more for seamless interactions.\n- **[Telegram-mcp-server](https://github.com/DLHellMe/telegram-mcp-server)** - Access Telegram channels and groups directly in Claude. Features dual-mode operation with API access (100x faster) or web scraping, unlimited post retrieval, and search functionality.\n- **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n- **[Tempo](https://github.com/scottlepp/tempo-mcp-server)** - An MCP server to query traces/spans from [Grafana Tempo](https://github.com/grafana/tempo).\n- **[Teradata](https://github.com/arturborycki/mcp-teradata)** - his MCP server enables LLMs to interact with Teradata databases. This MCP Server support tools and prompts for multi task data analytics\n- **[Terminal-Control](https://github.com/GongRzhe/terminal-controller-mcp)** - An MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.\n- **[Terraform-Cloud](https://github.com/severity1/terraform-cloud-mcp)** - An MCP server that integrates AI assistants with the Terraform Cloud API, allowing you to manage your infrastructure through natural conversation.\n- **[Tideways](https://github.com/abuhamza/tideways-mcp-server)** - A Model Context Protocol server that enables AI assistants to query Tideways performance monitoring data and provide conversational performance insights for PHP applications.\n- **[TFT-Match-Analyzer](https://github.com/GeLi2001/tft-mcp-server)** - MCP server for teamfight tactics match history & match details fetching, providing user the detailed context for every match.\n- **[Thales CDSP CAKM MCP Server](https://github.com/sanyambassi/thales-cdsp-cakm-mcp-server)** - An MCP server for the Thales CipherTrust Data Security Platform (CDSP) Cloud Key Management (CAKM) connector. This MCP server supports Ms SQL and Oracle databases.\n- **[Thales CDSP CRDP MCP Server](https://github.com/sanyambassi/thales-cdsp-crdp-mcp-server)** - A Model Context Protocol (MCP) server that allows interacting with the CipherTrust RestFul Data Protection (CRDP) data protection service.\n- **[Thales CipherTrust Manager MCP Server](https://github.com/sanyambassi/ciphertrust-manager-mcp-server)** - MCP server for Thales CipherTrust Manager integration, enabling secure key management and cryptographic operations.\n- **[thegraph-mcp](https://github.com/kukapay/thegraph-mcp)** - An MCP server that powers AI agents with indexed blockchain data from The Graph.\n- **[TheHive MCP Server](https://github.com/redwaysecurity/the-hive-mcp-server)** - An MCP server for [TheHive](https://strangebee.com/thehive/) Security Incident Response Platform.\n- **[Things3 MCP](https://github.com/urbanogardun/things3-mcp)** - Things3 task management integration for macOS with comprehensive TODO, project, and tag management.\n- **[Think MCP](https://github.com/Rai220/think-mcp)** - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in [Anthropic's article](https://www.anthropic.com/engineering/claude-think-tool).\n- **[Think Node MCP](https://github.com/abhinav-mangla/think-tool-mcp)** - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in [Anthropic's article](https://www.anthropic.com/engineering/claude-think-tool). (Works with Node)\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Ticketmaster MCP Server](https://github.com/mochow13/ticketmaster-mcp-server)** - A Model Context Protocol (MCP) server implemented in Streamable HTTP transport that allows AI models to interact with the Ticketmaster Discovery API, enabling searching events, venues, and attractions.\n- **[TickTick](https://github.com/alexarevalo9/ticktick-mcp-server)** - A Model Context Protocol (MCP) server designed to integrate with the TickTick task management platform, enabling intelligent context-aware task operations and automation.\n- **[TigerGraph](https://github.com/custom-discoveries/TigerGraph_MCP)** - A community built MCP server that interacts with TigerGraph Graph Database.\n- **[tip.md](https://github.com/tipdotmd#-mcp-server-for-ai-assistants)** - An MCP server that enables AI assistants to interact with tip.md's crypto tipping functionality, allowing agents or supporters to tip registered developers directly from AI chat interfaces.\n- **[TMD Earthquake](https://github.com/amornpan/tmd-earthquake-server-1.0)** - 🌍 Real-time earthquake monitoring from Thai Meteorological Department. Features magnitude filtering, location-based search (Thai/English), today's events tracking, dangerous earthquake alerts, and comprehensive statistics. Covers regional and global seismic activities.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Todos](https://github.com/tomelliot/todos-mcp)** - A practical todo list manager to use with your favourite chatbot.\n- **[token-minter-mcp](https://github.com/kukapay/token-minter-mcp)** - An MCP server providing tools for AI agents to mint ERC-20 tokens across multiple blockchains.\n- **[token-revoke-mcp](https://github.com/kukapay/token-revoke-mcp)** - An MCP server for checking and revoking ERC-20 token allowances across multiple blockchains.\n- **[Ton Blockchain MCP](https://github.com/devonmojito/ton-blockchain-mcp)** - An MCP server for interacting with Ton Blockchain.\n- **[TouchDesigner](https://github.com/8beeeaaat/touchdesigner-mcp)** - An MCP server for TouchDesigner, enabling interaction with TouchDesigner projects, nodes, and parameters.\n- **[Transcribe](https://github.com/transcribe-app/mcp-transcribe)** - An MCP server provides fast and reliable transcriptions for audio/video files and voice memos. It allows LLMs to interact with the text content of audio/video file.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Trello MCP Server](https://github.com/lioarce01/trello-mcp-server)** - An MCP server that interact with user Trello boards, modifying them with prompting.\n- **[Trino](https://github.com/tuannvm/mcp-trino)** - A high-performance Model Context Protocol (MCP) server for Trino implemented in Go.\n- **[Tripadvisor](https://github.com/pab1it0/tripadvisor-mcp)** - An MCP server that enables LLMs to interact with Tripadvisor API, supporting location data, reviews, and photos through standardized MCP interfaces\n- **[Triplyfy MCP](https://github.com/helpful-AIs/triplyfy-mcp)** - An MCP server that lets LLMs plan and manage itineraries with interactive maps in Triplyfy; manage itineraries, places and notes, and search/save flights.\n- **[TrueNAS Core MCP](https://github.com/vespo92/TrueNasCoreMCP)** - An MCP server for interacting with TrueNAS Core.\n- **[TuriX Computer Automation MCP](https://github.com/TurixAI/TuriX-CUA/tree/mac_mcp)** - MCP server for helping automation control your computer complete your pre-setting task.\n- **[Tyk API Management](https://github.com/TykTechnologies/tyk-dashboard-mcp)** - Chat with all of your organization's managed APIs and perform other API lifecycle operations, managing tokens, users, analytics, and more.\n- **[Typesense](https://github.com/suhail-ak-s/mcp-typesense-server)** - A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.\n- **[UniFi Dream Machine](https://github.com/sabler/mcp-unifi)** An MCP server that gets your network telemetry from the UniFi Site Manager and your local UniFi router.\n- **[UniProt](https://github.com/QuentinCody/uniprot-mcp-server)** - Unofficial MCP server for UniProt, providing access to protein sequence data, functional annotations, taxonomic information, and cross-references for proteomics and bioinformatics research.\n- **[uniswap-poolspy-mcp](https://github.com/kukapay/uniswap-poolspy-mcp)** - An MCP server that tracks newly created liquidity pools on Uniswap across nine blockchain networks.\n- **[uniswap-trader-mcp](https://github.com/kukapay/uniswap-trader-mcp)** -An MCP server for AI agents to automate token swaps on Uniswap DEX across multiple blockchains.\n- **[Unity Catalog](https://github.com/ognis1205/mcp-server-unitycatalog)** - An MCP server that enables LLMs to interact with Unity Catalog AI, supporting CRUD operations on Unity Catalog Functions and executing them as MCP tools.\n- **[Unity Integration (Advanced)](https://github.com/quazaai/UnityMCPIntegration)** - Advanced Unity3d Game Engine MCP which supports ,Execution of Any Editor Related Code Directly Inside of Unity, Fetch Logs, Get Editor State and Allow File Access of the Project making it much more useful in Script Editing or asset creation.\n- **[Unity3d Game Engine](https://github.com/CoderGamester/mcp-unity)** - An MCP server that enables LLMs to interact with Unity3d Game Engine, supporting access to a variety of the Unit's Editor engine tools (e.g. Console Logs, Test Runner logs, Editor functions, hierarchy state, etc) and executing them as MCP tools or gather them as resources.\n- **[Universal MCP Servers](https://github.com/universal-mcp)** - A collection of MCP servers created using the [AgentR Universal MCP SDK](https://github.com/universal-mcp/universal-mcp).\n- **[Unleash Integration (Feature Toggle)](https://github.com/cuongtl1992/unleash-mcp)** - A Model Context Protocol (MCP) server implementation that integrates with Unleash Feature Toggle system. Provide a bridge between LLM applications and Unleash feature flag system\n- **[Upbit MCP Server](https://github.com/solangii/upbit-mcp-server)** – An MCP server that enables real - time access to cryptocurrency prices, market summaries, and asset listings from the Upbit exchange.\n- **[use_aws_mcp](https://github.com/runjivu/use_aws_mcp)** - amazon-q-cli's use_aws tool extracted into independent mcp, for general aws api usage.\n- **[User Feedback](https://github.com/mrexodia/user-feedback-mcp)** - Simple MCP Server to enable a human-in-the-loop workflow in tools like Cline and Cursor.\n- **[USPTO](https://github.com/riemannzeta/patent_mcp_server)** - MCP server for accessing United States Patent & Trademark Office data through its Open Data Protocol (ODP) API.\n- **[Vectara](https://github.com/vectara/vectara-mcp)** - Query Vectara's trusted RAG-as-a-service platform.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Vertica](https://github.com/nolleh/mcp-vertica)** - Vertica database integration in Python with configurable access controls and schema inspection\n- **[Vibe Check](https://github.com/PV-Bhat/vibe-check-mcp-server)** - An MCP server leveraging an external oversight layer to \"vibe check\" agents, and also self-improve accuracy & user alignment over time. Prevents scope creep, code bloat, misalignment, misinterpretation, tunnel vision, and overcomplication.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Video Still Capture](https://github.com/13rac1/videocapture-mcp)** - 📷 Capture video stills from an OpenCV-compatible webcam or other video source.\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[VMware Fusion](https://github.com/yeahdongcn/vmware-fusion-mcp-server)** - Manage VMware Fusion virtual machines via the Fusion REST API.\n- **[VoiceMode](https://github.com/mbailey/voicemode)** - Enable voice conversations with Claude using any OpenAI-compatible STT/TTS service [getvoicemode.com](https://getvoicemode.com/)\n- **[Voice Status Report](https://github.com/tomekkorbak/voice-status-report-mcp-server)** - An MCP server that provides voice status updates using OpenAI's text-to-speech API, to be used with Cursor or Claude Code.\n- **[VolcEngine TOS](https://github.com/dinghuazhou/sample-mcp-server-tos)** - A sample MCP server for VolcEngine TOS that flexibly get objects from TOS.\n- **[Voyp](https://github.com/paulotaylor/voyp-mcp)** - VOYP MCP server for making calls using Artificial Intelligence.\n- **[vulnicheck](https://github.com/andrasfe/vulnicheck)** - Real-time Python package vulnerability scanner that checks dependencies against OSV and NVD databases, providing comprehensive security analysis with CVE details, lock file support, and actionable upgrade recommendations.\n- **[Wanaku MCP Router](https://github.com/wanaku-ai/wanaku/)** - The Wanaku MCP Router is a SSE-based MCP server that provides an extensible routing engine that allows integrating your enterprise systems with AI agents.\n- **[weather-mcp-server](https://github.com/devilcoder01/weather-mcp-server)** - Get real-time weather data for any location using weatherapi.\n- **[Web Search MCP](https://github.com/mrkrsl/web-search-mcp)** - A server that provides full web search, summaries and page extration for use with Local LLMs.\n- **[Webex](https://github.com/Kashyap-AI-ML-Solutions/webex-messaging-mcp-server)** - A Model Context Protocol (MCP) server that provides AI assistants with comprehensive access to Cisco Webex messaging capabilities.\n- **[Webflow](https://github.com/kapilduraphe/webflow-mcp-server)** - Interact with the Webflow APIs\n- **[webhook-mcp](https://github.com/noobnooc/webhook-mcp)** (by Nooc) - A Model Context Protocol (MCP) server that sends webhook notifications when called.\n- **[whale-tracker-mcp](https://github.com/kukapay/whale-tracker-mcp)**  -  A mcp server for tracking cryptocurrency whale transactions.\n- **[WhatsApp MCP Server](https://github.com/lharries/whatsapp-mcp)** - MCP server for your personal WhatsApp handling individuals, groups, searching and sending.\n- **[Whois MCP](https://github.com/bharathvaj-ganesan/whois-mcp)** - MCP server that performs whois lookup against domain, IP, ASN and TLD.\n- **[Wikidata MCP](https://github.com/zzaebok/mcp-wikidata)** - Wikidata MCP server that interact with Wikidata, by searching identifiers, extracting metadata, and executing sparql query.\n- **[Wikidata SPARQL](https://github.com/QuentinCody/wikidata-sparql-mcp-server)** - Unofficial REMOTE MCP server for Wikidata's SPARQL endpoint, providing access to structured knowledge data, entity relationships, and semantic queries for research and data analysis.\n- **[Wikifunctions](https://github.com/Fredibau/wikifunctions-mcp-fredibau)** - Allowing AI models to discover and execute functions from the WikiFunctions library.\n- **[Wikipedia MCP](https://github.com/Rudra-ravi/wikipedia-mcp)** - Access and search Wikipedia articles via MCP for AI-powered information retrieval.\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[Windsor](https://github.com/windsor-ai/windsor_mcp)** - Windsor MCP (Model Context Protocol) enables your LLM to query, explore, and analyze your full-stack business data integrated into Windsor.ai with zero SQL writing or custom scripting.\n- **[Wordle MCP](https://github.com/cr2007/mcp-wordle-python)** - MCP Server that gets the Wordle Solution for a particular date.\n- **[WordPress MCP](https://github.com/Automattic/wordpress-mcp)** - Make your WordPress site into a simple MCP server, exposing functionality to LLMs and AI agents.\n- **[Workflowy](https://github.com/danield137/mcp-workflowy)** - A server that interacts with [workflowy](https://workflowy.com/).\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[Wren Engine](https://github.com/Canner/wren-engine)** - The Semantic Engine for Model Context Protocol(MCP) Clients and AI Agents\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[Xcode](https://github.com/r-huijts/xcode-mcp-server)** - MCP server that brings AI to your Xcode projects, enabling intelligent code assistance, file operations, project management, and automated development tasks.\n- **[Xcode-mcp-server](https://github.com/drewster99/xcode-mcp-server)** (by drewster99) - Best Xcode integration - ClaudeCode and Cursor can build your project *with* Xcode and see the same errors you do. Fast easy setup.\n- **[xcodebuild](https://github.com/ShenghaiWang/xcodebuild)**  - 🍎 Build iOS Xcode workspace/project and feed back errors to llm.\n- **[Xero-mcp-server](https://github.com/john-zhang-dev/xero-mcp)** - Enabling clients to interact with Xero system for streamlined accounting, invoicing, and business operations.\n- **[XiYan](https://github.com/XGenerationLab/xiyan_mcp_server)** - 🗄️ An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[Yahoo Finance](https://github.com/AgentX-ai/yahoo-finance-server)** - 📈 Lets your AI interact with Yahoo Finance to get comprehensive stock market data, news, financials, and more. Proxy supported.\n- **[yfinance](https://github.com/Adity-star/mcp-yfinance-server)** -💹The MCP YFinance Stock Server provides real-time and historical stock data in a standard format, powering dashboards, AI agents,and research tools with seamless financial insights.\n- **[YNAB](https://github.com/ChuckBryan/ynabmcpserver)** - A Model Context Protocol (MCP) server for integrating with YNAB (You Need A Budget), allowing AI assistants to securely access and analyze your financial data.\n- **[YouTrack](https://github.com/tonyzorin/youtrack-mcp)** - A Model Context Protocol (MCP) server implementation for JetBrains YouTrack, allowing AI assistants to interact with YouTrack issue tracking system.\n- **[YouTube](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/youtube)** - Extract Youtube video information (with proxies support).\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n- **[YouTube DLP](https://github.com/AgentX-ai/youtube-dlp-server)** - Retrieve video information, subtitles, and top comments with proxies.\n- **[YouTube MCP](https://github.com/aardeshir/youtube-mcp)** - Create playlists from song lists with OAuth2. Search videos, manage playlists, let AI curate your YouTube collections.\n- **[Youtube Uploader MCP](https://github.com/anwerj/youtube-uploader-mcp)** - AI‑powered YouTube uploader—no CLI, no YouTube Studio.\n- **[YouTube Video Summarizer](https://github.com/nabid-pf/youtube-video-summarizer-mcp)** - Summarize lengthy youtube videos.\n- **[yutu](https://github.com/eat-pray-ai/yutu)** - A fully functional MCP server and CLI for YouTube to automate YouTube operation.\n- **[ZapCap](https://github.com/bogdan01m/zapcap-mcp-server)** - MCP server for ZapCap API providing video caption and B-roll generation via natural language\n- **[Zettelkasten](https://github.com/joshylchen/zettelkasten)**- Comprehensive AI-powered knowledge management system implementing the Zettelkasten method. Features atomic note creation, full-text search, AI-powered CEQRC workflows (Capture→Explain→Question→Refine→Connect), intelligent link discovery, and multi-interface access (CLI, API, Web UI, MCP). Perfect for researchers, students, and knowledge workers.\n- **[ZincBind](https://github.com/QuentinCody/zincbind-mcp-server)** - Unofficial MCP server for ZincBind, providing access to a comprehensive database of zinc binding sites in proteins, structural coordination data, and metalloproteomics research information.\n- **[Zoom](https://github.com/Prathamesh0901/zoom-mcp-server/tree/main)** - Create, update, read and delete your zoom meetings.\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[Anubis MCP](https://github.com/zoedsoupe/anubis-mcp)** (Elixir) - A high-performance and high-level Model Context Protocol (MCP) implementation in Elixir. Think like \"Live View\" for MCP.\n* **[ModelFetch](https://github.com/phuctm97/modelfetch/)** (TypeScript) - Runtime-agnostic SDK to create and deploy MCP servers anywhere TypeScript/JavaScript runs\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n* **[FastAPI to MCP auto generator](https://github.com/tadata-org/fastapi_mcp)** – A zero-configuration tool for automatically exposing FastAPI endpoints as MCP tools by **[Tadata](https://tadata.com/)**\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foobara MCP Connector](https://github.com/foobara/mcp-connector)** - Easily expose Foobara commands written in Ruby as tools via MCP\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Higress MCP Server Hosting](https://github.com/alibaba/higress/tree/main/plugins/wasm-go/mcp-servers)** - A solution for hosting MCP Servers by extending the API Gateway (based on Envoy) with wasm plugins.\n* **[MCP Declarative Java SDK](https://github.com/codeboyzhou/mcp-declarative-java-sdk)** Annotation-driven MCP servers development with Java, no Spring Framework Required, minimize dependencies as much as possible.\n* **[MCP-Framework](https://mcp-framework.com)** Build MCP servers with elegance and speed in TypeScript. Comes with a CLI to create your project with `mcp create app`. Get started with your first server in under 5 minutes by **[Alex Andru](https://github.com/QuantGeekDev)**\n* **[MCP Plexus](https://github.com/Super-I-Tech/mcp_plexus)**: A secure, **multi-tenant** and Multi-user MCP python server framework built to integrate easily with external services via OAuth 2.1, offering scalable and robust solutions for managing complex AI applications.\n* **[mcp_sse (Elixir)](https://github.com/kEND/mcp_sse)** An SSE implementation in Elixir for rapidly creating MCP servers.\n* **[mxcp](https://github.com/raw-labs/mxcp)** (Python) - Open-source framework for building enterprise-grade MCP servers using just YAML, SQL, and Python, with built-in auth, monitoring, ETL and policy enforcement.\n* **[Next.js MCP Server Template](https://github.com/vercel-labs/mcp-for-next.js)** (Typescript) - A starter Next.js project that uses the MCP Adapter to allow MCP clients to connect and access resources.\n* **[PayMCP](https://github.com/blustAI/paymcp)** (Python & TypeScript) - Lightweight payments layer for MCP servers: turn tools into paid endpoints with a two-line decorator. [PyPI](https://pypi.org/project/paymcp/) · [npm](https://www.npmjs.com/package/paymcp) · [TS repo](https://github.com/blustAI/paymcp-ts)\n* **[Perl SDK](https://github.com/mojolicious/mojo-mcp)** - An SDK for building MCP servers and clients with the Perl programming language.\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n- **[R mcptools](https://github.com/posit-dev/mcptools)** - An R SDK for creating R-based MCP servers and retrieving functionality from third-party MCP servers as R functions.\n* **[SAP ABAP MCP Server SDK](https://github.com/abap-ai/mcp)** - Build SAP ABAP based MCP servers. ABAP 7.52 based with 7.02 downport; runs on R/3 & S/4HANA on-premises, currently not cloud-ready.\n* **[Spring AI MCP Server](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html)** - Provides auto-configuration for setting up an MCP server in Spring Boot applications.\n* **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n* **[AgentR Universal MCP SDK](https://github.com/universal-mcp/universal-mcp)** - A python SDK to build MCP Servers with inbuilt credential management by **[Agentr](https://agentr.dev/home)**\n* **[Vercel MCP Adapter](https://github.com/vercel/mcp-adapter)** (TypeScript) - A simple package to start serving an MCP server on most major JS meta-frameworks including Next, Nuxt, Svelte, and more.\n* **[PHP MCP Server](https://github.com/php-mcp/server)** (PHP) - Core PHP implementation for the Model Context Protocol (MCP) server\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n* **[llm-analysis-assistant](https://github.com/xuzexin-hz/llm-analysis-assistant)** <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/xuzexin-hz/llm-analysis-assistant/refs/heads/main/src/llm_analysis_assistant/pages/html/imgs/favicon.ico\" alt=\"Langfuse Logo\" /> - A very streamlined mcp client that supports calling and monitoring stdio/sse/streamableHttp, and can also view request responses through the /logs page. It also supports monitoring and simulation of ollama/openai interface.\n* **[MCP-Agent](https://github.com/lastmile-ai/mcp-agent)** - A simple, composable framework to build agents using Model Context Protocol by **[LastMile AI](https://www.lastmileai.dev)**\n* **[Spring AI MCP Client](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html)** - Provides auto-configuration for MCP client functionality in Spring Boot applications.\n* **[MCP CLI Client](https://github.com/vincent-pli/mcp-cli-host)** - A CLI host application that enables Large Language Models (LLMs) to interact with external tools through the Model Context Protocol (MCP).\n* **[OpenMCP Client](https://github.com/LSTM-Kirigaya/openmcp-client/)** - An all-in-one vscode/trae/cursor plugin for MCP server debugging. [Document](https://kirigaya.cn/openmcp/) & [OpenMCP SDK](https://kirigaya.cn/openmcp/sdk-tutorial/).\n* **[PHP MCP Client](https://github.com/php-mcp/client)** - Core PHP implementation for the Model Context Protocol (MCP) Client\n\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[A2A-MCP Java Bridge](https://github.com/vishalmysore/a2ajava)** - A2AJava brings powerful A2A-MCP integration directly into your Java applications. It enables developers to annotate standard Java methods and instantly expose them as MCP Server, A2A-discoverable actions — with no boilerplate or service registration overhead.\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Awesome Remote MCP Servers by JAW9C](https://github.com/jaw9c/awesome-remote-mcp-servers)** - A curated list of **remote** MCP servers, including their authentication support by **[JAW9C](https://github.com/jaw9c)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Discord Server (ModelContextProtocol)](https://discord.gg/jHEGxQu2a5)** – Connect with developers, share insights, and collaborate on projects in an active Discord community dedicated to the Model Context Protocol by **[Alex Andru](https://github.com/QuantGeekDev)**\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" alt=\"Klavis Logo\" /> **[Klavis AI](https://www.klavis.ai)** - Open Source MCP Infra. Hosted MCP servers and MCP clients on Slack and Discord.\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCPRepository.com](https://mcprepository.com/)** - A repository that indexes and organizes all MCP servers for easy discovery.\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-dockmaster](https://mcp-dockmaster.com)** - An Open-Sourced UI to install and manage MCP servers for Windows, Linux and macOS.\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-guardian](https://github.com/eqtylab/mcp-guardian)** - GUI application + tools for proxying / managing control of MCP servers by **[EQTY Lab](https://eqtylab.io)**\n- **[MCP Linker](https://github.com/milisp/mcp-linker)** - A cross-platform Tauri GUI tool for one-click setup and management of MCP servers, supporting Claude Desktop, Cursor, Windsurf, VS Code, Cline, and Neovim.\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCP Marketplace Web Plugin](https://github.com/AI-Agent-Hub/mcp-marketplace)** MCP Marketplace is a small Web UX plugin to integrate with AI applications, Support various MCP Server API Endpoint (e.g pulsemcp.com/deepnlp.org and more). Allowing user to browse, paginate and select various MCP servers by different categories. [Pypi](https://pypi.org/project/mcp-marketplace) | [Maintainer](https://github.com/AI-Agent-Hub) | [Website](http://www.deepnlp.org/store/ai-agent/mcp-server)\n- **[mcp.natoma.ai](https://mcp.natoma.ai)** – A Hosted MCP Platform to discover, install, manage and deploy MCP servers by **[Natoma Labs](https://www.natoma.ai)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[MCPHub](https://www.mcphub.com)** - Website to list high quality MCP servers and reviews by real users. Also provide online chatbot for popular LLM models with MCP server support.\n- **[MCP Router](https://mcp-router.net)** – Free Windows and macOS app that simplifies MCP management while providing seamless app authentication and powerful log visualization by **[MCP Router](https://github.com/mcp-router/mcp-router)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCPServers.com](https://mcpservers.com)** - A growing directory of high-quality MCP servers with clear setup guides for a variety of MCP clients. Built by the team behind the **[Highlight MCP client](https://highlightai.com/)**\n- **[MCP Servers Rating and User Reviews](http://www.deepnlp.org/store/ai-agent/mcp-server)** - Website to rate MCP servers, write authentic user reviews, and [search engine for agent & mcp](http://www.deepnlp.org/search/agent)\n- **[MCP Sky](https://bsky.app/profile/brianell.in/feed/mcp)** - Bluesky feed for MCP related news and discussion by **[@brianell.in](https://bsky.app/profile/brianell.in)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source macOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcpm](https://github.com/pathintegral-institute/mcpm.sh)** ([website](https://mcpm.sh)) - MCP Manager (MCPM) is a Homebrew-like service for managing Model Context Protocol (MCP) servers across clients by **[Pathintegral](https://github.com/pathintegral-institute)**\n- **[MCPVerse](https://mcpverse.dev)** - A portal for creating & hosting authenticated MCP servers and connecting to them securely.\n- **[MCP Servers Search](https://github.com/atonomus/mcp-servers-search)** - An MCP server that provides tools for querying and discovering available MCP servers from this list.\n- **[Search MCP Server](https://github.com/krzysztofkucmierz/search-mcp-server)** - Recommends the most relevant MCP servers based on the client's query by searching this README file.\n- **[MCPWatch](https://github.com/kapilduraphe/mcp-watch)** - A comprehensive security scanner for Model Context Protocol (MCP) servers that detects vulnerabilities and security issues in your MCP server implementations.\n- <img height=\"12\" width=\"12\" src=\"https://mkinf.io/favicon-lilac.png\" alt=\"mkinf Logo\" /> **[mkinf](https://mkinf.io)** - An Open Source registry of hosted MCP Servers to accelerate AI agent workflows.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[r/modelcontextprotocol](https://www.reddit.com/r/modelcontextprotocol)** – A Model Context Protocol community Reddit page - discuss ideas, get answers to your questions, network with like-minded people, and showcase your projects! by **[Alex Andru](https://github.com/QuantGeekDev)**\n- **[MCP.ing](https://mcp.ing/)** - A list of MCP services for discovering MCP servers in the community and providing a convenient search function for MCP services by **[iiiusky](https://github.com/iiiusky)**\n- **[MCP Hunt](https://mcp-hunt.com)** - Realtime platform for discovering trending MCP servers with momentum tracking, upvoting, and community discussions - like Product Hunt meets Reddit for MCP\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n- **[ToolHive](https://github.com/StacklokLabs/toolhive)** - A lightweight utility designed to simplify the deployment and management of MCP servers, ensuring ease of use, consistency, and security through containerization by **[StacklokLabs](https://github.com/StacklokLabs)**\n- **[NetMind](https://www.netmind.ai/AIServices)** - Access powerful AI services via simple APIs or MCP servers to supercharge your productivity.\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypeScript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "persistent",
        "knowledge",
        "memory",
        "knowledge bases",
        "persistent memory",
        "modelcontextprotocol servers"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "mtct--journaling-mcp": {
      "owner": "mtct",
      "name": "journaling-mcp",
      "url": "https://github.com/mtct/journaling-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mtct.webp",
      "description": "Manage interactive journaling sessions with features for emotional analysis and automatic saving. It supports reading recent entries and organizes journal content chronologically in Markdown format.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-20T18:39:18Z",
      "readme_content": "# MCP Journaling Server\n\nAn MCP (Message Control Protocol) server designed to handle interactive journaling sessions with support for emotional analysis and automatic conversation saving.\n\n<a href=\"https://glama.ai/mcp/servers/kiay3i2li7\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/kiay3i2li7/badge\" alt=\"Journaling Server MCP server\" /></a>\n\n## Features\n\n- Automatic journaling session management\n- Conversation saving in Markdown format\n- Temporal analysis of conversations with timestamps\n- Support for reading recent journal entries\n- Chronological organization of journal entries\n\n## Installation\n\nDepend from your MCP client, on Claude Desktop:\n\n```\n    \"mcpServers\": {\n        \"journaling\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                <REPOSITORY PATH>,\n                \"run\",\n                \"server.py\"\n            ]\n        }\n    }\n```\n\n## Configuration\n\nThe server can be configured using environment variables in .env file:\n\n- `JOURNAL_DIR`: Directory for saving journal files (default: ~/Documents/journal)\n- `FILENAME_PREFIX`: Prefix for file names (default: \"journal\")\n- `FILE_EXTENSION`: Journal file extension (default: \".md\")\n\nIf not specified, default values will be used.\n\n## File Structure\n\nJournal entries are saved with the following structure:\n```\n[JOURNAL_DIR]/\n├── journal_2025-01-27.md\n├── journal_2025-01-26.md\n└── ...\n```\n\n## Entry Format\n\nEach journal entry includes:\n\n1. Header with date\n2. Conversation transcript with timestamps\n3. Emotional analysis\n4. Reflections and recurring themes\n\n## API\n\n### Tools\n\n- `start_new_session()`: Start a new journaling session\n- `record_interaction(user_message, assistant_message)`: Record a message exchange\n- `generate_session_summary(summary)`: Generate and save session summary\n- `get_recent_journals()`: Retrieve 5 most recent entries\n\n### Resources\n\n- `journals://recent`: Endpoint to access recent journal entries\n\n### Prompts\n\n- `start_journaling`: Initial prompt\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "journaling",
        "journal",
        "notetaking",
        "mtct journaling",
        "interactive journaling",
        "journaling mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "mundume--gmail-mcp": {
      "owner": "mundume",
      "name": "gmail-mcp",
      "url": "https://github.com/mundume/gmail-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mundume.webp",
      "description": "Create and manage notes with a simple interface while utilizing LLM capabilities for summarization. Supports creating new notes and accessing existing notes through URIs with associated metadata.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-14T13:39:45Z",
      "readme_content": "# gmail-mcp MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@mundume/gmail-mcp)](https://smithery.ai/server/@mundume/gmail-mcp)\na gmail mcp server built on top of typescript and the gmail api\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install Gmail Notes Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mundume/gmail-mcp):\n\n```bash\nnpx -y @smithery/cli install @mundume/gmail-mcp --client claude\n```\n\n### Installing Manually\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"gmail-mcp\": {\n      \"command\": \"/path/to/gmail-mcp/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "gmail",
        "manage notes",
        "existing notes",
        "mundume gmail"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "nailuoGG--anki-mcp-server": {
      "owner": "nailuoGG",
      "name": "anki-mcp-server",
      "url": "https://github.com/nailuoGG/anki-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/nailuoGG.webp",
      "description": "Interact with Anki flashcard software through AnkiConnect to create, manage, and search flashcards efficiently. Automate various operations on flashcards and decks with a simple API interface.",
      "stars": 145,
      "forks": 31,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T08:18:42Z",
      "readme_content": "# Anki MCP Server\n\nA Model Context Protocol (MCP) server that enables LLMs to interact with Anki flashcard software through AnkiConnect.\n\n\n\n## Features\n\n### Tools\n\n- `list_decks` - List all available Anki decks\n- `create_deck` - Create a new Anki deck\n- `create_note` - Create a new note (Basic or Cloze)\n- `batch_create_notes` - Create multiple notes at once\n- `search_notes` - Search for notes using Anki query syntax\n- `get_note_info` - Get detailed information about a note\n- `update_note` - Update an existing note\n- `delete_note` - Delete a note\n- `list_note_types` - List all available note types\n- `create_note_type` - Create a new note type\n- `get_note_type_info` - Get detailed structure of a note type\n\n### Resources\n\n- `anki://decks/all` - Complete list of available decks\n- `anki://note-types/all` - List of all available note types\n- `anki://note-types/all-with-schemas` - Detailed structure information for all note types\n- `anki://note-types/{modelName}` - Detailed structure information for a specific note type\n\n## Prerequisites\n\n1. [Anki](https://apps.ankiweb.net/) installed on your system\n2. [AnkiConnect](https://ankiweb.net/shared/info/2055492159) add-on installed in Anki\n\n## Configuration\n\n### Install via Desktop Extension (.mcpb)\n\nThis repository supports Anthropic Desktop Extensions (MCPB). The easiest way to use this server in Claude Desktop is by installing the packaged `.mcpb` bundle.\n\n1. Generate the `.mcpb` file locally using the provided script:\n```bash\nnpm run pack\n```\n\n2. Open Claude Desktop Settings → Extensions and drag the generated `.mcpb` file in, then click Install.\n\nThis validates `manifest.json` and outputs a `.mcpb` archive you can install as above. Learn more about Desktop Extensions in Anthropic's announcement: [Desktop Extensions: One-click MCP server installation for Claude Desktop](https://www.anthropic.com/engineering/desktop-extensions).\n\n### Usage with Claude Desktop\n\nAdd the server to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"anki-mcp-server\"]\n    }\n  }\n}\n```\n\n#### Using Custom AnkiConnect Port\n\nIf your AnkiConnect is running on a different port, you can specify it using the `--port` parameter:\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"anki-mcp-server\", \"--port\", \"8080\"]\n    }\n  }\n}\n```\n\n### Configuration for Cline\n\nAdd the server to your Cline MCP settings file inside VSCode's settings `cline_mcp_settings.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"anki-mcp-server\"]\n    }\n  }\n}\n```\n\n#### Using Custom AnkiConnect Port\n\nFor Cline, you can also specify a custom port:\n\n```json\n{\n  \"mcpServers\": {\n    \"anki\": {\n      \"command\": \"npx\",\n      \"args\": [\"--yes\", \"anki-mcp-server\", \"--port\", \"8080\"]\n    }\n  }\n}\n```\n\n## Development\n\n### Packaging a Desktop Extension (.mcpb)\n\nCreate a distributable Desktop Extension bundle for Claude Desktop:\n\n```bash\nnpm run pack\n```\n\nThis will build the project and generate a `.mcpb` archive from the current repository, validating `manifest.json`. Test by dragging it into Claude Desktop's Extensions settings. Reference: [Desktop Extensions: One-click MCP server installation for Claude Desktop](https://www.anthropic.com/engineering/desktop-extensions).\n\n### Publishing to MCP Registry\n\nThis server is automatically published to the MCP Registry when a new version is released. The publishing process includes:\n\n1. **Automated CI/CD**: GitHub Actions automatically publishes to both NPM and MCP Registry on successful releases\n2. **Schema Validation**: The `server.json` file is validated against the MCP schema before publishing\n3. **Version Synchronization**: Versions are kept in sync between `package.json`, `manifest.json`, and `server.json`\n4. **Comprehensive Testing**: Multi-version Node.js testing, linting, and validation before publishing\n5. **Beta Support**: Automated beta releases for testing new features\n\n#### Manual Validation\n\nYou can validate the MCP server configuration locally:\n\n```bash\nnpm run validate-mcp\n```\n\nThis will download the latest MCP schema and validate your `server.json` file.\n\n#### Manual Publishing\n\nIf you need to publish manually, you can use the MCP Publisher CLI:\n\n```bash\n# Install MCP Publisher\ncurl -L \"https://github.com/modelcontextprotocol/registry/releases/download/v1.1.0/mcp-publisher_1.1.0_$(uname -s | tr '[:upper:]' '[:lower:]')_$(uname -m | sed 's/x86_64/amd64/;s/aarch64/arm64/').tar.gz\" | tar xz mcp-publisher\nchmod +x mcp-publisher\nsudo mv mcp-publisher /usr/local/bin/\n\n# Login to MCP Registry\nmcp-publisher login github-oidc\n\n# Publish to MCP Registry\nmcp-publisher publish\n```\n\n### Setup\n\n1. Install dependencies:\n\n```bash\nnpm install\n```\n\n2. Build the server:\n\n```bash\nnpm run build\n```\n\n3. For development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n### Testing\n\nRun the test suite:\n\n```bash\nnpm test\n```\n\nThis executes tests for:\n\n- Server initialization\n- AnkiConnect communication\n- Note operations (create/read/update/delete)\n- Deck management\n- Error handling\n\n### Debugging\n\nSince MCP servers communicate over stdio, we recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThis provides a browser-based interface for:\n\n- Monitoring MCP messages\n- Testing tool invocations\n- Viewing server logs\n- Debugging communication issues\n\n## Example Usage\n\n1. Create a new deck:\n\n```\nCreate a new Anki deck called \"Programming\"\n```\n\n2. Add a basic card:\n\n```\nCreate an Anki card in the \"Programming\" deck with:\nFront: What is a closure in JavaScript?\nBack: A closure is the combination of a function and the lexical environment within which that function was declared.\n```\n\n3. Add a cloze deletion card:\n\n```\nCreate a cloze card in the \"Programming\" deck with:\nText: In JavaScript, {{c1::const}} declares a block-scoped variable that cannot be {{c2::reassigned}}.\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Run tests: `npm test`\n4. Submit a pull request\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=nailuoGG/anki-mcp-server&type=Date)](https://star-history.com/#nailuoGG/anki-mcp-server&Date)\n\n## Credits\n\nIcon courtesy of [macOS Icons](https://macosicons.com/#/?icon=mWDBpVXqbc)\n\n## License\n\nMIT License - see LICENSE file for details",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "anki",
        "flashcard",
        "flashcards",
        "anki flashcard",
        "interact anki",
        "anki mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "narphorium--mcp-memex": {
      "owner": "narphorium",
      "name": "mcp-memex",
      "url": "https://github.com/narphorium/mcp-memex",
      "imageUrl": "/freedevtools/mcp/pfp/narphorium.webp",
      "description": "Analyze web content and enhance your knowledge base by extracting information from URLs, storing it as Markdown files for easy access. Integrates seamlessly with Obsidian to facilitate questioning and retrieval of insights from the curated content.",
      "stars": 9,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-05T23:05:46Z",
      "readme_content": "# Memex for Model Context Protocol\n\nMemex is a tool for Model Context Protocol (MCP) that allows you to analyze web content and add it to your knowledge base.\n\nThe tool was inspired by the [Memex](docs/as_we_may_think.pdf) project by [Vannevar Bush](https://en.wikipedia.org/wiki/Vannevar_Bush).\n\n## Requirements\n\nYou will need API keys for the following services:\n\n- [Claude API](https://www.anthropic.com/en/claude)\n- [FireCrawl API](https://www.firecrawl.com/)\n- [Voyage API](https://voyageai.com/)\n\nThe knowledge base produced by this tool is stored as Markdown files so they can be viewed with any Markdown viewer but [Obsidian](https://obsidian.md/) is recommended.\n\n## Installation\n\n```bash\npip install mcp-memex\n```\n\nAdd the following to your `claude_desktop_config.json` and replace the placeholders with the actual paths and API keys:\n\n```json\n{\n  \"mcpServers\": {\n    \"memex\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"PATH_TO_LOCAL_MEMEX_REPO\",\n        \"run\",\n        \"mcp-memex\",\n        \"--index\",\n        \"PATH_TO_MEMEX_INDEX\",\n        \"--workspace\",\n        \"PATH_TO_OBSIDIAN_VAULT\"\n      ],\n      \"env\": {\n        \"ANTHROPIC_API_KEY\": \"YOUR-API-KEY\",\n        \"FIRECRAWL_API_KEY\": \"YOUR-API-KEY\",\n        \"VOYAGE_API_KEY\": \"YOUR-API-KEY\"\n      }\n    }\n  }\n}\n```\n\n## Usage\n\nStart by asking Claude a question with a list of URLs to reference.\n\n```\nWhat is the capital of France? \"https://en.wikipedia.org/wiki/France\"\n```\n\nOnce Claude has finished analyzing the content, you will see the results in your Obsidian vault. You can then ask questions about the content and Memex will use the knowledge base to answer your questions.\n\n```\nWhat is the capital of France?\n```\n\n## Development\n\nTo run the tool locally, you can use the following command:\n\n```bash\nnpx @modelcontextprotocol/inspector \\\n  uv \\\n  --directory PATH_TO_LOCAL_MEMEX_REPO \\\n  run \\\n  mcp-memex \\\n  --index PATH_TO_MEMEX_INDEX \\\n  --workspace PATH_TO_OBSIDIAN_VAULT\n```\n\nThen open the inspector and connect to the server.\n\nhttp://localhost:5173?timeout=30000",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "narphorium",
        "curated",
        "memex",
        "memex analyze",
        "notetaking knowledge",
        "analyze web"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "newtype-01--obsidian-mcp": {
      "owner": "newtype-01",
      "name": "obsidian-mcp",
      "url": "https://github.com/newtype-01/obsidian-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/newtype-01.webp",
      "description": "Connects AI models to Obsidian knowledge bases, enabling direct access to read, create, update, and delete notes, as well as manage folder structures and perform full-text searches.",
      "stars": 210,
      "forks": 25,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T19:32:11Z",
      "readme_content": "# Obsidian MCP (Model Context Protocol) Server\n\nEnglish | [中文](./README.zh.md)\n\nThis project implements a Model Context Protocol (MCP) server for connecting AI models with Obsidian knowledge bases. Through this server, AI models can directly access and manipulate Obsidian notes, including reading, creating, updating, and deleting notes, as well as managing folder structures.\n\nCreated by huangyihe\n- Prompt House: https://prompthouse.app/\n- YouTube: https://www.youtube.com/@huanyihe777\n- Twitter: https://x.com/huangyihe\n- Community: https://t.zsxq.com/19IaNz5wK\n\n## Features\n\n- **🔗 Seamless Obsidian Integration**: Direct access to Obsidian knowledge bases through MCP protocol\n- **📝 Complete Note Management**: Read, create, update, and delete notes with advanced text replacement\n- **📁 Folder Operations**: Create, rename, move, and delete folders with full hierarchy support\n- **🔍 Intelligent Search**: Full-text search across all file types with smart scoring\n- **🤖 AI-Powered Analysis**: **NEW** Strategic insights using TRILEMMA-PRINCIPLES framework\n- **🔗 Auto Backlink Generation**: **NEW** Intelligent detection and conversion of note names to wikilinks\n- **⚡ Precision Editing**: Advanced PATCH operations with heading and block-level targeting\n- **🚀 Dual API Strategy**: Obsidian REST API with filesystem fallback for maximum reliability\n- **🎯 Context Optimization**: Smart content summarization for LLM context length management\n- **📊 Batch Processing**: Efficient bulk operations with progress tracking\n\n## Supported Tools\n\nThe MCP server provides the following comprehensive tools:\n\n### 📋 Core Operations\n- `list_notes`: List notes in the Obsidian vault with optional folder filtering\n  - **NEW** `recursive` parameter: Control whether to list files recursively in subdirectories (default: true)\n  - Use `recursive: false` to list only files in the specified folder without subdirectories\n- `read_note`: Read the content of a specific note in the Obsidian vault\n- `read_multiple_notes`: Read content from multiple notes simultaneously for batch processing\n- `create_note`: Create a new note in the Obsidian vault with full content\n- `delete_note`: Delete a note from the Obsidian vault\n- `search_vault`: Advanced search across all file types with filename and content matching\n- `move_note`: Move or rename notes to new locations (supports all file types including PDFs)\n- `manage_folder`: Complete folder CRUD operations (create/rename/move/delete)\n\n### 🚀 Advanced Features\n- `update_note`: **Enhanced** Update content using text replacements OR precision insertion\n  - Traditional text replacement mode\n  - **NEW** Heading-based insertion (before/after/append/prepend)\n  - **NEW** Block ID-based insertion with `^block-id` support\n  - **NEW** PATCH API integration with filesystem fallback\n\n- `auto_backlink_vault`: **🔗 Auto Backlink Generation**\n  - Intelligently scan entire vault for note name mentions\n  - Convert text references to wikilink format (`[[note name]]`)\n  - Smart pattern matching with false positive prevention\n  - Configurable dry-run mode and batch processing\n  \n- `notes_insight`: **🧠 AI-Powered Strategic Analysis** ⭐ **NEW**\n  - Generate strategic insights using TRILEMMA-PRINCIPLES framework\n  - Automatic topic-based note discovery and relevance ranking\n  - AI-driven content summarization for context optimization\n  - Structured analysis: constraint identification → assumption challenges → breakthrough solutions\n  - Configurable parameters for analysis depth and scope\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- Obsidian desktop application\n- Obsidian Local REST API plugin (needs to be installed in Obsidian)\n\n## Installation Options\n\nChoose the most suitable installation method based on your technical level and usage needs:\n\n| Method | Target Users | Advantages | Disadvantages |\n|--------|-------------|------------|---------------|\n| **🎯 One-Click Install (DXT)** | General users | Simplest, GUI configuration | Requires DXT-enabled client |\n| **📦 Remote Install (NPM)** | Node.js users | Auto-updates, no installation | Requires network connection |\n| **🔧 Local Deploy** | Advanced users | Offline use, full control | Manual updates required |\n\n---\n\n## Method 1: One-Click Install (DXT Package) - ✅ Recommended\n\n**Suitable for:** General users who want the simplest installation experience\n\n### Step 1: Download DXT File\n\nDownload the pre-built extension package: [obsidian-mcp.dxt](./obsidian-mcp.dxt)\n\n### Step 2: Install and Configure\n\nDouble-click the downloaded `.dxt` file and the system will automatically install the extension. Then fill in the configuration interface:\n\n- **Vault Path**: Your Obsidian vault path (e.g., `/Users/username/Documents/MyVault`)\n- **API Token**: Obsidian Local REST API plugin token\n- **API Port**: API port number (default: `27123`)\n\n---\n\n## Method 2: Remote Install (NPM Package)\n\n**Suitable for:** Node.js developers who want automatic updates and version management\n\nSimply add the following configuration to your MCP client config file:\n\n**Using npx (recommended, no pre-installation required):**\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@huangyihe/obsidian-mcp\"\n      ],\n      \"env\": {\n        \"OBSIDIAN_VAULT_PATH\": \"/path/to/your/vault\",\n        \"OBSIDIAN_API_TOKEN\": \"your_api_token\",\n        \"OBSIDIAN_API_PORT\": \"27123\"\n      }\n    }\n  }\n}\n```\n\n> **Note**: First run will automatically download the package, subsequent runs use cache, ensuring you always use the latest version.\n\n---\n\n## Method 3: Local Deploy\n\n**Suitable for:** Users who need customization, advanced control, or offline usage\n\n### Option A: Global Install (Recommended)\n\n**Step 1: Global Install**\n```bash\nnpm install -g @huangyihe/obsidian-mcp\n```\n\n**Step 2: MCP Client Configuration**\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp\": {\n      \"command\": \"obsidian-mcp\",\n      \"env\": {\n        \"OBSIDIAN_VAULT_PATH\": \"/path/to/your/vault\",\n        \"OBSIDIAN_API_TOKEN\": \"your_api_token\",\n        \"OBSIDIAN_API_PORT\": \"27123\"\n      }\n    }\n  }\n}\n```\n\n### Option B: Source Deploy\n\n**Step 1: Clone Repository**\n```bash\ngit clone https://github.com/newtype-01/obsidian-mcp.git\ncd obsidian-mcp\n```\n\n**Step 2: Install Dependencies**\n```bash\nnpm install\n```\n\n**Step 3: Build Project**\n```bash\nnpm run build\n```\n\n**Step 4: Configure Environment Variables**\n```bash\ncp .env.example .env\n# Edit .env file with your configuration\n```\n\n**Step 5: Start Server**\n```bash\nnpm start\n```\n\n### Option C: Docker Deploy\n\n**Using Docker Compose (Recommended)**\n\n```bash\n# Configure environment variables\ncp .env.example .env\n# Edit .env file\n\n# Start service\ndocker-compose up -d\n```\n\n**Using Docker Command**\n\n```bash\n# Build image\ndocker build -t obsidian-mcp .\n\n# Run container\ndocker run -d \\\n  --name obsidian-mcp \\\n  --env-file .env \\\n  --network host \\\n  -v $(OBSIDIAN_VAULT_PATH):$(OBSIDIAN_VAULT_PATH) \\\n  obsidian-mcp\n```\n\n---\n\n## Configuration Guide\n\n### Environment Variables\n\nAll installation methods require the following configuration:\n\n- `OBSIDIAN_VAULT_PATH`: Path to your Obsidian vault\n- `OBSIDIAN_API_TOKEN`: API token for Obsidian Local REST API plugin  \n- `OBSIDIAN_API_PORT`: API port for Obsidian Local REST API (default: 27123)\n\n⚠️ **Important**: For remote NPM installation and global installation, you MUST use the `OBSIDIAN_` prefix for environment variables. The variables `VAULT_PATH`, `API_TOKEN` without the prefix will not work correctly.\n\n### Getting API Token\n\n1. Install \"Local REST API\" plugin in Obsidian\n2. Generate API Token in plugin settings\n3. Note the port number (default 27123)\n\n\n## Testing\n\nThe project includes a test script to verify server functionality:\n\n```bash\nnode test-mcp.js\n```\n\n## Development\n\n- Use `npm run dev` to run the server in development mode\n- Source code is located in the `src` directory\n\n## License\n\nMIT\n\n## Contributing\n\nPull Requests and Issues are welcome!\n\n## Related Projects\n\n- [Model Context Protocol](https://github.com/anthropics/model-context-protocol)\n- [Obsidian Local REST API](https://github.com/coddingtonbear/obsidian-local-rest-api) ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "ai",
        "notetaking",
        "obsidian knowledge",
        "obsidian mcp",
        "knowledge bases"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "noah-vh--mcp-server-clickup": {
      "owner": "noah-vh",
      "name": "mcp-server-clickup",
      "url": "https://github.com/noah-vh/mcp-server-clickup",
      "imageUrl": "/freedevtools/mcp/pfp/noah-vh.webp",
      "description": "Manage and organize notes with a simple storage system, allowing users to add notes, summarize them, and access them via a custom URI scheme.",
      "stars": 4,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-06-26T18:46:29Z",
      "readme_content": "# clickup-operator MCP server\n\nclickup thru claude\n\n```bash\nuv --directory C:\\Users\\noahv\\Documents\\GitHub\\clickup-operator run clickup-operator\n```\n\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"clickup-operator\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Users\\noahv\\Documents\\GitHub\\create-python-server\\clickup-operator\",\n        \"run\",\n        \"clickup-operator\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"clickup-operator\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"clickup-operator\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\noahv\\Documents\\GitHub\\create-python-server\\clickup-operator run clickup-operator\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "mcp",
        "organize notes",
        "notetaking knowledge",
        "add notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ohardcore--awesome-interview-questions": {
      "owner": "ohardcore",
      "name": "awesome-interview-questions",
      "url": "https://github.com/ohardcore/awesome-interview-questions",
      "imageUrl": "/freedevtools/mcp/pfp/ohardcore.webp",
      "description": "Curated collection of technical interview questions categorized by programming languages, frameworks, and other technical domains. Aids in interview preparation through a comprehensive set of questions of varying difficulty levels.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2021-03-01T19:28:53Z",
      "readme_content": "# Awesome Interviews [![Awesome](https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg)](https://github.com/sindresorhus/awesome)\n\n> A curated list of lists of technical interview questions.\n\n[What makes for an awesome list?](awesome.md)\n\nPlease read the [contribution guidelines](contributing.md) or the [creating a list guide](create-list.md) if you want to contribute.\n\n**Check out my [channel](https://t.me/botcube) or [blog](https://medium.com/@MaximAbramchuk).**\n\n### Table of Contents\n\n- [Programming Languages/Frameworks/Platforms](#programming-languagesframeworksplatforms)\n  - [Android](#android)\n  - [AngularJS](#angularjs)\n  - [BackboneJS](#backbonejs)\n  - [C++](#c)\n  - [C](#c-1)\n  - [C♯](#c-2)\n  - [.NET](#net)\n  - [Clojure](#clojure)\n  - [CSS](#css)\n  - [Django](#django)\n  - [EmberJS](#emberjs)\n  - [Erlang](#erlang)\n  - [Golang](#golang)\n  - [HTML](#html)\n  - [Ionic](#ionic)\n  - [iOS](#ios)\n  - [Java](#java)\n  - [JavaScript](#javascript)\n  - [Front-end build tools](#front-end-build-tools)\n  - [KnockoutJS](#knockoutjs)\n  - [Less](#less)\n  - [Lisp](#lisp)\n  - [NodeJS](#nodejs)\n  - [Objective-C](#objective-c)\n  - [PHP](#php)\n  - [Python](#python)\n  - [ReactJS](#reactjs)\n  - [Rails](#ruby-on-rails)\n  - [Ruby](#ruby)\n  - [Sass](#sass)\n  - [Scala](#scala)\n  - [Shell](#shell)\n  - [Swift](#swift)\n  - [Wordpress](#wordpress)\n- [Database technologies](#database-technologies)\n  - [Cassandra](#cassandra)\n  - [Microsoft Access](#microsoft-access)\n  - [MongoDB](#mongodb)\n  - [MySQL](#mysql)\n  - [Neo4j](#neo4j)\n  - [Oracle](#oracle)\n  - [Postgres](#postgres)\n  - [SQL](#sql)\n  - [SQL Lite](#sql-lite)\n\n- [OS](#os)\n  - [Linux](#linux)\n  - [Windows](#windows)\n- [Algorithms](#algorithms)\n- [Coding exercises](#coding-exercises)\n- [Comprehensive lists](#comprehensive-lists)\n- [Design patterns](#design-patterns)\n- [Data structures](#data-structures)\n- [Networks](#networks)\n- [Security](#security)\n- [Data Science](#data-science)\n\n## Programming Languages/Frameworks/Platforms\n\n### Android\n\n* [10 Android interview question answers for Freshers](http://www.careerride.com/android-interview-questions.aspx)\n* [14 Essential Android Interview Questions from top 3% developers company](http://www.toptal.com/android/interview-questions)\n* [50 android interview questions & answers](http://career.guru99.com/50-android-interview-questions-answers/).\n* [A couple of Android questions posted by Quora users](https://www.quora.com/What-are-good-job-interview-questions-for-an-Android-developer)\n* [A great list of Android interview questions covering all the aspects of this career](http://www.tutorialspoint.com/android/android_interview_questions.htm)\n* [Collection of Android and Java related questions and topics, including general developer questions, Java core, Data structures, Build Tools, Programming Paradigms, Core Android, Databases and etc](https://github.com/derekargueta/Android-Interview-Questions)\n* [Collection of Android and Java questions divided by experience](https://medium.com/@neteinstein/not-another-android-interviews-article-the-questions-3dedafa30bec)\n\n### AngularJS\n\n* [10 Essential AngularJS Interview Questions from top 3% developers company](http://www.toptal.com/angular-js/interview-questions)\n* [An AngularJS exam with questions from beginner to expert by @gdi2290 from @AngularClass](https://github.com/gdi2290/ngExam)\n* [29 AngularJS Interview Questions – Can You Answer Them All? Great Article from Codementor](https://www.codementor.io/angularjs/tutorial/angularjs-interview-questions-sample-answers)\n* [AngularJS interview questions and answers for experienced developers](http://www.web-technology-experts-notes.in/2014/11/angularjs-interview-questions-and-answers-for-experienced.html)\n* [AngularJS Interview Questions which have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of AngularJS](http://www.tutorialspoint.com/angularjs/angularjs_interview_questions.htm)\n* [This article discusses the top 50 Most occurred AngularJS interview question with answers](http://www.codeproject.com/Articles/891718/AngularJS-Interview-Questions-and-Answers)\n* [Top 25 Angularjs Interview Questions and Quiz](http://career.guru99.com/top-25-angular-js-interview-questions/)\n\n### BackboneJS\n\n* [8 Essential Backbonejs Interview Questions from top 3% developers company](http://www.toptal.com/backbone-js/interview-questions)\n* [Backbonejs Interview Questions And Answers from web technology experts notes](http://www.web-technology-experts-notes.in/2015/01/backbone-js-interview-questions-and-answers.html)\n* [Top 25 Backbone.js interview questions](http://career.guru99.com/top-25-backbone-js-interview-questions/)\n\n### C++\n\n* [1000+ Multiple Choice Questions & Answers in C++ with explanations](http://www.sanfoundry.com/cplusplus-interview-questions-answers/)\n* [200 C++ interview questions and answers](http://www.careerride.com/C++-Interview-questions-Answer.aspx)\n* [18 Essential C++ Interview Questions from top 3% developers company](http://www.toptal.com/c-plus-plus/interview-questions)\n* [C++ Interview Questions and Answers for Freshers and Experienced developers](http://a4academics.com/interview-questions/57-c-plus-plus/419-cpp-interview-questions-answers)\n* [C++ Interview Questions from GeekInterview](http://www.geekinterview.com/Interview-Questions/Languages/C-Plus-Plus)\n* [C++ Programming Q&A and quizzes from computer science portal for geeks](http://www.geeksforgeeks.org/c-plus-plus/)\n* [C++ Programming Questions and Answers related to such topics as OOPs concepts, Object and Classes, Functions, Constructors and Destructors, Inheritance and etc](http://www.indiabix.com/cpp-programming/questions-and-answers/)\n* [LeetCode Problems' Solutions written in C++](https://github.com/haoel/leetcode)\n* [25 Fundamental C++ Interview Questions](https://pangara.com/blog/cplusplus-interview-questions)\n\n### C\n\n* [165 C interview questions](http://placement.freshersworld.com/power-preparation/technical-interview-questions/C-programming-answers-21419)\n* [Basic C language technical frequently asked interview questions and answers It includes data structures, pointers interview questions and answers for experienced](http://www.cquestions.com/2010/10/c-interview-questions-and-answers.html)\n* [C Programming Interview Questions and Answers for such topics as Bits and Bytes, Preprocessors, Functions, Strings, Language basics and etc](http://www.indiabix.com/technical/c/)\n* [C Programming Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of C Programming](http://www.tutorialspoint.com/cprogramming/cprogramming_interview_questions.htm)\n* [First set of commonly asked C programming interview questions from computer science portal for geeks](http://geeksquiz.com/commonly-asked-c-programming-interview-questions-set-1/)\n* [Second set of commonly asked C programming interview questions from computer science portal for geeks](http://geeksquiz.com/commonly-asked-c-programming-interview-questions-set-2/)\n\n### C♯\n\n* [6 Essential C# Interview Question from top 3% developers company](http://www.toptal.com/c-sharp/interview-questions)\n* [C# interview questions from dotnetfunda.com](http://www.dotnetfunda.com/interviews/cat/6/csharp)\n* [Top 100 C# Interview Questions and Answers](http://a4academics.com/interview-questions/52-dot-net-interview-questions/417-c-oops-interview-questions-and-answers)\n* [Top 50 C# Interview Questions & Answers](http://career.guru99.com/top-50-c-sharp-interview-questions-answers/)\n\n### .NET\n\n* [300 ASPNET interview questions and answers](http://www.careerride.com/ASPNet-Questions.aspx)\n* [Great list of NET interview questions covering all the NET platform topics](http://www.indiabix.com/technical/dotnet/)\n* [NET Interview Questions and Answers for Beginners which consists of the most frequently asked questions in NET This list of 100+ questions and answers gauge your familiarity with the NET platform](http://www.dotnetcurry.com/dotnetinterview/70/dotnet-interview-questions-answers-beginners)\n* [Questions gathered by community of the StackOverflow](http://stackoverflow.com/questions/365489/questions-every-good-net-developer-should-be-able-to-answer)\n* [What Great NET Developers Ought To Know (More NET Interview Questions)](http://www.hanselman.com/blog/WhatGreatNETDevelopersOughtToKnowMoreNETInterviewQuestions.aspx)\n\n### Clojure\n\n* [Classic 'Fizz Buzz' interview question for Clojure developers](http://www.learningclojure.com/2014/05/fizz-buzz-interview-question.html)\n* [Clojure Interview Questions for experienced devs](http://ita2zguide.blogspot.com.by/p/cc.html)\n* [Coding exercises in Clojure, handy practice for technical interview questions](https://github.com/dpetrovics/coding-exercises)\n* [Experience and questions from Clojure developer interview collected by Reddit users](https://www.reddit.com/r/Clojure/comments/34qhha/clojure_coding_job_interview_experience/)\n* [Interview cake Clojure solutions](https://github.com/DerekCuevas/interview-cake-clj)\n\n### CSS\n\n* [25 helpful CSS interview questions and answers](http://www.skilledup.com/articles/25-css-interview-questions-answers)\n* [CSS interview questions and answers for freshers and experienced candidates Also there you can find CSS online practice tests to fight written tests and certification exams on CSS](http://www.careerride.com/Interview-Questions-CSS.aspx)\n* [Development hiring managers and potential interviewees may find there sample CSS proficiency interview Q&As and code snippets useful](http://www.techrepublic.com/blog/software-engineer/css-interview-questions-and-answers/)\n* [Interview Questions and Exercises About CSS](https://css-tricks.com/interview-questions-css/)\n* [Top 50 CSS(Cascading Style Sheet) Interview Questions covering the most of tricky CSS moments](http://career.guru99.com/top-50-csscascading-style-sheet-interview-questions/)\n* [CSS Questions and Answers](https://github.com/yangshun/tech-interview-handbook/blob/master/front-end/interview-questions.md#css-questions)\n\n### Django\n\n* [Some abstract interview questions for Python/Django developers](http://insights.dice.com/2014/04/30/interview-questions-pythondjango-developers/)\n* [Some Django basic interview questions to establish the basic level of the candidates](http://www.ilian.io/django-interview-questions/)\n* [Some Django/Python interview questions from Jaypal personal blog](http://blog.jayapal.in/2010/11/django-interview-question.html)\n* [Top 10 Django interview questions with their answers that you can encounter during the job interview for web developer](http://www.goodinterviewquestions.net/top-10-django-interview-questions-and-answers/)\n* [Django interview questions from f2finterview.com](http://www.f2finterview.com/web/Django/)\n* [Top 16 Django Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-16-django-interview-questions/)\n\n### EmberJS\n\n* [8 Essential Emberjs Interview Questions from top 3% developers company](http://www.toptal.com/emberjs/interview-questions)\n* [Top 25 Emberjs Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-25-ember-js-interview-questions/)\n\n### Erlang\n\n* [Top 22 Erlang Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-22-erlang-interview-questions/)\n\n### Golang\n\n* [Solutions for Elements of Programming Interviews problems written in Golang](https://github.com/mrekucci/epi)\n* [Solutions for some basic coding interview tasks written in Go](https://github.com/efischer19/golang_ctci)\n* [Top 20 GO Programming Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-20-go-programming-interview-questions/)\n\n### HTML\n\n* [10 Typical HTML Interview Exercises from SitePoint.com](http://www.sitepoint.com/10-typical-html-interview-exercises/)\n* [12 Essential HTML5 Interview Questions from top 3% developers company](http://www.toptal.com/html5/interview-questions)\n* [35 Helpful HTML & HTML5 Interview Questions & Answers](http://www.skilledup.com/articles/html-html5-interview-questions-answers)\n* [40 important HTML 5 Interview questions with answers](http://www.codeproject.com/Articles/702051/important-HTML-Interview-questions-with-answe)\n* [HTML interview questions and answers for freshers and experienced candidates Also find HTML online practice tests to fight written tests and certification exams on HTML](http://www.careerride.com/Interview-Questions-HTML.aspx)\n* [Top 50 HTML Interview Questions for both freshers and experienced developers](http://career.guru99.com/top-50-html-interview-questions/)\n* [Common HTML interview questions for freshers](http://www.javatpoint.com/html-interview-questions)\n* [HTML Questions and Answers](https://github.com/yangshun/tech-interview-handbook/blob/master/front-end/interview-questions.md#html-questions)\n\n### Ionic\n\n* [23 Beginner Level Ionic Framework Questions](http://www.codeandyou.com/p/ionic-interview-questions.html)\n* [11 Essential Ionic Interview Questions](https://www.toptal.com/ionic/interview-questions)\n\n### iOS\n\n* [12 Essential iOS Interview Questions from top 3% developers company](http://www.toptal.com/ios/interview-questions)\n* [20 iOS Developer Interview Questions and Answers for getting you ready for your interview](https://www.codementor.io/ios/tutorial/ios-interview-tips-questions-answers-objective-c)\n* [A small guide to help those looking to hire a developer or designer for iOS work While tailored for iOS, many questions could be used for Android developers or designers as well A great self-test if you're looking to keep current or practice for your own interview](https://github.com/CameronBanga/iOS-Developer-and-Designer-Interview-Questions)\n* [All you need to know about iOS technical interview including some tips for preparing, questions and some coding exercises](http://www.raywenderlich.com/53962/ios-interview-questions)\n* [Interview Questions for iOS and Mac Developers from the CEO of Black Pixel](https://blackpixel.com/writing/2013/04/interview-questions-for-ios-and-mac-developers-1.html)\n* [iOS Interview Questions and Answers including such topics as Development Basics, App states and multitasking, App states, Core app objects](http://www.geekinterview.com/Interview-Questions/iOS)\n* [iOS Interview Questions For Senior Developers](https://m.smartcloud.io/ios-interview-questions-for-senior-developers-in-2017-a94cc81c8205)\n* [50 iOS Interview Questions And Answers 1](https://medium.com/ios-os-x-development/ios-interview-questions-13840247a57a)\n* [50 iOS Interview Questions And Answers Part 2](https://medium.com/ios-os-x-development/50-ios-interview-questions-and-answers-part-2-45f952230b9f)\n* [50 iOS Interview Questions And Answers Part 3](https://medium.com/ios-os-x-development/50-ios-interview-questions-and-answers-part-3-3fad146b6c3d)\n* [50 iOS Interview Questions And Answers Part 4](https://medium.com/@duruldalkanat/50-ios-interview-questions-and-answers-part-4-6f26b26341a)\n* [10 iOS interview questions and answers](https://www.upwork.com/i/interview-questions/ios/)\n* [iOS Developer and Designer Interview Questions](https://github.com/9magnets/iOS-Developer-and-Designer-Interview-Questions#tech)\n* [IOS Interview Questions and Answers](http://www.thecrazyprogrammer.com/2015/11/ios-interview-questions-and-answers.html)\n\n### Java\n\n* [115 Java Interview Questions and Answers – The ULTIMATE List](http://www.javacodegeeks.com/2014/04/java-interview-questions-and-answers.html)\n* [37 Java Interview Questions to Practice With from Codementor](https://www.codementor.io/java/tutorial/java-interview-sample-questions-answers)\n* [20 Essential Java Interview Questions](http://www.toptal.com/java/interview-questions)\n* [A collection of Java interview questions and answers to them The questions were gathered all around the Internet The answers are partly written by the commiters, partly copy-pasted from all possible sources](https://github.com/svozniuk/java-interviews)\n* [Data Structures and Algorithms in Java which can be useful in interview process](https://github.com/donbeave/interview)\n* [Java Interview Questions: How to crack the TOP 15 questions](https://blog.udemy.com/java-interview-questions/)\n* [There is the list of 201 core java interview questions The answers of the core java interview questions are short and to the point The core java interview questions are categorized in Basics of java interview questions, OOPs interview questions, String Handling interview questions, Multithreading interview questions, collection interview questions, JDBC interview questions etc](http://www.javatpoint.com/corejava-interview-questions)\n* [Top 10 Tricky Java interview questions and Answers](http://java67.blogspot.com.by/2012/09/top-10-tricky-java-interview-questions-answers.html)\n* [Top 25 Most Frequently Asked Interview Core Java Interview Questions And Answers](http://javahungry.blogspot.com/2013/06/top-25-most-frequently-asked-core-java.html)\n* [Top 40 Core Java Interview Questions Answers from Telephonic Round](http://java67.blogspot.sg/2015/03/top-40-core-java-interview-questions-answers-telephonic-round.html)\n* [Interview Cake Java Interview Questions](https://www.interviewcake.com/java-interview-questions)\n\n### JavaScript\n\n* [10 Interview Questions Every JavaScript Developer Should Know](https://medium.com/javascript-scene/10-interview-questions-every-javascript-developer-should-know-6fa6bdf5ad95)\n* [21 Essential JavaScript Interview Questions from best mentors all over the world](https://www.codementor.io/javascript/tutorial/21-essential-javascript-tech-interview-practice-questions-answers)\n* [25 Essential JavaScript Interview Questions from top 3% developers company](http://www.toptal.com/javascript/interview-questions)\n* [5 More JavaScript Interview Exercises](http://www.sitepoint.com/5-javascript-interview-exercises/)\n* [5 Typical JavaScript Interview Exercises](http://www.sitepoint.com/5-typical-javascript-interview-exercises/)\n* [Development hiring managers and potential interviewees may find these sample JavaScript proficiency interview Q&As and code snippets useful](http://www.techrepublic.com/blog/software-engineer/javascript-interview-questions-and-answers/)\n* [123 Essential JavaScript Interview Question](https://github.com/nishant8BITS/123-Essential-JavaScript-Interview-Question)\n* [JavaScript Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of JavaScript](http://www.tutorialspoint.com/javascript/javascript_interview_questions.htm)\n* [JS: Basics and Tricky Questions](http://www.thatjsdude.com/interview/js2.html)\n* [JS: Interview Algorithm](http://thatjsdude.com/interview/js1.html)\n* [Some basic javascript coding challenges and interview questions](https://github.com/kolodny/exercises)\n* [Some JavaScript interview exercises](https://github.com/csvenja/javascript-exercises)\n* [Ten Questions I've Been Asked, Most More Than Once, Over Six Technical JavaScript / Front-End Engineer Job Interviews.](https://www.reddit.com/r/javascript/comments/3rb88w/ten_questions_ive_been_asked_most_more_than_once)\n* [Top 85 JavaScript Interview Questions](http://career.guru99.com/top-85-javascript-interview-questions/)\n* [Interview Cake JavaScript Interview Questions](https://www.interviewcake.com/javascript-interview-questions)\n* [The Best Frontend JavaScript Interview Questions (written by a Frontend Engineer)](https://performancejs.com/post/hde6d32/The-Best-Frontend-JavaScript-Interview-Questions-(written-by-a-Frontend-Engineer))\n* [JavaScript Questions and Answers](https://github.com/yangshun/tech-interview-handbook/blob/master/front-end/interview-questions.md#js-questions)\n* [10 JavaScript Concepts You Need to Know for Interviews](https://dev.to/arnavaggarwal/10-javascript-concepts-you-need-to-know-for-interviews)\n\n\n### Front-end build tools\n\n* [Webpack interview questions & answers](https://github.com/styopdev/webpack-interview-questions)\n* [Gulp js interview questions](https://www.codeproject.com/Articles/1065184/Latest-Gulp-js-interview-questions)\n* [Grunt js interview questions for beginners](http://www.talkingdotnet.com/grunt-js-interview-questions/)\n* [Grunt js interview questions](https://mindmajix.com/grunt-interview-questions)\n\n### KnockoutJS\n\n* [15 interview questions from CodeSample.com](http://www.code-sample.com/2014/01/knockout-js-interview-questions-and.html)\n* [20 questions you might be asked about KnockoutJS in an interview for both freshers and experienced developers](http://www.codeproject.com/Articles/987899/KnockoutJS-interview-questions)\n\n### Less\n\n* [Top 25 LESS Interview Questions](http://career.guru99.com/top-25-less-interview-questions/)\n\n### Lisp\n\n* [10 LISP Questions & Answers](http://www.sanfoundry.com/lisp-mcqs-class/)\n* [Top 18 Lisp Interview Questions from Career Guru](http://career.guru99.com/top-18-lisp-interview-questions/)\n\n### NodeJS\n\n* [7 Essential Nodejs Interview Questions from top 3% developers company](http://www.toptal.com/nodejs/interview-questions)\n* [Node.js Interview Questions & Answers from LazyQuestion.com](http://www.lazyquestion.com/interview-questions-and-answer/nodejs)\n* [Node.JS Interview Questions have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Node.JS](http://www.tutorialspoint.com/nodejs/nodejs_interview_questions.htm)\n* [There are two sides of the table: you either want to hire Nodejs developers or you want to get hired as a Nodejs developer This list helps you navigate a bit in this space, giving you some questions to ask, and a list of questions you should know the answer to](https://blog.risingstack.com/node-js-interview-questions/)\n* [Top 25 Nodejs Interview Questions & Answers from Career Guru](http://career.guru99.com/top-25-interview-questions-on-node-js/)\n* [Top 30 Node.Js Interview Questions With Answers](http://www.techbeamers.com/top-30-node-js-interview-questions-answers/)\n\n### Objective-C\n\n* [Interview Qs for Objective-C and Swift](http://insights.dice.com/2015/07/21/interview-qs-objective-c-swift/)\n* [iOS/ObjC Interview Questions](http://andras.palfi.hu/iosobjc-interview-questions/)\n\n### PHP\n\n* [100 PHP interview questions and answers from CareerRide.com](http://www.careerride.com/PHP-Interview-Questions.aspx)\n* [14 Essential PHP Interview Questions from top 3% developers company](http://www.toptal.com/php/interview-questions)\n* [20 Common PHP Job Interview Questions and Answers](http://www.woodstitch.com/resources/php-interview-questions.php)\n* [Basic PHP interview questions](https://github.com/developerquestions/php-questions)\n* [PHP interview questions and answers for freshers](http://phpinterviewquestions.co.in/)\n* [Top 100 PHP Interview Questions & Answers from CareerGuru](http://career.guru99.com/top-100-php-interview-questions-answers/)\n* [25 PHP Interview Questions](https://www.codementor.io/php/tutorial/php-interview-questions-sample-answers)\n\n### Python\n\n* [50 Python interview questions and answers](http://www.careerride.com/python-interview-questions.aspx)\n* [8 Essential Python Interview Questions from top 3% developers company](http://www.toptal.com/python/interview-questions)\n* [A listing of questions that could potentially be asked for a python job listing](https://github.com/sigmavirus24/python-interview-questions)\n* [Interview Questions for both beginners and experts](http://www.bogotobogo.com/python/python_interview_questions.php)\n* [Interview Cake Python Interview Questions](https://www.interviewcake.com/python-interview-questions)\n* [Python Frequently Asked Questions (Programming)](https://docs.python.org/2/faq/programming.html)\n* [Python interview questions collected by Reddit users](https://www.reddit.com/r/Python/comments/1knw7z/python_interview_questions)\n* [Python Interview Questions from questionscompiled](http://www.questionscompiled.com/python-interview-questions.html)\n* [Top 25 Python Interview Questions from Career Guru](http://career.guru99.com/top-25-python-interview-questions/)\n* [Python Interview 10 questions from Corey Schafer](https://www.youtube.com/watch?v=DEwgZNC-KyE)\n\n### Ruby on Rails\n\n* [20 Ruby on Rails interview questions and answers from CareerRide.com](http://www.careerride.com/ruby-on-rails-interview-questions.aspx)\n* [8 Essential Ruby on Rails Interview Questions from top 3% developers company](http://www.toptal.com/ruby-on-rails/interview-questions)\n* [A list of common questions with answers ask during interview of ruby on rails job](https://github.com/rishiip/ruby-on-rails-interview-questions)\n* [Ruby And Ruby On Rails interview Q&A](http://anilpunjabi.tumblr.com/post/25948339235/ruby-and-rails-interview-questions-and-answers)\n* [Some of the most frequently asked Ruby on Rails questions and how to answer them confidently](https://srikantmahapatra.wordpress.com/2013/11/07/ruby-on-rails-interview-questions-and-answers/)\n* [11 Ruby on Rails Interview Practice Questions](https://www.codementor.io/ruby-on-rails/tutorial/ruby-on-rails-interview-questions)\n* [Top 53 Ruby on Rails Interview Questions & Answers](https://career.guru99.com/top-34-ruby-on-rail-interview-questions/)\n* [10 Ruby on Rails interview questions and answers](https://www.upwork.com/i/interview-questions/ruby-on-rails/)\n\n### ReactJS\n\n* [Reddit users share their expectations from ReactJS interview](https://www.reddit.com/r/reactjs/comments/3m5equ/react_what_interview_questions_to_expect/)\n* [This is a first in the series of interview questions related with ReactJS](http://interview-questions-247.appspot.com/reactjs-interview-questions-set-1)\n* [This quiz intends to test your understanding around ReactJS fundamentals (Set 3)](http://interview-questions-247.appspot.com/reactjs-interview-questions-set-3)\n* [This quiz intends to test your understanding around ReactJS fundamentals](http://interview-questions-247.appspot.com/reactjs-interview-questions-set-2)\n* [5 Essential React.js Interview Questions](https://www.codementor.io/reactjs/tutorial/5-essential-reactjs-interview-questions)\n* [React Interview Questions](https://tylermcginnis.com/react-interview-questions/)\n\n### Ruby\n\n* [11 Essential Ruby Interview Questions from top 3% developers company](http://www.toptal.com/ruby/interview-questions)\n* [15 Questions to Ask During a Ruby Interview](https://gist.github.com/ryansobol/5252653)\n* [A list of questions about Ruby programming you can use to quiz yourself](https://github.com/undr/ruby-trivia)\n* [The Art of Ruby Technical Interview](http://technology.customink.com/blog/2015/11/23/the-art-of-ruby-technical-interviews/)\n* [Interview Cake Ruby Interview Questions](https://www.interviewcake.com/ruby-interview-questions)\n* [Frequently Asked Ruby Interview Questions](https://www.javatpoint.com/ruby-interview-questions)\n\n### Sass\n\n* [Top 17 Sass Interview Questions from Career Guru](http://career.guru99.com/top-17-sass-interview-questions/)\n\n### Scala\n\n* [4 Interview Questions for Scala Developers](http://insights.dice.com/2014/09/12/4-interview-questions-scala-developers/)\n* [A list of Frequently Asked Questions and their answers, sorted by category](http://www.scala-lang.org/old/faq)\n* [A list of helpful Scala related questions you can use to interview potential candidates](https://github.com/Jarlakxen/Scala-Interview-Questions)\n* [How Scala Developers Are Being Interviewed](http://programmers.stackexchange.com/questions/58145/how-scala-developers-are-being-interviewed)\n* [Scala Interview Questions/Answers including Language Questions, Functional Programming Questions, Reactive Programming Questions](https://github.com/peterarsentev/Scala-Interview-Questions-Answers)\n* [Top 25 Scala Interview Questions & Answers from top 3% developers company](http://career.guru99.com/top-25-interview-questions-on-scala/)\n\n### SharePoint\n\n* [Sharepoint Interview Question For Developer](http://www.rajeshg.me/2013/05/sharepoint-developer-2010-interview.html)\n\n### Shell\n\n* [Top 50 Shell Scripting Interview Questions from Career Guru](http://career.guru99.com/shell-scripting-interview-questions/)\n\n### Swift\n\n* [5 Swift questions for your iOS job interview](http://www.skilledup.com/articles/5-swift-questions-ios-job-interview)\n* [9 Essential Swift Interview Questions from top 3% developers company](http://www.toptal.com/swift/interview-questions)\n* [Get prepared for your next iOS job interview by studying high quality LeetCode solutions in Swift 2.1](https://github.com/diwu/LeetCode-Solutions-in-Swift)\n* [Swift Interview Questions and Answers for both freshers and beginners](http://www.raywenderlich.com/110982/swift-interview-questions-answers)\n* [Swift Programming Language Interview Questions And Answers from mycodetips.com](http://mycodetips.com/swift-ios/swift-programming-language-interview-questions-answers-987.html)\n* [Your top 10 Swift questions answered](http://blog.udacity.com/2014/11/your-top-10-swift-questions-answered.html)\n\n### Wordpress\n* [Top 45 Wordpress interview questions](https://pangara.com/blog/45-wordpress-interview-questions-and-answers)\n\n## Database technologies\n\n\n### Cassandra\n\n* [Top 23 Cassandra Interview Questions from Career Guru](http://career.guru99.com/top-23-cassandra-interview-questions/)\n\n### Microsoft Access\n\n* [Top 16 Microsoft Access Database Interview Questions from Career Guru](http://career.guru99.com/top-16-ms-access-database-interview-questions/)\n\n### MongoDB\n\n* [28 MongoDB NoSQL Database Interview Questions and Answers](http://theprofessionalspoint.blogspot.com.by/2014/01/28-mongodb-nosql-database-interview.html)\n* [MongoDB frequently Asked Questions by expert members with experience in MongoDB These questions and answers will help you strengthen your technical skills, prepare for the new job test and quickly revise the concepts](http://www.globalguideline.com/interview_questions/Questions.php?sc=MongoDB](http://www.globalguideline.com/interview_questions/Questions.php?sc=MongoDB))\n* [MongoDB Interview Questions from JavaTPointcom](http://www.javatpoint.com/mongodb-interview-questions)\n* [MongoDB Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of MongoDB](http://www.tutorialspoint.com/mongodb/mongodb_interview_questions.htm)\n* [Top 20 MongoDB interview questions from Career Guru](http://career.guru99.com/top-20-mongodb-interview-questions/)\n\n### MySQL\n\n* [10 MySQL Database Interview Questions for Beginners and Intermediates](http://www.tecmint.com/10-mysql-database-interview-questions-for-beginners-and-intermediates/)\n* [100 MySQL interview questions](http://www.careerride.com/MySQL-Interview-Questions.aspx)\n* [15 Basic MySQL Interview Questions for Database Administrators](http://www.tecmint.com/basic-mysql-interview-questions-for-database-administrators/)\n* [28 MySQL interview questions from JavaTPoint.com](http://www.javatpoint.com/mysql-interview-questions)\n* [40 Basic MySQL Interview Questions with Answers](http://www.testingbrain.com/interview/mysql-interview-questions.html)\n* [Top 50 MySQL Interview Questions & Answers from Career Guru](http://career.guru99.com/top-50-mysql-interview-questions-answers/)\n\n### Neo4j\n\n* [Top 20 Neo4j Interview Questions from Career Guru](http://career.guru99.com/top-20-ne04j-interview-questions/)\n\n### Oracle\n\n* [General Oracle Interview Questions & Answers](http://www.coolinterview.com/type.asp?iType=57)\n\n### Postgres\n\n* [13 PostgreSQL Interview Q&A](http://www.dotnetfunda.com/interviews/cat/208/postgresql)\n* [Frequently Asked Basic PostgreSQL Interview Questions and Answers](http://nazafbtemplate.blogspot.com.by/2014/06/frequently-asked-basic-postgresql.html)\n* [PostgreSQL Interview Preparation Guide](http://www.globalguideline.com/interview_questions/Questions.php?sc=postgresqk_database_](http://www.globalguideline.com/interview_questions/Questions.php?sc=postgresqk_database_))\n* [PostgreSQL Interview Q&A from CoolInterview.com](http://www.coolinterview.com/type.asp?iType=411)\n\n### SQL\n\n* [10 Frequently asked SQL Query Interview Questions](http://java67.blogspot.com.by/2013/04/10-frequently-asked-sql-query-interview-questions-answers-database.html)\n* [18 Essential SQL Interview Questions from top 3% developers company](http://www.toptal.com/sql/interview-questions)\n* [Common Interview Questions and Answers](http://www.indiabix.com/technical/sql-server-common-questions/)\n* [General Interview Questions and Answers](http://www.indiabix.com/technical/sql-server-general-questions/)\n* [Schema, Questions & Solutions for SQL Exercising](https://github.com/XD-DENG/SQL-exercise)\n* [SQL Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of SQL](http://www.tutorialspoint.com/sql/sql_interview_questions.htm)\n* [Top 20 SQL Interview Questions with Answers](http://dwbi.org/database/sql/72-top-20-sql-interview-questions-with-answers)\n\n### SQL Lite\n\n* [Top 20 SQL LITE  Interview Questions from Career Guru](http://career.guru99.com/top-20-sql-lite-interview-questions/)\n\n## OS\n\n### Linux\n\n* [10 Job Interview Questions for Linux System Administrators from Linux.com](https://www.linux.com/news/featured-blogs/200-libby-clark/842913-10-job-interview-questions-for-linux-sysadmins)\n* [10 Useful Random Linux Interview Questions and Answers](http://www.tecmint.com/useful-random-linux-interview-questions-and-answers/)\n* [11 Basic Linux Interview Questions and Answers](http://www.tecmint.com/basic-linux-interview-questions-and-answers/)\n* [11 Essential Linux Interview Questions from top 3% developers company](http://www.toptal.com/linux/interview-questions)\n* [Some basic Linux questions from ComputerNetworkingNotes.com](http://computernetworkingnotes.com/rhce-interview-questions/linux-interview-questions-answers.html)\n* [Top 30 Linux System Admin Interview Questions & Answers](http://www.linuxtechi.com/experience-linux-admin-interview-questions/)\n* [Top 50 Linux Interview Questions from Career Guru](http://career.guru99.com/top-50-linux-interview-questions/)\n* [Linux System Administrator/DevOps Interview Questions](https://github.com/chassing/linux-sysadmin-interview-questions)\n\n### Windows\n\n* [Top 10 Interview Questions for Windows Administrators](http://www.brentozar.com/archive/2009/07/top-10-interview-questions-for-windows-sysadmins/)\n* [Top 22 Windows Server Interview Questions from Career Guru](http://career.guru99.com/top-22-windows-server-interview-questions/)\n* [Windows Admin Interview Questions & Answers](http://www.01world.in/p/windows.html)\n\n## Algorithms\n\n* [A great list of Java interview questions](http://java2novice.com/java-interview-programs/)\n* [Algorithms playground for common interview questions written in Ruby](https://github.com/sagivo/algorithms)\n* [EKAlgorithms contains some well known CS algorithms & data structures](https://github.com/EvgenyKarkan/EKAlgorithms)\n* [Five programming problems every Software Engineer should be able to solve in less than 1 hour](http://www.shiftedup.com/2015/05/07/five-programming-problems-every-software-engineer-should-be-able-to-solve-in-less-than-1-hour)\n* [Top 10 Algorithms for Coding Interview](http://www.programcreek.com/2012/11/top-10-algorithms-for-coding-interview/)\n* [Top 15 Data Structures and Algorithm Interview Questions for Java programmer](http://javarevisited.blogspot.com.by/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html)\n* [Top Algorithms Questions by Topics](https://github.com/yangshun/tech-interview-handbook/blob/master/algorithms/README.md)\n\n## Coding exercises\n\n* [Common interview questions and puzzles solved in a number of languages](https://github.com/mre/the-coding-interview)\n* [Interactive, test-driven Python coding challenges (algorithms and data structures) typically found in coding interviews or coding competitions](https://github.com/donnemartin/interactive-coding-challenges)\n* [Interview questions solved in python](https://github.com/roseperrone/interview-questions)\n\n## Comprehensive lists\n\n* [A list of helpful front-end related questions you can use to interview potential candidates, test yourself or completely ignore](https://github.com/h5bp/Front-end-Developer-Interview-Questions)\n* [Front End Developer Interview Questions](http://www.aperfectmix.com/free_web_design/front-end-interview-questions.html)\n* [Answers to Front End Developer Interview Questions](https://github.com/yangshun/tech-interview-handbook/blob/master/front-end/interview-questions.md)\n* [Some simple questions to interview potential backend candidates](https://github.com/starandtina/backend-interview-questions)\n* [An Annotated List of Frontend Developer Technical Interview Questions](https://www.recruityourninja.com/technical-interview-questions-frontend-candidates/)\n* [An Annotated List of Backend Developer Technical Interview Questions](https://www.recruityourninja.com/technical-interview-questions-backend-candidates/)\n* [An Annotated List of DevOps Technical Interview Questions](https://www.recruityourninja.com/technical-interview-questions-devops-candidates/)\n\n## Design Patterns\n* [Design Pattern Interview Questions that have been designed specially to get you acquainted with the nature of questions you may encounter during your interview for the subject of Design Pattern](http://www.tutorialspoint.com/design_pattern/design_pattern_interview_questions.htm)\n* [Design Patterns for Humans™ - An ultra-simplified explanation](https://github.com/kamranahmedse/design-patterns-for-humans)\n* [Design patterns implemented in Java](https://github.com/iluwatar/java-design-patterns)\n\n## Data structures\n\n* [Top 15 Data Structures and Algorithm Interview Questions for Java programmer](http://javarevisited.blogspot.com.by/2013/03/top-15-data-structures-algorithm-interview-questions-answers-java-programming.html)\n* [Top 50 Data Structure Interview Questions from Career Guru](http://career.guru99.com/top-50-data-structure-interview-questions/)\n\n## Networks\n\n* [Top 100 Networking Interview Questions & Answers from Career Guru](http://career.guru99.com/top-100-networking-interview-questions-answers/)\n\n## Security\n\n* [101 IT Security Interview Questions](http://careers.simplicable.com/careers/new/101-IT-security-interview-questions)\n* [How to prepare for an information security job interview?](http://searchsecurity.techtarget.com/tip/How-to-prepare-for-an-information-security-job-interview)\n* [Information Security Interview Questions from Daniel Miessler](https://danielmiessler.com/study/infosec_interview_questions/)\n* [Top 50 Information Security Interview Questions for freshers and experts](http://resources.infosecinstitute.com/top-50-information-security-interview-questions/)\n\n## Data Science\n* [Data Science Interview Questions for Top Tech Companies](https://www.dezyre.com/article/-data-science-interview-questions-for-top-tech-companies/189)\n* [66 Job Interview Questions for Data Scientists](http://www.datasciencecentral.com/profiles/blogs/66-job-interview-questions-for-data-scientists)\n* [An Annotated List of Data Scientist Technical Interview Questions](https://www.recruityourninja.com/technical-interview-questions-data-scientist/)\n\n### License\n\n[![CC0](https://i.creativecommons.org/p/zero/1.0/88x31.png)](https://creativecommons.org/publicdomain/zero/1.0/)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "interview",
        "ohardcore",
        "questions",
        "technical interview",
        "interview preparation",
        "awesome interview"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "pbteja1998--sourcesyncai-mcp": {
      "owner": "pbteja1998",
      "name": "sourcesyncai-mcp",
      "url": "https://github.com/pbteja1998/sourcesyncai-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pbteja1998.webp",
      "description": "Integrates with a knowledge management platform to manage and organize documents, ingest content from various sources, and perform semantic and hybrid searches. Facilitates connections to external services for enhanced data retrieval and document management.",
      "stars": 3,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-11T16:57:56Z",
      "readme_content": "# SourceSync.ai MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@pbteja1998/sourcesyncai-mcp)](https://smithery.ai/server/@pbteja1998/sourcesyncai-mcp)\n\nA Model Context Protocol (MCP) server implementation for the [SourceSync.ai](https://sourcesync.ai) API. This server allows AI models to interact with SourceSync.ai's knowledge management platform through a standardized interface.\n\n## Features\n\n- Manage namespaces for organizing knowledge\n- Ingest content from various sources (text, URLs, websites, external services)\n- Retrieve, update, and manage documents stored in your knowledge base\n- Perform semantic and hybrid searches against your knowledge base\n- Access document content directly from parsed text URLs\n- Manage connections to external services\n- Default configuration support for seamless AI integration\n\n## Installation\n\n### Running with npx\n\n```bash\n# Install and run with your API key and tenant ID\nenv SOURCESYNC_API_KEY=your_api_key npx -y sourcesyncai-mcp\n```\n\n### Installing via Smithery\n\nTo install sourcesyncai-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@pbteja1998/sourcesyncai-mcp):\n\n```bash\nnpx -y @smithery/cli install @pbteja1998/sourcesyncai-mcp --client claude\n```\n\n### Manual Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/sourcesyncai-mcp.git\ncd sourcesyncai-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server\nnode dist/index.js\n```\n\n### Running on Cursor\n\nTo configure SourceSync.ai MCP in Cursor:\n\n1. Open Cursor Settings\n1. Go to `Features > MCP Servers`\n1. Click `+ Add New MCP Server`\n1. Enter the following:\n   - Name: `sourcesyncai-mcp` (or your preferred name)\n   - Type: `command`\n   - Command: `env SOURCESYNCAI_API_KEY=your-api-key npx -y sourcesyncai-mcp`\n\nAfter adding, you can use SourceSync.ai tools with Cursor's AI features by describing your knowledge management needs.\n\n### Running on Windsurf\n\nAdd this to your `./codeium/windsurf/model_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"sourcesyncai-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"soucesyncai-mcp\"],\n      \"env\": {\n        \"SOURCESYNC_API_KEY\": \"your_api_key\",\n        \"SOURCESYNC_NAMESPACE_ID\": \"your_namespace_id\",\n        \"SOURCESYNC_TENANT_ID\": \"your_tenant_id\"\n      }\n    }\n  }\n}\n```\n\n### Running on Claude Desktop\n\nTo use this MCP server with Claude Desktop:\n\n1. Locate the Claude Desktop configuration file:\n\n   - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - **Linux**: `~/.config/Claude/claude_desktop_config.json`\n\n2. Edit the configuration file to add the SourceSync.ai MCP server:\n\n```json\n{\n  \"mcpServers\": {\n    \"sourcesyncai-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"sourcesyncai-mcp\"],\n      \"env\": {\n        \"SOURCESYNC_API_KEY\": \"your_api_key\",\n        \"SOURCESYNC_NAMESPACE_ID\": \"your_namespace_id\",\n        \"SOURCESYNC_TENANT_ID\": \"your_tenant_id\"\n      }\n    }\n  }\n}\n```\n\n3. Save the configuration file and restart Claude Desktop\n\n## Configuration\n\n### Environment Variables\n\n#### Required\n\n- `SOURCESYNC_API_KEY`: Your SourceSync.ai API key (required)\n\n#### Optional\n\n- `SOURCESYNC_NAMESPACE_ID`: Default namespace ID to use for operations\n- `SOURCESYNC_TENANT_ID`: Your tenant ID (optional)\n\n### Configuration Examples\n\nBasic configuration with default values:\n\n```bash\nexport SOURCESYNC_API_KEY=your_api_key\nexport SOURCESYNC_TENANT_ID=your_tenant_id\nexport SOURCESYNC_NAMESPACE_ID=your_namespace_id\n```\n\n## Available Tools\n\n### Authentication\n\n- `validate_api_key`: Validate a SourceSync.ai API key\n\n```json\n{\n  \"name\": \"validate_api_key\",\n  \"arguments\": {}\n}\n```\n\n### Namespaces\n\n- `create_namespace`: Create a new namespace\n- `list_namespaces`: List all namespaces\n- `get_namespace`: Get details of a specific namespace\n- `update_namespace`: Update a namespace\n- `delete_namespace`: Delete a namespace\n\n```json\n{\n  \"name\": \"create_namespace\",\n  \"arguments\": {\n    \"name\": \"my-namespace\",\n    \"fileStorageConfig\": {\n      \"provider\": \"S3_COMPATIBLE\",\n      \"config\": {\n        \"endpoint\": \"s3.amazonaws.com\",\n        \"accessKey\": \"your_access_key\",\n        \"secretKey\": \"your_secret_key\",\n        \"bucket\": \"your_bucket\",\n        \"region\": \"us-east-1\"\n      }\n    },\n    \"vectorStorageConfig\": {\n      \"provider\": \"PINECONE\",\n      \"config\": {\n        \"apiKey\": \"your_pinecone_api_key\",\n        \"environment\": \"your_environment\",\n        \"index\": \"your_index\"\n      }\n    },\n    \"embeddingModelConfig\": {\n      \"provider\": \"OPENAI\",\n      \"config\": {\n        \"apiKey\": \"your_openai_api_key\",\n        \"model\": \"text-embedding-3-small\"\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"list_namespaces\",\n  \"arguments\": {\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"get_namespace\",\n  \"arguments\": {\n    \"namespaceId\": \"namespace_XXX\",\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"update_namespace\",\n  \"arguments\": {\n    \"namespaceId\": \"namespace_XXX\",\n    \"tenantId\": \"tenant_XXX\",\n    \"name\": \"updated-namespace-name\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"delete_namespace\",\n  \"arguments\": {\n    \"namespaceId\": \"namespace_XXX\",\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n### Data Ingestion\n\n- `ingest_text`: Ingest text content\n- `ingest_urls`: Ingest content from URLs\n- `ingest_sitemap`: Ingest content from a sitemap\n- `ingest_website`: Ingest content from a website\n- `ingest_notion`: Ingest content from Notion\n- `ingest_google_drive`: Ingest content from Google Drive\n- `ingest_dropbox`: Ingest content from Dropbox\n- `ingest_onedrive`: Ingest content from OneDrive\n- `ingest_box`: Ingest content from Box\n- `get_ingest_job_run_status`: Get the status of an ingestion job run\n\n```json\n{\n  \"name\": \"ingest_text\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"TEXT\",\n      \"config\": {\n        \"name\": \"example-document\",\n        \"text\": \"This is an example document for ingestion.\",\n        \"metadata\": {\n          \"category\": \"example\",\n          \"author\": \"AI Assistant\"\n        }\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"ingest_urls\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"URLS\",\n      \"config\": {\n        \"urls\": [\"https://example.com/page1\", \"https://example.com/page2\"],\n        \"metadata\": {\n          \"source\": \"web\",\n          \"category\": \"documentation\"\n        }\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"ingest_sitemap\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"SITEMAP\",\n      \"config\": {\n        \"url\": \"https://example.com/sitemap.xml\",\n        \"metadata\": {\n          \"source\": \"sitemap\",\n          \"website\": \"example.com\"\n        }\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"ingest_website\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"WEBSITE\",\n      \"config\": {\n        \"url\": \"https://example.com\",\n        \"maxDepth\": 3,\n        \"maxPages\": 100,\n        \"metadata\": {\n          \"source\": \"website\",\n          \"domain\": \"example.com\"\n        }\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"ingest_notion\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"NOTION\",\n      \"config\": {\n        \"connectionId\": \"your_notion_connection_id\",\n        \"metadata\": {\n          \"source\": \"notion\",\n          \"workspace\": \"My Workspace\"\n        }\n      }\n    },\n    \"tenantId\": \"your_tenant_id\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"ingest_google_drive\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"GOOGLE_DRIVE\",\n      \"config\": {\n        \"connectionId\": \"connection_XXX\",\n        \"metadata\": {\n          \"source\": \"google_drive\",\n          \"owner\": \"user@example.com\"\n        }\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"ingest_dropbox\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"DROPBOX\",\n      \"config\": {\n        \"connectionId\": \"connection_XXX\",\n        \"metadata\": {\n          \"source\": \"dropbox\",\n          \"account\": \"user@example.com\"\n        }\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"ingest_onedrive\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"ONEDRIVE\",\n      \"config\": {\n        \"connectionId\": \"connection_XXX\",\n        \"metadata\": {\n          \"source\": \"onedrive\",\n          \"account\": \"user@example.com\"\n        }\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"ingest_box\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestConfig\": {\n      \"source\": \"BOX\",\n      \"config\": {\n        \"connectionId\": \"connection_XXX\",\n        \"metadata\": {\n          \"source\": \"box\",\n          \"owner\": \"user@example.com\"\n        }\n      }\n    },\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"get_ingest_job_run_status\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"ingestJobRunId\": \"ingest_job_run_XXX\",\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n### Documents\n\n- `getDocuments`: Retrieve documents with optional filters\n- `updateDocuments`: Update document metadata\n- `deleteDocuments`: Delete documents\n- `resyncDocuments`: Resync documents\n- `fetchUrlContent`: Fetch text content from document URLs\n\n```json\n{\n  \"name\": \"getDocuments\",\n  \"arguments\": {\n    \"namespaceId\": \"namespace_XXX\",\n    \"tenantId\": \"tenant_XXX\",\n    \"filterConfig\": {\n      \"documentTypes\": [\"PDF\"]\n    },\n    \"includeConfig\": {\n      \"parsedTextFileUrl\": true\n    }\n  }\n}\n```\n\n```json\n{\n  \"name\": \"updateDocuments\",\n  \"arguments\": {\n    \"namespaceId\": \"namespace_XXX\",\n    \"tenantId\": \"tenant_XXX\",\n    \"documentIds\": [\"doc_XXX\", \"doc_YYY\"],\n    \"filterConfig\": {\n      \"documentIds\": [\"doc_XXX\", \"doc_YYY\"]\n    },\n    \"data\": {\n      \"metadata\": {\n        \"status\": \"reviewed\",\n        \"category\": \"technical\"\n      }\n    }\n  }\n}\n```\n\n```json\n{\n  \"name\": \"deleteDocuments\",\n  \"arguments\": {\n    \"namespaceId\": \"namespace_XXX\",\n    \"tenantId\": \"tenant_XXX\",\n    \"documentIds\": [\"doc_XXX\", \"doc_YYY\"],\n    \"filterConfig\": {\n      \"documentIds\": [\"doc_XXX\", \"doc_YYY\"]\n    }\n  }\n}\n```\n\n```json\n{\n  \"name\": \"resyncDocuments\",\n  \"arguments\": {\n    \"namespaceId\": \"namespace_XXX\",\n    \"tenantId\": \"tenant_XXX\",\n    \"documentIds\": [\"doc_XXX\", \"doc_YYY\"],\n    \"filterConfig\": {\n      \"documentIds\": [\"doc_XXX\", \"doc_YYY\"]\n    }\n  }\n}\n```\n\n```json\n{\n  \"name\": \"fetchUrlContent\",\n  \"arguments\": {\n    \"url\": \"https://api.sourcesync.ai/v1/documents/doc_XXX/content?format=text\",\n    \"apiKey\": \"your_api_key\",\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n### Search\n\n- `semantic_search`: Perform semantic search\n- `hybrid_search`: Perform hybrid search (semantic + keyword)\n\n```json\n{\n  \"name\": \"semantic_search\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"query\": \"example document\",\n    \"topK\": 5,\n    \"tenantId\": \"tenant_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"hybrid_search\",\n  \"arguments\": {\n    \"namespaceId\": \"your_namespace_id\",\n    \"query\": \"example document\",\n    \"topK\": 5,\n    \"tenantId\": \"tenant_XXX\",\n    \"hybridConfig\": {\n      \"semanticWeight\": 0.7,\n      \"keywordWeight\": 0.3\n    }\n  }\n}\n```\n\n### Connections\n\n- `create_connection`: Create a new connection to an external service\n- `list_connections`: List all connections\n- `get_connection`: Get details of a specific connection\n- `update_connection`: Update a connection\n- `revoke_connection`: Revoke a connection\n\n```json\n{\n  \"name\": \"create_connection\",\n  \"arguments\": {\n    \"tenantId\": \"tenant_XXX\",\n    \"namespaceId\": \"namespace_XXX\",\n    \"name\": \"My Connection\",\n    \"connector\": \"GOOGLE_DRIVE\",\n    \"clientRedirectUrl\": \"https://your-app.com/callback\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"list_connections\",\n  \"arguments\": {\n    \"tenantId\": \"tenant_XXX\",\n    \"namespaceId\": \"namespace_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"get_connection\",\n  \"arguments\": {\n    \"tenantId\": \"tenant_XXX\",\n    \"namespaceId\": \"namespace_XXX\",\n    \"connectionId\": \"connection_XXX\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"update_connection\",\n  \"arguments\": {\n    \"tenantId\": \"tenant_XXX\",\n    \"namespaceId\": \"namespace_XXX\",\n    \"connectionId\": \"connection_XXX\",\n    \"name\": \"Updated Connection Name\",\n    \"clientRedirectUrl\": \"https://your-app.com/updated-callback\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"revoke_connection\",\n  \"arguments\": {\n    \"tenantId\": \"tenant_XXX\",\n    \"namespaceId\": \"namespace_XXX\",\n    \"connectionId\": \"connection_XXX\"\n  }\n}\n```\n\n## Example Prompts\n\nHere are some example prompts you can use with Claude or Cursor after configuring the MCP server:\n\n- \"Search my SourceSync knowledge base for information about machine learning.\"\n- \"Ingest this article into my SourceSync knowledge base: [URL]\"\n- \"Create a new namespace in SourceSync for my project documentation.\"\n- \"List all the documents in my SourceSync namespace.\"\n- \"Get the text content of document [document_id] from my SourceSync namespace.\"\n\n## Troubleshooting\n\n### Connection Issues\n\nIf you encounter issues connecting the SourceSync.ai MCP server:\n\n1. **Verify Paths**: Ensure all paths in your configuration are absolute paths, not relative.\n2. **Check Permissions**: Ensure the server file has execution permissions (`chmod +x dist/index.js`).\n3. **Enable Developer Mode**: In Claude Desktop, enable Developer Mode and check the MCP Log File.\n4. **Test the Server**: Run the server directly from the command line:\n\n   ```bash\n   node /path/to/sourcesyncai-mcp/dist/index.js\n   ```\n\n5. **Restart AI Client**: After making changes, completely restart Claude Desktop or Cursor.\n6. **Check Environment Variables**: Ensure all required environment variables are correctly set.\n\n### Debug Logging\n\nFor detailed logging, add the DEBUG environment variable:\n\n```\n\n```\n\n## Development\n\n### Project Structure\n\n- `src/index.ts`: Main entry point and server setup\n- `src/schemas.ts`: Schema definitions for all tools\n- `src/sourcesync.ts`: Client for interacting with SourceSync.ai API\n- `src/sourcesync.types.ts`: TypeScript type definitions\n\n### Building and Testing\n\n```bash\n# Build the project\nnpm run build\n\n# Run tests\nnpm test\n```\n\n## License\n\nMIT\n\n## Links\n\n- [SourceSync.ai Documentation](https://sourcesync.ai)\n- [SourceSync.ai API Reference](https://sourcesync.ai/api-reference/authentication)\n- [Model Context Protocol](https://modelcontextprotocol.io/introduction)\n\nDocument content retrieval workflow:\n\n1. First, use `getDocuments` with `includeConfig.parsedTextFileUrl: true` to get documents with their content URLs\n2. Extract the URL from the document response\n3. Use `fetchUrlContent` to retrieve the actual content:\n\n```json\n{\n  \"name\": \"fetchUrlContent\",\n  \"arguments\": {\n    \"url\": \"https://example.com\"\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sourcesyncai",
        "notetaking",
        "semantic",
        "notetaking knowledge",
        "sourcesyncai mcp",
        "document management"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "peakmojo--applescript-mcp": {
      "owner": "peakmojo",
      "name": "applescript-mcp",
      "url": "https://github.com/peakmojo/applescript-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/peakmojo.webp",
      "description": "Execute AppleScript commands for seamless interaction with macOS applications, enabling automation of tasks such as managing Notes, Calendar, Contacts, and Messages.",
      "stars": 367,
      "forks": 45,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T21:53:26Z",
      "readme_content": "# AppleScript MCP Server (Dual access: python and node.js)\n\n[![npm version](https://img.shields.io/npm/v/@peakmojo/applescript-mcp.svg)](https://www.npmjs.com/package/@peakmojo/applescript-mcp) [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Overview\n\nA Model Context Protocol (MCP) server that lets you run AppleScript code to interact with Mac. This MCP is intentionally designed to be simple, straightforward, intuitive, and require minimal setup.\n\nI can't believe how simple and powerful it is. The core code is <100 line of code.\n\n<a href=\"https://glama.ai/mcp/servers/@peakmojo/applescript-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@peakmojo/applescript-mcp/badge\" alt=\"AppleScript Server MCP server\" />\n</a>\n\nhttps://github.com/user-attachments/assets/b85e63ba-fb26-4918-8e6d-2377254ee388\n\n## Features\n\n* Run AppleScript to access Mac applications and data\n* Interact with Notes, Calendar, Contacts, Messages, and more\n* Search for files using Spotlight or Finder\n* Read/write file contents and execute shell commands\n* Remote execution support via SSH\n\n## Example Prompts\n\n```\nCreate a reminder for me to call John tomorrow at 10am\n```\n\n```\nAdd a new meeting to my calendar for Friday from 2-3pm titled \"Team Review\"\n```\n\n```\nCreate a new note titled \"Meeting Minutes\" with today's date\n```\n\n```\nShow me all files in my Downloads folder from the past week\n```\n\n```\nWhat's my current battery percentage?\n```\n\n```\nShow me the most recent unread emails in my inbox\n```\n\n```\nList all the currently running applications on my Mac\n```\n\n```\nPlay my \"Focus\" playlist in Apple Music\n```\n\n```\nTake a screenshot of my entire screen and save it to my Desktop\n```\n\n```\nFind John Smith in my contacts and show me his phone number\n```\n\n```\nCreate a folder on my Desktop named \"Project Files\"\n```\n\n```\nOpen Safari and navigate to apple.com\n```\n\n```\nTell me how much free space I have on my main drive\n```\n\n```\nList all my upcoming calendar events for this week\n```\n\n## Usage with Claude Desktop\n\n### Node.js\n```json\n{\n  \"mcpServers\": {\n    \"applescript_execute\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@peakmojo/applescript-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Python\nInstall uv\n```\nbrew install uv\ngit clone ...\n```\n\nRun the server\n```\n{\n  \"mcpServers\": {\n    \"applescript_execute\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/your/repo\",\n        \"run\",\n        \"src/applescript_mcp/server.py\"\n      ]\n    }\n  }\n}\n```\n\n## Docker Usage\n\nWhen running in a Docker container, you can use the special hostname `host.docker.internal` to connect to your Mac host:\n\n### Configuration\n```json\n{\n  \"mcpServers\": {\n    \"applescript_execute\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@peakmojo/applescript-mcp\",\n        \"--remoteHost\", \"host.docker.internal\",\n        \"--remoteUser\", \"yourusername\",\n        \"--remotePassword\", \"yourpassword\"\n      ]\n    }\n  }\n}\n```\n\nThis allows your Docker container to execute AppleScript on the Mac host system. Make sure:\n\n1. SSH is enabled on your Mac (System Settings → Sharing → Remote Login)\n2. Your user has proper permissions\n3. The correct credentials are provided in the config\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "applescript",
        "notetaking",
        "commands",
        "peakmojo applescript",
        "applescript commands",
        "applescript mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "rajvirtual--MCP-Servers": {
      "owner": "rajvirtual",
      "name": "MCP-Servers",
      "url": "https://github.com/rajvirtual/MCP-Servers",
      "imageUrl": "/freedevtools/mcp/pfp/rajvirtual.webp",
      "description": "Access and manage Microsoft OneNote content, enabling the reading and creation of notebooks, sections, and pages directly through AI assistants. Converts HTML content to text for improved retrieval-augmented generation (RAG) processing.",
      "stars": 14,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-08T13:31:04Z",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "onenote",
        "notetaking",
        "microsoft",
        "microsoft onenote",
        "onenote content",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ramidecodes--mcp-server-notion": {
      "owner": "ramidecodes",
      "name": "mcp-server-notion",
      "url": "https://github.com/ramidecodes/mcp-server-notion",
      "imageUrl": "/freedevtools/mcp/pfp/ramidecodes.webp",
      "description": "Connects AI models to Notion workspaces using the Notion API for managing pages, databases, and content. Provides easy setup and robust error handling for integration with Notion's capabilities.",
      "stars": 8,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-05-05T10:32:27Z",
      "readme_content": "# Notion MCP Server\n\nA Model Context Protocol (MCP) server that exposes the official Notion SDK, allowing AI models to interact with Notion workspaces.\n\n<a href=\"https://glama.ai/mcp/servers/bjc5iac7gt\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/bjc5iac7gt/badge\" alt=\"Notion Server MCP server\" />\n</a>\n\n## Quick Start\n\n### 1. Set up your Notion integration\n\n1. Go to [https://www.notion.so/my-integrations](https://www.notion.so/my-integrations)\n2. Create a new integration\n3. Copy the API key\n\n### 2. Connect your Notion pages to the integration\n\nFor your integration to access Notion content, you need to explicitly share your pages or databases with it:\n\n1. Navigate to the Notion page or database you want to access through the integration\n2. Click the \"Share\" button in the top-right corner\n3. In the \"Add people, groups, or integrations\" field, select your integration from the dropdown list\n4. Click \"Invite\"\n5. Repeat for each page or database you want to make accessible\n\n**Note:** An integration only has access to pages and databases that have been explicitly shared with it. Child pages automatically inherit access from parent pages.\n\n### 3. Add to your AI assistant\n\nYou can add this MCP server to Claude Desktop, Cursor AI, or Claude.ai using either of these configuration formats:\n\n#### Command Line Format\n\n```bash\nnpx @ramidecodes/mcp-server-notion@latest -y --api-key=your-notion-integration-key\n```\n\n#### JSON Configuration Format\n\n```json\n{\n  \"mcpServers\": {\n    \"Notion\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@ramidecodes/mcp-server-notion@latest\",\n        \"-y\",\n        \"--api-key=your-notion-integration-key\"\n      ]\n    }\n  }\n}\n```\n\nReplace `your-notion-integration-key` with the API key from step 1.\n\n### Setup Instructions\n\n- **Claude Desktop**: Settings > Advanced > Model Context Protocol\n- **Cursor AI**: Settings > AI > MCP Servers\n- **Claude.ai (Web)**: Profile > Settings > API & Integrations > Model Context Protocol\n\n## Available Tools\n\nThe server provides tools for interacting with Notion:\n\n- **Search**: Find pages or databases\n- **Databases**: Query and retrieve database entries\n- **Pages**: Create, retrieve, and update pages\n- **Blocks**: Manage content blocks (paragraphs, lists, etc.)\n- **Users**: List users and get user information\n- **Comments**: Create and list comments\n- **Link Previews**: Create link previews for URLs\n\n## Alternative Setup Methods\n\n### Using Environment Variables\n\nInstead of passing the API key directly, you can use a `.env` file:\n\n1. Create a `.env` file with:\n\n```\nNOTION_API_KEY=your-notion-integration-key\n```\n\n2. Run the server:\n\n```bash\nnpx @ramidecodes/mcp-server-notion@latest -y\n```\n\n#### JSON Configuration with Environment Variables (for Claude Desktop)\n\nYou can also use environment variables in the JSON configuration format:\n\n```json\n{\n  \"mcpServers\": {\n    \"Notion\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@ramidecodes/mcp-server-notion@latest\",\n        \"-y\",\n        \"--api-key=your-notion-integration-key\"\n      ]\n    }\n  }\n}\n```\n\n### Command Line Options\n\n```\nOPTIONS:\n  -h, --help              Show help message\n  -v, --version           Show version information\n  --verbose               Enable verbose logging\n  --env-path <path>       Path to .env file\n  --api-key <key>         Notion API key\n  -y                      Skip confirmation prompts\n```\n\n## Troubleshooting\n\nIf you encounter \"Failed to create client\" errors:\n\n- On Windows, try using `cmd /c` before the npx command\n- On macOS/Linux, try using the full path to npx\n- Test the command in a terminal before adding it to your AI assistant\n\n### Common Issues\n\n- **\"No access to resource\" errors**: Make sure you've shared the specific Notion page or database with your integration (see step 2)\n- **Integration not appearing in share menu**: Try refreshing the page or restarting your browser\n- **Limited capabilities**: Check that your integration has the appropriate capabilities enabled in the Notion integration settings\n\n## Features\n\n- Full Notion API support through the official SDK\n- MCP compliant for seamless AI integration\n- Comprehensive tools for all Notion operations\n- Robust error handling with detailed messages\n- Easy configuration with environment variables\n\nFor detailed documentation on each tool, see the [Tools Documentation](docs/TOOLS.md).\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notion",
        "databases",
        "ai",
        "notion api",
        "notion workspaces",
        "using notion"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "regenrek--deepwiki-mcp": {
      "owner": "regenrek",
      "name": "deepwiki-mcp",
      "url": "https://github.com/regenrek/deepwiki-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/regenrek.webp",
      "description": "Crawls Deepwiki.com documentation, converting it into Markdown format by removing unnecessary HTML elements and adjusting links for better readability. Supports fetching multiple pages and offers structured output formats for knowledge retrieval.",
      "stars": 1031,
      "forks": 60,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T11:08:43Z",
      "readme_content": "# Deepwiki MCP Server\n\n> ⚠️ **IMPORTANT NOTICE**: This server is currently not working since DeepWiki has cut off the possibility to scrape it. We recommend using the official DeepWiki MCP server at https://docs.devin.ai/work-with-devin/deepwiki-mcp for the time being.\n\nThis is an **unofficial Deepwiki MCP Server**\n\nIt takes a Deepwiki URL via MCP, crawls all relevant pages, converts them to Markdown, and returns either one document or a list by page.\n\n## Features\n\n- 🔒 **Domain Safety**: Only processes URLs from deepwiki.com\n- 🧹 **HTML Sanitization**: Strips headers, footers, navigation, scripts, and ads\n- 🔗 **Link Rewriting**: Adjusts links to work in Markdown\n- 📄 **Multiple Output Formats**: Get one document or structured pages\n- 🚀 **Performance**: Fast crawling with adjustable concurrency and depth\n- **NLP**: It's to search just for the library name\n\n## Usage\n\nPrompts you can use:\n\n```\ndeepwiki fetch how can i use gpt-image-1 with \"vercel ai\" sdk\n```\n\n```\ndeepwiki fetch how can i create new blocks in shadcn?\n```\n\n```\ndeepwiki fetch i want to understand how X works\n```\n\nFetch complete Documentation (Default)\n```\nuse deepwiki https://deepwiki.com/shadcn-ui/ui\nuse deepwiki multiple pages https://deepwiki.com/shadcn-ui/ui\n```\n\nSingle Page\n```\nuse deepwiki fetch single page https://deepwiki.com/tailwindlabs/tailwindcss/2.2-theme-system\n```\n\nGet by shortform\n```\nuse deepwiki fetch tailwindlabs/tailwindcss\n```\n\n```\ndeepwiki fetch library\n\ndeepwiki fetch url\ndeepwiki fetch <name>/<repo>\n\ndeepwiki multiple pages ...\ndeepwiki single page url ...\n```\n\n## Cursor\n\nAdd this to `.cursor/mcp.json` file.\n\n```\n{\n  \"mcpServers\": {\n    \"mcp-deepwiki\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-deepwiki@latest\"]\n    }\n  }\n}\n```\n\n\n\n### MCP Tool Integration\n\nThe package registers a tool named `deepwiki_fetch` that you can use with any MCP-compatible client:\n\n```json\n{\n  \"action\": \"deepwiki_fetch\",\n  \"params\": {\n    \"url\": \"https://deepwiki.com/user/repo\",\n    \"mode\": \"aggregate\",\n    \"maxDepth\": \"1\"\n  }\n}\n```\n\n#### Parameters\n\n- `url` (required): The starting URL of the Deepwiki repository\n- `mode` (optional): Output mode, either \"aggregate\" for a single Markdown document (default) or \"pages\" for structured page data\n- `maxDepth` (optional): Maximum depth of pages to crawl (default: 10)\n\n### Response Format\n\n#### Success Response (Aggregate Mode)\n\n```json\n{\n  \"status\": \"ok\",\n  \"data\": \"# Page Title\\n\\nPage content...\\n\\n---\\n\\n# Another Page\\n\\nMore content...\",\n  \"totalPages\": 5,\n  \"totalBytes\": 25000,\n  \"elapsedMs\": 1200\n}\n```\n\n#### Success Response (Pages Mode)\n\n```json\n{\n  \"status\": \"ok\",\n  \"data\": [\n    {\n      \"path\": \"index\",\n      \"markdown\": \"# Home Page\\n\\nWelcome to the repository.\"\n    },\n    {\n      \"path\": \"section/page1\",\n      \"markdown\": \"# First Page\\n\\nThis is the first page content.\"\n    }\n  ],\n  \"totalPages\": 2,\n  \"totalBytes\": 12000,\n  \"elapsedMs\": 800\n}\n```\n\n#### Error Response\n\n```json\n{\n  \"status\": \"error\",\n  \"code\": \"DOMAIN_NOT_ALLOWED\",\n  \"message\": \"Only deepwiki.com domains are allowed\"\n}\n```\n\n#### Partial Success Response\n\n```json\n{\n  \"status\": \"partial\",\n  \"data\": \"# Page Title\\n\\nPage content...\",\n  \"errors\": [\n    {\n      \"url\": \"https://deepwiki.com/user/repo/page2\",\n      \"reason\": \"HTTP error: 404\"\n    }\n  ],\n  \"totalPages\": 1,\n  \"totalBytes\": 5000,\n  \"elapsedMs\": 950\n}\n```\n\n### Progress Events\n\nWhen using the tool, you'll receive progress events during crawling:\n\n```\nFetched https://deepwiki.com/user/repo: 12500 bytes in 450ms (status: 200)\nFetched https://deepwiki.com/user/repo/page1: 8750 bytes in 320ms (status: 200)\nFetched https://deepwiki.com/user/repo/page2: 6200 bytes in 280ms (status: 200)\n```\n\n## Local Development - Installation\n\n### Local Usage\n\n```\n{\n  \"mcpServers\": {\n    \"mcp-deepwiki\": {\n      \"command\": \"node\",\n      \"args\": [\"./bin/cli.mjs\"]\n    }\n  }\n}\n```\n\n### From Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/regenrek/deepwiki-mcp.git\ncd deepwiki-mcp\n\n# Install dependencies\nnpm install\n\n# Build the package\nnpm run build\n```\n\n#### Direct API Calls\n\nFor HTTP transport, you can make direct API calls:\n\n```bash\ncurl -X POST http://localhost:3000/mcp \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"id\": \"req-1\",\n    \"action\": \"deepwiki_fetch\",\n    \"params\": {\n      \"url\": \"https://deepwiki.com/user/repo\",\n      \"mode\": \"aggregate\"\n    }\n  }'\n```\n\n## Configuration\n\n### Environment Variables\n\n- `DEEPWIKI_MAX_CONCURRENCY`: Maximum concurrent requests (default: 5)\n- `DEEPWIKI_REQUEST_TIMEOUT`: Request timeout in milliseconds (default: 30000)\n- `DEEPWIKI_MAX_RETRIES`: Maximum retry attempts for failed requests (default: 3)\n- `DEEPWIKI_RETRY_DELAY`: Base delay for retry backoff in milliseconds (default: 250)\n\nTo configure these, create a `.env` file in the project root:\n\n```\nDEEPWIKI_MAX_CONCURRENCY=10\nDEEPWIKI_REQUEST_TIMEOUT=60000\nDEEPWIKI_MAX_RETRIES=5\nDEEPWIKI_RETRY_DELAY=500\n```\n\n## Docker Deployment (Untested)\n\nBuild and run the Docker image:\n\n```bash\n# Build the image\ndocker build -t mcp-deepwiki .\n\n# Run with stdio transport (for development)\ndocker run -it --rm mcp-deepwiki\n\n# Run with HTTP transport (for production)\ndocker run -d -p 3000:3000 mcp-deepwiki --http --port 3000\n\n# Run with environment variables\ndocker run -d -p 3000:3000 \\\n  -e DEEPWIKI_MAX_CONCURRENCY=10 \\\n  -e DEEPWIKI_REQUEST_TIMEOUT=60000 \\\n  mcp-deepwiki --http --port 3000\n```\n\n## Development\n\n```bash\n# Install dependencies\npnpm install\n\n# Run in development mode with stdio\npnpm run dev-stdio\n\n# Run tests\npnpm test\n\n# Run linter\npnpm run lint\n\n# Build the package\npnpm run build\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Permission Denied**: If you get EACCES errors when running the CLI, make sure to make the binary executable:\n   ```bash\n   chmod +x ./node_modules/.bin/mcp-deepwiki\n   ```\n\n2. **Connection Refused**: Make sure the port is available and not blocked by a firewall:\n   ```bash\n   # Check if port is in use\n   lsof -i :3000\n   ```\n\n3. **Timeout Errors**: For large repositories, consider increasing the timeout and concurrency:\n   ```\n   DEEPWIKI_REQUEST_TIMEOUT=60000 DEEPWIKI_MAX_CONCURRENCY=10 npx mcp-deepwiki\n   ```\n\n## Contributing\n\nWe welcome contributions! Please see [CONTRIBUTING.md](CONTRIBUTING.md) for details.\n\n## License\n\nMIT\n\n## Links\n\n- X/Twitter: [@kregenrek](https://x.com/kregenrek)\n- Bluesky: [@kevinkern.dev](https://bsky.app/profile/kevinkern.dev)\n\n## Courses\n- Learn Cursor AI: [Ultimate Cursor Course](https://www.instructa.ai/en/cursor-ai)\n- Learn to build software with AI: [instructa.ai](https://www.instructa.ai)\n\n## See my other projects:\n\n* [AI Prompts](https://github.com/instructa/ai-prompts/blob/main/README.md) - Curated AI Prompts for Cursor AI, Cline, Windsurf and Github Copilot\n* [codefetch](https://github.com/regenrek/codefetch) - Turn code into Markdown for LLMs with one simple terminal command\n* [aidex](https://github.com/regenrek/aidex) A CLI tool that provides detailed information about AI language models, helping developers choose the right model for their needs.# tool-starter",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "deepwiki",
        "documentation",
        "markdown",
        "deepwiki com",
        "crawls deepwiki",
        "regenrek deepwiki"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "rickydata-indexer--notion_mcp_server": {
      "owner": "rickydata-indexer",
      "name": "notion_mcp_server",
      "url": "https://github.com/rickydata-indexer/notion_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/rickydata-indexer.webp",
      "description": "Provides access to a Notion knowledge base for querying and retrieving detailed answers with references to specific Notion pages, enhancing productivity within the development environment.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-01-09T14:25:42Z",
      "readme_content": "# Notion Knowledge Base MCP Server\n\nAn MCP server that provides access to a Notion knowledge base through the Cline VSCode extension.\n\n## Features\n\n- Query your Notion knowledge base directly from Cline\n- Get detailed answers with references to Notion pages\n- Built with FastMCP for reliable performance\n- Comprehensive error handling and logging\n\n## Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) package manager\n- [Cline VSCode extension](https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev)\n- A Dify API key for accessing the Notion knowledge base\n\n## Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yourusername/notion-mcp-server.git\n   cd notion-mcp-server\n   ```\n\n2. Create a `.env` file with your Dify API key:\n   ```bash\n   echo \"DIFY_API_BACKEND_KEY=your-api-key-here\" > .env\n   ```\n\n3. Install the server in Cline:\n   ```bash\n   fastmcp install notion_mcp_server.py\n   ```\n\n   This will automatically:\n   - Install all required dependencies using uv\n   - Configure the server in Cline's settings\n   - Make the server available to use with Cline\n\n## Usage\n\nOnce installed, you can use the server in Cline by asking questions about your Notion knowledge base. For example:\n\n```\nTell me about internal tooling\n```\n\nThe server will respond with relevant information from your Notion knowledge base, including:\n- Detailed answers\n- Links to relevant Notion pages\n- Page IDs for reference\n\n## Configuration\n\nThe server is configured automatically during installation, but you can manually update the settings in Cline's configuration file if needed:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nExample configuration:\n```json\n{\n  \"mcpServers\": {\n    \"notion-kb\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\", \"fastmcp\",\n        \"--with\", \"python-dotenv\",\n        \"--with\", \"requests\",\n        \"fastmcp\",\n        \"run\",\n        \"/absolute/path/to/notion_mcp_server.py\"\n      ],\n      \"env\": {\n        \"DIFY_API_BACKEND_KEY\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\nFor development and testing:\n\n1. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. Run the development server:\n   ```bash\n   fastmcp dev notion_mcp_server.py\n   ```\n\nThis will start the MCP Inspector interface for testing the server.\n\n## Troubleshooting\n\n1. **Server not connecting**\n   - Verify your API key in the `.env` file\n   - Ensure the server path in Cline's config is absolute\n   - Check that uv is installed and in your PATH\n\n2. **Dependencies issues**\n   - Try reinstalling with `fastmcp install notion_mcp_server.py --force`\n   - Verify uv is installed correctly\n\n3. **Server hangs**\n   - Ensure you're using the uv run command as specified in the config\n   - Check the server logs for errors\n\n## Contributing\n\nSee [mcp_instructions.md](mcp_instructions.md) for detailed information about the server's implementation and architecture.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notion_mcp_server",
        "notion",
        "querying",
        "notion pages",
        "knowledge base",
        "notion knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "ryanjoachim--mcp-rtfm": {
      "owner": "ryanjoachim",
      "name": "mcp-rtfm",
      "url": "https://github.com/ryanjoachim/mcp-rtfm",
      "imageUrl": "/freedevtools/mcp/pfp/ryanjoachim.webp",
      "description": "Facilitates the creation of manuals from existing documentation through content analysis, generates metadata, and provides intelligent search capabilities to form a functional knowledge base.",
      "stars": 33,
      "forks": 7,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-20T13:06:58Z",
      "readme_content": "# MCP-RTFM\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.0-blue.svg)](https://www.typescriptlang.org/)\n[![MCP](https://img.shields.io/badge/MCP-0.1.0-green.svg)](https://github.com/modelcontextprotocol)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n> \"RTFM!\" they say, but what if there's no FM to R? 🤔 Enter MCP-RTFM: an MCP server that helps you *create* the F*ing Manual everyone keeps telling people to read! Using advanced content analysis, metadata generation, and intelligent search capabilities, it transforms your non-existent or unreadable docs into an interconnected knowledge base that actually answers those \"basic questions\" before they're asked.\n\n> **Plot twist**: Instead of just telling people to RTFM, now you can actually give them an FM worth R-ing! Because the best response to \"read the f*ing manual\" is having a manual that's actually worth reading. 📚✨\n\n## 📚 Table of Contents\n\n- [Quick Start](#-quick-start)\n- [Features](#-features)\n- [Example Workflows](#-example-workflows)\n- [Installation](#-installation)\n- [Advanced Features](#-advanced-features)\n- [Development](#-development)\n- [Debugging](#-debugging)\n\n## 🚀 Quick Start\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Add to your MCP settings and start using\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"analyze_project_with_metadata\", // Enhanced initialization\n  args: { projectPath: \"/path/to/project\" }\n});\n\n// This will:\n// 1. Create documentation structure\n// 2. Analyze content with unified/remark\n// 3. Generate intelligent metadata\n// 4. Build search index with minisearch\n// 5. Add structured front matter\n// 6. Make your docs actually readable!\n```\n\n## ✨ Features\n\n### Documentation Management Tools\n\n- `analyze_existing_docs` - Analyze and enhance existing documentation with content analysis and metadata\n- `analyze_project_with_metadata` - Initialize documentation structure with enhanced content analysis and metadata generation\n- `analyze_project` - Basic initialization of documentation structure\n- `read_doc` - Read a documentation file (required before updating)\n- `update_doc` - Update documentation using diff-based changes\n- `get_doc_content` - Get current content of a documentation file\n- `get_project_info` - Get project structure and documentation status\n- `search_docs` - Search across documentation files with highlighted results\n- `update_metadata` - Update documentation metadata\n- `get_related_docs` - Find related documentation based on metadata and content links\n- `customize_template` - Create or update documentation templates\n\n### Default Documentation Files\n\nThe server automatically creates and manages these core documentation files:\n\n- `techStack.md` - Detailed inventory of tools, libraries, and configurations\n- `codebaseDetails.md` - Low-level explanations of code structure and logic\n- `workflowDetails.md` - Step-by-step workflows for key processes\n- `integrationGuides.md` - Instructions for external system connections\n- `errorHandling.md` - Troubleshooting strategies and practices\n- `handoff_notes.md` - Summary of key themes and next steps\n\n### Documentation Templates\n\nBuilt-in templates for different documentation types:\n\n- Standard Documentation Template\n- API Documentation Template\n- Workflow Documentation Template\n\nCustom templates can be created using the `customize_template` tool.\n\n## 📝 Example Workflows\n\n### 1. Analyzing Existing Documentation\n\n```typescript\n// Enhance existing documentation with advanced analysis\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"analyze_existing_docs\",\n  args: { projectPath: \"/path/to/project\" }\n});\n\n// This will:\n// - Find all markdown files in .handoff_docs\n// - Analyze content structure with unified/remark\n// - Generate intelligent metadata\n// - Build search index\n// - Add front matter if not present\n// - Establish document relationships\n// - Preserve existing content\n\n// The results include:\n// - Enhanced metadata for all docs\n// - Search index population\n// - Content relationship mapping\n// - Git context if available\n```\n\n### 2. Enhanced Project Documentation Setup\n\n```typescript\n// Initialize documentation with advanced content analysis\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"analyze_project_with_metadata\",\n  args: { projectPath: \"/path/to/project\" }\n});\n\n// Results include:\n// - Initialized documentation files\n// - Generated metadata from content analysis\n// - Established document relationships\n// - Populated search index\n// - Added structured front matter\n// - Git repository context\n\n// Get enhanced project information\nconst projectInfo = await use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"get_project_info\",\n  args: { projectPath: \"/path/to/project\" }\n});\n\n// Search across documentation with intelligent results\nconst searchResults = await use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"search_docs\",\n  args: {\n    projectPath: \"/path/to/project\",\n    query: \"authentication\"\n  }\n});\n\n// Results include:\n// - Weighted matches (title matches prioritized)\n// - Fuzzy search results\n// - Full content context\n// - Related document suggestions\n```\n\n### 3. Updating Documentation with Content Links\n\n```typescript\n// First read the document\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"read_doc\",\n  args: {\n    projectPath: \"/path/to/project\",\n    docFile: \"techStack.md\"\n  }\n});\n\n// Update with content that links to other docs\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"update_doc\",\n  args: {\n    projectPath: \"/path/to/project\",\n    docFile: \"techStack.md\",\n    searchContent: \"[Why this domain is critical to the project]\",\n    replaceContent: \"The tech stack documentation provides essential context for development. See [[workflowDetails]] for implementation steps.\",\n    continueToNext: true // Automatically move to next document\n  }\n});\n```\n\n### 4. Managing Documentation Metadata\n\n```typescript\n// Update metadata for better organization\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"update_metadata\",\n  args: {\n    projectPath: \"/path/to/project\",\n    docFile: \"techStack.md\",\n    metadata: {\n      title: \"Technology Stack Overview\",\n      category: \"architecture\",\n      tags: [\"infrastructure\", \"dependencies\", \"configuration\"]\n    }\n  }\n});\n\n// Find related documentation\nconst related = await use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"get_related_docs\",\n  args: {\n    projectPath: \"/path/to/project\",\n    docFile: \"techStack.md\"\n  }\n});\n```\n\n### 5. Searching Documentation with Context\n\n```typescript\n// Search with highlighted results\nconst results = await use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"search_docs\",\n  args: {\n    projectPath: \"/path/to/project\",\n    query: \"authentication\"\n  }\n});\n\n// Results include:\n// - File name\n// - Line numbers\n// - Highlighted matches\n// - Context around matches\n```\n\n### 6. Creating Custom Templates\n\n```typescript\n// Create a custom template for architecture decisions\nawait use_mcp_tool({\n  server: \"mcp-rtfm\",\n  tool: \"customize_template\",\n  args: {\n    templateName: \"architecture-decision\",\n    content: `# {title}\n\n## Context\n[Background and context for the decision]\n\n## Decision\n[The architecture decision made]\n\n## Consequences\n[Impact and trade-offs of the decision]\n\n## Related Decisions\n[Links to related architecture decisions]`,\n    metadata: {\n      category: \"architecture\",\n      tags: [\"decision-record\", \"design\"]\n    }\n  }\n});\n```\n\n## 🔧 Installation\n\n### VSCode (Roo Cline)\n\nAdd to settings file at:\nAdd to settings file at:\n- Windows: `%APPDATA%\\Code\\User\\globalStorage\\rooveterinaryinc.roo-cline\\settings\\cline_mcp_settings.json`\n- MacOS: `~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`\n- Linux: `~/.config/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-rtfm\": {\n      \"command\": \"node\",\n      \"args\": [\"<path-to-mcp-rtfm>/build/index.js\"],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n### Claude Desktop\n\nAdd to config file at:\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Linux: `~/.config/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-rtfm\": {\n      \"command\": \"node\",\n      \"args\": [\"<path-to-mcp-rtfm>/build/index.js\"],\n      \"disabled\": false,\n      \"alwaysAllow\": []\n    }\n  }\n}\n```\n\n## 🎯 Advanced Features\n\n### Content Linking\n\nUse `[[document-name]]` syntax to create links between documents. The server automatically tracks these relationships and includes them when finding related documentation.\n\n### Metadata-Driven Organization\n\nDocuments are organized using:\n\n- Categories (e.g., \"architecture\", \"api\", \"workflow\")\n- Tags for flexible grouping\n- Automatic relationship discovery based on shared metadata\n- Content link analysis\n\n### Enhanced Content Analysis\n\nThe server uses advanced libraries for better documentation management:\n\n- **unified/remark** for Markdown processing:\n  - AST-based content analysis\n  - Accurate heading structure detection\n  - Code block and link extraction\n  - Proper Markdown parsing and manipulation\n\n- **minisearch** for powerful search capabilities:\n  - Fast fuzzy searching across all documentation\n  - Field-weighted search (titles given higher priority)\n  - Full content and metadata indexing\n  - Efficient caching with TTL management\n  - Real-time search index updates\n\n### Intelligent Metadata Generation\n\n- Automatic content analysis for categorization\n- Smart tag generation based on content patterns\n- Structured front matter in documents\n- AST-based title and section detection\n- Code snippet identification and tagging\n- Context-aware result presentation\n\n### Template System\n\n- Built-in templates for common documentation types\n- Custom template support with metadata defaults\n- Template inheritance and override capabilities\n- Placeholder system for consistent formatting\n\n## 🛠️ Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Development with auto-rebuild\nnpm run watch\n```\n\n## 🐛 Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. Use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## 📄 License\n\nMIT © [Model Context Protocol](https://github.com/modelcontextprotocol)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documentation",
        "metadata",
        "rtfm",
        "notetaking knowledge",
        "documentation content",
        "rtfm facilitates"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "seanivore--Convert-Markdown-PDF-MCP": {
      "owner": "seanivore",
      "name": "Convert-Markdown-PDF-MCP",
      "url": "https://github.com/seanivore/Convert-Markdown-PDF-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/seanivore.webp",
      "description": "Converts Markdown files into styled PDF documents using VS Code's markdown formatting and Python's ReportLab. Offers note storage with custom URI access and provides functionality to summarize all stored notes.",
      "stars": 12,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-02T10:44:47Z",
      "readme_content": "# md-pdf-mcp (Markdown to PDF MCP Server)\n\nConvert Markdown to gorgeously styled PDFs using VS Code's markdown styling and Python's ReportLab.\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"md-pdf-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/path/to/your/local/md-pdf-mcp\",\n        \"run\",\n        \"md-pdf-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"md-pdf-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"md-pdf-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/seanivore/Development/md-pdf-mcp run md-pdf-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "markdown",
        "notetaking",
        "notes",
        "markdown files",
        "markdown pdf",
        "convert markdown"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "shaunporwal--DICOM-MCP": {
      "owner": "shaunporwal",
      "name": "DICOM-MCP",
      "url": "https://github.com/shaunporwal/DICOM-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/shaunporwal.webp",
      "description": "Manage and summarize DICOM images by adding notes and generating summaries to enhance workflows with medical imaging data.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-08T14:38:32Z",
      "readme_content": "# DICOM-MCP MCP server\n\nMCP to work with DICOM images\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"DICOM-MCP\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/shaunporwal/Documents/GitHub/projects/DICOM-MCP\",\n        \"run\",\n        \"DICOM-MCP\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"DICOM-MCP\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"DICOM-MCP\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/shaunporwal/Documents/GitHub/projects/DICOM-MCP run dicom-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dicom",
        "notetaking",
        "imaging",
        "dicom images",
        "summarize dicom",
        "dicom mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "shifusen329--doc-lib-mcp": {
      "owner": "shifusen329",
      "name": "doc-lib-mcp",
      "url": "https://github.com/shifusen329/doc-lib-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/shifusen329.webp",
      "description": "Manage and semantically search documentation by adding, ingesting, chunking, and querying notes across various document types. Create summaries tailored to specific detail levels and access individual notes through a custom URI scheme.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-19T07:06:54Z",
      "readme_content": "# doc-lib-mcp MCP server\n\nA Model Context Protocol (MCP) server for document ingestion, chunking, semantic search, and note management.\n\n## Components\n\n### Resources\n\n- Implements a simple note storage system with:\n  - Custom `note://` URI scheme for accessing individual notes\n  - Each note resource has a name, description, and `text/plain` mimetype\n\n### Prompts\n\n- Provides a prompt:\n  - **summarize-notes**: Creates summaries of all stored notes\n    - Optional \"style\" argument to control detail level (brief/detailed)\n    - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements a wide range of tools:\n\n- **add-note**: Add a new note to the in-memory note store\n  - Arguments: `name` (string), `content` (string)\n- **ingest-string**: Ingest and chunk a markdown or plain text string provided via message\n  - Arguments: `content` (string, required), `source` (string, optional), `tags` (list of strings, optional)\n- **ingest-markdown**: Ingest and chunk a markdown (.md) file\n  - Arguments: `path` (string)\n- **ingest-python**: Ingest and chunk a Python (.py) file\n  - Arguments: `path` (string)\n- **ingest-openapi**: Ingest and chunk an OpenAPI JSON file\n  - Arguments: `path` (string)\n- **ingest-html**: Ingest and chunk an HTML file\n  - Arguments: `path` (string)\n- **ingest-html-url**: Ingest and chunk HTML content from a URL (optionally using Playwright for dynamic content)\n  - Arguments: `url` (string), `dynamic` (boolean, optional)\n- **smart_ingestion**: Extracts all technically relevant content from a file using Gemini, then chunks it using robust markdown logic.\n  - Arguments:\n    - `path` (string, required): File path to ingest.\n    - `prompt` (string, optional): Custom prompt to use for Gemini.\n    - `tags` (list of strings, optional): Optional list of tags for classification.\n  - Uses Gemini 2.0 Flash 001 to extract only code, configuration, markdown structure, and technical definitions (no summaries or commentary).\n  - Passes the extracted content to a mistune 3.x-based chunker that preserves both code blocks and markdown/narrative content as separate chunks.\n  - Each chunk is embedded and stored for semantic search and retrieval.\n- **search-chunks**: Semantic search over ingested content\n  - Arguments:\n    - `query` (string): The semantic search query.\n    - `top_k` (integer, optional, default 3): Number of top results to return.\n    - `type` (string, optional): Filter results by chunk type (e.g., `code`, `html`, `markdown`).\n    - `tag` (string, optional): Filter results by tag in chunk metadata.\n  - Returns the most relevant chunks for a given query, optionally filtered by type and/or tag.\n- **delete-source**: Delete all chunks from a given source\n  - Arguments: `source` (string)\n- **delete-chunk-by-id**: Delete one or more chunks by id\n  - Arguments: `id` (integer, optional), `ids` (list of integers, optional)\n  - You can delete a single chunk by specifying `id`, or delete multiple chunks at once by specifying `ids`.\n- **update-chunk-type**: Update the type attribute for a chunk by id\n  - Arguments: `id` (integer, required), `type` (string, required)\n- **ingest-batch**: Ingest and chunk multiple documentation files (markdown, OpenAPI JSON, Python) in batch\n  - Arguments: `paths` (list of strings)\n- **list-sources**: List all unique sources (file paths) that have been ingested and stored in memory, with optional filtering by tag or semantic search.\n  - Arguments:\n    - `tag` (string, optional): Filter sources by tag in chunk metadata.\n    - `query` (string, optional): Semantic search query to find relevant sources.\n    - `top_k` (integer, optional, default 10): Number of top sources to return when using query.\n- **get-context**: Retrieve relevant content chunks (content only) for use as AI context, with filtering by tag, type, and semantic similarity.\n  - Arguments:\n    - `query` (string, optional): The semantic search query.\n    - `tag` (string, optional): Filter results by a specific tag in chunk metadata.\n    - `type` (string, optional): Filter results by chunk type (e.g., 'code', 'markdown').\n    - `top_k` (integer, optional, default 5): The number of top relevant chunks to retrieve.\n- **update-chunk-metadata**: Update the metadata field for a chunk by id\n  - Arguments: `id` (integer), `metadata` (object)\n- **tag-chunks-by-source**: Adds specified tags to the metadata of all chunks associated with a given source (URL or file path). Merges with existing tags.\n  - Arguments: `source` (string), `tags` (list of strings)\n- **list-notes**: List all currently stored notes and their content.\n\n#### Chunking and Code Extraction\n\n- Markdown, Python, OpenAPI, and HTML files are split into logical chunks for efficient retrieval and search.\n- The markdown chunker uses mistune 3.x's AST API and regex to robustly split content by code blocks and narrative, preserving all original formatting.\n- Both code blocks and markdown/narrative content are preserved as separate chunks.\n- The HTML chunker uses the `readability-lxml` library to extract main content first, then extracts block code snippets from `<pre>` tags as dedicated \"code\" chunks. Inline `<code>` content remains part of the narrative chunks.\n\n#### Semantic Search\n\n- The `search-chunks` tool performs vector-based semantic search over all ingested content, returning the most relevant chunks for a given query.\n- Supports optional `type` and `tag` arguments to filter results by chunk type (e.g., `code`, `html`, `markdown`) and/or by tag in chunk metadata, before semantic ranking.\n- This enables highly targeted retrieval, such as \"all code chunks tagged with 'langfuse' relevant to 'cost and usage'\".\n\n#### Metadata Management\n\n- Chunks include a `metadata` field for categorization and tagging.\n- The `update-chunk-metadata` tool allows updating metadata for any chunk by its id.\n- The `tag-chunks-by-source` tool allows adding tags to all chunks from a specific source in one operation. Tagging merges new tags with existing ones, preserving previous tags.\n\n## Configuration\n\nThe server requires the following environment variables (can be set in a .env file):\n\n### Ollama Configuration\n- OLLAMA_HOST: Hostname for Ollama API (default: localhost)\n- OLLAMA_PORT: Port for Ollama API (default: 11434)\n- RAG_AGENT: Ollama model to use for RAG responses (default: llama3)\n- OLLAMA_MODEL: Ollama model to use for embeddings (default: nomic-embed-text-v2-moe)\n\n### Database Configuration\n- HOST: PostgreSQL database host (default: localhost)\n- DB_PORT: PostgreSQL database port (default: 5432)\n- DB_NAME: PostgreSQL database name (default: doclibdb)\n- DB_USER: PostgreSQL database user (default: doclibdb_user)\n- DB_PASSWORD: PostgreSQL database password (default: doclibdb_password)\n\n### Reranker Configuration\n- RERANKER_MODEL_PATH: Path to the reranker model (default: /srv/samba/fileshare2/AI/models/bge-reranker-v2-m3)\n- RERANKER_USE_FP16: Whether to use FP16 for reranker (default: True)\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"doc-lib-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/home/administrator/python-share/doc-lib-mcp\",\n        \"run\",\n        \"doc-lib-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"doc-lib-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"doc-lib-mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /home/administrator/python-share/doc-lib-mcp run doc-lib-mcp\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documentation",
        "notes",
        "notetaking",
        "querying notes",
        "search documentation",
        "shifusen329 doc"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "sirmews--apple-notes-mcp": {
      "owner": "sirmews",
      "name": "apple-notes-mcp",
      "url": "https://github.com/sirmews/apple-notes-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sirmews.webp",
      "description": "Access and manage a local Apple Notes database, enabling search and retrieval of note content directly within Claude Desktop. Allows users to read all notes and perform specific searches.",
      "stars": 118,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:26:10Z",
      "readme_content": "# Apple Notes Model Context Protocol Server for Claude Desktop.\n\nRead your local Apple Notes database and provide it to Claude Desktop.\n\nNow Claude can search your most forgotten notes and know even more about you.\n\nNoting could go wrong.\n\n## Components\n\n### Resources\n\nThe server implements the ability to read and write to your Apple Notes.\n\n### Tools\n\nThe server provides multiple prompts:\n- `get-all-notes`: Get all notes.\n- `read-note`: Get full content of a specific note.\n- `search-notes`: Search through notes.\n\n### Missing Features:\n\n- No handling of encrypted notes (ZISPASSWORDPROTECTED)\n- No support for pinned notes filtering\n- No handling of cloud sync status\n- Missing attachment content retrieval\n- No support for checklist status (ZHASCHECKLIST)\n- No ability to create or edit notes\n\n## Quickstart\n\n### Install the server\n\nRecommend using [uv](https://docs.astral.sh/uv/getting-started/installation/) to install the server locally for Claude.\n\n```\nuvx apple-notes-mcp\n```\nOR\n```\nuv pip install apple-notes-mcp\n```\n\nAdd your config as described below.\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nNote: You might need to use the direct path to `uv`. Use `which uv` to find the path.\n\n\n__Development/Unpublished Servers Configuration__\n  \n```json\n\"mcpServers\": {\n  \"apple-notes-mcp\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"--directory\",\n      \"{project_dir}\",\n      \"run\",\n      \"apple-notes-mcp\"\n    ]\n  }\n}\n```\n\n\n__Published Servers Configuration__\n  \n```json\n\"mcpServers\": {\n  \"apple-notes-mcp\": {\n    \"command\": \"uvx\",\n    \"args\": [\n      \"apple-notes-mcp\"\n    ]\n  }\n}\n```\n\n\n## Mac OS Disk Permissions\n\nYou'll need to grant Full Disk Access to the server. This is because the Apple Notes sqlite database is nested deep in the MacOS file system.\n\nI may look at an AppleScript solution in the future if this annoys me further or if I want to start adding/appending to Apple Notes.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {project_dir} run apple-notes-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Source Code\n\nThe source code is available on [GitHub](https://github.com/sirmews/apple-notes-mcp).\n\n## Contributing\n\nSend your ideas and feedback to me on [Bluesky](https://bsky.app/profile/perfectlycromulent.bsky.social) or by opening an issue.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "sirmews",
        "notes database",
        "apple notes",
        "note content"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "skydeckai--mcp-server-rememberizer": {
      "owner": "skydeckai",
      "name": "mcp-server-rememberizer",
      "url": "https://github.com/skydeckai/mcp-server-rememberizer",
      "imageUrl": "/freedevtools/mcp/pfp/skydeckai.webp",
      "description": "Interact with Rememberizer's document and knowledge management API to perform document search, retrieval, and management. Supports access to both documents and Slack discussions.",
      "stars": 34,
      "forks": 7,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-12T12:39:35Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/skydeckai-mcp-server-rememberizer-badge.png)](https://mseep.ai/app/skydeckai-mcp-server-rememberizer)\n\n# MCP Server Rememberizer\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/fe7a40fd-30c1-4767-84f9-d33bf997497e)\n\nA [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol) server for interacting with Rememberizer's document and knowledge management API. This server enables Large Language Models to search, retrieve, and manage documents and integrations through Rememberizer.\n\nPlease note that `mcp-server-rememberizer` is currently in development and the functionality may be subject to change.\n\n## Components\n\n### Resources\n\nThe server provides access to two types of resources: Documents or Slack discussions\n\n### Tools\n\n1. `retrieve_semantically_similar_internal_knowledge`\n\n    - Send a block of text and retrieve cosine similar matches from your connected Rememberizer personal/team internal knowledge and memory repository\n    - Input:\n        - `match_this` (string): Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge\n        - `n_results` (integer, optional): Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information\n        - `from_datetime_ISO8601` (string, optional): Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date\n        - `to_datetime_ISO8601` (string, optional): End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date\n    - Returns: Search results as text output\n\n2. `smart_search_internal_knowledge`\n\n    - Search for documents in Rememberizer in its personal/team internal knowledge and memory repository using a simple query that returns the results of an agentic search. The search may include sources such as Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files\n    - Input:\n        - `query` (string): Up to a 400-word sentence for which you wish to find semantically similar chunks of knowledge\n        - `user_context` (string, optional): The additional context for the query. You might need to summarize the conversation up to this point for better context-awared results\n        - `n_results` (integer, optional): Number of semantically similar chunks of text to return. Use 'n_results=3' for up to 5, and 'n_results=10' for more information\n        - `from_datetime_ISO8601` (string, optional): Start date in ISO 8601 format with timezone (e.g., 2023-01-01T00:00:00Z). Use this to filter results from a specific date\n        - `to_datetime_ISO8601` (string, optional): End date in ISO 8601 format with timezone (e.g., 2024-01-01T00:00:00Z). Use this to filter results until a specific date\n    - Returns: Search results as text output\n\n3. `list_internal_knowledge_systems`\n\n    - List the sources of personal/team internal knowledge. These may include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files\n    - Input: None required\n    - Returns: List of available integrations\n\n4. `rememberizer_account_information`\n\n    - Get information about your Rememberizer.ai personal/team knowledge repository account. This includes account holder name and email address\n    - Input: None required\n    - Returns: Account information details\n\n5. `list_personal_team_knowledge_documents`\n\n    - Retrieves a paginated list of all documents in your personal/team knowledge system. Sources could include Slack discussions, Gmail, Dropbox documents, Google Drive documents, and uploaded files\n    - Input:\n        - `page` (integer, optional): Page number for pagination, starts at 1 (default: 1)\n        - `page_size` (integer, optional): Number of documents per page, range 1-1000 (default: 100)\n    - Returns: List of documents\n\n6. `remember_this`\n\n    - Save a piece of text information in your Rememberizer.ai knowledge system so that it may be recalled in future through tools retrieve_semantically_similar_internal_knowledge or smart_search_internal_knowledge\n    - Input:\n        - `name` (string): Name of the information. This is used to identify the information in the future\n        - `content` (string): The information you wish to memorize\n    - Returns: Confirmation data\n\n## Installation\n\n### Manual Installation\n\n```bash\nuvx mcp-server-rememberizer\n```\n\n### Via MseeP AI Helper App\n\nIf you have MseeP AI Helper app installed, you can search for \"Rememberizer\" and install the mcp-server-rememberizer.\n\n![MseeP AI Helper](https://www.gitbook.com/cdn-cgi/image/dpr=2,width=760,onerror=redirect,format=auto/https%3A%2F%2Ffiles.gitbook.com%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FyNqpTh7Mh66N0RnO0k24%252Fuploads%252FuTpQuJffWohPRTvjmyVe%252FScreenshot%25202025-07-29%2520at%252014.43.12.png%3Falt%3Dmedia%26token%3D7f046f3b-dc69-4f09-8f8c-978097f0066e)\n\n## Configuration\n\n### Environment Variables\n\nThe following environment variables are required:\n\n-   `REMEMBERIZER_API_TOKEN`: Your Rememberizer API token\n\nYou can register an API key by creating your own [Common Knowledge in Rememberizer](https://docs.rememberizer.ai/developer/registering-and-using-api-keys).\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n\"mcpServers\": {\n  \"rememberizer\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-rememberizer\"],\n      \"env\": {\n        \"REMEMBERIZER_API_TOKEN\": \"your_rememberizer_api_token\"\n      }\n    },\n}\n```\n\n### Usage with MseeP AI Helper App\n\nAdd the env REMEMBERIZER_API_TOKEN to mcp-server-rememberizer.\n\n![MseeP AI Helper Configuration](https://www.gitbook.com/cdn-cgi/image/dpr=2,width=760,onerror=redirect,format=auto/https%3A%2F%2Ffiles.gitbook.com%2Fv0%2Fb%2Fgitbook-x-prod.appspot.com%2Fo%2Fspaces%252FyNqpTh7Mh66N0RnO0k24%252Fuploads%252FHxisSUT1anmCpoHhW8CJ%252FScreenshot%25202025-07-29%2520at%252014.45.42.png%3Falt%3Dmedia%26token%3D1332394a-cdbe-4e7b-9099-1dbf14e58ffb)\n\nWith support from the Rememberizer MCP server, you can now ask the following questions in your Claude Desktop app or SkyDeck AI GenStudio\n\n-   _What is my Rememberizer account?_\n\n-   _List all documents that I have there._\n\n-   _Give me a quick summary about \"...\"_\n\n-   and so on...\n\nTo learn more about Rememberizer MCP Server: https://docs.rememberizer.ai/personal-use/integrations/rememberizer-mcp-servers\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rememberizer",
        "retrieval",
        "notetaking",
        "rememberizer document",
        "server rememberizer",
        "rememberizer interact"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "soukouki--obsidian_fetch": {
      "owner": "soukouki",
      "name": "obsidian_fetch",
      "url": "https://github.com/soukouki/obsidian_fetch",
      "imageUrl": "/freedevtools/mcp/pfp/soukouki.webp",
      "description": "Retrieve and load notes efficiently from Obsidian vaults, enabling enhanced interactions with language models by cleaning link queries and displaying backlinks to opened files. Streamlined for local GPU setups to improve note retrieval speed and efficiency.",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "Ruby",
      "updated_at": "2025-08-19T16:26:33Z",
      "readme_content": "# ObsidianFetch\n\nMCP servers focused on fetching and presenting information from Obsidian vaults.\n\nThe existing MCP server has the following drawbacks:\n- It supports many commands, which can cause slow prompt loading when computational resources are limited.\n- When reading a note labeled \"Sample Note\", it is necessary to search for its path first before loading it, but the LLM may not always follow this procedure.\n- Some tools include unnecessary options, leading the LLM to sometimes fail to invoke them correctly.\n\nThese issues become particularly noticeable when running an LLM on a local GPU.  \nTo address this, we developed a new MCP server that simply retrieves and loads lists of notes.\n\nThe new server also provides the following additional features:\n- When the LLM attempts to retrieve link information by searching with brackets like `[[link name]]`, the server automatically removes any characters that cannot be used in links.\n- In addition to loading the note contents, it also displays backlinks—notes that link to the currently opened note.\n\t- This allows the LLM to load and understand the connections between related notes via backlinks.\n\n## Installation\n\n```bash\ngem install obsidian_fetch\n```\n\n## Usage\n\n```bash\nobsidian_fetch /path/to/your/vault\n```\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub at https://github.com/soukouki/obsidian_fetch.\n\n## License\n\nThe gem is available as open source under the terms of the [MIT License](https://opensource.org/licenses/MIT).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "retrieval",
        "note retrieval",
        "notes efficiently",
        "load notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "sseaan--mcp-server-inbox": {
      "owner": "sseaan",
      "name": "mcp-server-inbox",
      "url": "https://github.com/sseaan/mcp-server-inbox",
      "imageUrl": "/freedevtools/mcp/pfp/sseaan.webp",
      "description": "Send notes to an Inbox API endpoint using a configured user token, supporting notes up to 3000 characters. Integrate seamlessly into MCP-enabled environments to enhance note-taking workflows.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-04-19T11:23:28Z",
      "readme_content": "# Inbox MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@sseaan/mcp-server-inbox)](https://smithery.ai/server/@sseaan/mcp-server-inbox)\n\n一个基于[MCP(Model Context Protocol)](https://modelcontextprotocol.io)的服务器，用于将笔记发送到Inbox API。\n\n## 功能\n\n这个MCP服务器提供了一个工具，可以将笔记内容发送到指定的Inbox API端点。\n\n- 接入 inBox 笔记 API\n- 支持通过 MCP 客户端创建笔记\n- 支持设置笔记标题\n\n## 安装\n\n### 安装 via Smithery\n\n要自动为 Claude Desktop 安装 MCP Server 服务器，你可以使用 [Smithery](https://smithery.ai/server/@sseaan/mcp-server-inbox):\n\n```bash\nnpx -y @smithery/cli install @sseaan/mcp-server-inbox --client claude\n```\n### 前置要求\n\n- inBox 笔记 API (需要PRO)\n- 支持 MCP 协议的客户端（CherryStudio/Cursor等）\n\n### 依赖\n\n- Python 3.8+\n- requests\n- mcp[cli]\n\n### 安装步骤\n\n```bash\n# 克隆仓库\ngit clone https://github.com/example/inbox-mcp-server.git\ncd inbox-mcp-server\n\n# 安装依赖\npip install -e .\n```\n\n## 使用方法\n\n### 环境变量设置\n\n在运行服务器之前，需要设置以下环境变量：\n\n- `INBOX_TOKEN`: 用于访问Inbox API的用户令牌\n\n```bash\n# Linux/macOS\nexport INBOX_TOKEN=your_token_here\n\n# Windows (CMD)\nset INBOX_TOKEN=your_token_here\n\n# Windows (PowerShell)\n$env:INBOX_TOKEN=\"your_token_here\"\n```\n\n### 运行服务器\n\n```bash\n# 直接运行\npython main.py\n\n# 或使用MCP CLI\nmcp run main.py\n```\n\n### 在Claude Desktop中安装\n\n```bash\nmcp install main.py\n```\n## 在 MCP 客户端中配置\n\n在Smithery输入INBOX_TOKEN\n获得json配置文件如下：\n```json\n\"mcp-server-inbox\": {\n  \"command\": \"npx\",\n  \"args\": [\n    \"-y\",\n    \"@smithery/cli@latest\",\n    \"run\",\n    \"@sseaan/mcp-server-inbox\",\n    \"--key\",\n    \"*******************************\"\n  ]\n}\n```\n\n### CherryStudio\n\n1. 打开 CherryStudio 的 MCP 服务器设置页面\n2. 点击 \"添加服务器\"\n3. 输入服务器名称（例如 \"inbox-mcp-server\"）\n4. 类型选择 “标准输入/输出(stdio)”\n5. 命令输入npx\n6. 输入参数\n```\n-y\n@smithery/cli@latest\nrun\n@sseaan/mcp-server-inbox\n--key\n*******************************\n```\n7. 点击 \"保存\"\n\n### Cursor\n\n1. 打开 Cursor 的 MCP 服务配置文件（通常位于 `~/.cursor/mcp.json`）\n2. 添加 mcp-server-inbox 的配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-inbox\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@sseaan/mcp-server-inbox\",\n        \"--key\",\n        \"*******************************\"\n      ]\n    }\n  }\n}\n```\n\n### 其他 MCP 客户端\n\n请参考对应 MCP 客户端的配置文档，添加类似的配置信息。\n\n## API 说明\n\n### 发送笔记\n\n```\n工具名称: send_note\n参数:\n  - content: 笔记内容 (最多3000字符)\n  - title: 笔记标题\n```\n\n## 许可证\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "workflows",
        "notes inbox",
        "send notes",
        "supporting notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "stopWarByWar--beeper-mcp-server": {
      "owner": "stopWarByWar",
      "name": "beeper-mcp-server",
      "url": "https://github.com/stopWarByWar/beeper-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/stopWarByWar.webp",
      "description": "Store and manage notes with customizable summaries and detailed interaction through a simple interface. Utilizes a custom URI scheme for note access and supports note addition and summarization based on user-defined detail levels.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-30T19:12:07Z",
      "readme_content": "# beeper_mcp MCP server\n\na mcp server for interacting with chain\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"beeper_mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/pan/work/openos/beeper/beeper_mcp\",\n        \"run\",\n        \"beeper_mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"beeper_mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"beeper_mcp\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/pan/work/openos/beeper/beeper_mcp run beeper-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "summarization",
        "manage notes",
        "note access",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "swairshah--zotero-mcp-server": {
      "owner": "swairshah",
      "name": "zotero-mcp-server",
      "url": "https://github.com/swairshah/zotero-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/swairshah.webp",
      "description": "Access and manage your Zotero library programmatically, enabling the search of papers, management of notes, and the ability to request summaries through MCP clients. Facilitates seamless integration into research workflows with existing tools.",
      "stars": 20,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-23T05:46:16Z",
      "readme_content": "# Zotero MCP Server\n\nA MCP (Model Context Protocol) server to let your MCP clients (e.g. Anthropic Claude App, Goose, possibly vscode Cline too) interact with your local Zotero repository. This server enables programmatic access to your Zotero library, allowing you to search papers, manage notes, and more.\n\n**Note**: If you don't want to set up API keys, see the [SQLite database server option](#alternative-direct-sqlite-database-access) below.\n\n## Setup\n\n1. Install dependencies:\n```bash\npip install -e .\n```\n\n2. Create a `.env` file in the root directory with your Zotero credentials:\n```bash\nZOTERO_API_KEY=your_api_key_here\nZOTERO_USER_ID=your_user_id_here\n```\n\nYou can get your Zotero API key and user ID from [Zotero's settings page](https://www.zotero.org/settings/keys).\n\n## Integration with Anthropic Desktop App\n\nTo integrate with the Anthropic Desktop app, add the following configuration to `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"zotero-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/swairshah/work/research/zotero-mcp\",\n        \"run\",\n        \"python\",\n        \"-m\",\n        \"zotero_mcp.server\"\n      ]\n    }\n  }\n}\n```\nIf this gives an error like\n``` \n{\"method\":\"initialize\",\"params\":{\"protocolVersion\":\"2024-11-05\",\"capabilities\":{},\"clientInfo\":{\"name\":\"claude-ai\",\"version\":\"0.1.0\"}},\"jsonrpc\":\"2.0\",\"id\":0}\n  error: unexpected argument '--directory' found\n```\nThen use the following config, make sure to do `uv venv`; `source .venv/bin/activate`; `uv pip install \".[dev]\"` to make sure the server can be run with all dependencies. \n\n```json\n{\n   \"mcpServers\": {\n      \"zotero-mcp-server\": {\n        \"command\": \"bash\",\n        \"args\": [\n          \"-c\",\n          \"cd /Users/shahswai/personal/zotero-mcp-server && source .venv/bin/activate && python -m zotero_mcp.server\"\n        ]\n      }\n    }\n  }\n```\n\n## Alternative: Direct SQLite Database Access\n\nIf you prefer to bypass the Zotero API entirely and work directly with the SQLite database, use `zotero_mcp/db_server.py`. This approach gives you full control over your Zotero data without API limitations. Note that you'll need to close Zotero completely before using this method since SQLite locks the database when Zotero is running.\n\nClaude MCP config for the SQLite version:\n```json\n{\n  \"mcpServers\": {\n    \"zotero-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/swair/work/code/zotero-mcp-server\",\n        \"run\",\n        \"python\",\n        \"-m\",\n        \"zotero_mcp.db_server\"\n      ]\n    }\n  }\n}\n```\n\n## Example Usage\n\n\n\nThe server allows you to:\n- Search papers by tags\n- Get paper details and attached notes\n- Add notes to papers\n- Request paper summaries",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zotero",
        "notetaking",
        "notes",
        "zotero library",
        "manage zotero",
        "zotero mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "takuya0206--obsidian-mcp": {
      "owner": "takuya0206",
      "name": "obsidian-mcp",
      "url": "https://github.com/takuya0206/obsidian-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/takuya0206.webp",
      "description": "Interact with an Obsidian vault to read, write, and manipulate notes using a standardized interface, facilitating enhanced productivity and organization.",
      "stars": 2,
      "forks": 1,
      "license": "ISC License",
      "language": "TypeScript",
      "updated_at": "2025-04-09T09:26:56Z",
      "readme_content": "# Obsidian MCP (Model Context Protocol)\n\nObsidian MCP is a tool that allows you to interact with your Obsidian vault using the Model Context Protocol. This enables AI assistants to read, write, and manipulate notes in your Obsidian vault through a standardized interface.\n\n\n## Prerequisites\n\n- Node.js 18 or higher\n- Obsidian with [Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) installed and configured\n- API key generated from the Local REST API plugin\n\n## Setting MCP Server (e.g. Claude Desktop App)\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   npm install\n   ```\n3. Build the project:\n   ```\n   npm run build\n   ```\n\n4. Configure Claude Desktop App to use this MCP server:\n   ```\n   {\n      \"mcpServers\": {\n        \"Obsidian\": {\n          \"command\": \"node\",\n          \"args\": [\"/Users/<Your Own Path>/obsisian-mcp/build/index.js\"],\n          \"env\": {\n            \"apiKey\": \"<Your API Token>\",\n            \"port\": \"27123\",\n            \"host\": \"127.0.0.1\"\n          }\n        }\n      }\n    }\n   ```\n## Development\nCreate `.env` and configure \"apiKey\", \"port\", and \"host\" as mentioned above.\n\n\n### Available Tools\n\nThe following tools are implemented:\n\n1. **readNote** - Read the contents of a specific note\n   ```\n   {\n     \"path\": \"path/to/note.md\"\n   }\n   ```\n\n2. **readActiveNote** - Read the contents of the current active note\n   ```\n   {}\n   ```\n\n3. **listNotes** - Recursively lists files and folders in the entire Vault or under a specified folder\n   ```\n   {\n     \"path\": \"optional/folder/path\"\n   }\n   ```\n\n4. **patchNote** - Inserts content into an existing note relative to a heading, block reference, or frontmatter field\n   ```\n   {\n     \"path\": \"path/to/note.md\",\n     \"operation\": \"append|prepend|replace\",\n     \"targetType\": \"heading|block|frontmatter\",\n     \"target\": \"target_identifier\",\n     \"content\": \"content to insert\"\n   }\n   ```\n\n5. **searchWithJsonLogic** - Search Obsidian notes using JsonLogic format queries\n   ```\n   {\n     \"query\": {\n       // JsonLogic query object\n     }\n   }\n   ```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "notetaking",
        "notes",
        "interact obsidian",
        "obsidian mcp",
        "obsidian vault"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tan-yong-sheng--triliumnext-mcp": {
      "owner": "tan-yong-sheng",
      "name": "triliumnext-mcp",
      "url": "https://github.com/tan-yong-sheng/triliumnext-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/tan-yong-sheng.webp",
      "description": "Interact with Trilium Notes to manage notes via searching, creating, updating, and deleting functionalities directly through applications.",
      "stars": 16,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-25T12:05:02Z",
      "readme_content": "# TriliumNext Notes' MCP Server\n\n⚠️ **DISCLAIMER: This is a prototype for https://github.com/TriliumNext/Notes/issues/705. Suggested only for developer use. Please backup your Trilium notes before using this tool.** ⚠️\n\nA model context protocol server for TriliumNext Notes. This server provides tools to interact with your Trilium Notes instance through MCP.\n\n## Quick Start\n\nMake sure to set up your environment variables first:\n- `TRILIUM_API_URL` (default: http://localhost:8080/etapi)\n- `TRILIUM_API_TOKEN` (required, get this from your Trilium Notes settings)\n- `PERMISSIONS` (optional, default='READ;WRITE', where READ grants access to `search_notes`, `get_note`, `resolve_note_id`, and `read_attributes`, and WRITE grants access to `create_note`, `update_note`, `delete_note`, and `manage_attributes`)\n- `VERBOSE` (optional, default='false', which if true will print verbose debugging logs)\n\n## Installation\n\n### 1. Using with Claude Desktop\n\nAdd the server config to your Claude Desktop configuration file:\n\n#### For Local Installation (on Windows)\n\n```json\n\"triliumnext-mcp\": {\n  \"command\": \"cmd\",\n  \"args\": [\n        \"/k\",\n        \"npx\",\n        \"-y\",\n        \"triliumnext-mcp\"\n      ],\n   \"env\": {\n    \"TRILIUM_API_URL\": \"http://localhost:8080/etapi\",\n    \"TRILIUM_API_TOKEN\": \"<YOUR_TRILIUM_API_TOKEN>\",\n    \"PERMISSIONS\": \"READ;WRITE\"\n  }\n}\n```\n\n#### For Local installation (on Linux)\n\n```json\n\"triliumnext-mcp\": {\n  \"command\": \"npx\",\n  \"args\": [\n        \"-y\",\n        \"triliumnext-mcp\"\n      ],\n   \"env\": {\n    \"TRILIUM_API_URL\": \"http://localhost:8080/etapi\",\n    \"TRILIUM_API_TOKEN\": \"<YOUR_TRILIUM_API_TOKEN>\",\n    \"PERMISSIONS\": \"READ;WRITE\"\n  }\n}\n```\n\n#### For Development (on Windows / Linux)\n\n```bash\ncd /path/to/triliumnext-mcp\nnpm run build\n```\n\n```json\n\"triliumnext-mcp\": {\n  \"command\": \"node\",\n  \"args\": [\n        \"/path/to/triliumnext-mcp/build/index.js\"\n  ],\n  \"env\": {\n    \"TRILIUM_API_URL\": \"http://localhost:8080/etapi\",\n    \"TRILIUM_API_TOKEN\": \"<YOUR_TRILIUM_API_TOKEN>\",\n    \"PERMISSIONS\": \"READ;WRITE\",\n    \"VERBOSE\": \"true\"\n  }\n}\n```\n\nLocation of the configuration file:\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n- MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n**Feedback**: Please report issues and test results at [GitHub Issues](https://github.com/TriliumNext/Notes/issues)\n\n## Available Tools\n\nThe server provides the following tools for note management:\n\n### Search & Discovery Tools\n\n- `search_notes` - Unified search with comprehensive filtering capabilities including keyword search, date ranges, field-specific searches, attribute searches, note properties, template-based searches, note type filtering, MIME type filtering, and hierarchy navigation.\n- `resolve_note_id` - Find a note's ID by its title. Essential for getting a note's ID to use with other tools.\n\n### Note Management Tools\n\n- `get_note` - Retrieve a note and its content by ID. Can also be used with regex to extract specific patterns from the content.\n- `create_note` - Create a new note. Supports 9 note types and allows creating attributes (labels and relations) in the same step.\n- `update_note` - Updates a note's title or content. Requires a `mode` (`'overwrite'` or `'append'`) to specify the update type and an `expectedHash` to prevent conflicts.\n- `delete_note` - Permanently delete a note (⚠️ cannot be undone).\n\n### Attribute Management Tools\n\n- `read_attributes` - Read all attributes (labels and relations) for a given note.\n- `manage_attributes` - Create, update, or delete attributes on a note. Supports batch creation.\n\n> 📖 **Detailed Usage**: See [Note Management Guide](docs/manage-notes-examples/index.md) for revision control strategy and best practices.\n\n## Example Queries\n\n### Search & Discovery\n- \"Find my most recent 10 notes about 'n8n' since the beginning of 2024\"\n- \"Show me notes I've edited in the last 7 days\"\n- \"List all notes under 'n8n Template' folder, including subfolders\"\n\n### Content Management\n- \"Add today's update to my work log\" (uses `update_note` with `mode: 'append'`)\n- \"Replace this draft with the final version\" (uses `update_note` with `mode: 'overwrite'`)\n- \"Create a new note called 'Weekly Review' in my journal folder\"\n\n> 📖 **More Examples**: See [User Query Examples](docs/user-query-examples.md) for comprehensive usage scenarios.\n\n## Documentation\n\n- [Note Management Guide](docs/manage-notes-examples/index.md) - Safe content editing with revision control\n- [User Query Examples](docs/user-query-examples.md) - Natural language query examples\n- [Search Query Examples](docs/search-examples/) - Advanced search syntax and filters\n\n## Development\n\nIf you want to contribute or modify the server:\n\n```bash\n# Clone the repository\ngit clone https://github.com/tan-yong-sheng/triliumnext-mcp.git\n\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# For development with auto-rebuild\nnpm run watch\n```\n\n## Contributing\n\nContributions are welcome! If you are looking to improve the server, please familiarize yourself with the official [Trilium Search DSL documentation](https://triliumnext.github.io/Docs/Wiki/search.html) and our internal [Search Query Examples](docs/search-examples/) to understand how search queries are constructed.\n\nPlease feel free to open an issue or submit a pull request.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "triliumnext",
        "trilium",
        "notetaking",
        "trilium notes",
        "sheng triliumnext",
        "triliumnext mcp"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tcsavage--mcp-obsidian-index": {
      "owner": "tcsavage",
      "name": "mcp-obsidian-index",
      "url": "https://github.com/tcsavage/mcp-obsidian-index",
      "imageUrl": "/freedevtools/mcp/pfp/tcsavage.webp",
      "description": "Provides semantic search over an Obsidian vault and exposes recently modified notes as resources. Notes can be accessed using a specific URL scheme and have markdown media type.",
      "stars": 8,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-30T03:22:49Z",
      "readme_content": "# Obsidian Index MCP server\n\nAn MCP server that provides a semantic search over an Obsidian vault and exposes recent notes as resources.\n\n## Components\n\n### Resources\n\nThe server exposes recently modified notes in your vaults as resources to MCP clients.\n- Notes are addressed by an `obsidian://<VAULT_NAME>/<NOTE_PATH>` URL scheme\n- Notes have the `text/markdown` media type\n\n### Tools\n\nThe server implements one tool:\n- `search-notes`: Performs semantic search over indexed notes\n\n## Run the server\n\n```bash\nuv run obsidian-index mcp --vault <VAULT_PATH> --database <DATABASE_PATH> --reindex --watch\n```\n\n- `--vault`: Path to the Obsidian vault (can be specified multiple times)\n- `--database`: Path to the local database file (will be created if it doesn't exist)\n- `--reindex`: Reindex all notes in the vault (you probably want this every time right now)\n- `--watch`: Watch for changes in the vault and update the index accordingly\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"obsidian-index\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<PATH_TO_PROJECT>\",\n        \"run\",\n        \"obsidian-index\",\n        \"--database\",\n        \"<PATH_TO_DATABASE>\",\n        \"--vault\",\n        \"<PATH_TO_VAULT>\",\n        \"--reindex\",\n        \"--watch\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"obsidian-index\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"obsidian-index\",\n        \"--database\",\n        \"<PATH_TO_DATABASE>\",\n        \"--vault\",\n        \"<PATH_TO_VAULT>\",\n        \"--reindex\",\n        \"--watch\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory <PATH_TO_PROJECT> run obsidian-index\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "obsidian",
        "notes resources",
        "search obsidian",
        "obsidian index"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "teamcurri--mcp-linear": {
      "owner": "teamcurri",
      "name": "mcp-linear",
      "url": "https://github.com/teamcurri/mcp-linear",
      "imageUrl": "/freedevtools/mcp/pfp/teamcurri.webp",
      "description": "Interact with Curri's API to manage text notes and generate summaries. Provides features for creating notes, listing them, and summarizing their contents.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-02-18T19:41:18Z",
      "readme_content": "# curri-mcp-server MCP Server\n\nAn MCP server for interacting with Curri&#39;s API\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"curri-mcp-server\": {\n      \"command\": \"/path/to/curri-mcp-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "teamcurri",
        "text notes",
        "notetaking knowledge",
        "creating notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "teddylee777--mcpdoc": {
      "owner": "teddylee777",
      "name": "mcpdoc",
      "url": "https://github.com/teddylee777/mcpdoc",
      "imageUrl": "/freedevtools/mcp/pfp/teddylee777.webp",
      "description": "Provides a user-defined list of llms.txt files and a tool to fetch and read URLs within those files, facilitating the auditing of tool calls and the context returned during LLM interactions. Integrates with various IDEs and applications to enhance the development experience.",
      "stars": 8,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-14T04:26:57Z",
      "readme_content": "# MCP LLMS-TXT Documentation Server\n\n## Overview\n\n[llms.txt](https://llmstxt.org/) is a website index for LLMs, providing background information, guidance, and links to detailed markdown files. IDEs like Cursor and Windsurf or apps like Claude Code/Desktop can use `llms.txt` to retrieve context for tasks. However, these apps use different built-in tools to read and process files like `llms.txt`. The retrieval process can be opaque, and there is not always a way to audit the tool calls or the context returned.\n\n[MCP](https://github.com/modelcontextprotocol) offers a way for developers to have *full control* over tools used by these applications. Here, we create [an open source MCP server](https://github.com/modelcontextprotocol) to provide MCP host applications (e.g., Cursor, Windsurf, Claude Code/Desktop) with (1) a user-defined list of `llms.txt` files and (2) a simple  `fetch_docs` tool read URLs within any of the provided `llms.txt` files. This allows the user to audit each tool call as well as the context returned. \n\n![mcpdoc](https://github.com/user-attachments/assets/736f8f55-833d-4200-b833-5fca01a09e1b)\n\n## Quickstart\n\n#### Install uv\n* Please see [official uv docs](https://docs.astral.sh/uv/getting-started/installation/#installation-methods) for other ways to install `uv`.\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n#### Choose an `llms.txt` file to use. \n* For example, [here's](https://langchain-ai.github.io/langgraph/llms.txt) the LangGraph `llms.txt` file.\n\n#### (Optional) Test the MCP server locally with your `llms.txt` file of choice:\n```bash\nuvx --from mcpdoc mcpdoc \\\n    --urls LangGraph:https://langchain-ai.github.io/langgraph/llms.txt \\\n    --transport sse \\\n    --port 8082 \\\n    --host localhost\n```\n\n* This should run at: http://localhost:8082\n\n![Screenshot 2025-03-18 at 3 29 30 PM](https://github.com/user-attachments/assets/24a3d483-cd7a-4c7e-a4f7-893df70e888f)\n\n* Run [MCP inspector](https://modelcontextprotocol.io/docs/tools/inspector) and connect to the running server:\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\n![Screenshot 2025-03-18 at 3 30 30 PM](https://github.com/user-attachments/assets/14645d57-1b52-4a5e-abfe-8e7756772704)\n\n* Here, you can test the `tool` calls. \n\n#### Connect to Cursor \n\n* Open `Cursor Settings` and `MCP` tab.\n* This will open the `~/.cursor/mcp.json` file.\n\n![Screenshot 2025-03-19 at 11 01 31 AM](https://github.com/user-attachments/assets/3d1c8eb3-4d40-487f-8bad-3f9e660f770a)\n\n* Paste the following into the file (we use the `langgraph-docs-mcp` name and link to the LangGraph `llms.txt`).\n\n```\n{\n  \"mcpServers\": {\n    \"langgraph-docs-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"mcpdoc\",\n        \"mcpdoc\",\n        \"--urls\",\n        \"LangGraph:https://langchain-ai.github.io/langgraph/llms.txt\",\n        \"--transport\",\n        \"stdio\",\n        \"--port\",\n        \"8081\",\n        \"--host\",\n        \"localhost\"\n      ]\n    }\n  }\n}\n```\n\n* Confirm that the server is running in your `Cursor Settings/MCP` tab.\n* `CMD+L` (on Mac) to open chat.\n* Ensure `agent` is selected. \n\n![Screenshot 2025-03-18 at 1 56 54 PM](https://github.com/user-attachments/assets/0dd747d0-7ec0-43d2-b6ef-cdcf5a2a30bf)\n\nThen, try an example prompt, such as:\n```\nuse the langgraph-docs-mcp server to answer any LangGraph questions -- \n+ call list_doc_sources tool to get the available llms.txt file\n+ call fetch_docs tool to read it\n+ reflect on the urls in llms.txt \n+ reflect on the input question \n+ call fetch_docs on any urls relevant to the question\n+ use this to answer the question\n\nwhat are types of memory in LangGraph?\n```\n\n![Screenshot 2025-03-18 at 1 58 38 PM](https://github.com/user-attachments/assets/180966b5-ab03-4b78-8b5d-bab43f5954ed)\n\n### Connect to Windsurf\n\n* Open Cascade with `CMD+L` (on Mac).\n* Click `Configure MCP` to open the config file, `~/.codeium/windsurf/mcp_config.json`.\n* Update with `langgraph-docs-mcp` as noted above.\n\n![Screenshot 2025-03-19 at 11 02 52 AM](https://github.com/user-attachments/assets/d45b427c-1c1e-4602-820a-7161a310af24)\n\n* `CMD+L` (on Mac) to open Cascade and refresh MCP servers.\n* Available MCP servers will be listed, showing `langgraph-docs-mcp` as connected.\n\n![Screenshot 2025-03-18 at 2 02 12 PM](https://github.com/user-attachments/assets/5a29bd6a-ad9a-4c4a-a4d5-262c914c5276)\n\nThen, try the example prompt:\n* It will perform your tool calls.\n\n![Screenshot 2025-03-18 at 2 03 07 PM](https://github.com/user-attachments/assets/0e24e1b2-dc94-4153-b4fa-495fd768125b)\n\n### Connect to Claude Desktop\n\n* Open `Settings/Developer` to update `~/Library/Application\\ Support/Claude/claude_desktop_config.json`.\n* Update with `langgraph-docs-mcp` as noted above.\n* Restart Claude Desktop app.\n\n![Screenshot 2025-03-18 at 2 05 54 PM](https://github.com/user-attachments/assets/228d96b6-8fb3-4385-8399-3e42fa08b128)\n\n* You will see your tools visible in the bottom right of your chat input.\n\n![Screenshot 2025-03-18 at 2 05 39 PM](https://github.com/user-attachments/assets/71f3c507-91b2-4fa7-9bd1-ac9cbed73cfb)\n\nThen, try the example prompt:\n\n* It will ask to approve tool calls as it processes your request.\n\n![Screenshot 2025-03-18 at 2 06 54 PM](https://github.com/user-attachments/assets/59b3a010-94fa-4a4d-b650-5cd449afeec0)\n\n### Connect to Claude Code\n\n* In a terminal after installing [Claude Code](https://docs.anthropic.com/en/docs/agents-and-tools/claude-code/overview), run this command to add the MCP server to your project:\n```\nclaude mcp add-json langgraph-docs '{\"type\":\"stdio\",\"command\":\"uvx\" ,\"args\":[\"--from\", \"mcpdoc\", \"mcpdoc\", \"--urls\", \"langgraph:https://langchain-ai.github.io/langgraph/llms.txt\"]}' -s local\n```\n* You will see `~/.claude.json` updated.\n* Test by launching Claude Code and running to view your tools:\n```\n$ Claude\n$ /mcp \n```\n\n![Screenshot 2025-03-18 at 2 13 49 PM](https://github.com/user-attachments/assets/eb876a0e-27b4-480e-8c37-0f683f878616)\n\nThen, try the example prompt:\n\n* It will ask to approve tool calls.\n\n![Screenshot 2025-03-18 at 2 14 37 PM](https://github.com/user-attachments/assets/5b9a2938-ea69-4443-8d3b-09061faccad0)\n\n## Command-line Interface\n\nThe `mcpdoc` command provides a simple CLI for launching the documentation server. \n\nYou can specify documentation sources in three ways, and these can be combined:\n\n1. Using a YAML config file:\n\n* This will load the LangGraph Python documentation from the `sample_config.yaml` file in this repo.\n\n```bash\nmcpdoc --yaml sample_config.yaml\n```\n\n2. Using a JSON config file:\n\n* This will load the LangGraph Python documentation from the `sample_config.json` file in this repo.\n\n```bash\nmcpdoc --json sample_config.json\n```\n\n3. Directly specifying llms.txt URLs with optional names:\n\n* URLs can be specified either as plain URLs or with optional names using the format `name:url`.\n* This is how we loaded `llms.txt` for the MCP server above.\n\n```bash\nmcpdoc --urls LangGraph:https://langchain-ai.github.io/langgraph/llms.txt\n```\n\nYou can also combine these methods to merge documentation sources:\n\n```bash\nmcpdoc --yaml sample_config.yaml --json sample_config.json --urls https://langchain-ai.github.io/langgraph/llms.txt\n```\n\n## Additional Options\n\n- `--follow-redirects`: Follow HTTP redirects (defaults to False)\n- `--timeout SECONDS`: HTTP request timeout in seconds (defaults to 10.0)\n\nExample with additional options:\n\n```bash\nmcpdoc --yaml sample_config.yaml --follow-redirects --timeout 15\n```\n\nThis will load the LangGraph Python documentation with a 15-second timeout and follow any HTTP redirects if necessary.\n\n## Configuration Format\n\nBoth YAML and JSON configuration files should contain a list of documentation sources. \n\nEach source must include an `llms_txt` URL and can optionally include a `name`:\n\n### YAML Configuration Example (sample_config.yaml)\n\n```yaml\n# Sample configuration for mcp-mcpdoc server\n# Each entry must have a llms_txt URL and optionally a name\n- name: LangGraph Python\n  llms_txt: https://langchain-ai.github.io/langgraph/llms.txt\n```\n\n### JSON Configuration Example (sample_config.json)\n\n```json\n[\n  {\n    \"name\": \"LangGraph Python\",\n    \"llms_txt\": \"https://langchain-ai.github.io/langgraph/llms.txt\"\n  }\n]\n```\n\n## Programmatic Usage\n\n```python\nfrom mcpdoc.main import create_server\n\n# Create a server with documentation sources\nserver = create_server(\n    [\n        {\n            \"name\": \"LangGraph Python\",\n            \"llms_txt\": \"https://langchain-ai.github.io/langgraph/llms.txt\",\n        },\n        # You can add multiple documentation sources\n        # {\n        #     \"name\": \"Another Documentation\",\n        #     \"llms_txt\": \"https://example.com/llms.txt\",\n        # },\n    ],\n    follow_redirects=True,\n    timeout=15.0,\n)\n\n# Run the server\nserver.run(transport=\"stdio\")\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpdoc",
        "llms",
        "txt",
        "mcpdoc provides",
        "llms txt",
        "list llms"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tejpalvirk--contextmanager": {
      "owner": "tejpalvirk",
      "name": "contextmanager",
      "url": "https://github.com/tejpalvirk/contextmanager",
      "imageUrl": "/freedevtools/mcp/pfp/tejpalvirk.webp",
      "description": "Organize and analyze quantitative research data by tracking hypotheses, managing datasets, and documenting statistical analyses for insight generation. Facilitate context management across different research projects with a domain-specific knowledge graph.",
      "stars": 7,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-11T04:46:29Z",
      "readme_content": "# MCP Context Manager\n\nA collection of Model Context Protocol (MCP) servers to enhance AI models with persistent context across work sessions throughout the project lifecycle. \n\nContext for each project is stored in a domain-specific knowledge graph handled by the domain's server. All domain servers can be managed through a central Context Manager that provides unified access. \n\nEach domain server is also a standalone MCP Server that you can use on its own without the Context Manager.\n\n## Features\n\n- **Persistent Context**: Easily `buildcontext`, `loadcontext`, and `deletecontext` as you progress from idea to production/publication/completion\n- **Efficienct Access**: Let AI models grab the exact context they need when they need it\n- **Session Management**: \n  1. `startsession` tool to get an overview of what you've been working on in past sessions\n  2. `endsession` tool to analyze the entire session and update knowledge graph for future sessions\n- **Cross-Domain Support**: Work with multiple knowledge domains through a single interface, including creating relationships between entities in different domains\n\n## Why knowledge graphs?\n\nTo free up the context window (performance), and minimize token cost (efficiency).\n\n## Available Servers\n\nThe contextmanager orchestrates several domain-specific MCP servers:\n\n1. **Developer MCP Server**: software development context with entities like projects, components, and tasks. Includes status tracking (inactive, active, complete), priority management (high, low), and task sequencing through precedes relations.\n\n2. **Project MCP Server**: project management context with entities like projects, tasks, and resources. Features status management (inactive, active, complete), priority assignment (high, low), and task sequencing capabilities.\n\n3. **Student MCP Server**: educational context with entities like courses, assignments, and exams. Supports tracking status (active, completed, pending, abandoned), prioritizing assignments (high, low), and creating learning sequences.\n\n4. **Qualitative Research MCP Server**: qualitative research context with entities like studies, participants, and interviews. Includes research activity status tracking (active, completed, pending, abandoned), priority management (high, low), and analysis sequencing.\n\n5. **Quantitative Research MCP Server**: quantitative research context with entities like datasets, variables, and analyses. Features status management (active, completed, pending, abandoned), priority assignment (high, low), and sequential process management.\n\nFor detailed documentation on each domain server, see the README files in their respective directories:\n- [Developer Server](./developer/README.md)\n- [Project Server](./project/README.md)\n- [Student Server](./student/README.md)\n- [Qualitative Research Server](./qualitativeresearch/README.md)\n- [Quantitative Research Server](./quantitativeresearch/README.md)\n\n## Context Manager Benefits\n\nThe Context Manager provides:\n\n- **Unified Interface**: Access all domain servers through a single interface.\n- **Smart Routing**: Automatically routes requests to the appropriate domain server.\n- **Cross-Domain Context**: Maintains references across different domains.\n- **Consistent Status Management**: Standardized approach to status tracking across domains.\n- **Unified Priority System**: Consistent priority management across different contexts.\n- **Integrated Sequencing**: Harmonized approach to sequential workflows across domains.\n\n## Implementation\n\nThe Context Manager uses the MCP Client SDK to communicate with domain-specific MCP servers. It:\n\n1. Maintains a registry of domain servers with their connection information\n2. Creates MCP clients to connect to each domain server\n3. Routes requests to the appropriate domain server based on the active domain\n4. Provides cross-domain functionality for relating entities across domains\n5. Ensures consistent handling of status, priority, and sequential relations\n\n## Path Resolution\n\nThe Context Manager uses absolute paths constructed at runtime to locate domain servers. If you need to modify paths to domain servers, update the `domains` array in `main/index.ts`.\n\n## Installation & Usage\n\nYou can use the MCP Context Manager in several ways:\n\n### Using npx (Recommended)\n\nRun directly with npx:\n\n```bash\nnpx github:tejpalvirk/contextmanager\n```\n\n### Global Installation\n\nInstall globally to make all servers available as commands:\n\n```bash\nnpm install -g github:tejpalvirk/contextmanager\n```\n\nThen run:\n\n```bash\nmcp-server-contextmanager\n```\n\nOr run a specific domain server directly:\n\n```bash\ncontextmanager-developer\ncontextmanager-project\ncontextmanager-student\ncontextmanager-qualitativeresearch\ncontextmanager-quantitativeresearch\n```\n\n### Clone and Build from Source\n\nFor development or customization:\n\n```bash\ngit clone https://github.com/tejpalvirk/contextmanager.git\ncd contextmanager\nnpm install\nnpm run build\n```\n\nThen run:\n\n```bash\nnode main/index.js\n```\n\n## Command-Line Arguments\n\nThe Context Manager and domain servers accept the following command-line arguments:\n\n```bash\n# Run on a specific port (default: 3000)\nnpx github:tejpalvirk/contextmanager --port 3001\n\n# Enable debug logging\nnpx github:tejpalvirk/contextmanager --debug\n\n# Specify a config file\nnpx github:tejpalvirk/contextmanager --config ./my-config.json\n\n# Run only specific domain servers\nnpx github:tejpalvirk/contextmanager --domains developer,project\n```\n\n## Environment Variables\n\nEach domain server supports the following environment variables to customize where data is stored:\n\n- **MEMORY_FILE_PATH**: Path where the knowledge graph data will be stored\n  - Can be absolute or relative (relative paths use current working directory)\n  - Default: `<domain_directory>/memory.json`\n\n- **SESSIONS_FILE_PATH**: Path where session data will be stored\n  - Can be absolute or relative (relative paths use current working directory)\n  - Default: `<domain_directory>/sessions.json`\n\nExample usage:\n\n```bash\n# Store data in the current directory\nMEMORY_FILE_PATH=\"./my-dev-memory.json\" SESSIONS_FILE_PATH=\"./my-dev-sessions.json\" npx github:tejpalvirk/contextmanager\n\n# Store data in a specific location (absolute path)\nMEMORY_FILE_PATH=\"/path/to/data/developer-memory.json\" npx github:tejpalvirk/contextmanager\n\n# Store data in user's home directory\nMEMORY_FILE_PATH=\"$HOME/contextmanager/memory.json\" npx github:tejpalvirk/contextmanager\n```\n\n## Interacting with Domain Servers\n\n### Domain Management\n\nUse the `setActiveDomain` tool to select which domain you want to work with:\n\n```\nsetActiveDomain(domain=\"developer\")\n```\n\n### Session Management\n\nStart a new session for the active domain:\n\n```\nstartsession(domain=\"developer\")\n```\n\nEnd a session when you're done:\n\n```\nendsession(sessionId=\"session_id_here\", stage=\"assembly\", stageNumber=6, totalStages=6, nextStageNeeded=false)\n```\n\n### Context Operations\n\nBuild context for the active domain:\n\n```\nbuildcontext(type=\"entities\", data={...})\n```\n\nLoad context for a specific entity:\n\n```\nloadcontext(entityName=\"MyProject\", entityType=\"project\")\n```\n\nDelete context:\n\n```\ndeletecontext(type=\"entities\", data={...})\n```\n\n### Entity Status and Priority Management\n\nAssign status to entities:\n\n```\nbuildcontext(type=\"relations\", data=[\n  { from: \"LoginFeature\", to: \"active\", relationType: \"has_status\" }\n])\n```\n\nSet entity priorities:\n\n```\nbuildcontext(type=\"relations\", data=[\n  { from: \"BugFix\", to: \"high\", relationType: \"has_priority\" }\n])\n```\n\nDefine sequential relationships:\n\n```\nbuildcontext(type=\"relations\", data=[\n  { from: \"DataModel\", to: \"UserInterface\", relationType: \"precedes\" }\n])\n```\n\n### Example: Working with the Developer Domain\n\n```javascript\n// Set the active domain to developer\nsetActiveDomain(domain=\"developer\")\n\n// Start a new session\nstartsession(domain=\"developer\")\n\n// Create a new project entity\nbuildcontext(type=\"entities\", data={\n  \"entityType\": \"project\",\n  \"name\": \"MyProject\",\n  \"description\": \"A sample project\",\n  \"language\": \"TypeScript\",\n  \"framework\": \"React\"\n})\n\n// Load context for the project\nloadcontext(entityName=\"MyProject\", entityType=\"project\")\n\n// Create a component for the project and set its status to active\nbuildcontext(type=\"entities\", data={\n  \"entityType\": \"component\",\n  \"name\": \"AuthService\",\n  \"project\": \"MyProject\",\n  \"description\": \"Authentication service component\",\n  \"dependencies\": [\"UserService\"]\n})\n\nbuildcontext(type=\"relations\", data=[\n  { from: \"AuthService\", to: \"active\", relationType: \"has_status\" },\n  { from: \"AuthService\", to: \"high\", relationType: \"has_priority\" }\n])\n```\n\n### Cross-Domain Operations\n\nCreate relationships between entities in different domains:\n\n```\nrelateCrossDomain(fromDomain=\"developer\", fromEntity=\"ProjectX\", toDomain=\"project\", toEntity=\"ProjectX\", relationType=\"manages\")\n```\n\n### Example: Cross-Domain Integration\n\n```javascript\n// Create relationship between developer project and project management task\nrelateCrossDomain(\n  fromDomain=\"developer\", \n  fromEntity=\"MyProject\", \n  toDomain=\"project\", \n  toEntity=\"ProjectX\", \n  relationType=\"manages\"\n)\n```\n\n## Integration with Claude\n\nIn Claude Desktop, configure the Context Manager in settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"contextmanager\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"github:tejpalvirk/contextmanager\"\n      ],\n      \"options\": {\n        \"port\": 3000,\n        \"domains\": [\"developer\", \"project\", \"student\"]\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Port Already in Use**:\n   ```\n   Error: listen EADDRINUSE: address already in use :::3000\n   ```\n   Solution: Use the `--port` option to specify a different port.\n\n2. **Connection Refused**:\n   ```\n   Error: connect ECONNREFUSED 127.0.0.1:3000\n   ```\n   Solution: Ensure the server is running and accessible at the specified address.\n\n3. **Domain Server Not Found**:\n   ```\n   Error: Domain server 'developer' not found\n   ```\n   Solution: Check that the domain name is correct and the server is registered in the Context Manager.\n\n4. **Path Resolution Errors**:\n   ```\n   Error: Cannot find module '...'\n   ```\n   Solution: Ensure all paths in the `domains` array in `main/index.ts` are correctly specified.\n\n5. **Method Not Found**:\n   ```\n   Error: Method 'buildcontext' not found in domain 'developer'\n   ```\n   Solution: Verify the method name and ensure it is supported by the domain server.\n\n6. **Invalid Status or Priority Value**:\n   ```\n   Error: Invalid status value 'in_progress'. Valid values are: inactive, active, complete\n   ```\n   Solution: Ensure you're using the correct status values for the specific domain.\n\n## Next Steps\n- Replace JSON for YAML for 20-30% improvement in token efficiency\n- Explore Knowledge Graphs in Markdown\n\n## Versioning\n\nThis package follows [Semantic Versioning](https://semver.org/):\n\n- **MAJOR**: Incompatible API changes\n- **MINOR**: Backwards-compatible functionality additions\n- **PATCH**: Backwards-compatible bug fixes\n\nCurrent version: 1.0.0\n\n## Contributing\n\nContributions are welcome! Please follow these steps:\n\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n### Coding Standards\n\n- Use TypeScript for all new code\n- Follow the existing code style\n- Add tests for new functionality\n- Update documentation as needed\n\n## Development\n\n### Prerequisites\n\n- Node.js v16 or higher\n- npm v7 or higher\n\n### Building\n\n```bash\nnpm install\nnpm run build\n```\n\n### Testing\n\n```bash\nnpm test\n```\n\n## License\n\nMIT\n\n## Acknowledgments\n\nThis project builds on the Model Context Protocol created by Anthropic for Claude. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "contextmanager",
        "research",
        "knowledge",
        "context management",
        "tejpalvirk contextmanager",
        "insight generation"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tengfone--supabase-nextjs-mcp-server": {
      "owner": "tengfone",
      "name": "supabase-nextjs-mcp-server",
      "url": "https://github.com/tengfone/supabase-nextjs-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/tengfone.webp",
      "description": "Create, manage, and summarize notes using a Supabase backend. This TypeScript-based MCP server offers resources for text notes, tools for creating new notes, and prompts for generating summaries.",
      "stars": 5,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-09T14:28:45Z",
      "readme_content": "# supabase-nextjs-server MCP Server\n[![smithery badge](https://smithery.ai/badge/@tengfone/supabase-nextjs-mcp-server)](https://smithery.ai/server/@tengfone/supabase-nextjs-mcp-server)\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system for NextJS. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n<a href=\"https://glama.ai/mcp/servers/9i4b9xiqrc\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/9i4b9xiqrc/badge\" alt=\"Supabase NextJS Server MCP server\" /></a>\n\n## Features\n\n### Init\n- Require `NEXT_PUBLIC_SUPABASE_URL` and `NEXT_PUBLIC_SUPABASE_ANON_KEY` environment variables\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"supabase-nextjs-server\": {\n      \"command\": \"/path/to/supabase-nextjs-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install Supabase Notes for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@tengfone/supabase-nextjs-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @tengfone/supabase-nextjs-mcp-server --client claude\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "supabase",
        "notes",
        "typescript",
        "supabase nextjs",
        "supabase backend",
        "tengfone supabase"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tjl-with-code--Go-Interview": {
      "owner": "tjl-with-code",
      "name": "Go-Interview",
      "url": "https://github.com/tjl-with-code/Go-Interview",
      "imageUrl": "/freedevtools/mcp/pfp/tjl-with-code.webp",
      "description": "Curates a collection of Go programming interview questions and study materials, providing resources on Go basics, concurrency, MySQL, networking, operating systems, and Redis for learners preparing for job interviews.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-03-28T13:01:00Z",
      "readme_content": "# Go-Interview\n项目整合：\n\n​\t[地鼠文档 (topgoer.cn)](https://topgoer.cn/)\n\n​\t[lifei6671/interview-go: golang面试题集合 (github.com)](https://github.com/lifei6671/interview-go)\n\n​\t[cosen1024/Java-Interview: Java面试小抄(github.com)](https://github.com/cosen1024/Java-Interview)\n\n​\t[代码随想录 (programmercarl.com)](https://www.programmercarl.com/)\n\n​\t[极客兔兔 (geektutu.com)](https://geektutu.com/)\n\n特此申明：\n\n​\tGo初学者，为了未来的求职和更专注学习，所以特此整理以上资料。当然可能在收集过程中遗漏了参考资料。若有问题，请及时联系！\n\n​\t喜欢的话，fork、star，一起学习Go，在大佬的资料下，争取做一个基础和进阶的开源好项目，帮助我们一起学习！\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t一个Go学习者\n\n​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t2022年2月14号\n\n<details>\n\n#### 2022-3-17\n\n整理一个月左右，梳理网上的大多数Go基础、并发、Mysql、网络、操作系统、Redis的知识。剔除一些其他仓库里的高阶知识。只是为了学生步入职场，打牢基础！\n\n\n\n### 2022-3-18\n\n梳理和完善：\n\ngo基础——3.Go基础类：9-38题的解答注释，涉及slice、map、channel、goroutine等。\n\n第一次上传到GitHub、Gitee，希望遇到一起努力前行的人！\n\n\n\n### 2022-3-19\n\n梳理：\n\nGo基础：4.Go基础应用，几种有设计几种测试框架，现在也只知道其名字，具体功能不清楚。\n\nGo并发：1.Go并发基础【梳理部分】\n</details>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tjl",
        "interviews",
        "interview",
        "tjl code",
        "programming interview",
        "code interview"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "truaxki--mcp-notes": {
      "owner": "truaxki",
      "name": "mcp-notes",
      "url": "https://github.com/truaxki/mcp-notes",
      "imageUrl": "/freedevtools/mcp/pfp/truaxki.webp",
      "description": "Manage notes with persistent storage and access through URI. Supports create, read, update, and delete operations, along with note summarization and timestamp tracking.",
      "stars": 7,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-14T08:24:23Z",
      "readme_content": "# MCP Notes Server\n[![smithery badge](https://smithery.ai/badge/notes)](https://smithery.ai/server/notes)\n\nA Model Context Protocol (MCP) server implementation for managing notes with persistent storage.\n\n<a href=\"https://glama.ai/mcp/servers/tg4ugmp8jr\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/tg4ugmp8jr/badge\" alt=\"Notes Server MCP server\" /></a>\n\n## Features\n\n- Create, read, update, and delete notes\n- Persistent storage using JSON\n- Timestamp tracking for creation and modifications\n- Note summarization via prompts\n- Resource-based access using note:// URI scheme\n\n## Installation\n\n### Installing via Smithery\n\nTo install notes for Claude Desktop automatically via [Smithery](https://smithery.ai/server/notes):\n\n```bash\nnpx -y @smithery/cli install notes --client claude\n```\n\n### Manual Installation\n1. Ensure you have Python 3.10 or later installed\n2. Create a virtual environment:\n   ```bash\n   python -m venv .venv\n   \n   # On Unix/MacOS:\n   source .venv/bin/activate\n   \n   # On Windows:\n   .venv\\Scripts\\activate\n   ```\n3. Install requirements:\n   ```bash\n   pip install MCP\n   ```\n\n## Project Structure\n\n```\nnotes/\n├── __init__.py          # Package initialization\n├── server.py           # Main server implementation\n├── storage.py          # Note persistence layer\n├── resources.py        # Resource handling (note:// URIs)\n├── prompts.py         # LLM prompt generation\n└── tools/             # Server tools\n    ├── __init__.py    # Tools package initialization\n    ├── list_tools.py  # Tool listing functionality\n    └── handle_tools.py # Tool handling implementation\n```\n\n## Available Tools\n\n- `add-note`: Create a new note\n- `list-all-notes`: Display all stored notes\n- `update-note`: Modify an existing note\n- `delete-note`: Remove a note\n\n## Usage\n\n1. Start the server:\n   ```bash\n   mcp install src/notes\n   mcp start Notes\n   ```\n\n2. Example operations:\n   ```python\n   # Create a note\n   await client.call_tool(\"add-note\", {\n       \"name\": \"example\",\n       \"content\": \"This is a test note\"\n   })\n\n   # List all notes\n   await client.call_tool(\"list-all-notes\")\n\n   # Update a note\n   await client.call_tool(\"update-note\", {\n       \"name\": \"example\",\n       \"content\": \"Updated content\"\n   })\n\n   # Delete a note\n   await client.call_tool(\"delete-note\", {\n       \"name\": \"example\"\n   })\n   ```\n\n## Storage\n\nNotes are stored in `notes_storage.json` with the following structure:\n```json\n{\n    \"note_name\": {\n        \"content\": \"Note content\",\n        \"created_at\": \"2025-01-12T11:28:16.721704\",\n        \"modified_at\": \"2025-01-12T11:28:16.721704\"\n    }\n}\n```\n\n## Resource Access\n\nNotes can be accessed as resources using the `note://` URI scheme:\n- List resources: Returns all available notes as resources\n- Read resource: Access a specific note using `note://internal/note_name`\n\n## Prompt Generation\n\nThe server includes a prompt generation feature for note summarization:\n- Supports both brief and detailed summaries\n- Formats notes for language model input\n- Available via the \"summarize-notes\" prompt\n\n## Development\n\nTo modify or extend the server:\n1. Clone the repository\n2. Install development dependencies\n3. Make changes in the appropriate module\n4. Test thoroughly before deploying\n\n## Testing\n\nTests should cover:\n- Basic CRUD operations\n- Multiple note handling\n- Error cases\n- Resource access\n- Prompt generation\n\n## License\n\n[Add your license here]\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "truaxki",
        "notes manage",
        "manage notes",
        "notes persistent"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "tuncer-byte--memory-bank-MCP": {
      "owner": "tuncer-byte",
      "name": "memory-bank-MCP",
      "url": "https://github.com/tuncer-byte/memory-bank-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/tuncer-byte.webp",
      "description": "Create and manage structured project documentation with AI assistance, generating interconnected Markdown files that capture project knowledge from goals to progress. It supports context-aware querying for efficient searching and exporting of project information.",
      "stars": 100,
      "forks": 17,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-27T09:34:41Z",
      "readme_content": "# Memory Bank MCP\n\n<div align=\"center\">\n  <img src=\"https://github.com/tuncer-byte/byte/blob/main/media/icons/icon-white.png\" height=\"128\">\n  <h1>Memory Bank MCP</h1>\n  <p>\n    <b>Structured project knowledge management for LLMs via Model Context Protocol (MCP)</b>\n  </p>\n</div>\n\n<a href=\"https://glama.ai/mcp/servers/@tuncer-byte/memory-bank-MCP\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@tuncer-byte/memory-bank-MCP/badge\" alt=\"Memory Bank MCP server\" />\n</a>\n\n---\n\n> **Note:** This is not a traditional Node.js application. Memory Bank MCP is an **MCP server**—a component in the [Model Context Protocol](https://modelcontextprotocol.io/introduction) ecosystem. It exposes project knowledge to LLM-powered agents and tools using a standardized protocol, enabling seamless integration with AI clients (e.g., Claude Desktop, IDEs, or custom LLM agents).\n\n---\n\n## What is Model Context Protocol (MCP)?\n\nMCP is an open protocol that standardizes how applications provide context to LLMs. Think of MCP like a USB-C port for AI: it provides a universal way to connect AI models to data sources and tools, both locally and remotely. MCP enables:\n\n- **Plug-and-play integrations** between LLMs, data, and tools\n- **Switching between LLM providers** with minimal friction\n- **Secure, modular architecture** for building AI workflows\n\nLearn more: [MCP Introduction](https://modelcontextprotocol.io/introduction)\n\n## About Memory Bank MCP\n\nMemory Bank MCP is an **MCP server** that helps teams create, manage, and access structured project documentation. It generates and maintains interconnected Markdown documents capturing all aspects of project knowledge, from high-level goals to technical details and daily progress. It is designed to be accessed by MCP-compatible clients and LLM agents.\n\n## Features\n\n- **AI-Generated Documentation**: Uses Gemini API to generate and update project documentation\n- **Structured Knowledge System**: Maintains six core document types in a hierarchical structure\n- **MCP Server**: Implements the Model Context Protocol for integration with LLM agents and tools\n- **Customizable Storage**: Choose where your Memory Bank directory is created\n- **Document Templates**: Pre-defined templates for project brief, product context, system patterns, etc.\n- **AI-Assisted Updates**: Update documents manually or regenerate them with AI\n- **Advanced Querying**: Search across all documents with context-aware relevance ranking\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/tuncer-byte/memory-bank-mcp.git\ncd memory-bank-mcp\n\n# Install dependencies\nnpm install\n\n# (Optional) Create .env file with your Gemini API key\necho \"GEMINI_API_KEY=your_api_key_here\" > .env\n```\n\n## Usage\n\n> **Note:** Memory Bank MCP is intended to be run as an MCP server, not as a standalone app. You typically launch it as part of an MCP workflow, and connect to it from an MCP-compatible client (such as Claude Desktop or your own LLM agent).\n\n### Development Mode\n\n```bash\nnpm run dev\n```\n\n### Production Mode\n\n```bash\nnpm run build\nnpm run start\n```\n\n### MCP Integration\n\nTo connect Memory Bank MCP to your MCP client, add the following to your `mcp.json` configuration:\n\n```json\n{\n  \"memoryBank\": {\n    \"command\": \"node\",\n    \"args\": [\"/path/to/memory-bank-mcp/dist/index.js\"],\n    \"env\": {\n      \"GEMINI_API_KEY\": \"your_gemini_api_key_here\"\n    }\n  }\n}\n```\n\nReplace `/path/to/memory-bank-mcp/dist/index.js` with the absolute path to your built file, and add your Gemini API key if needed.\n\n---\n\n## MCP Tools Exposed by Memory Bank\n\nMemory Bank MCP provides the following tools via the Model Context Protocol:\n\n### `initialize_memory_bank`\n\nCreates a new Memory Bank structure with all document templates.\n\n**Parameters:**\n- `goal` (string): Project goal description (min 10 characters)\n- `geminiApiKey` (string, optional): Gemini API key for document generation\n- `location` (string, optional): Absolute path where memory-bank folder will be created\n\n**Example:**\n```javascript\nawait callTool({\n  name: \"initialize_memory_bank\",\n  arguments: {\n    goal: \"Building a self-documenting AI-powered software development assistant\",\n    location: \"/Users/username/Documents/projects/ai-assistant\"\n  }\n});\n```\n\n### `update_document`\n\nUpdates a specific document in the Memory Bank.\n\n**Parameters:**\n- `documentType` (enum): One of: `projectbrief`, `productContext`, `systemPatterns`, `techContext`, `activeContext`, `progress`\n- `content` (string, optional): New content for the document\n- `regenerate` (boolean, default: false): Whether to regenerate the document using AI\n\n**Example:**\n```javascript\nawait callTool({\n  name: \"update_document\",\n  arguments: {\n    documentType: \"projectbrief\",\n    content: \"# Project Brief\\n\\n## Purpose\\nTo develop an advanced and user-friendly AI...\"\n  }\n});\n```\n\n### `query_memory_bank`\n\nSearches across all documents with context-aware relevance ranking.\n\n**Parameters:**\n- `query` (string): Search query (min 5 characters)\n\n**Example:**\n```javascript\nawait callTool({\n  name: \"query_memory_bank\",\n  arguments: {\n    query: \"system architecture components\"\n  }\n});\n```\n\n### `export_memory_bank`\n\nExports all Memory Bank documents.\n\n**Parameters:**\n- `format` (enum, default: \"folder\"): Export format, either \"json\" or \"folder\"\n- `outputPath` (string, optional): Custom output path for the export\n\n**Example:**\n```javascript\nawait callTool({\n  name: \"export_memory_bank\",\n  arguments: {\n    format: \"json\",\n    outputPath: \"/Users/username/Documents/exports\"\n  }\n});\n```\n\n## Document Types\n\nMemory Bank organizes project knowledge into six core document types:\n\n1. **Project Brief** (`projectbrief.md`): Core document defining project objectives, scope, and vision\n2. **Product Context** (`productContext.md`): Documents product functionality from a user perspective\n3. **System Patterns** (`systemPatterns.md`): Establishes system architecture and component relationships\n4. **Tech Context** (`techContext.md`): Specifies technology stack and implementation details\n5. **Active Context** (`activeContext.md`): Tracks current tasks, open issues, and development focus\n6. **Progress** (`progress.md`): Documents completed work, milestones, and project history\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documentation",
        "notetaking",
        "markdown",
        "project documentation",
        "documentation ai",
        "structured project"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "v-3--notion-server": {
      "owner": "v-3",
      "name": "notion-server",
      "url": "https://github.com/v-3/notion-server",
      "imageUrl": "/freedevtools/mcp/pfp/v-3.webp",
      "description": "Integrate with Notion to perform operations such as searching, creating, reading, updating pages, and managing comments and blocks within your workspace.",
      "stars": 116,
      "forks": 30,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T10:52:34Z",
      "readme_content": "# Notion MCP Server\n\nA Model Context Protocol (MCP) server that provides seamless integration with Notion. This server enables Language Models to interact with your Notion workspace through standardized tools for searching, reading, creating, and updating pages and databases.\n\n## 🌟 Key Features\n\n### Page Operations\n- 🔍 Search through your Notion workspace\n- 📝 Create new pages with rich markdown content\n- 📖 Read page content with clean formatting\n- 🔄 Update existing pages\n- 💬 Add and retrieve comments\n- 🧱 Block-level operations (update, delete)\n\n### Enhanced Markdown Support\n- Multiple heading levels (H1-H3)\n- Code blocks with language support\n- Interactive todo items with checkbox states\n- Blockquotes with multi-line support\n- Horizontal dividers\n- Images with captions\n- Nested bullet points\n\n### Database Operations\n- Create and manage databases\n- Add and update database items\n- Query with filters and sorting\n- Support for various property types:\n  - Title, Rich text, Number\n  - Select, Multi-select\n  - Date, Checkbox\n  - And more!\n\n## 🚀 Getting Started\n\n### Prerequisites\n- Node.js (v16 or higher)\n- Notion API key\n- MCP-compatible client (e.g., Claude Desktop)\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/v-3/notion-server.git\ncd notion-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Set up your environment:\n```bash\n# Create .env file\necho \"NOTION_API_KEY=your_notion_api_key_here\" > .env\n\n# Or export directly\nexport NOTION_API_KEY=your_notion_api_key_here\n```\n\n4. Build the server:\n```bash\nnpm run build\n```\n\n## 🔧 Configuration\n\n### Claude Desktop Setup\n\n1. Update your Claude Desktop configuration (`claude_desktop_config.json`):\n```json\n{\n    \"mcpServers\": {\n        \"notion\": {\n            \"command\": \"node\",\n            \"args\": [\"/absolute/path/to/notion-server/build/index.js\"],\n            \"env\": {\n                \"NOTION_API_KEY\": \"your_notion_api_key_here\"\n            }\n        }\n    }\n}\n```\n\n2. Restart Claude Desktop to apply changes\n\n## 🛠️ Available Tools\n\n### Page Operations\n```typescript\n// Search pages\n{\n    query: string // Search query\n}\n\n// Read page\n{\n    pageId: string // ID of the page to read\n}\n\n// Create page\n{\n    title?: string,      // Page title\n    content?: string,    // Page content in markdown\n    parentPageId: string // Parent page ID\n    properties?: object  // For database items\n}\n\n// Update page\n{\n    pageId: string,   // Page ID to update\n    content: string,  // New content\n    type?: string    // Content type\n}\n```\n\n### Database Operations\n```typescript\n// Create database\n{\n    parentPageId: string,\n    title: string,\n    properties: object\n}\n\n// Query database\n{\n    databaseId: string,\n    filter?: object,\n    sort?: object\n}\n```\n\n## 🔐 Setting Up Notion Access\n\n### Creating an Integration\n1. Visit [Notion Integrations](https://www.notion.so/my-integrations)\n2. Click \"New integration\"\n3. Configure permissions:\n   - Content: Read, Update, Insert\n   - Comments: Read, Create\n   - User Information: Read\n\n### Connecting Pages\n1. Open your Notion page\n2. Click \"...\" menu → \"Connections\"\n3. Add your integration\n4. Repeat for other pages as needed\n\n## 📝 Usage Examples\n\n### Creating a Page\n```typescript\nconst result = await notion.create_page({\n  parentPageId: \"page_id\",\n  title: \"My Page\",\n  content: \"# Welcome\\nThis is a test page.\"\n});\n```\n\n### Querying a Database\n```typescript\nconst result = await notion.query_database({\n  databaseId: \"db_id\",\n  filter: {\n    property: \"Status\",\n    select: {\n      equals: \"In Progress\"\n    }\n  }\n});\n```\n\n## 🤝 Contributing\n\nContributions are welcome! Please:\n1. Fork the repository\n2. Create a feature branch\n3. Submit a Pull Request\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Acknowledgments\n\nThis project has been significantly improved by [sweir1/notion-server](https://github.com/sweir1/notion-server), who has made following updates:\n- Enhanced markdown support with more block types\n- Comprehensive database operations\n- Improved error handling and debugging\n- Better property handling for database items\n- Cleaner page output formatting\n\nTo use sweir1's version, you can clone their repository:\n```bash\ngit clone https://github.com/sweir1/notion-server.git\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notion",
        "managing",
        "notion server",
        "notetaking knowledge",
        "notion perform"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "vivalalova--mcp_practice": {
      "owner": "vivalalova",
      "name": "mcp_practice",
      "url": "https://github.com/vivalalova/mcp_practice",
      "imageUrl": "/freedevtools/mcp/pfp/vivalalova.webp",
      "description": "Create and manage text notes with a simple interface, providing resources for accessing notes, tools for adding new notes, and functionality to generate summaries of the notes.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-02-21T02:33:53Z",
      "readme_content": "# my-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"my-server\": {\n      \"command\": \"/path/to/my-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "vivalalova",
        "notes tools",
        "notes functionality",
        "text notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "wavelovey--pubmed_search": {
      "owner": "wavelovey",
      "name": "pubmed_search",
      "url": "https://github.com/wavelovey/pubmed_search",
      "imageUrl": "/freedevtools/mcp/pfp/wavelovey.webp",
      "description": "Search and summarize notes stored in a custom note storage system, utilizing a unique URI scheme for accessing individual notes.",
      "stars": 36,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T19:59:17Z",
      "readme_content": "# pubmed_search MCP server\n\nsearch pubmed via MCP\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements one tool:\n- add-note: Adds a new note to the server\n  - Takes \"name\" and \"content\" as required string arguments\n  - Updates server state and notifies clients of resource changes\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"pubmed_search\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/nofuture/Documents/GitHub/pubmed_search\",\n        \"run\",\n        \"pubmed_search\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"pubmed_search\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"pubmed_search\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/nofuture/Documents/GitHub/pubmed_search run pubmed-search\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pubmed_search",
        "notetaking",
        "notes",
        "wavelovey pubmed_search",
        "notes stored",
        "individual notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "williamvd4--playwright-plus-python-mcp": {
      "owner": "williamvd4",
      "name": "playwright-plus-python-mcp",
      "url": "https://github.com/williamvd4/playwright-plus-python-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/williamvd4.webp",
      "description": "Leverage browser automation tools for web navigation, interaction, and content capture. Provides a note storage system with a custom URI scheme and allows for summarizing notes with an adjustable detail level.",
      "stars": 1,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-03T20:04:09Z",
      "readme_content": "# playwright-server MCP server\n\n\\A MCP server with playwright tools\\\n\n<a href=\"https://glama.ai/mcp/servers/c50bsocgzb\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/c50bsocgzb/badge\" alt=\"Playwright Server MCP server\" /></a>\n<a href=\"https://smithery.ai/server/@williamvd4/playwright-plus-python-mcp\"><img alt=\"Smithery Badge\" src=\"https://smithery.ai/badge/@williamvd4/playwright-plus-python-mcp\"></a>\n\n## Components\n\n### Resources\n\nThe server implements a simple note storage system with:\n- Custom note:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Prompts\n\nThe server provides a single prompt:\n- summarize-notes: Creates summaries of all stored notes\n  - Optional \"style\" argument to control detail level (brief/detailed)\n  - Generates prompt combining all current notes with style preference\n\n### Tools\n\nThe server implements the following tools:\n- `playwright_navigate`: Navigates to a specified URL. This operation will automatically create a new session if there is no active session.\n  - Requires a `url` argument (string).\n- `playwright_screenshot`: Takes a screenshot of the current page or a specific element.\n  - Requires a `name` argument (string) for the screenshot file name.\n  - Optional `selector` argument (string) to specify a CSS selector for the element to screenshot. If no selector is provided, a full-page screenshot is taken.\n- `playwright_click`: Clicks an element on the page using a CSS selector.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element to click.\n- `playwright_fill`: Fills out an input field.\n  - Requires a `selector` argument (string) to specify the CSS selector for the input field.\n  - Requires a `value` argument (string) to specify the value to fill.\n- `playwright_evaluate`: Executes JavaScript code in the browser console.\n  - Requires a `script` argument (string) to specify the JavaScript code to execute.\n- `playwright_click_text`: Clicks an element on the page by its text content.\n  - Requires a `text` argument (string) to specify the text content of the element to click.\n- `playwright_get_text_content`: Get the text content of all visiable elements.\n- `playwright_get_html_content`: Get the HTML content of the page.\n  - Requires a `selector` argument (string) to specify the CSS selector for the element.\n\n## Configuration\n\n[TODO: Add configuration details specific to your implementation]\n\n## Quickstart\n\n### Install\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Users\\xxxxx\\Documents\\project\\python\\mcp\\playwright-server\",\n        \"run\",\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"playwright-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"playwright-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Users\\YUNYING\\Documents\\project\\python\\mcp\\playwright-server run playwright-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "python",
        "notetaking knowledge",
        "summarizing notes",
        "note storage"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "win4r--browser-use-MCP-Server": {
      "owner": "win4r",
      "name": "browser-use-MCP-Server",
      "url": "https://github.com/win4r/browser-use-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/win4r.webp",
      "description": "Manage and generate text notes through accessible URIs, create new notes with titles and content, and produce summaries of all stored notes.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-02T10:03:47Z",
      "readme_content": "# browser-use MCP Server\n\n### 🔥对应视频： https://youtu.be/jsd8TpzicRQ\n### 🔥我的微信：stoeng\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"browser-use\": {\n      \"command\": \"/path/to/browser-use/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "win4r",
        "stored notes",
        "text notes",
        "notes accessible"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "worldnine--scrapbox-cosense-mcp": {
      "owner": "worldnine",
      "name": "scrapbox-cosense-mcp",
      "url": "https://github.com/worldnine/scrapbox-cosense-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/worldnine.webp",
      "description": "Access and interact with Scrapbox project pages, facilitating content retrieval, page listing, and full-text searching across project content.",
      "stars": 31,
      "forks": 8,
      "license": "MIT License",
      "language": "HTML",
      "updated_at": "2025-09-01T23:47:39Z",
      "readme_content": "# scrapbox-cosense-mcp\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/worldnine-scrapbox-cosense-mcp-badge.png)](https://mseep.ai/app/worldnine-scrapbox-cosense-mcp)\n\n<a href=\"https://glama.ai/mcp/servers/8huixkwpe2\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/8huixkwpe2/badge\" alt=\"Scrapbox Cosense Server MCP server\" /></a>\n\n\n[English](#english) | [日本語](#日本語)\n\n## English\n\nMCP server for [cosense/scrapbox](https://cosen.se).\n\n### Features\n\n- `get_page`\n  - Get page content from cosense/Scrapbox\n    - Input: Page title, optional project name\n    - Output: Page content, metadata, links, and editor information\n- `list_pages`\n  - Browse and list pages with flexible sorting and pagination\n    - Purpose: Discover pages by recency, popularity, or alphabetically\n    - Input: Sorting options, pagination, optional project name\n    - Output: Page metadata and first 5 lines of content\n    - Max: 1000 pages per request\n    - Sorting: updated, created, accessed, linked, views, title\n- `search_pages`\n  - Search for content within pages using keywords or phrases\n    - Purpose: Find pages containing specific keywords or phrases\n    - Input: Search query, optional project name\n    - Output: Matching pages with highlighted search terms and content snippets\n    - Max: 100 results (API limitation)\n    - Supports: basic search, AND search, exclude search, exact phrases\n- `create_page`\n  - Create a new page in the project with WebSocket API\n    - Input: Page title, optional markdown body text, optional project name, optional createActually flag\n    - Output: Creates the page immediately and returns success confirmation with URL\n    - Note: Markdown content is converted to Scrapbox format\n    - Feature: Automatically converts numbered lists to bullet lists (configurable)\n    - Authentication: Requires COSENSE_SID for actual page creation\n- `get_page_url`\n  - Generate URL for a page in the project\n    - Input: Page title, optional project name\n    - Output: Direct URL to the specified page\n- `insert_lines`\n  - Insert text after a specified line in a page\n    - Input: Page title, target line text, text to insert, optional project name\n    - Output: Success message with insertion details\n    - Behavior: If target line not found, text is appended to the end of the page\n\n### Installation\n\n```bash\ngit clone https://github.com/worldnine/scrapbox-cosense-mcp.git\ncd scrapbox-cosense-mcp\nnpm install\nnpm run build\n```\n\n### Basic Setup\n\nTo use with Claude Desktop, add the server configuration as follows:\n\nFor MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nFor Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n**Single Project Configuration:**\n```json\n{\n  \"mcpServers\": {\n    \"scrapbox-cosense-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:worldnine/scrapbox-cosense-mcp\"],\n      \"env\": {\n        \"COSENSE_PROJECT_NAME\": \"your_project_name\",\n        \"COSENSE_SID\": \"your_sid\", // Required for private projects\n        \"COSENSE_PAGE_LIMIT\": \"25\", // Optional (default: 100)\n        \"COSENSE_SORT_METHOD\": \"created\", // Optional (default: \"updated\")\n        \"SERVICE_LABEL\": \"scrapbox(cosense)\" // Optional (default: \"cosense(scrapbox)\")\n      }\n    }\n  }\n}\n```\n\n### Usage Examples\n\nOnce configured, you can use the tools in Claude:\n\n```\n# Get a specific page\nPlease get the content of page \"Meeting Notes\" using get_page.\n\n# List recent pages  \nPlease list the 10 most recently updated pages using list_pages.\n\n# Search for content\nPlease search for pages containing \"JavaScript tutorial\" using search_pages.\n\n# Create a new page\nPlease create a new page titled \"Today's Learning\" using create_page.\n\n# Get page URL\nPlease get the URL for page \"Project Plan\" using get_page_url.\n```\n\n### Environment Variables\n\nThis server uses the following environment variables:\n\n#### Required Environment Variables\n\n- `COSENSE_PROJECT_NAME`: Project name\n- `COSENSE_SID`: Session ID for Scrapbox/Cosense authentication (required for private projects) - [See how to get this cookie](#how-to-get-cosense_sid-cookie)\n\n#### Optional Environment Variables\n\n- `API_DOMAIN`: API domain (default: \"scrapbox.io\")\n- `SERVICE_LABEL`: Service identifier (default: \"cosense (scrapbox)\")\n- `COSENSE_PAGE_LIMIT`: Initial page fetch limit (1-1000, default: 100)\n- `COSENSE_SORT_METHOD`: Initial page fetch order (updated/created/accessed/linked/views/title, default: updated)\n- `COSENSE_TOOL_SUFFIX`: Tool name suffix for multiple server instances (e.g., \"main\" creates \"get_page_main\")\n- `COSENSE_CONVERT_NUMBERED_LISTS`: Convert numbered lists to bullet lists in Markdown (true/false, default: false)\n\n#### Environment Variable Behavior\n\n- **COSENSE_PROJECT_NAME**: Required environment variable. Server will exit with an error if not set.\n- **COSENSE_SID**: Required for accessing private projects. If not set, only public projects are accessible. [See detailed instructions](#how-to-get-cosense_sid-cookie) for obtaining this cookie.\n- **API_DOMAIN**:\n  - Uses \"scrapbox.io\" if not set\n  - While unverified with domains other than \"scrapbox.io\" in the author's environment, this option exists in case some environments require \"cosen.se\"\n- **COSENSE_PAGE_LIMIT**:\n  - Uses 100 if not set\n  - Uses 100 if value is invalid (non-numeric or out of range)\n  - Valid range: 1-1000\n- **COSENSE_SORT_METHOD**:\n  - Uses 'updated' if not set\n  - Uses 'updated' if value is invalid\n  - Does not affect list_pages tool behavior (only used for initial resource fetch)\n\n### How to Get COSENSE_SID Cookie\n\nFor accessing private Scrapbox projects, you need to obtain the `connect.sid` cookie from your browser. Follow these steps:\n\n1. **Navigate to your Scrapbox project**\n   - Open your browser and go to `https://scrapbox.io/YOUR_PROJECT_NAME`\n   - Replace `YOUR_PROJECT_NAME` with your actual project name\n\n2. **Log in to Scrapbox**\n   - Make sure you're logged in to your Scrapbox account\n   - Verify you can access your private project\n\n3. **Open Developer Tools**\n   - **Windows/Linux**: Press `F12` or `Ctrl+Shift+I`\n   - **macOS**: Press `Cmd+Option+I`\n   - **Alternative**: Right-click on the page and select \"Inspect\" or \"Inspect Element\"\n\n4. **Navigate to Cookies**\n   - In the Developer Tools, look for the **\"Application\"** tab (Chrome/Edge) or **\"Storage\"** tab (Firefox)\n   - In the left sidebar, expand **\"Cookies\"**\n   - Click on `https://scrapbox.io`\n\n5. **Find and copy the connect.sid cookie**\n   - Look for a cookie named `connect.sid`\n   - Click on it to see its value\n   - **Important**: The browser displays the URL-encoded value, but you need to use the **decoded** value\n   - Browser shows: `s%3Axxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\n   - You should use: `s:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx` (note the `:` after `s`)\n\n6. **Set the environment variable**\n   - Use the **decoded** value (with `:` instead of `%3A`) as your `COSENSE_SID` environment variable\n   - **Correct format**: `COSENSE_SID=s:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\n   - **Incorrect format**: `COSENSE_SID=s%3Axxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\n\n**Important Notes:**\n- Keep your `connect.sid` cookie value secure and never share it publicly\n- The cookie may expire after some time; you'll need to obtain a new one if authentication fails\n- This cookie provides access to your private projects, so treat it like a password\n\n### Multiple Project Support (Advanced)\n\n#### Method 1: Single Server with Optional Parameters\n\nAll tools support an optional `projectName` parameter to target different projects from a single server:\n\n- **Default behavior**: Uses `COSENSE_PROJECT_NAME` environment variable when no project is specified\n- **Multi-project usage**: Specify `projectName` parameter to access different projects  \n- **Backward compatibility**: Existing configurations work unchanged\n\n**Usage Examples:**\n\n```\n# Get page from default project\nPlease get the content of page \"Meeting Notes\" using get_page.\n\n# Get page from specific project  \nPlease get the content of page \"Design Guidelines\" from project \"help-ja\" using get_page.\n\n# Search in different project\nPlease search for pages containing \"API documentation\" in project \"developer-docs\" using search_pages.\n\n# Create page in specific project\nPlease create a new page titled \"Weekly Report\" in project \"team-updates\" using create_page.\n```\n\n**Important Limitations:**\n\nThis approach works best with public projects or projects that share the same authentication. For multiple private projects with different access credentials, use Method 2 below.\n\n#### Method 2: Multiple MCP Server Instances (Recommended for Private Projects)\n\nFor best user experience with multiple private projects, run separate MCP server instances for each project:\n\n```json\n{\n  \"mcpServers\": {\n    \"main-scrapbox\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:worldnine/scrapbox-cosense-mcp\"],\n      \"env\": {\n        \"COSENSE_PROJECT_NAME\": \"main-project\",        // Actual project name for API calls\n        \"COSENSE_SID\": \"s:main_sid_here...\",           // Session ID for this project\n        \"COSENSE_TOOL_SUFFIX\": \"main\",                 // Creates tools like get_page_main\n        \"SERVICE_LABEL\": \"Main Scrapbox\"               // Human-readable label in tool descriptions\n      }\n    },\n    \"team-cosense\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:worldnine/scrapbox-cosense-mcp\"],\n      \"env\": {\n        \"COSENSE_PROJECT_NAME\": \"team-workspace\",      // Actual project name for API calls\n        \"COSENSE_SID\": \"s:team_sid_here...\",           // Session ID for this project\n        \"COSENSE_TOOL_SUFFIX\": \"team\",                 // Creates tools like get_page_team\n        \"SERVICE_LABEL\": \"Team Cosense\"                // Human-readable label in tool descriptions\n      }\n    }\n  }\n}\n```\n\n**Key Configuration Points:**\n- **COSENSE_PROJECT_NAME**: The actual project name used in API calls (e.g., `scrapbox.io/main-project`)\n- **SERVICE_LABEL**: Display name shown in tool descriptions (e.g., \"Create page on Main Scrapbox\")\n- **COSENSE_TOOL_SUFFIX**: Creates unique tool names like `get_page_main` and `get_page_team`\n- **Different service names**: Using \"Scrapbox\" and \"Cosense\" helps distinguish between projects\n\nThis creates tools like `get_page_main`, `list_pages_main`, `get_page_team`, `list_pages_team`, allowing LLMs to automatically select the appropriate project.\n\n### Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nAuto-rebuild during development:\n\n```bash\nnpm run watch\n```\n\nRun tests:\n\n```bash\nnpm test\n```\n\nRun linting:\n\n```bash\nnpm run lint\n```\n\n### Quality Management\n\nThis project includes automated quality checks to ensure code reliability:\n\n- **ESLint**: TypeScript-aware linting with console.log warnings\n- **GitHub Actions**: Automated CI/CD pipeline for pull requests\n- **Branch Protection**: Main branch requires PR and passing checks\n- **Test Suite**: 142+ tests covering all functionality\n\n#### Contributing Guidelines\n\n1. Create a feature branch from main\n2. Make your changes with appropriate tests\n3. Run `npm run lint` and `npm test` locally\n4. Create a pull request\n5. CI will automatically run quality checks\n6. Merge only after all checks pass\n\nThe quality management system prevents debug logs and broken code from reaching production.\n\n### Debugging\n\nSince MCP servers communicate via stdio, debugging can be challenging. This server includes comprehensive debug logging to help troubleshoot issues.\n\n#### Debug Logs\n\nThe server outputs detailed debug information to help identify configuration and API issues:\n\n- **Server Configuration**: Project name, tool suffix, SID presence, limits\n- **Tool Generation**: List of generated tools with their names\n- **Tool Calls**: Requested vs normalized tool names, arguments\n- **API Requests**: URLs, project names, authentication status\n- **API Errors**: Detailed error information with context\n\n#### Using MCP Inspector\n\nUsing [MCP Inspector](https://github.com/modelcontextprotocol/inspector) is recommended for interactive debugging:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector provides a URL to access debugging tools in the browser.\n\n#### Troubleshooting Multiple Servers\n\nWhen running multiple server instances, check the debug logs for:\n\n1. **Tool Name Conflicts**: Ensure `COSENSE_TOOL_SUFFIX` is set differently for each server\n2. **API Access**: Verify SID authentication works for each project\n3. **Project Names**: Confirm project names are correctly configured\n\n## 日本語\n\n[cosense/scrapbox](https://cosen.se) 用のMCPサーバーです。\n\n## 機能\n\n- `get_page`\n  - cosense/Scrapboxからページコンテンツを取得\n    - 入力: ページタイトル、オプションのプロジェクト名\n    - 出力: ページコンテンツ、メタデータ、リンク、編集者の情報\n- `list_pages`\n  - 柔軟なソートとページネーションによるページ一覧の閲覧\n    - 用途: 最新性、人気度、アルファベット順でページを発見\n    - 入力: ソートオプション、ページネーション、オプションのプロジェクト名\n    - 出力: ページのメタデータと冒頭5行の内容\n    - 最大: 1リクエスト当たり1000件\n    - ソート: updated, created, accessed, linked, views, title\n- `search_pages`\n  - キーワードやフレーズを使用したページ内コンテンツの検索\n    - 用途: 特定のキーワードやフレーズを含むページを発見\n    - 入力: 検索クエリ、オプションのプロジェクト名\n    - 出力: マッチしたページとハイライトされた検索語句、コンテンツスニペット\n    - 最大: 100件（API制限）\n    - サポート: 基本検索、AND検索、除外検索、完全一致フレーズ\n- `create_page`\n  - WebSocket APIを使ってプロジェクトに新しいページを作成\n    - 入力: ページタイトル、オプションのマークダウン本文テキスト、オプションのプロジェクト名、オプションのcreateActuallyフラグ\n    - 出力: ページを即座に作成し、成功確認とURLを返す\n    - 注意: マークダウンコンテンツはScrapbox形式に変換されます\n    - 機能: 数字付きリストを自動的に箇条書きに変換（設定可能）\n    - 認証: 実際のページ作成にはCOSENSE_SIDが必要\n- `get_page_url`\n  - プロジェクト内のページのURLを生成\n    - 入力: ページタイトル、オプションのプロジェクト名\n    - 出力: 指定されたページへの直接URL\n- `insert_lines`\n  - ページの指定した行の後にテキストを挿入\n    - 入力: ページタイトル、対象行のテキスト、挿入するテキスト、オプションのプロジェクト名\n    - 出力: 挿入の詳細を含む成功メッセージ\n    - 動作: 対象行が見つからない場合は、ページの末尾にテキストが追加されます\n\n## インストール方法\n\n```bash\ngit clone https://github.com/worldnine/scrapbox-cosense-mcp.git\ncd scrapbox-cosense-mcp\nnpm install\nnpm run build\n```\n\n## 基本設定\n\nClaude Desktopで使用するには、以下のようにサーバー設定を追加してください:\n\nMacOSの場合: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nWindowsの場合: `%APPDATA%/Claude/claude_desktop_config.json`\n\n**単一プロジェクト設定:**\n```json\n{\n  \"mcpServers\": {\n    \"scrapbox-cosense-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:worldnine/scrapbox-cosense-mcp\"],\n      \"env\": {\n        \"COSENSE_PROJECT_NAME\": \"your_project_name\",\n        \"COSENSE_SID\": \"your_sid\", // プライベートプロジェクトの場合は必須\n        \"COSENSE_PAGE_LIMIT\": \"25\", // オプション（デフォルト: 100）\n        \"COSENSE_SORT_METHOD\": \"created\", // オプション（デフォルト: \"updated\"）\n        \"SERVICE_LABEL\": \"scrapbox(cosense)\" // オプション（デフォルト: \"cosense(scrapbox)\"）\n      }\n    }\n  }\n}\n```\n\n## 使用例\n\n設定完了後、Claudeで以下のようにツールを使用できます：\n\n```\n# 特定のページを取得\nget_page を使用してページ「会議メモ」の内容を取得してください。\n\n# 最近のページ一覧\nlist_pages を使用して最近更新された10件のページを一覧表示してください。\n\n# コンテンツ検索\nsearch_pages を使用して「JavaScript チュートリアル」を含むページを検索してください。\n\n# 新しいページを作成\ncreate_page を使用して「今日の学び」というタイトルでページを作成してください。\n\n# ページURLを取得\nget_page_url を使用してページ「プロジェクト計画」のURLを取得してください。\n```\n\n## 環境変数\n\nこのサーバーは以下の環境変数を使用します：\n\n### 必須の環境変数\n\n- `COSENSE_PROJECT_NAME`: プロジェクト名\n- `COSENSE_SID`: Scrapbox/Cosenseの認証用セッションID（プライベートプロジェクトの場合は必須） - [Cookieの取得方法](#cosense_sid-cookieの取得方法)\n\n### オプションの環境変数\n\n- `API_DOMAIN`: APIドメイン（デフォルト: \"scrapbox.io\"）\n- `SERVICE_LABEL`: サービスの識別名（デフォルト: \"cosense (scrapbox)\"）\n- `COSENSE_PAGE_LIMIT`: 初期取得時のページ数（1-1000、デフォルト: 100）\n- `COSENSE_SORT_METHOD`: 初期取得時の取得ページ順（updated/created/accessed/linked/views/title、デフォルト: updated）\n- `COSENSE_TOOL_SUFFIX`: 複数サーバーインスタンス用のツール名サフィックス（例：\"main\"で\"get_page_main\"が作成されます）\n\n### 環境変数の挙動について\n\n- **COSENSE_PROJECT_NAME**: 必須の環境変数です。未設定の場合、サーバーは起動時にエラーで終了します。\n- **COSENSE_SID**: プライベートプロジェクトへのアクセスに必要です。未設定の場合、パブリックプロジェクトのみアクセス可能です。[詳細な取得手順](#cosense_sid-cookieの取得方法)をご確認ください。\n- **API_DOMAIN**:\n  - 未設定時は\"scrapbox.io\"を使用\n  - 作者の環境では\"scrapbox.io\"以外の値は未検証ですが、\"cosen.se\"でないと動作しない環境が存在する可能性があるため念のためのオプションです。\n- **COSENSE_PAGE_LIMIT**:\n  - 未設定時は100を使用\n  - 無効な値（数値以外や範囲外）の場合は100を使用\n  - 有効範囲: 1-1000\n- **COSENSE_SORT_METHOD**:\n  - 未設定時は'updated'を使用\n  - 無効な値の場合は'updated'を使用\n  - list_pagesツールの動作には影響しません（初期リソース取得時のみ使用）\n\n### COSENSE_SID Cookieの取得方法\n\nプライベートなScrapboxプロジェクトにアクセスするには、ブラウザから `connect.sid` Cookieを取得する必要があります。以下の手順に従ってください：\n\n1. **Scrapboxプロジェクトにアクセス**\n   - ブラウザで `https://scrapbox.io/あなたのプロジェクト名` を開きます\n   - `あなたのプロジェクト名` を実際のプロジェクト名に置き換えてください\n\n2. **Scrapboxにログイン**\n   - Scrapboxアカウントにログインしていることを確認してください\n   - プライベートプロジェクトにアクセスできることを確認してください\n\n3. **開発者ツールを開く**\n   - **Windows/Linux**: `F12` キーまたは `Ctrl+Shift+I` を押します\n   - **macOS**: `Cmd+Option+I` を押します\n   - **別の方法**: ページ上で右クリックして「検証」または「要素を調査」を選択\n\n4. **Cookieを確認**\n   - 開発者ツールで **「Application」** タブ（Chrome/Edge）または **「ストレージ」** タブ（Firefox）を探します\n   - 左側のサイドバーで **「Cookies」** を展開します\n   - `https://scrapbox.io` をクリックします\n\n5. **connect.sid Cookieを見つけてコピー**\n   - `connect.sid` という名前のCookieを探します\n   - それをクリックして値を確認します\n   - **重要**: ブラウザはURLエンコードされた値を表示しますが、実際には**デコードされた値**を使用する必要があります\n   - ブラウザ表示: `s%3Axxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\n   - 使用すべき値: `s:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`（`s`の後は`:`です）\n\n6. **環境変数に設定**\n   - **デコードされた値**（`%3A`の代わりに`:`）を `COSENSE_SID` 環境変数として使用します\n   - **正しい形式**: `COSENSE_SID=s:xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\n   - **間違った形式**: `COSENSE_SID=s%3Axxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx`\n\n**重要な注意事項:**\n- `connect.sid` Cookieの値は機密情報のため、安全に管理し、公開しないでください\n- Cookieは時間が経つと期限切れになる場合があります。認証エラーが発生した場合は新しいCookieを取得してください\n- このCookieはプライベートプロジェクトへのアクセス権を提供するため、パスワードと同様に扱ってください\n\n## 複数プロジェクト対応（高度な機能）\n\n### 方法1: オプショナルパラメータを使用した単一サーバー\n\nすべてのツールで、単一サーバーから異なるプロジェクトを対象とするオプションの`projectName`パラメータをサポートしています：\n\n- **デフォルト動作**: プロジェクトが指定されていない場合は`COSENSE_PROJECT_NAME`環境変数を使用\n- **複数プロジェクト使用**: `projectName`パラメータを指定して異なるプロジェクトにアクセス\n- **後方互換性**: 既存の設定は変更なしで動作\n\n**使用例:**\n\n```\n# デフォルトプロジェクトからページを取得\nget_page を使用してページ「会議メモ」の内容を取得してください。\n\n# 特定のプロジェクトからページを取得  \nget_page を使用して、プロジェクト名「help-ja」からページ「使い方」の内容を取得してください。\n\n# 異なるプロジェクトでページを検索\nsearch_pages を使用して、プロジェクト名「developer-docs」で「API ドキュメント」を含むページを検索してください。\n\n# 特定のプロジェクトにページを作成\ncreate_page を使用して、プロジェクト名「team-updates」に「週次レポート」というタイトルでページを作成してください。\n```\n\n**重要な制限事項:**\n\nこの方法は、パブリックプロジェクトや同じ認証情報を共有するプロジェクトで最も効果的です。異なるアクセス認証情報を持つ複数のプライベートプロジェクトには、以下の方法2をご利用ください。\n\n### 方法2: 複数MCPサーバーインスタンス（プライベートプロジェクト推奨）\n\n複数のプライベートプロジェクトで最良のユーザー体験を得るには、プロジェクトごとに別々のMCPサーバーインスタンスを実行します：\n\n```json\n{\n  \"mcpServers\": {\n    \"main-scrapbox\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:worldnine/scrapbox-cosense-mcp\"],\n      \"env\": {\n        \"COSENSE_PROJECT_NAME\": \"main-project\",        // API呼び出しで使用される実際のプロジェクト名\n        \"COSENSE_SID\": \"s:main_sid_here...\",           // このプロジェクト用のセッションID\n        \"COSENSE_TOOL_SUFFIX\": \"main\",                 // get_page_main のようなツール名を作成\n        \"SERVICE_LABEL\": \"Main Scrapbox\"               // ツール説明で表示される人間向けの名前\n      }\n    },\n    \"team-cosense\": {\n      \"command\": \"npx\",\n      \"args\": [\"github:worldnine/scrapbox-cosense-mcp\"],\n      \"env\": {\n        \"COSENSE_PROJECT_NAME\": \"team-workspace\",      // API呼び出しで使用される実際のプロジェクト名\n        \"COSENSE_SID\": \"s:team_sid_here...\",           // このプロジェクト用のセッションID\n        \"COSENSE_TOOL_SUFFIX\": \"team\",                 // get_page_team のようなツール名を作成\n        \"SERVICE_LABEL\": \"Team Cosense\"                // ツール説明で表示される人間向けの名前\n      }\n    }\n  }\n}\n```\n\n**設定のポイント:**\n- **COSENSE_PROJECT_NAME**: API呼び出しで使用される実際のプロジェクト名（例: `scrapbox.io/main-project`）\n- **SERVICE_LABEL**: ツール説明で表示される名前（例: 「Main Scrapboxでページを作成」）\n- **COSENSE_TOOL_SUFFIX**: `get_page_main` や `get_page_team` のような固有のツール名を作成\n- **サービス名の使い分け**: 「Scrapbox」と「Cosense」を使い分けることでプロジェクトを区別\n\nこれにより `get_page_main`、`list_pages_main`、`get_page_team`、`list_pages_team` のようなツールが作成され、LLMが自動的に適切なプロジェクトを選択できるようになります。\n\n## 開発方法\n\n依存関係のインストール:\n\n```bash\nnpm install\n```\n\nサーバーのビルド:\n\n```bash\nnpm run build\n```\n\n開発時の自動リビルド:\n\n```bash\nnpm run watch\n```\n\nテストの実行:\n\n```bash\nnpm test\n```\n\nリンティングの実行:\n\n```bash\nnpm run lint\n```\n\n### 品質管理\n\nこのプロジェクトでは、コードの信頼性を確保するための自動品質チェックが導入されています：\n\n- **ESLint**: TypeScript対応のリンティング、console.log使用時の警告\n- **GitHub Actions**: プルリクエスト用の自動CI/CDパイプライン\n- **ブランチ保護**: mainブランチへはPRとチェック通過が必須\n- **テストスイート**: 142+のテストで全機能をカバー\n\n#### 貢献ガイドライン\n\n1. mainから機能ブランチを作成\n2. 適切なテストと共に変更を実装\n3. ローカルで `npm run lint` と `npm test` を実行\n4. プルリクエストを作成\n5. CIが自動的に品質チェックを実行\n6. 全チェック通過後にマージ\n\nこの品質管理システムにより、デバッグログや壊れたコードの本番環境への混入を防げます。\n\n### デバッグ方法\n\nMCPサーバーはstdioを介して通信を行うため、デバッグが難しい場合があります。[MCP Inspector](https://github.com/modelcontextprotocol/inspector)の使用を推奨します。以下のコマンドで実行できます：\n\n```bash\nnpm run inspector\n```\n\nInspectorはブラウザでデバッグツールにアクセスするためのURLを提供します。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scrapbox",
        "retrieval",
        "pages",
        "scrapbox project",
        "scrapbox cosense",
        "interact scrapbox"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "wuyunmei--momedb-mcp": {
      "owner": "wuyunmei",
      "name": "momedb-mcp",
      "url": "https://github.com/wuyunmei/momedb-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/wuyunmei.webp",
      "description": "Manage conversation context and a personal knowledge base for AI applications with efficient APIs. Create, update, and query user data while handling dialogue and knowledge management seamlessly.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-23T09:07:18Z",
      "readme_content": "# MemoDB MCP Server\n\nMCP 服务器，用于管理 AI 应用的对话上下文和个人知识库。该服务器通过模型上下文协议(MCP)提供用户数据、对话内容和知识管理的工具。\n\n## 主要功能\n\n### 1. 用户管理\n- `create_user`: 创建新用户\n- `get_user`: 获取用户信息\n- `update_user`: 更新用户信息\n- `delete_user`: 删除用户\n\n### 2. 对话数据管理\n- `insert_blob`: 插入对话数据\n- `get_blob`: 获取对话数据\n- `delete_blob`: 删除对话数据\n\n### 3. 知识库管理\n- `query_knowledge`: 查询知识库\n  * 支持全文搜索\n  * 支持按类型、标签、来源过滤\n  * 支持限制返回结果数量\n- `add_knowledge`: 添加新知识\n  * 支持设置知识来源\n  * 支持设置知识类型\n  * 支持添加标签\n- `update_knowledge`: 更新已有知识\n  * 支持更新内容和元数据\n  * 支持修改标签\n- `relate_knowledge`: 创建知识关联\n  * 支持设置关联类型\n  * 支持设置关联权重\n\n## 技术亮点\n\n1. **类型安全**\n   - 使用 TypeScript 实现\n   - 完整的类型定义和检查\n   - 编译时错误检测\n\n2. **错误处理**\n   - 全面的错误处理机制\n   - 详细的错误信息\n   - 错误日志记录\n\n3. **API 设计**\n   - 基于 JSON-RPC 2.0 协议\n   - RESTful API 风格\n   - 清晰的接口定义\n\n4. **可扩展性**\n   - 模块化设计\n   - 插件式工具注册\n   - 易于添加新功能\n\n## 安装和配置\n\n1. 安装依赖:\n```bash\nnpm install\n```\n\n2. 配置环境变量:\n创建 `.env` 文件并设置:\n```env\nMEMOBASE_API_URL=your_api_url    # API 服务器地址\nMEMOBASE_API_KEY=your_api_key    # API 访问密钥\n```\n\n3. 构建项目:\n```bash\nnpm run build\n```\n\n4. 运行服务器:\n```bash\n# 生产环境\nnpm start\n\n# 开发环境\nnpm run dev\n```\n\n## API 示例\n\n### 1. 添加知识\n```typescript\nconst result = await callTool('add_knowledge', {\n  uid: 'user123',\n  content: '人工智能是计算机科学的一个分支...',\n  metadata: {\n    source: 'wiki',\n    type: 'article',\n    tags: ['AI', '计算机科学', '技术']\n  }\n});\n```\n\n### 2. 查询知识\n```typescript\nconst result = await callTool('query_knowledge', {\n  uid: 'user123',\n  query: '人工智能',\n  filters: {\n    types: ['article'],\n    tags: ['AI'],\n    sources: ['wiki']\n  },\n  limit: 10\n});\n```\n\n### 3. 关联知识\n```typescript\nconst result = await callTool('relate_knowledge', {\n  uid: 'user123',\n  source_kid: 'knowledge1',\n  target_kid: 'knowledge2',\n  relation_type: 'related_to',\n  weight: 0.8\n});\n```\n\n## 开发指南\n\n1. **添加新工具**\n   - 在 `src/tools` 目录下创建工具实现\n   - 在 `src/api/types.ts` 添加类型定义\n   - 在 `src/index.ts` 注册工具\n\n2. **修改配置**\n   - 编辑 `src/config.ts` 更新配置项\n   - 在 `.env` 文件中添加新的环境变量\n\n3. **运行测试**\n```bash\nnpm test\n```\n\n## 常见问题\n\n如果您在使用过程中遇到问题，请参考 [常见问题与解决方案](docs/TROUBLESHOOTING.md) 文档。\n\n## 许可证\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "conversation",
        "dialogue",
        "ai",
        "manage conversation",
        "dialogue knowledge",
        "knowledge base"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "xianminx--mcp-server-flomo": {
      "owner": "xianminx",
      "name": "mcp-server-flomo",
      "url": "https://github.com/xianminx/mcp-server-flomo",
      "imageUrl": "/freedevtools/mcp/pfp/xianminx.webp",
      "description": "Create and organize notes within Flomo using natural language commands through AI chat interactions. Enhance productivity by integrating AI assistance directly into the note-taking process.",
      "stars": 8,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-19T09:54:42Z",
      "readme_content": "# Flomo MCP Server\n![](https://badge.mcpx.dev?type=server 'MCP Server') ![NPM Version](https://img.shields.io/npm/v/mcp-server-flomo) ![MIT licensed](https://img.shields.io/github/license/xianminx/mcp-server-flomo?style=flat-square)\n[![smithery badge](https://smithery.ai/badge/mcp-server-flomo)](https://smithery.ai/server/mcp-server-flomo/wss://mcp.smithery.ai:443)\n\nhttps://github.com/xianminx/mcp-server-flomo\n\nA Model Context Protocol (MCP) server that lets you create notes in Flomo directly through AI chat interactions in Cursor or Claude desktop. Write and organize your thoughts seamlessly through natural language commands.\n\n## Usage\n\n### Installing via Smithery\n\nTo install mcp-server-flomo for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-flomo/wss://mcp.smithery.ai:443):\n\n```bash\nnpx -y @smithery/cli install mcp-server-flomo --client claude\n```\n\n### [mcp-get](https://mcp-get.com/) \n\n![mcp-get: mcp-server-flomo](https://img.shields.io/badge/mcp--get-mcp--server--flomo-blue)\n\n\n```bash\nnpx @michaellatman/mcp-get@latest install mcp-server-flomo\n```\n\n### [mcp.so](https://mcp.so/server/mcp-server-flomo/xianminx)\nhttps://mcp.so/protocol/mcp-server-flomo/wss://mcp.smithery.ai:443\n\n### Manually configure\n\nConfigure Claude / Cursor / Windsurf / Cline / ChatWise / Cherry Studio etc.\n\n```bash\nFLOMO_API_URL=your_api_url_here npx mcp-server-flomo\n```\n\nOr configure for your MCP Host / Client. See https://mcp.so/protocol/mcp-server-flomo/wss://mcp.smithery.ai:443 for configuration detail.\n\nGet your Flomo API URL from [Flomo API Settings](https://v.flomoapp.com/mine)\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-flomo\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-server-flomo\"\n      ],\n      \"env\": {\n        \"FLOMO_API_URL\": \"your_api_url_here\"\n      }\n    }\n  }\n}\n```\n\nOnce the server is running, you can create notes in Flomo through natural language commands in your AI chat. Here are some examples:\n\n```json\n\"How to publish a mcp server? Could you save the answer to flomo note after answering it\"\n```\n\nThis will save the Cursor AI Agent response to Flomo directly in the chat conversation!\n\n\n<img src=\"https://raw.githubusercontent.com/xianminx/mcp-server-flomo/refs/heads/main/public/images/mcp-cursor-flomo.png\" width=\"400\">\n\nThe server will handle:\n\n- Converting your natural language requests into Flomo API calls\n- Proper formatting and submission of your notes\n- Providing feedback on successful note creation\n\n## Dev\n\n1. Get your Flomo API URL from [Flomo API Settings](https://v.flomoapp.com/mine)\n\n2. Install and configure:\n\n   ```bash\n   # Install dependencies\n   npm install\n   FLOMO_API_URL=your_api_url_here npx .\n   ```\n\n## Technical Details\n\n- Built with TypeScript and the Model Context Protocol SDK\n- Communicates with Flomo via their REST API\n- Runs over stdio for seamless integration with AI tools\n\n## License\n\nThis project is licensed under the MIT License—see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "notes",
        "ai",
        "ai chat",
        "notes flomo",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "yodakeisuke--mcp-memory-domain-knowledge": {
      "owner": "yodakeisuke",
      "name": "mcp-memory-domain-knowledge",
      "url": "https://github.com/yodakeisuke/mcp-memory-domain-knowledge",
      "imageUrl": "/freedevtools/mcp/pfp/yodakeisuke.webp",
      "description": "Persistently remembers user information across chats using a local knowledge graph, allowing connections between different entities and their relationships. Facilitates the storage and retrieval of observations linked to specific entities for improved contextual interactions.",
      "stars": 5,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-09T06:08:46Z",
      "readme_content": "forked https://github.com/modelcontextprotocol/servers/tree/main\n\n# Knowledge Graph Memory Server\nA basic implementation of persistent memory using a local knowledge graph. This lets Claude remember information about the user across chats.\n\n## Core Concepts\n\n### Entities\nEntities are the primary nodes in the knowledge graph. Each entity has:\n- A unique name (identifier)\n- An entity type (e.g., \"person\", \"organization\", \"event\")\n- A list of observations\n\nExample:\n```json\n{\n  \"name\": \"John_Smith\",\n  \"entityType\": \"person\",\n  \"observations\": [\"Speaks fluent Spanish\"]\n}\n```\n\n### Relations\nRelations define directed connections between entities. They are always stored in active voice and describe how entities interact or relate to each other.\n\nExample:\n```json\n{\n  \"from\": \"John_Smith\",\n  \"to\": \"Anthropic\",\n  \"relationType\": \"works_at\"\n}\n```\n### Observations\nObservations are discrete pieces of information about an entity. They are:\n\n- Stored as strings\n- Attached to specific entities\n- Can be added or removed independently\n- Should be atomic (one fact per observation)\n\nExample:\n```json\n{\n  \"entityName\": \"John_Smith\",\n  \"observations\": [\n    \"Speaks fluent Spanish\",\n    \"Graduated in 2019\",\n    \"Prefers morning meetings\"\n  ]\n}\n```\n\n## API\n\n### Tools\n- **create_entities**\n  - Create multiple new entities in the knowledge graph\n  - Input: `entities` (array of objects)\n    - Each object contains:\n      - `name` (string): Entity identifier\n      - `entityType` (string): Type classification\n      - `observations` (string[]): Associated observations\n  - Ignores entities with existing names\n\n- **create_relations**\n  - Create multiple new relations between entities\n  - Input: `relations` (array of objects)\n    - Each object contains:\n      - `from` (string): Source entity name\n      - `to` (string): Target entity name\n      - `relationType` (string): Relationship type in active voice\n  - Skips duplicate relations\n\n- **add_observations**\n  - Add new observations to existing entities\n  - Input: `observations` (array of objects)\n    - Each object contains:\n      - `entityName` (string): Target entity\n      - `contents` (string[]): New observations to add\n  - Returns added observations per entity\n  - Fails if entity doesn't exist\n\n- **delete_entities**\n  - Remove entities and their relations\n  - Input: `entityNames` (string[])\n  - Cascading deletion of associated relations\n  - Silent operation if entity doesn't exist\n\n- **delete_observations**\n  - Remove specific observations from entities\n  - Input: `deletions` (array of objects)\n    - Each object contains:\n      - `entityName` (string): Target entity\n      - `observations` (string[]): Observations to remove\n  - Silent operation if observation doesn't exist\n\n- **delete_relations**\n  - Remove specific relations from the graph\n  - Input: `relations` (array of objects)\n    - Each object contains:\n      - `from` (string): Source entity name\n      - `to` (string): Target entity name\n      - `relationType` (string): Relationship type\n  - Silent operation if relation doesn't exist\n\n- **read_graph**\n  - Read the entire knowledge graph\n  - No input required\n  - Returns complete graph structure with all entities and relations\n\n- **search_nodes**\n  - Search for nodes based on one or more keywords\n  - Input: `query` (string)\n    - Space-separated keywords (e.g., \"budget utility\")\n    - Multiple keywords are treated as OR conditions\n  - Searches across:\n    - Entity names\n    - Entity types\n    - Subdomains\n    - Observation content\n  - Matching behavior:\n    - Case-insensitive\n    - Partial word matching\n    - Any keyword can match any field\n    - Returns entities matching ANY of the keywords\n  - Returns matching entities and their relations\n  - Example queries:\n    - Single keyword: \"budget\"\n    - Multiple keywords: \"budget utility\"\n    - With special chars: \"budget & utility\"\n\n- **open_nodes**\n  - Retrieve specific nodes by name\n  - Input: `names` (string[])\n  - Returns:\n    - Requested entities\n    - Relations between requested entities\n  - Silently skips non-existent nodes\n\n# Usage with Claude Desktop\n\n### Setup\n\nAdd this to your claude_desktop_config.json:\n\n#### Docker\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/memory\"]\n    }\n  }\n}\n```\n\n#### NPX\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ]\n    }\n  }\n}\n```\n\n#### NPX with custom setting\n\nThe server can be configured using the following environment variables:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-memory\"\n      ],\n      \"env\": {\n        \"MEMORY_FILE_PATH\": \"/path/to/custom/memory.json\"\n      }\n    }\n  }\n}\n```\n\n- `MEMORY_FILE_PATH`: Path to the memory storage JSON file (default: `memory.json` in the server directory)\n\n### System Prompt\n\nThe prompt for utilizing memory depends on the use case. Changing the prompt will help the model determine the frequency and types of memories created.\n\nHere is an example prompt for chat personalization. You could use this prompt in the \"Custom Instructions\" field of a [Claude.ai Project](https://www.anthropic.com/news/projects). \n\n```\nFollow these steps for each interaction:\n\n1. User Identification:\n   - You should assume that you are interacting with default_user\n   - If you have not identified default_user, proactively try to do so.\n\n2. Memory Retrieval:\n   - Always begin your chat by saying only \"Remembering...\" and retrieve all relevant information from your knowledge graph\n   - Always refer to your knowledge graph as your \"memory\"\n   - When searching your memory, you can use multiple keywords to find related information\n   - Example searches:\n     * Single concept: \"programming\"\n     * Related concepts: \"programming python\"\n     * Specific domain with role: \"work engineer\"\n\n3. Memory Creation:\n   - While conversing with the user, be attentive to any new information that falls into these categories:\n     a) Basic Identity (age, gender, location, job title, education level, etc.)\n     b) Behaviors (interests, habits, etc.)\n     c) Preferences (communication style, preferred language, etc.)\n     d) Goals (goals, targets, aspirations, etc.)\n     e) Relationships (personal and professional relationships up to 3 degrees of separation)\n   - When storing information, use specific and descriptive keywords that will help in future searches\n\n4. Memory Update:\n   - If any new information was gathered during the interaction, update your memory as follows:\n     a) Create entities for recurring organizations, people, and significant events\n     b) Connect them to the current entities using relations\n     c) Store facts about them as observations\n     d) Use clear and searchable terms in entity names and observations to facilitate future retrieval\n```\n\n## Building\n\nDocker:\n\n```sh\ndocker build -t mcp/memory -f src/memory/Dockerfile . \n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chats",
        "knowledge",
        "remembers",
        "information chats",
        "chats using",
        "knowledge persistently"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "yuna0x0--hackmd-mcp": {
      "owner": "yuna0x0",
      "name": "hackmd-mcp",
      "url": "https://github.com/yuna0x0/hackmd-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yuna0x0.webp",
      "description": "Interact with HackMD notes and teams, manage note-taking, view reading histories, and collaborate seamlessly with AI assistants through API integrations.",
      "stars": 39,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T13:13:34Z",
      "readme_content": "# HackMD MCP Server\n\nA Model Context Protocol (MCP) server that interfaces with the [HackMD API](https://hackmd.io/@hackmd-api/developer-portal), allowing LLM clients to access and interact with HackMD notes, teams, user profiles, and history data.\n\n## Features\n\n- Get user profile information\n- Create, read, update, and delete notes\n- Manage team notes and collaborate with team members\n- Access reading history\n- List and manage teams\n- **Dual transport support**: Both HTTP and STDIO transports\n- **Cloud deployment ready**: Support Smithery and other platforms\n\n## Requirements\n\n- Node.js 18+\n\n## Local Installation (STDIO Transport)\n\n1. Add this server to your `mcp.json` / `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"hackmd\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"hackmd-mcp\"],\n      \"env\": {\n        \"HACKMD_API_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\n\nYou may also optionally set the `HACKMD_API_URL` environment variable if you need to use a different HackMD API endpoint.\n\n2. Restart your MCP client (e.g., Claude Desktop)\n3. Use the tools to interact with HackMD\n\n## Server Deployment (HTTP Transport)\n\n### Self-Hosting\nFollow the [Local Development](#local-development) instructions to set up the project locally, then run:\n```bash\npnpm run start:http\n```\nThis will start the server on port 8081 by default. You can change the port by setting the `PORT` environment variable.\n\n### Cloud Deployment\n\nYou can deploy this MCP server to any cloud platform that supports Node.js server applications.\n\nYou can also deploy via MCP platforms like [Smithery](https://smithery.ai/server/@yuna0x0/hackmd-mcp).\n\n## Configuration\n### Environment Variables (STDIO Transport and HTTP Transport server where host provides the config)\n\nWhen using the STDIO transport or hosting the HTTP transport server, you can pass configuration via environment variables:\n- `HACKMD_API_TOKEN`: HackMD API Token (Required for all operations)\n- `HACKMD_API_URL`: (Optional) HackMD API URL (Defaults to https://api.hackmd.io/v1)\n\nEnvironment variables applied only for the HTTP transport server:\n- `ALLOWED_HACKMD_API_URLS`: (Optional) A comma-separated list of allowed HackMD API URLs. The server will reject requests if the provide HackMD API URL is not in this list. If not set, only the default URL (https://api.hackmd.io/v1) is allowed.\n\n> [!CAUTION]\n> If you are hosting the HTTP transport server with token pre-configured, you should protect your endpoint and implement authentication before allowing users to access it. Otherwise, anyone can access your MCP server while using your HackMD token.\n\n### HTTP Headers (HTTP Transport where user provides the config)\n\nWhen using the HTTP transport, user can pass configuration via HTTP headers:\n- `Hackmd-Api-Token`: HackMD API Token (Required for all operations)\n- `Hackmd-Api-Url`: (Optional) HackMD API URL (Defaults to https://api.hackmd.io/v1)\n\nIf the user provides the token in the header, while the server also has `HACKMD_API_TOKEN` set, the header value will take precedence.\n\n### Get a HackMD API Token\n\nTo get an API token, follow these steps:\n\n1. Go to [HackMD settings](https://hackmd.io/settings#api).\n2. Click on \"Create API Token\".\n3. Copy the generated token and use it in your `.env` file or environment variables.\n\n## Available Tools\n\n### Profile Tools\n- **get_user_info**: Get information about the authenticated user\n\n### Teams Tools\n- **list_teams**: List all teams accessible to the user\n\n### History Tools\n- **get_history**: Get user's reading history\n\n### Team Notes Tools\n- **list_team_notes**: List all notes in a team\n- **create_team_note**: Create a new note in a team\n- **update_team_note**: Update an existing note in a team\n- **delete_team_note**: Delete a note in a team\n\n### User Notes Tools\n- **list_user_notes**: List all notes owned by the user\n- **get_note**: Get a note by its ID\n- **create_note**: Create a new note\n- **update_note**: Update an existing note\n- **delete_note**: Delete a note\n\n## Example Usage\n\n### Basic Note Management\n\n```\nCan you help me manage my HackMD notes?\n```\n\n### List Notes\n\n```\nPlease list all my notes.\n```\n\n### Create a New Note\n\n````\nCreate a new note with the title \"Meeting Notes\" and content:\n```\n# Meeting Notes\n\nDiscussion points:\n- Item 1\n- Item 2\n```\n````\n\n### Team Collaboration\n\n```\nShow me all the teams I'm part of and list the notes in the first team.\n```\n\n## Local Development\n\nThis project uses [pnpm](https://pnpm.io) as its package manager.\n\nClone the repository and install dependencies:\n\n```bash\ngit clone https://github.com/yuna0x0/hackmd-mcp.git\ncd hackmd-mcp\npnpm install\n```\n\n### Configuration\n\n1. Create a `.env` file by copying the example:\n```bash\ncp env.example .env\n```\n\n2. Edit the `.env` file and add your HackMD API token:\n```\nHACKMD_API_TOKEN=your_api_token\n```\n\n## Debugging with MCP Inspector\n\nYou can use the MCP Inspector to test and debug the HackMD MCP server:\n\n```bash\nnpx @modelcontextprotocol/inspector -e HACKMD_API_TOKEN=your_api_token npx hackmd-mcp\n\n# Use this instead when Local Development\npnpm run inspector\n```\n\nThen open your browser to the provided URL (usually http://localhost:6274) to access the MCP Inspector interface. From there, you can:\n\n1. Connect to your running HackMD MCP server\n2. Browse available tools\n3. Run tools with custom parameters\n4. View the responses\n\nThis is particularly useful for testing your setup before connecting it to MCP clients like Claude Desktop.\n\n## Docker\n\nPull from GitHub Container Registry:\n```bash\ndocker pull ghcr.io/yuna0x0/hackmd-mcp\n```\n\nDocker build (Local Development):\n```bash\ndocker build -t ghcr.io/yuna0x0/hackmd-mcp .\n```\n\nDocker multi-platform build (Local Development):\n```bash\ndocker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/yuna0x0/hackmd-mcp .\n```\n\n## MCP Bundles (MCPB)\n\nTo create an MCP Bundle for this server, run:\n```bash\npnpm run pack:mcpb\n```\n\n## Security Notice\n\nThis MCP server accepts your HackMD API token in the .env file, environment variable or HTTP header. Keep this information secure and never commit it to version control.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "hackmd",
        "notes",
        "hackmd notes",
        "yuna0x0 hackmd",
        "interact hackmd"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "yura2100--sourcify-context-server": {
      "owner": "yura2100",
      "name": "sourcify-context-server",
      "url": "https://github.com/yura2100/sourcify-context-server",
      "imageUrl": "/freedevtools/mcp/pfp/yura2100.webp",
      "description": "Manage text notes with structured URIs and metadata, facilitating the creation and summarization of notes using a TypeScript-based MCP implementation.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-06T17:02:43Z",
      "readme_content": "# sourcify-context-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"sourcify-context-server\": {\n      \"command\": \"/path/to/sourcify-context-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notes",
        "notetaking",
        "typescript",
        "notes structured",
        "text notes",
        "notes using"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "yuzhi-jiang--memos-mcp": {
      "owner": "yuzhi-jiang",
      "name": "memos-mcp",
      "url": "https://github.com/yuzhi-jiang/memos-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yuzhi-jiang.webp",
      "description": "Connects securely to a Memos instance, enabling interaction through an AI assistant for searching, creating, updating, and managing notes. Supports advanced search capabilities, structured access to notes, and efficient tag management.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-03T08:51:59Z",
      "readme_content": "# Memos MCP 服务器\n\n[![smithery badge](https://smithery.ai/badge/codehatcher/memos-mcp)](https://smithery.ai/server/codehatcher/memos-mcp)\n\n一个连接到 [Memos](https://usememos.com/) 的 MCP (Model Context Protocol) 服务器，让你可以通过 AI 助手（如 Claude）与你的 Memos 实例进行交互。\n\n## 功能特点\n\n- 🔄 **连接到用户的 Memos 实例**：通过 API 密钥安全连接\n- 📚 **将 API 暴露为资源**：提供对备忘录的结构化访问\n- 🔍 **提供强大的工具**：搜索、创建、更新、删除备忘录等功能\n- 🏷️ **标签管理**：自动添加标签到新备忘录\n- 🔎 **高级搜索**：支持 CEL 表达式进行复杂过滤\n- 📝 **提示模板**：包含用于日常操作改进的提示\n\n## 安装与配置\n\n你可以在配置文件中包含这个包，如下所示，就像使用其他 Python MCP 插件一样。\n```json\n{\n  \"mcpServers\": {\n    \"memos-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"memos-mcp\"\n      ],\n      \"env\": {\n        \"MEMOS_URL\": \"https://your-memos-instance-url\",\n        \"MEMOS_API_KEY\": \"your-memos-api-key\"\n      }\n    }\n  }\n}\n```\n\n\n### 前提条件\n\n- Python 3.8 或更高版本\n- 一个可访问的 Memos 实例\n- Memos API 密钥\n\n### 安装步骤\n\n1. 克隆此仓库：\n   ```bash\n   git clone https://github.com/yourusername/memos-mcp.git\n   cd memos-mcp\n   ```\n\n2. 安装依赖：\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. 配置环境变量：\n   - 复制 `.env.example` 为 `.env`\n   - 编辑 `.env` 文件，填写以下信息：\n     ```\n     MEMOS_URL=https://your-memos-instance-url\n     MEMOS_API_KEY=your-memos-api-key\n     DEFAULT_TAG=mcp  # 可选，默认标签\n     ```\n\n## 使用方法\n\n### 启动服务器\n\n```bash\npython memos_mcp_server.py\n```\n\n### 连接到 Claude Desktop\n\n1. 安装 [Claude Desktop](https://claude.ai/download)\n2. 在 Claude Desktop 中，添加 MCP 服务器\n3. 使用 Claude 与你的 Memos 进行交互\n\n### 使用 MCP 开发工具测试\n\n```bash\nmcp dev memos_mcp_server.py\n```\n\n## 可用资源\n\n- `memos://recent` - 获取最近的备忘录\n- `memos://all` - 获取所有备忘录\n- `memos://memos/{memo_id}` - 获取指定 ID 的备忘录\n\n## 可用工具\n\n### 搜索和过滤\n\n- `search_memos(query, filter_expr)` - 搜索备忘录\n- `filter_memos(filter_expr)` - 使用 CEL 表达式过滤备忘录\n\n### 创建和管理\n\n- `create_memo(content, visibility, tags)` - 创建新备忘录\n- `update_memo(memo_id, content, visibility)` - 更新备忘录\n- `delete_memo(memo_id)` - 删除备忘录\n- `delete_memo_tag(memo_id, tag)` - 从备忘录中删除标签\n\n## 提示模板\n\n- `daily-review` - 每日备忘录回顾\n- `weekly-summary` - 每周备忘录总结\n- `knowledge-extraction` - 从备忘录中提取知识\n- `content-improvement` - 改进备忘录内容\n\n## CEL 表达式示例\n\nCEL (Common Expression Language) 表达式可用于高级过滤：\n\n- 按内容过滤：`content.contains('关键词')`\n- 按创建时间过滤：`createTime > timestamp('2023-01-01T00:00:00Z')`\n- 按可见性过滤：`visibility == 'PRIVATE'`\n- 组合条件：`content.contains('关键词') && visibility == 'PRIVATE'`\n\n## 示例用法\n\n### 搜索备忘录\n\n```\nsearch_memos(query=\"项目\")\n```\n\n### 使用 CEL 表达式过滤\n\n```\nfilter_memos(filter_expr=\"createTime > timestamp('2023-01-01T00:00:00Z') && visibility == 'PRIVATE'\")\n```\n\n### 创建带标签的备忘录\n\n```\ncreate_memo(content=\"完成 MCP 服务器项目\", tags=[\"项目\", \"编程\"])\n```\n\n## 贡献\n\n欢迎提交问题和拉取请求！\n\n## 许可证\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "memos",
        "notetaking",
        "notes",
        "memos instance",
        "memos mcp",
        "managing notes"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "zacharyliner1xds--my-sequential-thinking-mcp": {
      "owner": "zacharyliner1xds",
      "name": "my-sequential-thinking-mcp",
      "url": "https://github.com/zacharyliner1xds/my-sequential-thinking-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/zacharyliner1xds.webp",
      "description": "Facilitates structured sequential thinking by breaking down complex problems into logical steps, validating reasoning chains, and visualizing thinking pathways. Integrates with a Memory Bank for managing and storing reasoning patterns to enhance problem-solving workflows.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-01T14:41:11Z",
      "readme_content": "# Sequential Thinking MCP Server\n\nA Model Context Protocol (MCP) server focused on structured sequential thinking capabilities, designed to integrate with Cline's Memory Bank. This server helps break down complex problems into structured sequential steps, track reasoning chains, and store thinking patterns.\n\n## Features\n\n- Create and manage sequential thinking chains for problem-solving\n- Track chains of thought with validation at each step\n- Store and retrieve reasoning patterns\n- Analyze the quality of reasoning processes\n- Visualize thinking pathways\n- Seamlessly integrate with the Memory Bank system\n\n## Architecture\n\nThe server consists of the following core components:\n\n- **Sequential Thinking Engine**: Manages thinking chains, steps, and reasoning validation\n- **Memory Bank Connector**: Integrates with Cline's Memory Bank\n- **Tag Manager**: Implements a comprehensive tagging system\n- **Visualization Generator**: Creates visual representations of thinking chains\n- **Utilities**: File storage, thinking validation, and other helpers\n\n## Available Tools\n\nThe server provides the following MCP tools:\n\n### create_thinking_chain\nCreate a new sequential thinking process with specified parameters.\n- **Input**: problem description, thinking type, context\n- **Output**: chain_id and initial structure\n\n### add_thinking_step\nAdd a step to an existing thinking chain.\n- **Input**: chain_id, step description, reasoning, evidence\n- **Output**: updated step information\n\n### validate_step\nValidate logical connections between steps.\n- **Input**: chain_id, step_id\n- **Output**: validation results, potential issues\n\n### get_chain\nRetrieve a complete thinking chain.\n- **Input**: chain_id\n- **Output**: full chain with all steps\n\n### generate_visualization\nCreate visual representation of a thinking chain.\n- **Input**: chain_id, format (mermaid, json, text)\n- **Output**: visualization code/data\n\n### save_to_memory\nSave a thinking chain to Memory Bank.\n- **Input**: chain_id, memory_name, tags\n- **Output**: confirmation and memory_id\n\n### load_from_memory\nLoad a thinking chain from Memory Bank.\n- **Input**: memory_id or search parameters\n- **Output**: complete chain\n\n### search_related_thinking\nFind related thinking chains based on parameters.\n- **Input**: keywords, tags, thinking_type\n- **Output**: list of relevant chains\n\n### apply_template\nApply a reasoning template to current thinking.\n- **Input**: template_name, problem_context\n- **Output**: pre-structured thinking chain\n\n## Thinking Types\n\nThe server supports various thinking types, each with specific patterns and structures:\n\n- **Analytical** - Break down, analyze, synthesize\n- **Creative** - Diverge, explore, converge\n- **Critical** - Question, evaluate, conclude\n- **Systems** - Map, analyze, model\n- **First-Principles** - Identify, break down, reassemble\n- **Divergent** - Generate alternatives, explore\n- **Convergent** - Analyze, evaluate, select\n- **Inductive** - Observe, pattern, hypothesize\n- **Deductive** - Premise, logic, conclusion\n\n## Templates\n\nThe server includes ready-to-use reasoning templates to jumpstart the thinking process:\n\n- **First Principles Analysis** - Break down a complex problem into its fundamental principles\n- **Systems Thinking Analysis** - Analyze complex systems holistically\n\n## Installation\n\n1. Ensure Node.js v14+ is installed\n2. Clone the repository\n3. Install dependencies:\n   ```\n   npm install\n   ```\n\n## Usage\n\n1. Start the server:\n   ```\n   node index.js\n   ```\n\n2. The server will be available as an MCP server that you can connect to via Claude/Cline\n\n## Memory Bank Integration\n\nThis server is designed to integrate with Cline's Memory Bank, allowing:\n\n1. Reading from Memory Bank files (projectbrief.md, activeContext.md, etc.)\n2. Storing complete thinking chains as structured memories\n3. Updating activeContext.md with reasoning outcomes\n4. Creating links between reasoning and Memory Bank sections\n\n## Example Tool Usage\n\n```javascript\n// Example: Create a new thinking chain\n{\n  \"problem\": \"How to improve user engagement on our platform\",\n  \"thinking_type\": \"systems\",\n  \"context\": \"Our user engagement metrics have decreased by 15% over the past quarter\"\n}\n\n// Example: Add a thinking step\n{\n  \"chain_id\": \"3a7e4fc0-5c1d-4b9f-9d1a-8b5e7c5a9d3e\",\n  \"description\": \"Identify key components of the engagement system\",\n  \"reasoning\": \"User engagement consists of several interconnected components including onboarding, core user actions, notification systems, and retention mechanisms.\",\n  \"evidence\": \"Analysis of our user journey maps and analytics data\",\n  \"confidence\": 0.8\n}\n\n// Example: Generate a visualization\n{\n  \"chain_id\": \"3a7e4fc0-5c1d-4b9f-9d1a-8b5e7c5a9d3e\",\n  \"format\": \"mermaid\",\n  \"options\": {\n    \"showValidation\": true,\n    \"showConfidence\": true\n  }\n}\n```\n\n## Tag System\n\nThe server implements a comprehensive tagging system with multiple dimensions:\n\n- **Thinking Type** - analytical, creative, critical, systems, etc.\n- **Domain** - business, science, technology, art, etc.\n- **Complexity** - simple, moderate, complex\n- **Status** - draft, validated, complete\n- **Custom** - user-defined tags\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sequential",
        "thinking",
        "reasoning",
        "sequential thinking",
        "thinking pathways",
        "structured sequential"
      ],
      "category": "notetaking-and-knowledge-bases"
    },
    "zongmin-yu--sqlite-literature-management-fastmcp-mcp-server": {
      "owner": "zongmin-yu",
      "name": "sqlite-literature-management-fastmcp-mcp-server",
      "url": "https://github.com/zongmin-yu/sqlite-literature-management-fastmcp-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/zongmin-yu.webp",
      "description": "Manages various types of sources such as papers, books, and webpages while integrating them with knowledge graphs. Tracks relationships between sources and entities, supports multiple identifiers, and maintains structured note-taking and status tracking.",
      "stars": 14,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T04:17:43Z",
      "readme_content": "# Universal Source Management System\n\nA flexible system for managing various types of sources (papers, books, webpages, etc.) and integrating them with knowledge graphs.\n\n## Features\n\n### Core Features\n\n- Universal source identification with internal UUID system\n- Support for multiple source types (papers, webpages, books, videos, blogs)\n- Multiple identifier support per source (arxiv, DOI, semantic scholar, ISBN, URL)\n- Structured note-taking with titles and content\n- Status tracking (unread, reading, completed, archived)\n\n### Entity Integration\n\n- Link sources to knowledge graph entities\n- Track relationships between sources and entities\n- Flexible relation types (discusses, introduces, extends, etc.)\n- Integration with memory graph\n\n## Prerequisites\n\nThis system integrates with the [MCP Memory Server](https://github.com/modelcontextprotocol/servers/tree/main/src/memory) for persistent knowledge graph storage.\n\n## Quick Start\n\n1. Create a new SQLite database with our schema:\n\n```bash\n# Create a new database\nsqlite3 sources.db < create_sources_db.sql\n```\n\n2. Install the source management server:\n\n```bash\n# Install for Claude Desktop with your database path\nfastmcp install source-manager-server.py --name \"Source Manager\" -e SQLITE_DB_PATH=/path/to/sources.db\n```\n\n## Schema\n\n### Core Tables\n\n```sql\n-- Sources table\nCREATE TABLE sources (\n    id UUID PRIMARY KEY,\n    title TEXT NOT NULL,\n    type TEXT CHECK(type IN ('paper', 'webpage', 'book', 'video', 'blog')) NOT NULL,\n    identifiers JSONB NOT NULL,\n    status TEXT CHECK(status IN ('unread', 'reading', 'completed', 'archived')) DEFAULT 'unread'\n);\n\n-- Source notes\nCREATE TABLE source_notes (\n    source_id UUID REFERENCES sources(id),\n    note_title TEXT NOT NULL,\n    content TEXT NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    PRIMARY KEY (source_id, note_title)\n);\n\n-- Entity links\nCREATE TABLE source_entity_links (\n    source_id UUID REFERENCES sources(id),\n    entity_name TEXT,\n    relation_type TEXT CHECK(relation_type IN ('discusses', 'introduces', 'extends', 'evaluates', 'applies', 'critiques')),\n    notes TEXT,\n    PRIMARY KEY (source_id, entity_name)\n);\n```\n\n## Usage Examples\n\n### 1. Managing Sources\n\nAdd a paper with multiple identifiers:\n\n```python\nadd_source(\n    title=\"Attention Is All You Need\",\n    type=\"paper\",\n    identifier_type=\"arxiv\",\n    identifier_value=\"1706.03762\",\n    initial_note={\n        \"title\": \"Initial thoughts\",\n        \"content\": \"Groundbreaking paper introducing transformers...\"\n    }\n)\n\n# Add another identifier to the same paper\nadd_identifier(\n    title=\"Attention Is All You Need\",\n    type=\"paper\",\n    current_identifier_type=\"arxiv\",\n    current_identifier_value=\"1706.03762\",\n    new_identifier_type=\"semantic_scholar\",\n    new_identifier_value=\"204e3073870fae3d05bcbc2f6a8e263d9b72e776\"\n)\n```\n\nAdd a webpage:\n\n```python\nadd_source(\n    title=\"Understanding Transformers\",\n    type=\"webpage\",\n    identifier_type=\"url\",\n    identifier_value=\"https://example.com/transformers\",\n)\n```\n\n### 2. Note Taking\n\nAdd notes to a source:\n\n```python\nadd_note(\n    title=\"Attention Is All You Need\",\n    type=\"paper\",\n    identifier_type=\"arxiv\",\n    identifier_value=\"1706.03762\",\n    note_title=\"Implementation details\",\n    note_content=\"The paper describes the architecture...\"\n)\n```\n\n### 3. Entity Linking\n\nLink source to entities:\n\n```python\nlink_to_entity(\n    title=\"Attention Is All You Need\",\n    type=\"paper\",\n    identifier_type=\"arxiv\",\n    identifier_value=\"1706.03762\",\n    entity_name=\"transformer\",\n    relation_type=\"introduces\",\n    notes=\"First paper to introduce the transformer architecture\"\n)\n```\n\nQuery sources by entity:\n\n```python\nget_entity_sources(\n    entity_name=\"transformer\",\n    type_filter=\"paper\",\n    relation_filter=\"discusses\"\n)\n```\n\n## Best Practices\n\n1. Source Management\n\n   - Use consistent titles across references\n   - Provide as many identifiers as available\n   - Keep notes structured with clear titles\n   - Use appropriate source types\n\n2. Entity Linking\n   - Be specific with relation types\n   - Add contextual notes to relationships\n   - Verify entity names against memory graph\n   - Keep entity relationships focused\n\n## Technical Details\n\n1. Source Identification\n\n   - Internal UUID system for consistent referencing\n   - Multiple external identifiers per source\n   - Flexible identifier types (arxiv, doi, url, etc.)\n   - Title and type based fuzzy matching\n\n2. Data Organization\n   - Structured notes with titles\n   - Clear source type categorization\n   - Entity relationship tracking\n   - Status management\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Add tests for new features\n4. Submit a pull request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notetaking",
        "sqlite",
        "fastmcp",
        "knowledge bases",
        "sources entities",
        "notetaking knowledge"
      ],
      "category": "notetaking-and-knowledge-bases"
    }
  }
}