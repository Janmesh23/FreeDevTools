{
  "category": "frameworks-for-servers",
  "categoryDisplay": "Frameworks For servers",
  "description": "",
  "totalRepositories": 12,
  "repositories": {
    "abap-ai--mcp": {
      "owner": "abap-ai",
      "name": "mcp",
      "url": "https://github.com/abap-ai/mcp",
      "imageUrl": "/freedevtools/mcp/pfp/abap-ai.webp",
      "description": "Build SAP ABAP based MCP servers. ABAP 7.52 based with 7.02 downport; runs on R/3 & S/4HANA on-premises, currently not cloud-ready.",
      "stars": 40,
      "forks": 5,
      "license": "MIT License",
      "language": "ABAP",
      "updated_at": "2025-09-11T07:44:03Z",
      "readme_content": "# ABAP Model Context Protocol Server SDK\n\n[Discord](https://discord.gg/jf2FhnFvSn) - for all ABAP-AI repos.\n\n## Overview\n\nABAP implementation of the [Model Context Protocol](https://modelcontextprotocol.io/introduction) based on version [2025-06-18](https://modelcontextprotocol.io/specification/2025-06-18). \\\n**Note** that this is only a server implementation as I currently see no realistic way to support SSE streaming which is mandatory for the client.\n\nSupported protocol versions: 2025-03-28, 2025-06-18\n\nNote that old protocol versions might be dropped after a while especially if they increaase maintenance effort.\n\n## Documentation\n\nSee [Overview](docs/Overview.md) in docs folder.\n\n## Used ABAP OpenSource projects\n\nSpecial thanks to:\n\n- [ajson](https://github.com/sbcgua/ajson) integrated as zmcp_ajson\n- [abaplint](https://github.com/abaplint/abaplint) for review and more important 7.02 downport\n- [abapGit](https://github.com/abapGit/abapGit) for source code control\n\nFind more awesome projects at [dotabap](https://dotabap.org/).\n\n## Features & Limitations\n\nCurrently implemented:\n\n- Prompts\n- Resources\n- Tools\n\nNo SSE support --> no notifications and therefore no support of listChanged, subscribe and logging.\\\n\nNot implemented:\n\n- Sampling - considered for the future, open an issue if you have a use case that would benefit from it\n- Completions - questionable from a performance point of view with ABAP\n- Elicitation - without SSE I see no proper way to implement this\n- Roots - likely irrelevant for ABAP\n- Further notifications not relevant without SSE: Cancellation, Ping, Progress, Logging\n\n## Authorization\n\nImplement the standard [Authorization](https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization) in ABAP via custom code is not feasible, we have to rely on ABAP features. \\\nAn overview of likely options is outlined in [Authentication Documentation](./docs/Authentication.md).\n\n## Autentication\n\nOAuth is suggested but outside of newer S/4HANA releases challenging, for options see [Authentication](./docs/Authentication.md). Further suggestions are welcome.\n\n## Roadmap\n\nSee currently open issues for the next planned steps. Longer term I intend to add features to create modular MCP servers based on reusable implementations.\n\n## FAQ\n\nSee [FAQ](./docs/FAQ.md).\n\n## Contributing\n\nFeel free to:\n\n- Open issues for bug reports\n- Use [Discord](https://discord.gg/jf2FhnFvSn) for discussions\n- Suggest improvements\n- Pull requests are welcome but ensure they are tested and follow the overall style, if in doubt open an issue first\n\n## GenAI Notice\n\nPart of the coding was generated using AI, mostly with Sonnet 3.7/4 and GitHub Copilot. Detailed documentation is largely AI generated - only high-level reviewed.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sap",
        "abap",
        "mcp",
        "sap abap",
        "servers abap",
        "abap based"
      ],
      "category": "frameworks-for-servers"
    },
    "blustAI--paymcp": {
      "owner": "blustAI",
      "name": "paymcp",
      "url": "https://github.com/blustAI/paymcp",
      "imageUrl": "/freedevtools/mcp/pfp/blustAI.webp",
      "description": "Lightweight payments layer for MCP servers: turn tools into paid endpoints with a two-line decorator.  ·  ·",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "paymcp",
        "payments",
        "mcp",
        "paymcp python",
        "blustai paymcp",
        "mcp servers"
      ],
      "category": "frameworks-for-servers"
    },
    "foobara--mcp-connector": {
      "owner": "foobara",
      "name": "mcp-connector",
      "url": "https://github.com/foobara/mcp-connector",
      "imageUrl": "/freedevtools/mcp/pfp/foobara.webp",
      "description": "Easily expose Foobara commands written in Ruby as tools via MCP",
      "stars": 2,
      "forks": 0,
      "license": "Other",
      "language": "Ruby",
      "updated_at": "2025-08-22T17:57:48Z",
      "readme_content": "# Foobara::McpConnector\n\nExposes Foobara commands according to the Model Context Protocol (MCP) specification\n\n<!-- TOC -->\n* [Foobara::McpConnector](#foobaramcpconnector)\n  * [Installation](#installation)\n  * [Usage](#usage)\n    * [Code demo video!](#code-demo-video)\n    * [Code examples](#code-examples)\n    * [Super basic example](#super-basic-example)\n    * [An example with entities](#an-example-with-entities)\n    * [A destructive example](#a-destructive-example)\n    * [Moar examples](#moar-examples)\n  * [Contributing](#contributing)\n  * [License](#license)\n<!-- TOC -->\n\n## Installation\n\nTypical stuff: add `gem \"foobara-mcp-connector` to your Gemfile or .gemspec file. Or even just\n`gem install foobara-mcp-connector` if just playing with it directly in scripts.\n\n## Usage\n\n### Code demo video!\n\nYou can watch a code demo here: https://youtu.be/_w3ZHdiJEGU\n\n### Code examples\n\nYou can find examples in `examples/`\n\n### Super basic example\n\nLet's create a simple Foobara command:\n\n```ruby\nclass BuildSuperDuperSecret < Foobara::Command\n  inputs do\n    seed :integer, :required\n  end\n  result :integer\n\n  def execute\n    seed * seed * seed\n  end\nend\n```\n\nThis just cubes the integer we pass to it. You can run it with `BuildSuperDuperSecret.run!(seed: 3)` which\nwould give `27`. See the foobara gem for more info about Foobara commands.\n\nNow, let's connect it to an McpConnector:\n\n```ruby\nrequire \"foobara/mcp_connector\"\n\nmcp_connector = Foobara::McpConnector.new\nmcp_connector.connect(BuildSuperDuperSecret)\n```\n\nAnd we can start a stdio server like so:\n\n```ruby\nmcp_connector.run_stdio_server\n```\n\nPutting it all together in a single script called simple-mcp-server-example we get:\n\n```ruby\n#!/usr/bin/env ruby\n\nrequire \"foobara/mcp_connector\"\n\nclass BuildSuperDuperSecret < Foobara::Command\n  inputs do\n    seed :integer, :required\n  end\n  result :integer\n\n  def execute\n    seed * seed * seed\n  end\nend\n\nmcp_connector = Foobara::McpConnector.new\nmcp_connector.connect(BuildSuperDuperSecret)\nmcp_connector.run_stdio_server\n```\n\nWe can now add it to programs that can consume MCP servers. For example, with claude code, we can\ntell claude code about it by running ```claude mcp add``` and following the instructions or we\ncan create a .mcp.json file like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-test\": {\n      \"type\": \"stdio\",\n      \"command\": \"simple-mcp-server-example\",\n      \"args\": [],\n      \"env\": {}\n    }\n  }\n}\n```\n\nYou need to set `\"command\"` to the path of your script.\n\nNow when we run claude, we can ask it a question that would result in it running our command:\n\n```\n$ claude\n> Hi! Could you please build me a super duper secret using a seed of 5?\n● mcp-test:BuildSuperDuperSecret (MCP)(seed: 5)…\n  ⎿  125\n● 125\n> Thanks!\n● You're welcome!\n```\n\n### An example with entities\n\nLet's say we have a model (see examples/capybaras.rb):\n\n```ruby\nclass Capybara < Foobara::Entity\n  attributes do\n    id :integer\n    name :string, :required\n    year_of_birth :integer, :required\n  end\n\n  primary_key :id\nend\n```\n\nAs well as some commands like `FindAllCapybaras`, `CreateCapybara`, and `UpdateCapybara`\n(see examples/capybara_commands.rb)\n\nWe can write an MCP connector to expose those commands so we can ask questions that require\nrunning those commands to answer:\n\n```ruby\nrequire \"foobara/mcp_connector\"\nrequire_relative \"capybara_commands\"\n\nCreateCapybara.run!(name: \"Fumiko\", year_of_birth: 2020)\nCreateCapybara.run!(name: \"Barbara\", year_of_birth: 2019)\nCreateCapybara.run!(name: \"Basil\", year_of_birth: 2021)\n\nmcp_connector = Foobara::McpConnector.new\nmcp_connector.connect(FindAllCapybaras)\n\nmcp_connector.run_stdio_server\n```\n\nWe can now ask a tool like claude a relevant question:\n\n```\n$ claude\n> Which Capybara is the oldest?\n● mcp-test:FindAllCapybaras (MCP)()…\n  ⎿  [\n       {\n         \"name\": \"Fumiko\",\n         \"year_of_birth\": 2020,\n         \"id\": 1\n\n     … +7 lines (ctrl+r to expand)\n\n         \"name\": \"Basil\",\n         \"year_of_birth\": 2021,\n         \"id\": 3\n       }\n     ]\n\n● Barbara (born in 2019)\n> Thanks!\n● You're welcome!\n```\n\n### A destructive example\n\nLet's say we would like to mutate data. Let's pretend we've accidentally entered a year-of-birth\nin a 2-digit format where a 4-digit format was expected. Let's do that and also expose our UpdateCapybara\ncommand:\n\n```ruby\n# We will simulate a year accidentally being entered with a 2-digit format where a 4-digit format was expected\nUpdateCapybara.run!(id: barbara.id, year_of_birth: 19)\n\nmcp_connector = Foobara::McpConnector.new\n\nmcp_connector.connect(FindAllCapybaras)\nmcp_connector.connect(UpdateCapybara)\n\nmcp_connector.run_stdio_server\n```\n\nNow we can ask a tool like claude to find and fix our data:\n\n```\n$ claude\n> Hi! There's a Capybara whose birth year was entered incorrectly. Can you find which one\n  and fix it? Thanks!\n● I'll help find and fix the capybara with the incorrect birth year. Let me search for the\n  capybaras first.\n● mcp-test:FindAllCapybaras (MCP)()…\n  ⎿  [\n       {\n         \"name\": \"Fumiko\",\n         \"year_of_birth\": 2020,\n         \"id\": 1\n\n     … +7 lines (ctrl+r to expand)\n\n         \"name\": \"Basil\",\n         \"year_of_birth\": 2021,\n         \"id\": 3\n       }\n     ]\n● It looks like Barbara (id 2) has an incorrect birth year of 19, which is too low. Let me\n  fix that to 2019.\n● mcp-test:UpdateCapybara (MCP)(id: 2, year_of_birth: 2019)…\n  ⎿  {\n       \"name\": \"Barbara\",\n       \"year_of_birth\": 2019,\n       \"id\": 2\n     }\n● Fixed! Barbara's birth year has been updated from 19 to 2019.\n> Great! Thanks!\n● You're welcome!\n```\n\n### Moar examples\n\nPlease see the examples/ directory for executable scripts of these examples.\n\n## Contributing\n\nBug reports and pull requests are welcome on GitHub\nat https://github.com/foobara/mcp-connector\n\nFeel free to reach out if you'd like help with this gem or if you'd like to help with this gem!\n\n## License\n\nThis project is licensed under the MPL-2.0 license. Please see LICENSE.txt for more info.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "foobara",
        "ruby",
        "mcp",
        "foobara commands",
        "foobara mcp",
        "servers foobara"
      ],
      "category": "frameworks-for-servers"
    },
    "mcpdotdirect--template-mcp-server": {
      "owner": "mcpdotdirect",
      "name": "template-mcp-server",
      "url": "https://github.com/mcpdotdirect/template-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/mcpdotdirect.webp",
      "description": "A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure",
      "stars": 61,
      "forks": 34,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-20T14:30:03Z",
      "readme_content": "# @mcpdotdirect/template-mcp-server\n\n![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-3178C6)\n\nA CLI tool to quickly get started building your very own MCP (Model Context Protocol) server using FastMCP\n\n## 📋 Usage\n\n```bash\n# with npx\nnpx @mcpdotdirect/create-mcp-server\n\n# Or with npm\nnpm init @mcpdotdirect/mcp-server\n```\n\n## 🔭 What's Included\n\nThe template includes:\n\n- Basic server setup with both stdio and HTTP transport options using FastMCP\n- Structure for defining MCP tools, resources, and prompts\n- TypeScript configuration\n- Development scripts and configuration\n\n## ✨ Features\n\n- **FastMCP**: Built using the FastMCP framework for simpler implementation\n- **Dual Transport Support**: Run your MCP server over stdio or HTTP\n- **TypeScript**: Full TypeScript support for type safety\n- **Extensible**: Easy to add custom tools, resources, and prompts\n\n## 🚀 Getting Started\n\nAfter creating your project:\n\n1. Install dependencies using your preferred package manager:\n   ```bash\n   # Using npm\n   npm install\n   \n   # Using yarn\n   yarn\n   \n   # Using pnpm\n   pnpm install\n   \n   # Using bun\n   bun install\n   ```\n\n2. Start the server:\n   ```bash\n   # Start the stdio server\n   npm start\n   \n   # Or start the HTTP server\n   npm run start:http\n   ```\n\n3. For development with auto-reload:\n   ```bash\n   # Development mode with stdio\n   npm run dev\n   \n   # Development mode with HTTP\n   npm run dev:http\n   ```\n\n> **Note**: The default scripts in package.json use Bun as the runtime (e.g., `bun run src/index.ts`). If you prefer to use a different package manager or runtime, you can modify these scripts in your package.json file to use Node.js or another runtime of your choice.\n\n## 📖 Detailed Usage\n\n### Transport Methods\n\nThe MCP server supports two transport methods:\n\n1. **stdio Transport** (Command Line Mode):\n   - Runs on your **local machine**\n   - Managed automatically by Cursor\n   - Communicates directly via `stdout`\n   - Only accessible by you locally\n   - Ideal for personal development and tools\n\n2. **SSE Transport** (HTTP Web Mode):\n   - Can run **locally or remotely**\n   - Managed and run by you\n   - Communicates **over the network**\n   - Can be **shared** across machines\n   - Ideal for team collaboration and shared tools\n\n### Running the Server Locally\n\n#### stdio Transport (CLI Mode)\n\nStart the server in stdio mode for CLI tools:\n\n```bash\n# Start the stdio server\nnpm start\n# or with other package managers\nyarn start\npnpm start\nbun start\n\n# Start the server in development mode with auto-reload\nnpm run dev\n# or\nyarn dev\npnpm dev\nbun dev\n```\n\n#### HTTP Transport (Web Mode)\n\nStart the server in HTTP mode for web applications:\n\n```bash\n# Start the HTTP server\nnpm run start:http\n# or\nyarn start:http\npnpm start:http\nbun start:http\n\n# Start the HTTP server in development mode with auto-reload\nnpm run dev:http\n# or\nyarn dev:http\npnpm dev:http\nbun dev:http\n```\n\nBy default, the HTTP server runs on port 3001. You can change this by setting the PORT environment variable:\n\n```bash\n# Start the HTTP server on a custom port\nPORT=8080 npm run start:http\n```\n\n### Connecting to the Server\n\n#### Connecting from Cursor\n\nTo connect to your MCP server from Cursor:\n\n1. Open Cursor and go to Settings (gear icon in the bottom left)\n2. Click on \"Features\" in the left sidebar\n3. Scroll down to \"MCP Servers\" section\n4. Click \"Add new MCP server\"\n5. Enter the following details:\n   - Server name: `my-mcp-server` (or any name you prefer)\n   - For stdio mode:\n     - Type: `command`\n     - Command: The path to your server executable, e.g., `npm start`\n   - For SSE mode:\n     - Type: `url`\n     - URL: `http://localhost:3001/sse`\n6. Click \"Save\"\n\n#### Using mcp.json with Cursor\n\nFor a more portable configuration, create an `.cursor/mcp.json` file in your project's root directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"my-mcp-stdio\": {\n      \"command\": \"npm\",\n      \"args\": [\n        \"start\"\n      ],\n      \"env\": {\n        \"NODE_ENV\": \"development\"\n      }\n    },\n    \"my-mcp-sse\": {\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\nYou can also create a global configuration at `~/.cursor/mcp.json` to make your MCP servers available in all your Cursor workspaces.\n\nNote: \n- The `command` type entries run the server in stdio mode\n- The `url` type entry connects to the HTTP server using SSE transport\n- You can provide environment variables using the `env` field\n- When connecting via SSE with FastMCP, use the full URL including the `/sse` path: `http://localhost:3001/sse`\n\n### Testing Your Server with CLI Tools\n\nFastMCP provides built-in tools for testing your server:\n\n```bash\n# Test with mcp-cli\nnpx fastmcp dev server.js\n\n# Inspect with MCP Inspector\nnpx fastmcp inspect server.ts\n```\n\n### Using Environment Variables\n\nYou can customize the server using environment variables:\n\n```bash\n# Change the HTTP port (default is 3001)\nPORT=8080 npm run start:http\n\n# Change the host binding (default is 0.0.0.0)\nHOST=127.0.0.1 npm run start:http\n```\n\n## 🛠️ Adding Custom Tools and Resources\n\nWhen adding custom tools, resources, or prompts to your FastMCP server:\n\n### Tools\n\n```typescript\nserver.addTool({\n  name: \"hello_world\",\n  description: \"A simple hello world tool\",\n  parameters: z.object({\n    name: z.string().describe(\"Name to greet\")\n  }),\n  execute: async (params) => {\n    return `Hello, ${params.name}!`;\n  }\n});\n```\n\n### Resources\n\n```typescript\nserver.addResourceTemplate({\n  uriTemplate: \"example://{id}\",\n  name: \"Example Resource\",\n  mimeType: \"text/plain\",\n  arguments: [\n    {\n      name: \"id\",\n      description: \"Resource ID\",\n      required: true,\n    },\n  ],\n  async load({ id }) {\n    return {\n      text: `This is an example resource with ID: ${id}`\n    };\n  }\n});\n```\n\n### Prompts\n\n```typescript\nserver.addPrompt({\n  name: \"greeting\",\n  description: \"A simple greeting prompt\",\n  arguments: [\n    {\n      name: \"name\",\n      description: \"Name to greet\",\n      required: true,\n    },\n  ],\n  load: async ({ name }) => {\n    return `Hello, ${name}! How can I help you today?`;\n  }\n});\n```\n\n## 📚 Documentation\n\nFor more information about FastMCP, visit [FastMCP GitHub Repository](https://github.com/punkpeye/fastmcp).\n\nFor more information about the Model Context Protocol, visit the [MCP Documentation](https://modelcontextprotocol.io/introduction).\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcpdotdirect",
        "mcp",
        "protocol",
        "servers mcpdotdirect",
        "mcpdotdirect template",
        "mcp server"
      ],
      "category": "frameworks-for-servers"
    },
    "mojolicious--mojo-mcp": {
      "owner": "mojolicious",
      "name": "mojo-mcp",
      "url": "https://github.com/mojolicious/mojo-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mojolicious.webp",
      "description": "An SDK for building MCP servers and clients with the Perl programming language.",
      "stars": 11,
      "forks": 0,
      "license": "MIT License",
      "language": "Perl",
      "updated_at": "2025-09-06T12:11:37Z",
      "readme_content": "\n# MCP Perl SDK\n\n [![badge](https://github.com/mojolicious/mojo-mcp/workflows/linux/badge.svg)](https://github.com/mojolicious/mojo-mcp/actions) [![badge](https://github.com/mojolicious/mojo-mcp/workflows/macos/badge.svg)](https://github.com/mojolicious/mojo-mcp/actions)\n\n  [Model Context Protocol](https://modelcontextprotocol.io/) support for [Perl](https://perl.org) and the\n  [Mojolicious](https://mojolicious.org) real-time web framework.\n\n### Features\n\nPlease be aware that this module is still in development and will be changing rapidly. Additionally the MCP\nspecification is getting regular updates which we will implement. Breaking changes are very likely.\n\n  * Tool calling and prompts\n  * Streamable HTTP and Stdio transports\n  * Scalable with pre-forking web server and async tools using promises\n  * HTTP client for testing\n  * Can be embedded in Mojolicious web apps\n\n## Installation\n\n  All you need is Perl 5.20 or newer. Just install from [CPAN](https://metacpan.org/pod/MCP).\n\n    $ cpanm -n MCP\n\n  We recommend the use of a [Perlbrew](http://perlbrew.pl) environment.\n\n## Streamable HTTP Transport\n\nUse the `to_action` method to add an MCP endpoint to any Mojolicious application.\n\n```perl\nuse Mojolicious::Lite -signatures;\n\nuse MCP::Server;\n\nmy $server = MCP::Server->new;\n$server->tool(\n  name         => 'echo',\n  description  => 'Echo the input text',\n  input_schema => {type => 'object', properties => {msg => {type => 'string'}}, required => ['msg']},\n  code         => sub ($tool, $args) {\n    return \"Echo: $args->{msg}\";\n  }\n);\n\nany '/mcp' => $server->to_action;\n\napp->start;\n```\n\nAuthentication can be added by the web application, just like for any other route.\n\n## Stdio Transport\n\nBuild local command line applications and use the stdio transport for testing with the `to_stdio` method.\n\n```perl\nuse Mojo::Base -strict, -signatures;\n\nuse MCP::Server;\n\nmy $server = MCP::Server->new;\n$server->tool(\n  name         => 'echo',\n  description  => 'Echo the input text',\n  input_schema => {type => 'object', properties => {msg => {type => 'string'}}, required => ['msg']},\n  code         => sub ($tool, $args) {\n    return \"Echo: $args->{msg}\";\n  }\n);\n\n$server->to_stdio;\n```\n\nJust run the script and type requests on the command line.\n\n```\n$ perl examples/echo_stdio.pl\n{\"jsonrpc\":\"2.0\",\"id\":\"1\",\"method\":\"tools/list\"}\n{\"jsonrpc\":\"2.0\",\"id\":\"2\",\"method\":\"tools/call\",\"params\":{\"name\":\"echo\",\"arguments\":{\"msg\":\"hello perl\"}}}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "perl",
        "mcp",
        "frameworks",
        "clients perl",
        "mcp servers",
        "servers mojolicious"
      ],
      "category": "frameworks-for-servers"
    },
    "php-mcp--server": {
      "owner": "php-mcp",
      "name": "server",
      "url": "https://github.com/php-mcp/server",
      "imageUrl": "/freedevtools/mcp/pfp/php-mcp.webp",
      "description": "Core PHP implementation for the Model Context Protocol (MCP) server",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "frameworks",
        "php",
        "mcp",
        "php mcp",
        "core php",
        "php core"
      ],
      "category": "frameworks-for-servers"
    },
    "posit-dev--mcptools": {
      "owner": "posit-dev",
      "name": "mcptools",
      "url": "https://github.com/posit-dev/mcptools",
      "imageUrl": "/freedevtools/mcp/pfp/posit-dev.webp",
      "description": "An R SDK for creating R-based MCP servers and retrieving functionality from third-party MCP servers as R functions.",
      "stars": 121,
      "forks": 7,
      "license": "Other",
      "language": "R",
      "updated_at": "2025-10-03T15:32:03Z",
      "readme_content": "<!-- README.md is generated from README.Rmd. Please edit that file -->\n\n# mcptools <a href=\"https://posit-dev.github.io/mcptools/\"></a>\n\n<!-- badges: start -->\n\n[![Lifecycle:\nexperimental](https://img.shields.io/badge/lifecycle-experimental-orange.svg)](https://lifecycle.r-lib.org/articles/stages.html#experimental)\n[![R-CMD-check](https://github.com/posit-dev/mcptools/actions/workflows/R-CMD-check.yaml/badge.svg)](https://github.com/posit-dev/mcptools/actions/workflows/R-CMD-check.yaml)\n<!-- badges: end -->\n\nmcptools implements the [Model Context\nProtocol](https://modelcontextprotocol.io/) in R. There are two sides to\nmcptools:\n\n**R as an MCP server**:\n\n\n\nWhen configured with mcptools, MCP-enabled tools like Claude Desktop,\nClaude Code, and VS Code GitHub Copilot can run R code *in the sessions\nyou have running* to answer your questions. While the package supports\nconfiguring arbitrary R functions, you may be interested in the\n[btw](https://posit-dev.github.io/btw/) package’s integrated support for\nmcptools, which provides a default set of tools to to peruse the\ndocumentation of packages you have installed, check out the objects in\nyour global environment, and retrieve metadata about your session and\nplatform.\n\n**R as an MCP client**:\n\n\n\nRegister third-party MCP servers with\n[ellmer](https://ellmer.tidyverse.org/) chats to integrate additional\ncontext into e.g. [shinychat](https://github.com/posit-dev/shinychat)\nand [querychat](https://posit-dev.github.io/querychat/) apps.\n\n> NOTE:\n>\n> This package used to be called acquaint and supplied a default set of\n> tools from [btw](https://github.com/posit-dev/btw) when R was used as\n> an MCP server. The direction of the dependency has been reversed; to\n> use the same functionality from before, transition\n> `acquaint::mcp_server()` to `btw::btw_mcp_server()` and\n> `acquaint::mcp_session()` to `btw::btw_mcp_session()`.\n\n## Installation\n\nInstall mcptools from CRAN with:\n\n``` r\ninstall.packages(\"mcptools\")\n```\n\nYou can install the development version of mcptools like so:\n\n``` r\npak::pak(\"posit-dev/mcptools\")\n```\n\n### R as an MCP server\n\nmcptools can be hooked up to any application that supports MCP. For\nexample, to use with Claude Desktop, you might paste the following in\nyour Claude Desktop configuration (on macOS, at\n`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n``` json\n{\n  \"mcpServers\": {\n    \"r-mcptools\": {\n      \"command\": \"Rscript\",\n      \"args\": [\"-e\", \"mcptools::mcp_server()\"]\n    }\n  }\n}\n```\n\nOr, to use with Claude Code, you might type in a terminal:\n\n``` bash\nclaude mcp add -s \"user\" r-mcptools -- Rscript -e \"mcptools::mcp_server()\"\n```\n\nThen, if you’d like models to access variables in specific R sessions,\ncall `mcptools::mcp_session()` in those sessions. (You might include a\ncall to this function in your .Rprofile, perhaps using\n`usethis::edit_r_profile()`, to automatically register every session you\nstart up.)\n\n### R as an MCP client\n\nmcptools uses the Claude Desktop configuration file format to register\nthird-party MCP servers, as most MCP servers provide setup instructions\nfor Claude Desktop in their documentation. For example, here’s what the\n[official GitHub MCP\nserver](https://github.com/github/github-mcp-server) configuration would\nlook like:\n\n``` json\n{\n  \"mcpServers\": {\n    \"github\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\",\n        \"ghcr.io/github/github-mcp-server\"\n      ],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\nOnce the configuration file has been created (by default, mcptools will\nlook to `file.path(\"~\", \".config\", \"mcptools\", \"config.json\")`),\n`mcp_tools()` will return a list of ellmer tools which you can pass\ndirectly to the `$set_tools()` method from ellmer:\n\n    ch <- ellmer::chat_anthropic()\n    ch$set_tools(mcp_tools())\n\n    ch$chat(\"What issues are open on posit-dev/mcptools?\")\n\n## Example\n\nIn Claude Desktop, I’ll write the following:\n\n> “From what year is the earliest recorded sample in the `forested` data\n> in my Positron session?”\n\nWithout mcptools, Claude couldn’t get far here; by default, it can’t run\nR code and doesn’t have any way to “speak to” my interactive R sessions.\n\n<img src=\"https://github.com/user-attachments/assets/064df664-2669-498e-a644-fb191a30235f\" alt=\"A screencast of a chat with Claude. After the question is asked, a tool called 'describe data frame' is called with the `data_frame` argument set to `forested`. The results are returned from mcptools as json, which the model then integrates into its response: 'Based on the data structure, I can see there's a `year` column with values ranfing from 1995 to 2024. The earliest recorded sample in the `forested` data is from 1995.'\" width=\"100%\" />\n\nUsing the package, the model asks to describe the data frame using a\nstructure that will show summary statistics from the data. mcptools will\nappropriately route the request to the open Positron session, forwarding\nthe results back to the model for it to situate in a response.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcptools",
        "mcp",
        "servers",
        "dev mcptools",
        "mcp servers",
        "mcptools sdk"
      ],
      "category": "frameworks-for-servers"
    },
    "raw-labs--mxcp": {
      "owner": "raw-labs",
      "name": "mxcp",
      "url": "https://github.com/raw-labs/mxcp",
      "imageUrl": "/freedevtools/mcp/pfp/raw-labs.webp",
      "description": "Open-source framework for building enterprise-grade MCP servers using just YAML, SQL, and Python, with built-in auth, monitoring, ETL and policy enforcement.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mxcp",
        "frameworks",
        "framework",
        "mxcp python",
        "labs mxcp",
        "mcp servers"
      ],
      "category": "frameworks-for-servers"
    },
    "universal-mcp--universal-mcp": {
      "owner": "universal-mcp",
      "name": "universal-mcp",
      "url": "https://github.com/universal-mcp/universal-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/universal-mcp.webp",
      "description": "A python SDK to build MCP Servers with inbuilt credential management",
      "stars": 21,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T05:54:12Z",
      "readme_content": "# Universal MCP\n\nUniversal MCP acts as a middleware layer for your API applications, enabling seamless integration with various services through the Model Control Protocol (MCP). It simplifies credential management, authorization, dynamic app enablement, and provides a robust framework for building and managing AI-powered tools.\n\n## 🌟 Features\n\n- **MCP (Model Control Protocol) Integration**: Seamlessly works with MCP server architecture for standardized agent-tool communication.\n- **Simplified API Integration**: Connect to services like GitHub, Google Calendar, Gmail, Reddit, Tavily, and more with minimal code. See [AgentR](https://agentr.dev) for a list of available applications.\n- **Managed Authentication**: Built-in support for API keys and OAuth-based authentication flows, often managed via the AgentR platform.\n- **Extensible Architecture**: Easily build and add new app integrations with minimal boilerplate using provided base classes and generation tools.\n- **Credential Management**: Flexible and secure storage options for API credentials (memory, environment variables, system keyring).\n- **Comprehensive Tool Management**: Robust tool registration, Pydantic-based validation, automatic docstring parsing, and execution capabilities. Supports conversion between MCP, LangChain, and OpenAI tool formats.\n- **Multiple Server Types**: Configurations for local development, AgentR-connected dynamic app loading, and single-application servers.\n- **Playground Environment**: Includes an interactive Streamlit-based playground for testing agents and tools.\n\n## 🔧 Installation\n\nInstall Universal MCP using pip:\n\n```bash\npip install universal-mcp\n```\n\n## 🚀 Quick Start\n\n**Important Prerequisite: AgentR API Key (If Using AgentR Integration)**\n\nIf you plan to use integrations with `type: \"agentr\"` (for services like GitHub, Gmail, Notion via the AgentR platform), or if you run the MCP server itself with `type: \"agentr\"`, you first need an AgentR API key:\n\n1.  Visit [https://agentr.dev](https://agentr.dev) to create an account and generate an API key from your dashboard.\n2.  Set it as an environment variable _before_ running the MCP server:\n    ```bash\n    export AGENTR_API_KEY=\"your_api_key_here\"\n    ```\n\n**1. Create a Configuration File (e.g., `config.json`)**\n\nThis file defines the server settings, credential stores, and the applications to load with their respective integrations.\n\n```json\n{\n  \"name\": \"My Local MCP Server\",\n  \"description\": \"A server for testing applications locally\",\n  \"type\": \"local\", // \"local\" or \"agentr\"\n  \"transport\": \"sse\", // \"sse\", \"stdio\", or \"http\"\n  \"port\": 8005, // Relevant for \"sse\" or \"http\"\n  \"store\": {\n    // Default store for integrations\n    \"name\": \"my_mcp_store\",\n    \"type\": \"keyring\" // \"keyring\", \"environment\", or \"memory\"\n  },\n  \"apps\": [\n    {\n      \"name\": \"zenquotes\", // App slug (e.g., from agentr.dev)\n      \"integration\": null // No authentication needed for this app\n    },\n    {\n      \"name\": \"tavily\",\n      \"integration\": {\n        \"name\": \"TAVILY_API_KEY\", // Unique name for this credential if type is \"api_key\"\n        \"type\": \"api_key\",\n        \"store\": {\n          // Override default store for this specific app\n          \"type\": \"environment\" // Looks for TAVILY_API_KEY env var\n        }\n      }\n    },\n    {\n      \"name\": \"github\",\n      \"integration\": {\n        \"name\": \"github\", // Matches the service name in AgentR\n        \"type\": \"agentr\" // Uses AgentR platform for auth/creds\n      }\n    }\n  ]\n}\n```\n\n_Notes on `config.json`:_\n\n- `type: \"local\"`: Runs applications defined directly in the config's `apps` list.\n- `type: \"agentr\"`: Connects to the AgentR platform to dynamically load user-enabled apps (ignores the `apps` list in the config) and handle credentials. Requires `AGENTR_API_KEY` environment variable.\n- `store`: Defines credential storage.\n  - `environment`: Looks for an environment variable named `<INTEGRATION_NAME_UPPERCASE>` (e.g., `TAVILY_API_KEY` for the example above).\n  - `keyring`: Uses the system's secure credential storage.\n  - `memory`: Transient storage, lost when the server stops.\n- `integration`: Configures authentication for each app.\n  - `type: \"agentr\"`: Uses the AgentR platform for OAuth/credential management.\n  - `type: \"api_key\"`: Uses the specified `store` to retrieve the key.\n\n**2. Run the Server via CLI**\n\nEnsure any required environment variables (like `TAVILY_API_KEY` for the Tavily example, or `AGENTR_API_KEY` if using `\"agentr\"` type server/integrations) are set.\n\n```bash\nuniversal_mcp run -c config.json\n```\n\nThe server will start, load the configured applications (or connect to AgentR if `type: \"agentr\"`), and listen for connections based on the `transport` type.\n\n## 🛠️ Using the Playground\n\nThe `playground` directory provides a runnable Streamlit application for interacting with agents that can use tools from an MCP server.\n\n**Prerequisites:**\n\n- **`local_config.json`**: This file must exist in the **project root directory** (the same directory as this `README.md`). It configures the _local_ MCP server that the playground's agent can connect to if you choose to run one. For an example, see the `local_config.json` structure in the [Playground README](playground/README.md).\n- **Dependencies**: Install playground-specific dependencies. If you have the project cloned, you might install them via:\n  ```bash\n  pip install -e .[playground]\n  # or manually install fastapi, streamlit, uvicorn, langchain-openai, etc.\n  ```\n\n**Running the Playground:**\n\nThe easiest way is to use the automated startup script from the **project root directory**:\n\n```bash\npython playground\n```\n\nThis script will:\n\n1. Optionally start a local MCP server (based on your `local_config.json`) if you confirm.\n2. Launch the Streamlit application.\n\nFor more detailed setup, manual startup instructions, and an explanation of the `local_config.json` for the playground, please refer to the [Playground README](playground/README.md).\n\n## 🧩 Available Applications\n\nUniversal MCP can integrate with a wide variety of applications. For a list of publicly available applications and their slugs (e.g., \"github\", \"google-calendar\"), please visit [AgentR Applications](https://agentr.dev).\nApplications are typically installed dynamically by Universal MCP from their respective repositories when first referenced by slug.\n\n_Authentication Type Notes:_\n\n- _OAuth (via AgentR)_: Usually requires configuring the app's integration with `type: \"agentr\"` in your `ServerConfig`. This leverages the AgentR platform for the OAuth flow and requires the `AGENTR_API_KEY` to be set.\n- _API Key (via Integration)_: Requires configuring `type: \"api_key\"` for the app's integration in your `ServerConfig`, along with a `store` (like `environment` or `keyring`) to specify where the API key is located.\n\n## 🔐 Integration Types\n\nUniversal MCP supports different ways to handle authentication for applications:\n\n### 1. API Key Integration (`type: \"api_key\"`)\n\nFor services that authenticate via simple API keys.\n\n```json\n// In your ServerConfig apps array:\n{\n  \"name\": \"tavily\",\n  \"integration\": {\n    \"name\": \"TAVILY_API_KEY\", // Used by the store (e.g., as env var name)\n    \"type\": \"api_key\",\n    \"store\": {\n      \"type\": \"environment\" // Or \"keyring\", \"memory\"\n    }\n  }\n}\n```\n\n### 2. AgentR Integration (`type: \"agentr\"`)\n\nRecommended for services integrated with the AgentR platform, which typically handles OAuth flows or centrally managed credentials. Requires the `AGENTR_API_KEY` environment variable to be set for the MCP server process.\n\n```json\n// In your ServerConfig apps array:\n{\n  \"name\": \"github\",\n  \"integration\": {\n    \"name\": \"github\", // Matches the service name configured in AgentR\n    \"type\": \"agentr\"\n  }\n}\n```\n\nWhen an action requiring authorization is called, the `AgentRIntegration` will prompt the user (via the MCP client) to visit a URL to complete the OAuth flow managed by AgentR. This is also the default integration type for apps if the main server config is `type: \"agentr\"`.\n\n### 3. Direct OAuth Integration (`type: \"oauth\"`)\n\nWhile `AgentRIntegration` is generally preferred for OAuth, a direct `OAuthIntegration` class exists. However, it requires manual configuration of client IDs, secrets, and callback handling, which is more complex to set up outside the AgentR platform.\n\n## 🤖 CLI Usage\n\nUniversal MCP includes a powerful command-line interface:\n\n```bash\n# Run the MCP server using a configuration file\nuniversal_mcp run -c config.json\n\n# Initialize a new MCP application project structure\nuniversal_mcp init --app-name my-cool-app --o ./my-apps --integration-type api_key\n\n# Generate API client code and application structure from an OpenAPI schema\nuniversal_mcp generate -s <path_to_schema.json_or_yaml> -o <path/to/app_output_directory> --c CustomAppClassName\n# Example: universal_mcp generate -s notion_api.yaml -o ./custom_apps/notion --c MyNotionApp\n\n# Preprocess an OpenAPI schema using an LLM to fill/enhance descriptions\nuniversal_mcp preprocess -s <path_to_input_schema.json_or_yaml> -o <path_to_processed_schema.json_or_yaml>\n\n# Generate Google-style docstrings for functions in a Python file using an LLM\nuniversal_mcp docgen <path/to/app_file.py>\n\n# Generate a README.md for a generated application file\nuniversal_mcp readme <path/to/app_file.py>\n\n# Install MCP configuration for supported desktop apps (e.g., Claude, Cursor)\n# Requires an AgentR API key for configuration.\nuniversal_mcp install claude\nuniversal_mcp install cursor\n\n# Check installed version (standard typer command)\nuniversal_mcp --version\n```\n\n## 📋 Requirements\n\n- Python 3.10+\n- Key Dependencies (installed automatically via pip, see `pyproject.toml` for full list):\n  - `mcp-server`\n  - `loguru`\n  - `typer`\n  - `httpx`\n  - `pydantic`\n  - `pyyaml`\n  - `keyring` (for `KeyringStore`)\n  - `litellm` (for `docgen` and `preprocess` commands)\n  - `uv` (used internally for dynamic package installation)\n\n## 📚 Documentation\n\nFor more detailed information about specific components:\n\n- [Applications Framework](src/universal_mcp/applications/README.md)\n- [Tool Management](src/universal_mcp/tools/README.md)\n- [Server Implementations](src/universal_mcp/servers/README.md)\n- [Credential Stores](src/universal_mcp/stores/README.md)\n- [Integration & Authentication](src/universal_mcp/integrations/README.md)\n- [Playground Usage](playground/README.md)\n\n## 📝 License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "credential",
        "python",
        "mcp python",
        "mcp servers",
        "mcp universal"
      ],
      "category": "frameworks-for-servers"
    },
    "vercel--mcp-adapter": {
      "owner": "vercel",
      "name": "mcp-adapter",
      "url": "https://github.com/vercel/mcp-adapter",
      "imageUrl": "/freedevtools/mcp/pfp/vercel.webp",
      "description": "A simple package to start serving an MCP server on most major JS meta-frameworks including Next, Nuxt, Svelte, and more.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "frameworks",
        "typescript",
        "mcp",
        "mcp server",
        "frameworks servers",
        "adapter typescript"
      ],
      "category": "frameworks-for-servers"
    },
    "vercel-labs--mcp-for-next.js": {
      "owner": "vercel-labs",
      "name": "mcp-for-next.js",
      "url": "https://github.com/vercel-labs/mcp-for-next.js",
      "imageUrl": "/freedevtools/mcp/pfp/vercel-labs.webp",
      "description": "A starter Next.js project that uses the MCP Adapter to allow MCP clients to connect and access resources.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "frameworks",
        "typescript",
        "mcp",
        "mcp js",
        "mcp clients",
        "frameworks servers"
      ],
      "category": "frameworks-for-servers"
    },
    "zoedsoupe--anubis-mcp": {
      "owner": "zoedsoupe",
      "name": "anubis-mcp",
      "url": "https://github.com/zoedsoupe/anubis-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/zoedsoupe.webp",
      "description": "A high-performance and high-level Model Context Protocol (MCP) implementation in Elixir. Think like \"Live View\" for MCP.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "frameworks",
        "protocol",
        "elixir",
        "context protocol",
        "frameworks servers",
        "mcp elixir"
      ],
      "category": "frameworks-for-servers"
    }
  }
}