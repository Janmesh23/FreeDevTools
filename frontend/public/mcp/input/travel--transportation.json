{
  "category": "travel--transportation",
  "categoryDisplay": "Travel & Transportation",
  "description": "Access to travel and transportation information. Enables querying schedules, routes, and real-time travel data.",
  "totalRepositories": 11,
  "repositories": {
    "KyrieTangSheng--mcp-server-nationalparks": {
      "owner": "KyrieTangSheng",
      "name": "mcp-server-nationalparks",
      "url": "https://github.com/KyrieTangSheng/mcp-server-nationalparks",
      "imageUrl": "",
      "description": "National Park Service API integration providing latest information of park details, alerts, visitor centers, campgrounds, and events for U.S. National Parks",
      "stars": 31,
      "forks": 9,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T05:19:54Z",
      "readme_content": "# National Parks MCP Server\n[![smithery badge](https://smithery.ai/badge/@KyrieTangSheng/mcp-server-nationalparks)](https://smithery.ai/server/@KyrieTangSheng/mcp-server-nationalparks)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/8c07fa61-fd4b-4662-8356-908408e45e44)\n\nMCP Server for the National Park Service (NPS) API, providing real-time information about U.S. National Parks, including park details, alerts, and activities.\n\n## Tools\n\n1. `findParks`\n   - Search for national parks based on various criteria\n   - Inputs:\n     - `stateCode` (optional string): Filter parks by state code (e.g., \"CA\" for California). Multiple states can be comma-separated (e.g., \"CA,OR,WA\")\n     - `q` (optional string): Search term to filter parks by name or description\n     - `limit` (optional number): Maximum number of parks to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `activities` (optional string): Filter by available activities (e.g., \"hiking,camping\")\n   - Returns: Matching parks with detailed information\n\n2. `getParkDetails`\n   - Get comprehensive information about a specific national park\n   - Inputs:\n     - `parkCode` (string): The park code of the national park (e.g., \"yose\" for Yosemite, \"grca\" for Grand Canyon)\n   - Returns: Detailed park information including descriptions, hours, fees, contacts, and activities\n\n3. `getAlerts`\n   - Get current alerts for national parks including closures, hazards, and important information\n   - Inputs:\n     - `parkCode` (optional string): Filter alerts by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")\n     - `limit` (optional number): Maximum number of alerts to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `q` (optional string): Search term to filter alerts by title or description\n   - Returns: Current alerts organized by park\n\n4. `getVisitorCenters`\n   - Get information about visitor centers and their operating hours\n   - Inputs:\n     - `parkCode` (optional string): Filter visitor centers by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")\n     - `limit` (optional number): Maximum number of visitor centers to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `q` (optional string): Search term to filter visitor centers by name or description\n   - Returns: Visitor center information including location, hours, and contact details\n\n5. `getCampgrounds`\n   - Get information about available campgrounds and their amenities\n   - Inputs:\n     - `parkCode` (optional string): Filter campgrounds by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")\n     - `limit` (optional number): Maximum number of campgrounds to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `q` (optional string): Search term to filter campgrounds by name or description\n   - Returns: Campground information including amenities, fees, and reservation details\n\n6. `getEvents`\n   - Find upcoming events at parks\n   - Inputs:\n     - `parkCode` (optional string): Filter events by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")\n     - `limit` (optional number): Maximum number of events to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `dateStart` (optional string): Start date for filtering events (format: YYYY-MM-DD)\n     - `dateEnd` (optional string): End date for filtering events (format: YYYY-MM-DD)\n     - `q` (optional string): Search term to filter events by title or description\n   - Returns: Event information including dates, times, and descriptions\n\n## Setup\n\n### Installing via Smithery\n\nTo install mcp-server-nationalparks for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@KyrieTangSheng/mcp-server-nationalparks):\n\n```bash\nnpx -y @smithery/cli install @KyrieTangSheng/mcp-server-nationalparks --client claude\n```\n\n### NPS API Key\n1. Get a free API key from the [National Park Service Developer Portal](https://www.nps.gov/subjects/developer/get-started.htm)\n2. Store this key securely as it will be used to authenticate requests\n\n### Usage with Claude Desktop\n\nTo use this server with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"nationalparks\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-nationalparks\"],\n      \"env\": {\n        \"NPS_API_KEY\": \"YOUR_NPS_API_KEY\"\n      }\n    }\n  }\n}\n```\n## Example Usage\n\n### Finding Parks in a State\n```\nTell me about national parks in Colorado.\n```\n\n### Getting Details About a Specific Park\n```\nWhat's the entrance fee for Yellowstone National Park?\n```\n\n### Checking for Alerts or Closures\n```\nAre there any closures or alerts at Yosemite right now?\n```\n\n### Finding Visitor Centers\n```\nWhat visitor centers are available at Grand Canyon National Park?\n```\n\n### Looking for Campgrounds\n```\nAre there any campgrounds with electrical hookups in Zion National Park?\n```\n\n### Finding Upcoming Events\n```\nWhat events are happening at Acadia National Park next weekend?\n```\n\n### Planning a Trip Based on Activities\n```\nWhich national parks in Utah have good hiking trails?\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. See the LICENSE file for details.\n\n\n## Appendix: Popular National Parks and their codes\n\n| Park Name | Park Code |\n|-----------|-----------|\n| Yosemite | yose |\n| Grand Canyon | grca |\n| Yellowstone | yell |\n| Zion | zion |\n| Great Smoky Mountains | grsm |\n| Acadia | acad |\n| Olympic | olym |\n| Rocky Mountain | romo |\n| Joshua Tree | jotr |\n| Sequoia & Kings Canyon | seki |\n\nFor a complete list, visit the [NPS website](https://www.nps.gov/findapark/index.htm).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nationalparks",
        "campgrounds",
        "park",
        "server nationalparks",
        "park service",
        "national parks"
      ],
      "category": "travel--transportation"
    },
    "Pradumnasaraf--aviationstack-mcp": {
      "owner": "Pradumnasaraf",
      "name": "aviationstack-mcp",
      "url": "https://github.com/Pradumnasaraf/aviationstack-mcp",
      "imageUrl": "",
      "description": "An MCP server using the AviationStack API to fetch real-time flight data including airline flights, airport schedules, future flights and aircraft types.",
      "stars": 9,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-18T07:13:10Z",
      "readme_content": "## Aviationstack MCP Server\n\nThis project is an **MCP (Model Context Protocol) server** that provides a set of tools to interact with the [AviationStack API](https://aviationstack.com/). It exposes endpoints for retrieving real-time and future flight data, aircraft types, and airplane details, making it easy to integrate aviation data into your applications.\n\n### Demo\n\nhttps://github.com/user-attachments/assets/9325fcce-8ecc-4b01-8923-4ccb2f6968f4\n\n### Features\n\n- **Get flights for a specific airline**\n- **Retrieve arrival and departure schedules for airports**\n- **Fetch future flight schedules**\n- **Get random aircraft types**\n- **Get detailed info on random airplanes**\n- **Get detailed info on random countries**\n- **Get detailed info on random cities**\n\nAll endpoints are implemented as MCP tools and are ready to be used in an MCP-compatible environment.\n\n### Prerequisites\n\n- Aviationstack API Key (You can get a FREE API Key from [Aviationstack](https://aviationstack.com/signup/free))\n- Python 3.13 or newer\n- uv package manager installed\n\n### Available Tools\n\n| Tool | Description | Parameters |\n|------|-------------|------------|\n| `flights_with_airline(airline_name: str, number_of_flights: int)` | Get a random sample of flights for a specific airline. | - **`airline_name`**: Name of the airline (e.g., \"Delta Air Lines\")<br> - **`number_of_flights`**: Number of flights to return |\n| `flight_arrival_departure_schedule(airport_iata_code: str, schedule_type: str, airline_name: str, number_of_flights: int)` | Get arrival or departure schedules for a given airport and airline. | - **`airport_iata_code`**: IATA code of the airport (e.g., \"JFK\")<br> - **`schedule_type`**: \"arrival\" or \"departure\"<br> - **`airline_name`**: Name of the airline<br> - **`number_of_flights`**: Number of flights to return |\n| `future_flights_arrival_departure_schedule(airport_iata_code: str, schedule_type: str, airline_iata: str, date: str, number_of_flights: int)` | Get future scheduled flights for a given airport, airline, and date. | - **`airport_iata_code`** : IATA code of the airport<br> - **`schedule_type`**: \"arrival\" or \"departure\"<br> - **`airline_iata`**: IATA code of the airline (e.g., \"DL\" for Delta)<br> - **`date`**: Date in `YYYY-MM-DD` format<br> - **`number_of_flights`**: Number of flights to return |\n| `random_aircraft_type(number_of_aircraft: int)` | Get random aircraft types. | - **`number_of_aircraft`**: Number of aircraft types to return |\n| `random_airplanes_detailed_info(number_of_airplanes: int)` | Get detailed info on random airplanes. | - **`number_of_airplanes`**: Number of airplanes to return |\n| `random_countries_detailed_info(number_of_countries: int)` | Get detailed info on random countries. | - **`number_of_countries`**: Number of countries to return |\n| `random_cities_detailed_info(number_of_cities: int)` | Get detailed info on random cities. | - **`number_of_cities`**: Number of cities to return |\n\n### Development\n\n- The main server logic is in `server.py`.\n- All MCP tools are defined as Python functions decorated with `@mcp.tool()`.\n- The server uses the `FastMCP` class from `mcp.server.fastmcp`.\n\n### MCP Server configuration\n\nTo add this server to your favorite MCP client, you can add the following to your MCP client configuration file.\n\n1. Using `uvx` without cloning the repository (recommended)\n\n```json\n{\n  \"mcpServers\": {\n    \"Aviationstack MCP\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"aviationstack-mcp\"\n      ],\n      \"env\": {\n        \"AVIATION_STACK_API_KEY\": \"<your-api-key>\"\n      }\n    }\n  }\n}\n```\n\n2. By cloning the repository and running the server locally\n\n```json\n{\n  \"mcpServers\": {\n    \"Aviationstack MCP\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/aviationstack-mcp/src/aviationstack_mcp\",\n        \"run\",\n        \"-m\",\n        \"aviationstack_mcp\",\n        \"mcp\",\n        \"run\"\n      ],\n      \"env\": {\n        \"AVIATION_STACK_API_KEY\": \"<your-api-key>\"\n      }\n    }\n  }\n}\n```\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "aviationstack",
        "mcp",
        "airline",
        "aviationstack mcp",
        "using aviationstack",
        "pradumnasaraf aviationstack"
      ],
      "category": "travel--transportation"
    },
    "campertunity--mcp-server": {
      "owner": "campertunity",
      "name": "mcp-server",
      "url": "https://github.com/campertunity/mcp-server",
      "imageUrl": "",
      "description": "Search campgrounds around the world on campertunity, check availability, and provide booking links",
      "stars": 9,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-17T16:08:52Z",
      "readme_content": "# MCP Server for Campertunity\n\n[![smithery badge](https://smithery.ai/badge/@campertunity/mcp-server)](https://smithery.ai/server/@campertunity/mcp-server)\n\nThis server implements the Model Context Protocol (MCP) for Campertunity, providing AI models with tools to interact with camping and outdoor recreation data.\n\n## MCP Client Config\n\n```\n{\n  \"mcpServers\": {\n    \"campground-search-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"campertunity-mcp-server@latest\"],\n      \"env\": {\n        \"CAMPERTUNITY_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n## Setup\n\n1. Get your API key from [https://campertunity.com/mcp](https://campertunity.com/mcp)\n2. Set the environment variable:\n   ```\n   CAMPERTUNITY_API_KEY=your_api_key_here\n   ```\n\n## Available Tools\n\n### place-search\nSearch for camping places with various filters and criteria.\n- **Parameters:**\n  - `limit`: Number of results (default: 50, max: 1000)\n  - `startDate`: Start date for availability (YYYY-MM-DD)\n  - `endDate`: End date for availability (YYYY-MM-DD)\n  - `adults`: Number of adults (default: 1)\n  - `children`: Number of children (default: 0)\n  - `latitude`: Center point latitude\n  - `longitude`: Center point longitude\n  - `radius`: Search radius in kilometers (default: 20)\n  - `filters`: Array of tags to filter by (see Tag enum below)\n  - `campgroundDescription`: Natural language description of desired campground features\n\n### place-details\nGet detailed information about a specific camping place.\n- **Parameters:**\n  - `placeId`: ID of the place to get details for\n\n### place-availability\nCheck availability of camping sites at a specific place.\n- **Parameters:**\n  - `placeId`: ID of the place to check\n  - `siteIds`: Optional array of specific site IDs to check\n  - `startDate`: Start date (YYYY-MM-DD)\n  - `endDate`: End date (YYYY-MM-DD)\n\n### place-book\nBook a camping site.\n- **Parameters:**\n  - `placeId`: ID of the place to book\n  - `startDate`: Start date (YYYY-MM-DD)\n  - `endDate`: End date (YYYY-MM-DD)\n  - `adults`: Number of adults (default: 1)\n  - `children`: Number of children (default: 0)\n\n## Available Tags for Filtering\n\n### Site Types\n- tent\n- rv\n- lodging\n- glamping\n- cabin\n\n### Access Types\n- driveIn\n- walkIn\n- equestrian\n- boat\n\n### Activities\n- biking\n- boating\n- fishing\n- hiking\n- horsebackRiding\n- paddling\n- windSports\n- surfing\n- swimming\n- whitewaterPaddling\n- wildlifeWatching\n\n### Amenities\n- picnicTable\n- fires\n- toilets\n- outhouse\n- potableWater\n- petFriendly\n- rvHookup\n- rvSanitation\n- trash\n- showers\n- wifi\n- handicap\n\n### Terrain\n- beach\n- cave\n- desert\n- forest\n- hotSpring\n- lake\n- river\n- swimmingHole\n- waterfall\n- creek\n\n## Important Notice\n\nThe data provided through these tools is collected from multiple sources and enhanced with AI. To ensure data accuracy and respect intellectual property rights:\n\n- Do not redistribute the data\n- Do not save or cache the data\n- Do not modify the data\n- Always use real-time data through the server\n\nFor more information, visit [campertunity.com](https://campertunity.com)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "campgrounds",
        "campertunity",
        "transportation",
        "campertunity mcp",
        "search campgrounds",
        "campgrounds world"
      ],
      "category": "travel--transportation"
    },
    "cobanov--teslamate-mcp": {
      "owner": "cobanov",
      "name": "teslamate-mcp",
      "url": "https://github.com/cobanov/teslamate-mcp",
      "imageUrl": "",
      "description": "A Model Context Protocol (MCP) server that provides access to your TeslaMate database, allowing AI assistants to query Tesla vehicle data and analytics.",
      "stars": 102,
      "forks": 13,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-01T13:03:10Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cobanov-teslamate-mcp-badge.png)](https://mseep.ai/app/cobanov-teslamate-mcp)\n\n# TeslaMate MCP Server\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/cobanov/teslamate-mcp)](https://archestra.ai/mcp-catalog/cobanov__teslamate-mcp)\n\nA Model Context Protocol (MCP) server that provides access to your TeslaMate database, allowing AI assistants to query Tesla vehicle data and analytics.\n\n<a href=\"https://glama.ai/mcp/servers/@cobanov/teslamate-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@cobanov/teslamate-mcp/badge\" alt=\"teslamate-mcp MCP server\" />\n</a>\n\n\n\n\n## Overview\n\nThis MCP server connects to your TeslaMate PostgreSQL database and exposes various tools to retrieve Tesla vehicle information, driving statistics, charging data, battery health, efficiency metrics, and location analytics. It's designed to work with MCP-compatible AI assistants like Claude Desktop, enabling natural language queries about your Tesla data.\n\n## Prerequisites\n\n- [TeslaMate](https://github.com/teslamate-org/teslamate) running with a PostgreSQL database\n- Python 3.11 or higher\n- Access to your TeslaMate database\n\n## Installation\n\n### Option 1: Local Installation\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/yourusername/teslamate-mcp.git\n   cd teslamate-mcp\n   ```\n\n2. Install dependencies using uv (recommended):\n\n   ```bash\n   uv sync\n   ```\n\n   Or using pip:\n\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n3. Create a `.env` file in the project root:\n   ```env\n   DATABASE_URL=postgresql://username:password@hostname:port/teslamate\n   ```\n\n### Option 2: Docker Deployment (Remote Access)\n\nFor remote deployment using Docker. Quick start:\n\n```bash\n# Clone and navigate to the repository\ngit clone https://github.com/yourusername/teslamate-mcp.git\ncd teslamate-mcp\n\n# Run the deployment script\n./deploy.sh deploy\n\n# Or manually:\ncp env.example .env\n# Edit .env with your database credentials\ndocker-compose up -d\n```\n\nThe remote server will be available at:\n- Streamable HTTP: `http://localhost:8888/mcp`\n\n#### Configuring Authentication (Optional)\n\nTo secure your remote MCP server with bearer token authentication:\n\n1. Set a bearer token in your `.env` file:\n   ```env\n   AUTH_TOKEN=your-secret-bearer-token-here\n   ```\n\n   Generate a secure token:\n   ```bash\n   # Use the provided token generator\n   python3 generate_token.py\n   \n   # Or generate manually with openssl\n   openssl rand -base64 32\n   \n   # Or use any other method to create a secure random string\n   ```\n\n2. When connecting from MCP clients, include the Authorization header:\n   ```json\n   {\n     \"mcpServers\": {\n       \"teslamate-remote\": {\n         \"url\": \"http://your-server:8888/mcp\",\n         \"transport\": \"streamable_http\",\n         \"headers\": {\n           \"Authorization\": \"Bearer your-secret-bearer-token-here\"\n         }\n       }\n     }\n   }\n   ```\n\n3. Or use curl for testing:\n   ```bash\n   curl -H \"Authorization: Bearer your-secret-bearer-token-here\" \\\n        http://localhost:8888/mcp\n   ```\n\n#### Security Considerations\n\n- **Use HTTPS in production**: Bearer tokens are sent in plain text. Always use HTTPS/TLS in production environments.\n- **Strong tokens**: Use long, random tokens (at least 32 characters).\n- **Environment variables**: Never commit tokens to version control. Use environment variables or secrets management.\n- **Network security**: Consider using a VPN or restricting access by IP address for additional security.\n- **Token rotation**: Regularly rotate your bearer tokens.\n\n## Available Tools\n\nThe MCP server provides 20 tools for querying your TeslaMate data:\n\n### Pre-defined Query Tools\n1. `get_basic_car_information` - Basic vehicle details (VIN, model, name, color, etc.)\n2. `get_current_car_status` - Current state, location, battery level, and temperature\n3. `get_software_update_history` - Timeline of software updates\n4. `get_battery_health_summary` - Battery degradation and health metrics\n5. `get_battery_degradation_over_time` - Historical battery capacity trends\n6. `get_daily_battery_usage_patterns` - Daily battery consumption patterns\n7. `get_tire_pressure_weekly_trends` - Tire pressure history and trends\n8. `get_monthly_driving_summary` - Monthly distance, efficiency, and driving time\n9. `get_daily_driving_patterns` - Daily driving habits and patterns\n10. `get_longest_drives_by_distance` - Top drives by distance with details\n11. `get_total_distance_and_efficiency` - Overall driving statistics\n12. `get_drive_summary_per_day` - Daily drive summaries\n13. `get_efficiency_by_month_and_temperature` - Efficiency analysis by temperature\n14. `get_average_efficiency_by_temperature` - Temperature impact on efficiency\n15. `get_unusual_power_consumption` - Anomalous power usage detection\n16. `get_charging_by_location` - Charging statistics by location\n17. `get_all_charging_sessions_summary` - Complete charging history summary\n18. `get_most_visited_locations` - Frequently visited places\n\n### Custom Query Tools\n19. `get_database_schema` - Returns complete database schema (tables, columns, data types)\n20. `run_sql` - Execute custom SELECT queries with safety validation\n    - Only SELECT statements allowed\n    - Prevents DROP, CREATE, INSERT, UPDATE, DELETE, ALTER, etc.\n    - Blocks multiple statement execution\n    - Safely handles strings and comments\n\n## Configuration\n\n### Environment Variables\n\n- `DATABASE_URL`: PostgreSQL connection string for your TeslaMate database\n\n### MCP Client Configuration\n\nTo use this server with Claude Desktop, add the following to your MCP configuration file:\n\n**macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n#### Local Configuration (stdio transport)\n\n```json\n{\n  \"mcpServers\": {\n    \"teslamate\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"python\", \"/path/to/teslamate-mcp/main.py\"],\n      \"env\": {\n        \"DATABASE_URL\": \"postgresql://username:password@hostname:port/teslamate\"\n      }\n    }\n  }\n}\n```\n\n#### Remote Configuration (streamable HTTP transport)\n\nFor connecting to a remote server:\n\n```json\n{\n  \"mcpServers\": {\n    \"TeslaMate\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"http://your-private-server:8888/mcp\",\n        \"--allow-http\"\n      ]\n    }\n  }\n}\n```\n\nWith authentication enabled:\n\n```json\n{\n  \"mcpServers\": {\n    \"TeslaMate\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"http://your-private-server:8888/mcp\",\n        \"--allow-http\",\n        \"--header\",\n        \"Authorization:${AUTH_HEADER}\"\n      ],\n      \"env\": {\n        \"AUTH_HEADER\": \"Bearer <secret bearer token>\"\n      }\n    }\n  }\n}\n```\n\n## Usage\n\n### Running the Server (STDIO)\n\n```bash\nuv run python main.py\n```\n\n### Example Queries\n\nOnce configured with an MCP client, you can ask natural language questions organized by category:\n\n#### Basic Vehicle Information\n\n- \"What's my Tesla's basic information?\"\n- \"Show me my current car status\"\n- \"What software updates has my Tesla received?\"\n\n#### Battery and Health\n\n- \"How is my battery health?\"\n- \"Show me battery degradation over time\"\n- \"What are my daily battery usage patterns?\"\n- \"How are my tire pressures trending?\"\n\n#### Driving Analytics\n\n- \"Show me my monthly driving summary\"\n- \"What are my daily driving patterns?\"\n- \"What are my longest drives by distance?\"\n- \"What's my total distance driven and efficiency?\"\n\n#### Efficiency Analysis\n\n- \"How does temperature affect my efficiency?\"\n- \"Show me efficiency trends by month and temperature\"\n- \"Are there any unusual power consumption patterns?\"\n\n#### Charging and Location Data\n\n- \"Where do I charge most frequently?\"\n- \"Show me all my charging sessions summary\"\n- \"What are my most visited locations?\"\n\n#### Custom SQL Queries\n\n- \"Show me the database schema\"\n- \"Run a SQL query to find drives longer than 100km\"\n- \"Query the average charging power by location\"\n- \"Find all charging sessions at superchargers\"\n\n**Note**: The `run_sql` tool only allows SELECT queries. All data modification operations (INSERT, UPDATE, DELETE, DROP, etc.) are strictly forbidden for safety.\n\n## Adding New Queries\n\n1. Create a new SQL file in the `queries/` directory\n2. Add a corresponding tool function in `main.py`\n3. Follow the existing pattern for error handling and database connections\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- [TeslaMate](https://github.com/teslamate-org/teslamate) - Tesla data logging software\n- [Model Context Protocol](https://modelcontextprotocol.io/) - Protocol for AI-tool integration\n\nFor bugs and feature requests, please open an issue on GitHub.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "protocol",
        "teslamate",
        "teslamate mcp",
        "protocol mcp",
        "mcp model"
      ],
      "category": "travel--transportation"
    },
    "helpful-AIs--triplyfy-mcp": {
      "owner": "helpful-AIs",
      "name": "triplyfy-mcp",
      "url": "https://github.com/helpful-AIs/triplyfy-mcp",
      "imageUrl": "",
      "description": "An MCP server that lets LLMs plan and manage itineraries with interactive maps in Triplyfy; manage itineraries, places and notes, and search/save flights.",
      "stars": 2,
      "forks": 2,
      "license": "No License",
      "language": "",
      "updated_at": "2025-08-28T23:34:51Z",
      "readme_content": "## Triplyfy MCP — Claude Desktop Setup\n\n### What it is\nA remote MCP server that lets Claude plan, edit, and save your trips to Triplyfy.\n\n### What is Triplyfy?\nA simple trip‑planning app to create and share itineraries. View is public by link, editing requires Google sign‑in. Drag‑and‑drop places and notes across days, see everything on a map, and add flights.\n\n\n\n### How to install (Claude Desktop)\nOpen Claude Desktop → Settings → Developer → MCP Servers → Add server\n\n- Name: `Triplyfy`\n- MCP SSE endpoint: `https://triplyfy.com/mcp/sse`\n\nOn first connect, you’ll be prompted to sign in with Google and approve access. No manual gateway run is required.\n\n### How it works\n- Claude opens Google sign‑in (OAuth) on first connect.\n- Claude exchanges a code for a Triplyfy session token (~30 days).\n- The token only authenticates your requests from Claude to Triplyfy.\n- The server performs only actions you ask (create/read/update trips, search flights).\n\n### Links & Contact\n- Website: https://triplyfy.com/\n- Email: kirill2003de@gmail.com",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "travel",
        "mcp",
        "triplyfy",
        "triplyfy mcp",
        "maps triplyfy",
        "travel data"
      ],
      "category": "travel--transportation"
    },
    "lucygoodchild--mcp-national-rail": {
      "owner": "lucygoodchild",
      "name": "mcp-national-rail",
      "url": "https://github.com/lucygoodchild/mcp-national-rail",
      "imageUrl": "",
      "description": "An MCP server for UK National Rail trains service, providing train schedules and live travel information, intergrating the Realtime Trains API",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-16T19:44:00Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@lucygoodchild/mcp-national-rail)](https://smithery.ai/server/@lucygoodchild/mcp-national-rail)\n\n# mcp-national-rail\n\nA Model Context Protocol (MCP) server to retrieve train schedules from National Rail.\n\n## Overview\n\nThis project implements a server using the Model Context Protocol (MCP) that allows AI agents to retrieve train information on National Rail trains using the Realtime Trains API. \n\nIt provides tools for:\n- get_live_departures\n- get_live_arrivals\n- get_departures_by_date\n- get_arrivals_by_date\n\n## Installation\n\nReal Time Trains API account can be created from here: https://api.rtt.io/ \n\nYou will need to note down your API Auth credentials \n\n### Installing via Smithery\n\nTo install mcp-national-rail for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lucygoodchild/mcp-national-rail):\n\n```bash\nnpx -y @smithery/cli install @lucygoodchild/mcp-national-rail --client claude\n```\n\n### Manual Installation for Claude Desktop\n\n#### Prerequisites\n- Node.js\n\n#### Setup\n\n1. Clone this repository\n2. Install dependencies\n```bash\nnpm install\n```\n3. Build and start the project\n```bash\nnpm run build\nnpm run start\n```\n4. Add the following to your MCP client configuration (~/Library/Application Support/Claude/claude_desktop_config.json):\n```bash\n{\n  \"mcpServers\": {\n    \"mcp-national-rail\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-national-rail/dist/index.js\"],\n      \"env\": {\n        \"RTT_API_USERNAME\": \"your_rtt_api_username\",\n        \"RTT_API_PASSWORD\": \"your_rtt_api_password\"\n      }\n    }\n  }\n}\n```\nMake sure to replace \"/path/to/mcp-national-rail/dist/index.js\" with the actual path and add your RTT API username and password which can be created from here: https://api.rtt.io/\n\n5. Restart Claude\n\n### Development\n- Create .env file based on the example file\n```bash\nRTT_API_USERNAME=your_rtt_api_username\nRTT_API_PASSWORD=your_rtt_api_password\n```\n\nRun the inspector with the following command:\n```bash\nnpx @modelcontextprotocol/inspector node dist/index.js\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "transportation",
        "trains",
        "mcp server",
        "trains service",
        "trains api"
      ],
      "category": "travel--transportation"
    },
    "openbnb-org--mcp-server-airbnb": {
      "owner": "openbnb-org",
      "name": "mcp-server-airbnb",
      "url": "https://github.com/openbnb-org/mcp-server-airbnb",
      "imageUrl": "",
      "description": "Provides tools to search Airbnb and get listing details.",
      "stars": 299,
      "forks": 75,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T11:16:22Z",
      "readme_content": "# Airbnb Search & Listings - Desktop Extension (DXT)\n\nA comprehensive Desktop Extension for searching Airbnb listings with advanced filtering capabilities and detailed property information retrieval. Built as a Model Context Protocol (MCP) server packaged in the Desktop Extension (DXT) format for easy installation and use with compatible AI applications.\n\n## Features\n\n### 🔍 Advanced Search Capabilities\n- **Location-based search** with support for cities, states, and regions\n- **Google Maps Place ID** integration for precise location targeting\n- **Date filtering** with check-in and check-out date support\n- **Guest configuration** including adults, children, infants, and pets\n- **Price range filtering** with minimum and maximum price constraints\n- **Pagination support** for browsing through large result sets\n\n### 🏠 Detailed Property Information\n- **Comprehensive listing details** including amenities, policies, and highlights\n- **Location information** with coordinates and neighborhood details\n- **House rules and policies** for informed booking decisions\n- **Property descriptions** and key features\n- **Direct links** to Airbnb listings for easy booking\n\n### 🛡️ Security & Compliance\n- **Robots.txt compliance** with configurable override for testing\n- **Request timeout management** to prevent hanging requests\n- **Enhanced error handling** with detailed logging\n- **Rate limiting awareness** and respectful API usage\n- **Secure configuration** through DXT user settings\n\n## Installation\n\n### For Claude Desktop\nThis extension is packaged as a Desktop Extension (DXT) file. To install:\n\n1. Download the `.dxt` file from the releases page\n2. Open your compatible AI application (e.g., Claude Desktop)\n3. Install the extension through the application's extension manager\n4. Configure the extension settings as needed\n\n### For Cursor, etc.\n\nBefore starting make sure [Node.js](https://nodejs.org/) is installed on your desktop for `npx` to work.\n1. Go to: Cursor Settings > Tools & Integrations > New MCP Server\n\n2. Add one the following to your `mcp.json`:\n    ```json\n    {\n      \"mcpServers\": {\n        \"airbnb\": {\n          \"command\": \"npx\",\n          \"args\": [\n            \"-y\",\n            \"@openbnb/mcp-server-airbnb\"\n          ]\n        }\n      }\n    }\n    ```\n\n    To ignore robots.txt for all requests, use this version with `--ignore-robots-txt` args\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"airbnb\": {\n          \"command\": \"npx\",\n          \"args\": [\n            \"-y\",\n            \"@openbnb/mcp-server-airbnb\",\n            \"--ignore-robots-txt\"\n          ]\n        }\n      }\n    }\n    ```\n3. Restart.\n\n\n## Configuration\n\nThe extension provides the following user-configurable options:\n\n### Ignore robots.txt\n- **Type**: Boolean (checkbox)\n- **Default**: `false`\n- **Description**: Bypass robots.txt restrictions when making requests to Airbnb\n- **Recommendation**: Keep disabled unless needed for testing purposes\n\n## Tools\n\n### `airbnb_search`\n\nSearch for Airbnb listings with comprehensive filtering options.\n\n**Parameters:**\n- `location` (required): Location to search (e.g., \"San Francisco, CA\")\n- `placeId` (optional): Google Maps Place ID (overrides location)\n- `checkin` (optional): Check-in date in YYYY-MM-DD format\n- `checkout` (optional): Check-out date in YYYY-MM-DD format\n- `adults` (optional): Number of adults (default: 1)\n- `children` (optional): Number of children (default: 0)\n- `infants` (optional): Number of infants (default: 0)\n- `pets` (optional): Number of pets (default: 0)\n- `minPrice` (optional): Minimum price per night\n- `maxPrice` (optional): Maximum price per night\n- `cursor` (optional): Pagination cursor for browsing results\n- `ignoreRobotsText` (optional): Override robots.txt for this request\n\n**Returns:**\n- Search results with property details, pricing, and direct links\n- Pagination information for browsing additional results\n- Search URL for reference\n\n### `airbnb_listing_details`\n\nGet detailed information about a specific Airbnb listing.\n\n**Parameters:**\n- `id` (required): Airbnb listing ID\n- `checkin` (optional): Check-in date in YYYY-MM-DD format\n- `checkout` (optional): Check-out date in YYYY-MM-DD format\n- `adults` (optional): Number of adults (default: 1)\n- `children` (optional): Number of children (default: 0)\n- `infants` (optional): Number of infants (default: 0)\n- `pets` (optional): Number of pets (default: 0)\n- `ignoreRobotsText` (optional): Override robots.txt for this request\n\n**Returns:**\n- Detailed property information including:\n  - Location details with coordinates\n  - Amenities and facilities\n  - House rules and policies\n  - Property highlights and descriptions\n  - Direct link to the listing\n\n## Technical Details\n\n### Architecture\n- **Runtime**: Node.js 18+\n- **Protocol**: Model Context Protocol (MCP) via stdio transport\n- **Format**: Desktop Extension (DXT) v0.1\n- **Dependencies**: Minimal external dependencies for security and reliability\n\n### Error Handling\n- Comprehensive error logging with timestamps\n- Graceful degradation when Airbnb's page structure changes\n- Timeout protection for network requests\n- Detailed error messages for troubleshooting\n\n### Security Measures\n- Robots.txt compliance by default\n- Request timeout limits\n- Input validation and sanitization\n- Secure environment variable handling\n- No sensitive data storage\n\n### Performance\n- Efficient HTML parsing with Cheerio\n- Request caching where appropriate\n- Minimal memory footprint\n- Fast startup and response times\n\n## Compatibility\n\n- **Platforms**: macOS, Windows, Linux\n- **Node.js**: 18.0.0 or higher\n- **Claude Desktop**: 0.10.0 or higher\n- **Other MCP clients**: Compatible with any MCP-supporting application\n\n## Development\n\n### Building from Source\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Watch for changes during development\nnpm run watch\n```\n\n### Testing\n\nThe extension can be tested by running the MCP server directly:\n\n```bash\n# Run with robots.txt compliance (default)\nnode dist/index.js\n\n# Run with robots.txt ignored (for testing)\nnode dist/index.js --ignore-robots-txt\n```\n\n## Legal and Ethical Considerations\n\n- **Respect Airbnb's Terms of Service**: This extension is for legitimate research and booking assistance\n- **Robots.txt Compliance**: The extension respects robots.txt by default\n- **Rate Limiting**: Be mindful of request frequency to avoid overwhelming Airbnb's servers\n- **Data Usage**: Only extract publicly available information for legitimate purposes\n\n## Support\n\n- **Issues**: Report bugs and feature requests on [GitHub Issues](https://github.com/openbnb-org/mcp-server-airbnb/issues)\n- **Documentation**: Additional documentation available in the repository\n- **Community**: Join discussions about MCP and DXT development\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Contributing\n\nContributions are welcome! Please read the contributing guidelines and submit pull requests for any improvements.\n\n---\n\n**Note**: This extension is not affiliated with Airbnb, Inc. It is an independent tool designed to help users search and analyze publicly available Airbnb listings.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openbnb",
        "airbnb",
        "travel",
        "airbnb provides",
        "server airbnb",
        "search airbnb"
      ],
      "category": "travel--transportation"
    },
    "pab1it0--tripadvisor-mcp": {
      "owner": "pab1it0",
      "name": "tripadvisor-mcp",
      "url": "https://github.com/pab1it0/tripadvisor-mcp",
      "imageUrl": "",
      "description": "A MCP server that enables LLMs to interact with Tripadvisor API, supporting location data, reviews, and photos through standardized MCP interfaces",
      "stars": 48,
      "forks": 10,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-26T17:50:55Z",
      "readme_content": "# Tripadvisor MCP Server\n\nA [Model Context Protocol][mcp] (MCP) server for Tripadvisor Content API.\n\nThis provides access to Tripadvisor location data, reviews, and photos through standardized MCP interfaces, allowing AI assistants to search for travel destinations and experiences.\n\n[mcp]: https://modelcontextprotocol.io\n\n## Features\n\n- [x] Search for locations (hotels, restaurants, attractions) on Tripadvisor\n- [x] Get detailed information about specific locations\n- [x] Retrieve reviews and photos for locations\n- [x] Search for nearby locations based on coordinates\n- [x] API Key authentication\n- [x] Docker containerization support\n\n- [x] Provide interactive tools for AI assistants\n\nThe list of tools is configurable, so you can choose which tools you want to make available to the MCP client.\n\n## Usage\n\n1. Get your Tripadvisor Content API key from the [Tripadvisor Developer Portal](https://developer.tripadvisor.com/).\n\n2. Configure the environment variables for your Tripadvisor Content API, either through a `.env` file or system environment variables:\n\n```env\n# Required: Tripadvisor Content API configuration\nTRIPADVISOR_API_KEY=your_api_key_here\n```\n\n3. Add the server configuration to your client configuration file. For example, for Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"tripadvisor\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<full path to tripadvisor-mcp directory>\",\n        \"run\",\n        \"src/tripadvisor_mcp/main.py\"\n      ],\n      \"env\": {\n        \"TRIPADVISOR_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n> Note: if you see `Error: spawn uv ENOENT` in Claude Desktop, you may need to specify the full path to `uv` or set the environment variable `NO_UV=1` in the configuration.\n\n## Docker Usage\n\nThis project includes Docker support for easy deployment and isolation.\n\n### Building the Docker Image\n\nBuild the Docker image using:\n\n```bash\ndocker build -t tripadvisor-mcp-server .\n```\n\n### Running with Docker\n\nYou can run the server using Docker in several ways:\n\n#### Using docker run directly:\n\n```bash\ndocker run -it --rm \\\n  -e TRIPADVISOR_API_KEY=your_api_key_here \\\n  tripadvisor-mcp-server\n```\n\n#### Using docker-compose:\n\nCreate a `.env` file with your Tripadvisor API key and then run:\n\n```bash\ndocker-compose up\n```\n\n### Running with Docker in Claude Desktop\n\nTo use the containerized server with Claude Desktop, update the configuration to use Docker with the environment variables:\n\n```json\n{\n  \"mcpServers\": {\n    \"tripadvisor\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"TRIPADVISOR_API_KEY\",\n        \"tripadvisor-mcp-server\"\n      ],\n      \"env\": {\n        \"TRIPADVISOR_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nThis configuration passes the environment variables from Claude Desktop to the Docker container by using the `-e` flag with just the variable name, and providing the actual values in the `env` object.\n\n## Development\n\nContributions are welcome! Please open an issue or submit a pull request if you have any suggestions or improvements.\n\nThis project uses [`uv`](https://github.com/astral-sh/uv) to manage dependencies. Install `uv` following the instructions for your platform:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nYou can then create a virtual environment and install the dependencies with:\n\n```bash\nuv venv\nsource .venv/bin/activate  # On Unix/macOS\n.venv\\Scripts\\activate     # On Windows\nuv pip install -e .\n```\n\n## Project Structure\n\nThe project has been organized with a `src` directory structure:\n\n```\ntripadvisor-mcp/\n├── src/\n│   └── tripadvisor_mcp/\n│       ├── __init__.py      # Package initialization\n│       ├── server.py        # MCP server implementation\n│       ├── main.py          # Main application logic\n├── Dockerfile               # Docker configuration\n├── docker-compose.yml       # Docker Compose configuration\n├── .dockerignore            # Docker ignore file\n├── pyproject.toml           # Project configuration\n└── README.md                # This file\n```\n\n### Testing\n\nThe project includes a test suite that ensures functionality and helps prevent regressions.\n\nRun the tests with pytest:\n\n```bash\n# Install development dependencies\nuv pip install -e \".[dev]\"\n\n# Run the tests\npytest\n\n# Run with coverage report\npytest --cov=src --cov-report=term-missing\n```\n\n### Tools\n\n| Tool | Category | Description |\n| --- | --- | --- |\n| `search_locations` | Search | Search for locations by query text, category, and other filters |\n| `search_nearby_locations` | Search | Find locations near specific coordinates |\n| `get_location_details` | Retrieval | Get detailed information about a location |\n| `get_location_reviews` | Retrieval | Retrieve reviews for a location |\n| `get_location_photos` | Retrieval | Get photos for a location |\n\n## License\n\nMIT\n\n---\n\n[mcp]: https://modelcontextprotocol.io\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tripadvisor",
        "mcp",
        "pab1it0",
        "tripadvisor mcp",
        "mcp server",
        "pab1it0 tripadvisor"
      ],
      "category": "travel--transportation"
    },
    "r-huijts--ns-mcp-server": {
      "owner": "r-huijts",
      "name": "ns-mcp-server",
      "url": "https://github.com/r-huijts/ns-mcp-server",
      "imageUrl": "",
      "description": "Access Dutch Railways (NS) travel information, schedules, and real-time updates",
      "stars": 43,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-23T15:08:10Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/r-huijts-ns-mcp-server-badge.png)](https://mseep.ai/app/r-huijts-ns-mcp-server)\n\n| <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b7/Nederlandse_Spoorwegen_logo.svg\" alt=\"NS Logo\" width=\"380\"/> | <img src=\"https://glama.ai/mcp/servers/tzd5oz5tov/badge\" alt=\"NS Travel Information Server MCP server\" width=\"380\"/> |\n|:---:|:---:|\n\n# NS Travel Information MCP Server\n\n[![smithery badge](https://smithery.ai/badge/ns-server)](https://smithery.ai/server/ns-server)\n[![npm version](https://badge.fury.io/js/ns-mcp-server.svg)](https://www.npmjs.com/package/ns-mcp-server)\n\nTransform your AI assistant into a Dutch railways expert! This MCP server connects Claude to real-time NS (Nederlandse Spoorwegen) travel information, making it your perfect companion for navigating the Netherlands by train.\n\n## Installation\n\nYou can install this server in three ways:\n\n### 1. Using Claude Desktop with NPM Package\n\nUpdate your Claude configuration file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"ns-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"ns-mcp-server\"\n      ],\n      \"env\": {\n        \"NS_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nYou can get an API key from [NS API Portal](https://apiportal.ns.nl/)\n\n### 2. Using Smithery\n\nTo install NS Travel Information Server automatically via [Smithery](https://smithery.ai/server/ns-server):\n\n```bash\nnpx -y @smithery/cli install ns-server --client claude\n```\n\n### 3. From Source\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Copy the example environment file:\n   ```bash\n   cp .env.example .env\n   ```\n4. Add your NS API key to the `.env` file:\n   ```\n   NS_API_KEY=your_api_key_here\n   ```\n\nThen update your Claude configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"ns-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/ns-server/build/index.js\"\n      ],\n      \"env\": {\n        \"NS_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nMake sure to:\n1. Replace `/path/to/ns-server` with the actual path to your installation\n2. Add your NS API key in the `env` section. It can be obtained from here [https://apiportal.ns.nl/product#product=NsApp](https://apiportal.ns.nl/product#product=NsApp)\n\nAfter updating the configuration, restart Claude Desktop for the changes to take effect.\n\n## Real-World Use Cases\n\n- \"Is my usual 8:15 train from Almere to Amsterdam running on time?\"\n- \"Are there any delays on the Rotterdam-Den Haag route today?\"\n- \"What's the best alternative route to Utrecht if there's maintenance on the direct line?\"\n- \"Which train should I take to arrive at my office in Amsterdam Zuid before 9 AM?\"\n- \"Which route to Amsterdam has the fewest transfers with a stroller?\"\n- \"What's the earliest train I can take to make my 10 AM meeting in The Hague?\"\n- \"When's the last train back to Groningen after a night out in Amsterdam?\"\n- \"Are there any weekend engineering works that might affect my Monday morning class?\"\n- \"Are there OV-fiets bikes available at Utrecht Centraal for my afternoon meeting?\"\n- \"Is Eindhoven Strijp-S station wheelchair accessible and what platforms does it have?\"\n- \"What trains are arriving at Utrecht Centraal in the next hour?\"\n- \"Has the train from Venlo to Schiphol Airport arrived on time?\"\n- \"How much does a first-class ticket from Amsterdam to Rotterdam cost?\"\n- \"What's the price for 2 adults and 1 child traveling to Den Haag?\"\n\n## 🔑 Environment Variables\n\n| Variable | Description |\n|----------|-------------|\n| NS_API_KEY | Your NS API key (required) |\n\n## 🌟 Features\n\nThis MCP server provides comprehensive access to NS train information through the following endpoints:\n\n### Real-time Train Information\n- **Departures**: Get real-time departure information including platform numbers, delays, and travel notes\n- **Arrivals**: Access upcoming train arrivals with origin stations, platform changes, and status updates\n- **Journey Planning**: Find optimal travel routes with transfers and real-time updates\n- **Service Updates**: Check for disruptions, maintenance work, and engineering activities\n\n### Pricing Information\n- **Ticket Prices**: Get accurate pricing for single and return journeys\n- **Travel Classes**: Compare prices for first and second class travel\n- **Group Pricing**: Calculate fares for adults and children\n- **Discount Options**: Check joint journey discounts and special offers\n- **Validity Details**: View ticket validity periods and travel conditions\n\n### Station Information\n- **Station Details**: Access comprehensive station information including:\n  - Facilities and accessibility features\n  - Platform layouts and track information\n  - OV-fiets (bike rental) availability\n  - Location and approach details\n\n### Additional Features\n- **Multi-language Support**: Information available in Dutch and English\n- **Flexible Queries**: Search by station name, code, or UIC identifier\n- **Time Zones**: Proper handling of time zones for international stations\n- **Status Updates**: Track changes, delays, and cancellations in real-time\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "transportation",
        "railways",
        "ns",
        "ns travel",
        "railways ns",
        "travel data"
      ],
      "category": "travel--transportation"
    },
    "skedgo--tripgo-mcp-server": {
      "owner": "skedgo",
      "name": "tripgo-mcp-server",
      "url": "https://github.com/skedgo/tripgo-mcp-server",
      "imageUrl": "",
      "description": "Provides tools from the TripGo API for multi-modal trip planning, transport locations, and public transport departures, including real-time information.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-15T02:54:20Z",
      "readme_content": "# TripGo MCP Server\n\nThe is a remote MCP server that wraps the TripGo API and provides the following tools:\n\n- `tripgo-locations`: Retrieve transport-related locations\n- `tripgo-departures`: Departures from a specific public transport stop\n- `tripgo-routing`: Mixed and multi-modal trip planning\n- `tripgo-get-trip-url`: Get the URL of a trip previously calculated using the `tripgo-routing` tool\n\nThe MCP server is deployed on Cloudflare Workers.\n\n## Connect directly to remove MCP\n\nThe MCP server is deployed on Cloudflare Workers. You can connect to it directly using the URL `https://tripgo-mcp-server.skedgo-account.workers.dev/sse`.\n\n## Connect Claude Desktop to public MCP server\n\nYou can also connect to your remote MCP server from *local* MCP clients, by using the [mcp-remote proxy](https://www.npmjs.com/package/mcp-remote).\n\nTo connect to your MCP server from Claude Desktop, follow [Anthropic's Quickstart](https://modelcontextprotocol.io/quickstart/user) and within Claude Desktop go to Settings > Developer > Edit Config.\n\nUse with this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"TripGo\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"https://tripgo-mcp-server.skedgo-account.workers.dev/sse\"\n      ]\n    }\n  }\n}\n```\n\nRestart Claude and you should see the tools become available.\n\n## Development\n\n- Create a copy of `.env.example` and rename it to `.env` and set an API key\n- Install dependencies with `npm install`\n- Start the server with `npm run dev:local`\n\nThe configure Claude:\n\n```json\n{\n  \"mcpServers\": {\n    \"calculator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"http://localhost:8787/sse\"\n      ]\n    }\n  }\n}\n```\n\nRestart Claude and you should see the tools become available.\n\n## Deployment\n\nThis is deployed locally currently, run:\n\n```bash\nnpm install\nnpm run deploy\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tripgo",
        "skedgo",
        "travel",
        "tripgo api",
        "travel data",
        "skedgo tripgo"
      ],
      "category": "travel--transportation"
    },
    "srinath1510--alltrails-mcp-server": {
      "owner": "srinath1510",
      "name": "alltrails-mcp-server",
      "url": "https://github.com/srinath1510/alltrails-mcp-server",
      "imageUrl": "",
      "description": "A MCP server that provides access to AllTrails data, allowing you to search for hiking trails and get detailed trail information",
      "stars": 5,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-28T17:07:38Z",
      "readme_content": "# AllTrails MCP Server\n\nA Model Context Protocol (MCP) server that provides access to AllTrails data, allowing you to search for hiking trails and get detailed trail information directly through Claude Desktop.\n\n## Features\n\n- 🥾 **Search trails** by national park\n- 📍 **Get detailed trail information** including difficulty, length, elevation gain, and descriptions\n- 🏔️ **Comprehensive trail data** from AllTrails including ratings, route types, and summaries\n- 🤖 **Seamless Client integration** via MCP protocol\n\n## Technical Specifications\n\n### Protocol Support\n\n- **Protocol Version**: MCP 1.9.4\n- **Communication**: Standard input/output (stdio)\n- **Capabilities**: Tools\n- **Server Name**: alltrails-mcp\n- **Server Version**: 0.1.0\n\n## Tools Available\n\n### `search_trails`\nSearch for trails in a specific national park using AllTrails data.\n\n**Parameters:**\n- `park` (required): Park slug in format `us/state/park-name` (e.g., `us/tennessee/great-smoky-mountains-national-park`)\n\n### `get_trail_details`\nGet detailed information about a specific trail by its AllTrails slug.\n\n**Parameters:**\n- `slug` (required): Trail slug from AllTrails URL (the part after `/trail/`)\n\n## Installation Options\n\n### Option 1: With Virtual Environment (Recommended)\n\nThis approach isolates dependencies and prevents conflicts with other Python projects.\n\n### 1. Clone the Repository\n\n```\ngit clone <your-repo-url>\ncd alltrails_mcp\n```\n\n### 2. Create Virtual Environment\n\n```\npython3 -m venv alltrails_mcp_venv\nsource alltrails_mcp_venv/bin/activate  # On Windows: alltrails_mcp_venv\\Scripts\\activate\n```\n\n### 3. Install Dependencies\n\n```\npip install -r requirements.txt\n```\n\n### 4. Verify Installation\n\nTest that the server starts without errors:\n\n```\npython3 server.py\n```\n\nYou should see the server start without crashing. Press Ctrl+C to stop.\n\n## Prerequisites\n\n- Python 3.8 or higher\n- This server can be used with any MCP-compatible client. I use Claude Desktop with Pro subscription.\n- macOS (tested) or other Unix-like system\n\n---\n\n### Option 2: With System Python\n\nIf you prefer not to use a virtual environment, you can install dependencies globally.\n\n### 1. Clone the Repository\n\n```\ngit clone <your-repo-url>\ncd alltrails_mcp\n```\n\n### 2. Install Dependencies Globally\n\n```\npip install -r requirements.txt\n```\n\n### 3. Verify Installation\n\nTest that the server starts without errors:\n\n```\npython3 server.py\n```\n\nYou should see the server start without crashing. Press Ctrl+C to stop.\n\n## Claude Desktop Configuration\n\n### 1. Locate Claude Desktop Config\n\nFind your Claude Desktop configuration file:\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nIf it doesn't exist, create a json file named claude_desktop_config.json in the above directory.\n\n### 2. Add MCP Server Configuration\n\nAdd the following to your `claude_desktop_config.json` file:\n\n#### Option A: Using Virtual Environment (Recommended)\n```json\n{\n  \"mcpServers\": {\n    \"alltrails_mcp_server\": {\n      \"command\": \"/path/to/your/alltrails_mcp/alltrails_mcp_venv/bin/python3\",\n      \"args\": [\"/path/to/your/alltrails_mcp/server.py\"]\n    }\n  }\n}\n```\n\n#### Option B: Using System Python\n```json\n{\n  \"mcpServers\": {\n    \"alltrails_mcp_server\": {\n      \"command\": \"python3\",\n      \"args\": [\"/path/to/your/alltrails_mcp/server.py\"]\n    }\n  }\n}\n```\n\n**Or with absolute Python path:**\n```json\n{\n  \"mcpServers\": {\n    \"alltrails_mcp_server\": {\n      \"command\": \"/usr/bin/python3\",\n      \"args\": [\"/path/to/your/alltrails_mcp/server.py\"]\n    }\n  }\n}\n```\n\n**Important:** Replace `/path/to/your/alltrails_mcp` with the actual absolute path to your project directory.\n\n#### Other MCP Clients\n\nFor other MCP-compatible clients, refer to their documentation for server configuration. The server implements the standard MCP protocol and should work with any compliant client.\n\n**Server Command:** `python3 server.py`  \n**Communication:** Standard input/output (stdio)  \n**Protocol Version:** MCP 1.9.4\n\n### 3. Find Your Python Path\n\n#### For Virtual Environment Users:\n```\ncd /path/to/your/alltrails_mcp\nsource alltrails_mcp_venv/bin/activate\nwhich python3\n```\n\n#### For System Python Users:\n```\nwhich python3\n```\n\nUse the output path in your configuration.\n\n### 4. Install Dependencies\n\n#### If Using Virtual Environment:\nDependencies are already installed in your virtual environment from step 3.\n\n#### If Using System Python:\nInstall dependencies globally:\n```\npip install -r requirements.txt\n```\n\n### 5. Restart Claude Desktop\n\nCompletely quit and restart Claude Desktop for the changes to take effect.\n\n## Usage Examples\n\nOnce configured, you can use these commands in Claude Desktop:\n\n### Search for Trails\n\n**By park name:**\n```\nFind trails in Great Smoky Mountains National Park\n```\n\n**By location:**\n```\nWhat are the best hiking trails in Yosemite?\n```\n\n**With specific criteria:**\n```\nShow me moderate difficulty trails in Yellowstone\n```\n\n**Using park slugs directly:**\n```\nSearch for trails in us/california/yosemite-national-park\n```\n\n**For specific activities:**\n```\nFind family-friendly trails in Zion National Park\n```\n\n### Get Trail Details\n\n**By trail name:**\n```\nGet details for Alum Cave Trail to Mount LeConte\n```\n\n**Using trail slugs:**\n```\nGet details for trail us/tennessee/alum-cave-trail-to-mount-leconte\n```\n\n**For planning purposes:**\n```\nI need detailed information about Rainbow Falls Trail including difficulty and elevation\n```\n\n### Combination Queries\n\n**Search and get details:**\n```\nFind the most popular trails in Grand Canyon National Park and give me details about the top rated one\n```\n\n**Compare trails:**\n```\nSearch for trails in Great Smoky Mountains and tell me which ones are best for beginners\n```\n\n**Trip planning:**\n```\nI'm visiting Yellowstone for 3 days. Find me a mix of easy and moderate trails with good views\n```\n\n### Natural Language Examples\n\nThe MCP server works with natural language, so you can ask questions like:\n\n- \"What are some good day hikes in the Smoky Mountains?\"\n- \"Find me a challenging trail with waterfalls in Tennessee\"\n- \"I want to hike to a summit with 360-degree views\"\n- \"Show me trails that are good for photography\"\n- \"Find dog-friendly trails in national parks\"\n- \"What's the difficulty level of Charlies Bunion trail?\"\n\n### Common Park Slugs\n- Great Smoky Mountains: `us/tennessee/great-smoky-mountains-national-park`\n- Yosemite: `us/california/yosemite-national-park`\n- Yellowstone: `us/wyoming/yellowstone-national-park`\n- Grand Canyon: `us/arizona/grand-canyon-national-park`\n- Zion: `us/utah/zion-national-park`\n\n## Troubleshooting\n\n### Server Not Connecting\n\n1. **Check the logs:**\n   ```bash\n   tail -f ~/Library/Logs/Claude/mcp.log\n   ```\n\n2. **Verify your config file:**\n   ```bash\n   cat ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n   ```\n\n3. **Test the server manually:**\n   ```bash\n   cd /path/to/your/alltrails_mcp\n   source alltrails_mcp_venv/bin/activate\n   python3 server.py\n   ```\n\n### Common Issues\n\n- **\"Connection closed\" errors**: Usually indicates a Python path or virtual environment issue\n### **Path configuration issues**: Check that all paths in the config are absolute and correct\n- **Import errors**: Ensure all dependencies are installed in the correct Python environment (virtual environment vs system Python)\n- **Python path errors**: Use `which python3` or `which python` to verify the correct Python executable path\n\n### Debug Mode\n\nFor detailed debugging, check the MCP logs:\n\n```\n# macOS\ntail -f ~/Library/Logs/Claude/mcp.log\n\n# The server also outputs debug information to stderr\n```\n\n## Project Structure\n\n```\nalltrails_mcp/\n├── app/\n│   └── alltrails_scraper.py    # AllTrails scraping logic\n├── examples/\n│   └── claude_desktop_config.json  # Example configuration file for Claude Desktop\n├── server.py                   # MCP server implementation\n├── requirements.txt            # Python dependencies\n├── alltrails_mcp_venv/         # Virtual environment\n└── README.md                   # This file\n└── .gitignore                  # Git ignore file\n```\n\n## How It Works\n\n1. **MCP Protocol**: Uses the Model Context Protocol to communicate with Claude Desktop\n2. **Web Scraping**: Scrapes AllTrails website for trail data using BeautifulSoup\n3. **Data Processing**: Formats and returns trail information in a structured format\n4. **Tool Integration**: Exposes tools that Claude can call to search and retrieve trail data\n\n\n## License\n\nMIT License\n\nCopyright (c) 2025 Srinath Srinivasan\n\n## Acknowledgments\n\n- Built using the [Model Context Protocol](https://modelcontextprotocol.io/)\n- Trail data sourced from [AllTrails](https://www.alltrails.com/)\n- Inspired by the MCP community examples\n\n---\n\n**Note:** This tool scrapes publicly available data from AllTrails. Please use responsibly and in accordance with AllTrails' terms of service.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "routes",
        "server",
        "mcp server",
        "server mcp",
        "alltrails mcp"
      ],
      "category": "travel--transportation"
    }
  }
}