{
  "category": "command-line",
  "categoryDisplay": "Command Line",
  "description": "Run commands, capture output and otherwise interact with shells and command line tools.",
  "totalRepositories": 12,
  "repositories": {
    "MladenSU--cli-mcp-server": {
      "owner": "MladenSU",
      "name": "cli-mcp-server",
      "url": "https://github.com/MladenSU/cli-mcp-server",
      "imageUrl": "",
      "description": "Command line interface with secure execution and customizable security policies",
      "stars": 145,
      "forks": 24,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T10:58:51Z",
      "readme_content": "# CLI MCP Server\n\n---\n\nA secure Model Context Protocol (MCP) server implementation for executing controlled command-line operations with\ncomprehensive security features.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\n![MCP Protocol](https://img.shields.io/badge/MCP-Compatible-green)\n[![smithery badge](https://smithery.ai/badge/cli-mcp-server)](https://smithery.ai/protocol/cli-mcp-server)\n[![Python Tests](https://github.com/MladenSU/cli-mcp-server/actions/workflows/python-tests.yml/badge.svg)](https://github.com/MladenSU/cli-mcp-server/actions/workflows/python-tests.yml)\n\n<a href=\"https://glama.ai/mcp/servers/q89277vzl1\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/q89277vzl1/badge\" /></a>\n\n---\n\n# Table of Contents\n\n1. [Overview](#overview)\n2. [Features](#features)\n3. [Configuration](#configuration)\n4. [Available Tools](#available-tools)\n    - [run_command](#run_command)\n    - [show_security_rules](#show_security_rules)\n5. [Usage with Claude Desktop](#usage-with-claude-desktop)\n    - [Development/Unpublished Servers Configuration](#developmentunpublished-servers-configuration)\n    - [Published Servers Configuration](#published-servers-configuration)\n6. [Security Features](#security-features)\n7. [Error Handling](#error-handling)\n8. [Development](#development)\n    - [Prerequisites](#prerequisites)\n    - [Building and Publishing](#building-and-publishing)\n    - [Debugging](#debugging)\n9. [License](#license)\n\n---\n\n## Overview\n\nThis MCP server enables secure command-line execution with robust security measures including command whitelisting, path\nvalidation, and execution controls. Perfect for providing controlled CLI access to LLM applications while maintaining security.\n\n## Features\n\n- 🔒 Secure command execution with strict validation\n- ⚙️ Configurable command and flag whitelisting with 'all' option\n- 🛡️ Path traversal prevention and validation\n- 🚫 Shell operator injection protection\n- ⏱️ Execution timeouts and length limits\n- 📝 Detailed error reporting\n- 🔄 Async operation support\n- 🎯 Working directory restriction and validation\n\n## Configuration\n\nConfigure the server using environment variables:\n\n| Variable             | Description                                          | Default            |\n|---------------------|------------------------------------------------------|-------------------|\n| `ALLOWED_DIR`       | Base directory for command execution (Required)      | None (Required)   |\n| `ALLOWED_COMMANDS`  | Comma-separated list of allowed commands or 'all'    | `ls,cat,pwd`      |\n| `ALLOWED_FLAGS`     | Comma-separated list of allowed flags or 'all'       | `-l,-a,--help`    |\n| `MAX_COMMAND_LENGTH`| Maximum command string length                        | `1024`            |\n| `COMMAND_TIMEOUT`   | Command execution timeout (seconds)                  | `30`              |\n| `ALLOW_SHELL_OPERATORS` | Allow shell operators (&&, \\|\\|, \\|, >, etc.)    | `false`           |\n\nNote: Setting `ALLOWED_COMMANDS` or `ALLOWED_FLAGS` to 'all' will allow any command or flag respectively.\n\n## Installation\n\nTo install CLI MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/protocol/cli-mcp-server):\n\n```bash\nnpx @smithery/cli install cli-mcp-server --client claude\n```\n\n## Available Tools\n\n### run_command\n\nExecutes whitelisted CLI commands within allowed directories.\n\n**Input Schema:**\n```json\n{\n  \"command\": {\n    \"type\": \"string\",\n    \"description\": \"Single command to execute (e.g., 'ls -l' or 'cat file.txt')\"\n  }\n}\n```\n\n**Security Notes:**\n- Shell operators (&&, |, >, >>) are not supported by default, but can be enabled with `ALLOW_SHELL_OPERATORS=true`\n- Commands must be whitelisted unless ALLOWED_COMMANDS='all'\n- Flags must be whitelisted unless ALLOWED_FLAGS='all'\n- All paths are validated to be within ALLOWED_DIR\n\n### show_security_rules\n\nDisplays current security configuration and restrictions, including:\n- Working directory\n- Allowed commands\n- Allowed flags\n- Security limits (max command length and timeout)\n\n## Usage with Claude Desktop\n\nAdd to your `~/Library/Application\\ Support/Claude/claude_desktop_config.json`:\n\n> Development/Unpublished Servers Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"cli-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<path/to/the/repo>/cli-mcp-server\",\n        \"run\",\n        \"cli-mcp-server\"\n      ],\n      \"env\": {\n        \"ALLOWED_DIR\": \"</your/desired/dir>\",\n        \"ALLOWED_COMMANDS\": \"ls,cat,pwd,echo\",\n        \"ALLOWED_FLAGS\": \"-l,-a,--help,--version\",\n        \"MAX_COMMAND_LENGTH\": \"1024\",\n        \"COMMAND_TIMEOUT\": \"30\",\n        \"ALLOW_SHELL_OPERATORS\": \"false\"\n      }\n    }\n  }\n}\n```\n\n> Published Servers Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"cli-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"cli-mcp-server\"\n      ],\n      \"env\": {\n        \"ALLOWED_DIR\": \"</your/desired/dir>\",\n        \"ALLOWED_COMMANDS\": \"ls,cat,pwd,echo\",\n        \"ALLOWED_FLAGS\": \"-l,-a,--help,--version\",\n        \"MAX_COMMAND_LENGTH\": \"1024\",\n        \"COMMAND_TIMEOUT\": \"30\",\n        \"ALLOW_SHELL_OPERATORS\": \"false\"\n      }\n    }\n  }\n}\n```\n> In case it's not working or showing in the UI, clear your cache via `uv clean`.\n\n## Security Features\n\n- ✅ Command whitelist enforcement with 'all' option\n- ✅ Flag validation with 'all' option\n- ✅ Path traversal prevention and normalization\n- ✅ Shell operator blocking (with opt-in support via `ALLOW_SHELL_OPERATORS=true`)\n- ✅ Command length limits\n- ✅ Execution timeouts\n- ✅ Working directory restrictions\n- ✅ Symlink resolution and validation\n\n## Error Handling\n\nThe server provides detailed error messages for:\n\n- Security violations (CommandSecurityError)\n- Command timeouts (CommandTimeoutError)\n- Invalid command formats\n- Path security violations\n- Execution failures (CommandExecutionError)\n- General command errors (CommandError)\n\n## Development\n\n### Prerequisites\n\n- Python 3.10+\n- MCP protocol library\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n    ```bash\n    uv sync\n    ```\n\n2. Build package distributions:\n    ```bash\n    uv build\n    ```\n\n   > This will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n   ```bash\n   uv publish --token {{YOUR_PYPI_API_TOKEN}}\n   ```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with\nthis command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {{your source code local directory}}/cli-mcp-server run cli-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\nFor more information or support, please open an issue on the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "command",
        "cli",
        "commands capture",
        "command line",
        "run commands"
      ],
      "category": "command-line"
    },
    "OthmaneBlial--term_mcp_deepseek": {
      "owner": "OthmaneBlial",
      "name": "term_mcp_deepseek",
      "url": "https://github.com/OthmaneBlial/term_mcp_deepseek",
      "imageUrl": "",
      "description": "A DeepSeek MCP-like Server for Terminal",
      "stars": 13,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-21T18:33:51Z",
      "readme_content": "# DeepSeek MCP-like Server for Terminal\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/OthmaneBlial/term_mcp_deepseek)](https://archestra.ai/mcp-catalog/othmaneblial__term_mcp_deepseek)\nThis project is an MCP‑like server using the DeepSeek API. It aims to demonstrate the core concepts behind the Model Context Protocol (MCP) by exposing endpoints that allow AI assistants to:\n\n- List available tools.\n- Invoke commands on an active shell session.\n- Integrate with an AI chat (DeepSeek) that can include special instructions (e.g., `CMD:` lines) to trigger command execution.\n\n> **Note:** While this implementation captures many of the MCP ideas and includes features like real-time streaming, session management, and basic security, it is not yet a fully compliant MCP server as defined by Anthropic. It is designed as a proof-of-concept, and further enhancements (e.g., complete JSON‑RPC protocol support, advanced authentication, and comprehensive error handling) would be needed for production use.\n\n## Features\n\n- **Chat Interface:**\n  A modern web-based chat client (using Flask and Tailwind CSS) where users can interact with the server, now with real-time updates and improved error handling.\n\n- **AI Integration:**\n  Uses the DeepSeek API to generate responses. The AI can instruct the server to execute terminal commands by including lines beginning with `CMD:`.\n\n- **Terminal Command Execution:**\n  Executes shell commands via a persistent Bash session using the `pexpect` library and returns output to the client, with added real-time streaming capabilities.\n\n- **MCP Endpoints:**\n  Provides `/mcp/list_tools` and `/mcp/call_tool` endpoints that mimic MCP tool discovery and invocation, with expanded protocol support including prompts, resources, and roots.\n\n- **Real-time Streaming:**\n  Server-Sent Events (SSE) for live command execution updates and terminal output.\n\n- **Security Enhancements:**\n  Basic authentication, rate limiting, input validation, and security headers for safer operation.\n\n- **Multiple Transport Options:**\n  Supports both HTTP REST API and STDIO command-line interface for flexibility.\n\n- **Session Management:**\n  Improved session handling and conversation storage.\n\n- **Docker Support:**\n  Containerization for easier deployment and testing.\n\n## Getting Started\n\n### Prerequisites\n\n- Python 3.8+\n- [pip](https://pip.pypa.io/)\n- A valid DeepSeek API key\n\n### Installation\n\n1. **Clone the repository:**\n\n   ```bash\n   git clone https://github.com/OthmaneBlial/term_mcp_deepseek.git\n   cd term_mcp_deepseek\n   ```\n\n2. **Create and activate a virtual environment:**\n\n   ```bash\n   python3 -m venv venv\n   source venv/bin/activate  # On Windows, use `venv\\Scripts\\activate`\n   ```\n\n3. **Install the required dependencies:**\n\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. **Configure your API key:**\n\n   Update the `DEEPSEEK_API_KEY` in `.env` with your DeepSeek API key.\n\n### Running the Server\n\n#### Quick Start\n\nUse the provided startup script for convenience:\n\n```bash\nchmod +x startup.sh\n./startup.sh\n```\n\n#### Manual Start\n\nRun the Flask server with:\n\n```bash\npython server.py\n```\n\nVisit [http://127.0.0.1:8000](http://127.0.0.1:8000) to access the chat interface.\n\n#### Docker\n\nFor containerized deployment:\n\n```bash\ndocker-compose up -d\n```\n\n## Endpoints\n\n### Chat Endpoint\n- **URL:** `/chat`\n- **Method:** `POST`\n- **Payload:** `{ \"message\": \"your message here\" }`\n- **Description:**\n  Adds the user message to the conversation, sends it to the DeepSeek API, looks for any command instructions (`CMD:`), executes them, and returns the final response.\n\n### MCP Endpoints\n\n#### List Tools\n- **URL:** `/mcp/list_tools`\n- **Method:** `POST`\n- **Response:**\n  JSON listing available tools (e.g., `write_to_terminal`, `read_terminal_output`, `send_control_character`).\n\n#### Call Tool\n- **URL:** `/mcp/call_tool`\n- **Method:** `POST`\n- **Payload:**\n  ```json\n  {\n    \"name\": \"tool_name\",\n    \"arguments\": { ... }\n  }\n  ```\n- **Description:**\n  Directly invoke a tool command on the server.\n\n### Real-time Streaming\n- **URL:** `/stream?session_id=session_id`\n- **Method:** `GET`\n- **Description:** Server-Sent Events endpoint for real-time command output updates.\n\n## Future Improvements\n\n- **Protocol Standardization:**\n  Implement JSON‑RPC for a more robust and standardized communication protocol.\n\n- **Real-time Communication:**\n  Add Server‑Sent Events (SSE) or WebSockets for live command output streaming.\n\n- **Session & Security Enhancements:**\n  Introduce per‑user sessions, proper authentication, input sanitization, and comprehensive error handling.\n\n- **Modular Code Architecture:**\n  Further separate API logic from business logic for better maintainability and scalability.\n\n## License\n\nThis project is open-source and available under the [MIT License](LICENSE).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "term_mcp_deepseek",
        "terminal",
        "commands capture",
        "command line",
        "run commands"
      ],
      "category": "command-line"
    },
    "automateyournetwork--pyATS_MCP": {
      "owner": "automateyournetwork",
      "name": "pyATS_MCP",
      "url": "https://github.com/automateyournetwork/pyATS_MCP",
      "imageUrl": "",
      "description": "Cisco pyATS server enabling structured, model-driven interaction with network devices.",
      "stars": 46,
      "forks": 14,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-01T09:14:43Z",
      "readme_content": "# pyATS MCP Server\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/automateyournetwork/pyATS_MCP)](https://archestra.ai/mcp-catalog/automateyournetwork__pyats_mcp)\n\nThis project implements a Model Context Protocol (MCP) Server that wraps Cisco pyATS and Genie functionality. It enables structured, model-driven interaction with network devices over STDIO using the JSON-RPC 2.0 protocol.\n\n🚨 This server does not use HTTP or SSE. All communication is done via STDIN/STDOUT (standard input/output), making it ideal for secure, embedded, containerized, or LangGraph-based tool integrations.\n\n🔧 What It Does\n\nConnects to Cisco IOS/NX-OS devices defined in a pyATS testbed\n\nSupports safe execution of validated CLI commands (show, ping)\n\nAllows controlled configuration changes\n\nReturns structured (parsed) or raw output\n\nExposes a set of well-defined tools via tools/discover and tools/call\n\nOperates entirely via STDIO for minimal surface area and maximum portability\n\n🚀 Usage\n\n1. Set your testbed path\n\n```bash\n\nexport PYATS_TESTBED_PATH=/absolute/path/to/testbed.yaml\n\n```\n\n2. Run the server\n\nContinuous STDIO Mode (default)\n\n```bash\n\npython3 pyats_mcp_server.py\n\n```\n\nLaunches a long-running process that reads JSON-RPC requests from stdin and writes responses to stdout.\n\nOne-Shot Mode\n\n``` bash\n\necho '{\"jsonrpc\": \"2.0\", \"id\": 1, \"method\": \"tools/discover\"}' | python3 pyats_mcp_server.py --oneshot\n\n```\nProcesses a single JSON-RPC request and exits.\n\n📦 Docker Support\n\nBuild the container\n\n```bash\n\ndocker build -t pyats-mcp-server .\n\n```\n\nRun the container (STDIO Mode)\n```bash\ndocker run -i --rm \\\n  -e PYATS_TESTBED_PATH=/app/testbed.yaml \\\n  -v /your/testbed/folder:/app \\\n  pyats-mcp-server\n```\n\n🧠 Available MCP Tools\n\nTool\tDescription\n\nrun_show_command\tExecutes show commands safely with optional parsing\n\nrun_ping_command\tExecutes ping tests and returns parsed or raw results\n\napply_configuration\tApplies safe configuration commands (multi-line supported)\n\nlearn_config\tFetches running config (show run brief)\n\nlearn_logging\tFetches system logs (show logging last 250)\n\nAll inputs are validated using Pydantic schemas for safety and consistency.\n\n🤖 LangGraph Integration\n\nAdd the MCP server as a tool node in your LangGraph pipeline like so:\n\n```python\n\n(\"pyats-mcp\", [\"python3\", \"pyats_mcp_server.py\", \"--oneshot\"], \"tools/discover\", \"tools/call\")\n\n```\n\nName: pyats-mcp\n\nCommand: python3 pyats_mcp_server.py --oneshot\n\nDiscover Method: tools/discover\n\nCall Method: tools/call\n\nSTDIO-based communication ensures tight integration with LangGraph’s tool invocation model without opening HTTP ports or exposing REST endpoints.\n\n📜 Example Requests\n\nDiscover Tools\n\n```json\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 1,\n  \"method\": \"tools/discover\"\n}\n\n```\n\nRun Show Command\n\n``` json\n\n{\n  \"jsonrpc\": \"2.0\",\n  \"id\": 2,\n  \"method\": \"tools/call\",\n  \"params\": {\n    \"name\": \"run_show_command\",\n    \"arguments\": {\n      \"device_name\": \"router1\",\n      \"command\": \"show ip interface brief\"\n    }\n  }\n}\n``` \n🔒 Security Features\n\nInput validation using Pydantic\n\nBlocks unsafe commands like erase, reload, write\n\nPrevents pipe/redirect abuse (e.g., | include, >, copy, etc.)\n\nGracefully handles parsing fallbacks and errors\n\n📁 Project Structure\n\n```graphql\n\n.\n├── pyats_mcp_server.py     # MCP server with JSON-RPC and pyATS integration\n├── Dockerfile              # Docker container definition\n├── testbed.yaml            # pyATS testbed (user-provided)\n└── README.md               # This file\n\n```\n\n📥 MCP Server Config Example (pyATS MCP via Docker)\n\nTo run the pyATS MCP Server as a container with STDIO integration, configure your mcpServers like this:\n\n``` json\n{\n  \"mcpServers\": {\n    \"pyats\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"PYATS_TESTBED_PATH\",\n        \"-v\",\n        \"/absolute/path/to/testbed/folder:/app\",\n        \"pyats-mcp-server\"\n      ],\n      \"env\": {\n        \"PYATS_TESTBED_PATH\": \"/app/testbed.yaml\"\n      }\n    }\n  }\n}\n\n```\n\n```json\n{\n  \"servers\": { \n    \"pyats\": {\n      \"type\": \"stdio\",\n      \"command\": \"python3\",\n      \"args\": [\n        \"-u\",\n        \"/Users/johncapobianco/pyATS_MCP/pyats_mcp_server.py\"\n      ],\n      \"env\": {\n        \"PYATS_TESTBED_PATH\": \"/Users/johncapobianco/pyATS_MCP/testbed.yaml\"\n      }\n  }\n}\n```\n🧾 Explanation:\ncommand: Uses Docker to launch the containerized pyATS MCP server\n\nargs:\n\n-i: Keeps STDIN open for communication\n\n--rm: Automatically removes the container after execution\n\n-e: Injects the environment variable PYATS_TESTBED_PATH\n\n-v: Mounts your local testbed directory into the container\n\npyats-mcp-server: Name of the Docker image\n\nenv:\n\nSets the path to the testbed file inside the container (/app/testbed.yaml)\n\n\n✍️ Author\n\nJohn Capobianco\n\nProduct Marketing Evangelist, Selector AI\n\nAuthor, Automate Your Network\n\nLet me know if you’d like to add:\n\nA sample LangGraph graph config\n\nCompanion client script\n\nCI/CD integration (e.g., GitHub Actions)\n\nHappy to help!\n\n# The testbed.yaml file works with the Cisco DevNet Cisco Modeling Labs (CML) Sandbox! \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cisco",
        "commands",
        "pyats_mcp",
        "pyats_mcp cisco",
        "cisco pyats",
        "automateyournetwork pyats_mcp"
      ],
      "category": "command-line"
    },
    "aymericzip--intlayer": {
      "owner": "aymericzip",
      "name": "intlayer",
      "url": "https://github.com/aymericzip/intlayer",
      "imageUrl": "",
      "description": "A MCP Server that enhance your IDE with AI-powered assistance for Intlayer i18n / CMS tool: smart CLI access, access to the docs.",
      "stars": 342,
      "forks": 70,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:11:08Z",
      "readme_content": "<p align=\"center\">\n  <a href=\"https://intlayer.org\" rel=\"\">\n    <img src=\"https://raw.githubusercontent.com/aymericzip/intlayer/main/docs/assets/cover.png\" width=\"60%\" alt=\"Intlayer Logo\" />\n  </a>\n</p>\n\n<h1 align=\"center\">\n  <strong> Intlayer : an Open-source, per-component i18n toolkit with AI-powered translation & CMS.</strong>\n</h1>\n\n<br />\n\n<p align=\"center\">\n  <a href=\"https://intlayer.org/doc/concept/content\" rel=\"\">Docs</a> •\n  <a href=\"https://intlayer.org/doc/environment/nextjs\" rel=\"\">Next.js</a> •\n  <a href=\"https://intlayer.org/doc/environment/vite-and-react\" rel=\"\">React + Vite</a> •\n  <a href=\"https://intlayer.org/doc/concept/cms\" rel=\"\">CMS</a> •\n  <a href=\"https://discord.gg/7uxamYVeCk\" rel=\"noopener noreferrer nofollow\">Discord</a>\n</p>\n<p align=\"center\" style=\"margin-top:15px;\">\n  <a href=\"https://www.npmjs.com/package/intlayer\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/v/intlayer?style=for-the-badge&labelColor=FFFFFF&color=000000&logoColor=FFFFFF\" alt=\"npm version\" height=\"24\"/></a>\n  <a href=\"https://github.com/aymericzip/intlayer/stargazers\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/stars/aymericzip/intlayer?style=for-the-badge&labelColor=000000&color=FFFFFF&logo=github&logoColor=FFD700\" alt=\"GitHub Stars\" height=\"24\"/></a>\n  <a href=\"https://www.npmjs.org/package/intlayer\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/npm/dm/intlayer?style=for-the-badge&labelColor=000000&color=FFFFFF&logoColor=000000\" alt=\"monthly downloads\" height=\"24\"/></a>\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/LICENSE\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/license/aymericzip/intlayer?style=for-the-badge&labelColor=000000&color=FFFFFF&logoColor=000000\" alt=\"license\"/></a>\n  <a href=\"https://github.com/aymericzip/intlayer/commits/main\" target=\"_blank\" rel=\"noopener noreferrer nofollow\"><img src=\"https://img.shields.io/github/last-commit/aymericzip/intlayer?style=for-the-badge&labelColor=000000&color=FFFFFF&logoColor=000000\" alt=\"last commit\"/>\n  </a>\n</p>\n\n![Watch the video](https://github.com/aymericzip/intlayer/blob/main/docs/assets/demo_video.gif)\n\n<a href=\"https://intlayer.org/doc/concept/content\" rel=\"\">\n  <img src=\"https://img.shields.io/badge/Get_Started-FFFFFF?style=for-the-badge&logo=rocket&logoColor=black\" />\n</a>\n\n## What is Intlayer?\n\nMost i18n libraries are either too complex, too rigid, or not built for modern frameworks.\n\nIntlayer is a **modern i18n solution** for web and mobile apps.  \nIt’s framework-agnostic, **AI-powered**, and includes a free **CMS & visual editor**.\n\nWith **per-locale content files**, **TypeScript autocompletion**, **tree-shakable dictionaries**, and **CI/CD integration**, Intlayer makes internationalization **faster, cleaner, and smarter**.\n\n## Keys benefits of Intlayer:\n\n| Feature                                                                                                                                             | Description                                                                                                                                                                                                                                                                                                                                                                                    |\n| --------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/frameworks.png?raw=true\" alt=\"Feature\" width=\"700\">                          | **Cross-Frameworks Support**<br><br>Intlayer is compatible with all major frameworks and libraries, including Next.js, React, Vite, Vue.js, Nuxt, Preact, Express, and more.                                                                                                                                                                                                                   |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/javascript_content_management.png?raw=true\" alt=\"Feature\" width=\"700\">       | **JavaScript-Powered Content Management**<br><br>Harness the flexibility of JavaScript to define and manage your content efficiently. <br><br> - [Content declaration](https://intlayer.org/doc/concept/content)                                                                                                                                                                               |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/per_locale_content_declaration_file.png?raw=true\" alt=\"Feature\" width=\"700\"> | **Per-Locale Content Declaration File**<br><br>Speed up your development by declaring your content once, before auto generation.<br><br> - [Per-Locale Content Declaration File](https://intlayer.org/doc/concept/per-locale-file)                                                                                                                                                             |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/autocompletion.png?raw=true\" alt=\"Feature\" width=\"700\">                      | **Type-Safe Environment**<br><br>Leverage TypeScript to ensure your content definitions and code are error-free, while also benefiting from IDE autocompletion.<br><br> - [TypeScript configuration](https://intlayer.org/doc/environment/vite-and-react#configure-typescript)                                                                                                                 |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/config_file.png?raw=true\" alt=\"Feature\" width=\"700\">                         | **Simplified Setup**<br><br>Get up and running quickly with minimal configuration. Adjust settings for internationalization, routing, AI, build, and content handling with ease. <br><br> - [Explore Next.js integration](https://intlayer.org/doc/environment/nextjs)                                                                                                                         |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/content_retrieval.png?raw=true\" alt=\"Feature\" width=\"700\">                   | **Simplified Content Retrieval**<br><br>No need to call your `t` function for each piece of content. Retrieve all your content directly using a single hook.<br><br> - [React integration](https://intlayer.org/doc/environment/create-react-app)                                                                                                                                              |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/server_component.png?raw=true\" alt=\"Feature\" width=\"700\">                    | **Consistent Server Component Implementation**<br><br>Perfectly suited for Next.js server components, use the same implementation for both client and server components, no need to pass your `t` function across each server component. <br><br> - [Server Components](https://intlayer.org/doc/environment/nextjs#step-7-utilize-content-in-your-code)                                       |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/file_tree.png?raw=true\" alt=\"Feature\" width=\"700\">                           | **Organized Codebase**<br><br>Keep your codebase more organized: 1 component = 1 dictionary in the same folder. Translations close to their respective components, enhance maintainability and clarity. <br><br> - [How Intlayer works](https://intlayer.org/doc/concept/how-works-intlayer)                                                                                                   |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/url_routing.png?raw=true\" alt=\"Feature\" width=\"700\">                         | **Enhanced Routing**<br><br>Full support of app routing, adapting seamlessly to complex application structures, for Next.js, React, Vite, Vue.js, etc.<br><br> - [Explore Next.js integration](https://intlayer.org/doc/environment/nextjs)                                                                                                                                                    |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/markdown.png?raw=true\" alt=\"Feature\" width=\"700\">                            | **Markdown Support**<br><br>Import and interpret, locale files and remote Markdown for multilingual content like privacy policies, documentation, etc. Interpret and make Markdown metadata accessible in your code.<br><br> - [Content files](https://intlayer.org/doc/concept/content/file)                                                                                                  |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/visual_editor.png?raw=true\" alt=\"Feature\" width=\"700\">                       | **Free Visual Editor & CMS**<br><br>A free visual editor and CMS are available for content writers, removing the need for a localization platform. Keep your content synchronized using Git, or externalize it totally or partially with the CMS.<br><br> - [Intlayer Editor](https://intlayer.org/doc/concept/editor) <br> - [Intlayer CMS](https://intlayer.org/doc/concept/cms)             |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/bundle.png?raw=true\" alt=\"Feature\" width=\"700\">                              | **Tree-shakable Content**<br><br>Tree-shakable content, reducing the size of the final bundle. Loads content per component, excluding any unused content from your bundle. Supports lazy loading to enhance app loading efficiency. <br><br> - [App build optimization](https://intlayer.org/doc/concept/how-works-intlayer#app-build-optimization)                                            |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/static_rendering.png?raw=true\" alt=\"Feature\" width=\"700\">                    | **Static Rendering**<br><br>Doesn't block Static Rendering. <br><br> - [Next.js integration](https://intlayer.org/doc/environment/nextjs)                                                                                                                                                                                                                                                      |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/AI_translation.png?raw=true\" alt=\"Feature\" width=\"700\">                      | **AI-Powered Translation**<br><br>Transform your website into 231 languages with just one click using Intlayer's advanced AI-powered translation tools using your own AI provider / API key. <br><br> - [CI/CD integration](https://intlayer.org/doc/concept/ci-cd) <br> - [Intlayer CLI](https://intlayer.org/doc/concept/cli) <br> - [Auto fill](https://intlayer.org/doc/concept/auto-fill) |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/mcp.png?raw=true\" alt=\"Feature\" width=\"700\">                                 | **MCP Server Integration**<br><br>Provides an MCP (Model Context Protocol) server for IDE automation, enabling seamless content management and i18n workflows directly within your development environment. <br><br> - [MCP Server](https://github.com/aymericzip/intlayer/blob/main/docs/docs/en/mcp_server.md)                                                                               |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/vscode_extension.png?raw=true\" alt=\"Feature\" width=\"700\">                    | **VSCode Extension**<br><br>Intlayer provides a VSCode extension to help you manage your content and translations, builting your dictionaries, translating your content, and more. <br><br> - [VSCode Extension](https://intlayer.org/doc/vs-code-extension)                                                                                                                                   |\n| <img src=\"https://github.com/aymericzip/intlayer/blob/main/docs/assets/interoperability.png?raw=true\" alt=\"Feature\" width=\"700\">                    | **Interoperability**<br><br>Allow interoperability with react-i18next, next-i18next, next-intl, and react-intl. <br><br> - [Intlayer and react-intl](https://intlayer.org/blog/intlayer-with-react-intl) <br> - [Intlayer and next-intl](https://intlayer.org/blog/intlayer-with-next-intl) <br> - [Intlayer and next-i18next](https://intlayer.org/blog/intlayer-with-next-i18next)           |\n\n---\n\n## 📦 Installation\n\nStart your journey with Intlayer today and experience a smoother, more powerful approach to internationalization.\n\n<a href=\"https://intlayer.org/doc/concept/content\" rel=\"\">\n  <img src=\"https://img.shields.io/badge/Get_Started-FFFFFF?style=for-the-badge&logo=rocket&logoColor=black\" />\n</a>\n\n```bash\nnpm install intlayer react-intlayer\n```\n\n⚡ Quick Start (Next.js)\n\n```ts\n// intlayer.config.ts\nimport { Locales, type IntlayerConfig } from \"intlayer\";\n\nconst config: IntlayerConfig = {\n  internationalization: {\n    locales: [Locales.ENGLISH, Locales.FRENCH, Locales.SPANISH],\n    defaultLocale: Locales.ENGLISH,\n  },\n};\n\nexport default config;\n```\n\n```ts\n// app/home.content.ts\nimport { t, type Dictionary } from \"intlayer\";\n\nconst content = {\n  key: \"home\",\n  content: {\n    title: t({\n      en: \"Home\",\n      fr: \"Accueil\",\n      es: \"Inicio\",\n    }),\n  },\n} satisfies Dictionary;\n\nexport default content;\n```\n\n```tsx\n// app/page.tsx\nimport { useIntlayer } from \"react-intlayer\";\n\nconst HomePage = () => {\n  const { title } = useIntlayer(\"home\");\n\n  return <h1>{title}</h1>;\n};\n```\n\n<a href=\"https://intlayer.org/doc/environment/nextjs\"> Get the full guide → </a>\n\n## 🎥 Live tutorial on YouTube\n\n[![How to Internationalize your application using Intlayer](https://i.ytimg.com/vi/e_PPG7PTqGU/hqdefault.jpg?sqp=-oaymwEcCNACELwBSFXyq4qpAw4IARUAAIhCGAFwAcABBg==&rs=AOn4CLDtyJ4uYotEjl12nZ_gZKZ_kjEgOQ)](https://youtu.be/e_PPG7PTqGU?si=GyU_KpVhr61razRw)\n\n<a href=\"https://intlayer.org/doc/concept/content\" rel=\"\">\n  <img src=\"https://img.shields.io/badge/Get_Started-FFFFFF?style=for-the-badge&logo=rocket&logoColor=black\" />\n</a>\n\n## Table of Contents\n\nExplore our comprehensive documentation to get started with Intlayer and learn how to integrate it into your projects.\n\n<details open>\n<summary style=\"font-size:16px; font-weight:bold;\">📘 Get Started</summary>\n<ul>\n  <li><a href=\"https://intlayer.org/doc/why\" rel=''>Why Intlayer?</a></li>\n  <li><a href=\"https://intlayer.org/doc\" rel=''>Introduction</a></li>\n</ul>\n</details>\n\n<details>\n<summary style=\"font-size:16px; font-weight:bold;\">⚙️ Concept</summary>\n<ul>\n  <li><a href=\"https://intlayer.org/doc/concept/how-works-intlayer\" rel=''>How Intlayer Works</a></li>\n  <li><a href=\"https://intlayer.org/doc/concept/configuration\" rel=''>Configuration</a></li>\n  <li><a href=\"https://intlayer.org/doc/concept/cli\" rel=''>Intlayer CLI</a></li>\n  <li><a href=\"https://intlayer.org/doc/concept/editor\" rel=''>Intlayer Editor</a></li>\n  <li><a href=\"https://intlayer.org/doc/concept/cms\" rel=''>Intlayer CMS</a></li>\n  <li><a href=\"https://intlayer.org/doc/concept/content\" rel=''>Dictionary</a>\n    <ul>\n      <li><a href=\"https://intlayer.org/doc/concept/content/per-locale-file\" rel=''>Per-Locale Content Declaration File</a></li>\n      <li><a href=\"https://intlayer.org/doc/concept/content/translation\" rel=''>Translation</a></li>\n      <li><a href=\"https://intlayer.org/doc/concept/content/enumeration\" rel=''>Enumeration</a></li>\n      <li><a href=\"https://intlayer.org/doc/concept/content/condition\" rel=''>Condition</a></li>\n      <li><a href=\"https://intlayer.org/doc/concept/content/nesting\" rel=''>Nesting</a></li>\n      <li><a href=\"https://intlayer.org/doc/concept/content/markdown\" rel=''>Markdown</a></li>\n      <li><a href=\"https://intlayer.org/doc/concept/content/function-fetching\" rel=''>Function Fetching</a></li>\n      <li><a href=\"https://intlayer.org/doc/concept/content/insertion\" rel=''>Insertion</a></li>\n      <li><a href=\"https://intlayer.org/doc/concept/content/file\" rel=''>File</a></li>\n    </ul>\n  </li>\n</ul>\n</details>\n\n<details open>\n<summary style=\"font-size:16px; font-weight:bold;\">🌐 Environment</summary>\n<ul>\n  <li><a href=\"https://intlayer.org/doc/environment/nextjs\" rel=''>Intlayer with Next.js 15</a>\n    <ul>\n      <li><a href=\"https://intlayer.org/doc/environment/nextjs/14\" rel=''>Next.js 14 (App Router)</a></li>\n      <li><a href=\"https://intlayer.org/doc/environment/nextjs/next-with-Page-Router\" rel=''>Next.js Page Router</a></li>\n    </ul>\n  </li>\n  <li><a href=\"https://intlayer.org/doc/environment/create-react-app\" rel=''>React CRA</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/vite-and-react\" rel=''>Vite + React</a>\n     <ul>\n      <li><a href=\"https://intlayer.org/doc/environment/vite-and-react/react-router-v7\" rel=''>React-router-v7</a></li>\n      <li><a href=\"https://intlayer.org/doc/environment/vite-and-react/tanstack-start\" rel=''>Tanstack start</a></li>\n    </ul>\n  </li>\n  <li><a href=\"https://intlayer.org/doc/environment/react-native-and-expo\" rel=''>React Native</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/lynx-and-react\" rel=''>Lynx + React</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/vite-and-svelte\" rel=''>Vite + Svelte</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/vite-and-preact\" rel=''>Vite + Preact</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/vite-and-vue\" rel=''>Vite + Vue</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/vite-and-nuxt\" rel=''>Vite + Nuxt</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/vite-and-solid\" rel=''>Vite + Solid</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/angular\" rel=''>Angular</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/express\" rel=''>Express</a></li>\n  <li><a href=\"https://intlayer.org/doc/environment/nest\" rel=''>NestJS</a></li>\n</ul>\n</details>\n\n<details>\n<summary style=\"font-size:16px; font-weight:bold;\">📰 Blog</summary>\n<ul>\n  <li><a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/blog/en/what_is_internationalization.md\" rel=''>What is i18n</a></li>\n  <li><a href=\"https://intlayer.org/blog/SEO-and-i18n\" rel=''>i18n and SEO</a></li>\n  <li><a href=\"https://intlayer.org/blog/intlayer-with-next-i18next\" rel=''>Intlayer and i18next</a></li>\n  <li><a href=\"https://intlayer.org/blog/intlayer-with-react-i18next\" rel=''>Intlayer and react-intl</a></li>\n  <li><a href=\"https://intlayer.org/blog/intlayer-with-next-intl\" rel=''>Intlayer and next-intl</a></li>\n</ul>\n</details>\n\n## 🌐 Readme in other languages\n\n<p align=\"center\">\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/readme.md\">English</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/zh/readme.md\">简体中文</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/ru/readme.md\">Русский</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/ja/readme.md\">日本語</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/fr/readme.md\">Français</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/ko/readme.md\">한국어</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/es/readme.md\">Español</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/de/readme.md\">Deutsch</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/ar/readme.md\">العربية</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/it/readme.md\">Italiano</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/en-GB/readme.md\">English (UK)</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/pt/readme.md\">Português</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/hi/readme.md\">हिन्दी</a> •\n  <a href=\"https://github.com/aymericzip/intlayer/blob/main/docs/docs/tr/readme.md\">Türkçe</a>\n</p>\n\n## 🤝 Community\n\nIntlayer is built with and for the community and we’d love your input!\n\n- Have a suggestion? [Open an issue](https://github.com/aymericzip/intlayer/issues)\n- Found a bug or improvement? [Submit a PR](https://github.com/aymericzip/intlayer/pulls)\n- Need help or want to connect? [Join our Discord](https://discord.gg/7uxamYVeCk)\n\nYou can also follow us on :\n\n  <div>\n    <br/>\n    <p align=\"center\">\n      <a href=\"https://discord.gg/528mBV4N\" target=\"blank\" rel='noopener noreferrer nofollow'><img align=\"center\"\n         src=\"https://img.shields.io/badge/discord-5865F2.svg?style=for-the-badge&logo=discord&logoColor=white\"\n         alt=\"Intlayer Discord\" height=\"30\"/></a>\n      <a href=\"https://www.linkedin.com/company/intlayerorg\" target=\"blank\" rel='noopener noreferrer nofollow'><img align=\"center\"\n         src=\"https://img.shields.io/badge/linkedin-%231DA1F2.svg?style=for-the-badge&logo=linkedin&logoColor=white\"\n         alt=\"Intlayer LinkedIn\" height=\"30\"/></a>\n      <a href=\"https://www.facebook.com/intlayer\" target=\"blank\" rel='noopener noreferrer nofollow'><img align=\"center\"\n         src=\"https://img.shields.io/badge/facebook-4267B2.svg?style=for-the-badge&logo=facebook&logoColor=white\"\n         alt=\"Intlayer Facebook\" height=\"30\"/></a>\n      <a href=\"https://www.instagram.com/intlayer/\" target=\"blank\" rel='noopener noreferrer nofollow'><img align=\"center\"\n         src=\"https://img.shields.io/badge/instagram-%23E4405F.svg?style=for-the-badge&logo=Instagram&logoColor=white\"\n         alt=\"Intlayer Instagram\" height=\"30\"/></a>\n      <a href=\"https://x.com/Intlayer183096\" target=\"blank\" rel='noopener noreferrer nofollow'><img align=\"center\"\n         src=\"https://img.shields.io/badge/x-1DA1F2.svg?style=for-the-badge&logo=x&logoColor=white\"\n         alt=\"Intlayer X\" height=\"30\"/></a>\n      <a href=\"https://www.youtube.com/@intlayer\" target=\"blank\" rel='noopener noreferrer nofollow'><img align=\"center\"\n         src=\"https://img.shields.io/badge/youtube-FF0000.svg?style=for-the-badge&logo=youtube&logoColor=white\"\n         alt=\"Intlayer YouTube\" height=\"30\"/></a>\n      <a href=\"https://www.tiktok.com/@intlayer\" target=\"blank\" rel='noopener noreferrer nofollow'><img align=\"center\"\n         src=\"https://img.shields.io/badge/tiktok-000000.svg?style=for-the-badge&logo=tiktok&logoColor=white\"\n         alt=\"Intlayer TikTok\" height=\"30\"/></a>\n      <br>\n    </p>\n</div>\n\n### Contribution\n\nFor more detailed guidelines on contributing to this project, please refer to the [`CONTRIBUTING.md`](https://github.com/aymericzip/intlayer/blob/main/CONTRIBUTING.md) file. It contains essential information on our development process, commit message conventions, and release procedures. Your contributions are valuable to us, and we appreciate your efforts in making this project better!\n\n### Thank You for the Support\n\nIf you like Intlayer, give us a ⭐ on GitHub. It helps others discover the project! [See why GitHub Stars matter](https://github.com/aymericzip/intlayer/blob/main/CONTRIBUTING.md#why-github-stars-matter-).\n\n[![Star History Chart](https://api.star-history.com/svg?repos=aymericzip/intlayer&type=Date)](https://star-history.com/#aymericzip/intlayer&Date)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "command",
        "cli",
        "commands capture",
        "command line",
        "cms tool"
      ],
      "category": "command-line"
    },
    "ferrislucas--iterm-mcp": {
      "owner": "ferrislucas",
      "name": "iterm-mcp",
      "url": "https://github.com/ferrislucas/iterm-mcp",
      "imageUrl": "",
      "description": "A Model Context Protocol server that provides access to iTerm. You can run commands and ask questions about what you see in the iTerm terminal.",
      "stars": 458,
      "forks": 49,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T15:30:17Z",
      "readme_content": "# iterm-mcp \nA Model Context Protocol server that provides access to your iTerm session.\n\n\n\n### Features\n\n**Efficient Token Use:** iterm-mcp gives the model the ability to inspect only the output that the model is interested in. The model typically only wants to see the last few lines of output even for long running commands. \n\n**Natural Integration:** You share iTerm with the model. You can ask questions about what's on the screen, or delegate a task to the model and watch as it performs each step.\n\n**Full Terminal Control and REPL support:** The model can start and interact with REPL's as well as send control characters like ctrl-c, ctrl-z, etc.\n\n**Easy on the Dependencies:** iterm-mcp is built with minimal dependencies and is runnable via npx. It's designed to be easy to add to Claude Desktop and other MCP clients. It should just work.\n\n\n## Safety Considerations\n\n* The user is responsible for using the tool safely.\n* No built-in restrictions: iterm-mcp makes no attempt to evaluate the safety of commands that are executed.\n* Models can behave in unexpected ways. The user is expected to monitor activity and abort when appropriate.\n* For multi-step tasks, you may need to interrupt the model if it goes off track. Start with smaller, focused tasks until you're familiar with how the model behaves. \n\n### Tools\n- `write_to_terminal` - Writes to the active iTerm terminal, often used to run a command. Returns the number of lines of output produced by the command.\n- `read_terminal_output` - Reads the requested number of lines from the active iTerm terminal.\n- `send_control_character` - Sends a control character to the active iTerm terminal.\n\n### Requirements\n\n* iTerm2 must be running\n* Node version 18 or greater\n\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"iterm-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"iterm-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install iTerm for Claude Desktop automatically via [Smithery](https://smithery.ai/server/iterm-mcp):\n\n```bash\nnpx -y @smithery/cli install iterm-mcp --client claude\n```\n[![smithery badge](https://smithery.ai/badge/iterm-mcp)](https://smithery.ai/server/iterm-mcp)\n\n## Development\n\nInstall dependencies:\n```bash\nyarn install\n```\n\nBuild the server:\n```bash\nyarn run build\n```\n\nFor development with auto-rebuild:\n```bash\nyarn run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nyarn run inspector\nyarn debug <command>\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "iterm",
        "command",
        "iterm terminal",
        "access iterm",
        "commands capture"
      ],
      "category": "command-line"
    },
    "g0t4--mcp-server-commands": {
      "owner": "g0t4",
      "name": "mcp-server-commands",
      "url": "https://github.com/g0t4/mcp-server-commands",
      "imageUrl": "",
      "description": "Run any command with `run_command` and `run_script` tools.",
      "stars": 198,
      "forks": 34,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:31:55Z",
      "readme_content": "## Tools\n\nTools are for LLMs to request. Claude Sonnet 3.5 intelligently uses `run_command`. And, initial testing shows promising results with [Groq Desktop with MCP](https://github.com/groq/groq-desktop-beta) and `llama4` models.\n\nCurrently, just one command to rule them all!\n\n- `run_command` - run a command, i.e. `hostname` or `ls -al` or `echo \"hello world\"` etc\n  - Returns `STDOUT` and `STDERR` as text\n  - Optional `stdin` parameter means your LLM can\n    - pass code in `stdin` to commands like `fish`, `bash`, `zsh`, `python`\n    - create files with `cat >> foo/bar.txt` from the text in `stdin`\n\n> [!WARNING]\n> Be careful what you ask this server to run!\n> In Claude Desktop app, use `Approve Once` (not `Allow for This Chat`) so you can review each command, use `Deny` if you don't trust the command.\n> Permissions are dictated by the user that runs the server.\n> DO NOT run with `sudo`.\n\n## Video walkthrough\n\n<a href=\"https://youtu.be/0-VPu1Pc18w\"><img src=\"https://img.youtube.com/vi/0-VPu1Pc18w/maxresdefault.jpg\" width=\"480\" alt=\"YouTube Thumbnail\"></a>\n\n## Prompts\n\nPrompts are for users to include in chat history, i.e. via `Zed`'s slash commands (in its AI Chat panel)\n\n- `run_command` - generate a prompt message with the command output\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nGroq Desktop (beta, macOS) uses `~/Library/Application Support/groq-desktop-app/settings.json`\n\n### Use the published npm package\n\nPublished to npm as [mcp-server-commands](https://www.npmjs.com/package/mcp-server-commands) using this [workflow](https://github.com/g0t4/mcp-server-commands/actions)\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-commands\": {\n      \"command\": \"npx\",\n      \"args\": [\"mcp-server-commands\"]\n    }\n  }\n}\n```\n\n### Use a local build (repo checkout)\n\nMake sure to run `npm run build`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-commands\": {\n      // works b/c of shebang in index.js\n      \"command\": \"/path/to/mcp-server-commands/build/index.js\"\n    }\n  }\n}\n```\n\n## Local Models\n\n- Most models are trained such that they don't think they can run commands for you.\n  - Sometimes, they use tools w/o hesitation... other times, I have to coax them.\n  - Use a system prompt or prompt template to instruct that they should follow user requests. Including to use `run_commands` without double checking.\n- Ollama is a great way to run a model locally (w/ Open-WebUI)\n\n```sh\n# NOTE: make sure to review variants and sizes, so the model fits in your VRAM to perform well!\n\n# Probably the best so far is [OpenHands LM](https://www.all-hands.dev/blog/introducing-openhands-lm-32b----a-strong-open-coding-agent-model)\nollama pull https://huggingface.co/lmstudio-community/openhands-lm-32b-v0.1-GGUF\n\n# https://ollama.com/library/devstral\nollama pull devstral\n\n# Qwen2.5-Coder has tool use but you have to coax it\nollama pull qwen2.5-coder\n```\n\n### HTTP / OpenAPI\n\nThe server is implemented with the `STDIO` transport.\nFor `HTTP`, use [`mcpo`](https://github.com/open-webui/mcpo) for an `OpenAPI` compatible web server interface.\nThis works with [`Open-WebUI`](https://github.com/open-webui/open-webui)\n\n```bash\nuvx mcpo --port 3010 --api-key \"supersecret\" -- npx mcp-server-commands\n\n# uvx runs mcpo => mcpo run npx => npx runs mcp-server-commands\n# then, mcpo bridges STDIO <=> HTTP\n```\n\n> [!WARNING]\n> I briefly used `mcpo` with `open-webui`, make sure to vet it for security concerns.\n\n### Logging\n\nClaude Desktop app writes logs to `~/Library/Logs/Claude/mcp-server-mcp-server-commands.log`\n\nBy default, only important messages are logged (i.e. errors).\nIf you want to see more messages, add `--verbose` to the `args` when configuring the server.\n\nBy the way, logs are written to `STDERR` because that is what Claude Desktop routes to the log files.\nIn the future, I expect well formatted log messages to be written over the `STDIO` transport to the MCP client (note: not Claude Desktop app).\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "run_command",
        "mcp",
        "run commands",
        "server commands",
        "commands run"
      ],
      "category": "command-line"
    },
    "maxim-saplin--mcp_safe_local_python_executor": {
      "owner": "maxim-saplin",
      "name": "mcp_safe_local_python_executor",
      "url": "https://github.com/maxim-saplin/mcp_safe_local_python_executor",
      "imageUrl": "",
      "description": "Safe Python interpreter based on HF Smolagents `LocalPythonExecutor`",
      "stars": 36,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T17:24:55Z",
      "readme_content": "# Safe Local Python Executor\n\nAn MCP server (stdio transport) that wraps Hugging Face's [`LocalPythonExecutor`](https://github.com/huggingface/smolagents/blob/main/src/smolagents/local_python_executor.py)\n(from the [`smolagents`](https://huggingface.co/docs/smolagents/en/index) framework). It is a custom Python runtime that \nprovides basic isolation/security when running Python code generated by LLMs locally. It does not require Docker or VM.\nThis package allows to expose the Python executor via MCP (Model Context Protocol) as a tool for LLM apps like Claude Desktop, Cursor or any other MCP compatible client.\nIn case of Claude Desktop this tool is an easy way to add a missing Code Interpreter (available as a plugin in ChatGPT for quite a while already).\n\n<img width=\"1032\" alt=\"image\" src=\"https://github.com/user-attachments/assets/3b820bfc-970a-4315-8f2d-970591c6fdae\" />\n\n## Features\n\n- Exposes `run_python` tool\n- Safer execution of Python code compared to direct use of Python `eva()l`\n- Ran via uv in Python venv\n- No file I/O ops are allowed\n- Restricted list of imports\n    - collections\n    - datetime\n    - itertools\n    - math\n    - queue\n    - random\n    - re\n    - stat\n    - statistics\n    - time\n    - unicodedata\n\n## Security\n\nBe careful with execution of code produced by LLM on your machine, stay away from MCP servers that run Python via command line or using `eval()`. The safest option is using a VM or a docker container, though it requires some effort to set-up, consumes resources/slower. There're 3rd party servcices providing Python runtime, though they require registration, API keys etc.\n\n`LocalPythonExecutor` provides a good balance between direct use of local Python environment (which is easier to set-up) AND remote execution in Dokcer container or a VM/3rd party service (which is safe). Hugginng Face team has invested time into creating a quick and safe option to run LLM generated code used by their code agents. This MCP server builds upon it:\n\n>To add a first layer of security, code execution in smolagents is not performed by the vanilla Python interpreter. We have re-built a more secure LocalPythonExecutor from the ground up.\n\nRead more [here](https://huggingface.co/docs/smolagents/en/tutorials/secure_code_execution#local-code-execution).\n\n## Installation and Execution\n\n### Installing via Smithery\n\nTo install Safe Local Python Executor for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@maxim-saplin/mcp_safe_local_python_executor):\n\n```bash\nnpx -y @smithery/cli install @maxim-saplin/mcp_safe_local_python_executor --client claude\n```\n\n### Installing Manually\n1. Install `uv` (e.h. `brew install uv` on macOS or use [official docs](https://docs.astral.sh/uv/getting-started/installation/#__tabbed_1_2))\n2. Clone the repo, change the directory `cd mcp_safe_local_python_executor`\n3. The server can be started via command line `uv run mcp_server.py`, venv will be created automatically, depedencies (smollagents, mcp) will be installed\n\n\n## Configuring Claude Desktop\n\n1. Make sure you have Claude for Desktop installed (download from [claude.ai](https://claude.ai/desktop))\n2. Edit your Claude for Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Or open Claude Desktop -> Settings -> Developer -> click \"Edit Config\" button\n\n3. Add the following configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"safe-local-python-executor\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\", \n                \"/path/to/mcp_local_python_executor/\",\n                \"run\",\n                \"mcp_server.py\"\n            ]\n        }\n    }\n}\n```\n\n4. Restart Claude for Desktop\n5. The Python executor tool will now be available in Claude (you'll see hammer icon in the message input field)\n\n## Example Prompts\n\nOnce configured, you can use prompts like:\n\n- \"Calculate the factorial of 5 using Python\"\n- \"Create a list of prime numbers up to 100\"\n- \"Solve this equation (use Python): x^2 + 5x + 6 = 0\"\n\n\n## Development\n\nClone the repo. Use `uv` to create venv, install dev dependencies, run tests:\n\n```\nuv venv .venv\nuv sync --group dev\npython -m pytest tests/\n```\n\n-----------------------\n\n<a href=\"https://glama.ai/mcp/servers/@maxim-saplin/mcp_safe_local_python_executor\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@maxim-saplin/mcp_safe_local_python_executor/badge\" />\n</a>\n\n[![smithery badge](https://smithery.ai/badge/@maxim-saplin/mcp_safe_local_python_executor)](https://smithery.ai/server/@maxim-saplin/mcp_safe_local_python_executor)\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/maxim-saplin-mcp-safe-local-python-executor-badge.png)](https://mseep.ai/app/maxim-saplin-mcp-safe-local-python-executor)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_safe_local_python_executor",
        "python",
        "localpythonexecutor",
        "saplin mcp_safe_local_python_executor",
        "mcp_safe_local_python_executor safe",
        "python interpreter"
      ],
      "category": "command-line"
    },
    "misiektoja--kill-process-mcp": {
      "owner": "misiektoja",
      "name": "kill-process-mcp",
      "url": "https://github.com/misiektoja/kill-process-mcp",
      "imageUrl": "",
      "description": "List and terminate OS processes via natural language queries",
      "stars": 9,
      "forks": 4,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-09-22T09:10:04Z",
      "readme_content": "# kill-process-mcp 🔫\n\nCross-platform **MCP** (Model Context Protocol) server exposing tools to **list and kill OS processes** via natural language queries.\n\nPerfect for shy ninjas who just want rogue processes gone!\n\n> **\"Find and nuke the damn CPU glutton choking my system!\"**\n\n<a href=\"https://glama.ai/mcp/servers/@misiektoja/kill-process-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@misiektoja/kill-process-mcp/badge\" alt=\"kill-process-mcp MCP server\" />\n</a>\n\n<a id=\"demo\"></a>\n## Demo\n\n![kill-process-mcp-demo](https://raw.githubusercontent.com/misiektoja/kill-process-mcp/refs/heads/main/assets/kill-process-mcp-demo.gif)\n\n<a id=\"tools\"></a>\n## Tools\n\nThe following tools are exposed to MCP clients:\n\n- `process_list`: Lists running processes sorted by CPU or memory with optional name, user, status, CPU/memory thresholds, system-process filtering, sort order and limit\n- `process_kill`: Terminates the selected process (with extreme prejudice!)\n\n<a id=\"requirements\"></a>\n## Requirements\n\n* MCP-compatible LLM client (like [Claude Desktop](https://claude.ai/download))\n* OS: macOS/Windows/Linux\n* Python 3.13 or higher\n* [uv](https://github.com/astral-sh/uv)\n* Libraries: `mcp` `psutil`\n\n<a id=\"installation\"></a>\n## Installation\n\n<a id=\"1-clone-the-repo-and-install\"></a>\n### 1. Clone the repo and install\n\n```sh\ngit clone https://github.com/misiektoja/kill-process-mcp.git\ncd kill-process-mcp\n```\n\nInstall `uv` if missing:\n\n```sh\npip install uv\n\n# or on macOS: \nbrew install uv\n```\n\nInstall dependencies:\n\n```sh\nuv sync\n```\n\n<a id=\"2-configure-mcp-client\"></a>\n### 2. Configure MCP Client\n\nRegister the `kill-process-mcp` as an MCP server in your client.\n\nFor example, in Claude Desktop add the following to `claude_desktop_config.json` file:\n\n\n  ```json\n{\n    \"mcpServers\":\n    {\n        \"kill-process-mcp\":\n        {\n            \"command\": \"uv\",\n            \"args\":\n            [\n                \"run\",\n                \"--directory\",\n                \"/path/to/kill-process-mcp\",\n                \"kill_process_mcp.py\"\n            ],\n            \"type\": \"stdio\"\n        }\n    }\n}\n  ```\n\nDefault `claude_desktop_config.json` location:\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nReplace `/path/to/kill-process-mcp` with the actual path of your project folder (remember to escape backslash characters if you're on Windows, e.g.: `C:\\\\path\\\\to\\\\kill-process-mcp`)\n\nRestart your LLM client and it should be able to talk to the `kill-process-mcp` server.\n\nIn `Claude Desktop` you can check if the server is installed by going to **Profile → Settings → Integrations**.\n\n<a id=\"example-hit-contracts\"></a>\n## Example Hit Contracts\n\nHere are some example prompts you can use with your MCP-compatible AI assistant when interacting with this MCP server:\n\n- Kill the damn process slowing down my system!\n- Check my top 5 CPU parasites and flag any that look like malware\n- List the 3 greediest processes by RAM usage\n- Exterminate every process with Spotify in its name\n- List Alice's Python processes, max 10 entries\n- Which processes are over 2% CPU and 100 MB RAM\n- **anything else your imagination brings ...**\n\n<a id=\"disclaimer\"></a>\n## Disclaimer\n\nThis MCP server is armed and dangerous. If you snipe the wrong process, that's on you. \n\nProceed with caution.\n\n<a id=\"change-log\"></a>\n## Change Log\n\nSee [RELEASE_NOTES.md](https://github.com/misiektoja/kill-process-mcp/blob/main/RELEASE_NOTES.md) for details.\n\n<a id=\"license\"></a>\n## License\n\nLicensed under GPLv3. See [LICENSE](https://github.com/misiektoja/kill-process-mcp/blob/main/LICENSE).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "processes",
        "process",
        "kill process",
        "os processes",
        "commands capture"
      ],
      "category": "command-line"
    },
    "sonirico--mcp-shell": {
      "owner": "sonirico",
      "name": "mcp-shell",
      "url": "https://github.com/sonirico/mcp-shell",
      "imageUrl": "",
      "description": "🏎️ 🏠 🍎 🪟 🐧 Give hands to AI. MCP server to run shell commands securely, auditably, and on demand on isolated environments like docker.",
      "stars": 30,
      "forks": 7,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-09-29T04:21:11Z",
      "readme_content": "# mcp-shell 🐚\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/sonirico/mcp-shell)](https://archestra.ai/mcp-catalog/sonirico__mcp-shell)\n\nA robust Model Context Protocol (MCP) server that provides secure shell command execution capabilities to AI assistants and other MCP clients. In other words: the brain thinks, this runs the commands.\n\n> 🧠💥🖥️ *Think of `mcp-shell` as the command-line actuator for your LLM.*\n> While language models reason about the world, `mcp-shell` is what lets them **touch it**.\n\n## What is this?\n\nThis tool creates a bridge between AI systems and your shell environment through the standardized MCP protocol. It exposes the system shell as a structured tool, enabling autonomous workflows, tool-assisted reasoning, and real-world problem solving.\n\nBuilt on top of the official MCP SDK for Go: [mark3labs/mcp-go](https://github.com/mark3labs/mcp-go).\n\nIt's written in Go, integrates directly with `mcp-go`, and provides a clean path from thought to execution. I'm aware similar projects exist — this one’s mine. It solves the problem the way I want it solved: minimal, composable, auditable.\n\nOut of the box it runs isolated via Docker, but that's just a start. The roadmap includes support for optional jailing mechanisms like `chroot`, namespaces, and syscall-level confinement — without depending on Docker for everything.\n\n## Features\n\n- **🔒 Security First**: Configurable command allowlists, blocklists, and execution constraints\n- **🐳 Docker Ready**: Lightweight Alpine-based container for secure isolation\n- **📊 Structured Responses**: JSON-formatted output with stdout, stderr, exit codes, and execution metadata\n- **🔄 Binary Data Support**: Optional base64 encoding for handling binary command output\n- **⚡ Performance Monitoring**: Execution time tracking and resource limits\n- **📋 Audit Logging**: Complete command execution audit trail with structured logging\n- **🎯 Context Aware**: Supports command execution with proper context cancellation\n- **⚙️ Environment Configuration**: Full configuration via environment variables\n\n## Security Features\n\n- **Command Validation**: Allowlist/blocklist with regex pattern matching\n- **Execution Limits**: Configurable timeouts and output size limits\n- **User Isolation**: Run commands as unprivileged users\n- **Working Directory**: Restrict execution to specific directories\n- **Audit Trail**: Complete logging of all command executions\n- **Resource Limits**: Memory and CPU usage constraints\n\n## Quick Start\n\n### Prerequisites\n\n- Go 1.23 or later\n- Unix-like system (Linux, macOS, WSL)\n- Docker (optional, for containerized deployment)\n\n### Installation\n\n```bash\ngit clone https://github.com/sonirico/mcp-shell\ncd mcp-shell\nmake install\n```\n\n### Basic Usage\n\n```bash\n# Run with default configuration (if installed system-wide)\nmcp-shell\n\n# Or run locally\nmake run\n\n# Run with security enabled (creates temporary config)\nmake run-secure\n\n# Run with custom config file\nMCP_SHELL_SEC_CONFIG_FILE=security.json mcp-shell\n\n# Run with environment overrides\nMCP_SHELL_LOG_LEVEL=debug mcp-shell\n```\n\n### Docker Deployment (Recommended)\n\n```bash\n# Build Docker image\nmake docker-build\n\n# Run in secure container\nmake docker-run-secure\n\n# Run with shell access for debugging\nmake docker-shell\n```\n\n## Configuration\n\n### Environment Variables\n\nBasic server and logging configuration via environment variables:\n\n#### Server Configuration\n\n- `MCP_SHELL_SERVER_NAME`: Server name (default: \"mcp-shell 🐚\")\n- `MCP_SHELL_VERSION`: Server version (set at compile time)\n\n#### Logging Configuration\n\n- `MCP_SHELL_LOG_LEVEL`: Log level (debug, info, warn, error, fatal)\n- `MCP_SHELL_LOG_FORMAT`: Log format (json, console)\n- `MCP_SHELL_LOG_OUTPUT`: Log output (stdout, stderr, file)\n\n#### Configuration File\n\n- `MCP_SHELL_SEC_CONFIG_FILE`: Path to YAML configuration file\n\n### Security Configuration (YAML Only)\n\nSecurity settings are configured exclusively via YAML configuration file:\n\n```bash\nexport MCP_SHELL_SEC_CONFIG_FILE=security.yaml\n```\n\nExample security configuration file:\n\n```yaml\nsecurity:\n  enabled: true\n  allowed_commands:\n    - ls\n    - cat\n    - grep\n    - find\n    - echo\n  blocked_commands:\n    - rm -rf\n    - sudo\n    - chmod\n  blocked_patterns:\n    - 'rm\\s+.*-rf.*'\n    - 'sudo\\s+.*'\n  max_execution_time: 30s\n  working_directory: /tmp/mcp-workspace\n  max_output_size: 1048576\n  audit_log: true\n```\n\n## Tool Parameters\n\n- `command` (string, required): Shell command to execute\n- `base64` (boolean, optional): Return stdout/stderr as base64-encoded strings\n\n## Response Format\n\n```json\n{\n  \"status\": \"success|error\",\n  \"exit_code\": 0,\n  \"stdout\": \"command output\",\n  \"stderr\": \"error output\", \n  \"command\": \"executed command\",\n  \"execution_time\": \"100ms\",\n  \"security_info\": {\n    \"security_enabled\": true,\n    \"working_dir\": \"/tmp/mcp-workspace\",\n    \"timeout_applied\": true\n  }\n}\n```\n\n## Integration Examples\n\n### With Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"shell\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"--rm\", \"-i\", \"mcp-shell:latest\"],\n      \"env\": {\n        \"MCP_SHELL_SECURITY_ENABLED\": \"true\",\n        \"MCP_SHELL_LOG_LEVEL\": \"info\"\n      }\n    }\n  }\n}\n```\n\n### Production Deployment\n\n```bash\n# Build and install\nmake build\nsudo make install-bin\n\n# Set environment variables for basic config\nexport MCP_SHELL_LOG_LEVEL=info\nexport MCP_SHELL_LOG_FORMAT=json\nexport MCP_SHELL_SEC_CONFIG_FILE=/etc/mcp-shell/config.json\n\n# Security is configured in the JSON file only\n# Run service\nmcp-shell\n```\n\n## Development\n\n```bash\n# Install dependencies and dev tools\nmake install dev-tools\n\n# Format code\nmake fmt\n\n# Run tests\nmake test\n\n# Run linter\nmake lint\n\n# Build for release\nmake release\n\n# Generate config example\nmake config-example\n```\n\n## Security Considerations\n\n### ⚠️ Important Security Notes\n\n1. **Default Mode**: Runs with **full system access** when security is disabled (which is, of course, a terrible idea — unless you're into that).\n2. **Container Isolation**: Use Docker deployment for additional security layers\n3. **User Privileges**: Run as non-root user in production\n4. **Network Access**: Commands can access network unless explicitly restricted\n5. **File System**: Can read/write files based on user permissions\n\n### Recommended Production Setup\n\nCreate `security.yaml`:\n\n```yaml\nsecurity:\n  enabled: true\n  allowed_commands:\n    - ls\n    - cat\n    - head\n    - tail\n    - grep\n    - find\n    - wc\n    - sort\n    - uniq\n  blocked_patterns:\n    - 'rm\\s+.*-rf.*'\n    - 'sudo\\s+.*'\n    - 'chmod\\s+(777|666)'\n    - '>/dev/'\n    - 'curl.*\\|.*sh'\n  max_execution_time: 10s\n  working_directory: /tmp/mcp-workspace\n  max_output_size: 524288\n  audit_log: true\n```\n\nSet environment:\n```bash\nexport MCP_SHELL_SEC_CONFIG_FILE=security.yaml\nexport MCP_SHELL_LOG_LEVEL=info\nexport MCP_SHELL_LOG_FORMAT=json\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add amazing feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open Pull Request\n\nEnsure code is formatted (`make fmt`) and passes tests (`make test`).\n\n## License\n\nMIT License - See LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "mcp",
        "command",
        "mcp shell",
        "shell commands",
        "mcp server"
      ],
      "category": "command-line"
    },
    "tufantunc--ssh-mcp": {
      "owner": "tufantunc",
      "name": "ssh-mcp",
      "url": "https://github.com/tufantunc/ssh-mcp",
      "imageUrl": "",
      "description": "MCP server exposing SSH control for Linux and Windows servers via Model Context Protocol. Securely execute remote shell commands with password or SSH key authentication.",
      "stars": 105,
      "forks": 15,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T15:49:19Z",
      "readme_content": "# SSH MCP Server\n\n[![NPM Version](https://img.shields.io/npm/v/ssh-mcp)](https://www.npmjs.com/package/ssh-mcp)\n[![Downloads](https://img.shields.io/npm/dm/ssh-mcp)](https://www.npmjs.com/package/ssh-mcp)\n[![Node Version](https://img.shields.io/node/v/ssh-mcp)](https://nodejs.org/)\n[![License](https://img.shields.io/github/license/tufantunc/ssh-mcp)](./LICENSE)\n[![GitHub Stars](https://img.shields.io/github/stars/tufantunc/ssh-mcp?style=social)](https://github.com/tufantunc/ssh-mcp/stargazers)\n[![GitHub Forks](https://img.shields.io/github/forks/tufantunc/ssh-mcp?style=social)](https://github.com/tufantunc/ssh-mcp/forks)\n[![Build Status](https://github.com/tufantunc/ssh-mcp/actions/workflows/publish.yml/badge.svg)](https://github.com/tufantunc/ssh-mcp/actions)\n[![GitHub issues](https://img.shields.io/github/issues/tufantunc/ssh-mcp)](https://github.com/tufantunc/ssh-mcp/issues)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/tufantunc/ssh-mcp)](https://archestra.ai/mcp-catalog/tufantunc__ssh-mcp)\n\n**SSH MCP Server** is a local Model Context Protocol (MCP) server that exposes SSH control for Linux and Windows systems, enabling LLMs and other MCP clients to execute shell commands securely via SSH.\n\n## Contents\n\n- [Quick Start](#quick-start)\n- [Features](#features)\n- [Installation](#installation)\n- [Client Setup](#client-setup)\n- [Testing](#testing)\n- [Disclaimer](#disclaimer)\n- [Support](#support)\n\n## Quick Start\n\n- [Install](#installation) SSH MCP Server\n- [Configure](#configuration) SSH MCP Server\n- [Set up](#client-setup) your MCP Client (e.g. Claude Desktop, Cursor, etc)\n- Execute remote shell commands on your Linux or Windows server via natural language\n\n## Features\n\n- MCP-compliant server exposing SSH capabilities\n- Execute shell commands on remote Linux and Windows systems\n- Secure authentication via password or SSH key\n- Built with TypeScript and the official MCP SDK\n- **Configurable timeout protection** with automatic process abortion\n- **Graceful timeout handling** - attempts to kill hanging processes before closing connections\n\n### Tools\n\n- `exec`: Execute a shell command on the remote server\n  - **Parameters:**\n    - `command` (required): Shell command to execute on the remote SSH server\n  - **Timeout Configuration:**\n    - Timeout is configured via command line argument `--timeout` (in milliseconds)\n    - Default timeout: 60000ms (1 minute)\n    - When a command times out, the server automatically attempts to abort the running process before closing the connection\n  - **Max Command Length Configuration:**\n    - Max command characters are configured via `--maxChars`\n    - Default: `1000`\n    - No-limit mode: set `--maxChars=none` or any `<= 0` value (e.g. `--maxChars=0`)\n\n## Installation\n\n1. **Clone the repository:**\n   ```bash\n   git clone https://github.com/tufantunc/ssh-mcp.git\n   cd ssh-mcp\n   ```\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n## Client Setup\n\nYou can configure Claude Desktop to use this MCP Server.\n\n**Required Parameters:**\n- `host`: Hostname or IP of the Linux or Windows server\n- `user`: SSH username\n\n**Optional Parameters:**\n- `port`: SSH port (default: 22)\n- `password`: SSH password (or use `key` for key-based auth)\n- `key`: Path to private SSH key\n- `timeout`: Command execution timeout in milliseconds (default: 60000ms = 1 minute)\n- `maxChars`: Maximum allowed characters for the `command` input (default: 1000). Use `none` or `0` to disable the limit.\n\n\n```commandline\n{\n    \"mcpServers\": {\n        \"ssh-mcp\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"ssh-mcp\",\n                \"-y\",\n                \"--\",\n                \"--host=1.2.3.4\",\n                \"--port=22\",\n                \"--user=root\",\n                \"--password=pass\",\n                \"--key=path/to/key\",\n                \"--timeout=30000\",\n                \"--maxChars=none\"\n            ]\n        }\n    }\n}\n```\n\n## Testing\n\nYou can use the [MCP Inspector](https://modelcontextprotocol.io/docs/tools/inspector) for visual debugging of this MCP Server.\n\n```sh\nnpm run inspect\n```\n\n## Disclaimer\n\nSSH MCP Server is provided under the [MIT License](./LICENSE). Use at your own risk. This project is not affiliated with or endorsed by any SSH or MCP provider.\n\n## Contributing\n\nWe welcome contributions! Please see our [Contributing Guidelines](./CONTRIBUTING.md) for more information.\n\n## Code of Conduct\n\nThis project follows a [Code of Conduct](./CODE_OF_CONDUCT.md) to ensure a welcoming environment for everyone.\n\n## Support\n\nIf you find SSH MCP Server helpful, consider starring the repository or contributing! Pull requests and feedback are welcome. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "ssh",
        "mcp",
        "ssh mcp",
        "remote shell",
        "tufantunc ssh"
      ],
      "category": "command-line"
    },
    "tumf--mcp-shell-server": {
      "owner": "tumf",
      "name": "mcp-shell-server",
      "url": "https://github.com/tumf/mcp-shell-server",
      "imageUrl": "",
      "description": "A secure shell command execution server implementing the Model Context Protocol (MCP)",
      "stars": 140,
      "forks": 39,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T16:16:44Z",
      "readme_content": "# MCP Shell Server\n\n[![codecov](https://codecov.io/gh/tumf/mcp-shell-server/branch/main/graph/badge.svg)](https://codecov.io/gh/tumf/mcp-shell-server)\n[![smithery badge](https://smithery.ai/badge/mcp-shell-server)](https://smithery.ai/server/mcp-shell-server)\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/tumf-mcp-shell-server-badge.png)](https://mseep.ai/app/tumf-mcp-shell-server)\n\nA secure shell command execution server implementing the Model Context Protocol (MCP). This server allows remote execution of whitelisted shell commands with support for stdin input.\n\n<a href=\"https://glama.ai/mcp/servers/rt2d4pbn22\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/rt2d4pbn22/badge\" alt=\"mcp-shell-server MCP server\" /></a>\n\n<a href=\"https://glama.ai/mcp/servers/rt2d4pbn22\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/rt2d4pbn22/badge\" alt=\"mcp-shell-server MCP server\" /></a>\n\n## Features\n\n* **Secure Command Execution**: Only whitelisted commands can be executed\n* **Standard Input Support**: Pass input to commands via stdin\n* **Comprehensive Output**: Returns stdout, stderr, exit status, and execution time\n* **Shell Operator Safety**: Validates commands after shell operators (; , &&, ||, |)\n* **Timeout Control**: Set maximum execution time for commands\n\n## MCP client setting in your Claude.app\n\n### Published version\n\n```shell\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"shell\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-shell-server\"\n      ],\n      \"env\": {\n        \"ALLOW_COMMANDS\": \"ls,cat,pwd,grep,wc,touch,find\"\n      }\n    },\n  }\n}\n```\n\n### Local version\n\n#### Configuration\n\n```shell\ncode ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n```json\n{\n  \"mcpServers\": {\n    \"shell\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \".\",\n        \"run\",\n        \"mcp-shell-server\"\n      ],\n      \"env\": {\n        \"ALLOW_COMMANDS\": \"ls,cat,pwd,grep,wc,touch,find\"\n      }\n    },\n  }\n}\n```\n\n#### Installation\n\n### Installing via Smithery\n\nTo install Shell Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-shell-server):\n\n```bash\nnpx -y @smithery/cli install mcp-shell-server --client claude\n```\n\n### Manual Installation\n\n### Installing via Smithery\n\nTo install Shell Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-shell-server):\n\n```bash\nnpx -y @smithery/cli install mcp-shell-server --client claude\n```\n\n### Manual Installation\n\n```bash\npip install mcp-shell-server\n```\n\n### Installing via Smithery\n\nTo install Shell Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-shell-server):\n\n```bash\nnpx -y @smithery/cli install mcp-shell-server --client claude\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nALLOW_COMMANDS=\"ls,cat,echo\" uvx mcp-shell-server\n# Or using the alias\nALLOWED_COMMANDS=\"ls,cat,echo\" uvx mcp-shell-server\n```\n\nThe `ALLOW_COMMANDS` (or its alias `ALLOWED_COMMANDS` ) environment variable specifies which commands are allowed to be executed. Commands can be separated by commas with optional spaces around them.\n\nValid formats for ALLOW_COMMANDS or ALLOWED_COMMANDS:\n\n```bash\nALLOW_COMMANDS=\"ls,cat,echo\"          # Basic format\nALLOWED_COMMANDS=\"ls ,echo, cat\"      # With spaces (using alias)\nALLOW_COMMANDS=\"ls,  cat  , echo\"     # Multiple spaces\n```\n\n### Request Format\n\n```python\n# Basic command execution\n{\n    \"command\": [\"ls\", \"-l\", \"/tmp\"]\n}\n\n# Command with stdin input\n{\n    \"command\": [\"cat\"],\n    \"stdin\": \"Hello, World!\"\n}\n\n# Command with timeout\n{\n    \"command\": [\"long-running-process\"],\n    \"timeout\": 30  # Maximum execution time in seconds\n}\n\n# Command with working directory and timeout\n{\n    \"command\": [\"grep\", \"-r\", \"pattern\"],\n    \"directory\": \"/path/to/search\",\n    \"timeout\": 60\n}\n```\n\n### Response Format\n\nSuccessful response:\n\n```json\n{\n    \"stdout\": \"command output\",\n    \"stderr\": \"\",\n    \"status\": 0,\n    \"execution_time\": 0.123\n}\n```\n\nError response:\n\n```json\n{\n    \"error\": \"Command not allowed: rm\",\n    \"status\": 1,\n    \"stdout\": \"\",\n    \"stderr\": \"Command not allowed: rm\",\n    \"execution_time\": 0\n}\n```\n\n## Security\n\nThe server implements several security measures:\n\n1. **Command Whitelisting**: Only explicitly allowed commands can be executed\n2. **Shell Operator Validation**: Commands after shell operators (;, &&, ||, |) are also validated against the whitelist\n3. **No Shell Injection**: Commands are executed directly without shell interpretation\n\n## Development\n\n### Setting up Development Environment\n\n1. Clone the repository\n\n```bash\ngit clone https://github.com/yourusername/mcp-shell-server.git\ncd mcp-shell-server\n```\n\n2. Install dependencies including test requirements\n\n```bash\npip install -e \".[test]\"\n```\n\n### Running Tests\n\n```bash\npytest\n```\n\n## API Reference\n\n### Request Arguments\n\n| Field     | Type       | Required | Description                                   |\n|-----------|------------|----------|-----------------------------------------------|\n| command   | string[]   | Yes      | Command and its arguments as array elements   |\n| stdin     | string     | No       | Input to be passed to the command            |\n| directory | string     | No       | Working directory for command execution       |\n| timeout   | integer    | No       | Maximum execution time in seconds             |\n\n### Response Fields\n\n| Field           | Type    | Description                                |\n|----------------|---------|---------------------------------------------|\n| stdout         | string  | Standard output from the command           |\n| stderr         | string  | Standard error output from the command     |\n| status         | integer | Exit status code                           |\n| execution_time | float   | Time taken to execute (in seconds)         |\n| error          | string  | Error message (only present if failed)     |\n\n## Requirements\n\n* Python 3.11 or higher\n* mcp>=1.1.0\n\n## License\n\nMIT License - See LICENSE file for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "shell",
        "command",
        "mcp shell",
        "command execution",
        "secure shell"
      ],
      "category": "command-line"
    },
    "wonderwhy-er--DesktopCommanderMCP": {
      "owner": "wonderwhy-er",
      "name": "DesktopCommanderMCP",
      "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
      "imageUrl": "",
      "description": "A swiss-army-knife that can manage/execute programs and read/write/search/edit code and text files.",
      "stars": 4611,
      "forks": 511,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T08:03:00Z",
      "readme_content": "# Desktop Commander MCP\n### Search, update, manage files and run terminal commands with AI\n\n[![npm downloads](https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander)](https://www.npmjs.com/package/@wonderwhy-er/desktop-commander)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/wonderwhy-er/DesktopCommanderMCP)](https://archestra.ai/mcp-catalog/wonderwhy-er__desktopcommandermcp)\n[![smithery badge](https://smithery.ai/badge/@wonderwhy-er/desktop-commander)](https://smithery.ai/server/@wonderwhy-er/desktop-commander)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://www.buymeacoffee.com/wonderwhyer)\n\n\n[![Discord](https://img.shields.io/badge/Join%20Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/kQ27sNnZr7)\n\n\nWork with code and text, run processes, and automate tasks, going far beyond other AI editors - without API token costs.\n\n\n\n\n<a href=\"https://glama.ai/mcp/servers/zempur9oh4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zempur9oh4/badge\" alt=\"Desktop Commander MCP\" />\n</a>\n\n## Table of Contents\n- [Features](#features)\n- [How to install](#how-to-install)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n- [Handling Long-Running Commands](#handling-long-running-commands)\n- [Work in Progress and TODOs](#roadmap)\n- [Sponsors and Supporters](#support-desktop-commander)\n- [Website](#website)\n- [Media](#media)\n- [Testimonials](#testimonials)\n- [Frequently Asked Questions](#frequently-asked-questions)\n- [Contributing](#contributing)\n- [License](#license)\n\nAll of your AI development tools in one place.\nDesktop Commander puts all dev tools in one chat.\nExecute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP). Built on top of [MCP Filesystem Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to provide additional search and replace file editing capabilities.\n\n## Features\n\n- **Enhanced terminal commands with interactive process control**\n- **Execute code in memory (Python, Node.js, R) without saving files**\n- **Instant data analysis - just ask to analyze CSV/JSON files**\n- **Interact with running processes (SSH, databases, development servers)**\n- Execute terminal commands with output streaming\n- Command timeout and background execution support\n- Process management (list and kill processes)\n- Session management for long-running commands\n- Server configuration management:\n  - Get/set configuration values\n  - Update multiple settings at once\n  - Dynamic configuration changes without server restart\n- Full filesystem operations:\n  - Read/write files\n  - Create/list directories\n  - Move files/directories\n  - Search files\n  - Get file metadata\n  - **Negative offset file reading**: Read from end of files using negative offset values (like Unix tail)\n- Code editing capabilities:\n  - Surgical text replacements for small changes\n  - Full file rewrites for major changes\n  - Multiple file support\n  - Pattern-based replacements\n  - vscode-ripgrep based recursive code or text search in folders\n- Comprehensive audit logging:\n  - All tool calls are automatically logged\n  - Log rotation with 10MB size limit\n  - Detailed timestamps and arguments\n\n## How to install\n\nDesktop Commander offers multiple installation methods to fit different user needs and technical requirements.\n\n> **📋 Update & Uninstall Information:** Before choosing an installation option, note that **only Options 1, 2, 3, and 6 have automatic updates**. Options 4 and 5 require manual updates. See the sections below for update and uninstall instructions for each option.\n\n### Option 1: Install through npx ⭐ **Auto-Updates** **Requires Node.js**\nJust run this in terminal:\n```\nnpx @wonderwhy-er/desktop-commander@latest setup\n```\n\nFor debugging mode (allows Node.js inspector connection):\n```\nnpx @wonderwhy-er/desktop-commander@latest setup --debug\n```\n\n**Command line options during setup:**\n- `--debug`: Enable debugging mode for Node.js inspector\n- `--no-onboarding`: Disable onboarding prompts for new users\n\nRestart Claude if running.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Run the setup command again  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove`\n\n### Option 2: Using bash script installer (macOS) ⭐ **Auto-Updates** **Installs Node.js if needed**\nFor macOS users, you can use our automated bash installer which will check your Node.js version, install it if needed, and automatically configure Desktop Commander:\n```\ncurl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install.sh | bash\n```\nThis script handles all dependencies and configuration automatically for a seamless setup experience.\n\n**✅ Auto-Updates:** Yes - requires manual updates  \n**🔄 Manual Update:** Re-run the bash installer command above  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove`\n\n### Option 3: Installing via Smithery ⭐ **Auto-Updates** **Requires Node.js**\n\nTo install Desktop Commander for Claude Desktop via [Smithery](https://smithery.ai/server/@wonderwhy-er/desktop-commander):\n\n1. **Visit the Smithery page:** https://smithery.ai/server/@wonderwhy-er/desktop-commander\n2. **Login to Smithery** if you haven't already\n3. **Select your client** (Claude Desktop) on the right side\n4. **Install with the provided key** that appears after selecting your client\n5. **Restart Claude Desktop**\n\nThe old command-line installation method is no longer supported. Please use the web interface above for the most reliable installation experience.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Visit the Smithery page and reinstall  \n\n### Option 4: Add to claude_desktop_config manually ⭐ **Auto-Updates** **Requires Node.js**\nAdd this entry to your claude_desktop_config.json:\n\n- On Mac: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- On Linux: `~/.config/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander@latest\"\n      ]\n    }\n  }\n}\n```\nRestart Claude if running.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Run the setup command again  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove` or  remove the \"desktop-commander\" entry from your claude_desktop_config.json file\n\n### ### Option 5: Checkout locally ❌ **Manual Updates** **Requires Node.js** ❌ **Manual Updates** **Requires Node.js**\n1. Clone and build:\n```bash\ngit clone https://github.com/wonderwhy-er/DesktopCommanderMCP.git\ncd DesktopCommanderMCP\nnpm run setup\n```\nRestart Claude if running.\n\nThe setup command will:\n- Install dependencies\n- Build the server\n- Configure Claude's desktop app\n- Add MCP servers to Claude's config if needed\n\n**❌ Auto-Updates:** No - requires manual git updates  \n**🔄 Manual Update:** `cd DesktopCommanderMCP && git pull && npm run setup`  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove` or remove the cloned directory and remove MCP server entry from Claude config\n\n### Option 6: Docker Installation 🐳 ⭐ **Auto-Updates** **No Node.js Required**\n\nPerfect for users who want complete or partial isolation or don't have Node.js installed. Desktop Commander runs in a sandboxed Docker container with a persistent work environment.\n\n#### Prerequisites\n- [Docker Desktop](https://www.docker.com/products/docker-desktop/) installed **and running**\n- Claude Desktop app installed\n\n**Important:** Make sure Docker Desktop is fully started before running the installer.\n\n#### Automated Installation (Recommended)\n\n**macOS/Linux:**\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh)\n```\n\n**Windows PowerShell:**\n```powershell\n# Download and run the installer (one-liner)\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'))\n```\n\nThe automated installer will:\n- Check Docker installation\n- Pull the latest Docker image \n- Prompt you to select folders for mounting\n- Configure Claude Desktop automatically\n- Restart Claude if possible\n\n#### How Docker Persistence Works\nDesktop Commander creates a persistent work environment that remembers everything between sessions:\n- **Your development tools**: Any software you install (Node.js, Python, databases, etc.) stays installed\n- **Your configurations**: Git settings, SSH keys, shell preferences, and other personal configs are preserved  \n- **Your work files**: Projects and files in the workspace area persist across restarts\n- **Package caches**: Downloaded packages and dependencies are cached for faster future installs\n\nThink of it like having your own dedicated development computer that never loses your setup, but runs safely isolated from your main system.\n\n#### Manual Docker Configuration\n\nIf you prefer manual setup, add this to your claude_desktop_config.json:\n\n**Basic setup (no file access):**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n**With folder mounting:**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\", \"/Users/username/Desktop:/mnt/desktop\",\n        \"-v\", \"/Users/username/Documents:/mnt/documents\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n**Advanced folder mounting:**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"dc-system:/usr\",\n        \"-v\", \"dc-home:/root\", \n        \"-v\", \"dc-workspace:/workspace\",\n        \"-v\", \"dc-packages:/var\",\n        \"-v\", \"/Users/username/Projects:/mnt/Projects\",\n        \"-v\", \"/Users/username/Downloads:/mnt/Downloads\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n#### Docker Benefits\n✅ **Controlled Isolation:** Runs in sandboxed environment with persistent development state\n✅ **No Node.js Required:** Everything included in the container\n✅ **Cross-Platform:** Same experience on all operating systems\n✅ **Persistent Environment:** Your tools, files, configs, and work survives restarts\n\n**✅ Auto-Updates:** Yes - `latest` tag automatically gets newer versions  \n**🔄 Manual Update:** `docker pull mcp/desktop-commander:latest` then restart Claude  \n\n#### Docker Management Commands\n\n**macOS/Linux:**\n\nCheck installation status:\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --status\n```\n\nReset all persistent data (removes all installed tools and configs):\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --reset\n```\n\n**Windows PowerShell:**\n\nCheck status:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Status\n```\n\nReset all data:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Reset\n```\n\nShow help:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Help\n```\n\nVerbose output:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -VerboseOutput\n```  \n\n#### Troubleshooting Docker Installation\nIf you broke the Docker container or need a fresh start:\n```bash\n# Reset and reinstall from scratch\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --reset && bash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh)\n```\nThis will completely reset your persistent environment and reinstall everything fresh with exception of not touching mounted folders\n\n## Updating & Uninstalling Desktop Commander\n\n### Automatic Updates (Options 1, 2, 3, 4 & 6)\n**Options 1 (npx), Option 2 (bash installer), 3 (Smithery), 4 (manual config), and 6 (Docker)** automatically update to the latest version whenever you restart Claude. No manual intervention needed.\n\n### Manual Updates (Option 5)\n- **Option 5 (local checkout):** `cd DesktopCommanderMCP && git pull && npm run setup`\n\n### Uninstalling Desktop Commander\n#### 🤖 Automatic Uninstallation (Recommended)\n\nThe easiest way to completely remove Desktop Commander:\n\n```bash\nnpx @wonderwhy-er/desktop-commander@latest remove\n```\n\nThis automatic uninstaller will:\n- ✅ Remove Desktop Commander from Claude's MCP server configuration\n- ✅ Create a backup of your Claude config before making changes\n- ✅ Provide guidance for complete package removal\n- ✅ Restore from backup if anything goes wrong\n\n#### 🔧 Manual Uninstallation\n\nIf the automatic uninstaller doesn't work or you prefer manual removal:\n\n##### Remove from Claude Configuration\n\n1. **Locate your Claude Desktop config file:**\n  - **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n  - **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json`\n  - **Linux:** `~/.config/Claude/claude_desktop_config.json`\n\n2. **Edit the config file:**\n  - Open the file in a text editor\n  - Find and remove the `\"desktop-commander\"` entry from the `\"mcpServers\"` section\n  - Save the file\n\n  **Example - Remove this section:**\n  ```json\n  {\n      \"desktop-commander\": {\n        \"command\": \"npx\",\n        \"args\": [\"@wonderwhy-er/desktop-commander@latest\"]\n      }\n  }\n  ```\n\nClose and restart Claude Desktop to complete the removal.\n\n#### 🆘 Troubleshooting\n\n**If automatic uninstallation fails:**\n- Use manual uninstallation as a fallback\n\n**If Claude won't start after uninstalling:**\n- Restore the backup config file created by the uninstaller\n- Or manually fix the JSON syntax in your claude_desktop_config.json\n\n**Need help?**\n- Join our Discord community: https://discord.com/invite/kQ27sNnZr7\n\n## Getting Started\n\nOnce Desktop Commander is installed and Claude Desktop is restarted, you're ready to supercharge your Claude experience!\n\n### 🚀 New User Onboarding\n\nDesktop Commander includes intelligent onboarding to help you discover what's possible:\n\n**For New Users:** When you're just getting started (fewer than 10 successful commands), Claude will automatically offer helpful getting-started guidance and practical tutorials after you use Desktop Commander successfully.\n\n**Request Help Anytime:** You can ask for onboarding assistance at any time by simply saying:\n- *\"Help me get started with Desktop Commander\"*\n- *\"Show me Desktop Commander examples\"* \n- *\"What can I do with Desktop Commander?\"*\n\nClaude will then show you beginner-friendly tutorials and examples, including:\n- 📁 Organizing your Downloads folder automatically\n- 📊 Analyzing CSV/Excel files with Python\n- ⚙️ Setting up GitHub Actions CI/CD\n- 🔍 Exploring and understanding codebases\n- 🤖 Running interactive development environments\n\n## Usage\n\nThe server provides a comprehensive set of tools organized into several categories:\n\n### Available Tools\n\n| Category | Tool | Description |\n|----------|------|-------------|\n| **Configuration** | `get_config` | Get the complete server configuration as JSON (includes blockedCommands, defaultShell, allowedDirectories, fileReadLineLimit, fileWriteLineLimit, telemetryEnabled) |\n| | `set_config_value` | Set a specific configuration value by key. Available settings: <br>• `blockedCommands`: Array of shell commands that cannot be executed<br>• `defaultShell`: Shell to use for commands (e.g., bash, zsh, powershell)<br>• `allowedDirectories`: Array of filesystem paths the server can access for file operations (⚠️ terminal commands can still access files outside these directories)<br>• `fileReadLineLimit`: Maximum lines to read at once (default: 1000)<br>• `fileWriteLineLimit`: Maximum lines to write at once (default: 50)<br>• `telemetryEnabled`: Enable/disable telemetry (boolean) |\n| **Terminal** | `start_process` | Start programs with smart detection of when they're ready for input |\n| | `interact_with_process` | Send commands to running programs and get responses |\n| | `read_process_output` | Read output from running processes |\n| | `force_terminate` | Force terminate a running terminal session |\n| | `list_sessions` | List all active terminal sessions |\n| | `list_processes` | List all running processes with detailed information |\n| | `kill_process` | Terminate a running process by PID |\n| **Filesystem** | `read_file` | Read contents from local filesystem or URLs with line-based pagination (supports positive/negative offset and length parameters) |\n| | `read_multiple_files` | Read multiple files simultaneously |\n| | `write_file` | Write file contents with options for rewrite or append mode (uses configurable line limits) |\n| | `create_directory` | Create a new directory or ensure it exists |\n| | `list_directory` | Get detailed recursive listing of files and directories (supports depth parameter, default depth=2) |\n| | `move_file` | Move or rename files and directories |\n| | `start_search` | Start streaming search for files by name or content patterns (unified ripgrep-based search) |\n| | `get_more_search_results` | Get paginated results from active search with offset support |\n| | `stop_search` | Stop an active search gracefully |\n| | `list_searches` | List all active search sessions |\n| | `get_file_info` | Retrieve detailed metadata about a file or directory |\n| **Text Editing** | `edit_block` | Apply targeted text replacements with enhanced prompting for smaller edits (includes character-level diff feedback) |\n| **Analytics** | `get_usage_stats` | Get usage statistics for your own insight |\n| | `get_recent_tool_calls` | Get recent tool call history with arguments and outputs for debugging and context recovery |\n| | `give_feedback_to_desktop_commander` | Open feedback form in browser to provide feedback to Desktop Commander Team |\n\n### Quick Examples\n\n**Data Analysis:**\n```\n\"Analyze sales.csv and show top customers\" → Claude runs Python code in memory\n```\n\n**Remote Access:**\n```\n\"SSH to my server and check disk space\" → Claude maintains SSH session\n```\n\n**Development:**\n```\n\"Start Node.js and test this API\" → Claude runs interactive Node session\n```\n\n### Tool Usage Examples\n\nSearch/Replace Block Format:\n```\nfilepath.ext\n<<<<<<< SEARCH\ncontent to find\n=======\nnew content\n>>>>>>> REPLACE\n```\n\nExample:\n```\nsrc/main.js\n<<<<<<< SEARCH\nconsole.log(\"old message\");\n=======\nconsole.log(\"new message\");\n>>>>>>> REPLACE\n```\n\n### Enhanced Edit Block Features\n\nThe `edit_block` tool includes several enhancements for better reliability:\n\n1. **Improved Prompting**: Tool descriptions now emphasize making multiple small, focused edits rather than one large change\n2. **Fuzzy Search Fallback**: When exact matches fail, it performs fuzzy search and provides detailed feedback\n3. **Character-level Diffs**: Shows exactly what's different using `{-removed-}{+added+}` format\n4. **Multiple Occurrence Support**: Can replace multiple instances with `expected_replacements` parameter\n5. **Comprehensive Logging**: All fuzzy searches are logged for analysis and debugging\n\nWhen a search fails, you'll see detailed information about the closest match found, including similarity percentage, execution time, and character differences. All these details are automatically logged for later analysis using the fuzzy search log tools.\n\n### Docker Support\n\n### 🐳 Isolated Environment Usage\n\nDesktop Commander can be run in Docker containers for **complete isolation from your host system**, providing **zero risk to your computer**. This is perfect for testing, development, or when you want complete sandboxing.\n\n### Installation Instructions\n\n1. **Install Docker for Windows/Mac**\n   - Download and install Docker Desktop from [docker.com](https://www.docker.com/products/docker-desktop/)\n\n2. **Get Desktop Commander Docker Configuration**\n   - Visit: https://hub.docker.com/mcp/server/desktop-commander/manual\n   - **Option A:** Use the provided terminal command for automated setup\n   - **Option B:** Click \"Standalone\" to get the config JSON and add it manually to your Claude Desktop config\n \n\n3. **Mount Your Machine Folders (Coming Soon)**\n   - Instructions on how to mount your local directories into the Docker container will be provided soon\n   - This will allow you to work with your files while maintaining complete isolation\n\n### Benefits of Docker Usage\n- **Complete isolation** from your host system\n- **Consistent environment** across different machines\n- **Easy cleanup** - just remove the container when done\n- **Perfect for testing** new features or configurations\n\n## URL Support\n- `read_file` can now fetch content from both local files and URLs\n- Example: `read_file` with `isUrl: true` parameter to read from web resources\n- Handles both text and image content from remote sources\n- Images (local or from URLs) are displayed visually in Claude's interface, not as text\n- Claude can see and analyze the actual image content\n- Default 30-second timeout for URL requests\n\n## Fuzzy Search Log Analysis (npm scripts)\n\nThe fuzzy search logging system includes convenient npm scripts for analyzing logs outside of the MCP environment:\n\n```bash\n# View recent fuzzy search logs\nnpm run logs:view -- --count 20\n\n# Analyze patterns and performance\nnpm run logs:analyze -- --threshold 0.8\n\n# Export logs to CSV or JSON\nnpm run logs:export -- --format json --output analysis.json\n\n# Clear all logs (with confirmation)\nnpm run logs:clear\n```\n\nFor detailed documentation on these scripts, see [scripts/README.md](scripts/README.md).\n\n## Fuzzy Search Logs\n\nDesktop Commander includes comprehensive logging for fuzzy search operations in the `edit_block` tool. When an exact match isn't found, the system performs a fuzzy search and logs detailed information for analysis.\n\n### What Gets Logged\n\nEvery fuzzy search operation logs:\n- **Search and found text**: The text you're looking for vs. what was found\n- **Similarity score**: How close the match is (0-100%)\n- **Execution time**: How long the search took\n- **Character differences**: Detailed diff showing exactly what's different\n- **File metadata**: Extension, search/found text lengths\n- **Character codes**: Specific character codes causing differences\n\n### Log Location\n\nLogs are automatically saved to:\n- **macOS/Linux**: `~/.claude-server-commander-logs/fuzzy-search.log`\n- **Windows**: `%USERPROFILE%\\.claude-server-commander-logs\\fuzzy-search.log`\n\n### What You'll Learn\n\nThe fuzzy search logs help you understand:\n1. **Why exact matches fail**: Common issues like whitespace differences, line endings, or character encoding\n2. **Performance patterns**: How search complexity affects execution time\n3. **File type issues**: Which file extensions commonly have matching problems\n4. **Character encoding problems**: Specific character codes that cause diffs\n\n## Audit Logging\n\nDesktop Commander now includes comprehensive logging for all tool calls:\n\n### What Gets Logged\n- Every tool call is logged with timestamp, tool name, and arguments (sanitized for privacy)\n- Logs are rotated automatically when they reach 10MB in size\n\n### Log Location\nLogs are saved to:\n- **macOS/Linux**: `~/.claude-server-commander/claude_tool_call.log`\n- **Windows**: `%USERPROFILE%\\.claude-server-commander\\claude_tool_call.log`\n\nThis audit trail helps with debugging, security monitoring, and understanding how Claude is interacting with your system.\n\n## Handling Long-Running Commands\n\nFor commands that may take a while:\n\n## Configuration Management\n\n### ⚠️ Important Security Warnings\n\n> **For comprehensive security information and vulnerability reporting**: See [SECURITY.md](SECURITY.md)\n\n1. **Known security limitations**: Directory restrictions and command blocking can be bypassed through various methods including symlinks, command substitution, and absolute paths or code execution\n\n2. **Always change configuration in a separate chat window** from where you're doing your actual work. Claude may sometimes attempt to modify configuration settings (like `allowedDirectories`) if it encounters filesystem access restrictions.\n\n3. **The `allowedDirectories` setting currently only restricts filesystem operations**, not terminal commands. Terminal commands can still access files outside allowed directories.\n\n4. **For production security**: Use the [Docker installation](#option-6-docker-installation-🐳-⭐-auto-updates-no-nodejs-required) which provides complete isolation from your host system.\n\n### Configuration Tools\n\nYou can manage server configuration using the provided tools:\n\n```javascript\n// Get the entire config\nget_config({})\n\n// Set a specific config value\nset_config_value({ \"key\": \"defaultShell\", \"value\": \"/bin/zsh\" })\n\n// Set multiple config values using separate calls\nset_config_value({ \"key\": \"defaultShell\", \"value\": \"/bin/bash\" })\nset_config_value({ \"key\": \"allowedDirectories\", \"value\": [\"/Users/username/projects\"] })\n```\n\nThe configuration is saved to `config.json` in the server's working directory and persists between server restarts.\n\n#### Understanding fileWriteLineLimit\n\nThe `fileWriteLineLimit` setting controls how many lines can be written in a single `write_file` operation (default: 50 lines). This limit exists for several important reasons:\n\n**Why the limit exists:**\n- **AIs are wasteful with tokens**: Instead of doing two small edits in a file, AIs may decide to rewrite the whole thing. We're trying to force AIs to do things in smaller changes as it saves time and tokens\n- **Claude UX message limits**: There are limits within one message and hitting \"Continue\" does not really work. What we're trying here is to make AI work in smaller chunks so when you hit that limit, multiple chunks have succeeded and that work is not lost - it just needs to restart from the last chunk\n\n**Setting the limit:**\n```javascript\n// You can set it to thousands if you want\nset_config_value({ \"key\": \"fileWriteLineLimit\", \"value\": 1000 })\n\n// Or keep it smaller to force more efficient behavior\nset_config_value({ \"key\": \"fileWriteLineLimit\", \"value\": 25 })\n```\n\n**Maximum value**: You can set it to thousands if you want - there's no technical restriction.\n\n**Best practices**:\n- Keep the default (50) to encourage efficient AI behavior and avoid token waste\n- The system automatically suggests chunking when limits are exceeded\n- Smaller chunks mean less work lost when Claude hits message limits\n\n### Best Practices\n\n1. **Create a dedicated chat for configuration changes**: Make all your config changes in one chat, then start a new chat for your actual work.\n\n2. **Be careful with empty `allowedDirectories`**: Setting this to an empty array (`[]`) grants access to your entire filesystem for file operations.\n\n3. **Use specific paths**: Instead of using broad paths like `/`, specify exact directories you want to access.\n\n4. **Always verify configuration after changes**: Use `get_config({})` to confirm your changes were applied correctly.\n\n## Command Line Options\n\nDesktop Commander supports several command line options for customizing behavior:\n\n### Disable Onboarding\n\nBy default, Desktop Commander shows helpful onboarding prompts to new users (those with fewer than 10 tool calls). You can disable this behavior:\n\n```bash\n# Disable onboarding for this session\nnode dist/index.js --no-onboarding\n\n# Or if using npm scripts\nnpm run start:no-onboarding\n\n# For npx installations, modify your claude_desktop_config.json:\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander@latest\",\n        \"--no-onboarding\"\n      ]\n    }\n  }\n}\n```\n\n**When onboarding is automatically disabled:**\n- When the MCP client name is set to \"desktop-commander\"\n- When using the `--no-onboarding` flag\n- After users have used onboarding prompts or made 10+ tool calls\n\n**Debug information:**\nThe server will log when onboarding is disabled: `\"Onboarding disabled via --no-onboarding flag\"`\n\n## Using Different Shells\n\nYou can specify which shell to use for command execution:\n\n```javascript\n// Using default shell (bash or system default)\nexecute_command({ \"command\": \"echo $SHELL\" })\n\n// Using zsh specifically\nexecute_command({ \"command\": \"echo $SHELL\", \"shell\": \"/bin/zsh\" })\n\n// Using bash specifically\nexecute_command({ \"command\": \"echo $SHELL\", \"shell\": \"/bin/bash\" })\n```\n\nThis allows you to use shell-specific features or maintain consistent environments across commands.\n\n1. `execute_command` returns after timeout with initial output\n2. Command continues in background\n3. Use `read_output` with PID to get new output\n4. Use `force_terminate` to stop if needed\n\n## Debugging\n\nIf you need to debug the server, you can install it in debug mode:\n\n```bash\n# Using npx\nnpx @wonderwhy-er/desktop-commander@latest setup --debug\n\n# Or if installed locally\nnpm run setup:debug\n```\n\nThis will:\n1. Configure Claude to use a separate \"desktop-commander\" server\n2. Enable Node.js inspector protocol with `--inspect-brk=9229` flag\n3. Pause execution at the start until a debugger connects\n4. Enable additional debugging environment variables\n\nTo connect a debugger:\n- In Chrome, visit `chrome://inspect` and look for the Node.js instance\n- In VS Code, use the \"Attach to Node Process\" debug configuration\n- Other IDEs/tools may have similar \"attach\" options for Node.js debugging\n\nImportant debugging notes:\n- The server will pause on startup until a debugger connects (due to the `--inspect-brk` flag)\n- If you don't see activity during debugging, ensure you're connected to the correct Node.js process\n- Multiple Node processes may be running; connect to the one on port 9229\n- The debug server is identified as \"desktop-commander-debug\" in Claude's MCP server list\n\nTroubleshooting:\n- If Claude times out while trying to use the debug server, your debugger might not be properly connected\n- When properly connected, the process will continue execution after hitting the first breakpoint\n- You can add additional breakpoints in your IDE once connected\n\n## Model Context Protocol Integration\n\nThis project extends the MCP Filesystem Server to enable:\n- Local server support in Claude Desktop\n- Full system command execution\n- Process management\n- File operations\n- Code editing with search/replace blocks\n\nCreated as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us\n\n## DONE\n- **20-05-2025 v0.1.40 Release** - Added audit logging for all tool calls, improved line-based file operations, enhanced edit_block with better prompting for smaller edits, added explicit telemetry opt-out prompting \n- **05-05-2025 Fuzzy Search Logging** - Added comprehensive logging system for fuzzy search operations with detailed analysis tools, character-level diffs, and performance metrics to help debug edit_block failures\n- **29-04-2025 Telemetry Opt Out through configuration** - There is now setting to disable telemetry in config, ask in chat\n- **23-04-2025 Enhanced edit functionality** - Improved format, added fuzzy search and multi-occurrence replacements, should fail less and use edit block more often\n- **16-04-2025 Better configurations** - Improved settings for allowed paths, commands and shell environments\n- **14-04-2025 Windows environment fixes** - Resolved issues specific to Windows platforms\n- **14-04-2025 Linux improvements** - Enhanced compatibility with various Linux distributions\n- **12-04-2025 Better allowed directories and blocked commands** - Improved security and path validation for file read/write and terminal command restrictions.\nTerminal still can access files ignoring allowed directories.\n- **11-04-2025 Shell configuration** - Added ability to configure preferred shell for command execution\n- **07-04-2025 Added URL support** - `read_file` command can now fetch content from URLs\n- **28-03-2025 Fixed \"Watching /\" JSON error** - Implemented custom stdio transport to handle non-JSON messages and prevent server crashes\n- **25-03-2025 Better code search** ([merged](https://github.com/wonderwhy-er/ClaudeServerCommander/pull/17)) - Enhanced code exploration with context-aware results\n\n## Roadmap\n\nThe following features are currently being explored:\n\n- **Support for WSL** - Windows Subsystem for Linux integration\n- **Support for SSH** - Remote server command execution\n- **Better file support for formats like CSV/PDF**\n- **Terminal sandboxing for Mac/Linux/Windows for better security**\n- **File reading modes** - For example, allow reading HTML as plain text or markdown\n- **Interactive shell support** - ssh, node/python repl\n- **Improve large file reading and writing**\n\n## Support Desktop Commander\n\n<div align=\"center\">\n  <h3>📢 SUPPORT THIS PROJECT</h3>\n  <p><strong>Desktop Commander MCP is free and open source, but needs your support to thrive!</strong></p>\n  \n  <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 10px; margin: 20px 0; border: 2px solid #007bff;\">\n    <p>Our philosophy is simple: we don't want you to pay for it if you're not successful. But if Desktop Commander contributes to your success, please consider contributing to ours.</p>\n    <p><strong>Ways to support:</strong></p>\n    <ul style=\"list-style-type: none; padding: 0;\">\n      <li>🌟 <a href=\"https://github.com/sponsors/wonderwhy-er\"><strong>GitHub Sponsors</strong></a> - Recurring support</li>\n      <li>☕ <a href=\"https://www.buymeacoffee.com/wonderwhyer\"><strong>Buy Me A Coffee</strong></a> - One-time contributions</li>\n      <li>💖 <a href=\"https://www.patreon.com/c/EduardsRuzga\"><strong>Patreon</strong></a> - Become a patron and support us monthly</li>\n      <li>⭐ <a href=\"https://github.com/wonderwhy-er/DesktopCommanderMCP\"><strong>Star on GitHub</strong></a> - Help others discover the project</li>\n    </ul>\n  </div>\n</div>\n\n\n### ❤️ Supporters Hall of Fame\n\nGenerous supporters are featured here. Thank you for helping make this project possible!\n\n<div align=\"center\">\n<table>\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://github.com/jonrichards\">\n        <img src=\"https://github.com/jonrichards.png\" width=\"100px;\" alt=\"Jon Richards\"/>\n        <br />\n        <sub><b>Jon Richards</b></sub>\n      </a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://github.com/stepanic\">\n        <img src=\"https://github.com/stepanic.png\" width=\"100px;\" alt=\"Matija Stepanic\"/>\n        <br />\n        <sub><b>Matija Stepanic</b></sub>\n      </a>\n    </td>\n  </tr>\n</table>\n</div>\n\n<details>\n  <summary><strong>Why your support matters</strong></summary>\n  <p>Your support allows us to:</p>\n  <ul>\n    <li>Continue active development and maintenance</li>\n    <li>Add new features and integrations</li>\n    <li>Improve compatibility across platforms</li>\n    <li>Provide better documentation and examples</li>\n    <li>Build a stronger community around the project</li>\n  </ul>\n</details>\n\n## Website\n\nVisit our official website at [https://desktopcommander.app/](https://desktopcommander.app/) for the latest information, documentation, and updates.\n\n## Media\n\nLearn more about this project through these resources:\n\n### Article\n[Claude with MCPs replaced Cursor & Windsurf. How did that happen?](https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96) - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.\n\n### Video\n[Claude Desktop Commander Video Tutorial](https://www.youtube.com/watch?v=ly3bed99Dy8) - Watch how to set up and use the Commander effectively.\n\n### Publication at AnalyticsIndiaMag\n[\nThis Developer Ditched Windsurf, Cursor Using Claude with MCPs](https://analyticsindiamag.com/ai-features/this-developer-ditched-windsurf-cursor-using-claude-with-mcps/)\n\n### Community\nJoin our [Discord server](https://discord.gg/kQ27sNnZr7) to get help, share feedback, and connect with other users.\n\n## Testimonials\n\n[![It's a life saver! I paid Claude + Cursor currently which I always feel it's kind of duplicated. This solves the problem ultimately. I am so happy. Thanks so much. Plus today Claude has added the web search support. With this MCP + Internet search, it writes the code with the latest updates. It's so good when Cursor doesn't work sometimes or all the fast requests are used.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img.png) https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n)\n\n[![This is the first comment I've ever left on a youtube video, THANK YOU! I've been struggling to update an old Flutter app in Cursor from an old pre null-safety version to a current version and implemented null-safety using Claude 3.7. I got most of the way but had critical BLE errors that I spent days trying to resolve with no luck. I tried Augment Code but it didn't get it either. I implemented your MCP in Claude desktop and was able to compare the old and new codebase fully, accounting for the updates in the code, and fix the issues in a couple of hours. A word of advice to people trying this, be sure to stage changes and commit when appropriate to be able to undo unwanted changes. Amazing!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_1.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg\n)\n\n[![Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes losing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost.\nAlso this is much more than code editing it is much more thank you for great video!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_2.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg)\n\n[![it is a great tool, thank you, I like using it, as it gives claude an ability to do surgical edits, making it more like a human developer.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_3.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg)\n\n[![You sir are my hero. You've pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven't looked back since.\nClaude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I'm not lol.\n33\n1](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_4.png)\nhttps://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e](https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e)\n\nIf you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.\n\nWe welcome contributions from the community! Whether you've found a bug, have a feature request, or want to contribute code, here's how you can help:\n\n- **Found a bug?** Open an issue at [github.com/wonderwhy-er/DesktopCommanderMCP/issues](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues)\n- **Have a feature idea?** Submit a feature request in the issues section\n- **Want to contribute code?** Fork the repository, create a branch, and submit a pull request\n- **Questions or discussions?** Start a discussion in the GitHub Discussions tab\n\nAll contributions, big or small, are greatly appreciated!\n\nIf you find this tool valuable for your workflow, please consider [supporting the project](https://www.buymeacoffee.com/wonderwhyer).\n\n## Frequently Asked Questions\n\nHere are answers to some common questions. For a more comprehensive FAQ, see our [detailed FAQ document](FAQ.md).\n\n### What is Desktop Commander?\nIt's an MCP tool that enables Claude Desktop to access your file system and terminal, turning Claude into a versatile assistant for coding, automation, codebase exploration, and more.\n\n### How is this different from Cursor/Windsurf?\nUnlike IDE-focused tools, Claude Desktop Commander provides a solution-centric approach that works with your entire OS, not just within a coding environment. Claude reads files in full rather than chunking them, can work across multiple projects simultaneously, and executes changes in one go rather than requiring constant review.\n\n### Do I need to pay for API credits?\nNo. This tool works with Claude Desktop's standard Pro subscription ($20/month), not with API calls, so you won't incur additional costs beyond the subscription fee.\n\n### Does Desktop Commander automatically update?\nYes, when installed through npx or Smithery, Desktop Commander automatically updates to the latest version when you restart Claude. No manual update process is needed.\n\n### What are the most common use cases?\n- Exploring and understanding complex codebases\n- Generating diagrams and documentation\n- Automating tasks across your system\n- Working with multiple projects simultaneously\n- Making surgical code changes with precise control\n\n### I'm having trouble installing or using the tool. Where can I get help?\nJoin our [Discord server](https://discord.gg/kQ27sNnZr7) for community support, check the [GitHub issues](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues) for known problems, or review the [full FAQ](FAQ.md) for troubleshooting tips. You can also visit our [website FAQ section](https://desktopcommander.app#faq) for a more user-friendly experience. If you encounter a new issue, please consider [opening a GitHub issue](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues/new) with details about your problem.\n\n### How do I report security vulnerabilities?\nPlease create a [GitHub Issue](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues) with detailed information about any security vulnerabilities you discover. See our [Security Policy](SECURITY.md) for complete guidelines on responsible disclosure.\n\n## Data Collection & Privacy\n\nDesktop Commander collects limited anonymous telemetry data to help improve the tool. No personal information, file contents, file paths, or command arguments are collected.\n\n### Usage Analytics (Local Only)\n- **Local usage statistics** are always collected and stored locally on your machine for functionality and the `get_usage_stats` tool\n- Use the `get_usage_stats` tool to view your personal usage patterns, success rates, and performance metrics\n- **This data is NOT sent anywhere** - it remains on your computer for your personal insights\n\n### Feedback System\n- Use the `give_feedback_to_desktop_commander` tool to provide feedback about Desktop Commander\n- Opens a browser-based feedback form to send suggestions and feedback to the development team\n- Only basic usage statistics (tool call count, days using, platform) are pre-filled to provide context but you can remove them\n\n### External Telemetry Opt-Out\nExternal telemetry (sent to analytics services) is enabled by default but can be disabled:\n\n1. Open the chat and simply ask:\n   **\"Disable telemetry\"**\n2. The chatbot will update your settings automatically.\n\n**Note:** This only disables external telemetry. Local usage analytics remain active for tool functionality but is not share externally\n\nFor complete details about data collection, please see our [Privacy Policy](https://legal.desktopcommander.app/privacy_desktop_commander_mcp).\n\n## Verifications\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/25ff7a06-58bc-40b8-bd79-ebb715140f1a)\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "command",
        "desktopcommandermcp",
        "commands capture",
        "command line",
        "run commands"
      ],
      "category": "command-line"
    }
  }
}