---
import AdBanner from '../../components/banner/AdBanner.astro';
import CreditsButton from '../../components/buttons/CreditsButton';
import EmojiPage from '../../components/EmojiPage.tsx';
import ToolContainer from '../../components/tool/ToolContainer';
import ToolHead from '../../components/tool/ToolHead';
import BaseLayout from '../../layouts/BaseLayout.astro';
import { getEmojiBySlug, getEmojiImages } from '../../lib/emojis';

export async function getStaticPaths() {
  const { getAllEmojis } = await import('../../lib/emojis');
  const emojis = getAllEmojis();

  return emojis
    .filter((emoji) => emoji.slug && emoji.slug.trim() !== '')
    .map((emoji) => ({
      params: { slug: emoji.slug },
      props: { emoji },
    }));
}

const { slug } = Astro.params;
const emoji = getEmojiBySlug(slug!);
const images = getEmojiImages(slug!);

if (!emoji) {
  return Astro.redirect('/freedevtools/emojis/');
}

const cleanDescription = (text?: string) => {
  if (!text) return '';
  return text
    .replace(/<[^>]*>/g, '')
    .replace(/&nbsp;/g, ' ')
    .replace(/&amp;/g, '&')
    .replace(/&lt;/g, '<')
    .replace(/&gt;/g, '>')
    .replace(/&quot;/g, '"')
    .replace(/&#39;/g, "'")
    .replace(/[?]{2,}/g, '')
    .trim();
};

function findNestedDefinition(node: unknown): string | null {
  const results: string[] = [];
  const visit = (n: unknown) => {
    if (!n) return;
    if (typeof n === 'string') return;
    if (Array.isArray(n)) {
      n.forEach(visit);
      return;
    }
    if (typeof n === 'object') {
      const obj = n as Record<string, unknown>;
      for (const [k, v] of Object.entries(obj)) {
        if (k.toLowerCase() === 'definition') {
          if (typeof v === 'string') results.push(v);
          else if (Array.isArray(v)) {
            (v as unknown[]).forEach((x) => {
              if (typeof x === 'string') results.push(x);
            });
          }
        }
        visit(v);
      }
    }
  };
  visit(emoji);
  return results.length > 0 ? results[0] : null;
}

// Get category for breadcrumb
const categoryName = (
  emoji.fluentui_metadata && emoji.fluentui_metadata.group
    ? emoji.fluentui_metadata.group
    : (emoji.emoji_net_data && emoji.emoji_net_data.category) ||
      (emoji as any).given_category ||
      'Other'
) as string;
const categorySlug = categoryName.toLowerCase().replace(/[^a-z0-9]+/g, '-');

// Breadcrumb items
const breadcrumbItems = [
  { label: 'Free DevTools', href: '/freedevtools/' },
  { label: 'Emojis', href: '/freedevtools/emojis/' },
  { label: categoryName, href: `/freedevtools/emojis/${categorySlug}/` },
  { label: emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug },
];
---

<BaseLayout
  name="Emojis"
  path="/emojis/"
  title={`${emoji.code || (emoji as any).glyph} ${emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug}  - Emoji Reference | Online Free DevTools by Hexmos`}
  description={cleanDescription(emoji.description) ||
    cleanDescription(findNestedDefinition(emoji) || undefined) ||
    `Learn about the ${emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug} emoji ${emoji.code || (emoji as any).glyph}. Find meanings, shortcodes, and usage information.`}
  canonical={`https://hexmos.com/freedevtools/emojis/${emoji.slug}/`}
  showHeader={true}
  keywords={emoji.emoji_net_data?.keywords || emoji.fluentui_metadata?.keywords || []}
>
  <ToolContainer>
    <div class="mb-16 mt-[74px]">
      <AdBanner />
    </div>
    <ToolHead
      name={`${emoji.code || (emoji as any).glyph} ${emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug}`}
      description={cleanDescription(emoji.description) ||
        cleanDescription(findNestedDefinition(emoji) || undefined) ||
        `Learn about the ${emoji.title || emoji.fluentui_metadata?.cldr || emoji.slug} emoji ${emoji.code || (emoji as any).glyph}. Find meanings, shortcodes, and usage information.`}
      breadcrumbItems={breadcrumbItems}
    />

    <EmojiPage emoji={emoji} images={images} client:load />

    <!-- Navigation -->
    <div
      class="mt-10 pt-6 mb-8 border-t border-slate-200 dark:border-slate-700"
    >
      <div class="flex flex-wrap gap-4">
        <a
          href="/freedevtools/emojis/"
          class="inline-flex items-center px-4 py-2 text-sm font-medium text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg hover:bg-blue-100 dark:hover:bg-blue-900/30 transition-colors"
        >
          ‚Üê Back to Emojis
        </a>
        {
          (emoji.fluentui_metadata && emoji.fluentui_metadata.group) ||
          (emoji.emoji_net_data && emoji.emoji_net_data.category) ||
          (emoji as any).given_category ? (
            <a
              href={`/freedevtools/emojis/${((emoji.fluentui_metadata && emoji.fluentui_metadata.group ? emoji.fluentui_metadata.group : (emoji.emoji_net_data && emoji.emoji_net_data.category) || (emoji as any).given_category || 'Other') as string).toLowerCase().replace(/[^a-z0-9]+/g, '-')}/`}
              class="inline-flex items-center px-4 py-2 text-sm font-medium text-slate-600 dark:text-slate-400 bg-slate-50 dark:bg-slate-800 rounded-lg hover:bg-slate-100 dark:hover:bg-slate-700 transition-colors"
            >
              View{' '}
              {(
                (emoji.fluentui_metadata && emoji.fluentui_metadata.group
                  ? emoji.fluentui_metadata.group
                  : (emoji.emoji_net_data && emoji.emoji_net_data.category) ||
                    (emoji as any).given_category ||
                    'Other') as string
              )
                .replace(/-/g, ' ')
                .replace(/\b\w/g, (l) => l.toUpperCase())}{' '}
              Category
            </a>
          ) : null
        }
        <CreditsButton href="/freedevtools/emojis/credits/" />
      </div>
    </div>
  </ToolContainer>
</BaseLayout>
