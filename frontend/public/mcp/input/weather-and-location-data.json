{
  "category": "weather-and-location-data",
  "categoryDisplay": "Weather and Location Data",
  "description": "",
  "totalRepositories": 116,
  "repositories": {
    "1259187996--mcp-time": {
      "owner": "1259187996",
      "name": "mcp-time",
      "url": "https://github.com/1259187996/mcp-time",
      "imageUrl": "/freedevtools/mcp/pfp/1259187996.webp",
      "description": "The MCP-Time server is a Node.js application that provides accurate time and date information, allowing users to query the current time in various time zones, calculate date differences, and format time displays.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-23T09:04:55Z",
      "readme_content": "# MCP-Time 服务器\n\n## 项目介绍\nMCP-Time 是一个基于模型上下文协议（Model Context Protocol，简称 MCP）的 Node.js 服务器，专门用于处理时间相关的查询。当大语言模型（如 Claude）在对话中遇到时间相关的问题时，它会调用这个 MCP 服务器来获取准确的时间信息。\n\n## 功能特点\n- 获取当前时间（不同时区）\n- 获取当前日期\n- 计算日期差异\n- 格式化时间显示\n- 支持世界各地主要时区\n\n## 技术栈\n- Node.js\n- @modelcontextprotocol/sdk - 官方 MCP SDK\n- 其他时间处理库\n\n## 使用方法\n1. 安装依赖：`npm install`\n2. 启动服务器：`npm start`\n\n## 示例查询\n- \"现在几点了？\"\n- \"北京时间是几点？\"\n- \"纽约和东京的时差是多少？\"\n- \"三天后是几月几号？\"\n- \"2023年1月1日是星期几？\"\n\n## 项目结构\n- `index.js` - 主入口文件\n- `timeUtils.js` - 时间处理工具函数\n- `package.json` - 项目配置和依赖\n- `Dockerfile` - Docker 构建配置\n- `smithery.yaml` - Smithery.ai 部署配置\n\n## Smithery.ai 部署说明\n本项目已配置为可在 Smithery.ai 平台上部署。部署配置包括：\n\n### Dockerfile\n使用 Node.js 18 Alpine 镜像构建轻量级容器。\n\n### smithery.yaml\n配置文件定义了服务启动方式和配置选项：\n- `defaultTimezone`: 可配置默认时区，默认值为 \"Asia/Shanghai\"\n\n### 部署步骤\n1. 在 Smithery.ai 上创建新的 MCP 服务\n2. 连接到此 GitHub 仓库\n3. 触发部署流程\n4. 在配置中设置所需的默认时区\n\n## 开发者\n本项目由 Claude 3.7 Sonnet 协助开发 ",
      "npm_url": "https://www.npmjs.com/package/mcp-time",
      "npm_downloads": 610,
      "keywords": [
        "mcp",
        "node",
        "time",
        "time mcp",
        "mcp time",
        "time server"
      ],
      "category": "weather-and-location-data"
    },
    "AIAnytime--Awesome-MCP-Server": {
      "owner": "AIAnytime",
      "name": "Awesome-MCP-Server",
      "url": "https://github.com/AIAnytime/Awesome-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/AIAnytime.webp",
      "description": "Fetch real-time weather details and forecasts, as well as retrieve LinkedIn profile data via external APIs. Also enables retrieval of articles from PubMed based on queries.",
      "stars": 57,
      "forks": 29,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T08:41:15Z",
      "readme_content": "# Awesome-MCP-Server 🚀  \n\nThis repository contains **MCP (Model Context Protocol) servers** . Each folder represents a different MCP server implementation.  \n\n## 📂 Server Implementations  \n\n1. **Weather Server** 🌦️  \n   - Fetches real-time weather details and forecasts.  \n   - Can be integrated with MCP clients like **Claude for Desktop**.  \n\n2. **LinkedIn Profile Server** 🔗  \n   - Retrieves LinkedIn profile data via an external API from RapidAPI.  \n   - Enables AI models to process professional profile insights.\n  \n3. **Fetch PubMed Article Server** 🔗  \n   - Retrieves articles from PubMed given a query.  \n\n## 🛠️ How to Use  \n\n1. Clone the repository:  \n   ```bash\n   git clone https://github.com/AIAnytime/MCP-Servers.git\n   cd MCP-Servers\n   ```\n2. Navigate to the desired server folder. Follow the respective README.md file for instructions.\n3. Watch the MCP Playlist on AI Anytime YT Channel if you face any problem.\n\n## 📢 Contribute  \nFeel free to open issues, submit pull requests, or suggest improvements!  \n\n## 📜 License  \nThis project is open-source under the **MIT License**.  \n\n---\n\n🔔 **Like this project?** Give it a ⭐ on GitHub!  \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linkedin",
        "apis",
        "aianytime",
        "data aianytime",
        "retrieve linkedin",
        "forecasts retrieve"
      ],
      "category": "weather-and-location-data"
    },
    "ALAPI-SDK--mcp-alapi-cn": {
      "owner": "ALAPI-SDK",
      "name": "mcp-alapi-cn",
      "url": "https://github.com/ALAPI-SDK/mcp-alapi-cn",
      "imageUrl": "/freedevtools/mcp/pfp/ALAPI-SDK.webp",
      "description": "Integrates ALAPI's diverse APIs for functionalities such as IP and weather queries, video parsing, and corporate information retrieval using the MCP protocol. Provides standardized responses and error handling to streamline development in AI applications.",
      "stars": 6,
      "forks": 1,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-07-30T09:16:36Z",
      "readme_content": "# 🔥 ALAPI MCP Server\r\n\r\n[![smithery badge](https://smithery.ai/badge/@ALAPI-SDK/mcp-alapi-cn)](https://smithery.ai/server/@ALAPI-SDK/mcp-alapi-cn)\r\n![License](https://img.shields.io/badge/license-MIT-green)\r\n\r\n这是一个基于 [ALAPI](https://www.alapi.cn) 的 MCP (Model Context Protocol) 服务器实现，可以通过MCP协议直接调用ALAPI的接口，轻松将ALAPI丰富的API资源集成到各类支持MCP的AI应用中。\r\n\r\n## ✨ 功能特点\r\n\r\n- 🔍 **丰富API资源** - 提供IP查询、天气查询、热搜榜单、企业信息等100+种常用API服务\r\n- 🧩 **MCP 协议支持** - 完全兼容 Model Context Protocol，轻松集成到各类AI应用\r\n- 🔄 **自动加载** - 自动加载 ALAPI OpenAPI 规范，无需手动配置\r\n- 🎯 **灵活调用** - 支持加载全部或指定API，按需使用（短视频解析、天气查询、每天60秒读懂世界、企业查询等）\r\n- 🛡️ **统一响应** - 提供统一的错误处理和响应格式，简化开发流程\r\n- ⚙️ **可配置性** - 支持环境变量配置，轻松适应不同使用场景\r\n\r\n## 📖 使用指南\r\n\r\n首先需要了解 [MCP](https://modelcontextprotocol.io/introduction) 协议，然后按照以下配置添加 ALAPI MCP 服务。\r\n\r\n\r\n## 在 MCP 客户端中使用\r\n\r\n\r\nALAPI MCP Server 设计为与支持 MCP 协议的客户端配合使用，不支持独立的命令行配置。请按照以下步骤在您的 MCP 客户端中配置使用：\r\n\r\n\r\n### 方法一： 远程 MCP\r\n\r\n本项目支持[一键部署到腾讯云开发平台](https://docs.cloudbase.net/ai/mcp/develop/host-mcp)，提供远程 SSE 访问\r\n\r\n[☁️ 前往云开发平台部署 MCP Server](https://tcb.cloud.tencent.com/dev#/ai?tab=mcp&p&mcp-template=mcp-alapi-cn)\r\n\r\n\r\n### 方法二：使用 Smithery 自动安装\r\n\r\n通过 [Smithery](https://smithery.ai/server/@ALAPI-SDK/mcp-alapi-cn) 安装 ALAPI MCP Server，适用于 Claude Desktop 客户端：\r\n\r\n```bash\r\nnpx -y @smithery/cli install @ALAPI-SDK/mcp-alapi-cn --client claude\r\n```\r\n\r\n### 方法三：直接使用预编译二进制文件（推荐，不用安装依赖）\r\n\r\n1. 访问 [Releases 页面](https://github.com/ALAPI-SDK/mcp-alapi-cn/releases) 下载最新版本 \r\n   > 国内加速下载地址：https://cnb.cool/alapi/mcp-alapi-cn/-/releases\r\n\r\n2. 根据您的操作系统选择对应最新的版本：\r\n   - Windows: `mcp-alapi-cn.exe`\r\n   - macOS: `mcp-alapi-cn-macos`\r\n   - Linux: `mcp-alapi-cn-linux`\r\n\r\n3. 在支持 MCP 的客户端（如 Claude Desktop）中配置：\r\n   - 打开 MCP 客户端设置\r\n   - 添加新的 MCP 服务器\r\n   - 指定下载的二进制文件路径\r\n   - 配置必要的环境变量（如 `ALAPI_TOKEN`）\r\n\r\n### 配置环境变量\r\n\r\n#### `ALAPI_TOKEN` - ALAPI平台访问令牌（必填）\r\n\r\n需要配置为您在 ALAPI 平台上创建的 [TOKEN](https://www.alapi.cn/dashboard/data/token)，用于接口认证。\r\n\r\n### MCP 客户端配置示例\r\n\r\n在 Claude Desktop 或其他支持 MCP 的客户端中，可以参考以下配置：\r\n\r\n#### JSON 配置（使用本地二进制文件）\r\n\r\n```json\r\n{\r\n  \"mcpServers\": {\r\n    \"alapi\": {\r\n      \"path\": \"/path/to/mcp-alapi-cn\",\r\n      \"env\": {\r\n        \"ALAPI_TOKEN\": \"在 ALAPI 平台申请创建的 token\"\r\n      }\r\n    }\r\n  }\r\n}\r\n```\r\n\r\n\r\n### 支持的 MCP 客户端\r\n\r\n根据 [MCP 文档](https://modelcontextprotocol.io/clients)，以下客户端支持 MCP 工具集成：\r\n\r\n- Claude Desktop App\r\n- Claude Code\r\n- Cursor\r\n- Continue\r\n- Cline\r\n- 等其他支持 MCP 协议的客户端\r\n\r\n> 注意：确保您的 MCP 客户端支持工具集成功能，请参考各客户端的具体文档进行配置。\r\n\r\n## 🛠️ 支持的功能\r\n\r\n以下是部分支持的功能，完整功能请以实际调用为准：\r\n\r\n| 功能名称     | 描述                                                                          |\r\n| ------------ | ----------------------------------------------------------------------------- |\r\n| IP查询       | 查询IP归属地信息，支持IPv4和IPv6                                              |\r\n| 天气查询     | 查询国内天气详情，包含天气信息、天气预警、天气指数、AQI等                     |\r\n| 今日热榜     | 查询今日热榜数据，包含抖音热搜、头条热榜、知乎、36k、百度热搜、微博热搜等数据 |\r\n| 文本审核     | 查询文本是否违规，特别适合AI内容审核                                          |\r\n| 短网址       | 短网址缩短，将长网址缩短为短网址，方便短信发送、二维码生成等场景              |\r\n| 二维码识别   | 支持一图多码，支持数十二维码，条形码的识别                                    |\r\n| 历史上的今天 | 查询历史上的指定日期发生的大事                                                |\r\n| 汇率查询     | 根据货币代码查询货币汇率和换算，支持全球170+个国家和地区货币查询              |\r\n| 企业查询     | 根据企业名称或统一社会信用代码查询企业基本工商信息                            |\r\n| 快递查询     | 免费查询快递物流轨迹，支持中通、申通、顺丰、极兔、百世、圆通等                |\r\n| 星座运势     | 提供星座运势查询服务，支持查询十二星座今日或明日、本周、本月、本年的运势      |\r\n| 黄金价格     | 查询当前黄金的实时价格，最高价，最低价，品牌黄金的价格                        |\r\n\r\n## 🔗 相关链接\r\n\r\n- [ALAPI官网](https://www.alapi.cn) - 获取API服务和Token\r\n- [MCP协议文档](https://modelcontextprotocol.io) - 了解更多MCP协议相关信息\r\n\r\n## 🙏 鸣谢\r\n\r\n- [ALAPI](https://www.alapi.cn) - 提供强大的API支持\r\n- [Model Context Protocol](https://modelcontextprotocol.io) - 提供协议标准\r\n\r\n\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "alapi",
        "apis",
        "sdk",
        "data alapi",
        "alapi sdk",
        "mcp alapi"
      ],
      "category": "weather-and-location-data"
    },
    "AidenYangX--mapbox-mcp-server": {
      "owner": "AidenYangX",
      "name": "mapbox-mcp-server",
      "url": "https://github.com/AidenYangX/mapbox-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/AidenYangX.webp",
      "description": "Provides navigation and mapping functionalities through the Mapbox API, enabling users to obtain directions between coordinates or places with various transportation profiles.",
      "stars": 12,
      "forks": 10,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-20T00:57:51Z",
      "readme_content": "<!--\n * @Author: AidenYangX\n * @Email: xscs709560271@gmail.com\n * @Date: 2024-12-21 23:30:55\n * @Description: Mapbox MCP Server\n-->\n\n# Mapbox MCP Server\n\nMCP Server for the Mapbox API.\n\n## Features\n\n### Navigation Tools\n\n1. `mapbox_directions`\n\n   - Get directions between coordinates\n   - Inputs:\n     - `coordinates` ({latitude: number, longitude: number}[])\n     - `profile` (optional): \"driving-traffic\", \"driving\", \"walking\", \"cycling\"\n   - Returns: route details with steps, distance, duration\n\n2. `mapbox_directions_by_places`\n\n   - Get directions between places using their names\n   - Inputs:\n     - `places` (string[]): Array of place names\n     - `profile` (optional): \"driving-traffic\", \"driving\", \"walking\", \"cycling\"\n     - `language` (optional): Two-letter language code (e.g., \"zh\", \"en\")\n   - Returns:\n     - Geocoding results for each place\n     - Route details with steps, distance, duration\n     - Any errors that occurred during processing\n\n3. `mapbox_matrix`\n\n   - Calculate travel time and distance matrices between coordinates\n   - Inputs:\n     - `coordinates` ({latitude: number, longitude: number}[])\n     - `profile` (optional): \"driving\", \"walking\", \"cycling\"\n     - `annotations` (optional): \"duration\", \"distance\", \"duration,distance\"\n     - `sources` (optional): Indices of source coordinates\n     - `destinations` (optional): Indices of destination coordinates\n   - Returns: Matrix of durations and/or distances between points\n\n4. `mapbox_matrix_by_places`\n   - Calculate travel time and distance matrices between places using their names\n   - Inputs:\n     - `places` (string[]): Array of place names (2-25 places)\n     - `profile` (optional): \"driving\", \"walking\", \"cycling\"\n     - `annotations` (optional): \"duration\", \"distance\", \"duration,distance\"\n     - `language` (optional): Two-letter language code\n     - `sources` (optional): Indices of source places\n     - `destinations` (optional): Indices of destination places\n   - Returns:\n     - Geocoding results for each place\n     - Matrix of durations and/or distances\n     - Any errors that occurred during processing\n\n### Search Tools\n\n1. `mapbox_geocoding`\n   - Search for places and convert addresses into coordinates\n   - Inputs:\n     - `searchText` (string): The place or address to search for\n     - `limit` (optional): Maximum number of results (1-10)\n     - `types` (optional): Filter by place types (country, region, place, etc.)\n     - `language` (optional): Two-letter language code\n     - `fuzzyMatch` (optional): Enable/disable fuzzy matching\n   - Returns: Detailed location information including coordinates and properties\n\n## Claude Desktop Integration\n\nAdd this configuration to your Claude Desktop config file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"mapbox-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mapbox-mcp-server/build/index.js\"],\n      \"env\": {\n        \"MAPBOX_ACCESS_TOKEN\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Setup\n\n### Prerequisites\n\n- Node.js 16 or higher\n- TypeScript 4.5 or higher\n- A valid Mapbox API key\n\n### API Key\n\nGet a Mapbox API key by following the instructions [here](https://console.mapbox.com/account/access-tokens/).\n\nSet your API key as an environment variable:\n\n```bash\nexport MAPBOX_ACCESS_TOKEN=your_api_key_here\n```\n\n## Rate Limits\n\n- Directions API: 300 requests per minute\n- Matrix API:\n  - 60 requests per minute for driving/walking/cycling\n  - 30 requests per minute for driving-traffic\n- Geocoding API: 600 requests per minute\n\n## Deployment\n\n### Structure\n\nIn mapbox-mcp-server, we use the following structure to manage the server's handlers:\n\n- `src/server/handlers/base.ts`: Base class for all handlers\n- `src/server/registry.ts`: Registry for all handlers\n- `src/server/main.ts`: Main entry point for the server\n\nEach feature module follows this structure:\n\n```plaintext\nsrc/\n├── types/          # Type definitions\n├── schemas/        # Zod schemas for validation\n├── tools/\n│   ├── definitions/  # Tool definitions\n│   └── handlers/     # Tool implementations\n└── server/\n    └── handlers/     # Handler classes\n```\n\n---\n\n**Class Diagram**:\n\n\n---\n\n**Process Diagram**:\n\n\n## Error Handling\n\nAll tools implement comprehensive error handling:\n\n- Input validation errors\n- API request failures\n- Rate limit errors\n- Service-specific errors (e.g., no routes found, invalid coordinates)\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mapbox",
        "mcp",
        "mapping",
        "aidenyangx mapbox",
        "mapbox mcp",
        "mapbox api"
      ],
      "category": "weather-and-location-data"
    },
    "AnCode666--aemet-mcp": {
      "owner": "AnCode666",
      "name": "aemet-mcp",
      "url": "https://github.com/AnCode666/aemet-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/AnCode666.webp",
      "description": "Provides access to historical and current meteorological data from Spain's State Meteorological Agency, enabling retrieval of climate summaries, daily weather values, and beach condition reports through natural language queries with date and location filters.",
      "stars": 2,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T18:35:19Z",
      "readme_content": "# AEMET-MCP. Integration via MCP with the AEMET API\n\n[![en](https://img.shields.io/badge/lang-en-red.svg)](README.md)\n[![es](https://img.shields.io/badge/lang-es-yellow.svg)](README_es.md)\n\n## DESCRIPTION\n\n**AEMET is the State Meteorological Agency of Spain.**\n\n**Aemet-mcp** allows you to retrieve historical climate data and meteorological information from the AEMET API directly from Claude AI and other MCP compatible clients, using the **Model Context Protocol (MCP)**.\n\nAemet-mcp is an MCP server that exposes tools enabling LLMs to query data from weather stations across Spain.\n\nIt includes secure handling of API keys and resource JSON files for using supporting data.\n\n## KEY FEATURES\n\n- Query for **historical daily values** (temperature, wind, precipitation, etc.)\n- Access to **monthly climate summaries** by station.\n- Filtering by year, month, and AEMET station code.\n- Query beach conditions, including ultraviolet radiation indices.\n- **Rainfall data analysis prompt** for Spanish municipalities with historical precipitation data\n- Responses ready for use in JSON format.\n\n## INSTALLATION\n\n### Installing via Smithery\n\nTo install AEMET Weather Data Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@AnCode666/aemet-mcp):\n\n```bash\nnpx -y @smithery/cli install @AnCode666/aemet-mcp --client claude\n```\n\n### Install with uv\n\n### Prerequisites\n\n- Python 3.10 or higher.\n- [uv](https://docs.astral.sh/uv/getting-started/installation/) package manager.\n\n### Installing uv\n\nThe first step is to install `uv`, a package manager for Python.  \n**It can be installed from the command line**.\n\nOn macOS and Linux:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nOn Windows:  \n\n```bash\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\nYou can also install it with pip:  \n\n```bash\npip install uv\n```\n\nFor more information about installing uv, visit the [uv documentation](https://docs.astral.sh/uv/getting-started/installation/).\n\n### Install with Docker\n\nYou can also run AEMET-MCP using Docker:\n\n#### Prerequisites\n\n- [Docker](https://docs.docker.com/get-docker/) installed on your system\n\n#### Steps\n\n1. **Build the Docker image:**\n\n```bash\ndocker build -t aemet-mcp .\n```\n\n2. **Run the container:**\n\n```bash\ndocker run -e AEMET_API_KEY=YOUR_AEMET_API_KEY aemet-mcp\n```\n\nReplace `YOUR_AEMET_API_KEY` with your actual API key from AEMET.\n\n#### Integration with Claude Desktop using Docker\n\nTo use the Docker version with Claude Desktop, add this configuration to your `claude_desktop_config.json`:\n\n```json\n\"aemet_mcp_docker\": {\n    \"command\": \"docker\",\n    \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"AEMET_API_KEY=YOUR_AEMET_API_KEY\",\n        \"aemet-mcp\"\n    ]\n}\n```\n\n## INTEGRATION WITH CLIENTS LIKE CLAUDE DESKTOP\n\nOnce **uv** is installed, you can use the MCP server from any compatible client such as Claude for Desktop, in which case the steps to follow are:\n\n1. Go to **Claude > Settings > Developer > Edit Config > `claude_desktop_config.json`**\n2. Add the following block inside `\"mcpServers\"`:\n\n```json\n\"aemet_mcp_\": {\n    \"command\": \"uvx\",\n    \"args\": [\n        \"aemet_mcp\"\n    ],\n    \"env\": {\n        \"AEMET_API_KEY\": \"YOUR_AEMET_API_KEY\"\n    }\n}\n```\n\n3. Get a free API key from AEMET at: <https://opendata.aemet.es/centrodedescargas/altaUsuario>\n4. Replace `YOUR_AEMET_API_KEY` with your actual API key (leave the quotes).\n5. If you already have another MCP server configured, separate each with a comma `,`.\n\nIn general, to integrate it into any other MCP-compatible client such as Cursor, CODEGPT, or Roo Code, simply go to the MCP server configuration of your client and add the same code block.\n\n## USAGE EXAMPLES\n\nOnce properly configured, you can ask things like:\n\n- \"What's the weather like in Seville?\"\n- \"Give me a list of the beaches in the province of Málaga\"\n- \"Tell me the radiation levels at Maspalomas beach for tomorrow\"\n- \"Give me the historical rainfall data for Albacete between January 1st, 2020 and February 1st, 2020\"\n- \"Give me a list of the weather stations within a 50 km radius from the coordinates lat:40.4165, lon:-3.70256\"\n\n### Rainfall Data Analysis\n\nThe server includes a specialized prompt for analyzing historical precipitation data for Spanish municipalities. Use the `obtener_datos_lluvia_municipio` prompt with:\n\n```\nobtener_datos_lluvia_municipio(\"Madrid\", \"2023-01-01\", \"2023-12-31\")\n```\n\nThis prompt provides structured guidance for meteorological analysis, including:\n- Municipality code search and validation\n- Nearest weather station identification\n- Historical precipitation data retrieval\n- Statistical analysis and trend identification\n- Climate pattern analysis with seasonal variations\n- Data visualization recommendations\n\n## DISTRIBUTIONS\n\n### Smithery\n\n[![smithery badge](https://smithery.ai/badge/@AnCode666/aemet-mcp)](https://smithery.ai/server/@AnCode666/aemet-mcp)\n\n### Glama\n\n<a href=\"https://glama.ai/mcp/servers/@AnCode666/aemet-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@AnCode666/aemet-mcp/badge\" alt=\"AEMET-MCP MCP server\" />\n</a>\n\n### MseeP\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ancode666-aemet-mcp-badge.png)](https://mseep.ai/app/ancode666-aemet-mcp)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/ancode666-aemet-mcp)\n\n### MCP Review\n\n[MCP review certified](https://mcpreview.com/mcp-servers/ancode666/aemet-mcp)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "meteorological",
        "weather",
        "climate",
        "meteorological data",
        "weather location",
        "data spain"
      ],
      "category": "weather-and-location-data"
    },
    "AtulanZaman--adk_mcp_gmap": {
      "owner": "AtulanZaman",
      "name": "adk_mcp_gmap",
      "url": "https://github.com/AtulanZaman/adk_mcp_gmap",
      "imageUrl": "/freedevtools/mcp/pfp/AtulanZaman.webp",
      "description": "Enable interactive chat capabilities with Google Maps data through a streaming agent that integrates with the Google ADK and Maps toolset for location-based information.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-28T00:48:07Z",
      "readme_content": "# ADK MCP Agent\n\nA streaming chat agent using Google ADK and the Model Context Protocol (MCP) Google Maps toolset.\n\n## Local Development\n\n1. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n2. Set up `.env` in `app/` with your API keys.\n\n3. Run locally:\n   ```bash\n   export SSL_CERT_FILE=$(python -m certifi)\n   uvicorn app.main:app --reload\n   ```\n\n## Project Structure\n\n```\nadk-mcp-agent/\n├── app/\n│   ├── main.py\n│   ├── static/\n│   │   └── index.html\n│   └── .env\n├── agent/\n│   └── agents.py\n├── requirements.txt\n├── Dockerfile\n├── README.md\n└── .gitignore\n```\n\n- The agent logic is in the `agent/` directory (`agent/agents.py`).\n- The FastAPI app and UI are in the `app/` directory.\n\n## Deployment\n\nTo test and run the app locally with the UI:\n\n1. **Install dependencies:**\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n2. **Set up environment variables:**\n   - Create a `.env` file inside the `app/` directory with your API keys:\n     ```env\n     GOOGLE_GENAI_USE_VERTEXAI=FALSE\n     GOOGLE_API_KEY=your_genai_api_key\n     GOOGLE_MAPS_API_KEY=your_google_maps_api_key\n     ```\n\n3. **Run the FastAPI app:**\n   ```bash\n   export SSL_CERT_FILE=$(python -m certifi)\n   uvicorn app.main:app --reload\n   ```\n\n4. **Access the UI:**\n   - Open your browser and go to [http://localhost:8000](http://localhost:8000)\n   - You can now interact with the chat interface and test the agent locally.\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "adk_mcp_gmap",
        "maps",
        "chat",
        "google maps",
        "location data",
        "google adk"
      ],
      "category": "weather-and-location-data"
    },
    "BochaAI--bocha-search-mcp": {
      "owner": "BochaAI",
      "name": "bocha-search-mcp",
      "url": "https://github.com/BochaAI/bocha-search-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/BochaAI.webp",
      "description": "Provides access to high-quality world knowledge from billions of web pages and various ecological content sources through a powerful search engine interface. Supports natural language semantic search, offering rich, structured results and vertical domain cards for enhanced information retrieval across multiple domains.",
      "stars": 26,
      "forks": 7,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-26T07:24:49Z",
      "readme_content": "# MCP Server 产品名称: 博查\n\n\n\n## 版本信息\nv1\n\n## 产品描述\n### 短描述\n博查是一个给AI用的搜索引擎，让你的AI应用从近百亿网页和生态内容源中获取高质量的世界知识，涵盖天气、新闻、百科、医疗、火车票、图片等多种领域。\n\n### 长描述\n博查是一个给AI用的搜索引擎，让你的AI应用从近百亿网页和生态内容源中获取高质量的世界知识，涵盖天气、新闻、百科、医疗、火车票、图片等多种领域。\n\n## 分类\n网页搜索\n\n## 标签\n搜索, 新闻, 天气, 百科\n\n## Tools\n### Tool1: Bocha Web Search\n#### 详细描述\n从博查搜索全网信息和网页链接，返回结果包括网页标题、网页URL、网页摘要、网站名称、网站图标、发布时间、图片链接等。\n\n#### 调试所需要的参数\n输入:\n  - query: 搜索词(必填)\n  - freshness: 搜索指定时间范围内的网页 (可选值 YYYY-MM-DD, YYYY-MM-DD..YYYY-MM-DD, noLimit, oneYear, oneMonth, oneWeek, oneDay. 默认为 noLimit)\n  - count: 返回结果的条数 (1-50, 默认为 10)\n\n输出:\n  - 网页标题、网页链接、网页摘要、发布时间、网站名称\n\n### Tool2: Bocha AI Search\n#### 详细描述\n在博查网页搜索的基础上，AI识别搜索词语义并额外返回垂直领域内容的结构化模态卡，例如天气卡、日历卡、百科卡等几十种模态卡，在语义识别、搜索结果时效性、内容丰富性等方面更好。\n\n#### 调试所需要的参数\n输入:\n  - query: 搜索词(必填)\n  - freshness: 搜索指定时间范围内的网页 (可选值 YYYY-MM-DD, YYYY-MM-DD..YYYY-MM-DD, noLimit, oneYear, oneMonth, oneWeek, oneDay. 默认为 noLimit)\n  - count: 返回结果的条数 (1-50, 默认为 10)\n\n输出:\n  - 网页标题、网页链接、网页摘要、发布时间、网站名称、模态卡\n\n## 可适配平台\n方舟, python, Claude, Cursor等\n\n## 服务开通链接\n您需要前往 [博查AI开放平台](https://open.bochaai.com)，登陆后获取 API KEY。\n\n## 鉴权方式\nAPI Key\n\n## 安装部署\n### 步骤一：下载代码至本地\n```bash\ngit clone git@github.com:BochaAI/bocha-search-mcp.git\n```\n\n### 步骤二: 在客户端中配置\n#### Claude Desktop\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n  \"mcpServers\": {\n    \"bocha-search-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/bocha-search-mcp\",\n        \"run\",\n        \"bocha-search-mcp\"\n      ],\n      \"env\": {\n        \"BOCHA_API_KEY\": \"sk-****\"\n      }\n    }\n  }\n  ```\n\n### 步骤三: 在客户端中使用\n\n\n### 步骤四: 调试本地服务（可选）\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/bocha-search-mcp run bocha-search-mcp\n```\n\n## 客户案例\n\n目前博查已经累计服务**3000+企业用户**和**20000+开发者用户**，并且成为**DeepSeek官方联网搜索供应方**以及**阿里、腾讯、字节官方推荐的搜索API**，目前**承接着国内60%以上AI应用的联网搜索请求**。\n\n博查的搜索内容源包括全网近百亿个网页，以及生态合作内容（含短视频、新闻、百科、天气、医疗、火车票、酒店、餐厅、景点、企业、学术等）。博查后续将会继续与各个平台在内容生态、智能体创作等方面开展共创合作，为博查用户的搜索问题提供丰富多彩的答案。\n\n## 常见问题\n\n### Bocha Web Search API服务可以提供什么样的能力?\nBocha Web Search 提供全网通用搜索能力。您可以从博查搜索全网信息和网页链接，返回结果包括网页标题、网页URL、网页摘要、网站名称、网站图标、发布时间、图片链接等，每次搜索结果返回的网页最多支持50条（count50）。\n\n传统搜索引擎使用的是关键字+竞价排名机制的搜索算法，搜索结果的目标不是直接为用户提供正确的答案，而是吸引用户点击以获得广告收入。\n\n博查是基于多模态混合搜索与语义排序技术的新一代搜索引擎，支持AI应用场景的自然语言搜索方式，同时搜索结果目标是提供干净、准确、高质量的答案。\n\n博查的语义排序技术基于Transformer架构，会根据搜索结果与用户问题的语义相关性进行排序。由于大模型同样是Transformer架构，通过判断上下文与用户问题的语义相关性进行取舍，因此最终大模型更加喜欢博查提供的搜索结果。\n\n目前博查的搜索效果是国内最接近Bing Search API的搜索引擎，由于Bing Search API数据会出海（无国内Region）、价格昂贵（15美元/千次）且不提供文本摘要（只有50-100字的snippet），国内很多企业客户都已经从Bing切换至博查。\n\n### Bocha AI Search API 服务可以提供什么样的能力？\nBocha AI Search 在博查 Web Search 的基础上，AI识别搜索词语义并额外返回垂直领域内容的结构化模态卡，例如天气卡、日历卡、百科卡等几十种模态卡，在语义识别、搜索结果时效性、内容丰富性等方面更好。\n\n目前支持的模态卡类型包括：天气、百科、医疗、万年历、火车、星座属相、贵金属、汇率、油价、手机、股票、汽车等。\n\n以股票信息为例，网页中一般无法获取到实时的股票数据，需要结构化模态卡来支撑。博查AI Search API可以在提供网页信息的基础上，额外输出股价的结构化数据模态卡，通过模态卡提供的结构化数据，可以进一步增强AI应用中用户对于时效性问题的回答准确性。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "retrieval",
        "semantic",
        "bocha",
        "semantic search",
        "bocha search",
        "data bochaai"
      ],
      "category": "weather-and-location-data"
    },
    "CaChiJ--kakao-navigation-mcp-server": {
      "owner": "CaChiJ",
      "name": "kakao-navigation-mcp-server",
      "url": "https://github.com/CaChiJ/kakao-navigation-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/CaChiJ.webp",
      "description": "Provides location search and route finding services using Kakao's mapping API, enabling geocoding of addresses and optimal path calculation across various transportation modes with consideration for real-time traffic data.",
      "stars": 9,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-25T00:00:12Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cachij-kakao-navigation-mcp-server-badge.png)](https://mseep.ai/app/cachij-kakao-navigation-mcp-server)\n\n# Kakao Mobility & Kakao Map MCP Server\n\n[![MCP](https://img.shields.io/badge/MCP-Compliant-blue)](https://github.com/cursor-ai/model-context-protocol)\n[![smithery badge](https://smithery.ai/badge/@CaChiJ/kakao-mobility-mcp-server)](https://smithery.ai/server/@CaChiJ/kakao-mobility-mcp-server)\n\n## 소개\n\n본 레포지토리는 Model Context Protocol (MCP)을 준수하여 카카오 모빌리티 및 카카오맵 API와 연동되는 서버를 제공합니다. 국내 환경에 적합한 길찾기 서비스를 제공하는 것을 목표로 합니다.\n\n## 주요 기능\n\n### 1. 위치 검색 (지오코딩)\n- 주소나 장소명을 좌표(위도/경도)로 변환\n- 정확한 위치 정보 제공\n\n### 2. 길찾기 서비스\n- 출발지에서 목적지까지의 최적 경로 검색\n- 도보, 자동차 등 다양한 이동 수단 지원\n- 실시간 교통 정보 반영\n\n## 시작하기\n1. [kakao developers](https://developers.kakao.com/)에 로그인합니다.\n2. 애플리케이션 생성\n  - '내 애플리케이션' > '애플리케이션 추가하기' > 애플리케이션 정보 입력 후 '저장'\n3. 카카오 맵 API 활성화\n  - 사이드바에서 '카카오 맵' 선택 > '활성화 설정' ON\n4. REST API Key 발급\n  - 사이드바에서 '앱 키' 선택 > 'REST API 키' 복사해 사용\n\n## 제공 도구\n\n본 서버는 다음과 같은 MCP 도구들을 제공합니다:\n\n- `geocode`: 주소를 좌표 정보로 지오코딩\n- `direction_search_by_names`: 출발지와 목적지 주소로 길찾기\n- `direction_search_by_coordinates`: 출발지와 목적지 좌표로 길찾기\n- `future_direction_search_by_coordinates`: 출발지와 목적지 좌표로 미래 특정 시점의 길찾기\n- `address_search_by_place_name`: 장소 이름으로 주소 찾기\n\n## 배포 정보\n\n본 서버의 배포 정보 및 최신 업데이트는 Smithery에서 확인하실 수 있습니다.\n\n---\nMade with ❤️ using Model Context Protocol\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geocoding",
        "kakao",
        "cachij",
        "kakao navigation",
        "kakao mapping",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "CodeByWaqas--weather-mcp-server": {
      "owner": "CodeByWaqas",
      "name": "weather-mcp-server",
      "url": "https://github.com/CodeByWaqas/weather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/CodeByWaqas.webp",
      "description": "Retrieve real-time weather data including temperature, humidity, and wind speed using the OpenWeatherMap API. Provides detailed insights and weather descriptions in metric units.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-24T14:05:18Z",
      "readme_content": "# Weather MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@CodeByWaqas/weather-mcp-server)](https://smithery.ai/server/@CodeByWaqas/weather-mcp-server)\n\nA Modern Code Protocol (MCP) server that provides weather information using the OpenWeatherMap API.\n\n## Features\n\n- Real-time weather data retrieval\n- Metric units for temperature\n- Detailed weather information including:\n  - Temperature\n  - Humidity\n  - Wind Speed\n  - Sunrise/Sunset times\n  - Weather description\n\n## Prerequisites\n\n- Python 3.12 or higher\n- OpenWeatherMap API key\n\n## Installation\n\n### Installing via Smithery\n\nTo install Weather MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@CodeByWaqas/weather-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @CodeByWaqas/weather-mcp-server --client claude\n```\n\n### Manual Installation\n1. Clone the repository\n2. Create a virtual environment:\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # On Windows use: .venv\\Scripts\\activate\n```\n3. Install dependencies:\n```bash\npip install -e .\n```\n\n## Setup Intructions\n\n### Setup with Claude Desktop\n```json\n# claude_desktop_config.json\n# Can find location through:\n# Claude -> Settings -> Developer -> Edit Config\n{\n  \"mcpServers\": {\n      \"mcp-weather-project\": {\n          \"command\": \"uv\",\n          \"args\": [\n              \"--directory\",\n              \"/<absolute-path>/weather-mcp-server/src/resources\",\n              \"run\",\n              \"server.py\"\n          ],\n          \"env\": {\n            \"WEATHER_API_KEY\": \"YOUR_API_KEY\"\n          }\n      }\n  }\n}\n```\n## Local/Dev Setup Instructions\n### Clone repo\n`git clone https://github.com/CodeByWaqas/weather-mcp-server`\n### Install dependencies\nInstall MCP server dependencies:\n```bash\ncd weather-mcp-server\n\n# Create virtual environment and activate it\nuv venv\n\nsource .venv/bin/activate # MacOS/Linux\n# OR\n.venv/Scripts/activate # Windows\n\n# Install dependencies\nuv add \"mcp[cli]\" python-dotenv requests httpx\n```\n\n## Configuration\n\n1. Copy `src/resources/env.example` to `src/resources/.env`\n2. Add your OpenWeatherMap API key to the `.env` file:\n```\nWEATHER_API_KEY=your_api_key_here\n```\n\n## Usage\n\nRun the Claude Desktop and use LLM to retrieve weather info\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "openweathermap",
        "weather",
        "api",
        "weather data",
        "openweathermap api",
        "using openweathermap"
      ],
      "category": "weather-and-location-data"
    },
    "Curtains415--0xbot-weather": {
      "owner": "Curtains415",
      "name": "0xbot-weather",
      "url": "https://github.com/Curtains415/0xbot-weather",
      "imageUrl": "/freedevtools/mcp/pfp/Curtains415.webp",
      "description": "Provides real-time weather information and forecasts through a standardized interface, enabling applications to seamlessly query weather data for various locations.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-18T02:03:49Z",
      "readme_content": "# Weather MCP Server\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "curtains415",
        "forecasts",
        "weather data",
        "weather information",
        "query weather"
      ],
      "category": "weather-and-location-data"
    },
    "Cyreslab-AI--flightradar-mcp-server": {
      "owner": "Cyreslab-AI",
      "name": "flightradar-mcp-server",
      "url": "https://github.com/Cyreslab-AI/flightradar-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Cyreslab-AI.webp",
      "description": "Access real-time flight tracking and status information, retrieve detailed flight data, and search for flights based on various criteria such as airline or airports.",
      "stars": 6,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-25T11:19:06Z",
      "readme_content": "# FlightRadar MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@Cyreslab-AI/flightradar-mcp-server)](https://smithery.ai/server/@Cyreslab-AI/flightradar-mcp-server)\n\nA Model Context Protocol (MCP) server that provides real-time flight tracking and status information using the AviationStack API.\n\n<a href=\"https://glama.ai/mcp/servers/@Cyreslab-AI/flightradar-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Cyreslab-AI/flightradar-mcp-server/badge\" alt=\"FlightRadar Server MCP server\" />\n</a>\n\n## Features\n\nThis MCP server provides three main tools:\n\n1. **get_flight_data**: Get detailed information about a specific flight by its IATA or ICAO code\n2. **search_flights**: Search for flights by various criteria like airline, departure/arrival airports, and status\n3. **get_flight_status**: Get a human-readable status summary for a specific flight\n\n## Installation\n\n### Installing via Smithery\n\nTo install flightradar-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Cyreslab-AI/flightradar-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @Cyreslab-AI/flightradar-mcp-server --client claude\n```\n\n### Prerequisites\n\n- Node.js (v14 or higher)\n- npm (v6 or higher)\n- An AviationStack API key (get one at [aviationstack.com](https://aviationstack.com/))\n\n### Setup\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/Cyreslab-AI/flightradar-mcp-server.git\n   cd flightradar-mcp-server\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the server:\n\n   ```bash\n   npm run build\n   ```\n\n4. Configure the server in your MCP settings file:\n\n   For Claude VSCode extension, add to `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"flightradar\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/flightradar-mcp-server/build/index.js\"],\n         \"env\": {\n           \"AVIATIONSTACK_API_KEY\": \"YOUR_API_KEY_HERE\"\n         },\n         \"disabled\": false,\n         \"autoApprove\": []\n       }\n     }\n   }\n   ```\n\n   For Claude desktop app, add to `~/Library/Application Support/Claude/claude_desktop_config.json` (macOS) or similar path on other platforms.\n\n## Usage Examples\n\nOnce the server is configured, you can use it with Claude to get flight information:\n\n### Get Flight Status\n\n```\nUser: What's the status of flight BA855?\n\nClaude: Flight BA855 (British Airways) is currently landed.\n\nDeparture: Prague Vaclav Havel Airport (PRG), Terminal 1, Gate B5\nScheduled: 3/25/2025, 11:50:00 AM\nEstimated: 3/25/2025, 11:50:00 AM\n\nArrival: Heathrow (LHR), Terminal 3\nScheduled: 3/25/2025, 1:10:00 PM\n```\n\n### Search Flights\n\n```\nUser: Find British Airways flights\n\nClaude: I found 3212 British Airways flights. Here are the first 3:\n\n1. BA5719: Tucson (TUS) to Dallas/Fort Worth (DFW)\n   Status: scheduled\n   Departure: 3/25/2025, 5:00:00 AM\n\n2. BA6096: Prague (PRG) to Helsinki (HEL)\n   Status: scheduled\n   Departure: 3/25/2025, 11:40:00 AM\n\n3. BA855: Prague (PRG) to London Heathrow (LHR)\n   Status: landed\n   Departure: 3/25/2025, 10:50:00 AM\n```\n\n### Get Flight Details\n\n```\nUser: Get detailed information about flight BA855\n\nClaude: Here are the details for flight BA855:\n\nFlight: BA855 (BAW855)\nAirline: British Airways\nAircraft: Airbus A320 (Registration: G-EUUH)\n\nDeparture:\n- Airport: Prague Vaclav Havel Airport (PRG/LKPR)\n- Terminal: 1, Gate: B5\n- Scheduled: 3/25/2025, 10:50:00 AM\n\nArrival:\n- Airport: London Heathrow (LHR/EGLL)\n- Terminal: 3\n- Scheduled: 3/25/2025, 12:10:00 PM\n\nStatus: landed\n```\n\n## API Key Configuration\n\nThis server requires an AviationStack API key to function. You can get a free API key (100 requests/month) at [aviationstack.com](https://aviationstack.com/).\n\nThe API key should be provided as an environment variable named `AVIATIONSTACK_API_KEY` in your MCP settings configuration.\n\n## License\n\nMIT",
      "npm_url": "https://www.npmjs.com/package/flightradar-mcp-server",
      "npm_downloads": 47837,
      "keywords": [
        "flightradar",
        "flights",
        "airline",
        "flight data",
        "flight tracking",
        "flightradar mcp"
      ],
      "category": "weather-and-location-data"
    },
    "DappierAI--dappier-mcp": {
      "owner": "DappierAI",
      "name": "dappier-mcp",
      "url": "https://github.com/DappierAI/dappier-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/DappierAI.webp",
      "description": "Provides real-time web search capabilities and access to premium data sources, including news, financial markets, sports, entertainment, and weather information. Facilitates the development of AI agents leveraging diverse data models.",
      "stars": 32,
      "forks": 10,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-28T11:52:36Z",
      "readme_content": "## 📽️ Watch the Demo Video (Live!)\n\n> 📌 Click the image below — use **Ctrl+Click** (or **Cmd+Click on Mac**) to open in a new tab.\n\n<a href=\"https://youtu.be/2Q_PwLFkYTQ\">\n  \n</a>\n\n# Dappier MCP Server\n\nEnable fast, free real-time web search and access premium data from trusted media brands—news, financial markets, sports, entertainment, weather, and more. Build powerful AI agents with Dappier.\n\n> Explore a wide range of data models in our marketplace at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n\n<br>\n\n<a href=\"https://smithery.ai/server/@DappierAI/dappier-mcp\" target=\"_blank\"><img alt=\"Smithery Badge\" src=\"https://smithery.ai/badge/@DappierAI/dappier-mcp\"></a>\n\n<br>\n\n<a href=\"https://glama.ai/mcp/servers/@DappierAI/dappier-mcp\" target=\"_blank\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@DappierAI/dappier-mcp/badge\" />\n</a>\n\n<br>\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/dappierai-dappier-mcp-badge.png)](https://mseep.ai/app/dappierai-dappier-mcp)\n\n<br>\n\n## Getting Started\n\nGet Dappier API Key. Head to [Dappier](https://platform.dappier.com/profile/api-keys) to sign up and generate an API key.\n\n\n## Installing via Smithery\n\nTo install dappier-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@DappierAI/dappier-mcp):\n\n```bash\nnpx -y @smithery/cli install @DappierAI/dappier-mcp --client claude\n```\n\n## Installation\n\nInstall `uv` first.\n\n**MacOS/Linux**:\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n**Windows**:\n```bash\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n## Usage\n\n### Claude Desktop\n\nUpdate your Claude configuration file (`claude_desktop_config.json`) with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"dappier\": {\n      \"command\": \"uvx\",\n      \"args\": [\"dappier-mcp\"],\n      \"env\": {\n        \"DAPPIER_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n> **Hint**: You may need to provide the full path to the `uvx` executable in the `command` field. You can obtain this by running `which uvx` on macOS/Linux or `where uvx` on Windows.\n\n**Configuration file location:**\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n**Accessing via application:**\n- **macOS**:\n  1. Open the Claude Desktop application.\n  2. In the menu bar, click on `Claude` > `Settings`.\n  3. Navigate to the `Developer` tab.\n  4. Click on `Edit Config` to open the configuration file in your default text editor.\n- **Windows**:\n  1. Open the Claude Desktop application.\n  2. Click on the gear icon to access `Settings`.\n  3. Navigate to the `Developer` tab.\n  4. Click on `Edit Config` to open the configuration file in your default text editor.\n\n> **Note**: If the `Developer` tab is not visible, ensure you're using the latest version of Claude Desktop. \n\n---\n\n### Cursor\n\nUpdate your Cursor configuration file (`mcp.json`) with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"dappier\": {\n      \"command\": \"uvx\",\n      \"args\": [\"dappier-mcp\"],\n      \"env\": {\n        \"DAPPIER_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n> **Hint**: You may need to provide the full path to the `uvx` executable in the `command` field. You can obtain this by running `which uvx` on macOS/Linux or `where uvx` on Windows.\n\n**Configuration file location:**\n- **Global Configuration**:\n  - **macOS**: `~/.cursor/mcp.json`\n  - **Windows**: `%USERPROFILE%\\.cursor\\mcp.json`\n- **Project-Specific Configuration**:\n  - Place the `mcp.json` file inside the `.cursor` directory within your project folder: `<project-root>/.cursor/mcp.json`\n\n**Accessing via application:**\n1. Open the Cursor application.\n2. Navigate to `Settings` > `MCP`.\n3. Click on `Add New Global MCP Server`.\n4. The application will open the `mcp.json` file in your default text editor for editing.\n\n> **Note**: On Windows, if the project-level configuration is not recognized, consider adding the MCP server through the Cursor settings interface. \n\n---\n\n### Windsurf\n\nUpdate your Windsurf configuration file (`mcp_config.json`) with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"dappier\": {\n      \"command\": \"uvx\",\n      \"args\": [\"dappier-mcp\"],\n      \"env\": {\n        \"DAPPIER_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n> **Hint**: You may need to provide the full path to the `uvx` executable in the `command` field. You can obtain this by running `which uvx` on macOS/Linux or `where uvx` on Windows.\n\n**Configuration file location:**\n- **macOS**: `~/.codeium/windsurf/mcp_config.json`\n- **Windows**: `%USERPROFILE%\\.codeium\\windsurf\\mcp_config.json`\n\n**Accessing via application:**\n1. Open the Windsurf application.\n2. Navigate to `Settings` > `Cascade`.\n3. Scroll down to the `Model Context Protocol (MCP) Servers` section.\n4. Click on `View raw config` to open the `mcp_config.json` file in your default text editor.\n\n> **Note**: After editing the configuration file, click the `Refresh` button in the MCP Servers section to apply the changes. \n\n## Features\n\nThe Dappier MCP Remote Server provides powerful real-time capabilities out of the box — no training or fine-tuning needed. Use it to build live, interactive tools powered by the latest web data, financial markets, or AI-curated content.\n\n### Real-Time Web Search  \n**Model ID:** `am_01j06ytn18ejftedz6dyhz2b15`  \n\nSearch the live web using Dappier’s AI-powered index. Get real-time access to:\n\n- Breaking news from across the globe  \n- Weather forecasts and local updates  \n- Travel alerts and flight info  \n- Trending topics and viral content  \n- Online deals and shopping highlights  \n\nIdeal for use cases like news agents, travel planners, alert bots, and more.\n\n### Stock Market Insights  \n**Model ID:** `am_01j749h8pbf7ns8r1bq9s2evrh`  \n\nThis model delivers instant access to market data, financial headlines, and trade insights. Perfect for portfolio dashboards, trading copilots, and investment tools.\n\nIt provides:\n\n- Real-time stock prices  \n- Financial news and company updates  \n- Trade signals and trends  \n- Market movement summaries  \n- AI-curated analysis using live data from Polygon.io  \n\n### AI-Powered Content Recommendations  \n\nChoose from several domain-specific AI models tailored for content discovery, summarization, and feed generation.\n\n#### Sports News  \n**Model ID:** `dm_01j0pb465keqmatq9k83dthx34`  \nStay updated with real-time sports headlines, game recaps, and expert analysis.\n\n#### Lifestyle Updates  \n**Model ID:** `dm_01j0q82s4bfjmsqkhs3ywm3x6y`  \nExplore curated lifestyle content — covering wellness, entertainment, and everyday inspiration.\n\n#### iHeartDogs AI  \n**Model ID:** `dm_01j1sz8t3qe6v9g8ad102kvmqn`  \nYour intelligent dog care assistant — access training tips, health advice, and behavior insights.\n\n#### iHeartCats AI  \n**Model ID:** `dm_01j1sza0h7ekhaecys2p3y0vmj`  \nAn expert AI for all things feline — from nutrition to playtime to grooming routines.\n\n#### GreenMonster  \n**Model ID:** `dm_01j5xy9w5sf49bm6b1prm80m27`  \nDiscover sustainable lifestyle ideas, ethical choices, and green innovations.\n\n#### WISH-TV AI  \n**Model ID:** `dm_01jagy9nqaeer9hxx8z1sk1jx6`  \nTap into hyperlocal news, politics, culture, health, and multicultural updates.\n\nEach recommendation includes:\n\n- A clear title and concise summary  \n- The original publication date  \n- The trusted source and domain  \n- Image preview (if available)  \n- A relevance score for prioritization\n\nAdvanced options let you:\n\n- Tune the search algorithm (`semantic`, `most_recent`, `trending`, etc.)  \n- Focus results on a specific domain (`ref`)  \n- Adjust how many results you want (`similarity_top_k`, `num_articles_ref`)  \n\n## Debugging\n\nRun the MCP inspector to debug the server:\n```bash\nnpx @modelcontextprotocol/inspector uvx dappier-mcp\n```\n\n## Contributing\n\nWe welcome contributions to expand and improve the Dappier MCP Server. Whether you want to add new search capabilities, enhance existing functionality, or improve documentation, your input is valuable.\n\nFor examples of other MCP servers and implementation patterns, see:\n[https://github.com/modelcontextprotocol/servers](https://github.com/modelcontextprotocol/servers)\n\nPull requests are welcome! Feel free to contribute new ideas, bug fixes, or enhancements.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "data",
        "dappierai",
        "ai",
        "data dappierai",
        "weather information",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "Dreamboat-Rachel--MCP-Server-For-Local": {
      "owner": "Dreamboat-Rachel",
      "name": "MCP-Server-For-Local",
      "url": "https://github.com/Dreamboat-Rachel/MCP-Server-For-Local",
      "imageUrl": "/freedevtools/mcp/pfp/Dreamboat-Rachel.webp",
      "description": "Connect AI models to real-time data and tools with features such as weather querying, Google search automation, camera control, and image generation. The server supports modular expansion and custom API integration for tailored functionalities.",
      "stars": 14,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-21T02:08:22Z",
      "readme_content": "# MCP Server for Local\n\n一个基于 MCP (Multi-Component Platform) 的本地代理服务器和客户端实现，提供多种 AI 工具调用能力。\n\n## 功能特点\n\n### 核心功能\n- **天气查询**：实时获取全球任意位置的天气信息，支持温度、湿度、风速等详细数据\n- **谷歌搜索**：智能检索互联网信息，支持多语言和高级搜索语法\n- **摄像头控制**：支持拍照、视频流和微表情分析，可用于情绪识别\n- **图片生成**：集成 ComfyUI，支持文本到图像的 AI 生成\n- **智能对话**：基于 DashScope 的 AI 对话能力，支持上下文理解和多轮对话\n\n### 技术特性\n- 跨平台支持（Windows 和 Linux）\n- 模块化设计，易于扩展新功能\n- 完整的日志系统，便于调试和监控\n- 支持自定义工具和 API 集成\n- 高性能并发处理能力\n\n## 环境配置\n\n### 系统要求\n- Python 3.8+\n- Node.js (可选，用于运行 JavaScript 服务器)\n- Chrome 浏览器（用于谷歌搜索功能）\n- 摄像头（用于拍照功能）\n- 至少 4GB 内存\n- 支持 CUDA 的显卡（可选，用于加速 AI 计算）\n\n### 安装步骤\n\n1. 克隆仓库：\n```bash\ngit clone https://github.com/yourusername/mcp-server-for-local.git\ncd mcp-server-for-local\n```\n\n2. 创建并激活虚拟环境：\n```bash\n# Windows\npython -m venv .venv\n.venv\\Scripts\\activate\n\n# Linux\npython3 -m venv .venv\nsource .venv/bin/activate\n```\n\n3. 安装依赖：\n```bash\n# 使用 uv 安装依赖\nuv pip install -r requirements.txt\n\n# 如果遇到网络问题，可以使用国内镜像\nuv pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple\n```\n\n4. 配置环境变量：\n```bash\n# 复制环境变量模板\ncp .env.example .env\n\n# 编辑 .env 文件，设置你的配置\n```\n\n### 环境变量配置\n编辑 `.env` 文件，设置以下配置：\n\n- `DASHSCOPE_API_KEY`: DashScope API 密钥（必填）\n- `MODEL`: 使用的模型名称（默认：qwen-max）\n- `CONFIG_FILE`: 服务器配置文件路径\n- `GAODE_API_KEY`: 高德地图 API 密钥（用于天气查询）\n- `CHROME_PATH`: Chrome 浏览器路径\n- `CHROMEDRIVER_PATH`: ChromeDriver 路径\n- `BASE_URL`: ComfyUI 服务器地址\n- `SERVERS_DIR`: 服务器脚本目录\n- `LOG_LEVEL`: 日志级别（可选：DEBUG, INFO, WARNING, ERROR）\n\n## 使用方法\n\n### 基本使用\n\n1. 进入项目目录：\n```bash\ncd src/mcp\n```\n\n2. 运行客户端：\n```bash\nuv run .\\client\\mcp_client.py .\\proxy\\proxy_server.py\n```\n\n3. 在客户端中输入命令，例如：\n- \"北京的天气怎么样？\"\n- \"在谷歌上搜索 Python 教程\"\n- \"拍照\"\n- \"生成一张猫的图片\"\n\n### 高级功能\n\n1. **自定义工具**：\n   - 在 `src/mcp/tools` 目录下添加新的工具类\n   - 实现必要的接口方法\n   - 在配置文件中注册新工具\n\n2. **API 扩展**：\n   - 支持添加新的 API 服务\n   - 可配置 API 密钥和端点\n   - 支持自定义请求和响应处理\n\n3. **日志管理**：\n   - 支持多级别日志记录\n   - 可配置日志输出位置\n   - 支持日志轮转和归档\n\n## 常见问题\n\n### 安装问题\n\n1. 依赖安装失败：\n```bash\n# 尝试清理缓存后重新安装\nuv pip cache purge\nuv pip install -r requirements.txt\n```\n\n2. 虚拟环境问题：\n```bash\n# 如果激活失败，尝试重新创建虚拟环境\nrm -rf .venv\npython -m venv .venv\n```\n\n### 运行问题\n\n1. 权限问题：\n```bash\n# Linux\nchmod +x src/mcp/proxy/proxy_server.py\nchmod +x src/mcp/client/mcp_client.py\n```\n\n2. Chrome 相关问题：\n- 确保 Chrome 和 ChromeDriver 版本匹配\n- 检查 Chrome 路径是否正确\n- 确保有足够的权限运行 Chrome\n- 如果遇到驱动问题，可以手动下载对应版本的 ChromeDriver\n\n3. API 密钥问题：\n- 检查 `.env` 文件中的 API 密钥是否正确\n- 确保 API 密钥有足够的配额\n- 检查网络连接是否正常\n\n## 开发指南\n\n### 项目结构\n```\nsrc/mcp/\n├── client/          # 客户端代码\n├── proxy/           # 代理服务器代码\n├── tools/           # 工具实现\n├── utils/           # 工具函数\n└── config/          # 配置文件\n```\n\n### 添加新功能\n1. 在 `tools` 目录下创建新的工具类\n2. 实现必要的接口方法\n3. 在配置文件中注册新工具\n4. 编写测试用例\n5. 更新文档\n\n## 贡献指南\n\n欢迎提交 Issue 和 Pull Request！在提交之前，请确保：\n1. 代码符合项目规范\n2. 添加了必要的测试\n3. 更新了相关文档\n4. 通过了所有测试\n\n## 许可证\n\nMIT License\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "automation",
        "ai",
        "api",
        "connect ai",
        "data dreamboat",
        "weather querying"
      ],
      "category": "weather-and-location-data"
    },
    "GongRzhe--TRAVEL-PLANNER-MCP-Server": {
      "owner": "GongRzhe",
      "name": "TRAVEL-PLANNER-MCP-Server",
      "url": "https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/GongRzhe.webp",
      "description": "Enables interaction with Google Maps and travel planning services for tasks including location search, place details lookup, and travel time calculations.",
      "stars": 86,
      "forks": 28,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T15:16:59Z",
      "readme_content": "# Travel Planner MCP Server (@gongrzhe/server-travelplanner-mcp)\n[![smithery badge](https://smithery.ai/badge/@GongRzhe/TRAVEL-PLANNER-MCP-Server)](https://smithery.ai/server/@GongRzhe/TRAVEL-PLANNER-MCP-Server)\n\nA Travel Planner Model Context Protocol (MCP) server implementation for interacting with Google Maps and travel planning services. This server enables LLMs to perform travel-related tasks such as location search, place details lookup, and travel time calculations.\n\n<a href=\"https://glama.ai/mcp/servers/y3u6yjiiq1\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/y3u6yjiiq1/badge\" alt=\"Travel Planner Server MCP server\" />\n</a>\n\n## Installation & Usage\n### Installing via Smithery\n\nTo install Travel Planner for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GongRzhe/TRAVEL-PLANNER-MCP-Server):\n\n```bash\nnpx -y @smithery/cli install @GongRzhe/TRAVEL-PLANNER-MCP-Server --client claude\n```\n\n### Installing Manually\n```bash\n# Using npx (recommended)\nnpx @gongrzhe/server-travelplanner-mcp\n\n# With environment variable for Google Maps API\nGOOGLE_MAPS_API_KEY=your_api_key npx @gongrzhe/server-travelplanner-mcp\n```\n\nOr install globally:\n\n```bash\n# Install globally\nnpm install -g @gongrzhe/server-travelplanner-mcp\n\n# Run after global installation\nGOOGLE_MAPS_API_KEY=your_api_key @gongrzhe/server-travelplanner-mcp\n```\n\n## Components\n\n### Tools\n\n- **searchPlaces**\n  - Search for places using Google Places API\n  - Input:\n    - `query` (string): Search query for places\n    - `location` (optional): Latitude and longitude to bias results\n    - `radius` (optional): Search radius in meters\n\n- **getPlaceDetails**\n  - Get detailed information about a specific place\n  - Input:\n    - `placeId` (string): Google Place ID to retrieve details for\n\n- **calculateRoute**\n  - Calculate route between two locations\n  - Input:\n    - `origin` (string): Starting location\n    - `destination` (string): Ending location\n    - `mode` (optional): Travel mode (driving, walking, bicycling, transit)\n\n- **getTimeZone**\n  - Get timezone information for a location\n  - Input:\n    - `location`: Latitude and longitude coordinates\n    - `timestamp` (optional): Timestamp for time zone calculation\n\n## Configuration\n\n### Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"travel-planner\": {\n      \"command\": \"npx\",\n      \"args\": [\"@gongrzhe/server-travelplanner-mcp\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\nAlternatively, you can use the node command directly if you have the package installed:\n\n```json\n{\n  \"mcpServers\": {\n    \"travel-planner\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/dist/index.js\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n### Building from Source\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n### Environment Variables\n\n- `GOOGLE_MAPS_API_KEY` (required): Your Google Maps API key with the following APIs enabled:\n  - Places API\n  - Directions API\n  - Geocoding API\n  - Time Zone API\n\n## License\n\nThis MCP server is licensed under the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "planner",
        "mcp",
        "planning",
        "planner mcp",
        "location data",
        "travel planner"
      ],
      "category": "weather-and-location-data"
    },
    "GreatAuk--mcp-weather": {
      "owner": "GreatAuk",
      "name": "mcp-weather",
      "url": "https://github.com/GreatAuk/mcp-weather",
      "imageUrl": "/freedevtools/mcp/pfp/GreatAuk.webp",
      "description": "Build and deploy a Model Context Protocol server that provides access to weather data, allowing for integration with various AI models. Utilizes TypeScript for server implementation and includes features for fast development and automated version management.",
      "stars": 4,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-11T13:49:59Z",
      "readme_content": "# MCP Server Starter\n\n[![smithery badge](https://smithery.ai/badge/@GreatAuk/mcp-weather)](https://smithery.ai/server/@GreatAuk/mcp-weather)\n\nA production-ready starter template for building Model Context Protocol (MCP) servers with TypeScript.\n\n<a href=\"https://glama.ai/mcp/servers/rlkcxdr2y9\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/rlkcxdr2y9/badge\" alt=\"Server Starter MCP server\" /></a>\n\n## 🚀 Quick Start\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   bun install\n   ```\n\n## ✨ Key Features\n\n- Bun for fast testing and development\n- Biome for linting and formatting\n- Automated version management with standard-version\n- Clean, maintainable project structure\n\n## 📂 Project Structure\n\n```\nmcp-starter/\n├── src/\n│   ├── tools/          # MCP tools implementation\n│   ├── utils/          # Shared utilities\n│   ├── main.ts         # Server entry point\n│   └── types.ts        # Shared type definitions\n├── tests/              # Test files\n├── biome.json          # Linting configuration\n├── tsconfig.json       # TypeScript configuration\n└── package.json        # Project dependencies\n```\n\n## ⚙️ Configuration\n\n### Creating New Tools\n\nThe project includes a script to help create new MCP tools:\n\n```bash\nbun run scripts/create-tool.ts <tool-name>\n```\n\nThis will:\n1. Create a new tool directory under `src/tools/<tool-name>`\n2. Generate the basic tool structure including:\n   - index.ts (main implementation)\n   - schema.ts (JSON schema for tool parameters)\n   - test.ts (test file)\n3. Update the tools index file to export the new tool\n\nExample:\n```bash\nbun run scripts/create-tool.ts weather\n```\n\n## 🛠️ Development\n\n- **Run tests**: `bun test`\n- **Format code**: `bun run format`\n- **Lint code**: `bun run lint`\n- **Build project**: `bun run build`\n\nTo add your development MCP server to Claude Desktop:\n\n1. Build the project:\n   ```bash\n   bun run build\n   ```\n2. Add to your Claude Desktop config:\n   ```json\n   // You only need the argument if you need to pass arguments to your server\n   {\n     \"mcpServers\": {\n       \"your-server-name\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/your/project/dist/main.js\", \"some_argument\"]\n       }\n     }\n   }\n   ```\n\n## 📜 Version Management\n\nThis project uses [standard-version](https://github.com/conventional-changelog/standard-version) for automated version management. Run `bun run release` to create a new version.\n\n### Commit Message Format\n- `feat`: New feature (bumps minor version)\n- `fix`: Bug fix (bumps patch version)\n- `BREAKING CHANGE`: Breaking change (bumps major version)\n\n## 📦 Publishing to npm\n\n1. Ensure you're logged in to npm:\n   ```bash\n   npm login\n   ```\n2. Build the project:\n   ```bash\n   bun run build\n   ```\n3. Publish the package:\n   ```bash\n   npm publish\n   ```\nRemember to update the version number using `bun run release` before publishing new versions.\n\n## Installing via Smithery\n\nTo install Weather MCP Server Starter for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GreatAuk/mcp-weather):\n\n```bash\nnpx -y @smithery/cli install @GreatAuk/mcp-weather --client claude\n```\n\n## Installing from npm (after publishing)\n\nAdd to your Claude Desktop config:\n```json\n// You only need the argument if you need to pass arguments to your server\n{\n  \"mcpServers\": {\n    \"your-server-name\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"your-package-name\", \"some_argument\"]\n    }\n  }\n}\n",
      "npm_url": "https://www.npmjs.com/package/mcp-weather",
      "npm_downloads": 219,
      "keywords": [
        "protocol",
        "weather",
        "typescript",
        "weather data",
        "access weather",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "JackKuo666--Weather-MCP-Server": {
      "owner": "JackKuo666",
      "name": "Weather-MCP-Server",
      "url": "https://github.com/JackKuo666/Weather-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/JackKuo666.webp",
      "description": "Retrieve real-time weather information using the National Weather Service API, including alerts and forecasts for specific locations based on latitude and longitude.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-18T08:53:50Z",
      "readme_content": "# Weather MCP Server\n\nThis is a Model Context Protocol (MCP) server that provides weather information using the National Weather Service (NWS) API.\n\n## Features\n\n- Get weather alerts for a US state\n- Get weather forecast for a specific location (using latitude and longitude)\n\n## Requirements\n\n- Python 3.10+\n- FastMCP\n- httpx\n\n## Installation\n\n1. Clone this repository\n2. Set up a virtual environment:\n   ```\n   python -m venv .venv\n   source .venv/bin/activate  # On Windows, use `.venv\\Scripts\\activate`\n   ```\n3. Install the required packages using uv:\n   ```\n   uv add \"mcp[cli]\" httpx\n   ```\n\n## Configuration\n\nThe server uses a configuration file `config.py` with the following settings:\n\n- `NWS_API_BASE`: The base URL for the National Weather Service API\n- `USER_AGENT`: The User-Agent string used when making requests to the NWS API\n- `LOG_LEVEL`: The logging level (e.g., \"INFO\", \"DEBUG\")\n- `LOG_FORMAT`: The format string for log messages\n- `REQUEST_TIMEOUT`: The timeout for API requests in seconds\n\nYou can modify these settings in the `config.py` file to customize the server behavior.\n\n## Usage\n\n### Running the server standalone\n\nTo run the server standalone:\n\n1. Activate the virtual environment if not already activated:\n   ```\n   source .venv/bin/activate  # On Windows, use `.venv\\Scripts\\activate`\n   ```\n2. Run the server:\n   ```\n   python weather.py\n   ```\n\n### Using with Cline\n\nThe Weather MCP Server has been added to the Cline configuration. To use it within Cline:\n\n1. Ensure that Cline is properly set up and running.\n2. The Weather MCP Server will be available as a tool named \"weather\".\n3. You can use the following tools within Cline:\n\n   a. `get_alerts(state: str)`: Get weather alerts for a US state (use two-letter state code, e.g., \"CA\" for California)\n   b. `get_forecast(latitude: float, longitude: float)`: Get weather forecast for a specific location\n\nExample usage in Cline:\n\n```\n# Get alerts for California\nresult = await mcp.call_tool(\"weather.get_alerts\", state=\"CA\")\nprint(result)\n\n# Get forecast for San Francisco (approximate coordinates)\nresult = await mcp.call_tool(\"weather.get_forecast\", latitude=37.7749, longitude=-122.4194)\nprint(result)\n```\n\nNote: The exact syntax for calling MCP tools may vary depending on your Cline setup. Refer to Cline documentation for the most up-to-date usage instructions.\n\n## Error Handling and Logging\n\nThe server includes improved error handling for API requests and logging. If an error occurs during a request, the server will log the error and return an appropriate error message. Logs are printed to the console with the configured log level and format.\n\n## Testing\n\n### Unit Tests\n\nTo run the unit tests:\n\n```\npython -m unittest test_weather.py\n```\n\nThese tests cover the basic functionality of the `get_alerts` and `get_forecast` tools.\n\n### Manual Testing\n\nTo manually test the server, you can use the MCP client to call the provided tools. Here are some example commands:\n\n```python\n# Get alerts for California\nresult = await mcp.call_tool(\"get_alerts\", state=\"CA\")\nprint(result)\n\n# Get forecast for San Francisco (approximate coordinates)\nresult = await mcp.call_tool(\"get_forecast\", latitude=37.7749, longitude=-122.4194)\nprint(result)\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is open source and available under the [MIT License](LICENSE).\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "jackkuo666",
        "weather",
        "forecasts",
        "jackkuo666 weather",
        "weather information",
        "weather service"
      ],
      "category": "weather-and-location-data"
    },
    "Jeetinida--stocknews-mcp": {
      "owner": "Jeetinida",
      "name": "stocknews-mcp",
      "url": "https://github.com/Jeetinida/stocknews-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Jeetinida.webp",
      "description": "Provides real-time stock prices, historical stock data, stock-related news, and weather alerts and forecasts using various APIs to deliver timely financial and weather information.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-03T15:05:58Z",
      "readme_content": "# Weather & Stock MCP Server 🌦️📉\n\n[![smithery badge](https://smithery.ai/badge/@Jeetinida/stocknews-mcp)](https://smithery.ai/server/@Jeetinida/stocknews-mcp)\n\nThis project is an **MCP (Model Context Protocol) server** that provides **weather alerts, forecasts, stock prices, historical data, and news** using various APIs.\n\n## Features 🚀\n- 🐼 Fetch **real-time stock prices** using Yahoo Finance\n- 📊 Retrieve **historical stock data** (daily, weekly, monthly)\n- 📰 Get **stock-related news** from NewsAPI\n- 🌦️ Fetch **weather alerts and forecasts** using the National Weather Service API\n\n## Installation & Setup ⚙️\n\n### Installing via Smithery\nThis MCP Server uses latest StreamableHTTP to server MCP client request.\nTo install Weather & Stock Data Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Jeetinida/stocknews-mcp):\n\n```bash\nnpx -y @smithery/cli install @Jeetinida/stocknews-mcp --client claude\n```\n\n### Prerequisites\n- **Node.js** (v18 or higher)\n- **Git**\n- An API key for [NewsAPI](https://newsapi.org/)\n\n### Steps\n1. Clone the repository:\n   ```sh\n   git clone https://github.com/<your-username>/<repo-name>.git\n   cd <repo-name>\n   ```\n2. Install dependencies:\n   ```sh\n   npm install\n   ```\n3. Set up environment variables:  \n   Create a `.env` file and add:\n   ```\n   NEWS_API_KEY=your_newsapi_key\n   ```\n4. Start the server:\n   ```sh\n   npm start\n   ```\n\n## Debug\n1. Inspector\n   You can inspect your MCP server using:\n   ```\n   npx @modelcontextprotocol/inspector\n   ```\n\n## Usage 🛠️\nThe MCP server provides the following tools:\n\n### Get Stock Price\n```json\n{\n  \"tool\": \"get-stock-price\",\n  \"params\": {\n    \"symbol\": \"AAPL\"\n  }\n}\n```\n### Get Historical Stock Data\n```json\n{\n  \"tool\": \"get-historical-data\",\n  \"params\": {\n    \"symbol\": \"AAPL\",\n    \"startDate\": \"2024-01-01\",\n    \"endDate\": \"2024-03-01\",\n    \"interval\": \"1d\"\n  }\n}\n```\n### Get News\n```json\n{\n  \"tool\": \"get-news\",\n  \"params\": {\n    \"stockName\": \"Tesla\",\n    \"startDate\": \"2024-03-01\",\n    \"endDate\": \"2024-03-10\"\n  }\n}\n```\n\n## Docker\nDockerfile is attached with the project, you will have to set your NEWS_API_KEY and run the following docker command:\nDocker build:\n```\n  docker build -t weather-mcp .\n```\n\nDocker run:\n```\n  docker run -d --name {CONTAINER_NAME} --env NEWS_API_KEY={news_api_key} -p 3333:3333 weather-mcp \n```\n\n## Contributing 🤝\nFeel free to fork this repo, make changes, and submit a pull request! 🚀\n\n## License 🐟\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "stocknews",
        "jeetinida",
        "forecasts",
        "jeetinida stocknews",
        "stocknews mcp",
        "data jeetinida"
      ],
      "category": "weather-and-location-data"
    },
    "Kryzo--mcp-sncf": {
      "owner": "Kryzo",
      "name": "mcp-sncf",
      "url": "https://github.com/Kryzo/mcp-sncf",
      "imageUrl": "/freedevtools/mcp/pfp/Kryzo.webp",
      "description": "Access real-time train schedules, detailed station information, and monitor service disruptions across France. Enables intelligent journey planning for an enhanced travel experience.",
      "stars": 10,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-22T14:30:07Z",
      "readme_content": "# SNCF API MCP Server\n\nThis project provides a modular Python wrapper for the SNCF API, with an MCP server interface that integrates seamlessly with Claude Desktop for intelligent journey planning and train information retrieval across France.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Installation](#installation)\n- [Getting an API Key](#getting-an-api-key)\n- [Configuration](#configuration)\n  - [Setting Up Claude Desktop](#setting-up-claude-desktop)\n  - [Environment Variables](#environment-variables)\n- [Available MCP Tools](#available-mcp-tools)\n  - [Journey Planning](#journey-planning)\n  - [Station Information](#station-information)\n  - [Disruption Monitoring](#disruption-monitoring)\n- [Usage Examples](#usage-examples)\n- [Troubleshooting](#troubleshooting)\n- [Advanced Features](#advanced-features)\n\n## Overview\n\nThe SNCF MCP Server provides a comprehensive interface to the French National Railway's (SNCF) API services, allowing you to:\n\n- Plan train journeys between cities in France\n- Get detailed information about train stations\n- Check schedules for departures and arrivals\n- Monitor service disruptions\n- Find nearby places and transport options\n\nThe structure is organized as follows:\n\n- `sncf_api/` - The main package for SNCF API interaction\n  - `__init__.py` - Package initialization\n  - `config.py` - Configuration settings\n  - `client.py` - Base API client\n  - `api.py` - Main API interface combining all modules\n  - `search.py` - Search-related endpoints\n  - `journey.py` - Journey planning endpoints\n  - `stations.py` - Station-related endpoints\n  - `networks.py` - Network and transport mode endpoints\n  - `disruptions.py` - Disruption-related endpoints\n  - `station_finder.py` - Efficient station lookup by coordinates\n  - `csv_station_finder.py` - Station lookup using CSV database\n  - `vehicle_journey.py` - Detailed train journey information\n- `sncf_server.py` - MCP server implementation with all tool endpoints\n- `train_stations_europe.csv` - Database of European train stations with coordinates\n\n## Features\n\n- **Intelligent Journey Planning**: Plan trips between any cities in France with automatic station selection\n- **Comprehensive Station Details**: Get detailed information about stations including:\n  - Available transport types (trains, buses, trams)\n  - Nearby places and points of interest\n  - Coordinates and accessibility information\n- **Real-time Schedules**: Access up-to-date departure and arrival information\n- **Disruption Monitoring**: Stay informed about service disruptions\n- **Smart Station Finding**: Locate stations by city name, station name, or coordinates\n- **Fallback Mechanisms**: Hardcoded coordinates for major cities ensure reliability even when API searches fail\n- **Detailed Logging**: Comprehensive logging for debugging and monitoring\n\n## Installation\n\n### Prerequisites\n\n- Python 3.6+\n- pip (Python package manager)\n\n### Step 1: Clone the Repository\n\n```bash\ngit clone https://github.com/yourusername/sncf-mcp-new.git\ncd sncf-mcp-new\n```\n\n### Step 2: Install Dependencies\n\n```bash\npip install -r requirements.txt\n```\n\nIf the requirements.txt file is missing, install the following packages:\nrequests\nmcp\n\n```bash\npip install requests pandas mcp\n```\n\n## Getting an API Key\n\nBefore using this server, you need to obtain an API key from SNCF:\n\n1. Visit the [SNCF API Portal](https://www.digital.sncf.com/startup/api)\n2. Create an account or log in\n3. Subscribe to the \"Navitia\" API service\n4. Complete the registration process\n5. Once approved, you'll receive your API key in your account dashboard\n\nThe API key looks like a UUID string (e.g., `01293485-3NS3-3242-23AZ-3241324512`).\n\n## Configuration\n\n### Setting Up Claude Desktop\n\nTo integrate the SNCF MCP tools with Claude Desktop:\n\n1. **Install Claude Desktop** if you haven't already\n2. **Open Claude Desktop Configuration**:\n   - Navigate to the Claude Desktop settings\n   - Open the configuration file (usually located at `%APPDATA%\\Claude\\claude_desktop_config.json`)\n\n```json\n{\n \"sncf\": {\n  \"command\": \"py\",\n  \"args\": [\n    \"c:\\\\Users\\\\ChristianELHAJJ\\\\sncf-mcp-new\\\\sncf_server.py\",\n    \"--api-key={YOUR-API-KEY}\"\n  ],\n  \"cwd\": \"c:\\\\Users\\\\ChristianELHAJJ\\\\sncf-mcp-new\"\n},\n```\n\nReplace `path/to/sncf-mcp-new` with the actual path to your installation directory.\n\n3. **Save the Configuration File** and restart Claude Desktop\n\n## Available MCP Tools\n\nOnce configured, the following tools will be available to Claude Desktop:\n\n### Journey Planning\n\n#### `plan_journey_by_city_names`\n\nPlan a journey between two cities in France.\n\n**Parameters:**\n- `from_city`: Departure city name (e.g., \"Paris\")\n- `to_city`: Destination city name (e.g., \"Marseille\")\n- `datetime`: Optional departure or arrival time (format: YYYYMMDDTHHMMSS)\n- `datetime_represents`: \"departure\" or \"arrival\" (default: \"departure\")\n- `include_station_details`: Whether to include detailed station information\n\n**Example prompt for Claude:**\n```\nPlan a train journey from Paris to Lyon tomorrow morning at 8 AM.\n```\n\n### Station Information\n\n#### `get_station_details`\n\nGet comprehensive details about train stations in a city.\n\n**Parameters:**\n- `city_name`: Name of the city to search for stations\n- `station_name`: Optional specific station name\n- `station_id`: Optional direct station ID\n- `include_transport_types`: Whether to include transport type analysis\n- `include_nearby_places`: Whether to include nearby places information\n- `nearby_distance`: Search radius in meters for nearby places\n- `nearby_count`: Maximum number of nearby places to return\n\n**Example prompt for Claude:**\n```\nWhat transport options are available at the main train station in Grenoble?\n```\n\n#### `get_station_schedule`\n\nGet departure and arrival schedules for a station.\n\n**Parameters:**\n- `city_name`: Name of the city to search for stations\n- `station_name`: Optional specific station name\n- `station_id`: Optional direct station ID\n- `count`: Number of departures/arrivals to return\n- `datetime`: Optional datetime to start from\n- `duration`: Optional duration in seconds\n- `data_freshness`: Data freshness level (realtime or base_schedule)\n\n**Example prompt for Claude:**\n```\nShow me the next 5 train departures from Paris Gare de Lyon.\n```\n\n### Disruption Monitoring\n\n#### `check_disruptions`\n\nCheck for current disruptions in the SNCF transport network.\n\n**Parameters:**\n- `coverage`: The coverage area (default: \"sncf\")\n- `count`: Maximum number of disruptions to return\n- `station_id`: Optional filter for a specific station\n- `line_id`: Optional filter for a specific line\n- `since`: Only disruptions valid after this date\n- `until`: Only disruptions valid before this date\n- `fetch_train_details`: Whether to fetch additional details about affected trains\n\n**Example prompt for Claude:**\n```\nAre there any current disruptions affecting trains to Marseille?\n```\n\n## Usage Examples\n\n### Planning a Journey\n\nYou can ask Claude to plan a journey between any two cities in France:\n\n```\nI need to travel from Paris to Nice next Friday at 2 PM. Can you find me a train?\n```\n\nClaude will use the `plan_journey_by_city_names` tool to:\n1. Find the main stations in both cities\n2. Plan the optimal journey between them\n3. Present you with departure/arrival times, durations, and connection details\n\n### Getting Station Information\n\nTo get detailed information about a station:\n\n```\nWhat facilities and transport options are available at Gare de Lyon in Paris?\n```\n\nClaude will use the `get_station_details` tool to provide:\n1. Basic station information (name, ID, coordinates)\n2. Available transport types (trains, buses, trams)\n3. Nearby places and points of interest\n\n### Checking Train Schedules\n\nTo check upcoming departures or arrivals:\n\n```\nWhen are the next trains leaving from Bordeaux to Paris today?\n```\n\nClaude will use the `get_station_schedule` tool to show:\n1. Upcoming departures from Bordeaux\n2. Destination information\n3. Platform details when available\n4. Real-time status updates\n\n### Monitoring Disruptions\n\nTo check for service disruptions:\n\n```\nAre there any disruptions affecting the Paris to Lyon route today?\n```\n\nClaude will use the `check_disruptions` tool to:\n1. Find relevant disruptions\n2. Explain the impact on services\n3. Provide additional details about affected trains\n\n## Troubleshooting\n\n### Common Issues\n\n#### \"No API key provided\"\n- Ensure you've added your SNCF API key to the Claude Desktop configuration\n- Check that the environment variable is correctly referenced in the MCP server configuration\n\n#### \"No stations found for city\"\n- Try using a more specific city name\n- For smaller cities, try using the name of a nearby larger city\n- The system has hardcoded coordinates for major French cities which should work reliably\n\n#### \"Failed to connect to SNCF API\"\n- Check your internet connection\n- Verify that your API key is valid and not expired\n- The SNCF API may be experiencing downtime; try again later\n\n#### \"Error initializing CSV station finder\"\n- Ensure the train_stations_europe.csv file is in the correct location\n- Check file permissions to ensure the file is readable\n\n## Advanced Features\n\n### Hardcoded Coordinates\n\nThe system includes hardcoded coordinates for major French cities to ensure reliability even when the API search fails:\n\n- Paris (48.853, 2.348)\n- Marseille (43.303, 5.380)\n- Lyon (45.760, 4.860)\n- Toulouse (43.611, 1.454)\n- Nice (43.704, 7.262)\n- Nantes (47.217, -1.542)\n- Strasbourg (48.585, 7.735)\n- Bordeaux (44.826, -0.556)\n- Lille (50.638, 3.072)\n- Rennes (48.103, -1.672)\n- Grenoble (45.192, 5.716)\n\n### Transport Type Analysis\n\nThe `get_station_details` tool can analyze and categorize the types of transport available at a station:\n\n- Long-distance trains (TGV, Intercités)\n- Regional trains (TER)\n- Local transit (buses, trams, metros)\n- Other services (taxis, bike sharing)\n\n### Nearby Places Search\n\nThe station details tool can find points of interest near a station:\n\n- Other transport stops\n- Public facilities\n- Points of interest\n- Address points\n\nThis feature is particularly useful for travelers planning their onward journey from a station.\n\n---\n\n## Contributing\n\nContributions to improve the SNCF MCP Server are welcome! Please feel free to submit pull requests or open issues for bugs and feature requests.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- SNCF for providing the API\n- The Navitia team for their comprehensive public transport API\n- Claude AI for intelligent integration capabilities\n\n\ncreated by Christian delage (dr.christian.delage@gmail.com)\n",
      "npm_url": "https://www.npmjs.com/package/mcp-sncf",
      "npm_downloads": 314,
      "keywords": [
        "schedules",
        "kryzo",
        "sncf",
        "train schedules",
        "journey planning",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "KyrieTangSheng--mcp-server-nationalparks": {
      "owner": "KyrieTangSheng",
      "name": "mcp-server-nationalparks",
      "url": "https://github.com/KyrieTangSheng/mcp-server-nationalparks",
      "imageUrl": "/freedevtools/mcp/pfp/KyrieTangSheng.webp",
      "description": "Access real-time information about U.S. National Parks, including park details, alerts, and activities. Discover and filter parks based on location and interests.",
      "stars": 31,
      "forks": 9,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T05:19:54Z",
      "readme_content": "# National Parks MCP Server\n[![smithery badge](https://smithery.ai/badge/@KyrieTangSheng/mcp-server-nationalparks)](https://smithery.ai/server/@KyrieTangSheng/mcp-server-nationalparks)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/8c07fa61-fd4b-4662-8356-908408e45e44)\n\nMCP Server for the National Park Service (NPS) API, providing real-time information about U.S. National Parks, including park details, alerts, and activities.\n\n## Tools\n\n1. `findParks`\n   - Search for national parks based on various criteria\n   - Inputs:\n     - `stateCode` (optional string): Filter parks by state code (e.g., \"CA\" for California). Multiple states can be comma-separated (e.g., \"CA,OR,WA\")\n     - `q` (optional string): Search term to filter parks by name or description\n     - `limit` (optional number): Maximum number of parks to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `activities` (optional string): Filter by available activities (e.g., \"hiking,camping\")\n   - Returns: Matching parks with detailed information\n\n2. `getParkDetails`\n   - Get comprehensive information about a specific national park\n   - Inputs:\n     - `parkCode` (string): The park code of the national park (e.g., \"yose\" for Yosemite, \"grca\" for Grand Canyon)\n   - Returns: Detailed park information including descriptions, hours, fees, contacts, and activities\n\n3. `getAlerts`\n   - Get current alerts for national parks including closures, hazards, and important information\n   - Inputs:\n     - `parkCode` (optional string): Filter alerts by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")\n     - `limit` (optional number): Maximum number of alerts to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `q` (optional string): Search term to filter alerts by title or description\n   - Returns: Current alerts organized by park\n\n4. `getVisitorCenters`\n   - Get information about visitor centers and their operating hours\n   - Inputs:\n     - `parkCode` (optional string): Filter visitor centers by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")\n     - `limit` (optional number): Maximum number of visitor centers to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `q` (optional string): Search term to filter visitor centers by name or description\n   - Returns: Visitor center information including location, hours, and contact details\n\n5. `getCampgrounds`\n   - Get information about available campgrounds and their amenities\n   - Inputs:\n     - `parkCode` (optional string): Filter campgrounds by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")\n     - `limit` (optional number): Maximum number of campgrounds to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `q` (optional string): Search term to filter campgrounds by name or description\n   - Returns: Campground information including amenities, fees, and reservation details\n\n6. `getEvents`\n   - Find upcoming events at parks\n   - Inputs:\n     - `parkCode` (optional string): Filter events by park code (e.g., \"yose\" for Yosemite). Multiple parks can be comma-separated (e.g., \"yose,grca\")\n     - `limit` (optional number): Maximum number of events to return (default: 10, max: 50)\n     - `start` (optional number): Start position for results (useful for pagination)\n     - `dateStart` (optional string): Start date for filtering events (format: YYYY-MM-DD)\n     - `dateEnd` (optional string): End date for filtering events (format: YYYY-MM-DD)\n     - `q` (optional string): Search term to filter events by title or description\n   - Returns: Event information including dates, times, and descriptions\n\n## Setup\n\n### Installing via Smithery\n\nTo install mcp-server-nationalparks for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@KyrieTangSheng/mcp-server-nationalparks):\n\n```bash\nnpx -y @smithery/cli install @KyrieTangSheng/mcp-server-nationalparks --client claude\n```\n\n### NPS API Key\n1. Get a free API key from the [National Park Service Developer Portal](https://www.nps.gov/subjects/developer/get-started.htm)\n2. Store this key securely as it will be used to authenticate requests\n\n### Usage with Claude Desktop\n\nTo use this server with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"nationalparks\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-nationalparks\"],\n      \"env\": {\n        \"NPS_API_KEY\": \"YOUR_NPS_API_KEY\"\n      }\n    }\n  }\n}\n```\n## Example Usage\n\n### Finding Parks in a State\n```\nTell me about national parks in Colorado.\n```\n\n### Getting Details About a Specific Park\n```\nWhat's the entrance fee for Yellowstone National Park?\n```\n\n### Checking for Alerts or Closures\n```\nAre there any closures or alerts at Yosemite right now?\n```\n\n### Finding Visitor Centers\n```\nWhat visitor centers are available at Grand Canyon National Park?\n```\n\n### Looking for Campgrounds\n```\nAre there any campgrounds with electrical hookups in Zion National Park?\n```\n\n### Finding Upcoming Events\n```\nWhat events are happening at Acadia National Park next weekend?\n```\n\n### Planning a Trip Based on Activities\n```\nWhich national parks in Utah have good hiking trails?\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. See the LICENSE file for details.\n\n\n## Appendix: Popular National Parks and their codes\n\n| Park Name | Park Code |\n|-----------|-----------|\n| Yosemite | yose |\n| Grand Canyon | grca |\n| Yellowstone | yell |\n| Zion | zion |\n| Great Smoky Mountains | grsm |\n| Acadia | acad |\n| Olympic | olym |\n| Rocky Mountain | romo |\n| Joshua Tree | jotr |\n| Sequoia & Kings Canyon | seki |\n\nFor a complete list, visit the [NPS website](https://www.nps.gov/findapark/index.htm).\n",
      "npm_url": "https://www.npmjs.com/package/mcp-server-nationalparks",
      "npm_downloads": 27277,
      "keywords": [
        "nationalparks",
        "parks",
        "park",
        "server nationalparks",
        "nationalparks access",
        "national parks"
      ],
      "category": "weather-and-location-data"
    },
    "MissionSquad--mcp-helper-tools": {
      "owner": "MissionSquad",
      "name": "mcp-helper-tools",
      "url": "https://github.com/MissionSquad/mcp-helper-tools",
      "imageUrl": "/freedevtools/mcp/pfp/MissionSquad.webp",
      "description": "Enhances LLM agents with utilities for encoding, geolocation, network diagnostics, and security. Provides tools for automation, data handling, and QR code generation.",
      "stars": 3,
      "forks": 4,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-07-22T16:52:03Z",
      "readme_content": "# mcp-helper-tools\n\nbased on toolkit-mcp-server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.3-blue.svg)](https://www.typescriptlang.org/)\n[![Model Context Protocol](https://img.shields.io/badge/MCP-1.4.0-green.svg)](https://modelcontextprotocol.io/)\n[![Version](https://img.shields.io/badge/Version-1.0.1-blue.svg)]()\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Stable-blue.svg)]()\n[![GitHub](https://img.shields.io/github/stars/cyanheads/toolkit-mcp-server?style=social)](https://github.com/cyanheads/toolkit-mcp-server)\n\nA Model Context Protocol server providing LLM Agents with system utilities and tools, including IP geolocation, network diagnostics, system monitoring, cryptographic operations, and QR code generation.\n\n## Model Context Protocol\n\nThe Model Context Protocol (MCP) enables communication between:\n\n- **Clients**: Claude Desktop, IDEs, and other MCP-compatible clients\n- **Servers**: Tools and resources for task management and automation\n- **LLM Agents**: AI models that leverage the server's capabilities\n\n## Table of Contents\n\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Tools](#tools)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Features\n\n### Encoding Tools\n- Base64 encoding/decoding\n- URL encoding/decoding\n- HTML encoding/decoding\n\n### Network & Geolocation\n- IP geolocation with intelligent caching\n- Rate limiting (45 requests/minute)\n\n### Security Tools\n- Cryptographic hash generation (MD5, SHA-1, SHA-256, SHA-512)\n- Constant-time hash comparison\n- UUID generation\n\n### Generator Tools\n- QR code generation\n  - Terminal output\n  - SVG format\n  - Base64 encoded images\n\n## Installation\n\n```bash\n# Using npm (recommended)\nnpm install @cyanheads/toolkit-mcp-server\n\n# Or install from source\ngit clone git@github.com:cyanheads/toolkit-mcp-server.git\ncd toolkit-mcp-server\nnpm install\nnpm run build\n```\n\n## Configuration\n\nAdd to your MCP client settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"toolkit\": {\n      \"command\": \"node\",\n      \"args\": [\"node_modules/@cyanheads/toolkit-mcp-server/build/index.js\"],\n      \"env\": {\n        \"NODE_ENV\": \"production\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\n### Network Operations\n```typescript\n// Get geolocation data\nconst geo = await mcp.use('toolkit-mcp-server', 'geolocate', {\n  query: '8.8.8.8'\n});\n\n// Check connectivity\nconst conn = await mcp.use('toolkit-mcp-server', 'checkConnectivity', {\n  host: 'example.com',\n  port: 443\n});\n```\n\n### System Operations\n```typescript\n// Get system information\nconst sysInfo = await mcp.use('toolkit-mcp-server', 'getSystemInfo', {});\n\n// Get load average\nconst load = await mcp.use('toolkit-mcp-server', 'getLoadAverage', {});\n```\n\n### Security Operations\n```typescript\n// Generate hash\nconst hash = await mcp.use('toolkit-mcp-server', 'hashData', {\n  input: 'test data',\n  algorithm: 'sha256'\n});\n\n// Generate UUID\nconst uuid = await mcp.use('toolkit-mcp-server', 'generateUUID', {});\n```\n\n### Generator Operations\n```typescript\n// Generate QR code\nconst qr = await mcp.use('toolkit-mcp-server', 'generateQRCode', {\n  data: 'https://example.com',\n  type: 'svg'\n});\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nApache License 2.0. See [LICENSE](LICENSE) for more information.\n\n---\n\n<div align=\"center\">\nBuilt with the Model Context Protocol\n</div>",
      "npm_url": "https://www.npmjs.com/package/@missionsquad/mcp-helper-tools",
      "npm_downloads": 4171,
      "keywords": [
        "missionsquad",
        "tools",
        "llm",
        "missionsquad mcp",
        "data missionsquad",
        "mcp helper"
      ],
      "category": "weather-and-location-data"
    },
    "MorvanZhou--customized_mcp": {
      "owner": "MorvanZhou",
      "name": "customized_mcp",
      "url": "https://github.com/MorvanZhou/customized_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/MorvanZhou.webp",
      "description": "Leverage OpenAI's API to interact with tools and data sources in real-time. Enables dynamic querying and action performance for enhanced application capabilities.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-13T06:28:42Z",
      "readme_content": "# Customized MCP Project\n\nThis project leverages the `mcp` library with CLI support and integrates with OpenAI's API.\n\n## Requirements\n\nMake sure to install the required dependencies before running the project:\n\n```bash\npip install -r requirements.txt\n```\n\n## Usage\n\n1. Configure your OpenAI API key as an environment variable:\n   ```bash\n   export OPENAI_API_KEY=\"your-api-key\"\n   ```\n\n2. Start the MCP server:\n   ```bash\n   python server.py\n   ```\n\n3. Use the client to interact with the server:\n   ```bash\n   python client.py\n   ```\n\n4. Alternatively, use the orchestrator to query the LLM and tools:\n   ```bash\n   python main.py\n   ```\n\n## Example\n\n### Querying the Weather Tool\nRun the client and call the `get_weather` tool:\n```bash\npython client.py\n```\n\nExample interaction:\n```\nYou: List tools\nAssistant: {\n  \"tools\": [\n    {\n      \"name\": \"get_weather\",\n      \"description\": \"Get weather for a city\",\n      \"parameters\": {\n        \"city\": {\n          \"type\": \"string\",\n          \"description\": \"Name of the city\"\n        }\n      }\n    }\n  ]\n}\n\nYou: Call get_weather with {\"city\": \"Beijing\"}\nAssistant: 北京的天气是晴天\n```\n\n## Dependencies\n\n- `openai==1.70.0`\n- `mcp[cli]==1.6.0`\n\n## License\n\nThis project is licensed under the MIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openai",
        "api",
        "morvanzhou",
        "openai api",
        "leverage openai",
        "data morvanzhou"
      ],
      "category": "weather-and-location-data"
    },
    "MrCare--mcp_tool": {
      "owner": "MrCare",
      "name": "mcp_tool",
      "url": "https://github.com/MrCare/mcp_tool",
      "imageUrl": "/freedevtools/mcp/pfp/MrCare.webp",
      "description": "Check global weather with natural language queries in both Chinese and English, providing accurate forecasts for major cities worldwide. Seamlessly integrates with the Cursor editor for easy use.",
      "stars": 20,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-07T06:04:39Z",
      "readme_content": "<!--\n * @Author: Mr.Car\n * @Date: 2025-03-20 17:40:04\n-->\n<div align=\"center\">\n  <img src=\"https://images.unsplash.com/photo-1504608524841-42fe6f032b4b?crop=entropy&cs=tinysrgb&fit=max&fm=jpg&ixid=M3w3MjU5MDl8MHwxfHNlYXJjaHwxfHxiZWF1dGlmdWwlMjB3ZWF0aGVyJTIwbGFuZHNjYXBlfGVufDB8fHx8MTc0MjU0NzkxN3ww&ixlib=rb-4.0.3&q=80&w=1080\" alt=\"Weather MCP Tool\" width=\"100%\">\n  <h1>Weather MCP Tool</h1>\n  <p>A minimalist weather query tool that lets you check global weather with just one sentence, perfectly integrated with Cursor editor.</p>\n  \n  [![smithery badge](https://smithery.ai/badge/@MrCare/mcp_tool)](https://smithery.ai/server/@MrCare/mcp_tool)\n  [![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n  [![Python Version](https://img.shields.io/badge/python-3.8%2B-blue)](https://www.python.org/downloads/)\n  \n  [English](README.md) | [中文](README_zh.md)\n</div>\n\n<div align=\"center\">\n  \n  <p><i>Watch how easy it is to query weather with natural language</i></p>\n</div>\n\n## ✨ Features\n\n- 💡 **Minimalist**: One-line weather query\n- 🤖 **Smart**: Natural language support in Chinese/English\n- 🌏 **Global**: Support for all major cities\n- 🔌 **Plug & Play**: Perfect Cursor integration\n- 🚀 **High Performance**: Async processing, quick response\n- 🎨 **Beautiful**: Clear and intuitive weather display\n\n## 🚀 Quick Start\n\n### 1. Get API Key\n\n> 🔑 Before starting, please [Get OpenWeather API Key](https://home.openweathermap.org/api_keys)\n\n### 2. One-Click Installation (Recommended)\n\nInstall and configure with Smithery in one command:\n\n```bash\nnpx -y @smithery/cli@latest install @MrCare/mcp_tool --client cursor --config \"{\\\"openweathermapApiKey\\\":\\\"your_api_key_here\\\",\\\"port\\\":8000}\"\n```\n\n> For WindSurf and Cine installation, please visit our [Smithery repository](https://smithery.ai/server/@MrCare/mcp_tool).\n\n### 3. Manual Installation\n\n#### 3.1 Clone and Install\n\n```bash\ngit clone https://github.com/yourusername/weather-server.git && cd weather-server && pip install -e .\n```\n\n#### 3.2 Configure API Key\n\n**Method 1: Using Configuration File (Recommended)**\n\nCopy the example configuration file and modify it:\n```bash\ncp env.example .env\n```\nThen edit the `.env` file, replace `your_api_key_here` with your API Key.\n\n**Method 2: Using Environment Variables**\n\nmacOS/Linux:\n```bash\nexport OPENWEATHERMAP_API_KEY=\"your_api_key\"\n```\n\nWindows:\n```cmd\nset OPENWEATHERMAP_API_KEY=your_api_key\n```\n\n#### 3.3 Enable Tool\n\nEdit `~/.cursor/mcp.json` (Windows: `%USERPROFILE%\\.cursor\\mcp.json`):\n```json\n{\n    \"weather_fastmcp\": {\n        \"command\": \"python\",\n        \"args\": [\"-m\", \"weather_server.server\"]\n    }\n}\n```\n\nRestart Cursor and you're ready to go!\n\n## 📝 Usage Examples\n\nSimply type in Cursor:\n```\nShow me the weather in Tokyo\nWhat's the forecast for London?\nHow's the weather in New York?\nWill it rain tomorrow in Paris?\n```\n\nThat's it!\n\n## ⚙️ Parameters\n\nFor more precise queries, you can specify these parameters:\n\n| Parameter | Description | Default |\n|-----------|-------------|---------|\n| city | City name (Chinese/English) | Required |\n| days | Forecast days (1-5) | 5 |\n| units | Temperature unit (metric: Celsius, imperial: Fahrenheit) | metric |\n| lang | Response language (zh_cn: Chinese, en: English) | zh_cn |\n\n## ❓ FAQ\n\n1. **Not Working?**\n   - Ensure API Key is set correctly\n   - Restart Cursor\n   - Check Python environment\n\n2. **City Not Found?**\n   - Try using English name\n   - Check spelling\n   - Use complete city name\n\n## 👨‍💻 Author\n\n- Mr.Car\n- Email: 534192336car@gmail.com\n\n## 🙏 Acknowledgments\n\n- [FastMCP](https://github.com/microsoft/fastmcp)\n- [OpenWeatherMap](https://openweathermap.org/)\n- [Cursor](https://cursor.sh/)\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_tool",
        "mrcare",
        "weather",
        "mrcare mcp_tool",
        "data mrcare",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "Panth1823--formula1-mcp": {
      "owner": "Panth1823",
      "name": "formula1-mcp",
      "url": "https://github.com/Panth1823/formula1-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Panth1823.webp",
      "description": "Provides real-time and historical Formula 1 racing data, including telemetry, session statuses, standings, race results, weather updates, and circuit information via a standardized protocol.",
      "stars": 12,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T12:27:45Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/panth1823-formula1-mcp-badge.png)](https://mseep.ai/app/panth1823-formula1-mcp)\n\n[![smithery badge](https://smithery.ai/badge/@Panth1823/formula1-mcp)](https://smithery.ai/server/@Panth1823/formula1-mcp)\n\n# The Formula1 MCP Server ! 🏎️💨\n\nA TypeScript-based Formula 1 MCP server, bringing the thrill of real-time and historical F1 racing data straight to your fingertips via the Model Context Protocol. Faster than Verstappen on a hot lap! (Okay, maybe not _that_ fast, but it's trying!)\n\n### Resources\n\n- Access F1 session data via standardized URIs\n- Real-time telemetry data\n- Historical race information\n- Driver and constructor standings\n- Weather data\n- Circuit information\n\n## Getting Started\n\n### Quick Install via Smithery\n\nTo install the Formula 1 MCP Server automatically via Smithery:\n\n```bash\nnpx -y @smithery/cli install @Panth1823/formula1-mcp --client claude\n```\n\n### Manual Installation\n\n1. Clone the repo:\n```bash\ngit clone https://github.com/Panth1823/formula1-mcp\ncd formula1-mcp\n```\n\n2. Install:\n```bash\nnpm install\n```\n\n3. Build:\n```bash\nnpm run build\n```\n\n## Setup\n\nAdd to your MCP client config:\n\n```json\n{\n  \"mcpServers\": {\n    \"formula1\": {\n      \"command\": \"node\",\n      \"args\": [\"<path-to-your-cloned-repo>/build/index.js\"],\n      \"cwd\": \"<path-to-your-cloned-repo>\",\n      \"enabled\": true\n    }\n  }\n}\n```\n\nConfig locations:\n- Windows: `%APPDATA%\\.cursor\\mcp.json`\n- MacOS: `~/.cursor/mcp.json`\n- Linux: `~/.config/.cursor/mcp.json`\n\n## Available Tools\n\n### 1. `getLiveTimingData`\n\nGet real-time timing data for the current session.\n\n**Parameters:**\n- None required\n\n### 2. `getCurrentSessionStatus`\n\nGet status information about the current session.\n\n**Parameters:**\n- None required\n\n### 3. `getDriverInfo`\n\nGet information about a specific driver.\n\n**Parameters:**\n- `driverId` (string): Driver identifier (e.g., \"max_verstappen\", \"lewis_hamilton\")\n\n### 4. `getHistoricalSessions`\n\nFind session keys for historical events.\n\n**Parameters:**\n- `year` (number, optional): Season year (e.g., 2023)\n- `circuit_short_name` (string, optional): Circuit name (e.g., \"monza\", \"spa\")\n- `country_name` (string, optional): Country name (e.g., \"Italy\", \"Belgium\")\n- `session_name` (string, optional): Session type (e.g., \"Race\", \"Qualifying\")\n\n### 5. `getHistoricRaceResults`\n\nGet race results for a specific historical race.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n- `round` (number): Race number (e.g., 1, 2, 3)\n\n### 6. `getDriverStandings`\n\nGet driver championship standings.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n\n### 7. `getConstructorStandings`\n\nGet constructor championship standings.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n\n### 8. `getLapTimes`\n\nGet lap times for a specific driver.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n- `round` (number): Race number (e.g., 1, 2, 3)\n- `driverId` (string): Driver identifier (e.g., \"max_verstappen\", \"lewis_hamilton\")\n\n### 9. `getWeatherData`\n\nGet weather data for a session.\n\n**Parameters:**\n- `sessionKey` (string, optional): Session identifier\n\n### 10. `getCarData`\n\nGet detailed car telemetry data.\n\n**Parameters:**\n- `driverNumber` (string): Driver's car number (e.g., \"44\", \"33\")\n- `sessionKey` (string, optional): Session identifier\n- `filters` (string, optional): Data filters\n\n### 11. `getPitStopData`\n\nGet pit stop information.\n\n**Parameters:**\n- `driverNumber` (string, optional): Driver's car number\n- `sessionKey` (string, optional): Session identifier\n\n### 12. `getTeamRadio`\n\nGet team radio communications.\n\n**Parameters:**\n- `driverNumber` (string, optional): Driver's car number\n- `sessionKey` (string, optional): Session identifier\n\n### 13. `getRaceControlMessages`\n\nGet race control messages.\n\n**Parameters:**\n- `sessionKey` (string, optional): Session identifier\n\n### 14. `getRaceCalendar`\n\nGet the F1 race calendar.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n\n### 15. `getCircuitInfo`\n\nGet detailed circuit information.\n\n**Parameters:**\n- `circuitId` (string): Circuit identifier (e.g., \"monza\", \"spa\")\n\n### 16. `getSeasonList`\n\nGet a list of available F1 seasons.\n\n**Parameters:**\n- `limit` (number, optional): Number of seasons to return\n\n### 17. `getQualifyingResults`\n\nGet qualifying session results.\n\n**Parameters:**\n- `year` (number): Season year (e.g., 2023)\n- `round` (number): Race number (e.g., 1, 2, 3)\n\n### 18. `getDriverInformation`\n\nGet detailed driver information from Ergast API.\n\n**Parameters:**\n- `driverId` (string): Driver identifier (e.g., \"max_verstappen\", \"lewis_hamilton\")\n\n### 19. `getConstructorInformation`\n\nGet detailed constructor information from Ergast API.\n\n**Parameters:**\n- `constructorId` (string): Constructor identifier (e.g., \"red_bull\", \"mercedes\")\n\n### 20. `clearCache`\n\nClear the local cache for F1 data.\n\n**Parameters:**\n- None required\n\n### Data Sources\n\n- Live data: F1 Live Timing API (OpenF1)\n- Historical: Ergast API (FastF1)\n\n## Examples\n\n- \"Show 2023 Monaco GP results\"\n- \"Get current standings\"\n- \"Weather at Silverstone\"\n- \"Hamilton's lap times\"\n- \"Show 2024 calendar\"\n- \"Verstappen's info\"\n- \"Japanese GP qualifying\"\n\n## Debug\n\nUse [MCP Inspector](https://github.com/modelcontextprotocol/inspector) for debugging.\n\n## Help\n\n- Bugs? [Report here](https://github.com/Panth1823/formula1-mcp/issues)\n- Questions? Open an issue\n- Want to help? Submit a PR\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "formula1",
        "mcp",
        "data",
        "formula1 mcp",
        "racing data",
        "panth1823 formula1"
      ],
      "category": "weather-and-location-data"
    },
    "RyanCardin15--NOAA-TidesAndCurrents-MCP": {
      "owner": "RyanCardin15",
      "name": "NOAA-TidesAndCurrents-MCP",
      "url": "https://github.com/RyanCardin15/NOAA-TidesAndCurrents-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/RyanCardin15.webp",
      "description": "Access real-time and historical data for water levels, tides, and currents, as well as meteorological and moon phase information from NOAA's Tides and Currents API.",
      "stars": 4,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-26T10:21:26Z",
      "readme_content": "# 🌊 NOAA Tides & Currents MCP Server\n\n<div align=\"center\">\n\n[![npm version](https://img.shields.io/npm/v/@ryancardin/noaa-tides-currents-mcp-server?style=for-the-badge&logo=npm&color=blue)](https://www.npmjs.com/package/@ryancardin/noaa-tides-currents-mcp-server)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg?style=for-the-badge)](https://opensource.org/licenses/MIT)\n[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?style=for-the-badge&logo=typescript&logoColor=white)](https://www.typescriptlang.org/)\n[![MCP](https://img.shields.io/badge/MCP-Model_Context_Protocol-green?style=for-the-badge)](https://modelcontextprotocol.io/)\n\n[![smithery badge](https://smithery.ai/badge/@RyanCardin15/noaa-tidesandcurrents-mcp)](https://smithery.ai/server/@RyanCardin15/noaa-tidesandcurrents-mcp)\n\n**🚀 Lightning-fast access to NOAA's oceanic and atmospheric data through MCP**\n\n*Your one-stop solution for tides, currents, weather, astronomy, and climate data*\n\n[📦 Quick Start](#-quick-start) • [🛠️ Tools](#️-available-tools) • [📖 Examples](#-usage-examples) • [🏗️ Advanced](#️-advanced-usage)\n\n</div>\n\n---\n\n## ✨ What Makes This Awesome\n\n🌊 **25+ Specialized Tools** - From basic tide data to advanced climate projections  \n⚡ **Lightning Fast** - Built on FastMCP for optimal performance  \n🎯 **Zero Config** - Works out of the box with Claude Desktop  \n🌍 **Comprehensive Data** - Water levels, currents, weather, moon phases, sun data  \n📊 **Climate Research Ready** - Sea level trends, flooding projections, extreme events  \n🚀 **NPX Ready** - Install and run with a single command  \n\n---\n\n## 🚀 Quick Start\n\n### ⚡ NPX Installation (Recommended)\n\n```bash\n# Install and run immediately - no setup required!\nnpx @ryancardin/noaa-tides-currents-mcp-server\n\n# Or use the shorter alias\nnpx noaa-mcp\n```\n\n#### 🔌 Transport Modes\n\n**STDIO Mode (Default - MCP Protocol)**\n```bash\n# Standard MCP server for Claude Desktop integration\nnpx @ryancardin/noaa-tides-currents-mcp-server\n\n# Or use the shorter alias\nnpx noaa-mcp\n```\n\n**HTTP Streamable Mode (Web Integration)**\n```bash\n# Start HTTP server on default port 3000\nnpx @ryancardin/noaa-tides-currents-mcp-server --http\n\n# Specify custom port\nnpx @ryancardin/noaa-tides-currents-mcp-server --http --port 8080\n\n# Using shorter alias\nnpx noaa-mcp --http --port 8080\n\n# Access via Server-Sent Events\ncurl http://localhost:3000/sse\n```\n\n### 🎯 Claude Desktop Integration\n\nInstall directly to Claude Desktop via [Smithery](https://smithery.ai/server/@RyanCardin15/tidesandcurrents):\n\n```bash\nnpx -y @smithery/cli install @RyanCardin15/tidesandcurrents --client claude\n```\n\n### 🔧 Manual Development Setup\n\n```bash\n# Clone and build\ngit clone https://github.com/RyanCardin15/NOAA-Tides-And-Currents-MCP.git\ncd NOAA-Tides-And-Currents-MCP\nnpm install && npm run build\n\n# Start the server\nnpm start\n\n# Test with FastMCP\nnpx fastmcp dev dist/index.js\n```\n\n---\n\n## 🛠️ Available Tools\n\n<details>\n<summary><strong>🌊 Water Data Tools (6 tools)</strong></summary>\n\n### Water Levels & Tides\n- **`get_water_levels`** - Real-time and historical water level data\n- **`get_tide_predictions`** - High/low tide predictions and continuous data\n- **`get_currents`** - Real-time and historical current measurements  \n- **`get_current_predictions`** - Current speed and direction forecasts\n- **`get_meteorological_data`** - Wind, air temp, water temp, pressure, etc.\n\n### Station Information\n- **`get_stations`** - Search and list monitoring stations\n- **`get_station_details`** - Detailed station metadata and capabilities\n\n</details>\n\n<details>\n<summary><strong>🔬 Climate & Research Tools (9 tools)</strong></summary>\n\n### Sea Level Analysis\n- **`get_sea_level_trends`** - Long-term sea level rise trends and rates\n- **`get_extreme_water_levels`** - Statistical analysis of extreme events\n\n### High Tide Flooding Analysis\n- **`get_high_tide_flooding_daily`** - Daily flood event counts\n- **`get_high_tide_flooding_monthly`** - Monthly flooding patterns\n- **`get_high_tide_flooding_seasonal`** - Seasonal flood analysis\n- **`get_high_tide_flooding_annual`** - Yearly flooding trends\n- **`get_high_tide_flooding_projections`** - Future flood risk scenarios\n- **`get_high_tide_flooding_likelihoods`** - Daily flood probability\n\n### Historical Extremes\n- **`get_top_ten_water_levels`** - Highest/lowest water levels on record\n\n</details>\n\n<details>\n<summary><strong>🌙 Astronomy Tools (7 tools)</strong></summary>\n\n### Moon Phase Calculations\n- **`get_moon_phase`** - Current moon phase and illumination\n- **`get_moon_phases_range`** - Moon phases over date ranges\n- **`get_next_moon_phase`** - Find next new/full/quarter moons\n\n### Solar Calculations  \n- **`get_sun_times`** - Sunrise, sunset, dawn, dusk times\n- **`get_sun_times_range`** - Solar times over date ranges\n- **`get_sun_position`** - Real-time sun azimuth and elevation\n- **`get_next_sun_event`** - Next sunrise, sunset, or solar noon\n\n</details>\n\n<details>\n<summary><strong>⚙️ Configuration Tools (1 tool)</strong></summary>\n\n### API Parameters\n- **`get_parameter_definitions`** - Valid values for all API parameters\n\n</details>\n\n---\n\n## 📖 Usage Examples\n\n### 🌊 Get Current Tide Conditions\n\n```bash\n# Get latest water levels for Boston Harbor\nget_water_levels station=\"8443970\" date=\"latest\"\n\n# Get today's tide predictions for Miami\nget_tide_predictions station=\"8723214\" begin_date=\"today\" end_date=\"today\" interval=\"hilo\"\n```\n\n### 🌀 Hurricane Preparedness \n\n```bash\n# Get extreme water level statistics for storm planning\nget_extreme_water_levels station=\"8518750\" units=\"english\"\n\n# Check flooding likelihood for tomorrow\nget_high_tide_flooding_likelihoods station=\"8518750\" date=\"2024-12-16\" threshold=\"minor\"\n```\n\n### 🔬 Climate Research\n\n```bash\n# Analyze 30-year sea level trends\nget_sea_level_trends station=\"8518750\" affiliation=\"US\"\n\n# Get high tide flooding projections for 2050s under intermediate sea level rise\nget_high_tide_flooding_projections station=\"8518750\" scenario=\"intermediate\" decade=\"2050s\"\n```\n\n### 🌙 Astronomy & Navigation\n\n```bash\n# Get tonight's moon phase for navigation\nget_moon_phase date=\"2024-12-15\" latitude=\"42.3601\" longitude=\"-71.0589\"\n\n# Calculate sunrise/sunset for sailing\nget_sun_times date=\"2024-12-15\" latitude=\"25.7617\" longitude=\"-80.1918\" timezone=\"America/New_York\"\n```\n\n### 🎣 Fishing & Recreation\n\n```bash\n# Best fishing times with current predictions\nget_current_predictions station=\"ACT0446\" date=\"today\" interval=\"MAX_SLACK\"\n\n# Wind and weather conditions\nget_meteorological_data station=\"8443970\" product=\"wind\" date=\"today\"\n```\n\n---\n\n## 🏗️ Advanced Usage\n\n### 🔧 Development & Testing\n\n```bash\n# Run in development mode (stdio)\nnpm run dev\n\n# Development with HTTP transport\nnpm run dev:http\n\n# Production builds with different transports\nnpm start                    # STDIO mode (default)\nnpm run start:http          # HTTP on port 3000\nnpm run start:http:3001     # HTTP on port 3001\nnpm run start:http:8080     # HTTP on port 8080\n\n# Inspect server capabilities\nnpx fastmcp inspect dist/index.js\n```\n\n### 🌐 HTTP Stream Integration\n\nWhen running in HTTP mode, the server provides Server-Sent Events (SSE) at `/sse`:\n\n```bash\n# Start HTTP server\nnpx @ryancardin/noaa-tides-currents-mcp-server --http --port 3000\n\n# Test the endpoint\ncurl -N http://localhost:3000/sse\n\n# Or integrate with web applications\nfetch('http://localhost:3000/sse')\n  .then(response => response.body.getReader())\n  .then(reader => {\n    // Handle streaming MCP responses\n  });\n```\n\n**Use Cases for HTTP Mode:**\n- 🌐 **Web Applications** - Integrate with React, Vue, Angular apps\n- 📱 **Mobile Apps** - REST-like access from mobile applications  \n- 🔗 **API Gateways** - Proxy through load balancers or API gateways\n- 🧪 **Testing** - Easy curl-based testing and debugging\n\n### 📊 Data Formats & Export\n\nAll tools support multiple output formats:\n- **JSON** (default) - Perfect for programmatic use\n- **XML** - Legacy system integration  \n- **CSV** - Direct spreadsheet import\n\n### 🌍 Global Station Coverage\n\n- **13,000+ stations** worldwide\n- **Real-time data** from NOAA's CO-OPS network\n- **Historical records** dating back decades\n- **Global tide predictions** and current forecasts\n\n---\n\n## 🚦 API Endpoints\n\nThis server integrates with three NOAA APIs:\n\n| API | Purpose | Base URL |\n|-----|---------|----------|\n| **Data API** | Real-time observations & predictions | `api.tidesandcurrents.noaa.gov/api/prod/` |\n| **Metadata API** | Station information & capabilities | `api.tidesandcurrents.noaa.gov/mdapi/prod/` |\n| **Derived Products API** | Climate analysis & research data | `api.tidesandcurrents.noaa.gov/dpapi/prod/` |\n\n---\n\n## 🛠️ Technical Details\n\n### Architecture\n- **🚀 FastMCP Framework** - High-performance MCP server\n- **📝 TypeScript** - Full type safety and IntelliSense\n- **🔧 Zod Validation** - Runtime parameter validation\n- **⚡ Axios HTTP Client** - Reliable API communication\n- **🌙 SunCalc Integration** - Precise astronomical calculations\n\n### Transport Options\n- **📡 STDIO Transport** - Standard MCP protocol for desktop clients\n- **🌐 HTTP Stream Transport** - Server-Sent Events for web integration\n- **🔄 Dual Mode Support** - Switch between transports via command-line flags\n\n### System Requirements\n- **Node.js** 18+ \n- **NPM** 8+\n- **MCP Client** (Claude Desktop, etc.)\n\n### Package Size\n- **📦 Bundled**: 43.9 KB\n- **📂 Installed**: 286.2 KB\n- **⚡ Load Time**: <100ms\n\n---\n\n## 🐛 Troubleshooting\n\n<details>\n<summary><strong>Common Issues & Solutions</strong></summary>\n\n### Server Won't Start\n```bash\n# Check Node.js version\nnode --version  # Should be 18+\n\n# Rebuild TypeScript\nnpm run build\n```\n\n### API Errors\n- **Invalid Station ID**: Use `get_stations` to find valid stations\n- **Date Format Issues**: Use YYYYMMDD or MM/DD/YYYY formats\n- **Rate Limiting**: NOAA APIs have usage limits - space out requests\n\n### MCP Connection Issues\n- Ensure Claude Desktop MCP settings are configured correctly\n- Check that the server binary has execute permissions: `chmod +x dist/index.js`\n\n</details>\n\n---\n\n## 📈 Roadmap\n\n- [ ] 🌊 **Real-time Alerts** - Webhook support for tide/weather alerts\n- [ ] 📱 **Mobile SDK** - React Native integration\n- [ ] 🗺️ **GIS Integration** - Shapefile and KML export\n- [ ] 🤖 **AI Insights** - Automated pattern recognition\n- [ ] ⚡ **GraphQL API** - Modern query interface\n- [ ] 🌐 **Multi-language** - I18n support\n\n---\n\n## 🤝 Contributing\n\nWe love contributions! Here's how to get started:\n\n1. **🍴 Fork** the repository\n2. **🌿 Branch** for your feature (`git checkout -b amazing-feature`)\n3. **💻 Code** your improvements\n4. **✅ Test** with `npm test`\n5. **📤 Submit** a pull request\n\n### Development Commands\n```bash\nnpm run build    # Build TypeScript\nnpm run dev      # Development mode  \nnpm run test     # Run test suite\nnpm run format   # Format with Prettier\n```\n\n---\n\n## 📄 License\n\n**MIT License** - see [LICENSE](LICENSE) file for details.\n\nBuilt with ❤️ by [Ryan Cardin](https://github.com/RyanCardin15)\n\n---\n\n## 🔗 Links & Resources\n\n- **📦 NPM Package**: [@ryancardin/noaa-tides-currents-mcp-server](https://www.npmjs.com/package/@ryancardin/noaa-tides-currents-mcp-server)\n- **🏪 Smithery**: [Auto-install for Claude Desktop](https://smithery.ai/server/@RyanCardin15/noaa-tidesandcurrents-mcp)  \n- **🌊 NOAA CO-OPS**: [Official NOAA Data Portal](https://tidesandcurrents.noaa.gov/)\n- **🤖 MCP Protocol**: [Model Context Protocol Docs](https://modelcontextprotocol.io/)\n- **⚡ FastMCP**: [FastMCP Framework](https://github.com/jlowin/fastmcp)\n\n<div align=\"center\">\n\n**⭐ Star this repo if it helped you!**\n\nMade possible by NOAA's commitment to open oceanic data 🌊\n\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tidesandcurrents",
        "tides",
        "noaa",
        "noaa tidesandcurrents",
        "noaa tides",
        "tidesandcurrents mcp"
      ],
      "category": "weather-and-location-data"
    },
    "SaintDoresh--Weather-MCP-ClaudeDesktop": {
      "owner": "SaintDoresh",
      "name": "Weather-MCP-ClaudeDesktop",
      "url": "https://github.com/SaintDoresh/Weather-MCP-ClaudeDesktop",
      "imageUrl": "/freedevtools/mcp/pfp/SaintDoresh.webp",
      "description": "Provides real-time weather data, forecasts, and historical weather information using the OpenWeatherMap API. It includes features for air quality information and weather alerts.",
      "stars": 8,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-01T15:36:44Z",
      "readme_content": "# Weather MCP Tool for Claude Desktop\n\nAn MCP (Model Context Protocol) tool that provides real-time weather data, forecasts, and historical weather information using the OpenWeatherMap API, specifically designed for Claude Desktop.\n\n## Tutorial\n\nFor a detailed guide on setting up and using this tool, check out our comprehensive Medium tutorial:\n[Tutorial: Using Claude Desktop with Weather MCP Tool to Access Real-Time Weather Data Worldwide](https://medium.com/@saintdoresh/tutorial-using-claude-desktop-with-weather-mcp-tool-to-access-real-time-weather-data-worldwide-a0b811fc5cdf)\n\n## Features\n\n- Real-time weather conditions for any location\n- Weather forecasts (up to 5 days)\n- Historical weather data (last 5 days)\n- Air quality information\n- Weather alerts and warnings\n- Location search functionality\n\n## Setup\n\n1. Ensure you have Python 3.10 or higher installed\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Get an API key from [OpenWeatherMap](https://openweathermap.org/api) (free tier available)\n   - Note: New API keys may take up to 24 hours to activate\n\n4. Set up environment variables for API key (recommended method):\n   - Create a `.env` file in the project directory\n   - Add your API key to the file:\n   ```\n   OPENWEATHER_API_KEY=your_openweathermap_api_key\n   ```\n   - Add `.env` to your `.gitignore` file to prevent committing sensitive data\n\n5. Update `main.py` to use the environment variable:\n   ```python\n   # Add these imports at the top\n   import os\n   from dotenv import load_dotenv\n   \n   # Load environment variables\n   load_dotenv()\n   \n   # Replace the API_KEY line with\n   API_KEY = os.getenv(\"OPENWEATHER_API_KEY\")\n   ```\n\n## Integration with Claude Desktop\n\n1. Configure your MCP settings in Claude Desktop by adding the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather-mcp\": {\n      \"command\": \"py\",\n      \"args\": [\"-3.13\", \"C:\\\\Path\\\\To\\\\Your\\\\Weather-MCP-ClaudeDesktop\\\\main.py\"]\n    }\n  }\n}\n```\n\n2. Replace the path with the full path to your main.py file\n3. Run the server using:\n```bash\npy -3.13 main.py\n```\n4. Keep the server running while using Claude Desktop\n\n## Available Tools\n\n### 1. get_current_weather\nGet real-time weather conditions for a location:\n```json\n{\n    \"location\": {\n        \"name\": \"New York\",\n        \"country\": \"US\",\n        \"lat\": 40.7128,\n        \"lon\": -74.006\n    },\n    \"temperature\": {\n        \"current\": 25.6,\n        \"feels_like\": 26.2,\n        \"min\": 23.4,\n        \"max\": 27.8\n    },\n    \"weather_condition\": {\n        \"main\": \"Clear\",\n        \"description\": \"clear sky\",\n        \"icon\": \"01d\"\n    },\n    \"wind\": {\n        \"speed\": 3.6,\n        \"deg\": 220\n    },\n    \"clouds\": 5,\n    \"humidity\": 65,\n    \"pressure\": 1015,\n    \"visibility\": 10000,\n    \"sunrise\": \"2025-03-16T06:12:34\",\n    \"sunset\": \"2025-03-16T18:04:23\",\n    \"timestamp\": \"2025-03-16T14:30:00\"\n}\n```\n\n### 2. get_weather_forecast\nGet weather forecast for a location:\n```json\n{\n    \"location\": {\n        \"name\": \"London\",\n        \"country\": \"GB\",\n        \"lat\": 51.5074,\n        \"lon\": -0.1278\n    },\n    \"forecast\": [\n        {\n            \"datetime\": \"2025-03-16T15:00:00\",\n            \"temperature\": {\n                \"temp\": 18.2,\n                \"feels_like\": 17.8,\n                \"min\": 17.5,\n                \"max\": 19.1\n            },\n            \"weather_condition\": {\n                \"main\": \"Rain\",\n                \"description\": \"light rain\",\n                \"icon\": \"10d\"\n            },\n            \"wind\": {\n                \"speed\": 4.2,\n                \"deg\": 180\n            },\n            \"clouds\": 75,\n            \"humidity\": 82,\n            \"pressure\": 1010,\n            \"visibility\": 8000,\n            \"pop\": 0.4\n        }\n        // ... more forecast items\n    ],\n    \"days\": 5\n}\n```\n\n### 3. get_air_quality\nGet air quality data for a location:\n```json\n{\n    \"location\": {\n        \"name\": \"Beijing\",\n        \"country\": \"CN\",\n        \"lat\": 39.9042,\n        \"lon\": 116.4074\n    },\n    \"air_quality_index\": 3,\n    \"air_quality_level\": \"Moderate\",\n    \"components\": {\n        \"co\": 250.34,\n        \"no\": 0.5,\n        \"no2\": 15.2,\n        \"o3\": 140.8,\n        \"so2\": 5.1,\n        \"pm2_5\": 8.2,\n        \"pm10\": 12.3,\n        \"nh3\": 0.7\n    },\n    \"timestamp\": \"2025-03-16T14:30:00\"\n}\n```\n\n### 4. get_historical_weather\nGet historical weather data for a specific date:\n```json\n{\n    \"location\": {\n        \"name\": \"Paris\",\n        \"country\": \"FR\",\n        \"lat\": 48.8566,\n        \"lon\": 2.3522\n    },\n    \"date\": \"2025-03-14\",\n    \"temperature\": {\n        \"temp\": 20.3,\n        \"feels_like\": 19.8\n    },\n    \"weather_condition\": {\n        \"main\": \"Clouds\",\n        \"description\": \"scattered clouds\",\n        \"icon\": \"03d\"\n    },\n    \"wind\": {\n        \"speed\": 2.8,\n        \"deg\": 150\n    },\n    \"clouds\": 45,\n    \"humidity\": 60,\n    \"pressure\": 1012,\n    \"visibility\": 10000,\n    \"sunrise\": \"2025-03-14T06:30:45\",\n    \"sunset\": \"2025-03-14T18:15:22\",\n    \"timestamp\": \"2025-03-14T12:00:00\"\n}\n```\n\n### 5. search_location\nSearch for locations by name:\n```json\n{\n    \"results\": [\n        {\n            \"name\": \"Tokyo\",\n            \"state\": \"\",\n            \"country\": \"JP\",\n            \"lat\": 35.6762,\n            \"lon\": 139.6503\n        },\n        {\n            \"name\": \"Tokyo\",\n            \"state\": \"Tokyo\",\n            \"country\": \"JP\",\n            \"lat\": 35.6895,\n            \"lon\": 139.6917\n        }\n        // ... more results\n    ]\n}\n```\n\n### 6. get_weather_alerts\nGet weather alerts for a location:\n```json\n{\n    \"location\": {\n        \"name\": \"Miami\",\n        \"country\": \"US\",\n        \"lat\": 25.7617,\n        \"lon\": -80.1918\n    },\n    \"alerts\": [\n        {\n            \"sender\": \"NWS Miami\",\n            \"event\": \"Heat Advisory\",\n            \"start\": \"2025-03-16T12:00:00\",\n            \"end\": \"2025-03-16T20:00:00\",\n            \"description\": \"Heat index values between 105 and 110 expected\",\n            \"tags\": [\"Extreme temperature value\"]\n        }\n        // ... more alerts if any\n    ],\n    \"alert_count\": 1\n}\n```\n\n## Sample Queries\n\nYou can ask Claude Desktop questions like:\n- \"What's the current weather in New York?\"\n- \"Show me the 5-day forecast for London\"\n- \"What's the air quality like in Beijing today?\"\n- \"How was the weather in Paris on March 14th?\"\n- \"Search for locations named 'Tokyo'\"\n- \"Are there any weather alerts for Miami?\"\n- \"Compare the current weather in Chicago, Miami, and Seattle\"\n- \"Show me a comparison of air quality in Beijing, Los Angeles, and Delhi\"\n\n## Error Handling\n\nAll tools include proper error handling and will return an error message if something goes wrong:\n```json\n{\n    \"error\": \"Failed to fetch current weather for InvalidLocation: Location not found\"\n}\n```\n\n## Troubleshooting\n\nIf the MCP server is not working in Claude Desktop:\n1. Make sure the server is running - you should see output when you start the script\n2. Verify the path in your settings is correct and absolute\n3. Make sure Python 3.10+ is in your system PATH\n4. Check that all dependencies are installed\n5. Try restarting Claude Desktop\n6. Check logs for any error messages\n\n### Common API Issues\n- **API Key Activation**: New OpenWeatherMap API keys may take up to 24 hours to activate\n- **Invalid API Key Error**: If you get a 401 error, verify your API key is correct and active\n- **Rate Limiting**: Free tier allows up to 60 calls per minute, which might be exceeded during heavy usage\n\n## Rate Limits\n\nThis tool uses the OpenWeatherMap API which has rate limits. The free tier allows up to 60 calls per minute, which should be sufficient for personal use. Please be aware that very frequent requests may be throttled by the API.\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openweathermap",
        "saintdoresh",
        "weather",
        "saintdoresh weather",
        "weather information",
        "using openweathermap"
      ],
      "category": "weather-and-location-data"
    },
    "Shengwenhao-manbo--weather": {
      "owner": "Shengwenhao-manbo",
      "name": "weather",
      "url": "https://github.com/Shengwenhao-manbo/weather",
      "imageUrl": "/freedevtools/mcp/pfp/Shengwenhao-manbo.webp",
      "description": "Provide weather information through an MCP server interface, enabling queries for weather data within LLM applications. Supports integration of real-time weather context to enhance responses and decision-making.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-22T01:41:36Z",
      "readme_content": "# weather\n",
      "npm_url": "https://www.npmjs.com/package/weather",
      "npm_downloads": 5901,
      "keywords": [
        "weather",
        "manbo",
        "data",
        "weather data",
        "weather information",
        "queries weather"
      ],
      "category": "weather-and-location-data"
    },
    "StarGazer1995--mcp-stargazing": {
      "owner": "StarGazer1995",
      "name": "mcp-stargazing",
      "url": "https://github.com/StarGazer1995/mcp-stargazing",
      "imageUrl": "/freedevtools/mcp/pfp/StarGazer1995.webp",
      "description": "Calculate altitude, rise, and set times of celestial objects based on geographic location, while also analyzing light pollution to improve stargazing conditions. Supports a variety of celestial objects including the Sun, Moon, planets, and deep-space entities.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-18T09:45:10Z",
      "readme_content": "# mcp-stargazing\n\nCalculate the altitude, rise, and set times of celestial objects (Sun, Moon, planets, stars, and deep-space objects) for any location on Earth, with optional light pollution analysis.\n\n## Features\n- **Altitude/Azimuth Calculation**: Get elevation and compass direction for any celestial object.\n- **Rise/Set Times**: Determine when objects appear/disappear above the horizon.\n- **Light Pollution Analysis**: Load and analyze light pollution maps (GeoTIFF format).\n- **Supports**:\n  - Solar system objects (Sun, Moon, planets)\n  - Stars (e.g., \"sirius\")\n  - Deep-space objects (e.g., \"andromeda\", \"orion_nebula\")\n- **Time Zone Aware**: Works with local or UTC times.\n\n## Installation\n```bash\npip install astropy pytz numpy astroquery rasterio geopy\n```\n\n## Usage\n\n### Calculate Altitude/Azimuth\n```python src/main.py\nfrom src.celestial import celestial_pos\nfrom astropy.coordinates import EarthLocation\nimport pytz\nfrom datetime import datetime\n\n# Observer location (New York)\nlocation = EarthLocation(lat=40.7128, lon=-74.0060)\n\n# Time (local timezone-aware)\nlocal_time = pytz.timezone(\"America/New_York\").localize(datetime(2023, 10, 1, 12, 0))\naltitude, azimuth = celestial_pos(\"sun\", location, local_time)\nprint(f\"Sun Position: Altitude={altitude:.1f}°, Azimuth={azimuth:.1f}°\")\n```\n\n### Calculate Rise/Set Times\n```python src/main.py\nfrom src.celestial import celestial_rise_set\n\nrise, set_ = celestial_rise_set(\"andromeda\", location, local_time.date())\nprint(f\"Andromeda: Rise={rise.iso}, Set={set_.iso}\")\n```\n\n### Load Light Pollution Map\n```python src/light_pollution.py\nfrom src.light_pollution import load_map\n\n# Load a GeoTIFF light pollution map\nvriis_data, bounds, crs, transform = load_map(\"path/to/map.tif\")\nprint(f\"Map Bounds: {bounds}\")\n```\n\n## API Reference\n\n### `celestial_pos(celestial_object, observer_location, time)` (`src/celestial.py`)\n- **Inputs**:\n  - `celestial_object`: Name (e.g., `\"sun\"`, `\"andromeda\"`).\n  - `observer_location`: `EarthLocation` object.\n  - `time`: `datetime` (timezone-aware) or Astropy `Time`.\n- **Returns**: `(altitude_degrees, azimuth_degrees)`.\n\n### `celestial_rise_set(celestial_object, observer_location, date, horizon=0.0)` (`src/celestial.py`)\n- **Inputs**: \n  - `date`: Timezone-aware `datetime`.\n  - `horizon`: Horizon elevation (default: 0°).\n- **Returns**: `(rise_time, set_time)` as UTC `Time` objects.\n\n### `load_map(map_path)` (`src/light_pollution.py`)\n- **Inputs**:\n  - `map_path`: Path to GeoTIFF file.\n- **Returns**: Tuple `(vriis_data, bounds, crs, transform)` for light pollution analysis.\n\n## Testing\nRun tests with:\n```bash\npytest tests/\n```\n\n### Key Test Cases (`tests/test_celestial.py`)\n```python tests/test_celestial.py\ndef test_calculate_altitude_deepspace():\n    \"\"\"Test deep-space object resolution.\"\"\"\n    altitude, _ = celestial_pos(\"andromeda\", NYC, Time.now())\n    assert -90 <= altitude <= 90\n\ndef test_calculate_rise_set_sun():\n    \"\"\"Validate Sun rise/set times.\"\"\"\n    rise, set_ = celestial_rise_set(\"sun\", NYC, datetime(2023, 10, 1))\n    assert rise < set_\n```\n\n## Project Structure\n```\n.\n├── src/\n│   ├── celestial.py          # Core celestial calculations\n│   ├── light_pollution.py    # Light pollution map utilities\n│   ├── utils.py              # Time/location helpers\n│   └── main.py               # CLI entry point\n├── tests/\n│   ├── test_celestial.py\n│   └── test_utils.py\n└── README.md\n```\n\n## Future Work\n- Add support for comets/asteroids.\n- Optimize SIMBAD queries for offline use.\n- Integrate light pollution data into visibility predictions.\n\n### Key Updates:\n1. **Light Pollution**: Added `light_pollution.py` to features and API reference.\n2. **Dependencies**: Added `rasterio` and `geopy` to installation instructions.\n3. **Project Structure**: Clarified file roles and test coverage.\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "stargazing",
        "stargazer1995",
        "celestial",
        "mcp stargazing",
        "stargazing calculate",
        "stargazing conditions"
      ],
      "category": "weather-and-location-data"
    },
    "SuchAFool123--quant-agent": {
      "owner": "SuchAFool123",
      "name": "quant-agent",
      "url": "https://github.com/SuchAFool123/quant-agent",
      "imageUrl": "/freedevtools/mcp/pfp/SuchAFool123.webp",
      "description": "Provides AI-driven analysis and insights for the A-share stock market, integrating large language models with quantitative analysis techniques. Offers real-time index monitoring, market sentiment evaluation, trend predictions, and in-depth stock analysis tools.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-04-12T07:46:06Z",
      "readme_content": "# QuantML-Agent: A股市场分析助手\n\nQuantML-Agent是一个基于人工智能的A股市场分析工具，结合了大语言模型和量化分析技术，为投资者提供全面的市场洞察和个股分析。\n（目前功能还不完善，仅供学习参考使用）\n\n## 功能特点\n\n### 市场分析\n- **实时指数监控**：展示上证指数、深证成指、创业板指等主要指数的实时行情\n- **市场情绪仪表盘**：通过AI分析市场情绪，提供贪婪/恐慌指数\n- **趋势预测**：提供短期、中期和长期市场趋势预测\n- **热点板块分析**：识别并评估市场热点板块的投资机会\n\n### 个股分析\n- **K线图表**：专业的K线图展示，支持多种技术指标\n- **基本面数据**：展示个股的关键基本面数据\n- **成交量分析**：直观展示成交量变化\n- **数据缩放**：灵活查看不同时间范围的数据\n\n### 研报与新闻分析\n- **研报解读**：AI驱动的研报摘要和解读\n- **新闻分析**：实时新闻聚合与AI分析\n- **市场影响评估**：评估新闻和研报对市场的潜在影响\n\n## 技术架构\n\n### 前端\n- React.js框架\n- ECharts图表库\n- 响应式设计，适配多种设备\n\n### 后端\n- Python Flask API\n- AKShare数据接口\n- DeepSeek API集成\n- 数据处理与分析模块\n\n## 快速开始\n\n### 环境要求\n- Node.js 14+\n- Python 3.8+\n- 网络连接（用于获取实时数据）\n\n### 安装步骤\n\n1. 克隆仓库\n```bash\ngit clone https://github.com/QuantML-Github/quantml-agent.git\ncd quantml-agent\n```\n\n2. 安装后端依赖\n```bash\ncd backend\npip install -r requirements.txt\n```\n\n3. 配置环境变量\n```bash\n# 创建.env文件\ncp .env.example .env\n# 编辑.env文件，添加必要的API密钥\n```\n\n4. 安装前端依赖\n```bash\ncd ../frontend\nnpm install\n```\n\n5. 启动应用\n```bash\n# 启动后端\ncd ../backend\npython app.py\n\n# 新开一个终端，启动前端\ncd ../frontend\nnpm start\n```\n\n6. 访问应用\n浏览器打开 http://localhost:3000\n\n## 数据来源\n\n- A股市场数据：通过AKShare获取\n- 新闻和研报：从多个金融媒体和券商研究所获取\n- 市场分析：基于OpenAI大语言模型\n\n## 开发计划\n\n- [ ] 添加更多技术指标\n- [ ] 实现个性化投资组合分析\n- [ ] 增加历史回测功能\n- [ ] 开发移动端应用\n- [ ] 添加用户账户系统\n\n## 贡献指南\n\n欢迎贡献代码、报告问题或提出新功能建议。请遵循以下步骤：\n\n1. Fork仓库\n2. 创建功能分支 (`git checkout -b feature/amazing-feature`)\n3. 提交更改 (`git commit -m 'Add some amazing feature'`)\n4. 推送到分支 (`git push origin feature/amazing-feature`)\n5. 创建Pull Request\n\n## 许可证\n\n本项目采用MIT许可证\n\n## 免责声明\n\nQuantML-Agent仅供学习和研究使用，不构成投资建议。投资决策请基于您自己的判断，并自行承担风险。\n\n## 联系方式\n\n项目维护者: quantml@126.com\n\n---\n\n*注意：本项目是一个演示应用，旨在展示AI与金融数据分析的结合。实际投资决策需谨慎。*\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "agent",
        "stock",
        "stock analysis",
        "quant agent",
        "stock market"
      ],
      "category": "weather-and-location-data"
    },
    "Sunwood-ai-labs--mcp-weather-service-server": {
      "owner": "Sunwood-ai-labs",
      "name": "mcp-weather-service-server",
      "url": "https://github.com/Sunwood-ai-labs/mcp-weather-service-server",
      "imageUrl": "/freedevtools/mcp/pfp/Sunwood-ai-labs.webp",
      "description": "A simple note management system that allows users to add new notes and generate summaries of stored notes with customizable detail levels. Access individual notes using a custom URI scheme.",
      "stars": 5,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-27T03:05:59Z",
      "readme_content": "<div align=\"center\">\n\n\n\n## 🌦️ weather_service MCP サーバー\n\n</div>\n\n## 🧩 コンポーネント\n\n### 📚 リソース\n\nこのサーバーは、シンプルなノート保存システムを実装しています：\n- カスタム note:// URIスキームで個別のノートにアクセス\n- 各ノートリソースには、名前、説明、text/plainのマイムタイプがあります\n\n### 💡 プロンプト\n\nサーバーは単一のプロンプトを提供します：\n- summarize-notes：保存されている全てのノートの要約を作成\n  - オプションの\"style\"引数で詳細レベルを制御（brief/detailed）\n  - 全ての現在のノートとスタイル設定を組み合わせてプロンプトを生成\n\n### 🛠️ ツール\n\nサーバーは1つのツールを実装しています：\n- add-note：新しいノートをサーバーに追加\n  - \"name\"と\"content\"を必須の文字列引数として受け取り\n  - サーバーの状態を更新し、リソースの変更をクライアントに通知\n\n\n## 🚀 クイックスタート\n\n### 📥 インストール\n\n#### Claude Desktop\n\nMacOSの場合: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nWindowsの場合: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>開発/未公開サーバーの設定</summary>\n  ```\n  \"mcpServers\": {\n    \"weather_service\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"C:\\Prj\\weather_service\",\n        \"run\",\n        \"weather_service\"\n      ]\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>公開サーバーの設定</summary>\n  ```\n  \"mcpServers\": {\n    \"weather_service\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"weather_service\"\n      ]\n    }\n  }\n  ```\n</details>\n\n## 👨‍💻 開発\n\n### 🏗️ ビルドと公開\n\nパッケージを配布用に準備するには：\n\n1. 依存関係を同期しロックファイルを更新：\n```bash\nuv sync\n```\n\n2. パッケージのディストリビューションをビルド：\n```bash\nuv build\n```\n\nこれにより、`dist/`ディレクトリにソースとホイールのディストリビューションが作成されます。\n\n3. PyPIに公開：\n```bash\nuv publish\n```\n\n注意：PyPIの認証情報は環境変数またはコマンドフラグで設定する必要があります：\n- トークン：`--token`または`UV_PUBLISH_TOKEN`\n- またはユーザー名/パスワード：`--username`/`UV_PUBLISH_USERNAME`と`--password`/`UV_PUBLISH_PASSWORD`\n\n### 🔍 デバッグ\n\nMCPサーバーはstdioを介して実行されるため、デバッグが難しい場合があります。最適なデバッグ体験のために、[MCP Inspector](https://github.com/modelcontextprotocol/inspector)の使用を強く推奨します。\n\n[`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm)を使用して、次のコマンドでMCP Inspectorを起動できます：\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory C:\\Prj\\weather_service run weather-service\n```\n\n起動時、InspectorはブラウザでアクセスできるURLを表示し、デバッグを開始できます。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sunwood",
        "service",
        "notes",
        "weather service",
        "data sunwood",
        "note management"
      ],
      "category": "weather-and-location-data"
    },
    "TencentEdgeOne--mcp-geo": {
      "owner": "TencentEdgeOne",
      "name": "mcp-geo",
      "url": "https://github.com/TencentEdgeOne/mcp-geo",
      "imageUrl": "/freedevtools/mcp/pfp/TencentEdgeOne.webp",
      "description": "Provides real-time geolocation data integration with AI models, enabling contextual understanding based on user locations. Facilitates the retrieval and use of geolocation information in language model workflows through the Model Context Protocol.",
      "stars": 20,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-15T06:07:24Z",
      "readme_content": "# EdgeOne Pages MCP: Geo Location Service\n\nThis project demonstrates how to use EdgeOne Pages Functions to retrieve user geolocation information and integrate it with large language models through MCP (Model Context Protocol).\n\n## Demo\n\n![f180b5ae_0e9c_40a8_a76a_b8f2a5e6108f](https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/f180b5ae-0e9c-40a8-a76a-b8f2a5e6108f.gif)\n\n## Deploy\n\n[![Deploy with EdgeOne Pages](https://cdnstatic.tencentcs.com/edgeone/pages/deploy.svg)](https://edgeone.ai/pages/new?template=mcp-geo)\n\nMore Templates: [EdgeOne Pages](https://edgeone.ai/pages/templates)\n\n## Components\n\n### 1. EdgeOne Pages Functions: Geolocation\n\nThe project includes an EdgeOne Pages Function that retrieves user geolocation information:\n\n* Uses the EdgeOne request context to access geolocation data\n* Returns location information in a JSON format\n* Located in `functions/get_geo.ts`\n\n### 2. MCP Server Integration\n\nThe MCP server component provides an interface for large language models to access geolocation data:\n\n* Implements the Model Context Protocol (MCP)\n* Exposes a `get_geolocation` tool that can be used by AI models\n* Uses the EdgeOne Pages Function to fetch geolocation data\n* Located in `mcp-server/index.ts`\n\n## MCP Configuration\n\nTo use the MCP server with large language models, add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"edgeone-geo-mcp-server\": {\n      \"command\": \"tsx\",\n      \"args\": [\"path/to/mcp-server/index.ts\"]\n    }\n  }\n}\n```\n\n## Learn More\n\n* [EdgeOne Pages](https://edgeone.ai/products/pages)\n* [EdgeOne Pages Functions documentation](https://edgeone.ai/document/162227908259442688)\n* [Model Context Protocol (MCP)](https://modelcontextprotocol.github.io) - Learn about integrating AI models with external tools and services\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "geo",
        "contextual",
        "geolocation information",
        "geolocation data",
        "use geolocation"
      ],
      "category": "weather-and-location-data"
    },
    "TimLukaHorstmann--mcp-weather": {
      "owner": "TimLukaHorstmann",
      "name": "mcp-weather",
      "url": "https://github.com/TimLukaHorstmann/mcp-weather",
      "imageUrl": "/freedevtools/mcp/pfp/TimLukaHorstmann.webp",
      "description": "Provides hourly weather forecasts using real-time data from the AccuWeather API, delivering accurate temperature and weather conditions for any location.",
      "stars": 26,
      "forks": 9,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T08:59:43Z",
      "readme_content": "# MCP Weather Server\n\n[![npm version](https://img.shields.io/npm/v/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n[![license](https://img.shields.io/github/license/TimLukaHorstmann/mcp-weather)](https://github.com/TimLukaHorstmann/mcp-weather/blob/main/LICENSE)\n[![node version](https://img.shields.io/node/v/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n[![issues](https://img.shields.io/github/issues/TimLukaHorstmann/mcp-weather)](https://github.com/TimLukaHorstmann/mcp-weather/issues)\n[![weekly downloads](https://img.shields.io/npm/dm/@timlukahorstmann/mcp-weather)](https://www.npmjs.com/package/@timlukahorstmann/mcp-weather)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/TimLukaHorstmann/mcp-weather)](https://archestra.ai/mcp-catalog/timlukahorstmann__mcp-weather)\n\n<p align=\"center\">\n  \n  <a href=\"https://glama.ai/mcp/servers/@TimLukaHorstmann/mcp-weather\">\n    <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@TimLukaHorstmann/mcp-weather/badge\" alt=\"Weather MCP server\" />\n  </a>\n</p>\n\nA Model Context Protocol (MCP) server that provides hourly and daily weather forecasts using the AccuWeather API.\n\n---\n\n## Quick Start\n\nYou need an AccuWeather API key (free tier available).  \n[Sign up here](https://developer.accuweather.com/) and create an app to get your key.\n\nExport your API key as an environment variable:\n\n```bash\nexport ACCUWEATHER_API_KEY=your_api_key_here\n```\n\nThen run the MCP Weather server directly with:\n\n```bash\nnpx -y @timlukahorstmann/mcp-weather\n```\n\nOr, for HTTP/REST access via [supergateway](https://github.com/supercorp-ai/supergateway):\n\n```bash\nnpx -y supergateway --stdio \"npx -y @timlukahorstmann/mcp-weather\" \\\n  --port 4004 \\\n  --baseUrl http://127.0.0.1:4004 \\\n  --ssePath /messages \\\n  --messagePath /message \\\n  --cors \"*\" \\\n  --env ACCUWEATHER_API_KEY=\"$ACCUWEATHER_API_KEY\"\n```\n\n---\n\n## MCP Server Config Example\n\nFor integration with Claude Desktop or other MCP-compatible clients, add this to your config (e.g. `claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@timlukahorstmann/mcp-weather\"],\n      \"env\": {\n        \"ACCUWEATHER_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n---\n\n## Overview\n\nThis MCP server allows large language models (like Claude) to access real-time weather data. When integrated with an LLM, it enables the model to:\n\n- Fetch accurate, up-to-date weather forecasts\n- Provide hourly weather data for the next 12 hours\n- Access daily weather forecasts for up to 15 days\n- Display data in both metric (°C) and imperial (°F) units\n- View temperature, conditions, precipitation information, and other weather details\n\n## Available Tools\n\n### Hourly Weather Forecast\n- Tool name: `weather-get_hourly`\n- Provides hourly forecasts for the next 12 hours\n- Parameters:\n  - `location` (required): City or location name\n  - `units` (optional): \"metric\" (Celsius, default) or \"imperial\" (Fahrenheit)\n\n### Daily Weather Forecast\n- Tool name: `weather-get_daily`\n- Provides daily forecasts for up to 15 days\n- Parameters:\n  - `location` (required): City or location name\n  - `days` (optional): Number of forecast days (1, 5, 10, or 15; default is 5)\n  - `units` (optional): \"metric\" (Celsius, default) or \"imperial\" (Fahrenheit)\n\n## Prerequisites\n\n- Node.js ≥18  \n- An AccuWeather API key (set via `.env` or your shell)\n\n## Setup\n\n1. **Clone this repository:**\n   ```bash\n   git clone https://github.com/TimLukaHorstmann/mcp-weather.git\n   cd mcp-weather\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **Get an AccuWeather API key:**\n   - Register at [AccuWeather API](https://developer.accuweather.com/)\n   - Create a new app and obtain an API key\n\n4. **Create a `.env` file with your API key:**\n   ```\n   ACCUWEATHER_API_KEY=your_api_key_here\n   ```\n\n5. **Build the project:**\n   ```bash\n   npm run build\n   ```\n\n## Usage with Claude Desktop\n\n1. Configure Claude Desktop to use this MCP server:\n   - Open Claude Desktop\n   - Go to Settings > Developer > Edit Config\n   - Add the following to your `claude_desktop_config.json`:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"weather\": {\n         \"command\": \"npx\",\n         \"args\": [\"-y\", \"@timlukahorstmann/mcp-weather\"],\n         \"env\": {\n           \"ACCUWEATHER_API_KEY\": \"your_api_key_here\"\n         }\n       }\n     }\n   }\n   ```\n\n2. Restart Claude Desktop\n\n3. In a new conversation, enable the MCP server by clicking the plug icon and selecting \"weather\"\n\n4. Now you can ask Claude for weather forecasts, such as:\n   - \"What's the hourly weather forecast for New York City?\"\n   - \"Give me the 5-day forecast for London.\"\n   - \"What will the weather be like in Tokyo this week in Fahrenheit?\"\n   - \"Will it rain in San Francisco tomorrow?\"\n\n## Development\n\n- Install dev dependencies: `npm install`\n- Lint your code:           `npm run lint`  \n- Build:                    `npm run build`  \n- Run tests:                `npm test`\n- Start in dev mode:        `npm run dev`\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Future Enhancements\n\nWe're always looking to improve the MCP Weather Server. Here are some features we're considering for future releases:\n\n- **Extended Hourly Forecasts:** Beyond 12 hours, e.g., 24 or 48 hours.\n- **Weather Alerts:** Integration with AccuWeather's severe weather alerts API.\n- **Location Autocomplete:** Improved location searching with autocomplete suggestions.\n- **Historical Weather Data:** Access to past weather conditions.\n\nIf you have ideas for other features, feel free to open an issue!\n\n## Changelog\n\n### 0.4.0\n- Removed `sessionId` requirement from all tools as it was not used for anything internally\n- This simplifies integrations and reduces confusion for LLM usage\n\n### 0.3.0 and earlier\n- Initial releases with basic functionality\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "https://www.npmjs.com/package/mcp-weather",
      "npm_downloads": 219,
      "keywords": [
        "timlukahorstmann",
        "weather",
        "accuweather",
        "weather location",
        "weather forecasts",
        "mcp weather"
      ],
      "category": "weather-and-location-data"
    },
    "aaasoulmate--mcp-weather": {
      "owner": "aaasoulmate",
      "name": "mcp-weather",
      "url": "https://github.com/aaasoulmate/mcp-weather",
      "imageUrl": "/freedevtools/mcp/pfp/aaasoulmate.webp",
      "description": "Enhances Large Language Models with real-time weather data by connecting to external weather APIs for accurate and up-to-date information. Provides LLMs with the capability to access and utilize dynamic weather data for improved contextual responses.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-30T05:02:00Z",
      "readme_content": "# MCP-Augmented LLM for Reaching Weather Information\r\n\r\n## Overview\r\nThis system enhances Large Language Models (LLMs) with weather data capabilities using the Model Context Protocol (MCP) framework.\r\n\r\n## Demo\r\n\r\n\r\n### Components\r\n- **MCP Client**: Store LLms\r\n- **MCP Server**: Intermediate agent connecting external tools / resources\r\n\r\n## Configuration\r\n\r\n### DeepSeek Platform\r\n```env\r\nBASE_URL=https://api.deepseek.com\r\nMODEL=deepseek-chat\r\nOPENAI_API_KEY=<your_api_key_here>\r\n```\r\n\r\n### OpenWeather Platform\r\n```env\r\nOPENWEATHER_API_BASE=https://api.openweathermap.org/data/2.5/weather\r\nUSER_AGENT=weather-app/1.0\r\nAPI_KEY=<your_openweather_api_key>\r\n```\r\n\r\n## Installation & Execution\r\n\r\n1. Initialize project:\r\n```bash\r\nuv init weather_mcp\r\ncd weather_mcp\r\n```\r\nwhere weather_mcp is the project file name.\r\n\r\n2. Install dependencies:\r\n```bash\r\nuv add mcp httpx\r\n```\r\n\r\n3. Launch system:\r\n```bash\r\ncd ./utils\r\npython client.py server.py\r\n```\r\n\r\n> Note: Replace all `<your_api_key_here>` placeholders with actual API keys",
      "npm_url": "https://www.npmjs.com/package/mcp-weather",
      "npm_downloads": 219,
      "keywords": [
        "weather",
        "apis",
        "contextual",
        "weather apis",
        "weather data",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "acxelerator--mcp-tenki": {
      "owner": "acxelerator",
      "name": "mcp-tenki",
      "url": "https://github.com/acxelerator/mcp-tenki",
      "imageUrl": "/freedevtools/mcp/pfp/acxelerator.webp",
      "description": "Provides weather updates specifically for locations in Japan, allowing users to access real-time meteorological data.",
      "stars": 0,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-01-13T06:14:43Z",
      "readme_content": "# mcp-tenki\n\nA MCP server with weather of Japan\n\n<a href=\"https://glama.ai/mcp/servers/jbl3sfsi9r\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/jbl3sfsi9r/badge\" alt=\"Tenki MCP server\" /></a>\n\n# Setup\n\n```\n$ uv sync\n```\n\n# Running Server \n\n\nRun without clone\n\n```json\n{\n    \"mcpServers\": {\n        \"tenki\": {\n            \"command\": \"uvx\",\n            \"args\": [\"--from\", \"git+https://github.com/acxelerator/mcp-tenki.git\", \"mcp-tenki\"]\n        }\n    }\n}\n```\n\nRun with clone\n\n```json\n{\n    \"mcpServers\": {\n        \"tenki\": {\n            \"command\": \"uv\",\n            \"args\": [\"--directory\", \"/PATH/TO/REPOSITORY/mcp_tenki\", \"run\", \"main.py\"]\n        }\n    }\n}\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "meteorological",
        "tenki",
        "acxelerator",
        "weather updates",
        "meteorological data",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "adarshem--mcp-server-learn": {
      "owner": "adarshem",
      "name": "mcp-server-learn",
      "url": "https://github.com/adarshem/mcp-server-learn",
      "imageUrl": "/freedevtools/mcp/pfp/adarshem.webp",
      "description": "Provides real-time weather alerts and forecasts for US locations using data from the National Weather Service, enabling applications to retrieve accurate weather information through tool calls.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-29T07:52:07Z",
      "readme_content": "# MCP Weather Server\n\n[![smithery badge](https://smithery.ai/badge/@adarshem/mcp-server-learn)](https://smithery.ai/server/@adarshem/mcp-server-learn)\n\nThis project is a demo implementation of a Model Context Protocol (MCP) server that provides weather-related tools. The server exposes two tools:\n\n1. **get-alerts**: Fetches active weather alerts for a given US state.\n2. **get-forecast**: Provides a weather forecast for a specific location based on latitude and longitude.\n\n<a href=\"https://glama.ai/mcp/servers/@adarshem/mcp-server-learn\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@adarshem/mcp-server-learn/badge\" alt=\"Weather Server MCP server\" />\n</a>\n\n## Features\n- Built using Node.js.\n- Implements MCP tools for weather data retrieval.\n- Uses the US National Weather Service API for accurate and up-to-date weather information.\n\n## Prerequisites\n- Node.js installed on your system.\n- Familiarity with MCP concepts and tools.\n\n## Setup\n\n### Installing via Smithery\n\nTo install mcp-server-learn for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@adarshem/mcp-server-learn):\n\n```bash\nnpx -y @smithery/cli install @adarshem/mcp-server-learn --client claude\n```\n\n### Manual Installation\n1. Clone the repository:\n   ```bash\n   git clone <repository-url>\n   cd weather\n   ```\n\n2. Install dependencies using `pnpm` (as configured in the project):\n   ```bash\n   pnpm install\n   ```\n\n3. Build the project:\n   ```bash\n   pnpm build\n   ```\n\n## Configuration\n\nUpdate your `settings.json` file of VSCode to add this MCP server\n\n```json\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather/build/index.js\"\n            ]\n        }\n    }\n}\n```\n\n## Resources\n- [MCP Quickstart Guide](https://modelcontextprotocol.io/quickstart/server)\n- [US National Weather Service API](https://www.weather.gov/documentation/services-web-api)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "adarshem",
        "weather",
        "forecasts",
        "weather information",
        "data adarshem",
        "weather service"
      ],
      "category": "weather-and-location-data"
    },
    "adhikasp--mcp-weather": {
      "owner": "adhikasp",
      "name": "mcp-weather",
      "url": "https://github.com/adhikasp/mcp-weather",
      "imageUrl": "/freedevtools/mcp/pfp/adhikasp.webp",
      "description": "Provides hourly weather forecasts by utilizing the AccuWeather API to fetch and deliver weather data for specified locations.",
      "stars": 19,
      "forks": 20,
      "license": "The Unlicense",
      "language": "Python",
      "updated_at": "2025-09-29T22:33:52Z",
      "readme_content": "# MCP Weather Server\n\nA simple MCP server that provides hourly weather forecasts using the AccuWeather API.\n\n## Setup\n\n1. Install dependencies using `uv`:\n```bash\nuv venv\nuv sync\n```\n\n2. Create a `.env` file with your AccuWeather API key:\n```\nACCUWEATHER_API_KEY=your_api_key_here\n```\n\nYou can get an API key by registering at [AccuWeather API](https://developer.accuweather.com/).\n\n## Running the Server\n\n```json\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"uvx\",\n            \"args\": [\"--from\", \"git+https://github.com/adhikasp/mcp-weather.git\", \"mcp-weather\"],\n            \"env\": {\n                \"ACCUWEATHER_API_KEY\": \"your_api_key_here\"\n            }\n        }\n    }\n}\n```\n\n## API Usage\n\n### Get Hourly Weather Forecast\n\nResponse:\n```json\n{\n    \"location\": \"Jakarta\",\n    \"location_key\": \"208971\",\n    \"country\": \"Indonesia\",\n    \"current_conditions\": {\n        \"temperature\": {\n            \"value\": 32.2,\n            \"unit\": \"C\"\n        },\n        \"weather_text\": \"Partly sunny\",\n        \"relative_humidity\": 75,\n        \"precipitation\": false,\n        \"observation_time\": \"2024-01-01T12:00:00+07:00\"\n    },\n    \"hourly_forecast\": [\n        {\n            \"relative_time\": \"+1 hour\",\n            \"temperature\": {\n                \"value\": 32.2,\n                \"unit\": \"C\"\n            },\n            \"weather_text\": \"Partly sunny\",\n            \"precipitation_probability\": 40,\n            \"precipitation_type\": \"Rain\",\n            \"precipitation_intensity\": \"Light\"\n        }\n    ]\n}\n```\n\nThe API provides:\n- Current weather conditions including temperature, weather description, humidity, and precipitation status\n- 12-hour forecast with hourly data including:\n  - Relative time from current time\n  - Temperature in Celsius\n  - Weather description\n  - Precipitation probability, type, and intensity",
      "npm_url": "https://www.npmjs.com/package/mcp-weather",
      "npm_downloads": 219,
      "keywords": [
        "adhikasp",
        "weather",
        "accuweather",
        "weather data",
        "mcp weather",
        "hourly weather"
      ],
      "category": "weather-and-location-data"
    },
    "aitiwari--weather": {
      "owner": "aitiwari",
      "name": "weather",
      "url": "https://github.com/aitiwari/weather",
      "imageUrl": "/freedevtools/mcp/pfp/aitiwari.webp",
      "description": "Fetch real-time weather alerts and forecasts for any location in the US, providing up-to-date weather information to enhance LLMs' environmental awareness.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-01T22:00:03Z",
      "readme_content": "# Model Context Protocol (MCP)\n\n[🚀 Why Is Everyone – Suddenly! – Obsessed With MCP/Servers? (Spoiler: It’s Redefining AI Orchestration)](https://www.linkedin.com/pulse/why-everyone-suddenly-obsessed-mcpservers-spoiler-its-sachin-tiwari-7qpnc/?trackingId=Gh6SLtQkP48VXXPdJQ5p%2Fw%3D%3D)\n\nModel Context Protocol (MCP) is an open standard developed by Anthropic in late 2024 to address a critical challenge in AI integration: connecting AI assistants with real-world data sources and systems[1][3]. MCP serves as a standardized interface for AI models to interact with external tools, databases, and APIs, similar to how USB-C functions as a universal port for devices[4][7].\n\n## Key Features and Benefits\n\n1. **Standardized Integration:** MCP eliminates the need for custom integrations, allowing developers to connect AI models to various data sources using a single protocol.\n\n2. **Dynamic Discovery:** AI agents can automatically detect and utilize available MCP servers and their capabilities without hard-coded integration.\n\n3. **Enhanced Security:** MCP enables developers to implement security measures within servers, ensuring AI agents only access permitted data or actions.\n\n4. **Flexibility:** The protocol is model-agnostic, allowing any AI model (e.g., Claude, GPT-4, open-source LLMs) to use MCP-enabled tools.\n\n5. **Ecosystem Growth:** Since its introduction, MCP has gained significant traction, with over 1,000 community-built MCP servers available by February 2025.\n\n## Impact on AI Development\n\nMCP is transforming the AI landscape by:\n\n1. **Simplifying Integration:** Reducing the complexity of connecting AI models to external systems from an \"N×M\" problem to an \"N+M\" problem.\n\n2. **Enabling Complex Workflows:** Facilitating multi-step, cross-system operations for AI agents, such as event planning that involves multiple platforms.\n\n3. **Fostering Collaboration:** Providing a shared workspace for multi-agent systems, allowing specialized AI agents to coordinate tasks efficiently.\n\n4. **Enhancing Personalization:** Enabling secure integration of personal AI assistants with users' data and applications.\n\n5. **Improving Enterprise Governance:** Standardizing AI access to internal tools and enabling better monitoring and control of AI interactions.\n\nAs of March 2025, MCP has become a significant topic in the AI community, with many viewing it as a crucial component for developing more integrated and context-aware AI systems. Its open nature and backing by a major AI player have contributed to its rapid adoption and evolution, positioning MCP as a potential de facto standard for AI-world integration.\n\n---\n\nModel Context Protocol (MCP) - weather quick start :\n=======\n\n## Overview\n\nThis document provides a comprehensive guide to building a simple Model Context Protocol (MCP) weather server and connecting it to a host, Claude for Desktop. The server exposes two tools: `get-alerts` and `get-forecast`, which fetch weather alerts and forecasts using the National Weather Service API.\n\n## Table of Contents\n\n1.  [Introduction](#introduction)\n2.  [Prerequisites](#prerequisites)\n3.  [System Requirements](#system-requirements)\n4.  [Setup](#setup)\n5.  [Building the Server](#building-the-server)\n    - [Importing Packages and Setting Up the Instance](#importing-packages-and-setting-up-the-instance)\n    - [Helper Functions](#helper-functions)\n    - [Implementing Tool Execution](#implementing-tool-execution)\n    - [Running the Server](#running-the-server)\n6.  [Testing with Claude for Desktop](#testing-your-server-with-claude-for-desktop)\n    - [Configuration](#configuration)\n    - [Test with Commands](#test-with-commands)\n7.  [Under the Hood](#what’s-happening-under-the-hood)\n8.  [Troubleshooting](#troubleshooting)\n\n\n## Introduction\n\nThis guide walks you through creating an MCP server to enhance LLMs (like Claude) with real-time weather data. The server utilizes the MCP framework to expose tools for fetching weather alerts and forecasts, addressing the LLM's lack of native environmental awareness.\n\n## Prerequisites\n\nBefore starting, ensure you have:\n\n- Familiarity with Python\n- Understanding of LLMs like Claude\n\n## System Requirements\n\n- Python 3.10 or higher\n- MCP SDK 1.2.0 or higher\n\n## Setup\n\n1.  **Install `uv`:**\n\n    window\n    ```\n    powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n    ```\n    macos/linux\n     ```\n    curl -LsSf https://astral.sh/uv/install.sh | sh\n    ```\n\n\n    Restart your terminal to ensure the `uv` command is recognized.\n\n2.  **Create and Set Up Project:**\n\n    window(cd to your dev repo_path run below command in powershell/..)\n\n    ```\n    # Create a new directory for our project\n      uv init weather\n      cd weather\n\n      # Create virtual environment and activate it\n      uv venv\n      .venv\\Scripts\\activate\n\n      # Install dependencies\n      uv add mcp[cli] httpx\n\n      # Create our server file\n      new-item weather.py\n    ```\n    macos/linux\n      ```\n      # Create a new directory for our project\n      uv init weather\n      cd weather\n\n      # Create virtual environment and activate it\n      uv venv\n      source .venv/bin/activate\n\n      # Install dependencies\n      uv add \"mcp[cli]\" httpx\n\n      # Create our server file\n      touch weather.py\n\n    ```\n\n## Building the Server\n\n### Importing Packages and Setting Up the Instance\n\nAdd the following code to the top of your `weather.py` file:\n```\nfrom typing import Any\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\n\n\n# Initialize FastMCP server\nmcp = FastMCP(\"weather\")\n\n# Constants\nNWS_API_BASE = \"https://api.weather.gov\"\nUSER_AGENT = \"weather-app/1.0\"\n\n\n#helper function\nasync def make_nws_request(url: str) -> dict[str, Any] | None:\n    \"\"\"Make a request to the NWS API with proper error handling.\"\"\"\n    headers = {\n        \"User-Agent\": USER_AGENT,\n        \"Accept\": \"application/geo+json\"\n    }\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(url, headers=headers, timeout=30.0)\n            response.raise_for_status()\n            return response.json()\n        except Exception:\n            return None\n\ndef format_alert(feature: dict) -> str:\n    \"\"\"Format an alert feature into a readable string.\"\"\"\n    props = feature[\"properties\"]\n    return f\"\"\"\nEvent: {props.get('event', 'Unknown')}\nArea: {props.get('areaDesc', 'Unknown')}\nSeverity: {props.get('severity', 'Unknown')}\nDescription: {props.get('description', 'No description available')}\nInstructions: {props.get('instruction', 'No specific instructions provided')}\n\"\"\"\n\n\n@mcp.tool()\nasync def get_alerts(state: str) -> str:\n    \"\"\"Get weather alerts for a US state.\n\n    Args:\n        state: Two-letter US state code (e.g. CA, NY)\n    \"\"\"\n    url = f\"{NWS_API_BASE}/alerts/active/area/{state}\"\n    data = await make_nws_request(url)\n\n    if not data or \"features\" not in data:\n        return \"Unable to fetch alerts or no alerts found.\"\n\n    if not data[\"features\"]:\n        return \"No active alerts for this state.\"\n\n    alerts = [format_alert(feature) for feature in data[\"features\"]]\n    return \"\\n---\\n\".join(alerts)\n\n@mcp.tool()\nasync def get_forecast(latitude: float, longitude: float) -> str:\n    \"\"\"Get weather forecast for a location.\n\n    Args:\n        latitude: Latitude of the location\n        longitude: Longitude of the location\n    \"\"\"\n    # First get the forecast grid endpoint\n    points_url = f\"{NWS_API_BASE}/points/{latitude},{longitude}\"\n    points_data = await make_nws_request(points_url)\n\n    if not points_data:\n        return \"Unable to fetch forecast data for this location.\"\n\n    # Get the forecast URL from the points response\n    forecast_url = points_data[\"properties\"][\"forecast\"]\n    forecast_data = await make_nws_request(forecast_url)\n\n    if not forecast_data:\n        return \"Unable to fetch detailed forecast.\"\n\n    # Format the periods into a readable forecast\n    periods = forecast_data[\"properties\"][\"periods\"]\n    forecasts = []\n    for period in periods[:5]:  # Only show next 5 periods\n        forecast = f\"\"\"\n                    {period['name']}:\n                    Temperature: {period['temperature']}°{period['temperatureUnit']}\n                    Wind: {period['windSpeed']} {period['windDirection']}\n                    Forecast: {period['detailedForecast']}\n                    \"\"\"\n        forecasts.append(forecast)\n\n    return \"\\n---\\n\".join(forecasts)\n\n\nif __name__ == \"__main__\":\n    # Initialize and run the server\n    mcp.run(transport='stdio')\n```\n\n### Running the Server\nTo verify your server, run:\n\n```\nuv run weather.py\n\n```\n\n## Testing Your Server with Claude for Desktop\n\n### Configuration\n\n1.  **Install/Update Claude for Desktop:** Ensure you have the latest version installed.\n2.  **Configure MCP Servers:** Open or create the configuration file at `~/Library/Application Support/Claude/claude_desktop_config.json`.\n\n\n\n  -> **RESTART THE SYSTEM IF NOT WORKS**\n\n3.  **Add Server Configuration:**\n\n    ```\n    {\n      \"mcpServers\": {\n        \"weather\": {\n          \"command\": \"uv\",\n          \"args\": [\n            \"--directory\",\n            \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather\",# S:\\\\Dev\\\\weather\n            \"run\",\n            \"weather.py\"\n          ]\n        }\n      }\n    }\n    ```\n\n    Replace `/ABSOLUTE/PATH/TO/PARENT/FOLDER/weather` with the correct absolute path to your project directory. You may need to provide the full path to the `uv` executable in the `command` field (use `which uv` on MacOS/Linux or `where uv` on Windows to find it).\n\n4.  **Restart Claude for Desktop.**\n\n\n### Test with Commands\n\n1.  **Verify Tool Detection:** Look for the hammer icon in Claude for Desktop. Clicking it should list the `get_alerts` and `get_forecast` tools.\n\n\n2.  **Run Test Queries:**\n\n    - \"What’s the weather in Sacramento?\"\n    - \"What are the active weather alerts in Texas?\"\n\n    Note: These queries work for US locations only, as they use the US National Weather Service.\n\n## What’s Happening Under the Hood\n\n1.  The client sends your question to Claude.\n2.  Claude analyzes available tools and decides which to use.\n3.  The client executes the chosen tool(s) through the MCP server.\n4.  Results are sent back to Claude.\n5.  Claude formulates and displays a natural language response.\n\n## Troubleshooting\n\n- **Getting logs from Claude for Desktop**\n\n  - `mcp.log`: General MCP connections and failures.\n  - `mcp-server-SERVERNAME.log`: Error logs from the named server.\n\n  ```\n  tail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n  ```\n\n- **Server not showing up in Claude**\n  - Check `claude_desktop_config.json` file syntax.\n  - Ensure the project path is absolute.\n  - Restart Claude for Desktop completely.\n- **Tool calls failing silently**\n  - Check Claude’s logs for errors.\n  - Verify your server builds and runs without errors.\n  - Try restarting Claude for Desktop.\n- **None of this is working. What do I do?**\n  - Refer to the [debugging guide](https://modelcontextprotocol.io/debugging).\n- **Error: Failed to retrieve grid point data**\n\n  - Coordinates outside the US\n  - NWS API issues\n  - Rate limiting\n\n  Fix:\n\n  - Verify US coordinates\n  - Add a small delay between requests\n  - Check the [NWS API status page](https://www.weather.gov/help/status)\n\n- **Error: No active alerts for \\[STATE]**\n  - No current weather alerts for that state. Try a different state.\n\nFor more advanced troubleshooting, check out the [Debugging MCP guide](https://modelcontextprotocol.io/debugging).\n\n## MCP Inspector\n```\nnpx @modelcontextprotocol/inspector uv run weather.py\n\n```\n\n\n\n\n\ndone with local test\n\n## Published in Github\n[🔗 Github - aitiwari/weather ](https://github.com/aitiwari/weather)",
      "npm_url": "https://www.npmjs.com/package/weather",
      "npm_downloads": 5901,
      "keywords": [
        "forecasts",
        "aitiwari",
        "weather",
        "weather information",
        "aitiwari weather",
        "weather alerts"
      ],
      "category": "weather-and-location-data"
    },
    "ajeetraina--bengaluru-bmtc-mcp": {
      "owner": "ajeetraina",
      "name": "bengaluru-bmtc-mcp",
      "url": "https://github.com/ajeetraina/bengaluru-bmtc-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ajeetraina.webp",
      "description": "Provides real-time transit data including live bus locations, route details, stop information, and ETA calculations for Bangalore Metropolitan Transport Corporation buses through a standardized API.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-05T21:03:49Z",
      "readme_content": "# Bengaluru BMTC MCP Server\n\nAn implementation of a Model Context Protocol (MCP) server for Bangalore Metropolitan Transport Corporation (BMTC) bus services.\n\n## Architecture\n\n\nThe BMTC MCP server follows a modular, layered architecture. The system is designed to handle real-time transit data from Bangalore Metropolitan Transport Corporation buses and provide it through a standardized API.\n\n### Core Components\n\n1. **API Layer**: RESTful endpoints for authentication, routes, stops, bus locations, and ETA information\n2. **Service Layer**: Business logic, data transformation, and ETA calculations\n3. **Data Access Layer**: MongoDB integration via Mongoose ODM\n4. **Caching Layer**: Redis-based caching for improved performance\n5. **External Integration Layer**: BMTC API integration\n\n[Read the full architecture documentation](docs/architecture.md)\n\n## Features\n\nHere're the list of things that you can find using MCP Client or chat window:\n\n- Real-time bus location tracking \n- Route information and scheduling \n- Stop details and ETA (Estimated Time of Arrival) \n- Support for over 2,200 bus routes and 8,400+ bus stops in Bengaluru\n- Authentication and authorization\n- Data caching and optimization\n- GeoSpatial queries for nearby stops and buses\n\n## Prerequisites\n\n- Node.js (v14 or later)\n- npm or yarn\n- MongoDB\n- Redis (optional, for caching)\n- Git\n\n## Installation and Setup\n\n### Method 1: Standard Installation\n\n1. **Clone the repository**\n\n```bash\ngit clone https://github.com/ajeetraina/bengaluru-bmtc-mcp.git\ncd bengaluru-bmtc-mcp\n```\n\n2. **Install dependencies**\n\n```bash\nnpm install\n```\n\n3. **Configure environment variables**\n\n```bash\ncp .env.example .env\n```\n\nEdit the `.env` file with your configuration:\n\n```\nPORT=3000\nNODE_ENV=development\nMONGO_URI=mongodb://localhost:27017/bmtc-mcp\nREDIS_URI=redis://localhost:6379\nAPI_KEY=your_api_key_here\nJWT_SECRET=your_jwt_secret_here\nJWT_EXPIRES_IN=86400\nBMTC_API_ENDPOINT=https://bmtc-api-endpoint.example\nBMTC_API_KEY=your_bmtc_api_key_here\nCACHE_DURATION=300\nLOG_LEVEL=info\n```\n\n4. **Seed the database with mock data (optional)**\n\n```bash\nnode src/scripts/seed.js\n```\n\n5. **Start the server**\n\n```bash\nnpm start\n```\n\nFor development with auto-restart:\n\n```bash\nnpm run dev\n```\n\n### Method 2: Using Docker Compose\n\n1. **Clone the repository**\n\n```bash\ngit clone https://github.com/ajeetraina/bengaluru-bmtc-mcp.git\ncd bengaluru-bmtc-mcp\n```\n\n2. **Configure environment variables (optional)**\n\nYou can modify the environment variables directly in the `docker-compose.yml` file or create a `.env` file:\n\n```bash\ncp .env.example .env\n```\n\n3. **Build and start the containers**\n\n```bash\ndocker-compose up -d\n```\n\nThis will start three containers:\n- `bmtc-mcp-api`: The Node.js API server\n- `bmtc-mcp-mongo`: MongoDB database\n- `bmtc-mcp-redis`: Redis cache server\n\n4. **Seed the database with mock data (optional)**\n\n```bash\ndocker-compose exec api node src/scripts/seed.js\n```\n\n5. **View logs**\n\n```bash\ndocker-compose logs -f api\n```\n\n6. **Stop the containers**\n\n```bash\ndocker-compose down\n```\n\nTo remove volumes as well:\n\n```bash\ndocker-compose down -v\n```\n\n## Using the API\n\nOnce the server is running, you can access the API at:\n\n```\nhttp://localhost:3000/api/v1\n```\n\nFor API documentation, visit:\n\n```\nhttp://localhost:3000/api-docs\n```\n\n### Example API Endpoints\n\n```\n# Authentication\nPOST /api/v1/auth/login\nGET /api/v1/auth/me\n\n# Routes\nGET /api/v1/routes\nGET /api/v1/routes/:routeId\nGET /api/v1/routes/search?source=Kempegowda&destination=Electronic\n\n# Stops\nGET /api/v1/stops\nGET /api/v1/stops/:stopId\nGET /api/v1/stops/near?lat=12.9767&lng=77.5713&radius=500\nGET /api/v1/stops/search?query=Lalbagh\n\n# Bus Locations\nGET /api/v1/bus-locations\nGET /api/v1/bus-locations/:busId\nGET /api/v1/bus-locations/near?lat=12.9767&lng=77.5713&radius=1000\n\n# ETA\nGET /api/v1/eta/:stopId\nGET /api/v1/eta/:stopId/:routeId\n```\n\n## API Keys\n\n### JWT Secret\n\nThe JWT secret is used for signing authentication tokens. Generate a secure random string:\n\n```bash\nnode -e \"console.log(require('crypto').randomBytes(32).toString('hex'))\"\n```\n\nAdd this to your `.env` file:\n\n```\nJWT_SECRET=your_generated_secret_here\n```\n\n### BMTC API Key\n\nFor development, you can use mock data without an actual BMTC API key:\n\n```\nBMTC_API_ENDPOINT=https://bmtc-api-endpoint.example\nBMTC_API_KEY=your_bmtc_api_key_here\n```\n\nFor production, you would need to contact BMTC directly to request official API access.\n\n## Development\n\n### Testing\n\nRun the tests:\n\n```bash\nnpm test\n```\n\nRun tests with coverage:\n\n```bash\nnpm run test:coverage\n```\n\n### Linting\n\nCheck code style:\n\n```bash\nnpm run lint\n```\n\nFix code style issues:\n\n```bash\nnpm run lint:fix\n```\n\n### Project Structure\n\n```\nbengaluru-bmtc-mcp/\n├── .env.example            # Environment variables template\n├── .eslintrc.json          # ESLint configuration\n├── .github/                # GitHub configuration\n│   └── workflows/          # GitHub Actions workflows\n├── .gitignore              # Git ignore file\n├── CONTRIBUTING.md         # Contribution guidelines\n├── Dockerfile              # Docker configuration\n├── LICENSE                 # MIT License\n├── README.md               # Project documentation\n├── docker-compose.yml      # Docker Compose configuration\n├── docs/                   # Documentation\n│   ├── api.md              # API documentation\n│   └── setup.md            # Setup guide\n├── jest.config.js          # Jest configuration\n├── package.json            # Project dependencies\n└── src/                    # Source code\n    ├── config/             # Configuration files\n    ├── controllers/        # Request handlers\n    ├── index.js            # Application entry point\n    ├── middlewares/        # Express middlewares\n    ├── models/             # MongoDB models\n    ├── public/             # Static files\n    ├── routes/             # API routes\n    ├── scripts/            # Utility scripts\n    ├── services/           # External service integrations\n    ├── tests/              # Test files\n    └── utils/              # Utility functions\n```\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Acknowledgements\n\n- [Bangalore Metropolitan Transport Corporation (BMTC)](https://mybmtc.karnataka.gov.in)\n- [Singapore LTA MCP Implementation](https://github.com/arjunkmrm/mcp-sg-lta) for inspiration\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bmtc",
        "bangalore",
        "bus",
        "bengaluru bmtc",
        "bmtc mcp",
        "transit data"
      ],
      "category": "weather-and-location-data"
    },
    "akaramanapp--weather-mcp-server": {
      "owner": "akaramanapp",
      "name": "weather-mcp-server",
      "url": "https://github.com/akaramanapp/weather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/akaramanapp.webp",
      "description": "Provides real-time weather information and alerts for any US location using data from the National Weather Service API. Delivers detailed forecasts including temperature, wind conditions, and short descriptions of the weather.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-29T11:33:36Z",
      "readme_content": "# Weather MCP Server\n\nA Model Context Protocol (MCP) server that provides weather information and alerts for US locations using the National Weather Service (NWS) API. This server is designed to be used by AI agents through the Model Context Protocol.\n\n## Features\n\n- Tool for getting weather alerts for any US state\n- Tool for getting detailed weather forecasts for any US location using coordinates\n- Supports temperature, wind conditions, and short forecast descriptions\n- Real-time data from the National Weather Service\n\n## Prerequisites\n\n- Node.js (v16 or higher)\n- npm or yarn package manager\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/akaramanapp/weather-mcp-server.git\ncd weather-mcp-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the application:\n```bash\nnpm run build\n```\n\n## MCP Tools\n\nThe server provides two MCP tools that can be used by AI agents:\n\n### get-alerts\n\nGet weather alerts for a specific US state.\n\nParameters:\n- `state`: Two-letter state code (e.g., CA, NY)\n\nExample response:\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Active alerts for CA: ...\"\n    }\n  ]\n}\n```\n\n### get-forecast\n\nGet weather forecast for a specific location using coordinates.\n\nParameters:\n- `latitude`: Latitude of the location (-90 to 90)\n- `longitude`: Longitude of the location (-180 to 180)\n\nExample response:\n```json\n{\n  \"content\": [\n    {\n      \"type\": \"text\",\n      \"text\": \"Morning: Temperature: 72°F, Wind: 5mph NW, Partly cloudy...\"\n    }\n  ]\n}\n```\n\n## Project Structure\n\n```\nweather/\n├── src/\n│   └── index.ts    # Main server code with MCP tool implementations\n├── build/          # Compiled JavaScript files\n├── package.json    # Project dependencies and scripts\n└── tsconfig.json   # TypeScript configuration\n```\n\n## Technical Details\n\n- Built with TypeScript\n- Implements Model Context Protocol (MCP) server\n- Uses @modelcontextprotocol/sdk for MCP server implementation\n- Interfaces with the National Weather Service (NWS) API\n- ES2022 target with Node16 module resolution\n\n## Development\n\nTo modify or extend the server:\n\n1. Make changes in the `src/index.ts` file\n2. Rebuild the application:\n```bash\nnpm run build\n```\n\n## Dependencies\n\n- @modelcontextprotocol/sdk: MCP server implementation framework\n- zod: Runtime type checking and validation for tool parameters\n- TypeScript: Development dependency for type safety\n\n## License\n\nISC\n\n## Notes\n\n- This server only works for US locations as it uses the National Weather Service API\n- API requests are rate-limited and require a User-Agent header\n- All coordinates should be in decimal degrees format\n- This is not a standalone CLI application, but rather a server that provides tools for AI agents through the Model Context Protocol ",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "akaramanapp",
        "weather",
        "forecasts",
        "akaramanapp weather",
        "weather information",
        "data akaramanapp"
      ],
      "category": "weather-and-location-data"
    },
    "akramsheriff5--MCP-Server": {
      "owner": "akramsheriff5",
      "name": "MCP-Server",
      "url": "https://github.com/akramsheriff5/MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/akramsheriff5.webp",
      "description": "Provides real-time weather alerts and detailed forecasts for US states, along with capabilities for support ticket creation. Offers intraday stock market data, technical analysis, and trade recommendations through integrated APIs.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-06T12:22:08Z",
      "readme_content": "## Features\nLightweight programs that each expose specific capabilities through the standardized Model Context Protocol\n\n\n### Weather Server\n- **Weather Alerts**: Fetch active weather alerts for a specific US state.\n- **Weather Forecast**: Retrieve detailed weather forecasts for a given location.\n- **Freshdesk Integration**: Create support tickets in Freshdesk.\n\n### Finance Module\n- **Intraday Market Data**: Fetch intraday stock market data using the AlphaVantage API.\n- **Technical Analysis**:\n  - Calculate moving averages (short and long periods).\n  - Compute Relative Strength Index (RSI).\n- **Trade Recommendations**: Generate comprehensive trade recommendations based on technical indicators.\n\n## Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/your-username/mcp-weather-server.git\n   cd mcp-weather-server\n   ```\n\n2. Set up a Python virtual environment:\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   ```\n\n3. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n\n4. Navigate to the `finance` module and install its dependencies:\n   ```bash\n   cd finance\n   pip install -r requirements.txt\n   ```\n\n## Running the Project\n\n### Weather Server\nRun the weather server:\n```bash\npython main.py\n```\n\n### Finance Server\nRun the finance server:\n```bash\ncd finance\npython finance_server.py\n```\n\n### Weather Demo\nRun the weather demo server:\n```bash\npython weather-demo.py\n```",
      "npm_url": "https://www.npmjs.com/package/mcp-server",
      "npm_downloads": 29732,
      "keywords": [
        "akramsheriff5",
        "mcp",
        "forecasts",
        "akramsheriff5 mcp",
        "mcp server",
        "weather alerts"
      ],
      "category": "weather-and-location-data"
    },
    "amanasmuei--mcp-server-malaysia-prayer-time": {
      "owner": "amanasmuei",
      "name": "mcp-server-malaysia-prayer-time",
      "url": "https://github.com/amanasmuei/mcp-server-malaysia-prayer-time",
      "imageUrl": "/freedevtools/mcp/pfp/amanasmuei.webp",
      "description": "Retrieve accurate Islamic prayer times for various locations in Malaysia, list available zones, and check current prayer statuses.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-21T01:47:09Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/amanasmuei-mcp-server-malaysia-prayer-time-badge.png)](https://mseep.ai/app/amanasmuei-mcp-server-malaysia-prayer-time)\n\n<div align=\"center\">\n  \n</div>\n\n<p align=\"center\">\n  <a href=\"#features\">Features</a> •\n  <a href=\"#installation\">Installation</a> •\n  <a href=\"#configuration\">Configuration</a> •\n  <a href=\"#usage\">Usage</a> •\n  <a href=\"#api-reference\">API Reference</a> •\n  <a href=\"#troubleshooting\">Troubleshooting</a> •\n  <a href=\"#contributing\">Contributing</a> •\n  <a href=\"#license\">License</a>\n</p>\n\n---\n\n## Overview\n\nMalaysia Prayer Time MCP Server provides accurate Islamic prayer times for locations throughout Malaysia. This server implements the Model Context Protocol (MCP) to seamlessly integrate with Claude Desktop, delivering real-time prayer schedules directly through your AI assistant.\n\nThe server utilizes the waktusolat.app API to retrieve JAKIM-verified prayer times and supports searching by city, zone code, or coordinates.\n\n## Features\n\n✅ **Location-Based Times**: Get prayer times for any city or district in Malaysia  \n✅ **Coordinate Support**: Find prayer times using latitude and longitude coordinates  \n✅ **Zone Code Access**: Directly query using JAKIM zone codes (e.g., `SGR03` for Kuala Lumpur)  \n✅ **Complete Prayer Schedule**: Retrieve all daily prayer times (Fajr, Sunrise, Dhuhr, Asr, Maghrib, Isha)  \n✅ **Current Prayer Status**: Determine the current and next prayer times  \n✅ **Robust Error Handling**: Graceful handling of network issues and API changes  \n✅ **Seamless Claude Integration**: Clean integration with Claude Desktop via MCP  \n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- Claude Desktop (latest version)\n- `pip` or `uv` package manager\n\n### Option 1: Installation from GitHub\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-server-malaysia-prayer-time.git\ncd mcp-server-malaysia-prayer-time\n\n# Create and activate a virtual environment\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -e .\n```\n\n### Option 2: Using uv (Recommended)\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/mcp-server-malaysia-prayer-time.git\ncd mcp-server-malaysia-prayer-time\n\n# Create and activate a virtual environment using uv\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv pip install -e .\n```\n\n## Configuration\n\n### Configure Claude Desktop\n\n1. Create or edit the Claude Desktop configuration file:\n\n**macOS**:\n```bash\nmkdir -p ~/Library/Application\\ Support/Claude/\nnano ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n```\n\n**Windows**:\n```bash\nmkdir -p %APPDATA%\\Claude\nnotepad %APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n2. Add the following configuration (adjust paths according to your setup):\n\n```json\n{\n    \"mcpServers\": {\n        \"malaysia-prayer-time\": {\n            \"command\": \"/absolute/path/to/your/.venv/bin/python\",\n            \"args\": [\n                \"main.py\"\n            ],\n            \"cwd\": \"/absolute/path/to/mcp-server-malaysia-prayer-time\"\n        }\n    }\n}\n```\n\n3. Restart Claude Desktop completely\n\n## Usage\n\nOnce configured, you can interact with prayer times through Claude Desktop using natural language queries:\n\n### Examples\n\n#### Get Prayer Times by City/Zone\n\n- \"What are the prayer times for Kuala Lumpur today?\"\n- \"Show prayer times for Ipoh, Malaysia\"\n- \"Get prayer times for PRK02\" (using zone code)\n\n#### Get Prayer Times by Coordinates\n\n- \"What are the prayer times at coordinates 3.1390, 101.6869?\"\n- \"Show prayer schedule for location 5.4141, 100.3288\"\n\n#### List Available Zones\n\n- \"List all prayer time zones in Malaysia\"\n- \"Show me all available JAKIM zone codes\"\n\n## API Reference\n\n### Available Tools\n\nThe MCP server exposes the following tools to Claude:\n\n#### `get_prayer_times`\n\nRetrieves prayer times for a specific city or zone code in Malaysia.\n\n**Parameters**:\n- `city` (string, default: \"kuala lumpur\"): City name or zone code (e.g., \"SGR03\")\n- `country` (string, default: \"malaysia\"): Currently only supports \"malaysia\"\n- `date` (string, default: \"today\"): Date in YYYY-MM-DD format or \"today\"\n\n#### `get_prayer_times_by_coordinates`\n\nRetrieves prayer times based on geographic coordinates.\n\n**Parameters**:\n- `latitude` (float): Latitude coordinate\n- `longitude` (float): Longitude coordinate\n- `date` (string, default: \"today\"): Date in YYYY-MM-DD format or \"today\"\n\n#### `list_zones`\n\nLists all available prayer time zones in Malaysia with their corresponding codes.\n\n### Prayer Time Information\n\nThe server provides these prayer times:\n- Imsak (pre-dawn meal time, if available)\n- Fajr (dawn prayer)\n- Syuruk/Sunrise\n- Dhuhr (noon prayer)\n- Asr (afternoon prayer)\n- Maghrib (sunset prayer)\n- Isha (night prayer)\n\n## Zone Coverage\n\nThe server currently supports all JAKIM zones in Malaysia. The coordinate-based lookup supports these major areas:\n\n- Kuala Lumpur/Selangor: SGR01-SGR04\n- Perak: PRK01-PRK04\n- Penang: PNG01\n- Johor: JHR01\n- Kedah: KDH01\n- Terengganu: TRG01\n- Kelantan: KTN01\n- Melaka: MLK01\n\n## Troubleshooting\n\n### Common Issues\n\n#### Claude Cannot Connect to the Server\n\n1. Verify configuration paths are absolute and correct\n2. Check Claude logs:\n   ```bash\n   # macOS\n   tail -f ~/Library/Logs/Claude/mcp*.log\n   \n   # Windows\n   type %APPDATA%\\Claude\\Logs\\mcp*.log\n   ```\n\n3. Test the server directly:\n   ```bash\n   cd /path/to/mcp-server-malaysia-prayer-time\n   python main.py\n   ```\n\n#### No Prayer Times Available\n\n1. Verify internet connectivity\n2. Check if the zone code is valid (use `list_zones`)\n3. The API may be temporarily unavailable - try again later\n\n#### City Not Found\n\nTry using a different spelling, a nearby major city, or the appropriate zone code\n\n## Contributing\n\nContributions are welcome! Here's how you can contribute:\n\n1. Fork the repository\n2. Create a feature branch: `git checkout -b feature/amazing-feature`\n3. Commit your changes: `git commit -m 'Add some amazing feature'`\n4. Push to the branch: `git push origin feature/amazing-feature`\n5. Open a Pull Request\n\n### Development Setup\n\n```bash\n# Clone your fork\ngit clone https://github.com/yourusername/mcp-server-malaysia-prayer-time.git\ncd mcp-server-malaysia-prayer-time\n\n# Set up development environment\npython -m venv .venv\nsource .venv/bin/activate\npip install -e \".[dev]\"  # Installs dev dependencies\n\n# Run tests\npytest\n```\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- [waktusolat.app](https://waktusolat.app/) - For providing the prayer time data API\n- [Model Context Protocol](https://modelcontextprotocol.io/) - For the MCP framework\n- JAKIM - For the official prayer times\n- Claude Desktop - For the AI integration platform\n\n---\n\n<div align=\"center\">\n  <p>Created by <a href=\"https://github.com/amanasmuei\">abdul rahman m asmuei</a></p>\n  <p>amanasmuei@gmail.com</p>\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "malaysia",
        "amanasmuei",
        "prayer",
        "malaysia prayer",
        "malaysia list",
        "server malaysia"
      ],
      "category": "weather-and-location-data"
    },
    "asifdotpy--MCP-Weather-Server": {
      "owner": "asifdotpy",
      "name": "MCP-Weather-Server",
      "url": "https://github.com/asifdotpy/MCP-Weather-Server",
      "imageUrl": "/freedevtools/mcp/pfp/asifdotpy.webp",
      "description": "Fetch real-time weather alerts and forecasts for any location in the United States using state codes or geographic coordinates. Access detailed weather information with structured logging and robust error handling.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-24T04:24:09Z",
      "readme_content": "# Weather Information Service\n\nThis project provides a service to fetch weather information, including alerts and forecasts, from the National Weather Service (NWS) API.\n\n## Project Structure\n\n*   `main.py`: A simple entry point for the project. (Currently, it only prints a hello message).\n*   `weather.py`: This is the core of the project. It implements the `WeatherService` which uses the `FastMCP` framework to expose tools for fetching weather data. It includes structured JSON logging and communicates with the NWS API.\n*   `smithery.yaml`: This is a configuration file for Smithery, a tool used to define how to run and interact with the `WeatherService`.\n*   `Dockerfile`: Suggests that the project can be containerized using Docker.\n*   `pyproject.toml`: Defines project metadata and dependencies for Python projects.\n*   `.gitignore`: Specifies intentionally untracked files that Git should ignore.\n*   `.python-version`: Specifies the Python version for the project (likely for use with tools like `pyenv`).\n*   `uv.lock`: A lock file generated by the `uv` Python package installer and resolver, ensuring reproducible builds.\n\n(Further sections on WeatherService tools, running the project, and logging will be added in subsequent steps).\n\n## WeatherService Tools\n\nThe `weather.py` script provides a `WeatherService` with the following tools:\n\n### `get_alerts(state: str) -> str`\n\n*   **Purpose:** Fetches active weather alerts for a given US state.\n*   **Arguments:**\n    *   `state` (str): A two-letter US state code (e.g., `CA`, `NY`).\n*   **Output:** A string containing formatted weather alerts, or a message if no alerts are found or an error occurs.\n    *   **Example (successful alert fetch):**\n        ```\n        Event: Special Weather Statement\n        Area: San Francisco Bay Shoreline\n        Severity: Minor\n        Description: ...\n        Instructions: ...\n        ---\n        Event: Coastal Flood Advisory\n        Area: North Bay Interior Valleys\n        Severity: Moderate\n        Description: ...\n        Instructions: ...\n        ```\n    *   **Example (no alerts):**\n        ```\n        No active alerts for this state.\n        ```\n    *   **Example (error):**\n        ```\n        Unable to fetch alerts or no alerts found.\n        ```\n\n### `get_forecast(latitude: float, longitude: float) -> str`\n\n*   **Purpose:** Fetches the weather forecast for a specific geographical location.\n*   **Arguments:**\n    *   `latitude` (float): The latitude of the location.\n    *   `longitude` (float): The longitude of the location.\n*   **Output:** A string containing the formatted weather forecast for the next 5 periods, or a message if the forecast cannot be fetched.\n    *   **Example (successful forecast fetch):**\n        ```\n        Tonight:\n        Temperature: 55°F\n        Wind: 5 to 10 mph W\n        Forecast: Mostly clear, with a low around 55. West wind 5 to 10 mph.\n        ---\n        Wednesday:\n        Temperature: 70°F\n        Wind: 5 to 15 mph W\n        Forecast: Sunny, with a high near 70. West wind 5 to 15 mph, with gusts as high as 20 mph.\n        ... (up to 5 periods)\n        ```\n    *   **Example (error):**\n        ```\n        Unable to fetch forecast data for this location.\n        ```\n\n## Running the Project\n\nThe project is designed to be run as a service, likely using the `FastMCP` framework and the provided `smithery.yaml` configuration.\n\n1.  **Prerequisites:**\n    *   Python 3.x\n    *   The `httpx` library (and other dependencies as defined in `pyproject.toml`). You can typically install these using pip:\n        ```bash\n        pip install httpx\n        # Or, if using a full project setup with pyproject.toml\n        pip install .\n        ```\n\n2.  **Running the Service:**\n    The `weather.py` script can be executed directly to start the service. Given the `smithery.yaml` file, the intended way to run this is likely:\n    ```bash\n    python weather.py\n    ```\n    This will start the `FastMCP` server, which will listen for requests (e.g., via stdio as configured in `smithery.yaml`).\n\n    If you have Smithery installed, you might also be able to run it using Smithery commands, but running `weather.py` directly should work for local development and testing.\n\n    The `main.py` script is a simple entry point and does not run the main weather service.\n\n## Logging\n\nThe `WeatherService` in `weather.py` uses structured JSON logging. This is particularly useful for production environments where logs might be ingested by log management systems.\n\nKey features of the logging implementation:\n\n*   **JSON Format (Production):** When the `ENV` environment variable is set to `production`, logs are output in JSON format. Each log entry includes:\n    *   `timestamp`\n    *   `level` (e.g., INFO, ERROR)\n    *   `logger` (logger name, e.g., `WeatherService`)\n    *   `message`\n    *   `correlation_id` (tracks a logical operation or flow)\n    *   `request_id` (tracks individual requests)\n    *   `user_id`\n    *   `file` and `lineno` (source of the log)\n    *   `function` (function name where the log occurred)\n    *   `process` and `thread`\n    *   `environment` (from `ENV` variable)\n    *   `app_version` (from `APP_VERSION` variable)\n    *   `host` (from `HOSTNAME` variable)\n    *   `duration` (for operations, if applicable)\n    *   `error_details` (stack trace if an exception occurred)\n*   **Readable Format (Development):** If `ENV` is not set to `production` (or is set to something else like `development`), logs are output in a more human-readable, plain text format.\n*   **Configurable Log Level:** The log level can be configured using the `LOG_LEVEL` environment variable (e.g., `INFO`, `DEBUG`, `ERROR`). The default is `INFO`.\n*   **Contextual Information:** Logging includes `correlation_id`, `request_id`, and `user_id` to help trace operations through the system.\n\n### Environment Variables for Logging:\n\n*   `LOG_LEVEL`: Sets the logging verbosity (e.g., `DEBUG`, `INFO`, `WARNING`, `ERROR`). Defaults to `INFO`.\n*   `ENV`: Set to `production` for JSON logging. Defaults to `development` for readable logs.\n*   `APP_VERSION`: Sets the application version in logs. Defaults to `0.1.0`.\n*   `HOSTNAME`: Sets the hostname in logs. Defaults to `localhost`.\n",
      "npm_url": "https://www.npmjs.com/package/mcp-weather-server",
      "npm_downloads": 362,
      "keywords": [
        "weather",
        "mcp",
        "forecasts",
        "weather server",
        "weather information",
        "mcp weather"
      ],
      "category": "weather-and-location-data"
    },
    "baranwang--mcp-tung-shing": {
      "owner": "baranwang",
      "name": "mcp-tung-shing",
      "url": "https://github.com/baranwang/mcp-tung-shing",
      "imageUrl": "/freedevtools/mcp/pfp/baranwang.webp",
      "description": "Provides calculations for traditional Chinese almanac, including lunar calendar conversions and daily auspicious activities. Offers detailed information on Chinese metaphysics elements to assist in decision-making.",
      "stars": 31,
      "forks": 10,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-20T12:36:25Z",
      "readme_content": "# 通胜 MCP 服务\n\n[![smithery badge](https://smithery.ai/badge/@baranwang/mcp-tung-shing)](https://smithery.ai/server/@baranwang/mcp-tung-shing)\n[![NPM Version](https://img.shields.io/npm/v/mcp-tung-shing.svg)](https://www.npmjs.com/package/mcp-tung-shing)\n[![License](https://img.shields.io/npm/l/mcp-tung-shing.svg)](https://github.com/baranwang/mcp-tung-shing/blob/main/LICENSE)\n\n简体中文 | [English](./README.en.md)\n\n> 中国传统黄历（通胜）计算服务，基于 Model Context Protocol (MCP)\n\n## ✨ 功能特点\n\n- 📅 **公历农历转换** - 支持公历与农历日期的相互转换\n- 🍀 **每日宜忌** - 提供每日吉凶、宜忌活动的详细信息\n- 🕐 **时辰信息** - 十二时辰（子、丑、寅等）的吉凶宜忌\n- 🔮 **命理元素** - 五行、神煞、星宿等传统命理学详细数据\n\n## 🚀 安装与使用\n\n在你的 MCP 配置文件中添加以下内容：\n\n```json\n{\n  \"mcpServers\": {\n    \"tung-shing\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-tung-shing@latest\"]\n    }\n  }\n}\n```\n\n## ⚙️ 工具\n\n### get-tung-shing\n\n获取指定日期的黄历信息\n\n**参数:**\n\n| 参数名         | 类型             | 必填 | 默认值 | 描述                                  |\n| -------------- | ---------------- | ---- | ------ | ------------------------------------- |\n| `startDate`    | string           | 否   | 当天   | 开始日期，格式：\"YYYY-MM-DD\"          |\n| `days`         | number           | 否   | 1      | 获取天数                              |\n| `includeHours` | boolean          | 否   | false  | 是否包含时辰信息                      |\n| `tabooFilters` | array            | 否   | -      | 筛选宜忌事项类型，条件之间为或关系     |\n| `tabooFilters[].type`   | 1 \\| 2  | 是   | -      | 过滤类型：宜(1)、忌(2)                |\n| `tabooFilters[].value`  | string  | 是   | -      | 要筛选的宜忌事项                      |\n\n## 🤝 贡献\n\n欢迎提交 Issues 和 Pull Requests 来完善此项目。\n",
      "npm_url": "https://www.npmjs.com/package/mcp-tung-shing",
      "npm_downloads": 1510,
      "keywords": [
        "shing",
        "almanac",
        "lunar",
        "chinese almanac",
        "lunar calendar",
        "tung shing"
      ],
      "category": "weather-and-location-data"
    },
    "blake365--usgs-quakes-mcp": {
      "owner": "blake365",
      "name": "usgs-quakes-mcp",
      "url": "https://github.com/blake365/usgs-quakes-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/blake365.webp",
      "description": "Access real-time earthquake data from the USGS API, enabling users to query earthquake information based on various parameters and retrieve details about specific events.",
      "stars": 1,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-10T23:31:07Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/blake365-usgs-quakes-mcp-badge.png)](https://mseep.ai/app/blake365-usgs-quakes-mcp)\n\n# usgs-quakes-mcp\n[![smithery badge](https://smithery.ai/badge/@blake365/usgs-quakes-mcp)](https://smithery.ai/server/@blake365/usgs-quakes-mcp)\nClaude MCP server for USGS Quakes API\n\nAn MCP server implementation for providing access to the [USGS Quakes API](https://earthquake.usgs.gov/fdsnws/event/1/) within [Claude Desktop](https://claude.ai/download).\n\n## Overview\n\nThis Model Context Protocol (MCP) server enables AI assistants and applications to:\n\n- Get earthquake data through a wide variety of search parameters\n- Get details about a specific earthquake\n\nUsers can run queries using natural language.\n\n## Sample Output\n\n**Q: find earthquakes over 2 magnitude in florida over the last 20 years**\n\n**A:** I'll help you search for earthquakes in Florida with a magnitude greater than 2.0 over the past 20 years.\n\nView Result from find-earthquakes from usgs-quakes (local)\n\n```json\n{\n  \"endTime\": \"2024-12-28T23:59:59\",\n  \"startTime\": \"2004-12-28T00:00:00\",\n  \"maxLatitude\": 31.000888,\n  \"minLatitude\": 24.396308,\n  \"maxLongitude\": -80.031362,\n  \"minLongitude\": -87.634896,\n  \"minmagnitude\": 2\n}\n```\n\nBased on the USGS earthquake data, there have been three notable earthquakes in or near Florida over the past 20 years:\n\n1. A magnitude 5.9 earthquake in the Gulf of Mexico on September 10, 2006\nLocated offshore at coordinates 26.319°N, 86.606°W\nDepth: 14 km\nThis was the largest earthquake in the region during this period\nIt was widely felt, with 5,763 people reporting feeling the quake\n\n2. A magnitude 2.8 earthquake near Jay, Florida on March 6, 2019\nLocated at coordinates 30.9718°N, 87.1719°W\nDepth: 5 km\n49 people reported feeling this earthquake\n\n\n3. A magnitude 2.7 earthquake near Century, Florida on March 24, 2019\nLocated at coordinates 30.9622°N, 87.2384°W\nDepth: 5 km\n4 people reported feeling this earthquake\n\nIt's worth noting that Florida experiences relatively few earthquakes compared to more seismically active regions of the United States. The two 2019 earthquakes occurred in the Florida panhandle, while the larger 2006 event was offshore in the Gulf of Mexico.\n\n**Q: get the details of the Jay Florida earthquake**\n\n**A:** I'll get the detailed information about the magnitude 2.8 earthquake that occurred near Jay, Florida.\n\nView Result from find-earthquake-details from usgs-quakes (local)\n\n```json\n{\n  \"eventid\": \"us1000jbw4\"\n}\n```\n\nHere are the key details about the Jay, Florida earthquake:\nDate and Time: March 7, 2019, at 04:45:52 UTC\nLocation: 2 km (1.2 miles) Northwest of Jay, Florida\nCoordinates: 30.9718°N, 87.1719°W\nDepth: 5 kilometers (3.1 miles)\nMagnitude: 2.8 mb_lg (body wave magnitude)\n\nAdditional details:\n- 49 people reported feeling the earthquake\n- The Community Internet Intensity Map (CIIM) showed a maximum intensity of 2.7\n- There was no tsunami generated\n- The earthquake was reviewed and confirmed by USGS scientists\n- The location had a horizontal error margin of about 6.2 km\n- The magnitude calculation used data from 11 seismic stations\n- The earthquake was also detected by the New Mexico seismic network (NM), which calculated a slightly different magnitude of 2.63\n\nTechnical measurements:\n\n- Azimuthal gap: 243 degrees (indicates moderate coverage by seismic stations)\n- RMS error: 0.59 (indicates reasonable quality of the location estimate)\n- Minimum distance to nearest station: 0.222 degrees\n- Standard error for magnitude: 0.154\n\nThis was a relatively minor earthquake, but notable for Florida which rarely experiences seismic activity. The fact that it was felt by 49 people suggests it was noticeable to residents in the immediate area, though no significant damage would be expected from an earthquake of this magnitude.\n\n## Installation\n\n### Installing via Smithery\n\nTo install USGS Earthquake Data for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@blake365/usgs-quakes-mcp):\n\n```bash\nnpx -y @smithery/cli install @blake365/usgs-quakes-mcp --client claude\n```\n\n### Manual Installation\nInstalling this might be tricky if you're not familiar with Node.js and the MCP protocol.\n\n1. Install [Node.js](https://nodejs.org/en/download)\n2. Clone this repository to a folder on your local machine\n3. The server is already built so you can skip the build step.\n\n### Extra Steps\n\nIf you want to make changes to the server you can do so by editing the `src/index.ts` file.\n- Run `npm install` to install dependencies\n- Run `npm run build` to build the server\n- Quit and restart Claude Desktop after making changes\n\n\n## Connecting with Claude Desktop\n\n1. Open your Claude Desktop configuration at:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server configuration:\n```json \n{\n    \"mcpServers\": {\n        \"usgs-quakes\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"/Full/Route/to/Folder/usgs-quakes/build/index.js\"\n            ]\n        }\n    }\n}\n```\n\n3. Close/Quit then restart Claude Desktop\n\nOnce you restart you should see a small hammer icon in the lower right corner of the textbox. If you hover over the icon you'll see the number of MCP tools available.\n\n## Troubleshooting\n\nIf you get errors when running the server you may need to provide the full path to the `node` command. For example, on macOS: `/usr/local/bin/node`\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "quakes",
        "earthquake",
        "api",
        "earthquake data",
        "earthquake information",
        "usgs quakes"
      ],
      "category": "weather-and-location-data"
    },
    "briandconnelly--mcp-server-ipinfo": {
      "owner": "briandconnelly",
      "name": "mcp-server-ipinfo",
      "url": "https://github.com/briandconnelly/mcp-server-ipinfo",
      "imageUrl": "/freedevtools/mcp/pfp/briandconnelly.webp",
      "description": "Retrieve detailed information about an IP address to determine geographic location and network details using the IPInfo API.",
      "stars": 34,
      "forks": 12,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-20T20:12:21Z",
      "readme_content": "# IP Geolocation MCP Server\n\nThis is a simple [Model Context Protocol](https://modelcontextprotocol.io) server that uses the [ipinfo.io](https://ipinfo.io) API to get detailed information about an IP address.\nThis can be used to determine where the user is located (approximately) and what network they are used.\n\n<a href=\"https://glama.ai/mcp/servers/pll7u5ak1h\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/pll7u5ak1h/badge\" alt=\"IP Geolocation Server MCP server\" />\n</a>\n\n\n\n\n## Installation\n\nYou'll need to create a token to use the IPInfo API.\nIf you don't already have one, you can sign up for a free account at https://ipinfo.io/signup.\n\nWhile each client has its own way of specifying, you'll generally use the following values:\n\n| Field | Value |\n|-------|-------|\n| **Command** | `uvx` |\n| **Arguments** | `mcp-server-ipinfo` |\n| **Environment** | `IPINFO_API_TOKEN` = `<YOUR TOKEN>` |\n\n\n### Development Version\n\nIf you'd like to use the latest and greatest, the server can be pulled straight from GitHub.\nJust add an additional `--from` argument:\n\n\n| Field | Value |\n|-------|-------|\n| **Command** | `uvx` |\n| **Arguments** | `--from`, `git+https://github.com/briandconnelly/mcp-server-ipinfo`, `mcp-server-ipinfo` |\n| **Environment** | `IPINFO_API_TOKEN` = `<YOUR TOKEN>` |\n\n\n## Components\n\n### Tools\n\n- `get_ip_details`: This tool is used to get detailed information about an IP address.\n    - **Input:** `ip`: The IP address to get information about.\n    - **Output:** `IPDetails`: A Pydantic model containing detailed information about the IP, including location, organization, and country details.\n\n### Resources   \n\n_No custom resources are included_\n\n### Prompts\n\n_No custom prompts are included_\n\n\n## License\n\nMIT License - See [LICENSE](LICENSE) file for details.\n\n## Disclaimer\n\nThis project is not affiliated with [IPInfo](https://ipinfo.io).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ipinfo",
        "ip",
        "mcp",
        "ipinfo retrieve",
        "ipinfo api",
        "using ipinfo"
      ],
      "category": "weather-and-location-data"
    },
    "burningion--geoapify-mcp": {
      "owner": "burningion",
      "name": "geoapify-mcp",
      "url": "https://github.com/burningion/geoapify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/burningion.webp",
      "description": "Convert addresses into GPS coordinates and generate images of those locations using the Geoapify API. Easily create GeoJSON and visualize the mapped locations.",
      "stars": 4,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-16T20:14:07Z",
      "readme_content": "# Geoapify MCP Server\n\nConvert addresses into GPS coordinates for mapping, and optionally create an image of those coordinates using the Geoapify server.\n\n\n\n## Installation\n\nYou'll need to get an API key from [Geoapify](https://www.geoapify.com/), and set it as an environment variable named `GEO_APIKEY`.\n\nYour `claude_desktop_config.json` will look like this after:\n\n```json\n\"MCP Map Demo\": {\n      \"command\": \"uv\",\n      \"args\": [\n\t\"--directory\",\n        \"/PATH/TO/THIS/REPO\",\n        \"run\",\n        \"--with\",\n        \"fastmcp\",\n        \"--with\",\n        \"requests\",\n        \"--with\",\n        \"folio\",\n        \"--with\",\n        \"selenium\",\n        \"--with\",\n        \"pillow\",\n        \"fastmcp\",\n        \"run\",\n        \"/PATH/TO/THIS/REPO/server.py\"\n      ],\n      \"env\": {\n        \"GEO_APIKEY\": \"YOURAPIKEY\"\n      }\n    }\n```\n\nYou'll notice we include all the dependencies in our `args`.\n\n## Tools\n\n`get_gps_coordinates`\n\nUsed to get GPS coordinates from the API for creating GEOJSON, etc.\n\n`create_map_from_geojson`\n\nCreate a map image and show it. (Showing only works on MacOS for now.)\n\n\n## Example Usage\n\n**Get GPS Coordinates** \n\n```\ncan you create a geojson of the following locations including their gps coordinates: 179 avenue du Général Leclerc, côté Rive Gauche\n158 avenue du Général Leclerc, côté Rive Droite à l'angle de la rue Jules Herbron\n112 avenue du Général Leclerc, côté Rive Droite\n34 avenue du Général Leclerc, côté Rive Droite\nEn face du 57 rue Gaston Boissier, à côté de la borne\nRoute du Pavé de Meudon - à côté du chêne de la Vierge\n6 avenue de Versailles (près du centre aquatique des Bertisettes)\n3 places sur parking de la rue Costes et Bellonte\nRue Joseph Chaleil\n18 rue des Sables – à côté de la crèche\n25 sente de la Procession\n33 rue Joseph Bertrand\nPlace Saint Paul\nPlace de la bataille de Stalingrad\nPlacette croisement avenue Pierre Grenier / avenue Robert Hardouin\n107 avenue Gaston Boissier (en face de la caserne des pompiers)\n```\n\n**Result:** [Attached JSON file](./geo.json)\n\nReturns a GeoJSON file.\n\n**Create a Map Image**\n\n```\ncan you create a map from my attached geojson file?\n```\n[Attached JSON file](./geo.json)\n\n**Result:** \n\n## LICENSE\n\nMIT",
      "npm_url": "https://www.npmjs.com/package/geoapify-mcp-server",
      "npm_downloads": 167,
      "keywords": [
        "geoapify",
        "gps",
        "geojson",
        "geoapify mcp",
        "using geoapify",
        "geoapify api"
      ],
      "category": "weather-and-location-data"
    },
    "cablate--mcp-google-map": {
      "owner": "cablate",
      "name": "mcp-google-map",
      "url": "https://github.com/cablate/mcp-google-map",
      "imageUrl": "/freedevtools/mcp/pfp/cablate.webp",
      "description": "Provides integration with Google Maps API for location searches, geocoding addresses, calculating distances, retrieving directions, and obtaining elevation data. Enables applications to access rich geographic data and travel information efficiently.",
      "stars": 113,
      "forks": 40,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T02:14:53Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cablate-mcp-google-map-badge.png)](https://mseep.ai/app/cablate-mcp-google-map)\n\n<a href=\"https://glama.ai/mcp/servers/@cablate/mcp-google-map\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@cablate/mcp-google-map/badge\" alt=\"Google Map Server MCP server\" />\n</a>\n\n# MCP Google Map Server\n\nA powerful Model Context Protocol (MCP) server providing comprehensive Google Maps API integration with streamable HTTP transport support and LLM processing capabilities.\n\n## 🙌 Special Thanks\n\nThis project has received contributions from the community.  \nSpecial thanks to [@junyinnnn](https://github.com/junyinnnn) for helping add support for `streamablehttp`.\n\n## ✅ Testing Status\n\n**This MCP server has been tested and verified to work correctly with:**\n\n- Claude Desktop\n- Dive Desktop\n- MCP protocol implementations\n\nAll tools and features are confirmed functional through real-world testing.\n\n## Features\n\n### 🗺️ Google Maps Integration\n\n- **Location Search**\n\n  - Search for places near a specific location with customizable radius and filters\n  - Get detailed place information including ratings, opening hours, and contact details\n\n- **Geocoding Services**\n\n  - Convert addresses to coordinates (geocoding)\n  - Convert coordinates to addresses (reverse geocoding)\n\n- **Distance & Directions**\n\n  - Calculate distances and travel times between multiple origins and destinations\n  - Get detailed turn-by-turn directions between two points\n  - Support for different travel modes (driving, walking, bicycling, transit)\n\n- **Elevation Data**\n  - Retrieve elevation data for specific locations\n\n### 🚀 Advanced Features\n\n- **Streamable HTTP Transport**: Latest MCP protocol with real-time streaming capabilities\n- **Session Management**: Stateful sessions with UUID-based identification\n- **Multiple Connection Support**: Handle multiple concurrent client connections\n- **Echo Service**: Built-in testing tool for MCP server functionality\n\n## Installation\n\n> ⚠️ **Important Notice**: This server uses HTTP transport, not stdio. Direct npx usage in MCP Server Settings is **NOT supported**.\n\n### Method 1: Global Installation (Recommended)\n\n```bash\n# Install globally\nnpm install -g @cablate/mcp-google-map\n\n# Run the server\nmcp-google-map --port 3000 --apikey \"your_api_key_here\"\n\n# Using short options\nmcp-google-map -p 3000 -k \"your_api_key_here\"\n```\n\n### Method 2: Using npx (Quick Start)\n\n> ⚠️ **Warning**: Cannot be used directly in MCP Server Settings with stdio mode\n\n**Step 1: Launch HTTP Server in Terminal**\n\n```bash\n# Run in a separate terminal\nnpx @cablate/mcp-google-map --port 3000 --apikey \"YOUR_API_KEY\"\n\n# Or with environment variable\nGOOGLE_MAPS_API_KEY=YOUR_API_KEY npx @cablate/mcp-google-map\n```\n\n**Step 2: Configure MCP Client to Use HTTP**\n\n```json\n{\n  \"mcp-google-map\": {\n    \"transport\": \"http\",\n    \"url\": \"http://localhost:3000/mcp\"\n  }\n}\n```\n\n### ❌ Common Mistake to Avoid\n\n```json\n// This WILL NOT WORK - stdio mode not supported with npx\n{\n  \"mcp-google-map\": {\n    \"command\": \"npx\",\n    \"args\": [\"@cablate/mcp-google-map\"]\n  }\n}\n```\n\n### Server Information\n\n- **Endpoint**: `http://localhost:3000/mcp`\n- **Transport**: HTTP (not stdio)\n- **Tools**: 8 Google Maps tools available\n\n### API Key Configuration\n\nAPI keys can be provided in three ways (priority order):\n\n1. **HTTP Headers** (Highest priority)\n\n   ```json\n   // MCP Client config\n   {\n     \"mcp-google-map\": {\n       \"transport\": \"streamableHttp\",\n       \"url\": \"http://localhost:3000/mcp\",\n       // if your MCP Client support 'headers'\n       \"headers\": {\n         \"X-Google-Maps-API-Key\": \"YOUR_API_KEY\" \n       }\n     }\n   }\n   ```\n\n2. **Command Line**\n\n   ```bash\n   mcp-google-map --apikey YOUR_API_KEY\n   ```\n\n3. **Environment Variable** (.env file or command line)\n   ```env\n   GOOGLE_MAPS_API_KEY=your_api_key_here\n   MCP_SERVER_PORT=3000\n   ```\n\n## Available Tools\n\nThe server provides the following tools:\n\n### Google Maps Tools\n\n1. **search_nearby** - Search for nearby places based on location, with optional filtering by keywords, distance, rating, and operating hours\n2. **get_place_details** - Get detailed information about a specific place including contact details, reviews, ratings, and operating hours\n3. **maps_geocode** - Convert addresses or place names to geographic coordinates (latitude and longitude)\n4. **maps_reverse_geocode** - Convert geographic coordinates to a human-readable address\n5. **maps_distance_matrix** - Calculate travel distances and durations between multiple origins and destinations\n6. **maps_directions** - Get detailed turn-by-turn navigation directions between two locations\n7. **maps_elevation** - Get elevation data (height above sea level) for specific geographic locations\n\n## Development\n\n### Local Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/cablate/mcp-google-map.git\ncd mcp-google-map\n\n# Install dependencies\nnpm install\n\n# Set up environment variables\ncp .env.example .env\n# Edit .env with your API key\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n\n# Or run in development mode\nnpm run dev\n```\n\n### Project Structure\n\n```\nsrc/\n├── cli.ts                    # Main CLI entry point\n├── config.ts                 # Server configuration\n├── index.ts                  # Package exports\n├── core/\n│   └── BaseMcpServer.ts     # Base MCP server with streamable HTTP\n└── tools/\n    └── maps/                # Google Maps tools\n        ├── toolclass.ts     # Google Maps API client\n        ├── searchPlaces.ts  # Maps service layer\n        ├── searchNearby.ts  # Search nearby places\n        ├── placeDetails.ts  # Place details\n        ├── geocode.ts       # Geocoding\n        ├── reverseGeocode.ts # Reverse geocoding\n        ├── distanceMatrix.ts # Distance matrix\n        ├── directions.ts    # Directions\n        └── elevation.ts     # Elevation data\n```\n\n## Tech Stack\n\n- **TypeScript** - Type-safe development\n- **Node.js** - Runtime environment\n- **Google Maps Services JS** - Google Maps API integration\n- **Model Context Protocol SDK** - MCP protocol implementation\n- **Express.js** - HTTP server framework\n- **Zod** - Schema validation\n\n## Security Considerations\n\n- API keys are handled server-side for security\n- DNS rebinding protection available for production\n- Input validation using Zod schemas\n- Error handling and logging\n\n## License\n\nMIT\n\n## Contributing\n\nCommunity participation and contributions are welcome! Here's how you can contribute:\n\n- ⭐️ Star the project if you find it helpful\n- 🐛 Submit Issues: Report bugs or provide suggestions\n- 🔧 Create Pull Requests: Submit code improvements\n- 📖 Documentation: Help improve documentation\n\n## Contact\n\nIf you have any questions or suggestions, feel free to reach out:\n\n- 📧 Email: [reahtuoo310109@gmail.com](mailto:reahtuoo310109@gmail.com)\n- 💻 GitHub: [CabLate](https://github.com/cablate/)\n- 🤝 Collaboration: Welcome to discuss project cooperation\n- 📚 Technical Guidance: Sincere welcome for suggestions and guidance\n\n## Changelog\n\n### v0.0.18 (Latest)\n\n- **Error response improvements**: Now all error messages are in English with more detailed information (previously in Chinese)\n\n### v0.0.17\n\n- **Added HTTP Header Authentication**: Support for passing API keys via `X-Google-Maps-API-Key` header in MCP Client config\n- **Fixed Concurrent User Issues**: Each session now uses its own API key without conflicts\n- **Fixed npx Execution**: Resolved module bundling issues\n- **Improved Documentation**: Clearer setup instructions\n\n### v0.0.14\n\n- Added streamable HTTP transport support\n- Improved CLI interface with emoji indicators\n- Enhanced error handling and logging\n- Added comprehensive tool descriptions for LLM integration\n- Updated to latest MCP SDK version\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=cablate/mcp-google-map&type=Date)](https://www.star-history.com/#cablate/mcp-google-map&Date)\n",
      "npm_url": "https://www.npmjs.com/package/@cablate/mcp-google-map",
      "npm_downloads": 10167,
      "keywords": [
        "geocoding",
        "maps",
        "map",
        "google maps",
        "google map",
        "maps api"
      ],
      "category": "weather-and-location-data"
    },
    "cgoinglove--mcp-server-kakao-map": {
      "owner": "cgoinglove",
      "name": "mcp-server-kakao-map",
      "url": "https://github.com/cgoinglove/mcp-server-kakao-map",
      "imageUrl": "/freedevtools/mcp/pfp/cgoinglove.webp",
      "description": "Provides location-based recommendations for various places in South Korea using the Kakao Map API. It can suggest restaurants, shops, public facilities, and tourist attractions based on user queries in Korean.",
      "stars": 11,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-29T08:17:04Z",
      "readme_content": "Kakao Map MCP Server\n\n한국어 | [English](./docs/en.md)\n\n카카오맵 API를 활용하여 대한민국 내 위치 기반 장소 추천을 제공하는 MCP 서버입니다. 한국어 쿼리에 최적화되어 있습니다.\n\n\n\n## Tool: kakao_map_place_recommender\n\n설명: 사용자 질의에 따라 대한민국 내 다양한 관련 장소(예: 식당, 상점, 공공시설, 관광명소)를 추천합니다. 카카오맵 API 키워드 검색을 사용합니다.\n\n- `query` (필수): 장소 유형 및 위치를 설명하는 한국어 키워드. 예시: '이태원 맛집', '서울 병원', '강남역 근처 카페'.\n\n## Configuration\n\n### 환경 변수\n\n- `KAKAO_API_KEY`: 카카오 API 키 (필수)\n\n1.  **애플리케이션 등록**: [카카오 디벨로퍼스](https://developers.kakao.com/)에 로그인하고, 아직 애플리케이션이 없다면 [새로 만듭니다](https://developers.kakao.com/docs/latest/ko/getting-started/quick-start#create).\n2.  **REST API 키 확인**: 애플리케이션 설정(`[내 애플리케이션] > [앱 설정] > [요약 정보]`)으로 이동합니다. 제공된 여러 키 중에서 **REST API 키**를 찾아 복사합니다. 이 도구에는 이 특정 키가 필요합니다.\n3.  **카카오맵 API 활성화**: 애플리케이션에 카카오맵 API가 활성화되어 있는지 확인합니다. `[내 애플리케이션] > [카카오맵] > [활성화 설정]`으로 이동하여 `[상태]`를 `ON`으로 설정합니다. (_참고: 기존 앱에 API를 추가하는 경우, 추가적인 권한 신청 및 승인이 필요할 수 있습니다._)\n4.  **참고**: 자세한 내용은 공식 문서를 참조하세요: [카카오 로컬 API 공통 가이드](https://developers.kakao.com/docs/latest/ko/local/common).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kakao",
        "korea",
        "korean",
        "kakao map",
        "server kakao",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "daniel8824-del--forest-fire-mcp": {
      "owner": "daniel8824-del",
      "name": "forest-fire-mcp",
      "url": "https://github.com/daniel8824-del/forest-fire-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/daniel8824-del.webp",
      "description": "Collect and analyze wildfire occurrence data, providing regional information and risk analysis, along with map visualizations to enhance awareness and response strategies.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-08T02:03:52Z",
      "readme_content": "# 산불 정보 시각화 MCP 서버\n\n## 소개\n이 프로젝트는 산불 발생 데이터를 수집, 분석하고 지도에 시각화하는 Python 기반 MCP 서버입니다. \n사용자는 지역별 산불 발생 정보, 위험도 분석, 지도 시각화 등 다양한 기능을 이용할 수 있습니다.\n_______________________________________________________________________________________\n\n## 폴더 구조\n```\nMCP/\n├── README.md                    # 프로젝트 설명 문서\n├── forest_fire_mcp_server.py    # MCP 서버 메인 파일\n├── forest_fire_data.py          # 데이터 처리 모듈\n├── forest_fire_data.json        # 산불 데이터 파일\n├── claude_desktop_config.json   # Claude 설정 파일\n├── data/                        # 산불 데이터 저장 폴더\n└── venv/                        # 가상환경 폴더(필요 시)\n```\n_______________________________________________________________________________________\n\n## 설치 요구사항\n\n### Python 설치하기\n파이썬이 설치되어 있지 않은 경우 다음 단계를 따라 설치하세요:\n\n1. [Python 공식 웹사이트](https://www.python.org/downloads/)에 접속합니다.\n2. 페이지 상단의 노란색 버튼 \"Download Python X.X.X\"를 클릭하여 최신 버전을 다운로드합니다.\n3. 다운로드된 설치 프로그램을 실행합니다.\n4. 설치 화면에서 가장 중요한 부분은 **\"Add Python.exe to PATH\"** 옵션입니다.\n   - 이 옵션을 반드시 체크해주세요! (화면 하단의 체크박스)\n   - 이 설정은 명령 프롬프트에서 Python을 실행할 수 있게 해줍니다.\n5. \"Install Now\"를 클릭하여 설치를 진행합니다.\n6. 설치가 완료되면 \"Close\" 버튼을 클릭합니다.\n_______________________________________________________________________________________\n\n### Python 설치 확인하기\n1. 키보드의 `Windows 키 + R`을 누릅니다.\n2. 실행 창에 `cmd`를 입력하고 확인을 클릭합니다.\n3. 열린 명령 프롬프트 창에 다음 명령어를 입력하고 Enter를 누릅니다:\n   ```\n   python --version\n   ```\n4. Python 버전이 표시되면 설치가 성공적으로 완료된 것입니다.\n   예시: `Python 3.12.0`\n_______________________________________________________________________________________\n\n### 필요한 패키지 설치하기\nPython이 설치되었다면, 필요한 패키지들을 설치해야 합니다:\n\n1. Cursor AI 메뉴 터미널에서 New Terminal을 클릭합니다.\n2. 다음 명령어를 입력하고 Enter를 누릅니다:\n   ```\n   pip install mcp httpx requests\n   ```\n3. 설치가 진행되는 동안 기다립니다. \n4. 만약 오류가 발생하면, 다음 명령어를 대신 시도해보세요:\n   ```\n   pip install --user mcp httpx requests\n   ```\n_______________________________________________________________________________________\n\n### Python 인터프리터 설정하기\n만약 패키지 설치 후에도 오류가 발생한다면, Python 인터프리터 설정을 확인해보세요:\n\n1. `Ctrl + Shift + P`를 눌러 명령 팔레트를 엽니다.\n2. \"Python: Select Interpreter\" 입력 후 선택합니다.\n3. 가상환경 인터프리터를 선택합니다:\n   - `./venv/Scripts/python.exe`\n_______________________________________________________________________________________\n\n## 프로젝트 파일 설정하기\n\n### 프로젝트 파일 준비\n1. 이 저장소의 모든 파일을 컴퓨터의 원하는 위치에 다운로드합니다.\n2. 예: `C:\\Users\\사용자이름\\Desktop\\MCP` 폴더 생성 후 파일 복사\n\n### 데이터 파일 확인\n1. `forest_fire_data.json` 파일이 폴더 안에 있는지 확인합니다.\n2. 이 파일은 산불 데이터를 포함하고 있는 중요한 파일입니다.\n\n### 서버 설정 파일 수정\n1. `forest_fire_mcp_server.py` 파일을 메모장으로 엽니다.\n2. `FOREST_FIRE_DATA_PATH` 변수를 찾아 실제 경로로 수정합니다:\n```python\n# 예시:\nFOREST_FIRE_DATA_PATH = \"C:/Users/사용자이름/Desktop/MCP/forest_fire_data.json\"\n```\n3. 파일을 저장하고 닫습니다.\n_______________________________________________________________________________________\n\n## 서버 실행하기\n\n### 실행 방법 1: 코드 옆 실행 버튼 사용\n1. `forest_fire_mcp_server.py` 파일을 엽니다.\n2. 파일 내용 왼쪽에 표시되는 ▶️ (실행) 버튼을 클릭합니다.\n   - Cursor AI가 자동으로 Python 스크립트를 실행합니다.\n   - 별도의 명령어 입력이 필요 없습니다.\n\n### 실행 방법 2: 터미널에서 직접 실행\n1. Cursor AI 메뉴 터미널에서 New Terminal을 클릭합니다.\n2. 다음 명령어를 입력하고 Enter를 누릅니다:\n   ```\n   python forest_fire_mcp_server.py\n   ```\n\n### 서버 실행 확인\n1. 다음과 같은 메시지가 표시되면 성공:\n```\n산불정보 시각화 MCP 서버가 시작되었습니다.\n```\n2. 이 터미널을 닫지 마세요! 서버가 실행 중인 상태를 유지해야 합니다.\n_______________________________________________________________________________________\n\n## Claude 데스크톱 앱 설정하기\n\n### Claude 데스크톱 앱 설치\n1. [Claude 데스크톱 앱 다운로드 페이지](https://claude.ai/desktop)에서 설치 파일을 다운로드합니다.\n2. 다운로드된 설치 파일을 실행합니다.\n3. 설치 마법사의 지시를 따라 설치를 완료합니다.\n\n### Claude MCP 설정하기\n1. Claude 앱을 실행합니다.\n2. 우측 상단의 파일 메뉴에서 설정(⚙️) 아이콘을 클릭합니다.\n3. 왼쪽 메뉴에서 '개발자' 탭을 선택합니다.\n4. '설정 편집'을 클릭하여 `C:/Users/사용자이름/Desktop/MCP/claude_desktop_config.json` 파일을 지정합니다.\n\n### Claude 데스크톱 앱 재시작\n1. Claude 데스크톱 앱을 완전히 종료했다가 다시 실행합니다.\n2. 우측 상단에 망치 🔨 아이콘이 표시되면 MCP 서버와 연결이 성공한 것입니다.\n   - 망치 아이콘이 회색이면 MCP 서버가 실행되지 않은 상태입니다.\n   - 망치 아이콘이 파란색이면 MCP 서버가 정상적으로 연결된 상태입니다.\n_______________________________________________________________________________________\n\n## 주요 기능 사용하기\nClaude 앱에서 다음과 같은 명령어를 입력하여 서버의 기능을 사용할 수 있습니다:\n\n1. **산불 데이터 조회**:\n   ```\n   강원도의 2021년 산불 데이터를 알려줘\n   ```\n2. **산불 위험도 분석**:\n   ```\n   강원도 고성 지역의 산불 위험도는 어떻게 되나요?\n   ```\n3. **지도에서 확인**:\n   ```\n   강원도 고성의 산불 위치를 지도에서 보여줘\n   ```\n_________________________________________________________________________________\n\n## 추가 정보\n### **카카오맵 API 키**: 기본적으로 설정되어 있으므로 수정할 필요가 없습니다.\n### **지도 시각화**: 자동으로 웹 브라우저에서 열립니다.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "wildfire",
        "visualizations",
        "forest",
        "analyze wildfire",
        "wildfire occurrence",
        "map visualizations"
      ],
      "category": "weather-and-location-data"
    },
    "danilat--mcp-dndzgz": {
      "owner": "danilat",
      "name": "mcp-dndzgz",
      "url": "https://github.com/danilat/mcp-dndzgz",
      "imageUrl": "/freedevtools/mcp/pfp/danilat.webp",
      "description": "Provides real-time transit information for Zaragoza, including arrival estimations for trams, bus details, and public bicycle rental services. Includes Google Maps links for easy navigation to transit points.",
      "stars": 9,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-08T15:30:55Z",
      "readme_content": "# DNDzgz MCP Server\n\nThis is an MCP (Model Context Protocol) server that provides information about the Zaragoza tram system, including real-time tram arrival estimations and station information using the [DNDzgz](https://www.dndzgz.com/) API.\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/danilat/mcp-dndzgz.git\ncd mcp-dndzgz\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n## Running the Application\n\nAdd a the environment variable with a valid google maps api key and run it with the http transport\n```bash\nGOOGLE_MAPS_API_KEY=your-api-key npm start:http\n```\nThe server will start you should configure yout MCP client to connect.\n\nOr start the server using stdio trasport:\nConfigure in your MCP client using `npx`, for example:\n```json\n{\n    \"mcpServers\": {\n      \"dndzgz\": {\n        \"command\": \"npx @dndzgz/mcp\",\n        \"env\": {\n          \"GOOGLE_MAPS_API_KEY\": \"your-api-key\"\n        }\n      }\n    }\n}\n```\nThe server will start and connect to the MCP server.\n\n## Available Tools\n\nThe server provides the following tools:\n\n1. `zaragoza-tram-estimations`: Get real-time arrival estimations for a specific tram station\n   - Parameters: \n     - `station` (number): ID of the tram station\n   - Returns: JSON with estimated arrival times for both directions\n\n2. `zaragoza-tram-stations`: Get a list of all tram stations in Zaragoza\n   - Parameters: \n     - `latitude` (number): Latitude to sort stations by proximity\n     - `longitude` (number): Longitude to sort stations by proximity\n   - Returns: JSON with station information including location, name, and ID\n\n3. `zaragoza-bus-stops`: Get all bus stops in Zaragoza\n   - Parameters: \n     - `latitude` (number): Latitude to sort stops by proximity\n     - `longitude` (number): Longitude to sort stops by proximity\n   - Returns: JSON with bus stop locations, names, IDs, and lines\n\n4. `zaragoza-bus-estimations`: Get real-time arrival estimations for a specific bus stop\n   - Parameters: \n     - `stop` (number): ID of the bus stop\n   - Returns: JSON with estimated arrival times for each line serving that stop\n\n5. `zaragoza-bizi-stations`: Get all Bizi stations in Zaragoza (public bicycle rental service)\n   - Parameters: \n     - `latitude` (number): Latitude to sort stations by proximity\n     - `longitude` (number): Longitude to sort stations by proximity\n   - Returns: JSON with Bizi station locations, names, and IDs\n\n6. `zaragoza-bizi-estimations`: Get real-time availability of bikes and free slots in a Bizi station\n   - Parameters: \n     - `station` (number): ID of the Bizi station\n   - Returns: JSON with bikes and parking slot availability\n\n7. `google-maps-link`: Get a Google Maps link for a specific location\n   - Parameters: \n     - `latitude` (number): Latitude of the location\n     - `longitude` (number): Longitude of the location\n   - Returns: Google Maps URL showing the specified location\n\n8. `geolocation-from-address`: Get the geolocation (latitude and longitude) from an address and the formatted address that was found\n   - Parameters:\n     - `address` (string): The address to geolocate (e.g., \"Plaza de San Francisco, Zaragoza, Spain\")\n   - Returns: JSON with latitude, longitude, confidence level, and formatted address\n\n## Dependencies\n\n- @modelcontextprotocol/sdk: ^1.9.0\n\n\n## Example\n\nThere is an screenshot with example using Claude Desktop",
      "npm_url": "https://www.npmjs.com/package/mcp-dndzgz",
      "npm_downloads": 0,
      "keywords": [
        "zaragoza",
        "transit",
        "dndzgz",
        "information zaragoza",
        "zaragoza including",
        "transit information"
      ],
      "category": "weather-and-location-data"
    },
    "datalayer--earthdata-mcp-server": {
      "owner": "datalayer",
      "name": "earthdata-mcp-server",
      "url": "https://github.com/datalayer/earthdata-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/datalayer.webp",
      "description": "Enables efficient discovery and retrieval of NASA Earth Data datasets and granules, facilitating geospatial analysis and data exploration. Integrates with workflows for AI-powered analysis of Earthdata datasets.",
      "stars": 21,
      "forks": 6,
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "language": "Python",
      "updated_at": "2025-09-19T09:33:45Z",
      "readme_content": "<!--\n  ~ Copyright (c) 2023-2024 Datalayer, Inc.\n  ~\n  ~ BSD 3-Clause License\n-->\n\n[![Datalayer](https://assets.datalayer.tech/datalayer-25.svg)](https://datalayer.io)\n\n[![Become a Sponsor](https://img.shields.io/static/v1?label=Become%20a%20Sponsor&message=%E2%9D%A4&logo=GitHub&style=flat&color=1ABC9C)](https://github.com/sponsors/datalayer)\n\n# 🪐 ✨ Earthdata MCP Server\n\n[![PyPI - Version](https://img.shields.io/pypi/v/earthdata-mcp-server)](https://pypi.org/project/earthdata-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@datalayer/earthdata-mcp-server)](https://smithery.ai/server/@datalayer/earthdata-mcp-server)\n\nEarthdata MCP Server is a [Model Context Protocol](https://modelcontextprotocol.io/introduction) (MCP) server implementation that provides tools to interact with [NASA Earth Data](https://www.earthdata.nasa.gov/). It enables efficient dataset discovery, retrieval and analysis for Geospatial analysis.\n\n🚀 **NEW**: This server now includes all [Jupyter MCP Server](https://github.com/datalayer/jupyter-mcp-server) tools through composition, providing a unified interface for both Earth data discovery and analysis in Jupyter Notebooks.\n\n## 🚀 Key Features\n\n- **Efficient Data Retrieval**: Search and download Earthdata datasets\n- **Unified Interface**: Combines Earthdata research and Jupyter notebook manipulation tools for analysis\n\nThe following demo uses this MCP server to search for datasets and data granules on NASA Earthdata, download the data in Jupyter and run further analysis.\n\n<div>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <p>Analyzing Sea Level Rise with AI-Powered Geospatial Tools and Jupyter - Watch Video</p>\n  </a>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <img alt=\"c2b5b05f548d4f1492d5c107f0c48dbc_598a84f02de7e74e_full_play\" style=\"max-width:100%;\" src=\"https://cdn.loom.com/sessions/thumbnails/c2b5b05f548d4f1492d5c107f0c48dbc-598a84f02de7e74e-full-play.gif\">\n  </a>\n</div>\n\n## 🏁 Getting Started\n\nFor comprehensive setup instructions—including `Streamable HTTP` transport and advanced configuration—check out [the Jupyter MCP Server documentation](https://jupyter-mcp-server.datalayer.tech/). Or, get started quickly with `JupyterLab` and `stdio` transport here below.\n\n### 1. Set Up Your Environment\n\n```bash\npip install jupyterlab==4.4.1 jupyter-collaboration==4.0.2 ipykernel\npip uninstall -y pycrdt datalayer_pycrdt\npip install datalayer_pycrdt==0.12.17\n```\n\n### 2. Start JupyterLab\n\n```bash\n# make jupyterlab\njupyter lab --port 8888 --IdentityProvider.token MY_TOKEN --ip 0.0.0.0\n```\n\n### 3. Configure Your Preferred MCP Client\n\n> [!NOTE]\n>\n> Ensure the `port` of the `DOCUMENT_URL` and `RUNTIME_URL` match those used in the `jupyter lab` command.\n>\n> The `DOCUMENT_ID` which is the path to the notebook you want to connect to, should be relative to the directory where JupyterLab was started.\n>\n> In a basic setup, `DOCUMENT_URL` and `RUNTIME_URL` are the same. `DOCUMENT_TOKEN`, and `RUNTIME_TOKEN` are also the same and is actually the Jupyter Token.\n\n> [!NOTE]\n> \n> The `EARTHDATA_USERNAME` and `EARTHDATA_PASSWORD` environment variables are used for NASA Earthdata authentication to download datasets via the `earthaccess` library. See [NASA Earthdata Authentication](./docs/authentication.md) for more details.\n\n#### MacOS and Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"earthdata\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"DOCUMENT_URL\",\n        \"-e\",\n        \"DOCUMENT_TOKEN\",\n        \"-e\",\n        \"DOCUMENT_ID\",\n        \"-e\",\n        \"RUNTIME_URL\",\n        \"-e\",\n        \"RUNTIME_TOKEN\",\n        \"datalayer/earthdata-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"DOCUMENT_URL\": \"http://host.docker.internal:8888\",\n        \"DOCUMENT_TOKEN\": \"MY_TOKEN\",\n        \"DOCUMENT_ID\": \"notebook.ipynb\",\n        \"RUNTIME_URL\": \"http://host.docker.internal:8888\",\n        \"RUNTIME_TOKEN\": \"MY_TOKEN\",\n        \"EARTHDATA_USERNAME\": \"your_username\",\n        \"EARTHDATA_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\n#### Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"earthdata\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"DOCUMENT_URL\",\n        \"-e\",\n        \"DOCUMENT_TOKEN\",\n        \"-e\",\n        \"DOCUMENT_ID\",\n        \"-e\",\n        \"RUNTIME_URL\",\n        \"-e\",\n        \"RUNTIME_TOKEN\",\n        \"--network=host\",\n        \"datalayer/earthdata-mcp-server:latest\"\n      ],\n      \"env\": {\n        \"DOCUMENT_URL\": \"http://localhost:8888\",\n        \"DOCUMENT_TOKEN\": \"MY_TOKEN\",\n        \"DOCUMENT_ID\": \"notebook.ipynb\",\n        \"RUNTIME_URL\": \"http://localhost:8888\",\n        \"RUNTIME_TOKEN\": \"MY_TOKEN\",\n        \"EARTHDATA_USERNAME\": \"your_username\",\n        \"EARTHDATA_PASSWORD\": \"your_password\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\nThe server offers **15 tools total**: 3 Earthdata-specific tools plus 12 Jupyter notebook manipulation tools.\n\n### Earthdata Tools\n\n#### `search_earth_datasets`\n\n- Search for datasets on NASA Earthdata.\n- Input:\n  - search_keywords (str): Keywords to search for in the dataset titles.\n  - count (int): Number of datasets to return.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: List of dataset abstracts.\n\n#### `search_earth_datagranules`\n\n- Search for data granules on NASA Earthdata.\n- Input:\n  - short_name (str): Short name of the dataset.\n  - count (int): Number of data granules to return.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: List of data granules.\n\n#### `download_earth_data_granules`\n\n- Download Earth data granules from NASA Earth Data and integrate with Jupyter notebooks.\n- This tool combines earthdata search capabilities with jupyter notebook manipulation to create a seamless download workflow.\n- **Authentication**: Requires NASA Earthdata Login credentials (see [Authentication section](#nasa-earthdata-authentication))\n- Input:\n  - folder_name (str): Local folder name to save the data.\n  - short_name (str): Short name of the Earth dataset to download.\n  - count (int): Number of data granules to download.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: Success message with download code preparation details.\n\n### Jupyter Tools (Composed)\n\nThe following Jupyter notebook manipulation tools are available:\n\n- **`append_markdown_cell`**: Add markdown cells to notebooks\n- **`insert_markdown_cell`**: Insert markdown cells at specific positions\n- **`overwrite_cell_source`**: Modify existing cell content\n- **`append_execute_code_cell`**: Add and execute code cells\n- **`insert_execute_code_cell`**: Insert and execute code cells at specific positions\n- **`execute_cell_with_progress`**: Execute cells with progress monitoring\n- **`execute_cell_simple_timeout`**: Execute cells with timeout\n- **`execute_cell_streaming`**: Execute cells with streaming output\n- **`read_all_cells`**: Read all notebook cells\n- **`read_cell`**: Read specific notebook cells\n- **`get_notebook_info`**: Get notebook metadata\n- **`delete_cell`**: Delete notebook cells\n\nFor detailed documentation of the Jupyter tools, see the [Jupyter MCP Server documentation](https://github.com/datalayer/jupyter-mcp-server).\n\n## Prompts\n\n1. `download_analyze_global_sea_level` 🆕\n   - Generate a comprehensive workflow for downloading and analyzing Global Mean Sea Level Trend dataset.\n   - Uses both earthdata download tools and jupyter analysis capabilities.\n   - Returns: Detailed prompt for complete sea level analysis workflow.\n\n2. `sealevel_rise_dataset`\n   - Search for datasets related to sea level rise worldwide.\n   - Input:\n     - `start_year` (int): Start year to consider.\n      - `end_year` (int): End year to consider.\n   - Returns: Prompt correctly formatted.\n\n3. `ask_datasets_format`\n    - To ask about the format of the datasets.\n    - Returns: Prompt correctly formatted.\n\n## Building\n\n```bash\n# or run `docker build -t datalayer/earthdata-mcp-server .`\nmake build-docker\n```\n\nIf you prefer, you can pull the prebuilt images.\n\n```bash\nmake pull-docker\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "earthdata",
        "datalayer",
        "datasets",
        "earthdata mcp",
        "earth data",
        "earthdata datasets"
      ],
      "category": "weather-and-location-data"
    },
    "dxsim--AWS-GeoPlaces-MCP-Server": {
      "owner": "dxsim",
      "name": "AWS-GeoPlaces-MCP-Server",
      "url": "https://github.com/dxsim/AWS-GeoPlaces-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/dxsim.webp",
      "description": "Access AWS Location Service's GeoPlaces v2 API for converting addresses to geographic coordinates and performing reverse-geocoding. Facilitates location-based queries using AWS infrastructure.",
      "stars": 1,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-07-17T07:12:49Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/dxsim-aws-geoplaces-mcp-server-badge.png)](https://mseep.ai/app/dxsim-aws-geoplaces-mcp-server)\n\n# AWS-GeoPlaces-MCP-Server\nDirectly access AWS location services using the GeoPlaces v2 API, provides geocoding or reverse-geocoding capabilities like the Google Maps API. \n\n[![smithery badge](https://smithery.ai/badge/@dxsim/aws-geoplaces-mcp-server)](https://smithery.ai/server/@dxsim/aws-geoplaces-mcp-server)\n\n## Prerequisites\n1. AWS Permissions needed to host MCP for Location Service, Refer to the [example json file](sample_IAM_policy.json) for the minimum viable permissions.\n\n## Development\n\n1. Install [`uv`](https://docs.astral.sh/uv/#__tabbed_1_2) for Python project management:\n\n   MacOS / Linux:\n\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n   Windows:\n\n   ```bash\n   powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n   ```\n\n2. Create a virtual environment\n\n   ```bash\n   uv venv --python 3.13\n   ```\n\n3. Start the virtual environment\n\n   ```bash\n   source .venv/bin/activate\n   ```\n\n   NOTE: To stop the virtual environment:\n\n   ```bash\n   deactivate\n   ```\n\n5. Install [MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk) and AWS boto3 client:\n\n   ```bash\n   uv add \"mcp[cli]\"\n   uv add \"boto3\"\n   uv add \"python-dotenv\"\n   ```\n\n## Quickstart\n\n1. [Create your MCP using Python](https://modelcontextprotocol.io/introduction)\n2. Run your server in the MCP Inspector:\n   ```bash\n   mcp dev server.py\n   ```\n3. Install the server in Claude Desktop:\n   ```bash\n   mcp install <your_server_name.py>\n   ```\n4. Open `claude_desktop_config.js` in an editor:\n   From Claude:\n\n   1. Open Claude\n   2. Go to Settings\n   3. In the pop-up, select \"Developer\"\n   4. Click \"Edit Config\"\n\n   File location:\n\n   - MacOS / Linux `~/Library/Application/Support/Claude/claude_desktop_config.json`\n   - Windows `AppData\\Claude\\claude_desktop_config.json`\n\n5. Find the full path to `uv`:\n   MacOS / Linux:\n   ```bash\n   which uv\n   ```\n   Windows:\n   ```bash\n   where uv\n   ```\n6. In `claude_desktop_config.js`, set the `command` property to the full `uv` path for your MCP Server\n   Example:\n   ```json\n   \"weather\": {\n      \"command\": \"/absolute/path/to/uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"mcp\",\n        \"run\",\n        \"/absolute/path/to/your/server.py\"\n      ]\n    },\n   ```\n7. Reboot Claude Desktop and use a prompt that will trigger your MCP.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "aws",
        "geoplaces",
        "geocoding",
        "aws geoplaces",
        "aws location",
        "dxsim aws"
      ],
      "category": "weather-and-location-data"
    },
    "edgego--mcp-geo-pub": {
      "owner": "edgego",
      "name": "mcp-geo-pub",
      "url": "https://github.com/edgego/mcp-geo-pub",
      "imageUrl": "/freedevtools/mcp/pfp/edgego.webp",
      "description": "Provides real-time user geolocation data to AI models by integrating EdgeOne Pages Functions with the Model Context Protocol, enhancing context-aware interactions.",
      "stars": 1,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-03T06:19:16Z",
      "readme_content": "# MCP with Pages Functions ：Geo Location Demo \n\nThis project demonstrates how to use EdgeOne Pages Functions to retrieve user geolocation information and integrate it with large language models through MCP (Model Context Protocol).\n\n## Demo\n\n![f180b5ae_0e9c_40a8_a76a_b8f2a5e6108f](https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/f180b5ae-0e9c-40a8-a76a-b8f2a5e6108f.gif)\n\n## Deploy\n\n[![Deploy with EdgeOne Pages](https://cdnstatic.tencentcs.com/edgeone/pages/deploy.svg)](https://edgeone.ai/pages/new?template=mcp-geo)\n\nMore Templates: [EdgeOne Pages](https://edgeone.ai/pages/templates)\n\n## Components\n\n### 1. EdgeOne Pages Functions: Geolocation\n\nThe project includes an EdgeOne Pages Function that retrieves user geolocation information:\n\n* Uses the EdgeOne request context to access geolocation data\n* Returns location information in a JSON format\n* Located in `functions/get_geo.ts`\n\n### 2. MCP Server Integration\n\nThe MCP server component provides an interface for large language models to access geolocation data:\n\n* Implements the Model Context Protocol (MCP)\n* Exposes a `get_geolocation` tool that can be used by AI models\n* Uses the EdgeOne Pages Function to fetch geolocation data\n* Located in `mcp-server/index.ts`\n\n## MCP Configuration\n\nTo use the MCP server with large language models, add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"edgeone-geo-mcp-server\": {\n      \"command\": \"tsx\",\n      \"args\": [\"path/to/mcp-server/index.ts\"]\n    }\n  }\n}\n```\n\n## Learn More\n\n* [EdgeOne Pages](https://edgeone.ai/products/pages)\n* [EdgeOne Pages Functions documentation](https://edgeone.ai/document/162227908259442688)\n* [Model Context Protocol (MCP)](https://modelcontextprotocol.github.io) - Learn about integrating AI models with external tools and services\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "edgego",
        "geo",
        "geolocation data",
        "user geolocation",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "eternachen--mcp-playground": {
      "owner": "eternachen",
      "name": "mcp-playground",
      "url": "https://github.com/eternachen/mcp-playground",
      "imageUrl": "/freedevtools/mcp/pfp/eternachen.webp",
      "description": "Fetches and displays real-time weather information for any specified city, providing details such as temperature, humidity, wind speed, and weather conditions. Connects to an MCP server to access and update weather data seamlessly.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-29T03:37:15Z",
      "readme_content": "# Weather Query MCP Server/Client Example\n\nThis project is a weather query client that interacts with an MCP (Model-Client-Protocol) server to fetch and display weather information for a specified city.\n\n## Features\n\n- Connects to an MCP server to list available tools.\n- Queries weather information for a specified city.\n- Displays formatted weather information including temperature, humidity, wind speed, and weather description.\n\n## Requirements\n\n- Python 3.8+\n- `openai` library\n- `dotenv` library\n- `mcp` library\n\n## Setup\n\n1. Clone the repository:\n    ```sh\n    git clone <repository_url>\n    cd <repository_directory>\n    ```\n\n2. Create a virtual environment and activate it:\n    ```sh\n    python -m venv .venv\n    source .venv/bin/activate  # On Windows use `.venv\\Scripts\\activate`\n    ```\n\n3. Install the required dependencies:\n    ```sh\n    pip install -r requirements.txt\n    ```\n\n4. Create a `.env` file in the root directory and add your OpenAI API key and other configurations:\n    ```env\n    OPENAI_API_KEY=<your_openai_api_key>\n    BASE_URL=<your_base_url>\n    MODEL=<your_model>\n    ```\n\n## Usage\n\n1. Start the MCP server:\n    ```sh\n    python server.py\n    ```\n\n2. Run the client and connect to the server:\n    ```sh\n    python client.py <path_to_server_script>\n    ```\n\n3. Interact with the client:\n    - Type the name of the city in English to get the weather information.\n    - Type `quit` to exit the client.\n\n## Project Structure\n\n- `server.py`: Contains the MCP server implementation and weather query tool.\n- `client.py`: Contains the MCP client implementation to interact with the server.\n- `.env`: Environment variables for API keys and configurations.\n- `.gitignore`: Specifies files and directories to be ignored by git.\n- `README.md`: Project documentation.\n\n## License\n\nThis project is licensed under the MIT License.",
      "npm_url": "https://www.npmjs.com/package/mcp-playground",
      "npm_downloads": 240,
      "keywords": [
        "mcp",
        "weather",
        "playground",
        "weather data",
        "weather information",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "finack--aviation-mcp": {
      "owner": "finack",
      "name": "aviation-mcp",
      "url": "https://github.com/finack/aviation-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/finack.webp",
      "description": "Fetches real-time aviation weather data, including METARs, TAFs, and PIREPs, through a type-safe API for enhanced decision-making in aviation contexts.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-21T09:23:29Z",
      "readme_content": "# Aviation Weather MCP Server\n\nThis is a Model Context Protocol (MCP) server that provides aviation weather information for flight planning. It connects to the Aviation Weather API to fetch METARs, TAFs, PIREPs, and other data.\n\n## DISCLAIMER\n\nDO NOT USE THIS TOOL FOR FLIGHT PLANNING OR IN-FLIGHT DECISION MAKING.\n\n**IMPORTANT DISCLAIMER**:\nThis Aviation Weather MCP server provides weather data sourced from aviationweather.gov for informational purposes only. The information provided by this tool should NEVER be used as the sole source for flight planning or in-flight decision making.\n\nWeather data may be incomplete, delayed, or inaccurate. Additionally, the large language model interpreting this data may misunderstand or incorrectly represent critical information. Always consult official aviation weather sources and obtain a proper weather briefing from authorized providers before any flight.\n\nThis tool is not FAA-approved, is not a replacement for certified weather services, and should be used only as a supplementary reference. The developers assume no liability for decisions made based on information provided by this tool.\n\nALWAYS verify critical weather information through official channels.\n\n## Features\n\n- **Type-safe API client** automatically generated from the official Aviation Weather API Swagger definition\n- **MCP tools for weather data**:\n  - `get-metar`: Get current weather observations\n  - `get-taf`: Get terminal aerodrome forecasts\n  - `get-pireps`: Get pilot reports near an airport\n  - `get-route-weather`: Get comprehensive weather for a route between two airports\n\n## Setup\n\n### Prerequisites\n\n- Node.js 18 or higher\n- npm or yarn\n- curl (for fetching the Swagger YAML)\n\n### Installation\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/yourusername/aviation-weather-mcp-server.git\n   cd aviation-weather-mcp-server\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the server (this will fetch the latest Swagger definition, generate the API client, and compile the TypeScript):\n\n   ```bash\n   npm run build\n   ```\n\n4. Start the server:\n\n   ```bash\n   npm start\n   ```\n\n## Using with Claude for Desktop\n\nTo use this server with Claude for Desktop:\n\n1. Edit your Claude for Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the server to the configuration:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"aviation-weather\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/absolute/path/to/aviation-weather-mcp-server/build/index.js\"\n         ]\n       }\n     }\n   }\n   ```\n\n3. Restart Claude for Desktop\n\n## Example Queries\n\nOnce connected to Claude, you can ask questions like:\n\n- \"What's the current weather at KJFK?\"\n- \"Is there a TAF available for KORD?\"\n- \"I'm planning to fly from KBOS to KPHL tomorrow. What's the weather looking like?\"\n- \"Are there any PIREPs near KDEN?\"\n\n## Development\n\n### Project Structure\n\n- `src/index.ts`: Main server code\n- `packages/aviation-weath-api`: Autogenerate API client for Aviation Weather .gov\n\n### Building the aviation weather client\n\nThe build process follows these steps:\n\n1. `npm run aviation-weather-api:clean`: delete the existing client\n1. `npm run aviation-weather-api:fetch`: Fetches the latest Swagger definition from aviationweather.gov\n2. `npm run aviation-weather-api:generate`: Generates a typed TypeScript client from the Swagger definition\n\n### Building and running the app\n\n1. `npm run build`: Build the javascript client\n1. `npm run start`: Run the MCP server\n\n### Adding More Tools\n\nTo add new tools to the server, follow this pattern:\n\n```typescript\nserver.tool(\n  \"tool-name\",\n  {\n    // Zod schema for parameters\n    param1: z.string().describe(\"Parameter description\"),\n    param2: z.number().optional().describe(\"Optional parameter\")\n  },\n  async ({ param1, param2 }) => {\n    try {\n      // Implementation\n      return {\n        content: [{\n          type: \"text\",\n          text: \"Response text\"\n        }]\n      };\n    } catch (error) {\n      return {\n        content: [{\n          type: \"text\",\n          text: `Error: ${error.message}`\n        }],\n        isError: true\n      };\n    }\n  }\n);\n```\n\n## How It Works\n\n1. The server fetches the latest Swagger definition from aviationweather.gov\n2. The OpenAPI Generator creates a type-safe client from this definition\n3. The server uses this client to make API calls with proper typing\n4. Error handling and response formatting ensure a smooth experience\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/aviation-mcp",
      "npm_downloads": 1175,
      "keywords": [
        "metars",
        "aviation",
        "tafs",
        "aviation mcp",
        "weather data",
        "data finack"
      ],
      "category": "weather-and-location-data"
    },
    "fist-maestro--mcp-servers": {
      "owner": "fist-maestro",
      "name": "mcp-servers",
      "url": "https://github.com/fist-maestro/mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/fist-maestro.webp",
      "description": "Integrates multiple services into Cursor IDE, providing example and weather functionalities to enhance the development workflow. It includes controllers for handling requests and services that encapsulate business logic.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-31T16:29:49Z",
      "readme_content": "# MCP Servers 项目\n\n基于 Model Context Protocol (MCP) 开发的服务集合，用于支持 Cursor IDE 的智能功能。目前包含示例服务和天气服务。\n\n## 开发环境要求\n\n- Node.js >= 16.0.0\n- npm >= 8.0.0\n- TypeScript >= 4.5.0\n- Cursor IDE（最新版本）\n\n## 项目结构\n\n```\nmcp-servers/\n├── src/                    # 源代码目录\n│   ├── demo/              # 示例服务\n│   │   ├── config/       # 配置层：常量、类型定义\n│   │   │   ├── constants.ts    # 常量定义\n│   │   │   └── types.ts        # 类型定义\n│   │   ├── controllers/  # 控制器层：请求处理\n│   │   │   └── GreetingController.ts  # 问候控制器\n│   │   ├── service/      # 服务层：业务逻辑\n│   │   │   └── GreetingService.ts     # 问候服务\n│   │   ├── package.json  # 服务配置文件\n│   │   ├── tsconfig.json # TypeScript 配置\n│   │   └── index.ts      # 服务入口文件\n│   │\n│   └── weather/          # 天气服务\n│       ├── config/       # 配置层：常量、类型定义\n│       │   ├── constants.ts    # 常量定义\n│       │   └── types.ts        # 类型定义\n│       ├── controllers/  # 控制器层：请求处理\n│       │   └── WeatherController.ts  # 天气控制器\n│       ├── service/      # 服务层：业务逻辑\n│       │   └── WeatherService.ts     # 天气服务\n│       ├── package.json  # 服务配置文件\n│       ├── tsconfig.json # TypeScript 配置\n│       └── index.ts      # 服务入口文件\n│\n├── build/                  # 编译输出目录\n├── node_modules/          # 依赖包\n├── package.json           # 项目配置\n├── tsconfig.json          # TypeScript 配置\n└── README.md             # 项目文档\n```\n\n## 代码分层架构\n\n项目采用三层架构设计，每个服务都遵循相同的结构模式：\n\n### 1. 配置层（Config）\n位置：`服务目录/config/`\n- **职责**：\n  - 定义常量和配置项\n  - 声明类型和接口\n  - 管理环境变量\n- **主要文件**：\n  - `constants.ts`: 常量定义\n  - `types.ts`: 类型定义\n- **特点**：\n  - 集中管理配置\n  - 类型安全\n  - 易于维护和修改\n\n### 2. 控制器层（Controllers）\n位置：`服务目录/controllers/`\n- **职责**：\n  - 处理 MCP 请求和响应\n  - 参数验证和错误处理\n  - 调用服务层方法\n- **主要文件**：\n  - `XXXController.ts`: 具体业务控制器\n- **特点**：\n  - 请求参数验证\n  - 错误处理和日志\n  - 响应格式化\n\n### 3. 服务层（Service）\n位置：`服务目录/service/`\n- **职责**：\n  - 实现核心业务逻辑\n  - 处理数据转换\n  - 调用外部 API\n- **主要文件**：\n  - `XXXService.ts`: 具体业务服务\n- **特点**：\n  - 业务逻辑封装\n  - 数据处理和转换\n  - 外部服务集成\n\n### 服务入口（index.ts）\n位置：`服务目录/index.ts`\n- **职责**：\n  - 初始化服务实例\n  - 注册 MCP 工具\n  - 处理标准输入输出\n- **特点**：\n  - 统一的入口点\n  - MCP 工具注册\n  - 错误处理\n\n## 开发流程\n\n1. **新建服务**\n   ```bash\n   mkdir -p src/new-service/{config,controllers,service}\n   ```\n\n2. **实现各层功能**\n   - 配置层：定义常量和类型\n   - 控制器层：处理请求和响应\n   - 服务层：实现业务逻辑\n\n3. **创建配置文件**\n   - `package.json`: 服务依赖和脚本\n   - `tsconfig.json`: TypeScript 配置\n\n4. **编写入口文件**\n   - 创建 `index.ts`\n   - 注册 MCP 工具\n   - 实现请求处理\n\n## 快速开始\n\n### 1. 克隆项目\n\n```bash\ngit clone <repository-url>\ncd mcp-servers\n```\n\n### 2. 安装依赖\n\n```bash\nnpm install\n```\n\n### 3. 构建项目\n\n```bash\n# 构建所有服务\nnpm run build\n\n# 构建单个服务\nnpm run build:weather  # 构建天气服务\nnpm run build:demo    # 构建示例服务\n```\n\n### 4. 配置 MCP\n\n编辑 `~/.cursor/mcp.json` 文件：\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/your/path/to/mcp-servers/build/weather/index.js\"\n      ],\n      \"env\": {\n        \"OPENWEATHER_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### 5. 启动服务\n\n```bash\n# 启动天气服务\nnpm run start:weather\n\n# 启动示例服务\nnpm run start:demo\n```\n\n## 可用服务说明\n\n### 1. 示例服务（Demo）\n\n- 位置：`src/demo/`\n- 功能：展示 MCP 服务的基本结构和开发方法\n- 特点：\n  - 简单的请求响应示例\n  - 基础错误处理\n  - 代码注释完善，适合学习\n\n### 2. 天气服务（Weather）\n\n- 位置：`src/weather/`\n- 功能：提供全球天气查询服务\n- 特点：\n  - 实时天气查询\n  - 5天天气预报\n  - 支持多城市查询\n  - 详细的天气信息\n\n查看各服务详细文档：\n- [天气服务文档](src/weather/readme.md)\n- [示例服务文档](src/demo/readme.md)\n\n## 开发指南\n\n### 创建新服务\n\n1. 在 `src` 目录下创建新服务目录\n2. 参考现有服务的目录结构\n3. 实现必要的控制器和服务\n4. 在 `package.json` 添加相应的构建和启动脚本\n\n### 调试方法\n\n1. 使用 `console.error()` 输出调试信息\n2. 检查 Cursor IDE 的 MCP 日志\n3. 使用 TypeScript 的源码映射功能\n\n### 测试\n\n```bash\n# 运行所有测试\nnpm test\n\n# 运行特定服务的测试\nnpm run test:weather\n```\n\n## 常见问题\n\n1. **服务无法启动**\n   - 检查端口占用\n   - 确认环境变量配置\n   - 验证构建输出\n\n2. **API 调用失败**\n   - 检查 API Key 配置\n   - 确认网络连接\n   - 查看错误日志\n\n3. **Cursor IDE 无法识别服务**\n   - 检查 MCP 配置\n   - 重启 Cursor IDE\n   - 确认服务状态\n\n## 贡献指南\n\n1. Fork 项目\n2. 创建特性分支\n3. 提交变更\n4. 推送到分支\n5. 创建 Pull Request\n\n## 许可证\n\nMIT License",
      "npm_url": "https://www.npmjs.com/package/mcp-servers",
      "npm_downloads": 854,
      "keywords": [
        "maestro",
        "mcp",
        "cursor",
        "maestro mcp",
        "mcp servers",
        "services cursor"
      ],
      "category": "weather-and-location-data"
    },
    "guilhermelirio--brazilian-cep-mcp": {
      "owner": "guilhermelirio",
      "name": "brazilian-cep-mcp",
      "url": "https://github.com/guilhermelirio/brazilian-cep-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/guilhermelirio.webp",
      "description": "Retrieve comprehensive address details in Brazil using postal codes (CEPs) to obtain complete street, neighborhood, city, and state information.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-21T23:09:32Z",
      "readme_content": "﻿# brazilian-cep-mcp\r\n\r\n## Descrição\r\n\r\nEste é um servidor MCP (Model Context Protocol) que fornece ferramentas para consulta de informações de Códigos de Endereçamento Postal (CEP) brasileiros. O servidor utiliza a API ViaCEP para obter dados detalhados de endereços a partir do CEP informado.\r\n\r\n## Funcionalidades\r\n\r\n- Consulta de endereços completos através do CEP\r\n- Retorno de informações como logradouro, bairro, cidade, estado, região, DDD e código IBGE\r\n- Implementação do protocolo MCP para integração com agentes de IA\r\n\r\n## Instalação\r\n\r\n```bash\r\n# Clone o repositório\r\ngit clone https://github.com/guilhermelirio/brazilian-cep-mcp.git\r\ncd brazilian-cep-mcp\r\n\r\n# Instale as dependências\r\nnpm install\r\n```\r\n\r\n## Como usar\r\n\r\n### Compilação do projeto\r\n\r\nPara compilar o código TypeScript:\r\n\r\n```bash\r\nnpm run build\r\n```\r\n\r\n### Execução do servidor\r\n\r\nPara iniciar o servidor em modo de desenvolvimento:\r\n\r\n```bash\r\nnpm run dev\r\n```\r\n\r\nPara iniciar o servidor após compilação:\r\n\r\n```bash\r\nnpm start\r\n```\r\n\r\n### Consultando um CEP\r\n\r\nO servidor disponibiliza a ferramenta `consultar-cep` que aceita um parâmetro:\r\n\r\n- `cep`: Código postal no formato de 8 dígitos numéricos (obrigatório)\r\n\r\nExemplo de uso:\r\n\r\n```json\r\n{\r\n  \"cep\": \"01001000\"\r\n}\r\n```\r\n\r\nResposta:\r\n\r\n```\r\nEndereço encontrado:\r\nCEP: 01001-000\r\nLogradouro: Praça da Sé\r\nComplemento: lado ímpar\r\nBairro: Sé\r\nCidade: São Paulo\r\nEstado: SP (São Paulo)\r\nRegião: Sudeste\r\nDDD: 11\r\nIBGE: 3550308\r\n```\r\n\r\n## Tecnologias utilizadas\r\n\r\n- TypeScript\r\n- Node.js\r\n- Axios para requisições HTTP\r\n- Zod para validação de esquemas\r\n- SDK do Model Context Protocol\r\n\r\n## Configuração Smithery\r\n\r\nEste projeto está configurado para funcionar com a plataforma Smithery.ai, que facilita a distribuição e execução de servidores MCP.\r\n\r\n## Estrutura do projeto\r\n\r\n```\r\nbrazilian-cep-mcp/\r\n├── src/\r\n│   └── index.ts       # Código-fonte principal\r\n├── dist/              # Código compilado\r\n├── node_modules/      # Dependências\r\n├── smithery.yaml      # Configuração do Smithery\r\n├── package.json       # Configuração do projeto\r\n├── tsconfig.json      # Configuração do TypeScript\r\n└── README.md          # Este arquivo\r\n```\r\n\r\n## Autor\r\n\r\nGuilherme Lirio Tomasi de Oliveira\r\n\r\n## Licença\r\n\r\nEste projeto está licenciado sob a licença MIT - veja o arquivo [LICENSE](LICENSE) para mais detalhes.\r\n\r\n## Contribuições\r\n\r\nContribuições são bem-vindas! Sinta-se à vontade para abrir issues ou enviar pull requests.\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ceps",
        "brazilian",
        "postal",
        "brazilian cep",
        "location data",
        "details brazil"
      ],
      "category": "weather-and-location-data"
    },
    "hafizrahman--wp-mcp": {
      "owner": "hafizrahman",
      "name": "wp-mcp",
      "url": "https://github.com/hafizrahman/wp-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/hafizrahman.webp",
      "description": "Provides access to weather alerts and forecasts alongside recent WordPress blog content through a command-line interface, enabling integration of weather information with blog entries.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-06T11:05:50Z",
      "readme_content": "# wp-mcp\n\n`wp-mcp` is a weather and WordPress integration tool built using the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/sdk). This project provides two primary features:\n\n1. **Weather Alerts & Forecasts** using the [National Weather Service API](https://www.weather.gov/documentation/services-web-api).\n2. **Various contents** from a personal WordPress blog (`hafiz.blog`).\n\nThe project exposes these features as tools within a MCP server, allowing easy access through a command-line interface.\n\n## Features\n\n### Weather Tools\n- **Get Active Alerts**: Fetch current weather alerts for a U.S. state.\n- **Get Forecast**: Get weather forecasts based on geographical coordinates (latitude and longitude).\n\n### WordPress Tools\n- **Get Latest Posts**: Retrieve the 10 most recent posts from a WordPress blog (specifically, my personal blog [hafiz.blog](https://hafiz.blog)).\n- **Get Categories**: Retrieve all categories in the site.\n- **Get Posts by Category**: Retrieve posts from a specific category by providing the category slug.\n\n### Combine them!\nTo demo Claude using both tools at once, you can try some clever prompt like: \n- \"Get the date from the latest post on hafiz.blog, and check the weather in San Francisco on that date.\"\n- \"Check all the categories in hafiz.blog, find one that's likely written in Indonesian, and then make me an poem in Indonesian language based on a post from that category.\"\n\n## Installation\n\n### Prerequisites\n- [Node.js](https://nodejs.org/en/) (v14.x or above)\n- [npm](https://www.npmjs.com/)\n\n### Steps:\n\n1. `npm run build`\n2. Connect the server with Claude Desktop, which needs to be installed locally. [Follow the instruction here.](https://modelcontextprotocol.io/quickstart/server#test-with-commands)\n3. Once Claude Desktop detects the MCP server, try various prompts to check weather, or get latest posts on hafiz.blog, or do a combo prompt as mentioned above.",
      "npm_url": "https://www.npmjs.com/package/wp-mcp",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "blog",
        "wp",
        "weather information",
        "weather alerts",
        "access weather"
      ],
      "category": "weather-and-location-data"
    },
    "haichaozheng--weather-mcp": {
      "owner": "haichaozheng",
      "name": "weather-mcp",
      "url": "https://github.com/haichaozheng/weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/haichaozheng.webp",
      "description": "Provides real-time weather forecasts and alerts for the US, allowing users to query active weather alerts by state code or obtain detailed weather forecasts based on geographic coordinates. Integrates with applications via a simple MCP interface for up-to-date weather information.",
      "stars": 4,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-20T12:38:29Z",
      "readme_content": "# 天气信息与多源工具集成系统\r\n\r\n这个项目展示了如何整合多种工具来源（自定义工具、本地MCP服务和第三方API）到一个统一的AI代理中，使用LangGraph框架和MCP协议，实现一个功能丰富的智能助手系统。\r\n\r\n## 项目组件\r\n\r\n### 1. 天气服务器 (weather.py)\r\n\r\n提供天气相关API工具：\r\n- `get_alerts`: 获取美国州级天气警报\r\n- `get_forecast`: 根据经纬度获取天气预报\r\n\r\n基于MCP协议实现的本地服务，提供实时天气信息访问。\r\n\r\n### 2. 自定义工具 (langgraph_tools.py)\r\n\r\n提供一系列基础工具：\r\n- **数学工具**：加法、减法、乘法、除法、平方根、幂运算\r\n- **字符串工具**：字符串连接、转大写、转小写\r\n\r\n这些工具使用LangChain的`@tool`装饰器定义，可以被AI代理调用。\r\n\r\n### 3. 第三方MCP工具 (mcp_third_party.py)\r\n\r\n集成第三方MCP服务：\r\n- **智谱Web搜索工具**：通过智谱AI提供的MCP接口获取实时Web搜索能力\r\n- 提供了通用的MCP工具加载函数，便于扩展更多第三方服务\r\n\r\n### 4. MCP客户端 (mcp_client.py)\r\n\r\n连接到天气服务器并使用其提供的工具。通过SSE（Server-Sent Events）协议与服务器通信，处理连接和重试逻辑。\r\n\r\n### 5. 综合代理 (agent_with_diverse_tools.py)\r\n\r\n核心组件，整合所有来源的工具：\r\n- **自定义本地工具**：数学计算、字符串处理\r\n- **本地MCP服务工具**：天气查询服务\r\n- **第三方MCP工具**：智谱Web搜索\r\n- 使用LangGraph的React Agent架构\r\n- 基于Moonshot API实现\r\n\r\n## 使用方法\r\n\r\n### 安装依赖\r\n\r\n```bash\r\npip install -r requirements.txt\r\n```\r\n\r\n### 环境配置\r\n\r\n在`.env`文件中设置以下变量：\r\n- `MOONSHOT_API_KEY`: Moonshot API密钥（用于LLM）\r\n- `ZHIPU_API_KEY`: 智谱API密钥（用于Web搜索服务）\r\n\r\n### 启动服务\r\n\r\n1. **启动天气服务器**\r\n```bash\r\npython weather/weather.py\r\n```\r\n\r\n2. **运行综合代理测试**\r\n```bash\r\npython weather/agent_with_diverse_tools.py\r\n```\r\n\r\n3. **测试智谱Web搜索工具**\r\n```bash\r\npython weather/mcp_third_party.py\r\n```\r\n\r\n## 示例查询\r\n\r\n综合代理可以处理多种类型的查询：\r\n\r\n- **数学计算**：\r\n  - \"计算 23 + 45 的结果\"\r\n  - \"计算 16 的平方根\" \r\n  - \"计算 7 * 8 然后减去 10\"\r\n\r\n- **字符串处理**：\r\n  - \"将 'hello world' 转换为大写\"\r\n  - \"将 ['我', '爱', '中国'] 用空格连接起来\"\r\n\r\n- **天气信息**：\r\n  - \"纽约州有什么天气警报？\"\r\n  - \"旧金山的天气预报是什么？\"\r\n  - \"加利福尼亚州有什么严重天气警报？\"\r\n\r\n- **Web搜索**：\r\n  - \"中国最近的航天成就有哪些？\"\r\n  - \"2024年世界经济论坛的主要议题是什么？\"\r\n  - \"最新的人工智能研究进展有哪些？\"\r\n\r\n- **混合查询**：\r\n  - \"计算 7 * 8 然后减去 10，并查询一下上海的天气预报\"\r\n\r\n## 系统特点\r\n\r\n- **模块化设计**：各个工具源相互独立，便于维护和扩展\r\n- **容错能力**：即使某个服务不可用，系统仍能使用其他可用工具\r\n- **可扩展性**：容易添加新的工具源和功能\r\n- **多源整合**：将不同来源和类型的工具统一到一个代理中\r\n\r\n## 扩展方向\r\n\r\n- 添加更多第三方MCP服务\r\n- 实现工具调用的可视化界面\r\n- 增加用户交互模式（如对话模式）\r\n- 添加更多领域的专业工具\r\n\r\n## 注意事项\r\n\r\n- 确保在运行代理前先启动天气服务器\r\n- 服务器默认在`localhost:8000`上运行\r\n- 天气数据来自美国国家气象局(NWS)API\r\n- 智谱Web搜索需要有效的API密钥\r\n\r\n## 系统架构\r\n\r\n## 技术栈\r\n\r\n- Python 3.11+\r\n- MCP (Model Control Protocol)\r\n- FastMCP 服务器\r\n- LangGraph + LangChain\r\n- SSE (Server-Sent Events) 传输\r\n\r\n## 安装\r\n\r\n1. 克隆仓库：\r\n   ```bash\r\n   git clone https://github.com/haichaozheng/weather-mcp.git\r\n   cd weather-mcp\r\n   ```\r\n\r\n2. 创建虚拟环境：\r\n   ```bash\r\n   # 使用 Python 标准库\r\n   python -m venv weather_venv\r\n   \r\n   # 激活虚拟环境（Windows）\r\n   weather_venv\\Scripts\\activate\r\n   \r\n   # 激活虚拟环境（Linux/Mac）\r\n   source weather_venv/bin/activate\r\n   ```\r\n\r\n3. 安装依赖：\r\n   ```bash\r\n   pip install -r requirements.txt\r\n   ```\r\n\r\n4. 配置环境变量：\r\n   - 创建 `.env` 文件，参考 `.env.example` 文件格式\r\n   - 添加必要的 API 密钥\r\n\r\n## 项目结构\r\nweather-mcp/\r\n├── weather/\r\n│ ├── weather.py # 主服务器文件\r\n│ ├── mcp_client.py # 客户端测试文件\r\n├── requirements.txt # 项目依赖\r\n├── .env.example # 环境变量示例\r\n└── README.md # 本文档\r\n```\r\n\r\n## 环境变量配置\r\n\r\n项目使用 `.env` 文件存储环境变量和敏感信息。请按照以下步骤设置：\r\n\r\n1. 复制环境变量模板文件：\r\n   ```bash\r\n   cp .env.example .env\r\n   ```\r\n\r\n2. 编辑 `.env` 文件，填入您的实际配置：\r\n   ```\r\n   MOONSHOT_API_KEY=your_actual_api_key\r\n   ```\r\n\r\n3. 确保 `.env` 文件不会被提交到版本控制系统中\r\n\r\n## 环境变量\r\n\r\n在`.env`文件中设置以下变量：\r\n- `MOONSHOT_API_KEY`: Moonshot API密钥\r\n\r\n## 注意事项\r\n\r\n- 确保在运行代理前先启动天气服务器\r\n- 服务器默认在`localhost:8000`上运行\r\n- 天气数据来自美国国家气象局(NWS)API",
      "npm_url": "https://www.npmjs.com/package/weather-mcp",
      "npm_downloads": 226,
      "keywords": [
        "haichaozheng",
        "weather",
        "forecasts",
        "haichaozheng weather",
        "weather information",
        "weather alerts"
      ],
      "category": "weather-and-location-data"
    },
    "handsomegentlemen--mcp-geo": {
      "owner": "handsomegentlemen",
      "name": "mcp-geo",
      "url": "https://github.com/handsomegentlemen/mcp-geo",
      "imageUrl": "/freedevtools/mcp/pfp/handsomegentlemen.webp",
      "description": "Provides geolocation data to AI models by retrieving user location information in real-time through an API. Integrates seamlessly with EdgeOne Pages Functions to enhance applications with location-aware capabilities.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-18T02:44:25Z",
      "readme_content": "# MCP with Pages Functions ：Geo Location Demo \n\nThis project demonstrates how to use EdgeOne Pages Functions to retrieve user geolocation information and integrate it with large language models through MCP (Model Context Protocol).\n\n## Demo\n\n![f180b5ae_0e9c_40a8_a76a_b8f2a5e6108f](https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/f180b5ae-0e9c-40a8-a76a-b8f2a5e6108f.gif)\n\n## Deploy\n\n[![Deploy with EdgeOne Pages](https://cdnstatic.tencentcs.com/edgeone/pages/deploy.svg)](https://edgeone.ai/pages/new?template=mcp-geo)\n\nMore Templates: [EdgeOne Pages](https://edgeone.ai/pages/templates)\n\n## Components\n\n### 1. EdgeOne Pages Functions: Geolocation\n\nThe project includes an EdgeOne Pages Function that retrieves user geolocation information:\n\n* Uses the EdgeOne request context to access geolocation data\n* Returns location information in a JSON format\n* Located in `functions/get_geo.ts`\n\n### 2. MCP Server Integration\n\nThe MCP server component provides an interface for large language models to access geolocation data:\n\n* Implements the Model Context Protocol (MCP)\n* Exposes a `get_geolocation` tool that can be used by AI models\n* Uses the EdgeOne Pages Function to fetch geolocation data\n* Located in `mcp-server/index.ts`\n\n## MCP Configuration\n\nTo use the MCP server with large language models, add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"edgeone-geo-mcp-server\": {\n      \"command\": \"tsx\",\n      \"args\": [\"path/to/mcp-server/index.ts\"]\n    }\n  }\n}\n```\n\n## Learn More\n\n* [EdgeOne Pages](https://edgeone.ai/products/pages)\n* [EdgeOne Pages Functions documentation](https://edgeone.ai/document/162227908259442688)\n* [Model Context Protocol (MCP)](https://modelcontextprotocol.github.io) - Learn about integrating AI models with external tools and services\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "geo",
        "api",
        "geolocation data",
        "provides geolocation",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "hanweg--mcp-tool-builder": {
      "owner": "hanweg",
      "name": "mcp-tool-builder",
      "url": "https://github.com/hanweg/mcp-tool-builder",
      "imageUrl": "/freedevtools/mcp/pfp/hanweg.webp",
      "description": "Create and manage new tools dynamically using natural language descriptions, with the ability to save tool definitions and Python scriptlets. Supports tool creation that requires a client restart for use.",
      "stars": 27,
      "forks": 7,
      "license": "The Unlicense",
      "language": "Python",
      "updated_at": "2025-08-19T09:11:01Z",
      "readme_content": "# WORK IN PROGRESS - USE WITH CAUTION - Windows\n\n# MCP Tool Builder\nAn MCP server that empowers LLMs to dynamically create new tools through MCP clients such as Claude Desktop.\n\n<a href=\"https://glama.ai/mcp/servers/1ziiztkcx1\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/1ziiztkcx1/badge\" alt=\"mcp-tool-builder MCP server\" /></a>\n\n## Features\n- Create new tools by describing them in natural language\n  - Requires client restart to use new tools (Claude Desktop)\n- New tools are saved as python scriptlets in ...\\\\mcp-tool-builder\\\\tools\n- New tool definitions are saved in ...\\\\mcp-tool-builder\\\\tools\\tools.json\n\n## Example tools included at installation\n- get_bitcoin_price: Fetches current Bitcoin price from CoinGecko\n- get_weather_forecast: Gets weather for US ZIP codes (uses geopy)\n\n## Creating New Tools\nUse the create_tool command in Claude Desktop (or suggest strongly!!) to create new tools dynamically\n\n## Installation\n1. Clone this repository\n2. Install dependencies:\n```bash\ncd mcp-tool-builder\nuv venv\n.venv\\Scripts\\activate\nuv pip install -e .\n```\n\n## Usage with Claude Desktop\nAdd to `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"tool-builder\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\", \n                \"PATH_TO\\\\mcp-tool-builder\",\n                \"run\",\n                \"tool-builder\"\n            ]\n        }\n    }\n}\n```\n![Screenshot 2024-12-24 105318](https://github.com/user-attachments/assets/c1bf9293-7b66-4600-99a0-bf96692e58d1)\n\n![image](https://github.com/user-attachments/assets/0c5a78ea-4c22-48d9-bad2-1392e59ec544)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tools",
        "tool",
        "python",
        "tool builder",
        "tool creation",
        "tools dynamically"
      ],
      "category": "weather-and-location-data"
    },
    "harimkang--mcp-korea-tourism-api": {
      "owner": "harimkang",
      "name": "mcp-korea-tourism-api",
      "url": "https://github.com/harimkang/mcp-korea-tourism-api",
      "imageUrl": "/freedevtools/mcp/pfp/harimkang.webp",
      "description": "Access information about South Korea's tourism attractions, including festivals, temples, restaurants, and accommodations through an API powered by the Korea Tourism Organization.",
      "stars": 6,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-12T06:18:19Z",
      "readme_content": "# Korea Tourism API MCP Server ✈️\n\n<!-- Badges -->\n\n[![smithery badge](https://smithery.ai/badge/@harimkang/mcp-korea-tourism-api)](https://smithery.ai/interface/@harimkang/mcp-korea-tourism-api)\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/85b16552-af4c-4029-9d47-a4586438ec02)\n[![PyPI version](https://badge.fury.io/py/mcp-korea-tourism-api.svg)](https://badge.fury.io/py/mcp-korea-tourism-api)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![CI Tests](https://github.com/harimkang/mcp-korea-tourism-api/actions/workflows/ci.yml/badge.svg)](https://github.com/harimkang/mcp-korea-tourism-api/actions/workflows/ci.yml)\n\nUnlock the wonders of South Korean tourism directly within your AI assistant! This project provides a Model Context Protocol (MCP) server powered by the official Korea Tourism Organization (KTO) API. Equip your AI with the ability to discover vibrant festivals, serene temples, delicious restaurants, comfortable accommodations, and much more across Korea.\n\n**Links:**\n\n- **PyPI Package:** [https://pypi.org/project/mcp-korea-tourism-api/](https://pypi.org/project/mcp-korea-tourism-api/)\n- **GitHub Repository:** [https://github.com/harimkang/mcp-korea-tourism-api](https://github.com/harimkang/mcp-korea-tourism-api)\n- **Releases:** [https://github.com/harimkang/mcp-korea-tourism-api/releases](https://github.com/harimkang/mcp-korea-tourism-api/releases)\n\n## ✨ Features\n\n- **Comprehensive Search:** Find tourist spots, cultural sites, events, food, lodging, and shopping via keywords, area, or location.\n- **Rich Details:** Access descriptions, operating hours, admission fees, photos, addresses, and contact information.\n- **Location-Aware:** Discover attractions near specific GPS coordinates.\n- **Timely Information:** Find festivals and events based on date ranges.\n- **Multilingual Support:** Get information in various languages supported by the KTO API (including English).\n  - **Supported Languages**: English, Japanese, Simplified Chinese, Traditional Chinese, Russian, Spanese, German, French\n- **Efficient & Resilient:**\n  - **Response Caching:** Uses time-to-live (TTL) caching to store results and reduce redundant API calls, improving speed.\n  - **Rate Limiting:** Respects API usage limits to prevent errors.\n  - **Automatic Retries:** Automatically retries requests in case of temporary network or server issues.\n- **MCP Standard:** Seamlessly integrates with AI assistants supporting the Model Context Protocol.\n\n## ⚠️ Prerequisites\n\nBefore you begin, you **must** obtain an API key from the **Korea Tourism Organization (KTO) Data Portal**.\n\n1.  Visit the [KTO Data Portal](https://www.data.go.kr/) (or the specific portal for the tourism API if available).\n2.  Register and request an API key for the \"TourAPI\" services (you might need to look for services providing information like `areaBasedList`, `searchKeyword`, `detailCommon`, etc.).\n3.  Keep your **Service Key (API Key)** safe. It will be required during installation or runtime.\n\n> You need to apply for the API below to make a request for each language.\n>\n> - English: https://www.data.go.kr/data/15101753/openapi.do\n> - Japanese: https://www.data.go.kr/data/15101760/openapi.do\n> - Simplified Chinese: https://www.data.go.kr/data/15101764/openapi.do\n> - Traditional Chinese: https://www.data.go.kr/data/15101769/openapi.do\n> - Russian: https://www.data.go.kr/data/15101831/openapi.do\n> - Spanese: https://www.data.go.kr/data/15101811/openapi.do\n> - German: https://www.data.go.kr/data/15101805/openapi.do\n> - French: https://www.data.go.kr/data/15101808/openapi.do\n\n## 🚀 Installation & Running\n\nYou can run this MCP server using either `uv` (a fast Python package installer and runner) or `Docker`.\n\n### Installing via Smithery\n\nTo install Korea Tourism API MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@harimkang/mcp-korea-tourism-api):\n\n```bash\nnpx -y @smithery/cli install @harimkang/mcp-korea-tourism-api --client claude\n```\n\n### Option 1: Using `uv` (Recommended for local development)\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/harimkang/mcp-korea-tourism-api.git\n    cd mcp-korea-tourism-api\n    ```\n2.  **Set the API Key Environment Variable:**\n    Replace `\"YOUR_KTO_API_KEY\"` with the actual key you obtained.\n\n    ```bash\n    # On macOS/Linux\n    export KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\"\n\n    # On Windows (Command Prompt)\n    # set KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\"\n\n    # On Windows (PowerShell)\n    # $env:KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\"\n    ```\n\n    _Note: For persistent storage, add this line to your shell's configuration file (e.g., `.zshrc`, `.bashrc`, or use system environment variable settings)._\n\n3.  **Install dependencies and run the server:**\n    This command uses `uv` to install dependencies based on `uv.lock` (if available) or `pyproject.toml` and then runs the server module.\n\n    ```bash\n    # Install Dependency with uv\n    uv sync\n\n    # Default: stdio transport (for MCP clients)\n    uv run -m mcp_tourism.server\n\n    # HTTP transport for web applications\n    uv run -m mcp_tourism.server --transport streamable-http --host 127.0.0.1 --port 8000\n\n    # SSE transport for real-time applications\n    uv run -m mcp_tourism.server --transport sse --host 127.0.0.1 --port 8080\n\n    # Using environment variables\n    export MCP_TRANSPORT=streamable-http\n    export MCP_HOST=0.0.0.0\n    export MCP_PORT=3000\n    uv run -m mcp_tourism.server\n    ```\n\n    The server will start and listen for MCP requests via the specified transport protocol.\n\n### Option 2: Using Docker (Recommended for isolated environment/deployment)\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/harimkang/mcp-korea-tourism-api.git\n    cd mcp-korea-tourism-api\n    ```\n2.  **Build the Docker Image:**\n    You can build the image with different transport configurations:\n\n    ```bash\n    # Default build (stdio transport)\n    docker build -t mcp-korea-tourism-api .\n\n    # Build with HTTP transport configuration\n    docker build -t mcp-korea-tourism-api \\\n      --build-arg MCP_TRANSPORT=streamable-http \\\n      --build-arg MCP_HOST=0.0.0.0 \\\n      --build-arg MCP_PORT=8000 \\\n      --build-arg MCP_PATH=/mcp \\\n      --build-arg MCP_LOG_LEVEL=INFO \\\n      .\n\n    # Build with SSE transport configuration\n    docker build -t mcp-korea-tourism-api \\\n      --build-arg MCP_TRANSPORT=sse \\\n      --build-arg MCP_HOST=0.0.0.0 \\\n      --build-arg MCP_PORT=8080 \\\n      .\n    ```\n\n3.  **Run the Docker Container:**\n    You can run the container with different transport configurations:\n    - **Stdio Transport (Default - for MCP clients):**\n\n      ```bash\n      docker run --rm -it \\\n        -e KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\" \\\n        mcp-korea-tourism-api\n      ```\n\n    - **HTTP Transport (for web applications):**\n\n      ```bash\n      # Using runtime environment variables\n      docker run --rm -p 8000:8000 \\\n        -e KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\" \\\n        -e MCP_TRANSPORT=streamable-http \\\n        -e MCP_HOST=0.0.0.0 \\\n        -e MCP_PORT=8000 \\\n        mcp-korea-tourism-api\n\n      # Check health: curl http://localhost:8000/health\n      ```\n\n    - **SSE Transport (for real-time applications):**\n\n      ```bash\n      docker run --rm -p 8080:8080 \\\n        -e KOREA_TOURISM_API_KEY=\"YOUR_KTO_API_KEY\" \\\n        -e MCP_TRANSPORT=sse \\\n        -e MCP_HOST=0.0.0.0 \\\n        -e MCP_PORT=8080 \\\n        mcp-korea-tourism-api\n      ```\n\n    - **Using Docker Compose (Recommended):**\n\n      ```bash\n      # Copy and configure environment variables\n      cp docker.env.example .env\n      # Edit .env file with your API key and preferred settings\n\n      # Run with HTTP transport (default profile)\n      docker-compose up mcp-tourism-http\n\n      # Run with SSE transport\n      docker-compose --profile sse up mcp-tourism-sse\n\n      # Run development setup with debug logging\n      docker-compose --profile dev up mcp-tourism-dev\n      ```\n\n## 🔧 Transport Configuration\n\nThe Korea Tourism API MCP Server supports multiple transport protocols to accommodate different use cases:\n\n### Available Transports\n\n1. **`stdio`** (Default): Standard input/output transport for direct MCP client integration\n   - Best for: Claude Desktop, Cursor, and other MCP-compatible AI assistants\n   - Configuration: No additional setup required\n\n2. **`streamable-http`**: HTTP-based transport for web applications\n   - Best for: Web applications, REST API integration, load balancers\n   - Features: HTTP endpoints, health checks, JSON responses\n   - Default endpoint: `http://localhost:8000/mcp`\n\n3. **`sse`**: Server-Sent Events transport for real-time applications\n   - Best for: Real-time web applications, event-driven architectures\n   - Features: Real-time streaming, persistent connections\n   - Default endpoint: `http://localhost:8080/mcp`\n\n### Configuration Options\n\nYou can configure the server using command line arguments or environment variables:\n\n| Setting   | CLI Argument  | Environment Variable | Default     | Description                      |\n| --------- | ------------- | -------------------- | ----------- | -------------------------------- |\n| Transport | `--transport` | `MCP_TRANSPORT`      | `stdio`     | Transport protocol to use        |\n| Host      | `--host`      | `MCP_HOST`           | `127.0.0.1` | Host address for HTTP transports |\n| Port      | `--port`      | `MCP_PORT`           | `8000`      | Port for HTTP transports         |\n| Path      | `--path`      | `MCP_PATH`           | `/mcp`      | Path for HTTP endpoints          |\n| Log Level | `--log-level` | `MCP_LOG_LEVEL`      | `INFO`      | Logging level                    |\n\n### Command Line Examples\n\n```bash\n# Get help for all available options\npython -m mcp_tourism.server --help\n\n# Run with HTTP transport on custom port\npython -m mcp_tourism.server --transport streamable-http --port 3000 --log-level DEBUG\n\n# Run with SSE transport\npython -m mcp_tourism.server --transport sse --host 0.0.0.0 --port 8080\n```\n\n### Environment Variable Examples\n\n```bash\n# Set environment variables\nexport MCP_TRANSPORT=streamable-http\nexport MCP_HOST=0.0.0.0\nexport MCP_PORT=8000\nexport MCP_LOG_LEVEL=INFO\nexport KOREA_TOURISM_API_KEY=\"your_api_key_here\"\n\n# Run the server\npython -m mcp_tourism.server\n```\n\n### Health Check\n\nFor HTTP and SSE transports, a health check endpoint is available at `/health`:\n\n```bash\n# Check server health\ncurl http://localhost:8000/health\n\n# Example response\n{\n  \"status\": \"healthy\",\n  \"service\": \"Korea Tourism API MCP Server\",\n  \"transport\": \"streamable-http\",\n  \"timestamp\": 1640995200.0\n}\n```\n\n## 🛠️ Integrating with Cursor\n\nTo use this MCP server within Cursor:\n\n1.  **Ensure the Docker container is runnable:** Follow the Docker installation steps above to build the image (`mcp-korea-tourism-api`). You don't need to manually run the container; Cursor will do that.\n2.  **Locate your `mcp.json` file:** This file configures MCP tools for Cursor. You can usually find it via Cursor's settings or potentially in a path like `~/.cursor/mcp.json` or similar.\n3.  **Add or Update the MCP Configuration:** Add the following JSON object to the list within your `mcp.json` file. If you already have an entry for this tool, update its `command`. Replace `\"YOUR_KTO_API_KEY\"` with your actual key.\n    \n\n    ```json\n    {\n      \"mcpServers\": {\n        \"korea-tourism\": {\n          \"command\": \"docker\",\n          \"args\": [\n            \"run\",\n            \"--rm\",\n            \"-i\",\n            \"-e\",\n            \"KOREA_TOURISM_API_KEY=YOUR_KTO_API_KEY\",\n            \"mcp-korea-tourism-api\"\n          ]\n        }\n      }\n    }\n    ```\n\n    OR Use uv [local directory]\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"korea-tourism\": {\n          \"command\": \"uv\",\n          \"args\": [\n            \"--directory\",\n            \"{LOCAL_PATH}/mcp-korea-tourism-api\",\n            \"run\",\n            \"-m\",\n            \"mcp_tourism.server\"\n          ],\n          \"env\": {\n            \"KOREA_TOURISM_API_KEY\": \"YOUR_KTO_API_KEY\"\n          }\n        }\n      }\n    }\n    ```\n\n4.  **Save `mcp.json`**.\n5.  **Restart Cursor or Reload MCP Tools:** Cursor should now detect the tool and use Docker to run it when needed.\n\n## 🛠️ MCP Tools Provided\n\nThis server exposes the following tools for AI assistants:\n\n1.  `search_tourism_by_keyword`: Search for tourism information using keywords (e.g., \"Gyeongbokgung\", \"Bibimbap\"). Filter by content type, area code.\n    \n2.  `get_tourism_by_area`: Browse tourism information by geographic area codes (e.g., Seoul='1'). Filter by content type, district code.\n    \n3.  `find_nearby_attractions`: Discover tourism spots near specific GPS coordinates (longitude, latitude). Filter by radius and content type.\n    \n4.  `search_festivals_by_date`: Find festivals occurring within a specified date range (YYYYMMDD). Filter by area code.\n    \n5.  `find_accommodations`: Search for hotels, guesthouses, etc. Filter by area and district code.\n    \n6.  `get_detailed_information`: Retrieve comprehensive details (overview, usage time, parking, etc.) for a specific item using its Content ID. Filter by content type.\n    \n7.  `get_tourism_images`: Get image URLs associated with a specific tourism item using its Content ID.\n    \n8.  `get_area_codes`: Retrieve area codes (for cities/provinces) and optionally sub-area (district) codes.\n    \n\n## ⚙️ Requirements (for `uv` method)\n\n- Python 3.12+\n- `uv` installed (`pip install uv`)\n\n## Example Usage\n\nAn AI assistant integrated with this MCP could handle queries like:\n\n- \"Find restaurants near Myeongdong station.\"\n- \"Show me pictures of Bulguksa Temple.\"\n- \"Are there any festivals in Busan next month?\"\n- \"Tell me more about Gyeongbokgung Palace, content ID 264337.\"\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/harimkang-mcp-korea-tourism-api-badge.png)](https://mseep.ai/app/harimkang-mcp-korea-tourism-api)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "korea",
        "harimkang",
        "mcp",
        "korea tourism",
        "mcp korea",
        "harimkang mcp"
      ],
      "category": "weather-and-location-data"
    },
    "harshil1712--berlin-transport-mcp": {
      "owner": "harshil1712",
      "name": "berlin-transport-mcp",
      "url": "https://github.com/harshil1712/berlin-transport-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/harshil1712.webp",
      "description": "Access real-time public transport data for Berlin-Brandenburg, including stop searches, upcoming departures, and journey planning between stops. Integrate local transit information into applications using the VBB API.",
      "stars": 5,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-11T23:06:24Z",
      "readme_content": "# Berlin Transport MCP Server\n\nAn MCP server that provides access to Berlin's public transport data through the VBB (Verkehrsverbund Berlin-Brandenburg) API. This server wraps the [v6.vbb.transport.rest](https://v6.vbb.transport.rest/) API.\n\n## Available Tools\n\n### 1. search_stops\nSearch for public transport stops in Berlin-Brandenburg.\n\n**Parameters:**\n- `query` (string): Search query for stops\n\n### 2. get_departures\nGet upcoming departures for a specific stop.\n\n**Parameters:**\n- `stop_id` (string): Stop ID to get departures for\n- `results` (number, optional): Number of results to return\n\n### 3. get_journeys\nGet journey options from one stop to another.\n\n**Parameters:**\n- `from` (string): Origin stop ID\n- `to` (string): Destination stop ID\n- `departure` (string, optional): Departure time (e.g. \"tomorrow 2pm\")\n- `results` (number, optional): Number of results to return\n\n## Connect Claude Desktop to your MCP server\n\nYou can also connect to your remote MCP server from local MCP clients, by using the [mcp-remote proxy](https://www.npmjs.com/package/mcp-remote). \n\nTo connect to your MCP server from Claude Desktop, follow [Anthropic's Quickstart](https://modelcontextprotocol.io/quickstart/user) and within Claude Desktop go to Settings > Developer > Edit Config.\n\nUpdate with this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"calculator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"mcp-remote\",\n        \"https://berlin-transport.mcp-tools.app/sse\"  // or if local http://localhost:8787/sse\n      ]\n    }\n  }\n}\n```\n\nRestart Claude and you should see the tools become available.\n\n## API Documentation\nFor more details about the underlying API, visit [v6.vbb.transport.rest/getting-started.html](https://v6.vbb.transport.rest/getting-started.html).\n\n## Get started: \n\n[![Deploy to Workers](https://deploy.workers.cloudflare.com/button)](https://deploy.workers.cloudflare.com/?url=https://github.com/cloudflare/ai/tree/main/demos/remote-mcp-authless)\n\nThis will deploy your MCP server to a URL like: `remote-mcp-server-authless.<your-account>.workers.dev/sse`\n\nAlternatively, you can use the command line below to get the remote MCP Server created on your local machine:\n```bash\nnpm create cloudflare@latest -- my-mcp-server --template=cloudflare/ai/demos/remote-mcp-authless\n```\n\n## Customizing your MCP Server\n\nTo add your own [tools](https://developers.cloudflare.com/agents/model-context-protocol/tools/) to the MCP server, define each tool inside the `init()` method of `src/index.ts` using `this.server.tool(...)`.\n\n## Connect to Cloudflare AI Playground\n\nYou can connect to your MCP server from the Cloudflare AI Playground, which is a remote MCP client:\n\n1. Go to https://playground.ai.cloudflare.com/\n2. Enter your deployed MCP server URL (`remote-mcp-server-authless.<your-account>.workers.dev/sse`)\n3. You can now use your MCP tools directly from the playground!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "berlin",
        "brandenburg",
        "transit",
        "data berlin",
        "berlin transport",
        "harshil1712 berlin"
      ],
      "category": "weather-and-location-data"
    },
    "isdaniel--mcp_weather_server": {
      "owner": "isdaniel",
      "name": "mcp_weather_server",
      "url": "https://github.com/isdaniel/mcp_weather_server",
      "imageUrl": "/freedevtools/mcp/pfp/isdaniel.webp",
      "description": "Retrieve real-time weather information for any city using the Open-Meteo API without requiring an API key. Provides accurate weather updates through simple commands or API calls.",
      "stars": 19,
      "forks": 14,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-01T18:52:45Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@isdaniel/mcp_weather_server)](https://smithery.ai/server/@isdaniel/mcp_weather_server)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/mcp-weather-server)](https://pypi.org/project/mcp-weather-server/)\n[![PyPI - Version](https://img.shields.io/pypi/v/mcp-weather-server)](https://pypi.org/project/mcp-weather-server/)\n\n<a href=\"https://glama.ai/mcp/servers/@isdaniel/mcp_weather_server\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@isdaniel/mcp_weather_server/badge\" />\n</a>\n\n# Weather MCP Server\n\nA Model Context Protocol (MCP) server that provides weather information using the Open-Meteo API.\n\n## Features\n\n* Get current weather information for a specified city.\n\n## Installation\n\nPip Installation and Usage, This package can be installed using pip:\n\n```bash\npip install mcp_weather_server\n```\n\nThis server is designed to be installed manually by adding its configuration to the `cline_mcp_settings.json` file.\n\n1.  Add the following entry to the `mcpServers` object in your `cline_mcp_settings.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"-m\",\n        \"mcp_weather_server\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n2. Save the `cline_mcp_settings.json` file.\n\n## Configuration\n\nThis server does not require an API key. It uses the Open-Meteo API, which is free and open-source.\n\n## Usage\n\nThis server provides several tools: `get_weather`, `get_weather_by_datetime_range`, and `get_current_datetime`.\n\n### `get_weather`\n\nRetrieves the current weather information for a given city.\n\n**Parameters:**\n\n*   `city` (string, required): The name of the city.\n\n**Example:**\n\nTo get the weather in Taipei, you would use the tool like this:\n\n```\n<use_mcp_tool>\n<server_name>weather</server_name>\n<tool_name>get_weather</tool_name>\n<arguments>\n{\n  \"city\": \"Taipei\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### `get_weather_by_datetime_range`\n\nRetrieves weather information for a specified city between start and end dates.\n\n**Parameters:**\n\n*   `city` (string, required): The name of the city.\n*   `start_date` (string, required): Start date in format YYYY-MM-DD (ISO 8601).\n*   `end_date` (string, required): End date in format YYYY-MM-DD (ISO 8601).\n\n**Example:**\n\nTo get the weather in London between 2024-01-01 and 2024-01-07, you would use the tool like this:\n\n```\n<use_mcp_tool>\n<server_name>weather</server_name>\n<tool_name>get_weather_by_datetime_range</tool_name>\n<arguments>\n{\n  \"city\": \"London\",\n  \"start_date\": \"2024-01-01\",\n  \"end_date\": \"2024-01-07\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### `get_current_datetime`\n\nRetrieves the current time in a specified timezone.\n\n**Parameters:**\n\n*   `timezone_name` (string, required): IANA timezone name (e.g., 'America/New_York', 'Europe/London'). Use UTC timezone if no timezone provided by the user.\n\n**Example:**\n\nTo get the current time in New York, you would use the tool like this:\n\n```\n<use_mcp_tool>\n<server_name>weather</server_name>\n<tool_name>get_current_datetime</tool_name>\n<arguments>\n{\n  \"timezone_name\": \"America/New_York\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n## For developers\n\nChange Working Directory Before Running Python\n\n```\npython -m mcp_weather_server\n```\n\nOr if you want Python to find your package no matter where you run from, you can set PYTHONPATH:\n\n```\nset PYTHONPATH=C:\\xxx\\mcp_weather_server\\src\npython -m mcp_weather_server\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_weather_server",
        "weather",
        "api",
        "isdaniel mcp_weather_server",
        "mcp_weather_server retrieve",
        "weather information"
      ],
      "category": "weather-and-location-data"
    },
    "ivanbtrujillo--mcp-server-spike": {
      "owner": "ivanbtrujillo",
      "name": "mcp-server-spike",
      "url": "https://github.com/ivanbtrujillo/mcp-server-spike",
      "imageUrl": "/freedevtools/mcp/pfp/ivanbtrujillo.webp",
      "description": "Provides real-time weather information and alerts, enabling applications to integrate and display up-to-date forecasts and weather data.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-24T13:56:01Z",
      "readme_content": "# MCP Server Example\n\nThis project is a very basic MCP server ready to be consumed by Cursor or other tools.\n\nModify index.ts and add any tools you want, or keep the default ones.\n\nThen build the project:\n\n```bash\npnpm run build\n```\n\nAnd run it:\n\n```bash\npnpm run start\n```\n\nNow add a .cursor/mcp.json file in your project, and paste the following;\n\n```\n{\n    \"mcpServers\":{\n        \"weather\":{\n            \"command\": \"node\",\n            \"args\": [\"[path]/build/index.js\"]\n        }     \n    }\n}\n```\nReplace [path] with the absolute path to this project. Run pwd in the project folder for that. For example, in my case it is:\n```\n{\n    \"mcpServers\":{\n        \"weather\":{\n            \"command\": \"node\",\n            \"args\": [\"/Users/ivanbtrujillo/Development/mcp-server-spike/build/index.js\"]\n        }     \n    }\n}\n```\nNow go to \"Settings\" in cursor. You should be able to see the MCP server there. Enable it (click on the top right)\n\n\nNow go to the chat, switch to Agent mode and select claude-3.7-sonnet as your model.\n\nType the following: \n```\nWhat is the weather in Texas?\n```\n\nIt will use the MCP to get first the weather alerts, and then the forecast\nHere is an example of how the chat interface looks when querying the weather in Texas:",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "forecasts",
        "spike",
        "data",
        "weather data",
        "weather information",
        "server spike"
      ],
      "category": "weather-and-location-data"
    },
    "jagan-shanmugam--open-streetmap-mcp": {
      "owner": "jagan-shanmugam",
      "name": "open-streetmap-mcp",
      "url": "https://github.com/jagan-shanmugam/open-streetmap-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jagan-shanmugam.webp",
      "description": "Provides access to location-based services and geospatial data from OpenStreetMap, enabling geocoding of addresses, search for points of interest, and neighborhood analysis for real estate insights.",
      "stars": 117,
      "forks": 27,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T21:32:54Z",
      "readme_content": "# OpenStreetMap (OSM) MCP Server\n\nAn OpenStreetMap MCP server implementation that enhances LLM capabilities with location-based services and geospatial data.\n\n## Demo\n\n### Meeting Point Optimization\n\n\n### Neighborhood Analysis\n\n\n### Parking Search\n\n\n\n## Installation\n\n### In MCP Hosts like Claude Desktop, Cursor, Windsurf, etc.\n- `osm-mcp-server`: The main server, available for public use.\n  \n  ```json\n  \"mcpServers\": {\n    \"osm-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"osm-mcp-server\"\n      ]\n    }\n  }\n  ```\n\n## Features\n\nThis server provides LLMs with tools to interact with OpenStreetMap data, enabling location-based applications to:\n\n- Geocode addresses and place names to coordinates\n- Reverse geocode coordinates to addresses\n- Find nearby points of interest\n- Get route directions between locations\n- Search for places by category within a bounding box\n- Suggest optimal meeting points for multiple people\n- Explore areas and get comprehensive location information\n- Find schools and educational institutions near a location\n- Analyze commute options between home and work\n- Locate EV charging stations with connector and power filtering\n- Perform neighborhood livability analysis for real estate\n- Find parking facilities with availability and fee information\n\n## Components\n\n### Resources\n\nThe server implements location-based resources:\n- `location://place/{query}`: Get information about places by name or address\n- `location://map/{style}/{z}/{x}/{y}`: Get styled map tiles at specified coordinates\n\n### Tools\n\nThe server implements several geospatial tools:\n- `geocode_address`: Convert text to geographic coordinates\n- `reverse_geocode`: Convert coordinates to human-readable addresses\n- `find_nearby_places`: Discover points of interest near a location\n- `get_route_directions`: Get turn-by-turn directions between locations\n- `search_category`: Find places of specific categories in an area\n- `suggest_meeting_point`: Find optimal meeting spots for multiple people\n- `explore_area`: Get comprehensive data about a neighborhood\n- `find_schools_nearby`: Locate educational institutions near a specific location\n- `analyze_commute`: Compare transportation options between home and work\n- `find_ev_charging_stations`: Locate EV charging infrastructure with filtering\n- `analyze_neighborhood`: Evaluate neighborhood livability for real estate\n- `find_parking_facilities`: Locate parking options near a destination\n\n\n## Local Testing\n\n### Running the Server\n\nTo run the server locally:\n\n1. Install the package in development mode:\n\n```bash\npip install -e .\n```\n\n2. Start the server:\n\n```bash\nosm-mcp-server\n```\n\n3. The server will start and listen for MCP requests on the standard input/output.\n\n### Testing with Example Clients\n\nThe repository includes two example clients in the `examples/` directory:\n\n#### Basic Client Example\n\n`client.py` demonstrates basic usage of the OSM MCP server:\n\n```bash\npython examples/client.py\n```\n\nThis will:\n- Connect to the locally running server\n- Get information about San Francisco\n- Search for restaurants in the area\n- Retrieve comprehensive map data with progress tracking\n\n#### LLM Integration Example\n\n`llm_client.py` provides a helper class designed for LLM integration:\n\n```bash\npython examples/llm_client.py\n```\n\nThis example shows how an LLM can use the Location Assistant to:\n- Get location information from text queries\n- Find nearby points of interest\n- Get directions between locations\n- Find optimal meeting points\n- Explore neighborhoods\n\n### Writing Your Own Client\n\nTo create your own client:\n\n1. Import the MCP client:\n```python\nfrom mcp.client import Client\n```\n\n2. Initialize the client with your server URL:\n```python\nclient = Client(\"http://localhost:8000\")\n```\n\n3. Invoke tools or access resources:\n```python\n# Example: Geocode an address\nresults = await client.invoke_tool(\"geocode_address\", {\"address\": \"New York City\"})\n```\n\n#### Claude Desktop config for local server\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n  ```json\n  \"mcpServers\": {\n    \"osm-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/osm-mcp-server\",\n        \"run\",\n        \"osm-mcp-server\"\n      ]\n    }\n  }\n  ```\n</details>\n\n\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags.\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/osm-mcp-server run osm-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "streetmap",
        "openstreetmap",
        "geocoding",
        "data openstreetmap",
        "open streetmap",
        "streetmap mcp"
      ],
      "category": "weather-and-location-data"
    },
    "jikime--py-mcp-ko-weather": {
      "owner": "jikime",
      "name": "py-mcp-ko-weather",
      "url": "https://github.com/jikime/py-mcp-ko-weather",
      "imageUrl": "/freedevtools/mcp/pfp/jikime.webp",
      "description": "Access accurate and up-to-date weather forecasts for South Korean regions using official meteorological data. Retrieve detailed short-term weather forecasts by querying location grid coordinates for efficient planning and decision-making.",
      "stars": 4,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-28T12:44:38Z",
      "readme_content": "# Korea Weather MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@jikime/py-mcp-ko-weather)](https://smithery.ai/server/@jikime/py-mcp-ko-weather) ![](https://badge.mcpx.dev?type=server 'MCP Server') ![Version](https://img.shields.io/badge/version-1.1.10-green) ![License](https://img.shields.io/badge/license-MIT-blue)\n\nThis MCP (Multi-platform Communication Protocol) server provides access to Korea Meteorological Administration (KMA) APIs, allowing AI agents to retrieve weather forecast information for locations in South Korea.\n\n## Overview\n\n- Retrieve precise grid coordinates for Korean administrative regions\n- Get detailed short-term weather forecasts for any location in Korea\n- Support for all Korean administrative divisions (city, district, neighborhood)\n- Structured text responses optimized for LLM consumption\n- Comprehensive weather data including temperature, precipitation, sky condition, humidity, wind direction, and wind speed\n\n## Table of Contents\n\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Configure MCP Settings](#configure-mcp-settings)\n- [API Reference](#api-reference)\n- [Acknowledgements](#acknowledgements)\n- [License](#license)\n\n## Setup\n\n### Prerequisites\n\n- Python 3.12+\n- Korea Meteorological Administration API credentials\n- You can obtain the API credentials by signing up at the [Public Data Portal](https://www.data.go.kr/) and requesting access to the \"기상청_단기예보 ((구)_동네예보) 조회서비스\" API.\n\n### Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/jikime/py-mcp-ko-weather.git\ncd py-mcp-ko-weather\n```\n\n2. uv installation\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n3. Create a virtual environment and install dependencies:\n```bash\nuv venv -p 3.12\nsource .venv/bin/activate\nuv pip install -r requirements.txt\n```\n\n4. Create a `.env` file with your KMA API credentials:\n```\ncp env.example .env\nvi .env\n\nKO_WEATHER_API_KEY=your_api_key_here\n```\n\n5. Migrate the grid coordinates data from Excel to SQLite:\n```bash\nuv run src/migrate.py\n```\n\n#### Using Docker\n\n1. Build the Docker image:\n```bash\ndocker build -t py-mcp-ko-weather .\n```\n\n2. Run the container:\n```bash\ndocker run py-mcp-ko-weather\n```\n\n#### Using Local\n\n1. Run the server:\n```bash\nmcp run src/server.py\n```\n2. Run the MCP Inspector\n```bash\nmcp dev server.py\n```\n\n## Configure MCP Settings\nAdd the server configuration to your MCP settings file:\n\n#### Claude desktop app \n1. To install automatically via [Smithery](https://smithery.ai/server/@jikime/py-mcp-ko-weather):\n\n```bash\nnpx -y @smithery/cli install @jikime/py-mcp-ko-weather --client claude\n```\n\n2. To install manually\nopen `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nAdd this to the `mcpServers` object:\n```json\n{\n  \"mcpServers\": {\n    \"Google Toolbox\": {\n      \"command\": \"/path/to/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/py-mcp-ko-weather\",\n        \"run\",\n        \"src/server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Cursor IDE \nopen `~/.cursor/mcp.json`\n\nAdd this to the `mcpServers` object:\n```json\n{\n  \"mcpServers\": {\n    \"Google Toolbox\": {\n      \"command\": \"/path/to/bin/uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/py-mcp-ko-weather\",\n        \"run\",\n        \"src/server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### for Docker\n```json\n{\n  \"mcpServers\": {\n    \"Google Toolbox\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"py-mcp-ko-weather\"\n      ]\n    }\n  }\n}\n```\n\n### Using with Claude\n\nOnce configured, you can ask Claude questions like:\n- \"서울특별시 서초구 양재1동의 날씨는?\"\n- \"부산광역시 해운대구 우동의 날씨 예보를 알려줘\"\n- \"경기도 성남시 분당구의 현재 기온은?\"\n\n## API Reference\n\n### Tools\n\n#### Get Grid Location\n```\nget_grid_location(city: str, gu: str, dong: str) -> dict\n```\nRetrieves the grid coordinates (nx, ny) used by the Korea Meteorological Administration API for the specified location. \nThis tool searches the database for the exact coordinates based on city/province, district/county, and neighborhood/town information.\n\n#### Get Forecast\n```\nget_forecast(city: str, gu: str, dong: str, nx: int, ny: int) -> str\n```\nCalls the KMA's ultra-short-term forecast API to provide weather forecast information for a specific location.\nReturns comprehensive weather data including temperature, precipitation, sky condition, humidity, wind direction, and wind speed.\n\n### Resources\n\n#### Weather Instructions\n```\nGET weather://instructions\n```\nProvides detailed documentation on how to use the Korea Weather MCP server, including tool workflows and response formats.\n\n### Prompts\n\n#### Weather Query\nThe server includes a structured prompt template for guiding conversations about weather queries, ensuring efficient information gathering and clear presentation of forecast data.\n\n## Response Format\n\nWeather forecast responses are provided in structured text format, optimized for LLM processing:\n\n```\nWeather forecast for 서울특별시 서초구 양재1동 (coordinates: nx=61, ny=125)\nDate: 2025-05-01\nTime: 15:00\n\nCurrent conditions:\nTemperature: 22.3°C\nSky condition: Mostly clear\nPrecipitation type: None\nPrecipitation probability: 0%\nHumidity: 45%\nWind direction: Northwest\nWind speed: 2.3 m/s\n\nHourly forecast:\n16:00 - Temperature: 21.8°C, Sky: Clear, Precipitation: None\n17:00 - Temperature: 20.5°C, Sky: Clear, Precipitation: None\n18:00 - Temperature: 19.2°C, Sky: Clear, Precipitation: None\n...\n```\n\n## Acknowledgements\n\n- [Korea Meteorological Administration](https://www.kma.go.kr/)\n- [Public Data Portal](https://www.data.go.kr/)\n- [MCP Protocol](https://github.com/mcp-foundation/mcp-spec)\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "meteorological",
        "korean",
        "jikime",
        "weather location",
        "korean regions",
        "data jikime"
      ],
      "category": "weather-and-location-data"
    },
    "jorekai--db-timetable-mcp": {
      "owner": "jorekai",
      "name": "db-timetable-mcp",
      "url": "https://github.com/jorekai/db-timetable-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jorekai.webp",
      "description": "Access real-time train schedules, track changes, and search for stations using Deutsche Bahn's timetable data. Integrate robust functionality for up-to-date travel information in applications.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T19:03:17Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@jorekai/db-timetable-mcp)](https://smithery.ai/server/@jorekai/db-timetable-mcp)\n# DB Timetable MCP Server\n\nEin Model Context Protocol (MCP) Server für die Deutsche Bahn Timetable API. Der Server bietet MCP-Tools und -Ressourcen, um auf Fahrplandaten, Stationsinformationen und Zugänderungen zuzugreifen.\n\n**Pflicht zur Namensnennung:**  \n\nDieses Projekt stellt die Fahrplandaten der Deutschen Bahn bereit, die unter der [Creative Commons Attribution 4.0 International Lizenz (CC BY 4.0)](https://creativecommons.org/licenses/by/4.0/) öffentlich einsehbar sind.\n\nWeitere Infos zur API und Lizenzbedingungen findest du unter [developers.deutschebahn.com](https://developers.deutschebahn.com/). API Requests unterliegen den Bedingungen der Lizenz.\n\n\n## Funktionen\n\n- **Aktuelle Fahrplände**: Abrufen aktueller Fahrplandaten für eine Station\n- **Fahrplanänderungen**: Tracking der neuesten Änderungen\n- **Geplante Fahrpläne**: Zugriff auf geplante Fahrplandaten für einen bestimmten Zeitpunkt\n- **Stationssuche**: Suche nach Bahnhofsstationen anhand von Namen oder Codes\n\n## Voraussetzungen\n\n- Node.js 18 oder höher\n- API-Zugangsdaten für die DB Timetable API (Client-ID und Client-Secret)\n\n## Installation\n\n1. Repository klonen:\n   ```\n   git clone <repository-url>\n   cd db-mcp\n   ```\n\n2. Abhängigkeiten installieren:\n   ```\n   npm install\n   ```\n\n3. TypeScript-Code kompilieren:\n   ```\n   npm run build\n   ```\n\n## Konfiguration\n\nErstelle eine `.env`-Datei im Root-Verzeichnis des Projekts mit folgenden Umgebungsvariablen:\n\n```\nDB_TIMETABLE_CLIENT_ID=deine-client-id\nDB_TIMETABLE_CLIENT_SECRET=dein-client-secret\nTRANSPORT_TYPE=stdio\nPORT=8080\nSSE_ENDPOINT=/sse\nLOG_LEVEL=info\n```\n\n### Konfigurationsoptionen\n\n- `DB_TIMETABLE_CLIENT_ID`: Client-ID für die DB API (erforderlich)\n- `DB_TIMETABLE_CLIENT_SECRET`: Client-Secret für die DB API (erforderlich)\n- `TRANSPORT_TYPE`: Transporttyp für den MCP-Server (`stdio` oder `sse`, Standard: `stdio`)\n- `PORT`: Port für den SSE-Server (Standard: `8080`)\n- `SSE_ENDPOINT`: Endpunkt für SSE-Verbindungen (Standard: `/sse`)\n- `LOG_LEVEL`: Logging-Level (`debug`, `info`, `warn`, `error`, Standard: `info`)\n\n## Verwendung\n\n### Server starten\n\nIm stdio-Modus (für CLI-Tests und Debugging):\n\n```bash\nnpm start\n```\n\nIm SSE-Modus (für Webclients):\n\n```bash\nTRANSPORT_TYPE=sse npm start\n```\n\n### Mit Inspect-Modus testen\n\nDer Server kann mit dem FastMCP Inspector getestet werden:\n\n```bash\nnpx fastmcp inspect path/to/index.js\n```\n\n### MCP-Tools\n\nDer Server stellt folgende Tools bereit:\n\n1. **getCurrentTimetable**: Ruft aktuelle Fahrplandaten für eine Station ab\n   - Parameter: `evaNo` - EVA-Nummer der Station (z.B. 8000105 für Frankfurt Hbf)\n\n2. **getRecentChanges**: Ruft aktuelle Änderungen für eine Station ab\n   - Parameter: `evaNo` - EVA-Nummer der Station (z.B. 8000105 für Frankfurt Hbf)\n\n3. **getPlannedTimetable**: Ruft geplante Fahrplandaten für eine Station ab\n   - Parameter: \n     - `evaNo` - EVA-Nummer der Station (z.B. 8000105 für Frankfurt Hbf)\n     - `date` - Datum im Format YYMMDD (z.B. 230401 für 01.04.2023)\n     - `hour` - Stunde im Format HH (z.B. 14 für 14 Uhr)\n\n4. **findStations**: Sucht nach Stationen anhand eines Suchmusters\n   - Parameter: `pattern` - Suchmuster (z.B. \"Frankfurt\" oder \"BLS\")\n\n### MCP-Ressourcen\n\nDer Server stellt folgende Ressourcen bereit:\n\n1. **Aktuelle Fahrplandaten**: `db-api:timetable/current/{evaNo}`\n2. **Aktuelle Fahrplanänderungen**: `db-api:timetable/changes/{evaNo}`\n3. **Geplante Fahrplandaten**: `db-api:timetable/planned/{evaNo}/{date}/{hour}`\n4. **Stationssuche**: `db-api:station/{pattern}`\n\n## Entwicklung\n\n### Projekt-Struktur\n\n```\ndb-mcp/\n├── src/\n│   ├── api/             # API-Client und Typen\n│   ├── tools/           # MCP-Tools\n│   ├── resources/       # MCP-Ressourcen\n│   ├── utils/           # Hilfsfunktionen\n│   ├── config.ts        # Konfiguration\n│   └── index.ts         # Haupteinstiegspunkt\n├── dist/                # Kompilierte Dateien\n├── .env                 # Umgebungsvariablen\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n### NPM-Skripte\n\n- `npm run build`: Kompiliert den TypeScript-Code\n- `npm start`: Startet den Server\n- `npm run dev`: Startet den Server im Entwicklungsmodus mit automatischem Neuladen\n- `npm test`: Führt Tests aus\n\n## Erweiterbarkeit\n\nPotenzielle Erweiterungen\n1. Datenverarbeitung und -anreicherung\n   - Semantische Fahrplandatenverarbeitung: XML zu strukturiertem JSON mit semantischer Anreicherung\n   - Historische Datenanalyse für Verspätungen und Betriebsstörungen\n   - Integration multimodaler Verkehrsverbindungen\n2. Erweiterte MCP-Tools\n   - Routenplanung zwischen Stationen\n   - KI-basierte Verspätungs- und Auslastungsprognosen\n   - Reisestörungsanalyse\n   - Barrierefreiheitscheck für Stationen und Verbindungen\n\n## Lizenz\n\nMCP Server: [MIT Lizenz](LICENSE)\n\nDB Timetable API: [Creative Commons Namensnennung 4.0 International Lizenz](https://developers.deutschebahn.com/db-api-marketplace/apis/product/timetables)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "timetable",
        "bahn",
        "track",
        "bahn timetable",
        "train schedules",
        "timetable data"
      ],
      "category": "weather-and-location-data"
    },
    "juhemcp--jweather-mcp-server": {
      "owner": "juhemcp",
      "name": "jweather-mcp-server",
      "url": "https://github.com/juhemcp/jweather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/juhemcp.webp",
      "description": "Provides real-time weather forecasts for various cities and regions, enabling queries for local weather conditions based on city or region names. It retrieves accurate weather data for application enhancement.",
      "stars": 0,
      "forks": 6,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-19T05:29:17Z",
      "readme_content": "# Juhe Weather MCP Server\n\n一个提供全国天气预报查询功能的模型上下文协议（Model Context Protocol）服务器。该服务器使大型语言模型（LLMs）能够获取全国城市、地区的天气预报情况。\n\n## Components\n\n### Tools\n\n服务器实现了一个工具:\n\n- query_weather: 根据城市、地区、区县名称查询当地实时天气预报情况.\n  - 需要传入 \"city\"（城市、区县等名称）作为必须的字符串参数。\n```\nasync def query_weather(\n    city: str = Field(description=\"查询的城市名称，如北京、上海、广州、深圳、泰顺等；城市或区县或地区名使用简写，严格按照规范填写，否则会导致查询失败\")\n) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:\n```\n\n\n## Install\nThis server requires Python 3.10 or higher. Install dependencies using uv (recommended) or pip\n\n### Using uv (recommended)\nWhen using [uv](https://docs.astral.sh/uv/) no specific installation is needed. We will use [uvx](https://docs.astral.sh/uv/guides/tools/) to directly run jweather-mcp-server.\n\n```bash\nuvx jweather-mcp-server\n```\n\n### Using PIP\nAlternatively you can install jweather-mcp-server via pip:\n```\npip install jweather-mcp-server\n```\nAfter installation, you can run it as a script using:\n```\npython -m jweather_mcp_server\n```\n\n### Configuration\n\n#### Environment Variables\n`JUHE_WEATHER_API_KEY`: 聚合数据的天气预报查询API密钥。获取：[https://www.juhe.cn/docs/api/id/73](https://www.juhe.cn/docs/api/id/73)\n\n```\nJUHE_WEATHER_API_KEY=your_api_key\n```\n\n#### Configure For CLINE\n\n<details>\n  <summary>Using uvx</summary>\n\n  ```\n  \"mcpServers\": {\n    \"jweather-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"jweather-mcp-server\"\n      ],\n      \"env\": {\n        \"JUHE_WEATHER_API_KEY\": \"your_api_key\"\n      }\n    }\n  }\n  ```\n</details>\n\n<details>\n  <summary>Using pip installation</summary>\n\n  ```\n  \"mcpServers\": {\n    \"jweather-mcp-server\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"-m\",\n        \"jmobile_location_mcp_server\"\n      ],\n      \"env\": {\n        \"JUHE_WEATHER_API_KEY\": \"your_api_key\"\n      }\n    }\n  }\n  ```\n</details>\n\n## Debugging\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx jweather-mcp-server \n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```bash\ncd path/to/servers/src/jweather-mcp-server\nnpx @modelcontextprotocol/inspector uv run jweather-mcp-server\n```\n\n## Examples of Questions for Cline\n1. \"查询下苏州的天气\"\n2. \"今天上海的天气如何？\"",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "juhemcp",
        "jweather",
        "weather data",
        "weather location",
        "juhemcp jweather"
      ],
      "category": "weather-and-location-data"
    },
    "kennyckk--mcp_hkbus": {
      "owner": "kennyckk",
      "name": "mcp_hkbus",
      "url": "https://github.com/kennyckk/mcp_hkbus",
      "imageUrl": "/freedevtools/mcp/pfp/kennyckk.webp",
      "description": "Provides real-time access to bus arrival information and route details for KMB and Long Win Bus services in Hong Kong, including queries for bus routes, stops, and estimated arrival times. Supports both English and Traditional Chinese for broader accessibility.",
      "stars": 3,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-07T06:24:22Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/kennyckk-mcp-hkbus-badge.png)](https://mseep.ai/app/kennyckk-mcp-hkbus)\n\n# KMB Bus MCP Server\n[![smithery badge](https://smithery.ai/badge/@kennyckk/mcp_hkbus)](https://smithery.ai/server/@kennyckk/mcp_hkbus)\n\nA Model Context Protocol (MCP) server that provides real-time access to Hong Kong's KMB (九龍巴士) and Long Win Bus (龍運巴士) route information and arrival times. This server enables Language Models to query Hong Kong bus service information to answer user questions about bus routes, stops, and estimated arrival times.\n\n<a href=\"https://glama.ai/mcp/servers/@kennyckk/mcp_hkbus\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kennyckk/mcp_hkbus/badge\" alt=\"KMB Bus Server MCP server\" />\n</a>\n\n## Features\n\n- Real-time bus arrival information (ETA)\n- Comprehensive bus route queries\n- Bus stop information and searches\n- Route-stop mapping\n- Caching system to optimize API calls\n- Bilingual support (English and Traditional Chinese)\n\n## Data Source\n\nThis project utilizes the official KMB/LWB Open Data API:\n\n- Base URL: https://data.etabus.gov.hk/v1/transport/kmb\n- [KMB Open Data API Documentation](https://data.etabus.gov.hk/documentation/overview)\n\n## Prerequisites\n\n- Python 3.10 or higher\n- uv package manager\n\n## Installation\n\n### Installing via Smithery\n\nTo install KMB Bus MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kennyckk/mcp_hkbus):\n\n```bash\nnpx -y @smithery/cli install @kennyckk/mcp_hkbus --client claude\n```\n\n### Manual Installation\n\n1. First, install uv if you haven't already:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n2. Clone the repository:\n\n```bash\ngit clone git@github.com:kennyckk/mcp_hkbus.git\ncd mcp_hkbus\n```\n\n3. Use uv to handle the python package:\n\n```bash\nuv sync #using uv.lock\n```\n\n## Usage\n\n1. Edit the Config in your MCP Client (e.g. Claude Desktop):\n\n```json\n{\n  \"mcpServers\": {\n    \"bus_service\": {\n      \"command\": \"path/to/uv.exe\",\n      \"args\": [\"--directory\", \"path/to/kmb_bus\", \"run\", \"kmb_mcp.py\"],\n      \"background\": true\n    }\n  }\n}\n```\n\n2. The server provides several tools that can be used by Language Models to query bus information:\n\n- `get_route_list()`: Get a list of all bus routes\n- `get_stop_list()`: Get a list of all bus stops\n- `get_route_stops()`: Get stops for a specific route\n- `find_stops_by_name()`: Search for bus stops by name\n- `get_all_routes_at_stop()`: Get all routes serving a specific stop\n- `get_eta()`: Get estimated arrival times\n\n## Testing\n\nRun the test suite using pytest:\n\n```bash\npytest test/kmb-mcp-tests.py\n```\n\n## Dependencies\n\n- `httpx`: For async HTTP requests\n- `fastmcp`: For MCP server implementation\n- `pytest`: For testing (development only)\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Acknowledgments\n\n- KMB/LWB for providing the open data API\n- The MCP protocol developers\n\n## Note\n\nThis service relies on the KMB/LWB Open Data API. Please be mindful of API rate limits and implement appropriate error handling in production environments.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_hkbus",
        "kmb",
        "bus",
        "mcp_hkbus provides",
        "kennyckk mcp_hkbus",
        "details kmb"
      ],
      "category": "weather-and-location-data"
    },
    "kentstudy0922--coolWeatherTest": {
      "owner": "kentstudy0922",
      "name": "coolWeatherTest",
      "url": "https://github.com/kentstudy0922/coolWeatherTest",
      "imageUrl": "/freedevtools/mcp/pfp/kentstudy0922.webp",
      "description": "Provides real-time weather data and forecasts for applications. Enables seamless integration of accurate weather information to support user decision-making.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2021-10-26T07:40:39Z",
      "readme_content": "# coolWeatherTest",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "coolweathertest",
        "weather",
        "forecasts",
        "weather data",
        "weather information",
        "kentstudy0922 coolweathertest"
      ],
      "category": "weather-and-location-data"
    },
    "kentstudy0922--weather-mcp": {
      "owner": "kentstudy0922",
      "name": "weather-mcp",
      "url": "https://github.com/kentstudy0922/weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kentstudy0922.webp",
      "description": "Fetches real-time weather data and integrates weather information into applications, providing accurate forecasts to enhance user experience.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-14T07:03:49Z",
      "readme_content": "# weather-mcp\n一个获取天气的测试mcp server\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp",
      "npm_downloads": 226,
      "keywords": [
        "weather",
        "forecasts",
        "mcp",
        "weather data",
        "weather information",
        "kentstudy0922 weather"
      ],
      "category": "weather-and-location-data"
    },
    "kevinkelin--mcp-gaodeweather-server": {
      "owner": "kevinkelin",
      "name": "mcp-gaodeweather-server",
      "url": "https://github.com/kevinkelin/mcp-gaodeweather-server",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Fetches current weather information for specified cities using the Gaode Map API, enabling integration of real-time weather data into applications.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gaodeweather",
        "weather",
        "api",
        "weather data",
        "gaodeweather server",
        "weather information"
      ],
      "category": "weather-and-location-data"
    },
    "kinglionsz--mcp-geo": {
      "owner": "kinglionsz",
      "name": "mcp-geo",
      "url": "https://github.com/kinglionsz/mcp-geo",
      "imageUrl": "/freedevtools/mcp/pfp/kinglionsz.webp",
      "description": "Provides real-time user geolocation data by integrating with EdgeOne Pages Functions using the Model Context Protocol. Enhances location-aware interactions for AI models by simplifying access to geolocation information.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-03T02:46:28Z",
      "readme_content": "# MCP with Pages Functions ：Geo Location Demo \n\nThis project demonstrates how to use EdgeOne Pages Functions to retrieve user geolocation information and integrate it with large language models through MCP (Model Context Protocol).\n\n## Demo\n\n![f180b5ae_0e9c_40a8_a76a_b8f2a5e6108f](https://cloudcache.tencent-cloud.com/qcloud/ui/static/static_source_business/f180b5ae-0e9c-40a8-a76a-b8f2a5e6108f.gif)\n\n## Deploy\n\n[![Deploy with EdgeOne Pages](https://cdnstatic.tencentcs.com/edgeone/pages/deploy.svg)](https://edgeone.ai/pages/new?template=mcp-geo)\n\nMore Templates: [EdgeOne Pages](https://edgeone.ai/pages/templates)\n\n## Components\n\n### 1. EdgeOne Pages Functions: Geolocation\n\nThe project includes an EdgeOne Pages Function that retrieves user geolocation information:\n\n* Uses the EdgeOne request context to access geolocation data\n* Returns location information in a JSON format\n* Located in `functions/get_geo.ts`\n\n### 2. MCP Server Integration\n\nThe MCP server component provides an interface for large language models to access geolocation data:\n\n* Implements the Model Context Protocol (MCP)\n* Exposes a `get_geolocation` tool that can be used by AI models\n* Uses the EdgeOne Pages Function to fetch geolocation data\n* Located in `mcp-server/index.ts`\n\n## MCP Configuration\n\nTo use the MCP server with large language models, add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"edgeone-geo-mcp-server\": {\n      \"command\": \"tsx\",\n      \"args\": [\"path/to/mcp-server/index.ts\"]\n    }\n  }\n}\n```\n\n## Learn More\n\n* [EdgeOne Pages](https://edgeone.ai/products/pages)\n* [EdgeOne Pages Functions documentation](https://edgeone.ai/document/162227908259442688)\n* [Model Context Protocol (MCP)](https://modelcontextprotocol.github.io) - Learn about integrating AI models with external tools and services\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "geo",
        "location",
        "geolocation data",
        "geolocation information",
        "user geolocation"
      ],
      "category": "weather-and-location-data"
    },
    "kukapay--whattimeisit-mcp": {
      "owner": "kukapay",
      "name": "whattimeisit-mcp",
      "url": "https://github.com/kukapay/whattimeisit-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Get the current time based on your IP address in ISO 8601 format. Integrate time-checking capabilities into applications using this lightweight MCP server powered by World Time.",
      "stars": 8,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-07T17:25:30Z",
      "readme_content": "# WhatTimeIsIt MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@kukapay/whattimeisit-mcp)](https://smithery.ai/server/@kukapay/whattimeisit-mcp)\nA lightweight mcp server that tells you exactly what time is it, powered by [World Time](http://worldtimeapi.org/).\n\n![GitHub](https://img.shields.io/github/license/kukapay/whattimeisit-mcp) \n![GitHub last commit](https://img.shields.io/github/last-commit/kukapay/whattimeisit-mcp)\n\n## Installation\n\n### Installing via Smithery\n\nTo install WhatTimeIsIt for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/whattimeisit-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/whattimeisit-mcp --client claude\n```\n\n### Manual Installation\n1. **Clone the Repository**\n   ```bash\n   git clone https://github.com/kukapay/whattimeisit-mcp.git\n   ```\n\n2. **Client Configuration**\n    ```json\n    {\n      \"mcpServers\": {\n        \"whattimeisit\": {\n          \"command\": \"uv\",\n          \"args\": [\"--directory\", \"path/to/whattimeisit-mcp\", \"run\", \"main.py\"]\n        }\n      }\n    }\n    ```\n   \n## Usage\n\n\n### MCP Tool\nThe server provides a single tool:\n- **Tool Name**: `what_time_is_it`\n- **Description**: Returns the current time string based on the your current IP.\n- **Output**: A string in ISO 8601 format (e.g., `\"2025-03-17T03:17:00+11:00\"`).\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kukapay",
        "whattimeisit",
        "mcp",
        "kukapay whattimeisit",
        "whattimeisit mcp",
        "data kukapay"
      ],
      "category": "weather-and-location-data"
    },
    "kukapay--whereami-mcp": {
      "owner": "kukapay",
      "name": "whereami-mcp",
      "url": "https://github.com/kukapay/whereami-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kukapay.webp",
      "description": "Retrieve precise geolocation information based on the current IP address with detailed reports and error handling capabilities. Supports dynamic queries for specific data types such as IP, country, and city.",
      "stars": 3,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-26T10:37:31Z",
      "readme_content": "# WhereAmI MCP Server\n\n![Python](https://img.shields.io/badge/Python-3.10+-blue.svg)\n![License](https://img.shields.io/badge/License-MIT-green.svg)\n![Status](https://img.shields.io/badge/Status-Active-brightgreen.svg)\n\nA lightweight mcp server that tells you exactly where you are based on your current IP, powered by [ipapi.co](https://ipapi.co/). \n\n## Features\n\n- **Dynamic Resources**: Fetch specific data (e.g., IP, country, city) via `location://{type}`.\n- **Detailed Tool**: Generate a comprehensive location report with `get_location()`.\n- **Natural Language Prompt**: Ask \"Where am I?\" to get detailed results.\n- **Robust Error Handling**: Gracefully manages API and network issues.\n- **Minimal Dependencies**: Requires only `mcp` and `httpx`.\n\n## Installation\n\n### Prerequisites\n- Python 3.10+\n- `pip`\n\n### Setup\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/kukapay/whereami-mcp.git\n   cd whereami-mcp\n   ```\n2. Install dependencies:\n   ```bash\n   pip install mcp httpx\n   ```\n3. (Optional) Install as an MCP service:\n   ```bash\n   mcp install whereami_mcp.py --name \"WhereAmI\"\n   ```\n\n## Usage\n\n### Running the Server\n- Direct execution:\n  ```bash\n  python whereami_mcp.py\n  ```\n- Development mode:\n  ```bash\n  mcp dev whereami_mcp.py\n  ```\n\n### Components\n\n#### Resource: `location://{type}`\nReturns a specific location detail based on `{type}`.\n- **Supported Types**: `ip`, `country`, `country_code`, `region`, `city`, `latitude`, `longitude`, `timezone`, `isp`, `asn`\n- **Examples**:\n  - `@location://ip` → `\"8.8.8.8\"`\n  - `@location://city` → `\"Mountain View\"`\n  - `@location://country` → `\"United States\"`\n\n#### Tool: `get_location()`\nGenerates a detailed Markdown table of geolocation data.\n- **Fields**:\n  - IP\n  - Country\n  - Country Code\n  - Region\n  - City\n  - Latitude\n  - Longitude\n  - Timezone\n  - ISP\n  - ASN\n- **Sample Output**:\n  ```\n  | Field          | Value             |\n  |----------------|-------------------|\n  | IP            | 8.8.8.8           |\n  | Country       | United States     |\n  | Country Code  | US                |\n  | Region        | California        |\n  | City          | Mountain View     |\n  | Latitude      | 37.4223           |\n  | Longitude     | -122.0848         |\n  | Timezone      | America/Los_Angeles |\n  | ISP           | GOOGLE            |\n  | ASN           | AS15169           |\n  ```\n\n#### Prompt: `where_am_i_prompt`\nPredefined query: \"Please tell me where I am based on my current IP address.\" Triggers `get_location()`.\n\n### Examples in Claude Desktop\n1. Install the server:\n   ```bash\n   mcp install whereami_mcp.py --name \"WhereAmI\"\n   ```\n2. Query data:\n   - \"My IP is `@location://ip`\"\n   - \"I’m in `@location://city`, `@location://country`\"\n3. Get full report:\n   - \"Where am I?\"\n   - `get_location()`\n\n## License\n\nMIT License. See [LICENSE](LICENSE) for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "kukapay",
        "whereami",
        "geolocation information",
        "location data",
        "precise geolocation"
      ],
      "category": "weather-and-location-data"
    },
    "kwenhwang--hrfco-service": {
      "owner": "kwenhwang",
      "name": "hrfco-service",
      "url": "https://github.com/kwenhwang/hrfco-service",
      "imageUrl": "/freedevtools/mcp/pfp/kwenhwang.webp",
      "description": "Retrieve real-time hydrological data such as water levels, rainfall, and dam discharge. Access detailed observation station information and filter time series data for statistics and location details.",
      "stars": 1,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-02T04:50:37Z",
      "readme_content": "# 🌊 HRFCO Intelligent Water Search System\n\nAI-friendly Korean water data search system with natural language processing.\n\n## 🚀 Features\n\n- **Natural Language Search**: \"한강 수위\", \"서울 강우량\" → Automatic station discovery\n- **Smart Matching**: 16 regions + river name mapping + similarity scoring\n- **Response Optimization**: All responses < 1KB (prevents LLM token overflow)\n- **OpenAI Compatible**: Ready for ChatGPT Function Calling integration\n\n## 📡 API Endpoints\n\n- `/.netlify/functions/search-station` - Search stations by location name\n- `/.netlify/functions/get-water-info` - One-stop water information query\n- `/.netlify/functions/recommend-stations` - Recommend nearby stations\n- `/.netlify/functions/openai-functions` - OpenAI Function definitions\n\n## 🔧 Environment Variables\n\n```\nHRFCO_API_KEY=your-api-key-here\n```\n\n## 🧪 Test Examples\n\n```bash\n# Search stations\ncurl -X POST https://your-site.netlify.app/.netlify/functions/search-station \\\n  -d '{\"location_name\": \"한강\", \"limit\": 3}'\n\n# Get water info\ncurl -X POST https://your-site.netlify.app/.netlify/functions/get-water-info \\\n  -d '{\"query\": \"서울 수위\", \"limit\": 5}'\n```\n\n## 📊 Performance\n\n- **Data Source**: 1,366 water level + 742 rainfall observatories\n- **Response Size**: 346-522 bytes (optimized for LLM)\n- **Search Accuracy**: 90%+ for Korean location names\n- **Response Time**: < 3 seconds\n\nBuilt with TypeScript + Netlify Functions\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hydrological",
        "hrfco",
        "kwenhwang",
        "kwenhwang hrfco",
        "hydrological data",
        "data kwenhwang"
      ],
      "category": "weather-and-location-data"
    },
    "le-yo--weather-mcp": {
      "owner": "le-yo",
      "name": "weather-mcp",
      "url": "https://github.com/le-yo/weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/le-yo.webp",
      "description": "Provides current weather information for any location using the wttr.in service, enabling real-time weather data fetching without the need for API keys.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-19T18:59:27Z",
      "readme_content": "# MCP Weather Server\n\nA simple Model Context Protocol (MCP) server that provides weather information for any location.\n\n## What is MCP?\n\nThe Model Context Protocol (MCP) is a standardized way for AI applications and agents to connect with data sources and tools. It allows AI models like Claude to interact with your local system, external services, and custom tools through a standardized interface.\n\n## Features\n\n- Get current weather information for any location\n- Compatible with Claude Desktop and other MCP clients\n- Uses the free wttr.in weather API (no API key required)\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone <your-repo-url>\ncd mcp-weather-server\n\n# Install dependencies\nnpm install\n```\n\n## Usage\n\n### Running the server\n\n```bash\nnode index.js\n```\n\n### Connecting to Claude Desktop\n\n1. Open Claude Desktop\n2. Go to Settings > MCP Servers\n3. Add a new server\n4. Select \"Custom\" and enter the path to your server executable\n5. Set the command to: `node /Users/le-yo/CascadeProjects/mcp-weather-server/index.js`\n6. Save and restart Claude Desktop\n\n### Example prompts for Claude\n\nOnce connected, you can ask Claude to use the weather tool:\n\n- \"What's the current weather in New York?\"\n- \"Tell me the temperature in London right now.\"\n- \"Is it raining in Tokyo?\"\n\n## How it works\n\nThis server implements the Model Context Protocol to provide a tool that fetches weather data from the wttr.in API. When Claude or another MCP client connects to this server, they can use the `get_weather` tool to retrieve current weather conditions for any location.\n\n## Extending the server\n\nYou can extend this server by:\n\n1. Adding more weather-related tools (forecast, historical data, etc.)\n2. Implementing other MCP features like resources or prompts\n3. Using a different weather API with more features\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp",
      "npm_downloads": 226,
      "keywords": [
        "weather",
        "wttr",
        "api",
        "weather data",
        "weather information",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "liuwanglei-tal--nasa-mcp": {
      "owner": "liuwanglei-tal",
      "name": "nasa-mcp",
      "url": "https://github.com/liuwanglei-tal/nasa-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/liuwanglei-tal.webp",
      "description": "Access a variety of NASA data through natural language queries, including astronomical images, Mars rover photos, Earth satellite images, near-Earth object data, and space weather information.",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-10T14:15:58Z",
      "readme_content": "# NASA MCP Service\n\n一个功能丰富的 NASA 数据查询 MCP 工具，支持多种 NASA API 服务和自然语言查询。\n\n## 功能特点\n\n- 天文图片服务 (APOD)\n  - 获取 NASA 每日天文图片\n  - 支持历史日期查询\n  - 返回图片标题、描述、URL等信息\n\n- 火星探测器照片 (Mars Rovers)\n  - 支持多个火星探测器：好奇号(Curiosity)、机遇号(Opportunity)、勇气号(Spirit)、毅力号(Perseverance)\n  - 按日期查询火星照片\n  - 获取不同相机拍摄的图片\n\n- 地球卫星图像 (Earth)\n  - 根据经纬度获取卫星图像\n  - 支持历史图像查询\n  - 提供高分辨率卫星照片\n\n- 近地天体数据 (NEO - Near Earth Objects)\n  - 获取特定日期的近地小行星信息\n  - 包含小行星大小、距离、速度等数据\n  - 危险系数评估\n\n- 太空天气数据 (Space Weather)\n  - 太阳耀斑事件信息\n  - 日冕物质抛射数据\n  - 实时太空天气状况\n\n## Cursor 安装\n\n1. 打开 Cursor IDE\n2. 在命令面板中输入：\n```bash\n/mcp install @cursor/nasa-mcp\n```\n\n## 配置\n\n1. 访问 [NASA API 门户](https://api.nasa.gov/)\n2. 获取你的 API key\n3. 设置环境变量 `NASA_API_KEY` 或在使用时通过参数传入\n\n## 使用方法\n\n### 在 Cursor 中使用\n\n```bash\n# 获取今天的天文图片\n今天的天文图\n\n# 获取火星照片\n火星 好奇号 2024年3月18日\n\n# 获取地球卫星图像\n地球 39.9042,116.4074\n\n# 获取近地天体数据\n近地小行星 2024年3月18日\n\n# 获取太空天气信息\n太空天气 今天\n```\n\n### 在 Node.js 中使用\n\n```javascript\nconst client = require('@smithery/client');\n\nasync function main() {\n  // 获取火星照片\n  const marsPhotos = await client.call('@cursor/nasa-mcp', '火星 好奇号 今天');\n  \n  // 获取近地天体数据\n  const neoData = await client.call('@cursor/nasa-mcp', '近地小行星 今天');\n  \n  console.log(marsPhotos);\n  console.log(neoData);\n}\n\nmain();\n```\n\n### 命令行使用\n\n```bash\n# 使用环境变量中的 API key\necho \"火星 好奇号 今天\" | NASA_API_KEY=your_api_key node nasa-mcp.js\n\n# 使用自定义 API key\necho \"地球 39.9042,116.4074\" | node nasa-mcp.js --api_key=your-api-key\n```\n\n## 返回数据格式\n\n### 天文图片 (APOD)\n```json\n{\n  \"标题\": \"图片标题\",\n  \"日期\": \"2024-03-19\",\n  \"说明\": \"详细解释\",\n  \"图片链接\": \"图片URL\",\n  \"媒体类型\": \"image\",\n  \"版权\": \"版权信息\"\n}\n```\n\n### 火星照片\n```json\n{\n  \"火星车\": \"curiosity\",\n  \"日期\": \"2024-03-19\",\n  \"照片数量\": 5,\n  \"照片列表\": [\n    {\n      \"id\": 1234567,\n      \"拍摄时间\": \"2024-03-19\",\n      \"相机\": \"NAVCAM\",\n      \"图片链接\": \"https://...\"\n    }\n  ]\n}\n```\n\n### 近地天体数据\n```json\n{\n  \"日期\": \"2024-03-19\",\n  \"小行星数量\": 5,\n  \"小行星列表\": [\n    {\n      \"名称\": \"小行星名称\",\n      \"直径\": {\n        \"最小\": 100,\n        \"最大\": 200\n      },\n      \"是否危险\": \"否\",\n      \"最近距离\": \"1000000 公里\",\n      \"相对速度\": \"50000 公里/小时\"\n    }\n  ]\n}\n```\n\n### 太空天气数据\n```json\n{\n  \"日期\": \"2024-03-19\",\n  \"太阳耀斑\": [\n    {\n      \"开始时间\": \"2024-03-19T10:00:00Z\",\n      \"结束时间\": \"2024-03-19T11:00:00Z\",\n      \"等级\": \"M2.5\",\n      \"位置\": \"N30W60\"\n    }\n  ],\n  \"日冕物质抛射\": [\n    {\n      \"时间\": \"2024-03-19T12:00:00Z\",\n      \"速度\": \"800 km/s\",\n      \"类型\": \"CME\"\n    }\n  ]\n}\n```\n\n## 许可证\n\nMIT\n\n## 作者\n\nsimon liu",
      "npm_url": "https://www.npmjs.com/package/nasa-mcp",
      "npm_downloads": 0,
      "keywords": [
        "nasa",
        "data",
        "liuwanglei",
        "nasa data",
        "data liuwanglei",
        "nasa mcp"
      ],
      "category": "weather-and-location-data"
    },
    "manolaz--emergency-medicare-planner-mcp-server": {
      "owner": "manolaz",
      "name": "emergency-medicare-planner-mcp-server",
      "url": "https://github.com/manolaz/emergency-medicare-planner-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/manolaz.webp",
      "description": "Connects to Google Maps to locate nearby hospitals and clinics based on patient needs, evaluates medical facilities, and calculates optimal routes for urgent care. Provides real-time availability checks and detailed service information to assist in emergency healthcare decisions.",
      "stars": 4,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-13T18:58:25Z",
      "readme_content": "# Emergency Medicare Management MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@manolaz/emergency-medicare-planner-mcp-server)](https://smithery.ai/server/@manolaz/emergency-medicare-planner-mcp-server)\n\n(@manolaz/emergency-medicare-planner-mcp-server)\n\nA powerful Model Context Protocol (MCP) server that integrates with Google Maps to locate and evaluate medical facilities in emergency situations. This server helps users find appropriate hospitals and clinics within 10km radius based on specific medical needs, emergency level, and facility capabilities.\n\nThe system provides real-time routing, availability checks, and detailed information about medical services, helping patients make informed decisions during urgent healthcare situations.\n\n**Key Feature**: Sequential Thinking for Medical Evaluation - Enables step-by-step clinical reasoning for more accurate medical facility matching based on patient symptoms and medical history.\n\n## Installation & Usage\n\n### Installing via Smithery\n\nTo install Emergency Medicare Planner for Claude Desktop automatically:\n\n```bash\nnpx -y @smithery/cli install @manolaz/emergency-medicare-planner-mcp-server --client claude\n```\n\n### Installing Manually\n\n```bash\n# Using npx (recommended)\nnpx @manolaz/emergency-medicare-planner-mcp-server\n\n# With environment variable for Google Maps API\nGOOGLE_MAPS_API_KEY=your_api_key npx @manolaz/emergency-medicare-planner-mcp-server\n```\n\nOr install globally:\n\n```bash\n# Install globally\nnpm install -g @manolaz/emergency-medicare-planner-mcp-server\n\n# Run after global installation\nGOOGLE_MAPS_API_KEY=your_api_key emergency-medicare-planner-mcp-server\n```\n\n## Components\n\n### Tools\n\n- **searchMedicalFacilities**\n  - Search for hospitals, clinics, and medical facilities using Google Places API\n  - Input:\n    - `query` (string): Search query (e.g., \"emergency room\", \"pediatric clinic\")\n    - `location`: Latitude and longitude of patient location\n    - `radius` (optional, default: 10000): Search radius in meters\n    - `specialtyNeeded` (optional): Medical specialty required\n\n- **getMedicalFacilityDetails**\n  - Get detailed information about a specific medical facility\n  - Input:\n    - `placeId` (string): Google Place ID of the medical facility\n  - Output:\n    - Hours of operation, services offered, contact information, etc.\n\n- **calculateRouteToFacility**\n  - Calculate fastest route to a medical facility\n  - Input:\n    - `origin`: Patient's current location\n    - `facilityId`: Place ID of the destination facility\n    - `transportMode` (optional): Travel mode (driving, walking, transit, ambulance)\n    - `avoidTraffic` (optional): Route planning to avoid traffic\n\n- **checkFacilityAvailability**\n  - Check if a facility is currently accepting patients\n  - Input:\n    - `facilityId`: Place ID of the medical facility\n    - `emergencyLevel`: Urgency level of the medical situation\n\n## Configuration\n\n### Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"emergency-medicare-planner\": {\n      \"command\": \"npx\",\n      \"args\": [\"@manolaz/emergency-medicare-planner-mcp-server\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\nAlternatively, you can use the node command directly if you have the package installed:\n\n```json\n{\n  \"mcpServers\": {\n    \"emergency-medicare-planner\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/dist/index.js\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n### Building from Source\n\n1. Clone the repository\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n\n   ```bash\n   npm run build\n   ```\n\n### Environment Variables\n\n- `GOOGLE_MAPS_API_KEY` (required): Your Google Maps API key with the following APIs enabled:\n  - Places API\n  - Directions API\n  - Geocoding API\n  - Time Zone API\n  - Distance Matrix API\n\n### Testing\n\n```bash\n# Run test suite\nnpm test\n\n# Run with debug logging\nDEBUG=emergency-medicare:* npm start\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hospitals",
        "planner",
        "mcp",
        "emergency healthcare",
        "planner mcp",
        "medicare planner"
      ],
      "category": "weather-and-location-data"
    },
    "marcusbai--caiyun-weather-mcp": {
      "owner": "marcusbai",
      "name": "caiyun-weather-mcp",
      "url": "https://github.com/marcusbai/caiyun-weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/marcusbai.webp",
      "description": "Provides real-time weather data including temperature, humidity, wind speed, and atmospheric pressure, along with minute-by-minute precipitation forecasts, hourly and daily weather forecasts, and weather alert information. Supports address-based weather queries and offers multi-language and unit system options.",
      "stars": 6,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-06T03:08:51Z",
      "readme_content": "# 彩云天气 MCP 服务器\n[![smithery badge](https://smithery.ai/badge/@marcusbai/caiyun-weather-mcp)](https://smithery.ai/server/@marcusbai/caiyun-weather-mcp)\n\n基于彩云天气 API 的 Model Context Protocol (MCP) 服务器，提供天气数据查询功能。\n\n## 功能特点\n\n- **实时天气数据**：温度、湿度、风速、气压等\n- **分钟级降水预报**：未来2小时的降水情况\n- **小时级天气预报**：未来24小时或更长时间的天气预报\n- **每日天气预报**：未来多天的天气预报\n- **天气预警信息**：各类天气预警\n- **地址查询**：支持通过地址查询天气（需配置高德地图API）\n- **多语言支持**：支持中文和英文\n- **单位制选择**：支持公制和英制\n\n## 安装\n\n### 安装 Smithery\n\n通过 [Smithery](https://smithery.ai/server/@pepperai/caiyun-weather-mcp) 安装 彩云天气 对于Claude的桌面应用：\n\n```bash\nnpm install @smithery/cli -g\nsmithery install @pepperai/caiyun-weather-mcp\n```\n\n### 通过 NPX 使用\n\n您可以直接通过 NPX 运行：\n\n```bash\nnpx caiyun-weather-mcp --api-key=您的彩云天气API密钥\n```\n\n或者设置环境变量：\n\n```bash\nCAIYUN_API_KEY=您的密钥 npx caiyun-weather-mcp\n```\n\n### 从源码安装\n\n1. 克隆仓库：\n\n```bash\ngit clone https://github.com/marcusbai/caiyun-weather-mcp.git\ncd caiyun-weather-mcp\n```\n\n2. 安装依赖：\n\n```bash\nnpm install\n```\n\n> **注意**：本项目依赖于 Model Context Protocol (MCP) SDK，该SDK需要在运行环境中可用。MCP SDK通常由Claude或其他支持MCP的应用程序提供。\n\n3. 构建项目：\n\n```bash\nnpm run build\n```\n\n## 配置\n\n在使用前，需要配置彩云天气API密钥。如果需要地址查询功能，还需要配置高德地图API密钥。\n\n### 彩云天气API密钥\n\n1. 访问 [彩云天气开发者中心](https://dashboard.caiyunapp.com/)\n2. 注册并登录账号\n3. 创建应用并获取API密钥\n\n### 高德地图API密钥（可选）\n\n1. 访问 [高德开放平台](https://lbs.amap.com/)\n2. 注册并登录账号\n3. 创建应用并获取API密钥，需要启用\"地理编码\"服务\n\n## 配置MCP设置\n\n编辑MCP设置文件，添加彩云天气MCP服务器配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"caiyun-weather\": {\n      \"command\": \"node\",\n      \"args\": [\"完整路径/caiyun-weather-mcp/dist/index.js\"],\n      \"env\": {\n        \"CAIYUN_API_KEY\": \"您的彩云天气API密钥\",\n        \"AMAP_API_KEY\": \"您的高德地图API密钥（可选）\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n如果您通过 NPX 安装了本服务，可以使用以下配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"caiyun-weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"caiyun-weather-mcp\"],\n      \"env\": {\n        \"CAIYUN_API_KEY\": \"您的彩云天气API密钥\",\n        \"AMAP_API_KEY\": \"您的高德地图API密钥（可选）\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## 使用示例\n\n### 根据经纬度获取天气信息\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_weather_by_location</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"daily_steps\": 5,\n  \"hourly_steps\": 24,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 根据地址获取天气信息\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_weather_by_address</tool_name>\n<arguments>\n{\n  \"address\": \"北京市海淀区\",\n  \"daily_steps\": 5,\n  \"hourly_steps\": 24,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取实时天气数据\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_realtime_weather</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取分钟级降水预报\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_minutely_forecast</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取小时级天气预报\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_hourly_forecast</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"hourly_steps\": 24,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取每日天气预报\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_daily_forecast</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"daily_steps\": 5,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n### 获取天气预警信息\n\n```\n<use_mcp_tool>\n<server_name>caiyun-weather</server_name>\n<tool_name>get_weather_alert</tool_name>\n<arguments>\n{\n  \"longitude\": 116.3976,\n  \"latitude\": 39.9075,\n  \"language\": \"zh_CN\",\n  \"unit\": \"metric\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\n## 参数说明\n\n### 通用参数\n\n- `longitude`：经度\n- `latitude`：纬度\n- `address`：地址（仅用于 `get_weather_by_address`）\n- `daily_steps`：每日预报天数（1-15，默认5）\n- `hourly_steps`：小时预报数量（1-360，默认24）\n- `language`：语言（`zh_CN` 或 `en_US`，默认 `zh_CN`）\n- `unit`：单位制（`metric` 或 `imperial`，默认 `metric`）\n\n## 许可证\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/caiyun-weather-mcp",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "caiyun",
        "precipitation",
        "weather data",
        "weather queries",
        "caiyun weather"
      ],
      "category": "weather-and-location-data"
    },
    "mattmarcin--aqicn-mcp": {
      "owner": "mattmarcin",
      "name": "aqicn-mcp",
      "url": "https://github.com/mattmarcin/aqicn-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mattmarcin.webp",
      "description": "Fetch real-time air quality data for cities and coordinates worldwide based on the World Air Quality Index (AQICN) project.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-04-23T16:14:34Z",
      "readme_content": "# AQICN MCP Server\n[![smithery badge](https://smithery.ai/badge/@mattmarcin/aqicn-mcp)](https://smithery.ai/server/@mattmarcin/aqicn-mcp)\n\nThis is a Model Context Protocol (MCP) server that provides air quality data tools from the World Air Quality Index (AQICN) project. It allows LLMs to fetch real-time air quality data for cities and coordinates worldwide.\n\n## Installation\n\n### Installing via Smithery\n\nTo install AQICN MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mattmarcin/aqicn-mcp):\n\n```bash\nnpx -y @smithery/cli install @mattmarcin/aqicn-mcp --client claude\n```\n\n### Installing via recommended uv (manual)\n\nWe recommend using [uv](https://docs.astral.sh/uv/) to manage your Python environment:\n\n```bash\n# Install the package and dependencies\nuv pip install -e .\n```\n\n## Environment Setup\n\nCreate a `.env` file in the project root (you can copy from `.env.example`):\n```bash\n# .env\nAQICN_API_KEY=your_api_key_here\n```\n\nAlternatively, you can set the environment variable directly:\n```bash\n# Linux/macOS\nexport AQICN_API_KEY=your_api_key_here\n\n# Windows\nset AQICN_API_KEY=your_api_key_here\n```\n\n## Running the Server\n\n### Development Mode\nThe fastest way to test and debug your server is with the MCP Inspector:\n\n```bash\nmcp dev aqicn_server.py\n```\n\n### Claude Desktop Integration\nOnce your server is ready, install it in Claude Desktop:\n\n```bash\nmcp install aqicn_server.py\n```\n\n### Direct Execution\nFor testing or custom deployments:\n\n```bash\npython aqicn_server.py\n```\n\n## Available Tools\n\n### 1. city_aqi\nGet air quality data for a specific city.\n\n```python\n@mcp.tool()\ndef city_aqi(city: str) -> AQIData:\n    \"\"\"Get air quality data for a specific city.\"\"\"\n```\n\n**Input:**\n- `city`: Name of the city to get air quality data for\n\n**Output:** `AQIData` with:\n- `aqi`: Air Quality Index value\n- `station`: Station name\n- `dominant_pollutant`: Main pollutant (if available)\n- `time`: Timestamp of the measurement\n- `coordinates`: Latitude and longitude of the station\n\n### 2. geo_aqi\nGet air quality data for a specific location using coordinates.\n\n```python\n@mcp.tool()\ndef geo_aqi(latitude: float, longitude: float) -> AQIData:\n    \"\"\"Get air quality data for a specific location using coordinates.\"\"\"\n```\n\n**Input:**\n- `latitude`: Latitude of the location\n- `longitude`: Longitude of the location\n\n**Output:** Same as `city_aqi`\n\n### 3. search_station\nSearch for air quality monitoring stations by keyword.\n\n```python\n@mcp.tool()\ndef search_station(keyword: str) -> list[StationInfo]:\n    \"\"\"Search for air quality monitoring stations by keyword.\"\"\"\n```\n\n**Input:**\n- `keyword`: Keyword to search for stations (city name, station name, etc.)\n\n**Output:** List of `StationInfo` with:\n- `name`: Station name\n- `station_id`: Unique station identifier\n- `coordinates`: Latitude and longitude of the station\n\n## Example Usage\n\nUsing the MCP Python client:\n\n```python\nfrom mcp import Client\n\nasync with Client() as client:\n    # Get air quality data for Beijing\n    beijing_data = await client.city_aqi(city=\"beijing\")\n    print(f\"Beijing AQI: {beijing_data.aqi}\")\n\n    # Get air quality data by coordinates (Tokyo)\n    geo_data = await client.geo_aqi(latitude=35.6762, longitude=139.6503)\n    print(f\"Tokyo AQI: {geo_data.aqi}\")\n\n    # Search for stations\n    stations = await client.search_station(keyword=\"london\")\n    for station in stations:\n        print(f\"Station: {station.name} ({station.coordinates})\")\n```\n\n## Contributing\n\nFeel free to open issues and pull requests. Please ensure your changes include appropriate tests and documentation.\n\n## License\n\nThis project is licensed under the MIT License.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "aqicn",
        "cities",
        "data",
        "aqicn project",
        "air quality",
        "index aqicn"
      ],
      "category": "weather-and-location-data"
    },
    "mcp-examples--weather": {
      "owner": "mcp-examples",
      "name": "weather",
      "url": "https://github.com/mcp-examples/weather",
      "imageUrl": "/freedevtools/mcp/pfp/mcp-examples.webp",
      "description": "Provides real-time weather information, including forecasts and current conditions, for seamless integration into applications.",
      "stars": 0,
      "forks": 0,
      "license": "Creative Commons Attribution 4.0 International",
      "language": "TypeScript",
      "updated_at": "2025-03-20T00:47:21Z",
      "readme_content": "# mcp-examples/weather\n\n[![smithery badge](https://smithery.ai/badge/@mcp-examples/weather)](https://smithery.ai/server/@mcp-examples/weather)\n\nAdapted from Anthropic's MCP Server Quickstart documentation.\n\n* https://modelcontextprotocol.io/quickstart/server\n* https://github.com/modelcontextprotocol/docs/blob/main/quickstart/server.mdx\n",
      "npm_url": "https://www.npmjs.com/package/weather",
      "npm_downloads": 5901,
      "keywords": [
        "weather",
        "forecasts",
        "mcp",
        "weather information",
        "examples weather",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "modelcontextprotocol--servers": {
      "owner": "modelcontextprotocol",
      "name": "servers",
      "url": "https://github.com/modelcontextprotocol/servers",
      "imageUrl": "/freedevtools/mcp/pfp/modelcontextprotocol.webp",
      "description": "Connects to the Google Maps API to provide geolocation services, including geocoding, reverse geocoding, place searching, and retrieving detailed place information.",
      "stars": 69429,
      "forks": 8224,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T10:48:22Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references to community-built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nTypically, each MCP server is implemented with an MCP SDK:\n\n- [C# MCP SDK](https://github.com/modelcontextprotocol/csharp-sdk)\n- [Go MCP SDK](https://github.com/modelcontextprotocol/go-sdk)\n- [Java MCP SDK](https://github.com/modelcontextprotocol/java-sdk)\n- [Kotlin MCP SDK](https://github.com/modelcontextprotocol/kotlin-sdk)\n- [PHP MCP SDK](https://github.com/modelcontextprotocol/php-sdk)\n- [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)\n- [Ruby MCP SDK](https://github.com/modelcontextprotocol/ruby-sdk)\n- [Rust MCP SDK](https://github.com/modelcontextprotocol/rust-sdk)\n- [Swift MCP SDK](https://github.com/modelcontextprotocol/swift-sdk)\n- [TypeScript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n\n> [!NOTE]\n> Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the official SDKs.\n\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools.\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage.\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls.\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories.\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system.\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences.\n- **[Time](src/time)** - Time and timezone conversion capabilities.\n\n### Archived\n\nThe following reference servers are now archived and can be found at [servers-archived](https://github.com/modelcontextprotocol/servers-archived).\n\n- **[AWS KB Retrieval](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime.\n- **[Brave Search](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/brave-search)** - Web and local search using Brave's Search API.  Has been replaced by the [official server](https://github.com/brave/brave-search-mcp-server).\n- **[EverArt](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/everart)** - AI image generation using various models.\n- **[GitHub](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/github)** - Repository management, file operations, and GitHub API integration.\n- **[GitLab](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gitlab)** - GitLab API, enabling project management.\n- **[Google Drive](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gdrive)** - File access and search capabilities for Google Drive.\n- **[Google Maps](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/google-maps)** - Location services, directions, and place details.\n- **[PostgreSQL](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/postgres)** - Read-only database access with schema inspection.\n- **[Puppeteer](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/puppeteer)** - Browser automation and web scraping.\n- **[Redis](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/redis)** - Interact with Redis key-value stores.\n- **[Sentry](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sentry)** - Retrieving and analyzing issues from Sentry.io.\n- **[Slack](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)** - Channel management and messaging capabilities. Now maintained by [Zencoder](https://github.com/zencoderai/slack-mcp-server)\n- **[SQLite](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sqlite)** - Database interaction and business intelligence capabilities.\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/LpSK1tSZweomrAHOMAj9Gea96lA.svg\" alt=\"Paragon Logo\" /> **[ActionKit by Paragon](https://github.com/useparagon/paragon-mcp)** - Connect to 130+ SaaS integrations (e.g. Slack, Salesforce, Gmail) with Paragon’s [ActionKit](https://www.useparagon.com/actionkit) API.\n- <img height=\"12\" width=\"12\" src=\"https://invoxx-public-bucket.s3.eu-central-1.amazonaws.com/frontend-resources/adfin-logo-small.svg\" alt=\"Adfin Logo\" /> **[Adfin](https://github.com/Adfin-Engineering/mcp-server-adfin)** - The only platform you need to get paid - all payments in one place, invoicing and accounting reconciliations with [Adfin](https://www.adfin.com/).\n- <img height=\"12\" width=\"12\" src=\"https://github.com/AgentOps-AI/agentops/blob/main/docs/favicon.png\" alt=\"AgentOps Logo\" /> **[AgentOps](https://github.com/AgentOps-AI/agentops-mcp)** - Provide observability and tracing for debugging AI agents with [AgentOps](https://www.agentops.ai/) API.\n- <img height=\"12\" width=\"12\" src=\"https://www.agentql.com/favicon/favicon.png\" alt=\"AgentQL Logo\" /> **[AgentQL](https://github.com/tinyfish-io/agentql-mcp)** - Enable AI agents to get structured data from unstructured web with [AgentQL](https://www.agentql.com/).\n- <img height=\"12\" width=\"12\" src=\"https://agentrpc.com/favicon.ico\" alt=\"AgentRPC Logo\" /> **[AgentRPC](https://github.com/agentrpc/agentrpc)** - Connect to any function, any language, across network boundaries using [AgentRPC](https://www.agentrpc.com/).\n- **[Agentset](https://github.com/agentset-ai/mcp-server)** - RAG for your knowledge base connected to [Agentset](https://agentset.ai).\n- <img height=\"12\" width=\"12\" src=\"https://aiven.io/favicon.ico\" alt=\"Aiven Logo\" /> **[Aiven](https://github.com/Aiven-Open/mcp-aiven)** - Navigate your [Aiven projects](https://go.aiven.io/mcp-server) and interact with the PostgreSQL®, Apache Kafka®, ClickHouse® and OpenSearch® services\n- <img height=\"12\" width=\"12\" src=\"https://www.alation.com/resource-center/download/7p3vnbbznfiw/34FMtBTex5ppvs2hNYa9Fc/c877c37e88e5339878658697c46d2d58/Alation-Logo-Bug-Primary.svg\" alt=\"Alation Logo\" /> **[Alation](https://github.com/Alation/alation-ai-agent-sdk)** - Unlock the power of the enterprise Data Catalog by harnessing tools provided by the Alation MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://i.postimg.cc/5NYw9qjS/alby-icon-head-yellow-500x500.png\" alt=\"Alby Logo\" /> **[Alby Bitcoin Payments](https://github.com/getAlby/mcp)** - Connect any bitcoin lightning wallet to your agent to send and receive instant payments globally with your agent.\n- **[Algolia](https://github.com/algolia/mcp)** - Use AI agents to provision, configure, and query your [Algolia](https://algolia.com) search indices.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i4/O1CN01epkXwH1WLAXkZfV6N_!!6000000002771-2-tps-200-200.png\" alt=\"Alibaba Cloud AnalyticDB for MySQL Logo\" /> **[Alibaba Cloud AnalyticDB for MySQL](https://github.com/aliyun/alibabacloud-adb-mysql-mcp-server)** - Connect to an [AnalyticDB for MySQL](https://www.alibabacloud.com/en/product/analyticdb-for-mysql) cluster for getting database or table metadata, querying and analyzing data. It will be supported to add the OpenAPI for cluster operation in the future.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibabacloud-adbpg-mcp-server/blob/master/images/AnalyticDB.png\" alt=\"Alibaba Cloud AnalyticDB for PostgreSQL Logo\" /> **[Alibaba Cloud AnalyticDB for PostgreSQL](https://github.com/aliyun/alibabacloud-adbpg-mcp-server)** - An MCP server to connect to [AnalyticDB for PostgreSQL](https://github.com/aliyun/alibabacloud-adbpg-mcp-server) instances, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN0101UWWF1UYn3rAe3HU_!!6000000002530-2-tps-32-32.png\" alt=\"DataWorks Logo\" /> **[Alibaba Cloud DataWorks](https://github.com/aliyun/alibabacloud-dataworks-mcp-server)** - A Model Context Protocol (MCP) server that provides tools for AI, allowing it to interact with the [DataWorks](https://www.alibabacloud.com/help/en/dataworks/) Open API through a standardized interface. This implementation is based on the Alibaba Cloud Open API and enables AI agents to perform cloud resources operations seamlessly.\n- <img height=\"12\" width=\"12\" src=\"https://opensearch-shanghai.oss-cn-shanghai.aliyuncs.com/ouhuang/aliyun-icon.png\" alt=\"Alibaba Cloud OpenSearch Logo\" /> **[Alibaba Cloud OpenSearch](https://github.com/aliyun/alibabacloud-opensearch-mcp-server)** - This MCP server equips AI Agents with tools to interact with [OpenSearch](https://help.aliyun.com/zh/open-search/?spm=5176.7946605.J_5253785160.6.28098651AaYZXC) through a standardized and extensible interface.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibaba-cloud-ops-mcp-server/blob/master/image/alibaba-cloud.png\" alt=\"Alibaba Cloud OPS Logo\" /> **[Alibaba Cloud OPS](https://github.com/aliyun/alibaba-cloud-ops-mcp-server)** - Manage the lifecycle of your Alibaba Cloud resources with [CloudOps Orchestration Service](https://www.alibabacloud.com/en/product/oos) and Alibaba Cloud OpenAPI.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibabacloud-rds-openapi-mcp-server/blob/main/assets/alibabacloudrds.png\" alt=\"Alibaba Cloud RDS MySQL Logo\" /> **[Alibaba Cloud RDS](https://github.com/aliyun/alibabacloud-rds-openapi-mcp-server)** - An MCP server designed to interact with the Alibaba Cloud RDS OpenAPI, enabling programmatic management of RDS resources via an LLM.\n- <img height=\"12\" width=\"12\" src=\"https://www.alipayplus.com/favicon.ico\" alt=\"AlipayPlus Logo\" /> **[AlipayPlus](https://github.com/alipay/global-alipayplus-mcp)** - Connect your AI Agents to AlipayPlus Checkout Payment.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.allvoicelab.com/resources/workbench/dist/icon-dark.ico\" alt=\"AllVoiceLab Logo\" /> **[AllVoiceLab](https://www.allvoicelab.com/mcp)** - An AI voice toolkit with TTS, voice cloning, and video translation, now available as an MCP server for smarter agent integration.\n- <img height=\"12\" width=\"12\" src=\"https://files.alpaca.markets/webassets/favicon-32x32.png\" alt=\"Alpaca Logo\" /> **[Alpaca](https://github.com/alpacahq/alpaca-mcp-server)** – Alpaca's MCP server lets you trade stocks and options, analyze market data, and build strategies through [Alpaca's Trading API](https://alpaca.markets/)\n- <img height=\"12\" width=\"12\" src=\"https://www.alphavantage.co/logo.png/\" alt=\"AlphaVantage Logo\" /> **[AlphaVantage](https://mcp.alphavantage.co/)** - Connect to 100+ APIs for financial market data, including stock prices, fundamentals, and more from [AlphaVantage](https://www.alphavantage.co)\n- <img height=\"12\" width=\"12\" src=\"https://alttester.com/app/themes/alttester-sage-theme/public/images/logo-alttester.038ec8.png\" alt=\"AltTester Logo\" /> **[AltTester®](https://alttester.com/docs/desktop/latest/pages/ai-extension.html)** - Use AltTester® capabilities to connect and test your Unity or Unreal game. Write game test automation faster and smarter, using [AltTester](https://alttester.com) and the AltTester® MCP server. \n- <img height=\"12\" width=\"12\" src=\"https://www.antom.com/favicon.ico\" alt=\"Antom Logo\" /> **[Antom](https://github.com/alipay/global-antom-mcp)** - Connect your AI Agents to Antom Checkout Payment.\n- <img height=\"12\" width=\"12\" src=\"https://developers.anytype.io/img/favicon.ico\" alt=\"Anytype Logo\" /> **[Anytype](https://github.com/anyproto/anytype-mcp)** - An MCP server enabling AI assistants to interact with [Anytype](https://anytype.io) - a local and collaborative wiki - to organize objects, lists, and more through natural language.\n- <img height=\"12\" width=\"12\" src=\"https://doris.apache.org/images/favicon.ico\" alt=\"Apache Doris Logo\" /> **[Apache Doris](https://github.com/apache/doris-mcp-server)** - MCP Server For [Apache Doris](https://doris.apache.org/), an MPP-based real-time data warehouse.\n- <img height=\"12\" width=\"12\" src=\"https://iotdb.apache.org/img/logo.svg\" alt=\"Apache IoTDB Logo\" /> **[Apache IoTDB](https://github.com/apache/iotdb-mcp-server)** - MCP Server for [Apache IoTDB](https://github.com/apache/iotdb) database and its tools\n- **[Apache Pinot](https://github.com/startreedata/mcp-pinot)** – MCP server for running real - time analytics queries on Apache Pinot, an open-source OLAP database built for high-throughput, low-latency powering real-time applications.\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/apify-mcp-server)** - Use 6,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://2052727.fs1.hubspotusercontent-na1.net/hubfs/2052727/cropped-cropped-apimaticio-favicon-1-32x32.png\" alt=\"APIMatic Logo\" /> **[APIMatic MCP](https://github.com/apimatic/apimatic-validator-mcp)** - APIMatic MCP Server is used to validate OpenAPI specifications using [APIMatic](https://www.apimatic.io/). The server processes OpenAPI files and returns validation summaries by leveraging APIMatic's API.\n- <img height=\"12\" width=\"12\" src=\"https://apollo-server-landing-page.cdn.apollographql.com/_latest/assets/favicon.png\" alt=\"Apollo Graph Logo\" /> **[Apollo MCP Server](https://github.com/apollographql/apollo-mcp-server/)** - Connect your GraphQL APIs to AI agents\n- <img height=\"12\" width=\"12\" src=\"https://developer.aqara.com/favicon.ico\" alt=\"Aqara Logo\" /> **[Aqara MCP Server](https://github.com/aqara/aqara-mcp-server/)** - Control  [Aqara](https://www.aqara.com/) smart home devices, query status, execute scenes, and much more using natural language.\n- <img height=\"12\" width=\"12\" src=\"https://media.licdn.com/dms/image/v2/C4D0BAQEeD7Dxbpadkw/company-logo_200_200/company-logo_200_200/0/1644692667545/archbee_logo?e=2147483647&v=beta&t=lTi9GRIoqzG6jN3kJC26uZWh0q3uiQelsH6mGoq_Wfw\" alt=\"Archbee Logo\" /> **[Archbee](https://www.npmjs.com/package/@archbee/mcp)** - Write and publish documentation that becomes the trusted source for instant answers with AI. Stop cobbling tools and use [Archbee](https://www.archbee.com/) — the first complete documentation platform.\n- <img height=\"12\" width=\"12\" src=\"https://phoenix.arize.com/wp-content/uploads/2023/04/cropped-Favicon-32x32.png\" alt=\"Arize-Phoenix Logo\" /> **[Arize Phoenix](https://github.com/Arize-ai/phoenix/tree/main/js/packages/phoenix-mcp)** - Inspect traces, manage prompts, curate datasets, and run experiments using [Arize Phoenix](https://github.com/Arize-ai/phoenix), an open-source AI and LLM observability tool.\n- <img height=\"12\" width=\"12\" src=\"https://731523176-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FaVUBXRZbpAgtjYf5HsvO%2Fuploads%2FaRRrVVocXCTr6GkepfCx%2Flogo_color.svg?alt=media&token=3ba24089-0ab2-421f-a9d9-41f2f94f954a\" alt=\"Armor Logo\" /> **[Armor Crypto MCP](https://github.com/armorwallet/armor-crypto-mcp)** - MCP to interface with multiple blockchains, staking, DeFi, swap, bridging, wallet management, DCA, Limit Orders, Coin Lookup, Tracking and more.\n- <img height=\"12\" width=\"12\" src=\"https://console.asgardeo.io/app/libs/themes/wso2is/assets/images/branding/favicon.ico\" alt=\"Asgardeo Logo\" /> **[Asgardeo](https://github.com/asgardeo/asgardeo-mcp-server)** - MCP server to interact with your [Asgardeo](https://wso2.com/asgardeo) organization through LLM tools.\n- <img height=\"12\" width=\"12\" src=\"https://www.datastax.com/favicon-32x32.png\" alt=\"DataStax logo\" /> **[Astra DB](https://github.com/datastax/astra-db-mcp)** - Comprehensive tools for managing collections and documents in a [DataStax Astra DB](https://www.datastax.com/products/datastax-astra) NoSQL database with a full range of operations such as create, update, delete, find, and associated bulk actions.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/66598898fd13d51606c3215d/66ccbfef13bd8bc19d587578_favicon-32x32.png\" alt=\"Atla Logo\" /> **[Atla](https://github.com/atla-ai/atla-mcp-server)** - Enable AI agents to interact with the [Atla API](https://docs.atla-ai.com/) for state-of-the-art LLMJ evaluation.\n- <img height=\"12\" width=\"12\" src=\"https://assets.atlan.com/assets/atlan-a-logo-blue-background.png\" alt=\"Atlan Logo\" /> **[Atlan](https://github.com/atlanhq/agent-toolkit/tree/main/modelcontextprotocol)** - The Atlan Model Context Protocol server allows you to interact with the [Atlan](https://www.atlan.com/) services through multiple tools.\n- <img height=\"12\" width=\"12\" src=\"https://www.atlassian.com/favicon.ico\" alt=\"Atlassian Logo\" /> **[Atlassian](https://www.atlassian.com/platform/remote-mcp-server)** - Securely interact with Jira work items and Confluence pages, and search across both.\n- <img height=\"12\" width=\"12\" src=\"https://res.oafimg.cn/-/737b3b3ffed9b19e/logo.png\" alt=\"AtomGit Logo\" /> **[AtomGit](https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server)** - Official AtomGit server for integration with repository management, PRs, issues, branches, labels, and more.\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.auth0.com/website/website/favicons/auth0-favicon.svg\" alt=\"Auth0 Logo\" /> **[Auth0](https://github.com/auth0/auth0-mcp-server)** - MCP server for interacting with your Auth0 tenant, supporting creating and modifying actions, applications, forms, logs, resource servers, and more.\n- <img height=\"12\" width=\"12\" src=\"https://firstorder.ai/favicon_auth.ico\" alt=\"Authenticator App Logo\" /> **[Authenticator App · 2FA](https://github.com/firstorderai/authenticator_mcp)** - A secure MCP (Model Context Protocol) server that enables AI agents to interact with the Authenticator App.\n- <img height=\"12\" width=\"12\" src=\"https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico\" alt=\"AWS Logo\" /> **[AWS](https://github.com/awslabs/mcp)** -  Specialized MCP servers that bring AWS best practices directly to your development workflow.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://cdn-dynmedia-1.microsoft.com/is/content/microsoftcorp/acom_social_icon_azure\" alt=\"Microsoft Azure Logo\" /> **[Azure](https://github.com/microsoft/mcp/tree/main/servers/Azure.Mcp.Server)** - The Azure MCP Server gives MCP Clients access to key Azure services and tools like Azure Storage, Cosmos DB, the Azure CLI, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn-dynmedia-1.microsoft.com/is/content/microsoftcorp/1062064-Products-1.2-24x24\" alt=\"Microsoft Azure DevOps Logo\" /> **[Azure DevOps](https://github.com/microsoft/azure-devops-mcp)** - Interact with Azure DevOps services like repositories, work items, builds, releases, test plans, and code search.\n- <img height=\"12\" width=\"12\" src=\"https://application.backdocket.com/favicon.ico\" alt=\"Backdocket Logo\" /> **[Backdocket](https://ai.backdocket.com)** - Search, Retrieve, and Update your **[Backdocket](https://backdocket.com)** data. This currently includes Claims, Matters, Contacts, Tasks and Advanced Searches. To easily use the Remote Mcp Server utilize the following url: **[https://ai.backdocket.com/mcp]([https://backdocket.com](https://ai.backdocket.com/mcp))**\n- <img height=\"12\" width=\"12\" src=\"https://mapopen-website-wiki.cdn.bcebos.com/LOGO/lbsyunlogo_icon.ico\" alt=\"Baidu Map Logo\" /> **[Baidu Map](https://github.com/baidu-maps/mcp)** - [Baidu Map MCP Server](https://lbsyun.baidu.com/faq/api?title=mcpserver/base) provides tools for AI agents to interact with Baidu Maps APIs, enabling location-based services and geospatial data analysis.\n- <img height=\"12\" width=\"12\" src=\"https://www.bankless.com/favicon.ico\" alt=\"Bankless Logo\" /> **[Bankless Onchain](https://github.com/bankless/onchain-mcp)** - Query Onchain data, like ERC20 tokens, transaction history, smart contract state.\n- <img height=\"12\" width=\"12\" src=\"https://baserow.io/img/logo_baserow_square_large.png\" alt=\"Baserow Logo\" /> **[Baserow](https://gitlab.com/baserow/baserow/-/tree/develop/backend/src/baserow/api/mcp)** - Query data from Baserow self-hosted or SaaS databases using MCP integration.\n- <img height=\"12\" width=\"12\" src=\"https://bicscan.io/favicon.png\" alt=\"BICScan Logo\" /> **[BICScan](https://github.com/ahnlabio/bicscan-mcp)** - Risk score / asset holdings of EVM blockchain address (EOA, CA, ENS) and even domain names.\n- <img height=\"12\" width=\"12\" src=\"https://web-cdn.bitrise.io/favicon.ico\" alt=\"Bitrise Logo\" /> **[Bitrise](https://github.com/bitrise-io/bitrise-mcp)** - Chat with your builds, CI, and [more](https://bitrise.io/blog/post/chat-with-your-builds-ci-and-more-introducing-the-bitrise-mcp-server).\n- <img height=\"12\" width=\"12\" src=\"https://boikot.xyz/assets/favicon.svg\" alt=\"boikot Logo\" /> **[Boikot](https://github.com/boikot-xyz/boikot)** - Learn about the ethical and unethical actions of major companies with [boikot.xyz](https://boikot.xyz/).\n- <img height=\"12\" width=\"12\" src=\"https://boldsign.com/favicon.ico\" alt=\"BoldSign Logo\" /> **[BoldSign](https://github.com/boldsign/boldsign-mcp)** - Search, request, and manage e-signature contracts effortlessly with [BoldSign](https://boldsign.com/).\n- <img height=\"12\" width=\"12\" src=\"https://boost.space/favicon.ico\" alt=\"Boost.space Logo\" /> **[Boost.space](https://github.com/boostspace/boostspace-mcp-server)** - An MCP server integrating with [Boost.space](https://boost.space) for centralized, automated business data from 2000+ sources.\n- <img height=\"12\" width=\"12\" src=\"https://www.box.com/favicon.ico\" alt=\"Box Logo\" /> **[Box](https://github.com/box-community/mcp-server-box)** - Interact with the Intelligent Content Management platform through Box AI.\n- <img height=\"12\" width=\"12\" src=\"https://www.brightdata.com/favicon.ico\" alt=\"BrightData Logo\" /> **[BrightData](https://github.com/luminati-io/brightdata-mcp)** - Discover, extract, and interact with the web - one interface powering automated access across the public internet.\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://browserstack.wpenginepowered.com/wp-content/themes/browserstack/img/favicons/favicon.ico\" alt=\"BrowserStack Logo\" /> **[BrowserStack](https://github.com/browserstack/mcp-server)** - Access BrowserStack's [Test Platform](https://www.browserstack.com/test-platform) to debug, write and fix tests, do accessibility testing and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.google.com/s2/favicons?domain=buildkite.com&sz=24\" alt=\"Buildkite Logo\" /> **[Buildkite](https://github.com/buildkite/buildkite-mcp-server)** - Exposing Buildkite data (pipelines, builds, jobs, tests) to AI tooling and editors.\n- <img height=\"12\" width=\"12\" src=\"https://bldbl.dev/favico.png\" alt=\"Buildable Logo\" />**[Buildable](https://github.com/chunkydotdev/bldbl-mcp)** (TypeScript) - Official MCP server for Buildable AI-powered development platform. Enables AI assistants to manage tasks, track progress, get project context, and collaborate with humans on software projects.\n- <img height=\"12\" width=\"12\" src=\"https://builtwith.com/favicon.ico\" alt=\"BuiltWith Logo\" /> **[BuiltWith](https://github.com/builtwith/mcp)** - Identify the technology stack behind any website.\n- <img height=\"12\" width=\"12\" src=\"https://portswigger.net/favicon.ico\" alt=\"PortSwigger Logo\" /> **[Burp Suite](https://github.com/PortSwigger/mcp-server)** - MCP Server extension allowing AI clients to connect to [Burp Suite](https://portswigger.net)\n- <img src=\"https://app.cal.com/favicon.ico\" alt=\"Cal.com\" width=\"12\" height=\"12\"> **[Cal.com](https://www.npmjs.com/package/@calcom/cal-mcp?activeTab=readme)** - Connect to the Cal.com API to schedule and manage bookings and appointments.\n- <img height=\"12\" width=\"12\" src=\"https://campertunity.com/assets/icon/favicon.ico\" alt=\"Campertunity Logo\" /> **[Campertunity](https://github.com/campertunity/mcp-server)** - Search campgrounds around the world on campertunity, check availability, and provide booking links.\n- <img height=\"12\" width=\"12\" src=\"https://static.canva.com/static/images/favicon.ico\" alt=\"Canva logo\" /> **[Canva](https://www.canva.dev/docs/apps/mcp-server/)** — Provide AI - powered development assistance for [Canva](https://canva.com) apps and integrations.\n- <img height=\"12\" width=\"12\" src=\"https://carbonvoice.app/favicon.ico\" alt=\"Carbon Voice Logo\" /> **[Carbon Voice](https://github.com/PhononX/cv-mcp-server)** - MCP Server that connects AI Agents to [Carbon Voice](https://getcarbon.app). Create, manage, and interact with voice messages, conversations, direct messages, folders, voice memos, AI actions and more in [Carbon Voice](https://getcarbon.app).\n-  **[Cartesia](https://github.com/cartesia-ai/cartesia-mcp)** - Connect to the [Cartesia](https://cartesia.ai/) voice platform to perform text-to-speech, voice cloning etc.\n- <img height=\"12\" width=\"12\" src=\"https://www.cashfree.com/favicon.ico\" alt=\"Cashfree logo\" /> **[Cashfree](https://github.com/cashfree/cashfree-mcp)** - [Cashfree Payments](https://www.cashfree.com/) official MCP server.\n- **[CB Insights](https://github.com/cbinsights/cbi-mcp-server)** - Use the [CB Insights](https://www.cbinsights.com) MCP Server to connect to [ChatCBI](https://www.cbinsights.com/chatcbi/)\n- <img height=\"12\" width=\"12\" src=\"https://cleanupcrew.ai/favicon-light.png\" alt=\"Cleanup Crew logo\" /> **[Cleanup Crew](https://cleanupcrew.ai/install)** - Real-time human support service for non-technical founders using AI coding tools. When AI hits a wall, request instant human help directly from your IDE.\n- <img height=\"12\" width=\"12\" src=\"https://www.chargebee.com/static/resources/brand/favicon.png\" alt=\"Chargebee Logo\" /> **[Chargebee](https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol)** - MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com).\n- <img height=\"12\" width=\"12\" src=\"https://cheqd.io/wp-content/uploads/2023/03/logo_cheqd_favicon.png\" alt=\"Cheqd Logo\" /> **[Cheqd](https://github.com/cheqd/mcp-toolkit)** - Enable AI Agents to be trusted, verified, prevent fraud, protect your reputation, and more through [cheqd's](https://cheqd.io) Trust Registries and Credentials.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.chiki.studio/brand/logo.png\" alt=\"Chiki StudIO Logo\" /> **[Chiki StudIO](https://chiki.studio/galimybes/mcp/)** - Create your own configurable MCP servers purely via configuration (no code), with instructions, prompts, and tools support.\n- <img height=\"12\" width=\"12\" src=\"https://trychroma.com/_next/static/media/chroma-logo.ae2d6e4b.svg\" alt=\"Chroma Logo\" /> **[Chroma](https://github.com/chroma-core/chroma-mcp)** - Embeddings, vector search, document storage, and full-text search with the open-source AI application database\n- <img height=\"12\" width=\"12\" src=\"https://www.chronulus.com/favicon/chronulus-logo-blue-on-alpha-square-128x128.ico\" alt=\"Chronulus AI Logo\" /> **[Chronulus AI](https://github.com/ChronulusAI/chronulus-mcp)** - Predict anything with Chronulus AI forecasting and prediction agents.\n- <img height=\"12\" width=\"12\" src=\"https://circleci.com/favicon.ico\" alt=\"CircleCI Logo\" /> **[CircleCI](https://github.com/CircleCI-Public/mcp-server-circleci)** - Enable AI Agents to fix build failures from CircleCI.\n- <img height=\"12\" width=\"12\" src=\"https://assets.zilliz.com/Zilliz_Logo_Mark_White_20230223_041013_86057436cc.png\" alt=\"Claude Context Logo\" /> **[Claude Context](https://github.com/zilliztech/claude-context)** - Bring your codebase as context to Claude Code\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://brand.clicksend.com/_ipx/s_794x608/img/clicksend_icon_only.svg\" alt=\"ClickSend Logo\" /> **[ClickSend](https://github.com/ClickSend/clicksend-mcp-server/)** - This is the official ClickSend MCP Server developed by ClickSend team.\n- <img height=\"12\" width=\"12\" src=\"https://7463-tcb-advanced-a656fc-1257967285.tcb.qcloud.la/mcp/cloudbase-logo.svg\" alt=\"CloudBase Logo\" /> **[CloudBase](https://github.com/TencentCloudBase/CloudBase-AI-ToolKit)** - One-stop backend services for WeChat Mini-Programs and full-stack apps with serverless cloud functions and databases by [Tencent CloudBase](https://tcb.cloud.tencent.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.cloudbet.com/favicon.ico\" alt=\"Cloudbet Logo\" /> **[Cloudbet](https://github.com/cloudbet/sports-mcp-server)** - Structured sports and esports data via Cloudbet API: fixtures, live odds, stake limits, and markets.\n- <img height=\"12\" width=\"12\" src=\"https://www.cloudbees.com/favicon.ico\" alt=\"CloudBees Logo\" /> **[CloudBees](https://docs.cloudbees.com/docs/cloudbees-mcp/latest/)** - Enable AI access to your [CloudBees Unify](https://www.cloudbees.com/unify) environment.\n- <img src=\"http://www.google.com/s2/favicons?domain=www.cloudera.com\" alt=\"Cloudera Iceberg\" width=\"12\" height=\"12\"> **[Cloudera Iceberg](https://github.com/cloudera/iceberg-mcp-server)** - enabling AI on the [Open Data Lakehouse](https://www.cloudera.com/products/open-data-lakehouse.html).\n- <img alt=\"cloudflare\" height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img src=\"https://cdn.prod.website-files.com/64d41aab8183c7c3324ddb29/67c0f1e272e51cf3c511c17c_Gyph.svg\" alt=\"Cloudinary\" width=\"12\" height=\"12\"> **[Cloudinary](https://github.com/cloudinary/mcp-servers)** - Exposes Cloudinary's media upload, transformation, AI analysis, management, optimization and delivery as tools usable by AI agents\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/Cloudsway-AI/smartsearch/refs/heads/main/plugin_cloudsway.ico\" alt=\"Cloudsway Logo\" /> **[Cloudsway SmartSearch](https://github.com/Cloudsway-AI/smartsearch)** - Web search MCP server powered by Cloudsway, supporting keyword search, language, and safety options. Returns structured JSON results.\n-  **[Codacy](https://github.com/codacy/codacy-mcp-server/)** - Interact with [Codacy](https://www.codacy.com) API to query code quality issues, vulnerabilities, and coverage insights about your code.\n-  **[CodeLogic](https://github.com/CodeLogicIncEngineering/codelogic-mcp-server)** - Interact with [CodeLogic](https://codelogic.com), a Software Intelligence platform that graphs complex code and data architecture dependencies, to boost AI accuracy and insight.\n- <img height=\"12\" width=\"12\" src=\"https://www.coingecko.com/favicon.ico\" alt=\"CoinGecko Logo\" /> **[CoinGecko](https://github.com/coingecko/coingecko-typescript/tree/main/packages/mcp-server)** - Official [CoinGecko API](https://www.coingecko.com/en/api) MCP Server for Crypto Price & Market Data, across 200+ Blockchain Networks and 8M+ Tokens.\n- <img height=\"12\" width=\"12\" src=\"https://www.comet.com/favicon.ico\" alt=\"Comet Logo\" /> **[Comet Opik](https://github.com/comet-ml/opik-mcp)** - Query and analyze your [Opik](https://github.com/comet-ml/opik) logs, traces, prompts and all other telemetry data from your LLMs in natural language.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6572bd8c27ee5db3eb91f4b3/6572bd8d27ee5db3eb91f55e_favicon-dashflow-webflow-template.svg\" alt=\"OSS Conductor Logo\" /> <img height=\"12\" width=\"12\" src=\"https://orkes.io/icons/icon-48x48.png\" alt=\"Orkes Conductor Logo\" />**[Conductor](https://github.com/conductor-oss/conductor-mcp)** - Interact with Conductor (OSS and Orkes) REST APIs.\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\" /> **[Composio](https://docs.composio.dev/docs/mcp-overview#-getting-started)** – Use [Composio](https://composio.dev) to connect 100+ tools. Zero setup. Auth built-in. Made for agents, works for humans.\n- <img height=\"12\" width=\"12\" src=\"https://www.confluent.io/favicon.ico\" alt=\"Confluent Logo\" /> **[Confluent](https://github.com/confluentinc/mcp-confluent)** - Interact with Confluent Kafka and Confluent Cloud REST APIs.\n- <img src=\"https://contrastsecurity.com/favicon.ico\" alt=\"Contrast Security\" width=\"12\" height=\"12\"> **[Contrast Security](https://github.com/Contrast-Security-OSS/mcp-contrast)** - Brings Contrast's vulnerability and SCA data into your coding agent to quickly remediate vulnerabilities.\n- <img height=\"12\" width=\"12\" src=\"https://www.convex.dev/favicon.ico\" alt=\"Convex Logo\" /> **[Convex](https://stack.convex.dev/convex-mcp-server)** - Introspect and query your apps deployed to Convex.\n- <img height=\"12\" width=\"12\" src=\"https://www.cortex.io/favicon.ico\" alt=\"Cortex Logo\" /> **[Cortex](https://github.com/cortexapps/cortex-mcp)** - Official MCP server for [Cortex](https://www.cortex.io).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/605755?s=200&v=4\" alt=\"Couchbase Logo\" /> **[Couchbase](https://github.com/Couchbase-Ecosystem/mcp-server-couchbase)** - Interact with the data stored in Couchbase clusters.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/user-attachments/assets/b256f9fa-2020-4b37-9644-c77229ef182b\" alt=\"CRIC 克而瑞 LOGO\"> **[CRIC Wuye AI](https://github.com/wuye-ai/mcp-server-wuye-ai)** - Interact with capabilities of the CRIC Wuye AI platform, an intelligent assistant specifically for the property management industry.\n- <img height=\"12\" width=\"12\" src=\"https://www.crowdstrike.com/etc.clientlibs/crowdstrike/clientlibs/crowdstrike-common/resources/favicon.ico\" alt=\"CrowdStrike Logo\" /> **[CrowdStrike Falcon](https://github.com/CrowdStrike/falcon-mcp)** - Connects AI agents with the CrowdStrike Falcon platform for intelligent security analysis, providing programmatic access to detections, incidents, behaviors, threat intelligence, hosts, vulnerabilities, and identity protection capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58433296\" alt=\"CTERA Edge Filer\" /> **[CTERA Edge Filer](https://github.com/ctera/mcp-ctera-edge)** - CTERA Edge Filer delivers intelligent edge caching and multiprotocol file access, enabling fast, secure access to files across core and remote sites.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58433296\" alt=\"CTERA Portal\" /> **[CTERA Portal](https://github.com/ctera/mcp-ctera-core)** - CTERA Portal is a multi-tenant, multi-cloud platform that delivers a global namespace and unified management across petabytes of distributed content.\n- <img height=\"12\" width=\"12\" src=\"https://app.cycode.com/img/favicon.ico\" alt=\"Cycode Logo\" /> **[Cycode](https://github.com/cycodehq/cycode-cli#mcp-command-experiment)** - Boost security in your dev lifecycle via SAST, SCA, Secrets & IaC scanning with [Cycode](https://cycode.com/).\n- <img height=\"12\" width=\"12\" src=\"http://app.itsdart.com/static/img/favicon.png\" alt=\"Dart Logo\" /> **[Dart](https://github.com/its-dart/dart-mcp-server)** - Interact with task, doc, and project data in [Dart](https://itsdart.com), an AI-native project management tool\n- <img height=\"12\" width=\"12\" src=\"https://cdn.bfldr.com/9AYANS2F/at/k8bgnnxhb4bggjk88r4x9snf/databricks-symbol-color.svg?auto=webp&format=png&width=12&height=13\" alt=\"Databricks Logo\" /> **[Databricks](https://docs.databricks.com/aws/en/generative-ai/mcp/)** - Connect to data, AI tools & agents, and the rest of the Databricks platform using turnkey managed MCP servers. Or, host your own custom MCP servers within the Databricks security and data governance boundary.\n- <img height=\"12\" width=\"12\" src=\"https://datahub.com/wp-content/uploads/2025/04/cropped-Artboard-1-32x32.png\" alt=\"DataHub Logo\" /> **[DataHub](https://github.com/acryldata/mcp-server-datahub)** - Search your data assets, traverse data lineage, write SQL queries, and more using [DataHub](https://datahub.com/) metadata.\n- <img height=\"12\" width=\"12\" src=\"https://www.daytona.io/brand/social-daytona-icon.png\" alt=\"Daytona Logo\" /> **[Daytona](https://github.com/daytonaio/daytona/tree/main/apps/cli/mcp)** - Fast and secure execution of your AI generated code with [Daytona](https://daytona.io) sandboxes\n- <img height=\"12\" width=\"12\" src=\"https://debugg.ai/favicon.svg\" alt=\"Debugg AI Logo\" /> **[Debugg.AI](https://github.com/debugg-ai/debugg-ai-mcp)** - Zero-Config, Fully AI-Managed End-to-End Testing for any code gen platform via [Debugg.AI](https://debugg.ai) remote browsing test agents.\n- <img height=\"12\" width=\"12\" src=\"https://www.deepl.com/img/logo/deepl-logo-blue.svg\" alt=\"DeepL Logo\" /> **[DeepL](https://github.com/DeepLcom/deepl-mcp-server)** - Translate or rewrite text with [DeepL](https://deepl.com)'s very own AI models using [the DeepL API](https://developers.deepl.com/docs)\n- <img height=\"12\" width=\"12\" src=\"https://defang.io/_next/static/media/defang-icon-dark-colour.25f95b77.svg\" alt=\"Defang Logo\" /> **[Defang](https://github.com/DefangLabs/defang/blob/main/src/pkg/mcp/README.md)** - Deploy your project to the cloud seamlessly with the [Defang](https://www.defang.io) platform without leaving your integrated development environment\n- <img height=\"12\" width=\"12\" src=\"https://detailer.ginylil.com/favicon.ico\" alt=\"Detailer Logo\" /> **[Detailer](https://detailer.ginylil.com/)** – Instantly generate rich, AI-powered documentation for your GitHub repositories. Designed for AI agents to gain deep project context before taking action.\n- <img height=\"12\" width=\"12\" src=\"https://devcycle.com/_next/image?url=%2Fassets%2Fbrand%2FColor-logo-mark.png&w=384&q=75\" alt=\"DevCycle Logo\" /> **[DevCycle](https://docs.devcycle.com/cli-mcp/mcp-getting-started)** - Create and monitor feature flags using natural language in your AI coding assistant.\n- <img height=\"12\" width=\"12\" src=\"https://www.devhub.com/img/upload/favicon-196x196-dh.png\" alt=\"DevHub Logo\" /> **[DevHub](https://github.com/devhub/devhub-cms-mcp)** - Manage and utilize website content within the [DevHub](https://www.devhub.com) CMS platform\n- <img height=\"12\" width=\"12\" src=\"https://devrev.ai/favicon.ico\" alt=\"DevRev Logo\" /> **[DevRev](https://github.com/devrev/mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. Sources listed [here](https://devrev.ai/docs/import#available-sources).\n- <img height=\"12\" width=\"12\" src=\"https://dexpaprika.com/favicon.ico\" alt=\"DexPaprika Logo\" /> **[DexPaprika (CoinPaprika)](https://github.com/coinpaprika/dexpaprika-mcp)** - Access real-time DEX data, liquidity pools, token information, and trading analytics across multiple blockchain networks with [DexPaprika](https://dexpaprika.com) by CoinPaprika.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/dolthub/dolt/raw/main/images/Dolt-Logo@3x.svg\" alt=\"Dolt Logo\" /> **[Dolt](https://github.com/dolthub/dolt-mcp)** - The official MCP server for version-controlled [Dolt](https://doltdb.com/) databases.\n- <img height=\"12\" width=\"12\" src=\"https://eu.getdot.ai/favicon.ico\" alt=\"GetDot.ai Logo\" /> **[Dot (GetDot.ai)](https://docs.getdot.ai/dot/integrations/mcp)** - Fetch, analyze or visualize data from your favorite database or data warehouse (Snowflake, BigQuery, Redshift, Databricks, Clickhouse, ...) with [Dot](https://getdot.ai), your AI Data Analyst. This remote MCP server is a one-click integration for user that have setup Dot.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/65421071?s=200&v=4\" alt=\"Drata Logo\" /> **[Drata](https://drata.com/mcp)** - Get hands-on with our experimental MCP server—bringing real-time compliance intelligence into your AI workflows.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/204530939?s=200&v=4\" alt=\"Dumpling AI Logo\" /> **[Dumpling AI](https://github.com/Dumpling-AI/mcp-server-dumplingai)** - Access data, web scraping, and document conversion APIs by [Dumpling AI](https://www.dumplingai.com/)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58178984\" alt=\"Dynatrace Logo\" /> **[Dynatrace](https://github.com/dynatrace-oss/dynatrace-mcp)** - Manage and interact with the [Dynatrace Platform ](https://www.dynatrace.com/platform) for real-time observability and monitoring.\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://www.edgee.cloud/favicon.ico\" alt=\"Edgee Logo\" /> **[Edgee](https://github.com/edgee-cloud/mcp-server-edgee)** - Deploy and manage [Edgee](https://www.edgee.cloud) components and projects\n- <img height=\"12\" width=\"12\" src=\"https://static.edubase.net/media/brand/favicon/favicon-32x32.png\" alt=\"EduBase Logo\" /> **[EduBase](https://github.com/EduBase/MCP)** - Interact with [EduBase](https://www.edubase.net), a comprehensive e-learning platform with advanced quizzing, exam management, and content organization capabilities\n- <img height=\"12\" width=\"12\" src=\"https://www.elastic.co/favicon.ico\" alt=\"Elasticsearch Logo\" /> **[Elasticsearch](https://github.com/elastic/mcp-server-elasticsearch)** - Query your data in [Elasticsearch](https://www.elastic.co/elasticsearch)\n- <img height=\"12\" width=\"12\" src=\"https://github.com/EmberAGI/arbitrum-vibekit/blob/main/img/Ember%20Black.png?raw=true\" alt=\"Ember AI Logo\" /> **[Ember AI](https://docs.emberai.xyz/)** - A unified MCP server that enables AI agents to execute cross-chain DeFi strategies.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/656eaf5c6da3527caf362363/656ecc07555afac40df4c40e_Facicon.png\" alt=\"Endor Labs Logo\" /> **[Endor Labs](https://docs.endorlabs.com/deployment/ide/mcp/)** - Find and fix security risks in you code. Integrate [Endor Labs](https://endorlabs.com) to scan and secure your code from vulnerabilities and secret leaks.\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://rainmaker.espressif.com/favicon.ico\" alt=\"ESP RainMaker Logo\" /> **[ESP RainMaker](https://github.com/espressif/esp-rainmaker-mcp)** - Official Espressif MCP Server to Control and Manage ESP RainMaker Devices.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://www.explorium.ai/wp-content/uploads/2025/04/Favicon-Purple-512x512-1-150x150.png\" alt=\"Explorium Logo\" /> **[Explorium](https://github.com/explorium-ai/mcp-explorium)** - B2B data and infrastructure for AI SDR & GTM Agents [Explorium](https://www.explorium.ai)\n- **[FalkorDB](https://github.com/FalkorDB/FalkorDB-MCPServer)** - FalkorDB graph database server get schema and read/write-cypher [FalkorDB](https://www.falkordb.com)\n- <img height=\"12\" width=\"12\" src=\"https://fetchserp.com/icon.png\" alt=\"fetchSERP Logo\" /> **[fetchSERP](https://github.com/fetchSERP/fetchserp-mcp-server-node)** - All-in-One SEO & Web Intelligence Toolkit API [fetchSERP](https://www.fetchserp.com/)\n- <img height=\"12\" width=\"12\" src=\"https://fewsats.com/favicon.svg\" alt=\"Fewsats Logo\" /> **[Fewsats](https://github.com/Fewsats/fewsats-mcp)** - Enable AI Agents to purchase anything in a secure way using [Fewsats](https://fewsats.com)\n- <img height=\"12\" width=\"12\" src=\"https://fibery.io/favicon.svg\" alt=\"Fibery Logo\" /> **[Fibery](https://github.com/Fibery-inc/fibery-mcp-server)** - Perform queries and entity operations in your [Fibery](https://fibery.io) workspace.\n- <img height=\"12\" width=\"12\" src=\"https://financialdatasets.ai/favicon.ico\" alt=\"Financial Datasets Logo\" /> **[Financial Datasets](https://github.com/financial-datasets/mcp-server)** - Stock market API made for AI agents\n- <img height=\"12\" width=\"12\" src=\"https://www.gstatic.com/devrel-devsite/prod/v7aeef7f1393bb1d75a4489145c511cdd5aeaa8e13ad0a83ec1b5b03612e66330/firebase/images/favicon.png\" alt=\"Firebase Logo\" /> **[Firebase](https://github.com/firebase/firebase-tools/blob/master/src/mcp)** - Firebase's experimental [MCP Server](https://firebase.google.com/docs/cli/mcp-server) to power your AI Tools\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/firecrawl/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/100200663?s=200&v=4\" alt=\"Firefly Logo\" /> **[Firefly](https://github.com/gofireflyio/firefly-mcp)** - Integrates, discovers, manages, and codifies cloud resources with [Firefly](https://firefly.ai).\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://fixparser.dev/favicon.ico\" alt=\"FIXParser Logo\" /> **[FIXParser](https://gitlab.com/logotype/fixparser/-/tree/main/packages/fixparser-plugin-mcp)** - A modern FIX Protocol engine for AI-powered trading agents\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/52471808\" alt=\"Fluid Attacks Logo\" /> **[Fluid Attacks](https://github.com/fluidattacks/mcp)** - Interact with the [Fluid Attacks](https://fluidattacks.com/) API, enabling vulnerability management, organization insights, and GraphQL query execution.\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://flutterwave.com/favicon.ico\" alt=\"Flutterwave Logo\" /> **[Flutterwave](https://github.com/bajoski34/mcp-flutterwave/tree/main)** - Interact with Flutterwave payment solutions API, to manage transactions, payment links and more.\n- <img height=\"12\" width=\"12\" src=\"https://app.gibsonai.com/favicon.ico\" alt=\"GibsonAI Logo\" /> **[GibsonAI](https://github.com/GibsonAI/mcp)** - AI-Powered Cloud databases: Build, migrate, and deploy database instances with AI\n- <img height=\"12\" width=\"12\" src=\"https://gcore.com/assets/favicon/favicon-16x16.png\" alt=\"Gcore Logo\" /> **[Gcore](https://github.com/G-Core/gcore-mcp-server)** - Interact with Gcore platform services via LLM assistants, providing unified access to CDN, GPU Cloud & AI Inference, Video Streaming, WAAP, and cloud resources including instances and networks.\n- <img height=\"12\" width=\"12\" src=\"https://gitea.com/assets/img/favicon.svg\" alt=\"Gitea Logo\" /> **[Gitea](https://gitea.com/gitea/gitea-mcp)** - Interact with Gitea instances with MCP.\n- <img height=\"12\" width=\"12\" src=\"https://gitee.com/favicon.ico\" alt=\"Gitee Logo\" /> **[Gitee](https://github.com/oschina/mcp-gitee)** - Gitee API integration, repository, issue, and pull request management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/5ee25cbe47310017adf964da/6323888a9b9f4e22a7bc766b_GG%20Favicon.svg\" alt=\"GitGuardian Logo\" /> **[GitGuardian](https://github.com/GitGuardian/gg-mcp)** - GitGuardian official MCP server - Scan projects using GitGuardian's industry-leading API, which features over 500 secret detectors to prevent credential leaks before they reach public repositories. Resolve security incidents directly with rich contextual data for rapid, automated remediation.\n- <img height=\"12\" width=\"12\" src=\"https://gitlab.com/favicon.ico\" alt=\"GitLab Logo\" /> **[GitLab](https://docs.gitlab.com/user/gitlab_duo/model_context_protocol/mcp_server/)** - GitLab's official MCP server enabling AI tools to securely access GitLab project data, manage issues, and perform repository operations via OAuth 2.0.\n- <img height=\"12\" width=\"12\" src=\"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png\" alt=\"GitHub Logo\" /> **[GitHub](https://github.com/github/github-mcp-server)** - GitHub's official MCP Server.\n- <img height=\"12\" width=\"12\" src=\"https://www.gitkraken.com/wp-content/uploads/2021/03/android-chrome-144x144-1.png\" alt=\"GitKraken Logo\" /> **[GitKraken](https://github.com/gitkraken/gk-cli?tab=readme-ov-file#mcp-server)** - A CLI for interacting with GitKraken APIs. Includes an MCP server via `gk mcp` that not only wraps GitKraken APIs, but also Jira, GitHub, GitLab, and more.\n- <img height=\"12\" width=\"12\" src=\"https://app.glean.com/images/favicon3-196x196.png\" alt=\"Glean Logo\" /> **[Glean](https://github.com/gleanwork/mcp-server)** - Enterprise search and chat using Glean's API.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.jsdelivr.net/gh/jsdelivr/globalping-media@refs/heads/master/icons/android-chrome-192x192.png\" alt=\"Globalping Logo\" /> **[Globalping](https://github.com/jsdelivr/globalping-mcp-server)** - Access a network of thousands of probes to run network commands like ping, traceroute, mtr, http and DNS resolve.\n- <img height=\"12\" width=\"12\" src=\"https://gnucleus.ai/favicon.ico\" alt=\"gNucleus Logo\" /> **[gNucleus Text-To-CAD](https://github.com/gNucleus/text-to-cad-mcp)** - Generate CAD parts and assemblies from text using gNucleus AI models.\n- <img height=\"12\" width=\"12\" src=\"https://www.gstatic.com/cgc/favicon.ico\" alt=\"Google Cloud Logo\" /> **[Google Cloud Run](https://github.com/GoogleCloudPlatform/cloud-run-mcp)** - Deploy code to Google Cloud Run\n- <img height=\"12\" width=\"12\" src=\"https://api.gologin.com/favicon.ico\" alt=\"GoLogin Logo\" /> **[GoLogin MCP server](https://github.com/gologinapp/gologin-mcp)** - Manage your GoLogin browser profiles and automation directly through AI conversations!\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/3717923?s=200&v=4\" alt=\"Google Maps Platform Logo\" /> **[Google Maps Platform Code Assist](https://github.com/googlemaps/platform-ai/tree/main/packages/code-assist)** - Ground agents on fresh, official documentation and code samples for optimal geo-related guidance and code..\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6605a2979ff17b2cd1939cd4/6605a460de47e7596ed84f06_icon256.png\" alt=\"gotoHuman Logo\" /> **[gotoHuman](https://github.com/gotohuman/gotohuman-mcp-server)** - Human-in-the-loop platform - Allow AI agents and automations to send requests for approval to your [gotoHuman](https://www.gotohuman.com) inbox.\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- <img height=\"12\" width=\"12\" src=\"https://grafbase.com/favicon.ico\" alt=\"Grafbase Logo\" /> **[Grafbase](https://github.com/grafbase/grafbase/tree/main/crates/mcp)** - Turn your GraphQL API into an efficient MCP server with schema intelligence in a single command.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/5f5e90c17e7c9eb95c7acb17/61d3457a519242f2c75c725c_favicon.png\" alt=\"Grain Logo\" /> **[Grain](https://grain.com/release-note/06-18-2025)** - Access your Grain meetings notes & transcripts directly in claude and generate reports with native Claude Prompts.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/KCOWBYLKunDff1Dr452y6EfjiU.png\" alt=\"Graphlit Logo\" /> **[Graphlit](https://github.com/graphlit/graphlit-mcp-server)** - Ingest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a searchable [Graphlit](https://www.graphlit.com) project.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/64a5291e7847ac04fe1531ad/64a529af2f1fc7debc26f2a6_favicon-32x32.avif\" alt=\"Gremlin favicon\" /> **[Gremlin](https://github.com/gremlin/mcp)** - The official [Gremlin](https://www.gremlin.com) MCP server. Analyze your reliability posture, review recent tests and chaos engineering experiments, and create detailed reports.\n- <img height=\"12\" width=\"12\" src=\"https://greptime.com/favicon.ico\" alt=\"Greptime Logo\" /> **[GreptimeDB](https://github.com/GreptimeTeam/greptimedb-mcp-server)** - Provides AI assistants with a secure and structured way to explore and analyze data in [GreptimeDB](https://github.com/GreptimeTeam/greptimedb).\n- <img height=\"12\" width=\"12\" src=\"https://growi.org/assets/images/favicon.ico\" alt=\"GROWI Logo\" /> **[GROWI](https://github.com/growilabs/growi-mcp-server)** - Official MCP Server to integrate with GROWI APIs.\n- <img height=\"12\" width=\"12\" src=\"https://gyazo.com/favicon.ico\" alt=\"Gyazo Logo\" /> **[Gyazo](https://github.com/nota/gyazo-mcp-server)** - Search, fetch, upload, and interact with Gyazo images, including metadata and OCR data.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6374050260446c42f94dc90f/63d828be3e13d32ee6973f35_favicon-32x32.png\" alt=\"Harper Logo\" /> **[Harper](https://github.com/HarperDB/mcp-server)** - An MCP server providing an interface for MCP clients to access data within [Harper](https://www.harpersystems.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://www.herokucdn.com/favicons/favicon.ico\" alt=\"Heroku Logo\" /> **[Heroku](https://github.com/heroku/heroku-mcp-server)** - Interact with the Heroku Platform through LLM-driven tools for managing apps, add-ons, dynos, databases, and more.\n- <img height=\"12\" width=\"12\" src=\"https://heyoncall.com/favicon.ico\" alt=\"HeyOnCall Logo\" /> **[HeyOnCall](https://heyoncall.com/blog/mcp-server-for-paging-a-human)** - Page a human, sending critical or non-critical alerts to the free [HeyOnCall](https://heyoncall.com/) iOS or Android apps.\n- <img height=\"12\" width=\"12\" src=\"https://www.hiveflow.ai/favicon.ico\" alt=\"Hiveflow Logo\" /> **[Hiveflow](https://github.com/hiveflowai/hiveflow-mcp-server)** - Create, manage, and execute agentic AI workflows directly from your assistant.\n- <img height=\"12\" width=\"12\" src=\"https://hiveintelligence.xyz/favicon.ico\" alt=\"Hive Intelligence Logo\" /> **[Hive Intelligence](https://github.com/hive-intel/hive-crypto-mcp)** - Ultimate cryptocurrency MCP for AI assistants with unified access to crypto, DeFi, and Web3 analytics\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN01d9qrry1i6lTNa2BRa_!!6000000004364-2-tps-218-200.png\" alt=\"Hologres Logo\" /> **[Hologres](https://github.com/aliyun/alibabacloud-hologres-mcp-server)** - Connect to a [Hologres](https://www.alibabacloud.com/en/product/hologres) instance, get table metadata, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://brew.sh/assets/img/favicon.ico\" alt=\"Homebrew Logo\" /> **[Homebrew](https://docs.brew.sh/MCP-Server)** Allows [Homebrew](https://brew.sh) users to run Homebrew commands locally.\n- <img height=\"12\" width=\"12\" src=\"https://www.honeycomb.io/favicon.ico\" alt=\"Honeycomb Logo\" /> **[Honeycomb](https://github.com/honeycombio/honeycomb-mcp)** Allows [Honeycomb](https://www.honeycomb.io/) Enterprise customers to query and analyze their data, alerts, dashboards, and more; and cross-reference production behavior with the codebase.\n- <img height=\"12\" width=\"12\" src=\"https://static.hsinfrastatic.net/StyleGuideUI/static-3.438/img/sprocket/favicon-32x32.png\" alt=\"HubSpot Logo\" /> **[HubSpot](https://developer.hubspot.com/mcp)** - Connect, manage, and interact with [HubSpot](https://www.hubspot.com/) CRM data\n- <img height=\"12\" width=\"12\" src=\"https://huggingface.co/datasets/huggingface/brand-assets/resolve/main/hf-logo.svg\" alt=\"HuggingFace Logo\" /> **[Hugging Face](https://huggingface.co/settings/mcp)** - Connect to the Hugging Face Hub APIs programmatically: semantic search for spaces and papers, exploration of datasets and models, and access to all compatible MCP Gradio tool spaces!\n- <img height=\"12\" width=\"12\" src=\"https://hunter.io/favicon.ico\" alt=\"Hunter Logo\" /> **[Hunter](https://github.com/hunter-io/hunter-mcp)** - Interact with the [Hunter API](https://hunter.io) to get B2B data using natural language.\n- <img height=\"12\" width=\"12\" src=\"https://app.hyperbolic.xyz/hyperbolic-logo.svg\" alt=\"Hyperbolic Labs Logo\" /> **[Hyperbolic](https://github.com/HyperbolicLabs/hyperbolic-mcp)** - Interact with Hyperbolic's GPU cloud, enabling agents and LLMs to view and rent available GPUs, SSH into them, and run GPU-powered workloads for you.\n- <img height=\"12\" width=\"12\" src=\"https://hyperbrowser-assets-bucket.s3.us-east-1.amazonaws.com/Hyperbrowser-logo.png\" alt=\"Hyperbrowsers23 Logo\" /> **[Hyperbrowser](https://github.com/hyperbrowserai/mcp)** - [Hyperbrowser](https://www.hyperbrowser.ai/) is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation.\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://www.getinboxzero.com/icon.png\" alt=\"Inbox Zero Logo\" /> **[Inbox Zero](https://github.com/elie222/inbox-zero/tree/main/apps/mcp-server)** - AI personal assistant for email [Inbox Zero](https://www.getinboxzero.com)\n- <img height=\"12\" width=\"12\" src=\"https://www.inflectra.com/Favicon.ico\" alt=\"Inflectra Logo\" /> **[Inflectra Spira](https://github.com/Inflectra/mcp-server-spira)** - Connect to your instance of the SpiraTest, SpiraTeam or SpiraPlan application lifecycle management platform by [Inflectra](https://www.inflectra.com)\n-  **[Inkeep](https://github.com/inkeep/mcp-server-python)** - RAG Search over your content powered by [Inkeep](https://inkeep.com)\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers.\n- <img height=\"12\" width=\"12\" src=\"https://www.ip2location.io/favicon.ico\" alt=\"IP2Location.io Icon\" /> **[IP2Location.io](https://github.com/ip2location/mcp-ip2location-io)** - Interact with IP2Location.io API to retrieve the geolocation information for an IP address.\n- <img height=\"12\" width=\"12\" src=\"https://static.iplocate.io/custom/logo-square-rounded.png\" alt=\"IPLocate Icon\" /> **[IPLocate](https://github.com/iplocate/mcp-server-iplocate)** - Look up IP address geolocation, network information, detect proxies and VPNs, and find abuse contact details using [IPLocate.io](https://www.iplocate.io)\n- <img height=\"12\" width=\"12\" src=\"https://jellyfish.co/favicon.ico\" alt=\"Jellyfish Logo\" /> **[Jellyfish](https://github.com/Jellyfish-AI/jellyfish-mcp)** – Give your AI agent context about your team's software engineering allocations and workflow via the [Jellyfish](https://jellyfish.co) platform\n- <img alt=\"jetbrains\" height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://www.jetbrains.com/help/idea/mcp-server.html)** – Work on your code with JetBrains IDEs: IntelliJ IDEA, PhpStorm, etc.\n- <img height=\"12\" width=\"12\" src=\"https://speedmedia.jfrog.com/08612fe1-9391-4cf3-ac1a-6dd49c36b276/media.jfrog.com/wp-content/uploads/2019/04/20131046/Jfrog16-1.png\" alt=\"JFrog Logo\" /> **[JFrog](https://github.com/jfrog/mcp-jfrog)** - Model Context Protocol (MCP) Server for the [JFrog](https://jfrog.com/) Platform API, enabling repository management, build tracking, release lifecycle management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://jenkins.io/images/logos/jenkins/jenkins.svg\" alt=\"Jenkins Logo\" /> **[Jenkins](https://plugins.jenkins.io/mcp-server/)** - Official Jenkins MCP Server plugin enabling AI assistants to manage builds, check job statuses, retrieve logs, and integrate with CI/CD pipelines through standardized MCP interface.\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://connection.keboola.com/favicon.ico\" alt=\"Keboola Logo\" /> **[Keboola](https://github.com/keboola/keboola-mcp-server)** - Build robust data workflows, integrations, and analytics on a single intuitive platform.\n- <img height=\"12\" width=\"12\" src=\"https://mcp.onkernel.com/favicon.svg\" alt=\"Kernel Logo\" /> **[Kernel](https://github.com/onkernel/kernel-mcp-server)** – Access Kernel's cloud‑based browsers via MCP.\n- <img height=\"12\" width=\"12\" src=\"https://keywordseverywhere.com/favicon.ico\" alt=\"Keywords Everywhere Logo\" /> **[Keywords Everywhere](https://api.keywordseverywhere.com/docs/#/mcp_integration)** – Access SEO data through the official Keywords Everywhere API MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://keywordspeopleuse.com/favicon.ico\" alt=\"KeywordsPeopleUse Logo\" /> **[KeywordsPeopleUse.com](https://github.com/data-skunks/kpu-mcp)** - Find questions people ask online with [KeywordsPeopleUse](https://keywordspeopleuse.com).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/4815054\" alt=\"Kintone Logo\" /> **[Kintone](https://github.com/kintone/mcp-server)** - The official local MCP server for [Kintone](https://kintone.com).\n- <img height=\"12\" width=\"12\" src=\"https://kirokuforms.com/favicon.svg\" alt=\"KirokuForms Logo\" /> **[KirokuForms](https://www.kirokuforms.com/ai/mcp)** - [KirokuForms](https://www.kirokuforms.com) is an AI-powered form platform combining professional form building with Human-in-the-Loop (HITL) capabilities. Create custom forms, collect submissions, and integrate human oversight into AI workflows through [MCP integration](https://kirokuforms.com/ai/mcp).\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" alt=\"Klavis Logo\" /> **[Klavis ReportGen](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/report_generation)** - Create professional reports from a simple user query.\n- <img height=\"12\" width=\"12\" src=\"https://www.klaviyo.com/media/Favicon-16by16.png\" alt=\"Klaviyo Logo\" /> **[Klaviyo](https://developers.klaviyo.com/en/docs/klaviyo_mcp_server)** - Interact with your [Klaviyo](https://www.klaviyo.com/) marketing data.\n- <img height=\"12\" width=\"12\" src=\"https://platform.kluster.ai/logo-light.svg\" alt=\"kluster.ai Logo\" /> **[kluster.ai](https://docs.kluster.ai/get-started/mcp/overview/)** - kluster.ai provides MCP servers that bring AI services directly into your development workflow, including guardrails like hallucination detection.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6347ea26001f0287c592ff91/649953ef7a9ffe1f3e492b5a_Knit%20Logo.svg\" alt=\"Knit Logo\" /> **[Knit MCP Server](https://developers.getknit.dev/docs/knit-mcp-server-getting-started)** - Production-ready remote MCP servers that enable you to connect with 10000+ tools across CRM, HRIS, Payroll, Accounting, ERP, Calendar, Expense Management, and Chat categories.\n- <img height=\"12\" width=\"12\" src=\"https://knock.app/favicon/favicon-dark.svg\" alt=\"Knock Logo\" /> **[Knock MCP Server](https://github.com/knocklabs/agent-toolkit#model-context-protocol-mcp)** - Send product and customer messaging across email, in-app, push, SMS, Slack, MS Teams.\n- <img height=\"12\" width=\"12\" src=\"https://kumo-sdk-public.s3.us-west-2.amazonaws.com/rfm-colabs/kumo_ai_logo.jpeg\" alt=\"Kumo Logo\" /> **[Kumo](https://github.com/kumo-ai/kumo-rfm-mcp)** - MCP Server to interact with KumoRFM, a foundation model for generating predictions from your relational data.\n- <img height=\"12\" width=\"12\" src=\"https://www.kurrent.io/favicon.ico\" alt=\"Kurrent Logo\" /> **[KurrentDB](https://github.com/kurrent-io/mcp-server)** - This is a simple MCP server to help you explore data and prototype projections faster on top of KurrentDB.\n- <img height=\"12\" width=\"12\" src=\"https://kuzudb.com/favicon.ico\" alt=\"Kuzu Logo\" /> **[Kuzu](https://github.com/kuzudb/kuzu-mcp-server)** - This server enables LLMs to inspect database schemas and execute queries on the provided Kuzu graph database. See [blog](https://blog.kuzudb.com/post/2025-03-23-kuzu-mcp-server/)) for a debugging use case.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/187484914\" alt=\"KWDB Logo\" /> **[KWDB](https://github.com/KWDB/kwdb-mcp-server)** - Reading, writing, querying, modifying data, and performing DDL operations with data in your KWDB Database.\n- <img height=\"12\" width=\"12\" src=\"https://labelstud.io/favicon-16x16.png\" alt=\"Label Studio Logo\" /> **[Label Studio](https://github.com/HumanSignal/label-studio-mcp-server)** - Open Source data labeling platform.\n- <img src=\"https://avatars.githubusercontent.com/u/188884511?s=48&v=4\" alt=\"Lambda Capture\" width=\"12\" height=\"12\"> **[Lambda Capture](https://github.com/lambda-capture/mcp-server)** - Macroeconomic Forecasts & Semantic Context from Federal Reserve, Bank of England, ECB.\n- <img src=\"https://www.lambdatest.com/resources/images/header/professional-service.svg\" alt=\"LambdaTest MCP server\" width=\"12\" height=\"12\"> **[LambdaTest](https://www.lambdatest.com/mcp)** - LambdaTest MCP Servers ranging from Accessibility, SmartUI, Automation, and HyperExecute allows you to connect AI assistants with your testing workflow, streamlining setup, analyzing failures, and generating fixes to speed up testing and improve efficiency.\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://laratranslate.com/favicon.ico\" alt=\"Lara Translate Logo\" /> **[Lara Translate](https://github.com/translated/lara-mcp)** - MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.\n- <img height=\"12\" width=\"12\" src=\"https://last9.io/favicon.png\" alt=\"Last9 Logo\" /> **[Last9](https://github.com/last9/last9-mcp-server)** - Seamlessly bring real-time production context—logs, metrics, and traces—into your local environment to auto-fix code faster.\n- <img height=\"12\" width=\"12\" src=\"https://www.launchdarkly.com/favicon.ico\" alt=\"LaunchDarkly Logo\" /> **[LaunchDarkly](https://github.com/launchdarkly/mcp-server)** - LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely.\n- <img height=\"12\" width=\"12\" src=\"https://www.line.me/favicon-32x32.png\" alt=\"LINE Logo\" /> **[LINE](https://github.com/line/line-bot-mcp-server)** - Integrates the LINE Messaging API to connect an AI Agent to the LINE Official Account.\n- <img height=\"12\" width=\"12\" src=\"https://linear.app/favicon.ico\" alt=\"Linear Logo\" /> **[Linear](https://linear.app/docs/mcp)** - Search, create, and update Linear issues, projects, and comments.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://ligo.ertiqah.com/favicon.avif\" alt=\"LiGo Logo\" /> **[LinkedIn MCP Runner](https://github.com/ertiqah/linkedin-mcp-runner)** - Write, edit, and schedule LinkedIn posts right from ChatGPT and Claude with [LiGo](https://ligo.ertiqah.com/).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/175112039?s=200&v=4\" alt=\"Linkup Logo\" /> **[Linkup](https://github.com/LinkupPlatform/js-mcp-server)** - (JS version) MCP server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/175112039?s=200&v=4\" alt=\"Linkup Logo\" /> **[Linkup](https://github.com/LinkupPlatform/python-mcp-server)** - (Python version) MCP server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\n- <img src=\"https://avatars.githubusercontent.com/u/149083471\" alt=\"Lippia.io\" width=\"12\" height=\"12\"> **[Lippia](https://github.com/Lippia-io/Lippia-MCP-Server/blob/main/getting-started.md)** - MCP Server to accelerate Test Automation using Lippia Framework.\n- <img src=\"https://gornschool.com/gorn.png\" alt=\"Lisply\" width=\"12\" height=\"12\"> **[Lisply](https://github.com/gornskew/lisply-mcp)** - Flexible frontend for compliant Lisp-speaking backends.\n- <img height=\"12\" width=\"12\" src=\"https://litmus.io/favicon.ico\" alt=\"Litmus.io Logo\" /> **[Litmus.io](https://github.com/litmusautomation/litmus-mcp-server)** - Official MCP server for configuring [Litmus](https://litmus.io) Edge for Industrial Data Collection, Edge Analytics & Industrial AI.\n- <img height=\"12\" width=\"12\" src=\"https://liveblocks.io/favicon.ico\" alt=\"Liveblocks Logo\" /> **[Liveblocks](https://github.com/liveblocks/liveblocks-mcp-server)** - Ready‑made features for AI & human collaboration—use this to develop your [Liveblocks](https://liveblocks.io) app quicker.\n- <img height=\"12\" width=\"12\" src=\"https://logfire.pydantic.dev/favicon.ico\" alt=\"Logfire Logo\" /> **[Logfire](https://github.com/pydantic/logfire-mcp)** - Provides access to OpenTelemetry traces and metrics through Logfire.\n- <img height=\"12\" width=\"12\" src=\"https://make.magicmealkits.com/favicon.ico\" alt=\"Magic Meal Kits Logo\" /> **[Magic Meal Kits](https://github.com/pureugong/mmk-mcp)** - Unleash Make's Full Potential by [Magic Meal Kits](https://make.magicmealkits.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.mailgun.com/favicon.ico\" alt=\"Mailgun Logo\" /> **[Mailgun](https://github.com/mailgun/mailgun-mcp-server)** - Interact with Mailgun API.\n- <img height=\"12\" width=\"12\" src=\"https://www.mailjet.com/favicon.ico\" alt=\"Mailjet Logo\" /> **[Mailjet](https://github.com/mailgun/mailjet-mcp-server)** - Official MCP server which allows AI agents to interact with contact, campaign, segmentation, statistics, workflow (and more) APIs from [Sinch Mailjet](https://www.mailjet.com).\n- <img height=\"12\" width=\"12\" src=\"https://www.make.com/favicon.ico\" alt=\"Make Logo\" /> **[Make](https://github.com/integromat/make-mcp-server)** - Turn your [Make](https://www.make.com/) scenarios into callable tools for AI assistants.\n- <img height=\"12\" width=\"12\" src=\"https://static-assets.mapbox.com/branding/favicon/v1/favicon.ico\" alt=\"Mapbox Logo\" /> **[Mapbox](https://github.com/mapbox/mcp-server)** - Unlock geospatial intelligence through Mapbox APIs like geocoding, POI search, directions, isochrones and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.mariadb.com/favicon.ico\" alt=\"MariaDB Logo\" /> **[MariaDB](https://github.com/mariadb/mcp)** - A standard interface for managing and querying MariaDB databases, supporting both standard SQL operations and advanced vector/embedding-based search.\n- <img height=\"14\" width=\"14\" src=\"https://raw.githubusercontent.com/rust-mcp-stack/mcp-discovery/refs/heads/main/docs/_media/mcp-discovery-logo.png\" alt=\"mcp-discovery logo\" /> **[MCP Discovery](https://github.com/rust-mcp-stack/mcp-discovery)** - A lightweight CLI tool built in Rust for discovering MCP server capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://googleapis.github.io/genai-toolbox/favicons/favicon.ico\" alt=\"MCP Toolbox for Databases Logo\" /> **[MCP Toolbox for Databases](https://github.com/googleapis/genai-toolbox)** - Open source MCP server specializing in easy, fast, and secure tools for Databases. Supports  AlloyDB, BigQuery, Bigtable, Cloud SQL, Dgraph, Looker, MySQL, Neo4j, Postgres, Spanner, and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://memgraph.com/favicon.png\" alt=\"Memgraph Logo\" /> **[Memgraph](https://github.com/memgraph/ai-toolkit/tree/main/integrations/mcp-memgraph)** - Query your data in [Memgraph](https://memgraph.com/) graph database.\n- <img height=\"12\" width=\"12\" src=\"https://www.mercadolibre.com.ar/favicon.ico\" alt=\"MercadoLibre Logo\" /> **[Mercado Libre](https://mcp.mercadolibre.com/)** - Mercado Libre's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.mercadopago.com/favicon.ico\" alt=\"MercadoPago Logo\" /> **[Mercado Pago](https://mcp.mercadopago.com/)** - Mercado Pago's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/MetoroLogo.png\" alt=\"Metoro Logo\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://claritystatic.azureedge.net/images/logo.ico\" alt=\"Microsoft Clarity Logo\"/> **[Microsoft Clarity](https://github.com/microsoft/clarity-mcp-server)** - Official MCP Server to get your behavioral analytics data and insights from [Clarity](https://clarity.microsoft.com)\n- <img height=\"12\" width=\"12\" src=\"https://conn-afd-prod-endpoint-bmc9bqahasf3grgk.b01.azurefd.net/releases/v1.0.1735/1.0.1735.4099/commondataserviceforapps/icon.png\" alt=\"Microsoft Dataverse Logo\" /> **[Microsoft Dataverse](https://go.microsoft.com/fwlink/?linkid=2320176)** - Chat over your business data using NL - Discover tables, run queries, retrieve data, insert or update records, and execute custom prompts grounded in business knowledge and context.\n- <img height=\"12\" width=\"12\" src=\"https://learn.microsoft.com/favicon.ico\" alt=\"Microsoft Learn Logo\" /> **[Microsoft Learn Docs](https://github.com/microsoftdocs/mcp)** - An MCP server that provides structured access to Microsoft's official documentation. Retrieves accurate, authoritative, and context-aware technical content for code generation, question answering, and workflow grounding.\n- <img height=\"12\" width=\"12\" src=\"https://statics.teams.microsoft.com/hashedassets/favicon/prod/favicon-9f45b466.ico\" alt=\"Microsoft Teams Logo\" /> **[Microsoft Teams](https://devblogs.microsoft.com/microsoft365dev/announcing-the-updated-teams-ai-library-and-mcp-support/)** - Official Microsoft Teams AI Library with MCP support enabling advanced agent orchestration, multi-agent collaboration, and seamless integration with Teams messaging and collaboration features.\n- <img alt=\"favicon_32x32\" height=\"12\" width=\"12\" src=\"https://milvus.io/favicon-32x32.png\" /> **[Milvus](https://github.com/zilliztech/mcp-server-milvus)** - Search, Query and interact with data in your Milvus Vector Database.\n- <img src=\"https://www.mimilabs.ai/logos/mimilabsSquare.svg\" alt=\"mimilabs\" width=\"12\" height=\"12\"> **[mimilabs](https://www.mimilabs.ai/mcp)** - A US healthcare data discovery guide for 50+ gov sources and thousands of publicly available US healthcare datasets regarding gov-funded programs, policies, drug pricings, clinical trials, etc.\n- <img src=\"https://avatars.githubusercontent.com/u/94089762?s=48&v=4\" alt=\"Mobb\" width=\"12\" height=\"12\"> **[Mobb](https://github.com/mobb-dev/bugsy?tab=readme-ov-file#model-context-protocol-mcp-server)** - The [Mobb Vibe Shield](https://vibe.mobb.ai/) MCP server identifies and remediates vulnerabilities in both human and AI-written code, ensuring your applications remain secure without slowing development.\n- <img alt=\"favicon\" height=\"12\" width=\"12\" src=\"https://console.gomomento.com/favicon.ico\" /> **[Momento](https://github.com/momentohq/mcp-momento)** - Momento Cache lets you quickly improve your performance, reduce costs, and handle load at any scale.\n- <img height=\"12\" width=\"12\" src=\"https://www.monday.com/favicon.ico\" alt=\"Monday.com Logo\" /> **[Monday.com](https://github.com/mondaycom/mcp)** - Interact with Monday.com boards, items, accounts and work forms.\n- <img alt=\"favicon\" height=\"12\" width=\"12\" src=\"https://www.mongodb.com/favicon.ico\" /> **[MongoDB](https://github.com/mongodb-js/mongodb-mcp-server)** - Both MongoDB Community Server and MongoDB Atlas are supported.\n- <img height=\"12\" width=\"12\" src=\"https://moorcheh.ai/Moorcheh-mcp.ico\" alt=\"Moorcheh Logo\" /> **[Moorcheh](https://github.com/moorcheh-ai/moorcheh-mcp)** - Embed, store, and search your documents, and build secure chatbots and RAG systems with Moorcheh's information-theoretic semantic search engine\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://docs.mulesoft.com/_/img/favicon.ico\" alt=\"Mulesoft Logo\" /> **[Mulesoft](https://www.npmjs.com/package/@mulesoft/mcp-server)** - Build, deploy, and manage MuleSoft applications with natural language, directly inside any compatible IDE.\n- <img height=\"12\" width=\"12\" src=\"https://www.multiplayer.app/favicon-32x32.png\" alt=\"Multiplayer Logo\" /> **[Multiplayer](https://www.multiplayer.app/docs/ai/mcp-server)** - Analyze your full stack session recordings easily. Record a bug with Multiplayer, analyze and fix it with LLM\n-  **[Nango](https://docs.nango.dev/guides/use-cases/mcp-server)** - Integrate your AI agent with 500+ APIs: Auth, custom tools, and observability. Open-source.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/38020270\" alt=\"NanoVMs Logo\" /> **[NanoVMs](https://github.com/nanovms/ops-mcp)** - Easily Build and Deploy unikernels to any cloud.\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- <img height=\"12\" width=\"12\" src=\"https://knowall.ai/favicon.ico\" alt=\"Neo4j Agent Memory Logo\" /> **[Neo4j Agent Memory](https://github.com/knowall-ai/mcp-neo4j-agent-memory)** - Memory management for AI agents using Neo4j knowledge graphs\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j GDS](https://github.com/neo4j-contrib/gds-agent)** - Neo4j graph data science server with comprehensive graph algorithms that enables complex graph reasoning and Q&A.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/183852044?s=48&v=4\" alt=\"Neon Logo\" /> **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://app.usenerve.com/favicon.ico\" alt=\"Nerve Logo\" /> **[Nerve](https://github.com/nerve-hq/nerve-mcp-server)** - Search and Act on all your company data across all your SaaS apps via [Nerve](https://www.usenerve.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.netdata.cloud/favicon-32x32.png\" alt=\"Netdata Logo\" /> **[Netdata](https://github.com/netdata/netdata/blob/master/src/web/mcp/README.md)** - Discovery, exploration, reporting and root cause analysis using all observability data, including metrics, logs, systems, containers, processes, and network connections\n- <img height=\"12\" width=\"12\" src=\"https://www.netlify.com/favicon/icon.svg\" alt=\"Netlify Logo\" /> **[Netlify](https://docs.netlify.com/welcome/build-with-ai/netlify-mcp-server/)** - Create, build, deploy, and manage your websites with Netlify web platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.thenile.dev/favicon.ico\" alt=\"Nile Logo\" /> **[Nile](https://github.com/niledatabase/nile-mcp-server)** - An MCP server that talks to Nile - Postgres re-engineered for B2B apps. Manage and query databases, tenants, users, auth using LLMs\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/208441832?s=400&v=4\" alt=\"Nodit Logo\" /> **[Nodit](https://github.com/noditlabs/nodit-mcp-server)** - Official Nodit MCP Server enabling access to multi-chain RPC Nodes and Data APIs for blockchain data.\n- <img height=\"12\" width=\"12\" src=\"https://app.norman.finance/favicons/favicon-32x32.png\" alt=\"Norman Logo\" /> **[Norman Finance](https://github.com/norman-finance/norman-mcp-server)** - MCP server for managing accounting and taxes with Norman Finance.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/4792552?s=200&v=4\" alt=\"Notion Logo\" /> **[Notion](https://github.com/makenotion/notion-mcp-server#readme)** - This project implements an MCP server for the Notion API.\n-  **[Nutrient](https://github.com/PSPDFKit/nutrient-dws-mcp-server)** - Create, Edit, Sign, Extract Documents using Natural Language\n- <img height=\"12\" width=\"12\" src=\"https://nx.dev/favicon/favicon.svg\" alt=\"Nx Logo\" /> **[Nx](https://github.com/nrwl/nx-console/blob/master/apps/nx-mcp)** - Makes [Nx's understanding](https://nx.dev/features/enhance-AI) of your codebase accessible to LLMs, providing insights into the codebase architecture, project relationships and runnable tasks thus allowing AI to make precise code suggestions.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/82347605?s=48&v=4\" alt=\"OceanBase Logo\" /> **[OceanBase](https://github.com/oceanbase/mcp-oceanbase)** - MCP Server for OceanBase database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[Octagon](https://github.com/OctagonAI/octagon-mcp-server)** - Deliver real-time investment research with extensive private and public market data.\n- <img height=\"12\" width=\"12\" src=\"https://octoeverywhere.com/img/logo.png\" alt=\"OctoEverywhere Logo\" /> **[OctoEverywhere](https://github.com/OctoEverywhere/mcp)** - A 3D Printing MCP server that allows for querying for live state, webcam snapshots, and 3D printer control.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/211697972\" alt=\"Offorte Logo\" /> **[Offorte](https://github.com/offorte/offorte-mcp-server#readme)** - Offorte Proposal Software official MCP server enables creation and sending of business proposals.\n-  **[OlaMaps](https://pypi.org/project/ola-maps-mcp-server)** - Official Ola Maps MCP Server for services like geocode, directions, place details and many more.\n- <img height=\"12\" width=\"12\" src=\"https://www.olostep.com/favicon.ico\" alt=\"Olostep\" /> **[Olostep](https://github.com/olostep/olostep-mcp-server)** - Search, scrape and crawl content from web. Real-time results in clean markdown.\n- <img height=\"12\" width=\"12\" src=\"https://static.onlyoffice.com/images/favicon.ico\" alt=\"ONLYOFFICE DocSpace\" /> **[ONLYOFFICE DocSpace](https://github.com/ONLYOFFICE/docspace-mcp)** - Interact with [ONLYOFFICE DocSpace](https://www.onlyoffice.com/docspace.aspx) API to create rooms, manage files and folders.\n- **[OMOP MCP](https://github.com/OHNLP/omop_mcp)** - Map clinical terminology to OMOP concepts using LLMs for healthcare data standardization.\n- <img height=\"12\" width=\"12\" src=\"https://op.gg/favicon.ico\" alt=\"OP.GG Logo\" /> **[OP.GG](https://github.com/opgginc/opgg-mcp)** - Access real-time gaming data across popular titles like League of Legends, TFT, and Valorant, offering champion analytics, esports schedules, meta compositions, and character statistics.\n- <img height=\"12\" width=\"12\" src=\"https://www.openfort.io/img/icon.svg\" alt=\"Openfort\" /> **[Openfort](https://github.com/openfort-xyz/mcp)** - Connect your AI to Openfort's smart wallet, auth, and project infrastructure.\n- <img height=\"12\" width=\"12\" src=\"https://open-metadata.org/favicon.ico\" alt=\"OpenMetadata\" /> **[OpenMetadata](https://open-metadata.org/mcp)** - The first Enterprise-grade MCP server for metadata\n- <img height=\"12\" width=\"12\" src=\"https://opensearch.org/wp-content/uploads/2025/01/opensearch_mark_default.svg\" alt=\"OpenSearch Logo\" /> **[OpenSearch](https://github.com/opensearch-project/opensearch-mcp-server-py)** -  MCP server that enables AI agents to perform search and analytics use cases on data stored in [OpenSearch](https://opensearch.org/).\n- <img height=\"12\" width=\"12\" src=\"https://app.opslevel.com/favicon.ico\" alt=\"OpsLevel\" /> **[OpsLevel](https://github.com/opslevel/opslevel-mcp)** - Official MCP Server for [OpsLevel](https://www.opslevel.com).\n- <img height=\"12\" width=\"12\" src=\"https://optuna.org/assets/img/favicon.ico\" alt=\"Optuna Logo\" /> **[Optuna](https://github.com/optuna/optuna-mcp)** - Official MCP server enabling seamless orchestration of hyperparameter search and other optimization tasks with [Optuna](https://optuna.org/).\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/oracle/mcp/refs/heads/main/oracle.svg\" alt=\"Oracle Logo\" /> **[Oracle](https://docs.oracle.com/en/database/oracle/sql-developer-command-line/25.2/sqcug/starting-and-managing-sqlcl-mcp-server.html#GUID-5F916B5D-8670-42BD-9F8B-D3D2424EC47E)** - Official [Oracle Database: SQLcl ](https://www.oracle.com/database/sqldeveloper/technologies/sqlcl/download/) MCP server enabling all access to any Oracle Database via native MCP support directly in SQLcl.\n- <img height=\"12\" width=\"12\" src=\"https://orshot.com/brand/favicon.svg\" alt=\"Orshot Logo\" /> **[Orshot](https://github.com/rishimohan/orshot-mcp-server)** - Official [Orshot](https://orshot.com) MCP server to dynamically generate images from custom design templates.\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://developer.paddle.com/favicon.svg\" alt=\"Paddle Logo\" /> **[Paddle](https://github.com/PaddleHQ/paddle-mcp-server)** - Interact with the Paddle API. Manage product catalog, billing and subscriptions, and reports.\n- **[PaddleOCR](https://paddlepaddle.github.io/PaddleOCR/latest/en/version3.x/deployment/mcp_server.html)** - An MCP server that brings enterprise-grade OCR and document parsing capabilities to AI applications.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.brandfolder.io/YX9ETPCP/at/266537g8kh6mmvt24jvsjb/P-GreenRGB.svg\" alt=\"PagerDuty Logo\" /> **[PagerDuty](https://github.com/PagerDuty/pagerduty-mcp-server)** - Interact with your PagerDuty account, allowing you to manage incidents, services, schedules, and more directly from your MCP-enabled client.\n- **[Pagos](https://github.com/pagos-ai/pagos-mcp)** - Interact with the Pagos API. Query Credit Card BIN Data with more to come.\n- <img height=\"12\" width=\"12\" src=\"https://paiml.com/favicon.ico\" alt=\"PAIML Logo\" /> **[PAIML MCP Agent Toolkit](https://github.com/paiml/paiml-mcp-agent-toolkit)** - Professional project scaffolding toolkit with zero-configuration AI context generation, template generation for Rust/Deno/Python projects, and hybrid neuro-symbolic code analysis.\n- <img height=\"12\" width=\"12\" src=\"https://app.paperinvest.io/favicon.svg\" alt=\"Paper Logo\" /> **[Paper](https://github.com/paperinvest/mcp-server)** - Realistic paper trading platform with market simulation, 22 broker emulations, and professional tools for risk-free trading practice. First trading platform with MCP integration.\n- **[Patronus AI](https://github.com/patronus-ai/patronus-mcp-server)** - Test, evaluate, and optimize AI agents and RAG apps\n- <img height=\"12\" width=\"12\" src=\"https://mcp.paubox.com/paubox.png\" alt=\"Paubox Logo\" />**[Paubox](https://mcp.paubox.com)** - Official MCP server which allows AI agents to interact with Paubox Email API. HITRUST certified.\n- <img height=\"12\" width=\"12\" src=\"https://www.paypalobjects.com/webstatic/icon/favicon.ico\" alt=\"PayPal Logo\" /> **[PayPal](https://mcp.paypal.com)** - PayPal's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://ww2-secure.pearl.com/static/pearl/pearl-logo.svg\" alt=\"Pearl Logo\" /> **[Pearl](https://github.com/Pearl-com/pearl_mcp_server)** - Official MCP Server to interact with Pearl API. Connect your AI Agents with 12,000+ certified experts instantly.\n- <img height=\"12\" width=\"12\" src=\"https://www.perplexity.ai/favicon.ico\" alt=\"Perplexity Logo\" /> **[Perplexity](https://github.com/ppl-ai/modelcontextprotocol)** - An MCP server that connects to Perplexity's Sonar API, enabling real-time web-wide research in conversational AI.\n- <img height=\"12\" width=\"12\" src=\"https://www.foxit.com/favicon.ico\" alt=\"Foxit Logo\" /> **[PDFActionInspector](https://github.com/foxitsoftware/PDFActionInspector/tree/develop)** - A Model Context Protocol server for extracting and analyzing JavaScript Actions from PDF files. Provides comprehensive security analysis to detect malicious PDF behaviors, hidden scripts, and potential security threats through AI-assisted risk assessment.\n- <img height=\"12\" width=\"12\" src=\"https://www.pga.com/favicon.ico\" alt=\"PGA Logo\" /> **[PGA (Golf)](https://mcp.pga.com)** - PGA's official MCP Server for all things golf-related. Find a coach, play golf, improve your game, and more.\n- <img alt=\"54333248\" height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/54333248\" /> **[Pinecone](https://github.com/pinecone-io/pinecone-mcp)** - [Pinecone](https://docs.pinecone.io/guides/operations/mcp-server)'s developer MCP Server assist developers in searching documentation and managing data within their development environment.\n- <img alt=\"54333248\" height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/54333248\" /> **[Pinecone Assistant](https://github.com/pinecone-io/assistant-mcp)** - Retrieves context from your [Pinecone Assistant](https://docs.pinecone.io/guides/assistant/mcp-server) knowledge base.\n- <img height=\"12\" width=\"12\" src=\"https://pipedream.com/favicon.ico\" alt=\"Pipedream Logo\" /> **[Pipedream](https://github.com/PipedreamHQ/pipedream/tree/master/modelcontextprotocol)** - Connect with 2,500 APIs with 8,000+ prebuilt tools.\n- <img height=\"12\" width=\"12\" src=\"https://playcanvas.com/static-assets/images/icons/favicon.png\" alt=\"PlayCanvas Logo\" /> **[PlayCanvas](https://github.com/playcanvas/editor-mcp-server)** - Create interactive 3D web apps with the PlayCanvas Editor.\n- <img height=\"12\" width=\"12\" src=\"https://playwright.dev/img/playwright-logo.ico\" alt=\"Playwright Logo\" /> **[Playwright](https://github.com/microsoft/playwright-mcp)** — Browser automation MCP server using Playwright to run tests, navigate pages, capture screenshots, scrape content, and automate web interactions reliably.\n- <img height=\"12\" width=\"12\" src=\"https://www.plugged.in/favicon.ico\" alt=\"Plugged.in Logo\" /> **[Plugged.in](https://github.com/VeriTeknik/pluggedin-mcp)** - A comprehensive proxy that combines multiple MCP servers into a single MCP. It provides discovery and management of tools, prompts, resources, and templates across servers, plus a playground for debugging when building MCP servers.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/port-labs/port-mcp-server/blob/main/assets/port_symbol_white.svg\" alt=\"Port Logo\" /> **[Port IO](https://github.com/port-labs/port-mcp-server)** - Access and manage your software catalog to improve service quality and compliance.\n- **[PostHog](https://github.com/posthog/mcp)** - Interact with PostHog analytics, feature flags, error tracking and more with the official PostHog MCP server.\n- **[Postman API](https://github.com/postmanlabs/postman-api-mcp)** - Manage your Postman resources using the [Postman API](https://www.postman.com/postman/postman-public-workspace/collection/i2uqzpp/postman-api).\n- <img height=\"12\" width=\"12\" src=\"https://powerdrill.ai/_next/static/media/powerdrill.0fa27d00.webp\" alt=\"Powerdrill Logo\" /> **[Powerdrill](https://github.com/powerdrillai/powerdrill-mcp)** - An MCP server that provides tools to interact with Powerdrill datasets, enabling smart AI data analysis and insights.\n- <img height=\"12\" width=\"12\" src=\"https://www.prisma.io/images/favicon-32x32.png\" alt=\"Prisma Logo\" /> **[Prisma](https://www.prisma.io/docs/postgres/mcp-server)** - Create and manage Prisma Postgres databases\n- <img height=\"12\" width=\"12\" src=\"https://probe.dev/favicon.ico\" alt=\"Probe.dev Logo\" /> **[Probe.dev](https://docs.probe.dev/guides/mcp-integration)** - Comprehensive media analysis and validation powered by [Probe.dev](https://probe.dev). Hosted MCP server with FFprobe, MediaInfo, and Probe Report analysis capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/FGzpihs4MxmSJhyGZ6n7f2Xj0.png\" alt=\"Prode.ai Logo\" /> **[ProdE](https://github.com/CuriousBox-AI/ProdE-mcp)** - Your 24/7 production engineer that preserves context across multiple codebases.\n- <img height=\"12\" width=\"12\" src=\"https://programintegrity.org/wp-content/uploads/2024/07/PIA-Favicon.svg\" alt=\"Program Integrity Alliance (PIA) Logo\" /> **[Program Integrity Alliance (PIA)](https://github.com/Program-Integrity-Alliance/pia-mcp-local)** - Local and Hosted MCP servers providing AI-friendly access to U.S. Government Open Datasets. Also available on [Docker MCP Catalog](https://hub.docker.com/mcp/explore?search=PIA). See [our website](https://programintegrity.org) for more details.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/newtype-01/prompthouse-mcp/raw/main/prompthouse-logo-12x12.png\" alt=\"PromptHouse Logo\" /> **[PromptHouse](https://github.com/newtype-01/prompthouse-mcp)** - Personal prompt library with MCP integration for AI clients.\n- <img height=\"12\" width=\"12\" src=\"https://docs.speedscale.com/img/favicon.ico\" alt=\"proxymock Logo\" /> **[proxymock](https://docs.speedscale.com/proxymock/reference/mcp/)** - An MCP server that automatically generates tests and mocks by recording a live app.\n- <img src=\"https://www.pubnub.com/favicon/favicon-32x32.png\" alt=\"PubNub\" width=\"12\" height=\"12\"> **[PubNub](https://github.com/pubnub/pubnub-mcp-server)** - Retrieves context for developing with PubNub SDKs and calling APIs.\n- <img height=\"12\" width=\"12\" src=\"https://www.pulumi.com/images/favicon.ico\" alt=\"Pulumi Logo\" /> **[Pulumi](https://github.com/pulumi/mcp-server)** - Deploy and manage cloud infrastructure using [Pulumi](https://pulumi.com).\n- <img height=\"12\" width=\"12\" src=\"https://pure.md/favicon.png\" alt=\"Pure.md Logo\" /> **[Pure.md](https://github.com/puremd/puremd-mcp)** - Reliably access web content in markdown format with [pure.md](https://pure.md) (bot detection avoidance, proxy rotation, and headless JS rendering built in).\n- <img height=\"12\" width=\"12\" src=\"https://put.io/images/favicon.ico\" alt=\"Put.io Logo\" /> **[Put.io](https://github.com/putdotio/putio-mcp-server)** - Interact with your Put.io account to download torrents.\n- <img alt=\"logomark\" height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- <img src=\"https://api.qoretechnologies.com/api/public/apps/Qorus/qorus-logo.svg\" alt=\"Qorus\" width=\"12\" height=\"12\"> **[Qorus](https://qoretechnologies.com/manual/qorus/current/qorus/sysarch.html#mcp_server)** - Connect to any application, system, or technology and automate your business processes without coding and with AI\n- <img src=\"https://avatars.githubusercontent.com/u/18053493?s=200&v=4\" alt=\"Qonto\" width=\"12\" height=\"12\"> **[Qonto](https://github.com/qonto/qonto-mcp-server)** - Access and interact your Qonto account through LLMs using MCP.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/3912814\" alt=\"QuantConnect Logo\" /> **[QuantConnect](https://github.com/QuantConnect/mcp-server)** - Interact with your [QuantConnect](https://www.quantconnect.com/) account to update projects, write strategies, run backtest, and deploying strategies to production live-trading.\n- **[Quickchat AI](https://github.com/incentivai/quickchat-ai-mcp)** - Launch your conversational [Quickchat AI](https://quickchat.ai) agent as an MCP to give AI apps real-time access to its Knowledge Base and conversational capabilities\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/165178062\" alt=\"Ragie Logo\" /> **[Ragie](https://github.com/ragieai/ragie-mcp-server/)** - Retrieve context from your [Ragie](https://www.ragie.ai) (RAG) knowledge base connected to integrations like Google Drive, Notion, JIRA and more.\n- <img alt=\"favicon\" height=\"12\" width=\"12\" src=\"https://www.ramp.com/favicon.ico\" /> **[Ramp](https://github.com/ramp-public/ramp-mcp)** - Interact with [Ramp](https://ramp.com)'s Developer API to run analysis on your spend and gain insights leveraging LLMs\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/CU1m0xFonUl76ZeaW0IdkQ0M.png\" alt=\"Razorpay Logo\" /> **[Razorpay](https://github.com/razorpay/razorpay-mcp-server)** - Razorpay's official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://www.recraft.ai/favicons/icon.svg\" alt=\"Recraft Logo\" /> **[Recraft](https://github.com/recraft-ai/mcp-recraft-server)** - Generate raster and vector (SVG) images using [Recraft](https://recraft.ai). Also you can edit, upscale images, create your own styles, and vectorize raster images\n- <img height=\"12\" width=\"12\" src=\"https://www.redhat.com/favicon.ico\" alt=\"Red Hat Logo\" /> **[Red Hat Insights](https://github.com/RedHatInsights/insights-mcp)** - Interact with [Red Hat Insights](https://www.redhat.com/en/technologies/management/insights) - build images, manage vulnerabilities, or view targeted recommendations.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1529926\" alt=\"Redis Logo\" /> **[Redis](https://github.com/redis/mcp-redis/)** - The Redis official MCP Server offers an interface to manage and search data in Redis.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1529926\" alt=\"Redis Logo\" /> **[Redis Cloud API](https://github.com/redis/mcp-redis-cloud/)** - The Redis Cloud API MCP Server allows you to manage your Redis Cloud resources using natural language.\n- <img src=\"https://avatars.githubusercontent.com/u/149024635\" alt=\"Reexpress\" width=\"12\" height=\"12\"> **[Reexpress](https://github.com/ReexpressAI/reexpress_mcp_server)** - Enable Similarity-Distance-Magnitude statistical verification for your search, software, and data science workflows\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/68a872edf3df6064de547670/68b7f089c45a6083ce25acb1_reflag-favicon-32.png\" alt=\"Reflag\" /> **[Reflag](https://github.com/reflagcom/javascript/tree/main/packages/cli#model-context-protocol)** - Create and manage feature flags using [Reflag](https://reflag.com)\n- <img height=\"12\" width=\"12\" src=\"https://www.reltio.com/wp-content/uploads/2024/03/cropped-cropped-Reltio_Light_Mode_Dark_Mode_Favicon-270x270.png\" alt=\"Reltio Logo\" /> **[Reltio](https://github.com/reltio-ai/reltio-mcp-server)** - A lightweight, plugin-based MCP server designed to perform advanced entity matching with language models in Reltio environments.\n- <img height=\"12\" width=\"12\" src=\"https://www.rember.com/favicon.ico\" alt=\"Rember Logo\" /> **[Rember](https://github.com/rember/rember-mcp)** - Create spaced repetition flashcards in [Rember](https://rember.com) to remember anything you learn in your chats\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/114033652\" alt=\"Render Logo\" /> **[Render](https://render.com/docs/mcp-server)** - The official Render MCP server: spin up new services, run queries against your databases, and debug rapidly with direct access to service metrics and logs.\n- <img height=\"12\" width=\"12\" src=\"https://reportportal.io/favicon.ico\" alt=\"ReportPortal Logo\" /> **[ReportPortal](https://github.com/reportportal/reportportal-mcp-server)** - explore and analyze automated test results from [ReportPortal](https://reportportal.io) using your favourite LLM.\n- <img height=\"12\" width=\"12\" src=\"http://nonica.io/Nonica-logo.ico\" alt=\"Nonica Logo\" /> **[Revit](https://github.com/NonicaTeam/AI-Connector-for-Revit)** - Connect and interact with your Revit models live.\n- <img height=\"12\" width=\"12\" src=\"https://ui.rilldata.com/favicon.png\" alt=\"Rill Data Logo\" /> **[Rill Data](https://docs.rilldata.com/explore/mcp)** - Interact with Rill Data to query and analyze your data.\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.foundation.roblox.com/current/RobloxStudio.ico\" alt=\"Roblox Studio\" /> **[Roblox Studio](https://github.com/Roblox/studio-rust-mcp-server)** - Roblox Studio MCP Server, create and manipulate scenes, scripts in Roblox Studio\n- <img src=\"https://hyper3d.ai/favicon.ico\" alt=\"Rodin\" width=\"12\" height=\"12\"> **[Rodin](https://github.com/DeemosTech/rodin-api-mcp)** - Generate 3D Models with [Hyper3D Rodin](https://hyper3d.ai)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/66b7de6a233c04f4dac200a6/66bed52680d689629483c18b_faviconV2%20(2).png\" alt=\"Root Signals Logo\" /> **[Root Signals](https://github.com/root-signals/root-signals-mcp)** - Improve and quality control your outputs with evaluations using LLM-as-Judge\n- **[Routine](https://github.com/routineco/mcp-server)** - MCP server to interact with [Routine](https://routine.co/): calendars, tasks, notes, etc.\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\"> **[Rube](https://github.com/ComposioHQ/Rube)** - Rube is a Model Context Protocol (MCP) server that connects your AI tools to 500+ apps like Gmail, Slack, GitHub, and Notion. Simply install it in your AI client, authenticate once with your apps, and start asking your AI to perform real actions like \"Send an email\" or \"Create a task.\"\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/safedep/.github/refs/heads/main/assets/logo/1.png\" alt=\"SafeDep Logo\" /> **[SafeDep](https://github.com/safedep/vet/blob/main/docs/mcp.md)** - SafeDep `vet-mcp` helps in  vetting open source packages for security risks—such as vulnerabilities and malicious code—before they're used in your project, especially with AI-generated code suggestions.\n- <img height=\"12\" width=\"12\" src=\"https://waf-ce.chaitin.cn/favicon.ico\" alt=\"SafeLine Logo\" /> **[SafeLine](https://github.com/chaitin/SafeLine/tree/main/mcp_server)** - [SafeLine](https://safepoint.cloud/landing/safeline) is a self-hosted WAF(Web Application Firewall) to protect your web apps from attacks and exploits.\n- <img height=\"12\" width=\"12\" src=\"https://scrapi.tech/favicon.ico\" alt=\"ScrAPI Logo\" /> **[ScrAPI](https://github.com/DevEnterpriseSoftware/scrapi-mcp)** - Web scraping using [ScrAPI](https://scrapi.tech). Extract website content that is difficult to access because of bot detection, captchas or even geolocation restrictions.\n- <img height=\"12\" width=\"12\" src=\"https://upnorthmedia.co/favicon.ico\" alt=\"Up North Media Logo\" /> **[ScreenshotMCP](https://github.com/upnorthmedia/ScreenshotMCP/)** - A Model Context Protocol MCP server for capturing website screenshots with full page, element, and device size features.\n- <img height=\"12\" width=\"12\" src=\"https://screenshotone.com/favicon.ico\" alt=\"ScreenshotOne Logo\" /> **[ScreenshotOne](https://github.com/screenshotone/mcp/)** - Render website screenshots with [ScreenshotOne](https://screenshotone.com/)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" alt=\"Search1API Logo\" /> **[Search1API](https://github.com/fatwang2/search1api-mcp)** - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://www.searchunify.com/favicon.ico\" alt=\"SearchUnify Logo\" /> **[SearchUnify](https://github.com/searchunify/su-mcp/)** - SearchUnify MCP Server (su-mcp) enables seamless integration of SearchUnify with Claude Desktop\n- <img height=\"12\" width=\"12\" src=\"https://secureframe.com/favicon.ico\" alt=\"Secureframe Logo\" /> **[Secureframe](https://github.com/secureframe/secureframe-mcp-server)** - Query security controls, monitor compliance tests, and access audit data across SOC 2, ISO 27001, CMMC, FedRAMP, and other frameworks from [Secureframe](https://secureframe.com).\n- <img height=\"12\" width=\"12\" src=\"https://semgrep.dev/favicon.ico\" alt=\"Semgrep Logo\" /> **[Semgrep](https://github.com/semgrep/mcp)** - Enable AI agents to secure code with [Semgrep](https://semgrep.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/187640573?s=48&v=4\" alt=\"Sequa Logo\" /> **[Sequa.AI](https://github.com/sequa-ai/sequa-mcp)** - Stop stitching context for Copilot and Cursor. With [Sequa MCP](https://github.com/sequa-ai/sequa-mcp), your AI tools know all your codebases and docs out of the box.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6372338e5477e047032b37a5/64f85e6388a2a5c8c9525b4d_favLogo.png\" alt=\"Shortcut Logo\" /> **[Shortcut](https://github.com/useshortcut/mcp-server-shortcut)** - Access and implement all of your projects and tasks (Stories) from [Shortcut](https://shortcut.com/).\n- <img alt=\"favicon_32x32_png_v_277b9cbbe31e8bc416504cf3b902d430\" height=\"12\" width=\"12\" src=\"https://www.singlestore.com/favicon-32x32.png?v=277b9cbbe31e8bc416504cf3b902d430\"/> **[SingleStore](https://github.com/singlestore-labs/mcp-server-singlestore)** - Interact with the SingleStore database platform\n- <img height=\"12\" width=\"12\" src=\"https://smartbear.com/smartbear/assets/img/favicon.png\" alt=\"SmartBear Logo\" /> **[SmartBear](https://github.com/SmartBear/smartbear-mcp)** - Provides access to multiple capabilities across SmartBear's API Hub, Test Hub, and Insight Hub, all through [dedicated tools and resources](https://developer.smartbear.com/smartbear-mcp/docs/mcp-server).\n- <img src=\"https://smooth-operator.online/logo48.png\" alt=\"Smooth Operator\" width=\"12\" height=\"12\"> **[Smooth Operator](https://smooth-operator.online/agent-tools-api-docs/toolserverdocs)** - Tools to automate Windows via AI Vision, Mouse, Keyboard, Automation Trees, Webbrowser\n- <img height=\"12\" width=\"12\" src=\"https://app.snyk.io/bundle/favicon-faj49uD9.png\" alt=\"Snyk Logo\" /> **[Snyk](https://github.com/snyk/snyk-ls/blob/main/mcp_extension/README.md)** - Enhance security posture by embedding [Snyk](https://snyk.io/) vulnerability scanning directly into agentic workflows.\n- <img height=\"12\" width=\"12\" src=\"https://www.sonarsource.com/favicon.ico\" alt=\"SonarQube Logo\" /> **[SonarQube](https://github.com/SonarSource/sonarqube-mcp-server)** - Enables seamless integration with [SonarQube](https://www.sonarsource.com/) Server or Cloud and allows for code snippet analysis within the agent context.\n- <img src=\"https://sophtron.com/favicon.ico\" alt=\"Sophtron\" width=\"12\" height=\"12\"> **[Sophtron](https://github.com/sophtron/Sophtron-Integration/tree/main/modelcontextprotocol)** - Connect to your bank, credit card, utilities accounts to retrieve account balances and transactions with [Sophtron Bank Integration](https://sophtron.com).\n- <img height=\"12\" width=\"12\" src=\"https://www.stackhawk.com/wp-content/uploads/2025/03/icon-512x512-2-150x150.png\" alt=\"StackHawk Logo\" /> **[StackHawk](https://github.com/stackhawk/stackhawk-mcp)** - Use [StackHawk](https://www.stackhawk.com/) to test for and FIX security problems in your code or vibe coded app.\n- <img height=\"12\" width=\"12\" src=\"https://www.starrocks.io/favicon.ico\" alt=\"StarRocks Logo\" /> **[StarRocks](https://github.com/StarRocks/mcp-server-starrocks)** - Interact with [StarRocks](https://www.starrocks.io/)\n- <img height=\"12\" width=\"12\" src=\"https://downloads.steadybit.com/logomark.svg\" alt=\"Steadybit Logo\" /> **[Steadybit](https://github.com/steadybit/mcp)** - Interact with [Steadybit](https://www.steadybit.com/)\n- <img height=\"12\" width=\"12\" src=\"https://steuerboard.net/favicon.ico\" alt=\"Steuerboard Logo\" /> **[Steuerboard](https://github.com/steuerboard/steuerboard-mcp-typescript)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/22632046?s=200&v=4\" alt=\"Storybook Logo\" /> **[Storybook](https://github.com/storybookjs/addon-mcp)** - Interact with [Storybook](https://storybook.js.org/) to automate UI component testing and documentation\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://sunra.ai/favicon.ico\" alt=\"Sunra AI Logo\" /> **[Sunra AI](https://github.com/sunra-ai/sunra-clients/tree/main/mcp-server)** - Search for and run AI models on [Sunra.ai](https://sunra.ai). Discover models, create video, image, and 3D model content, track their status, and manage the generated media.\n- <img height=\"12\" width=\"12\" src=\"https://supabase.com/favicon/favicon.ico\" alt=\"Supabase Logo\" /> **[Supabase](https://github.com/supabase-community/supabase-mcp)** - Interact with Supabase: Create tables, query data, deploy edge functions, and more.\n- <img height=\"12\" width=\"12\" src=\"https://supadata.ai/favicon.ico\" alt=\"Supadata Logo\" /> **[Supadata](https://github.com/supadata-ai/mcp)** - Official MCP server for [Supadata](https://supadata.ai) - YouTube, TikTok, X and Web data for makers.\n- <img height=\"12\" width=\"12\" src=\"https://d12w4pyrrczi5e.cloudfront.net/archive/50eb154ab859c63a8f1c850f9fe094e25d35e929/images/favicon.ico\" alt=\"Tako Logo\" /> **[Tako](https://github.com/TakoData/tako-mcp)** - Use natural language to search [Tako](https://trytako.com) for real-time financial, sports, weather, and public data with visualization\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/10522416?s=200&v=4\" alt=\"Telnyx Logo\" /> **[Telnyx](https://github.com/team-telnyx/telnyx-mcp-server)** - Official MCP server for building AI-powered communication apps. Create voice assistants, send SMS campaigns, manage phone numbers, and integrate real-time messaging with enterprise-grade reliability. Includes remote [streamable-http](https://api.telnyx.com/v2/mcp) and [sse](https://api.telnyx.com/mcp/sse) servers.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1615979?s=200&v=4\" alt=\"Teradata Logo\" /> **[Teradata](https://github.com/Teradata/teradata-mcp-server)** - This MCP Server support tools and prompts for multi task data analytics on a [Teradata](https://teradata.com) platform.\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/hashicorp/terraform-mcp-server/main/public/images/Terraform-LogoMark_onDark.svg\" alt=\"Terraform Logo\" /> **[Terraform](https://github.com/hashicorp/terraform-mcp-server)** - Seamlessly integrate with Terraform ecosystem, enabling advanced automation and interaction capabilities for Infrastructure as Code (IaC) development powered by [Terraform](https://www.hashicorp.com/en/products/terraform)\n- <img height=\"12\" width=\"12\" src=\"https://www.textin.com/favicon.png\" alt=\"TextIn Logo\" /> **[TextIn](https://github.com/intsig-textin/textin-mcp)** - An MCP server for the [TextIn](https://www.textin.com/?from=github_mcp) API, is a tool for extracting text and performing OCR on documents, it also supports converting documents into Markdown\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/106156665?s=200\" alt=\"Thena Logo\" /> **[Thena](https://mcp.thena.ai)** - Thena's MCP server for enabling users and AI agents to interact with Thena's services and manage customers across different channels such as Slack, Email, Web, Discord etc.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/24291394?v=4\" alt=\"ThingsBoard\" /> **[ThingsBoard](https://github.com/thingsboard/thingsboard-mcp)** - The ThingsBoard MCP Server provides a natural language interface for LLMs and AI agents to interact with your ThingsBoard IoT platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.lg.com/favicon.ico\" alt=\"ThinQ Logo\" /> **[ThinQ Connect](https://github.com/thinq-connect/thinqconnect-mcp)** - Interact with LG ThinQ smart home devices and appliances through the ThinQ Connect MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://thirdweb.com/favicon.ico\" alt=\"Thirdweb Logo\" /> **[Thirdweb](https://github.com/thirdweb-dev/ai/tree/main/python/thirdweb-mcp)** - Read/write to over 2k blockchains, enabling data querying, contract analysis/deployment, and transaction execution, powered by [Thirdweb](https://thirdweb.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.thoughtspot.com/favicon-16x16.png\" alt=\"ThoughtSpot Logo\" /> **[ThoughtSpot](https://github.com/thoughtspot/mcp-server)** - AI is the new BI. A dedicated data analyst for everyone on your team. Bring [ThoughtSpot](https://thoughtspot.com) powers into Claude or any MCP host.\n- <img height=\"12\" width=\"12\" src=\"https://tianji.msgbyte.com/img/dark-brand.svg\" alt=\"Tianji Logo\" /> **[Tianji](https://github.com/msgbyte/tianji/tree/master/apps/mcp-server)** - Interact with Tianji platform whatever selfhosted or cloud platform, powered by [Tianji](https://tianji.msgbyte.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.pingcap.com/favicon.ico\" alt=\"TiDB Logo\" /> **[TiDB](https://github.com/pingcap/pytidb)** - MCP Server to interact with TiDB database platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://b2729162.smushcdn.com/2729162/wp-content/uploads/2023/10/cropped-Favicon-1-192x192.png?lossy=1&strip=1&webp=1\" alt=\"Tldv Logo\" /> **[Tldv](https://gitlab.com/tldv/tldv-mcp-server)** - Connect your AI agents to Google-Meet, Zoom & Microsoft Teams through [tl;dv](https://tldv.io)\n- <img height=\"12\" width=\"12\" src=\"https://www.todoist.com/static/favicon-32x32.png\" alt=\"Todoist Logo\" /> **[Todoist](https://github.com/doist/todoist-ai)** - Search, add, and update [Todoist](https://todoist.com) tasks, projects, sections, comments, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.tokenmetrics.com/logo.svg\" alt=\"Token Metrics Logo\" /> **[Token Metrics](https://github.com/token-metrics/mcp)** - [Token Metrics](https://www.tokenmetrics.com/) integration for fetching real-time crypto market data, trading signals, price predictions, and advanced analytics.\n- <img height=\"12\" width=\"12\" src=\"https://di8m9w6rqrh5d.cloudfront.net/2G3TRwfv1w3GTLfmT7Dmco1VddoFTI5P/1920_6b7e7ec2-d897-4cd7-94f3-46a8301212c3.png\" alt=\"TomTom Logo\" /> **[TomTom-MCP](https://github.com/tomtom-international/tomtom-mcp)** - The [TomTom](https://www.tomtom.com/) MCP Server simplifies geospatial development by providing seamless access to TomTom's location services, including search, routing, traffic and static maps data.\n- <img height=\"12\" width=\"12\" src=\"https://images.thetradeagent.ai/trade_agent/logo.svg\" alt=\"Trade Agent Logo\" /> **[Trade Agent](https://github.com/Trade-Agent/trade-agent-mcp)** - Execute stock and crypto trades on your brokerage via [Trade Agent](https://thetradeagent.ai)\n-  **[Twelve Data](https://github.com/twelvedata/mcp)** — Integrate your AI agents with real-time and historical financial market data through our official [Twelve Data](https://twelvedata.com) MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.twilio.com/content/dam/twilio-com/core-assets/social/favicon-16x16.png\" alt=\"Twilio Logo\" /> **[Twilio](https://github.com/twilio-labs/mcp)** - Interact with [Twilio](https://www.twilio.com/en-us) APIs to send SMS messages, manage phone numbers, configure your account, and more.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/91520705?s=48&v=4\" alt=\"Tencent RTC Logo\" /> **[Tencent RTC](https://github.com/Tencent-RTC/mcp)** - The MCP Server enables AI IDEs to more effectively understand and use [Tencent's Real-Time Communication](https://trtc.io/) SDKs and APIs, which significantly streamlines the process for developers to build audio/video call applications.\n- <img height=\"12\" width=\"12\" src=\"https://uberall.com/media/favicon.svg\" alt=\"Uberall Logo\" /> **[Uberall](https://github.com/uberall/uberall-mcp-server)** – Manage multi - location presence, including listings, reviews, and social posting, via [uberall](https://uberall.com).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/91906527\" alt=\"Unblocked Logo\" /> **[Unblocked](https://docs.getunblocked.com/unblocked-mcp)** Help your AI-powered IDEs generate faster, more accurate code by giving them access to context from Slack, Confluence, Google Docs, JIRA, and more with [Unblocked](https://getunblocked.com).\n- <img height=\"12\" width=\"12\" src=\"https://unifai.network/favicon.ico\" alt=\"UnifAI Logo\" /> **[UnifAI](https://github.com/unifai-network/unifai-mcp-server)** - Dynamically search and call tools using [UnifAI Network](https://unifai.network)\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/plcQevjrOYnyriuGw90NfQBPoQ.jpg\" alt=\"Unstructured Logo\" /> **[Unstructured](https://github.com/Unstructured-IO/UNS-MCP)** - Set up and interact with your unstructured data processing workflows in [Unstructured Platform](https://unstructured.io)\n- <img height=\"12\" width=\"12\" src=\"https://upstash.com/icons/favicon-32x32.png\" alt=\"Upstash Logo\" /> **[Upstash](https://github.com/upstash/mcp-server)** - Manage Redis databases and run Redis commands on [Upstash](https://upstash.com/) with natural language.\n-  **[Vantage](https://github.com/vantage-sh/vantage-mcp-server)** - Interact with your organization's cloud cost spend.\n- <img height=\"12\" width=\"12\" src=\"https://mcp.variflight.com/favicon.ico\" alt=\"VariFlight Logo\" /> **[VariFlight](https://github.com/variflight/variflight-mcp)** - VariFlight's official MCP server provides tools to query flight information, weather data, comfort metrics, the lowest available fares, and other civil aviation-related data.\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[VCAgents](https://github.com/OctagonAI/octagon-vc-agents)** - Interact with investor agents—think Wilson or Thiel—continuously updated with market intel.\n- **[Vectorize](https://github.com/vectorize-io/vectorize-mcp-server/)** - [Vectorize](https://vectorize.io) MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.\n- <img height=\"12\" width=\"12\" src=\"https://static.verbwire.com/favicon-16x16.png\" alt=\"Verbwire Logo\" /> **[Verbwire](https://github.com/verbwire/verbwire-mcp-server)** - Deploy smart contracts, mint NFTs, manage IPFS storage, and more through the Verbwire API\n- <img height=\"12\" width=\"12\" src=\"http://vercel.com/favicon.ico\" alt=\"Vercel Logo\" /> **[Vercel](https://vercel.com/docs/mcp/vercel-mcp)** - Access logs, search docs, and manage projects and deployments.\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n- <img height=\"12\" width=\"12\" src=\"https://www.veyrax.com/favicon.ico\" alt=\"VeyraX Logo\" /> **[VeyraX](https://github.com/VeyraX/veyrax-mcp)** - Single tool to control all 100+ API integrations, and UI components\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/174736222?s=200&v=4\" alt=\"VictoriaMetrics Logo\" /> **[VictoriaMetrics](https://github.com/VictoriaMetrics-Community/mcp-victoriametrics)** - Comprehensive integration with [VictoriaMetrics APIs](https://docs.victoriametrics.com/victoriametrics/url-examples/) and [documentation](https://docs.victoriametrics.com/) for monitoring, observability, and debugging tasks related to your VictoriaMetrics instances.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/ijlYG00LOcMD6zR1XLMxHbAwZkM.png\" alt=\"VideoDB Director\" /> **[VideoDB Director](https://github.com/video-db/agent-toolkit/tree/main/modelcontextprotocol)** - Create AI-powered video workflows including automatic editing, content moderation, voice cloning, highlight generation, and searchable video moments—all accessible via simple APIs and intuitive chat-based interfaces.\n- <img height=\"12\" width=\"12\" src=\"https://landing.ai/wp-content/uploads/2024/04/cropped-favicon-192x192.png\" alt=\"LandingAI VisionAgent\" /> **[VisionAgent MCP](https://github.com/landing-ai/vision-agent-mcp)** - A simple MCP server that enables your LLM to better reason over images, video and documents.\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/mckinsey/vizro/main/vizro-core/docs/assets/images/favicon.png\" alt=\"Vizro Logo\" /> **[Vizro](https://github.com/mckinsey/vizro/tree/main/vizro-mcp)** - Tools and templates to create validated and maintainable data charts and dashboards\n- <img height=\"12\" width=\"12\" src=\"https://wavespeed.ai/logo.webp\" alt=\"WaveSpeed Logo\" /> **[WaveSpeed](https://github.com/WaveSpeedAI/mcp-server)** - WaveSpeed MCP server providing AI agents with image and video generation capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://waystation.ai/images/logo.svg\" alt=\"WayStation Logo\" /> **[WayStation](https://github.com/waystation-ai/mcp)** - Universal MCP server to connect to popular productivity tools such as Notion, Monday, AirTable, and many more\n- <img height=\"12\" width=\"12\" src=\"https://static.whatsapp.net/rsrc.php/v3/yz/r/ujTY9i_Jhs1.png\" alt=\"WhatsApp Business Logo\" /> **[WhatsApp Business](https://medium.com/@wassenger/introducing-whatsapp-mcp-ai-connector-3d393b52d1b0)** - WhatsApp Business MCP connector enabling AI agents to send messages, manage conversations, access templates, and integrate with WhatsApp Business API for automated customer communication.\n- <img height=\"12\" width=\"12\" src=\"https://www.webflow.com/favicon.ico\" alt=\"Webflow Logo\"> **[Webflow](https://github.com/webflow/mcp-server)** - Interact with Webflow sites, pages, and collections\n- <img height=\"12\" width=\"12\" src=\"https://webscraping.ai/favicon.ico\" alt=\"WebScraping.AI Logo\" /> **[WebScraping.AI](https://github.com/webscraping-ai/webscraping-ai-mcp-server)** - Interact with **[WebScraping.AI](https://WebScraping.AI)** for web data extraction and scraping\n- <img height=\"12\" width=\"12\" src=\"https://winston-app-production-public.s3.us-east-1.amazonaws.com/winston-ai-favicon-light.svg\" alt=\"Winston.AI Logo\" /> **[Winston AI](https://github.com/gowinston-ai/winston-ai-mcp-server)** - AI detector MCP server with industry leading accuracy rates in detecting use of AI in text and images. The [Winston AI](https://gowinston.ai) MCP server also offers a robust plagiarism checker to help maintain integrity.\n- <img height=\"12\" width=\"12\" src=\"https://www.xero.com/favicon.ico\" alt=\"Xero Logo\" /> **[Xero](https://github.com/XeroAPI/xero-mcp-server)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://storage.yandexcloud.net/ydb-www-prod-site-assets/favicon-202305/favicon.ico\" alt=\"YDB Logo\" /> **[YDB](https://github.com/ydb-platform/ydb-mcp)** - Query [YDB](https://ydb.tech/) databases\n- <img height=\"12\" width=\"12\" src=\"https://fe-resource.yeelight.com/logo-black.jpeg\" alt=\"Yeelight Logo\" /> **[Yeelight MCP Server](https://github.com/Yeelight/yeelight-iot-mcp)** - The official [Yeelight MCP Server](https://github.com/Yeelight/yeelight-iot-mcp) enables users to control and query their [Yeelight](https://en.yeelight.com/) smart devices using natural language, offering a seamless and efficient human-AI interaction experience.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/632cd328ed2b485519c3f689/6334977a5d1a542102d4b9b5_favicon-32x32.png\" alt=\"YepCode Logo\" /> **[YepCode](https://github.com/yepcode/mcp-server-js)** - Run code in a secure, scalable sandbox environment with full support for dependencies, secrets, logs, and access to APIs or databases. Powered by [YepCode](https://yepcode.io)\n- <img height=\"12\" width=\"12\" src=\"https://www.yugabyte.com/favicon-16x16.png\" alt=\"YugabyteDB Logo\" /> **[YugabyteDB](https://github.com/yugabyte/yugabytedb-mcp-server)** -  MCP Server to interact with your [YugabyteDB](https://www.yugabyte.com/) database\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/14069894\" alt=\"Yunxin Logo\" /> **[Yunxin](https://github.com/netease-im/yunxin-mcp-server)** - An MCP server that connects to Yunxin's IM/RTC/DATA Open-API\n- <img height=\"12\" width=\"12\" src=\"https://cdn.zapier.com/zapier/images/favicon.ico\" alt=\"Zapier Logo\" /> **[Zapier](https://zapier.com/mcp)** - Connect your AI Agents to 8,000 apps instantly.\n- <img height=\"12\" width=\"12\" src=\"https://www.zenable.app/zenable_light.svg\" alt=\"Zenable Logo\" /> **[Zenable](https://docs.zenable.io/integrations/mcp/getting-started)** - Clean up sloppy AI code and prevent vulnerabilities\n- **[ZenML](https://github.com/zenml-io/mcp-zenml)** - Interact with your MLOps and LLMOps pipelines through your [ZenML](https://www.zenml.io) MCP server\n- <img height=\"12\" width=\"12\" src=\"https://www.zine.ai/images/zine-logo.png\" alt=\"Zine Logo\" /> **[Zine](https://www.zine.ai)** - Your memory, everywhere AI goes. Think iPhoto for your knowledge - upload and curate. Like ChatGPT but portable - context that travels with you.\n- <img height=\"12\" width=\"12\" src=\"https://zizai.work/images/logo.jpg\" alt=\"ZIZAI Logo\" /> **[ZIZAI Recruitment](https://github.com/zaiwork/mcp)** - Interact with the next-generation intelligent recruitment platform for employees and employers, powered by [ZIZAI Recruitment](https://zizai.work).\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> [!NOTE]\n> Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[1mcpserver](https://github.com/particlefuture/1mcpserver)** - MCP of MCPs. Automatically discover, configure, and add MCP servers on your local machine.\n- **[1Panel](https://github.com/1Panel-dev/mcp-1panel)** - MCP server implementation that provides 1Panel interaction.\n- **[A2A](https://github.com/GongRzhe/A2A-MCP-Server)** - An MCP server that bridges the Model Context Protocol (MCP) with the Agent-to-Agent (A2A) protocol, enabling MCP-compatible AI assistants (like Claude) to seamlessly interact with A2A agents.\n- **[Ableton Live](https://github.com/Simon-Kansara/ableton-live-mcp-server)** - an MCP server to control Ableton Live.\n- **[Ableton Live](https://github.com/ahujasid/ableton-mcp)** (by ahujasid) - Ableton integration allowing prompt enabled music creation.\n- **[Actor Critic Thinking](https://github.com/aquarius-wing/actor-critic-thinking-mcp)** - Actor-critic thinking for performance evaluation\n- **[Adobe Commerce](https://github.com/rafaelstz/adobe-commerce-dev-mcp)** — MCP to interact with Adobe Commerce GraphQL API, including orders, products, customers, etc.\n- **[ADR Analysis](https://github.com/tosin2013/mcp-adr-analysis-server)** - AI-powered Architectural Decision Records (ADR) analysis server that provides architectural insights, technology stack detection, security checks, and TDD workflow enhancement for software development projects.\n- **[AgentBay](https://github.com/Michael98671/agentbay)** - An MCP server for providing serverless cloud infrastructure for AI agents.\n- **[AgentMode](https://www.agentmode.app)** - Connect to dozens of databases, data warehouses, Github & more, from a single MCP server.  Run the Docker image locally, in the cloud, or on-premise.\n- **[AI Agent Marketplace Index](https://github.com/AI-Agent-Hub/ai-agent-marketplace-index-mcp)** - MCP server to search more than 5000+ AI agents and tools of various categories from [AI Agent Marketplace Index](http://www.deepnlp.org/store/ai-agent) and monitor traffic of AI Agents.\n- **[AI Tasks](https://github.com/jbrinkman/valkey-ai-tasks)** - Let the AI manage complex plans with integrated task management and tracking tools. Supports STDIO, SSE and Streamable HTTP transports.\n- **[ai-Bible](https://github.com/AdbC99/ai-bible)** - Search the bible reliably and repeatably [ai-Bible Labs](https://ai-bible.com)\n- **[Airbnb](https://github.com/openbnb-org/mcp-server-airbnb)** - Provides tools to search Airbnb and get listing details.\n- **[Airflow](https://github.com/yangkyeongmo/mcp-server-apache-airflow)** - An MCP Server that connects to [Apache Airflow](https://airflow.apache.org/) using official python client.\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[Algorand](https://github.com/GoPlausible/algorand-mcp)** - A comprehensive MCP server for tooling interactions (40+) and resource accessibility (60+) plus many useful prompts for interacting with the Algorand blockchain.\n- **[Amadeus](https://github.com/donghyun-chae/mcp-amadeus)** (by donghyun-chae) - An MCP server to access, explore, and interact with Amadeus Flight Offers Search API for retrieving detailed flight options, including airline, times, duration, and pricing data.\n- **[Amazon Ads](https://github.com/MarketplaceAdPros/amazon-ads-mcp-server)** - MCP Server that provides interaction capabilities with Amazon Advertising through [MarketplaceAdPros](https://marketplaceadpros.com)/\n- **[AniList](https://github.com/yuna0x0/anilist-mcp)** (by yuna0x0) - An MCP server to interact with AniList API, allowing you to search for anime and manga, retrieve user data, and manage your watchlist.\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Anki](https://github.com/nietus/anki-mcp)** - MCP server to run locally with Anki and Ankiconnect. Supports creating, updating, searching and filtering cards and decks. Include mass update and other advanced tools.\n- **[AntV Chart](https://github.com/antvis/mcp-server-chart)** - A Model Context Protocol server for generating 15+ visual charts using [AntV](https://github.com/antvis).\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[Apache Gravitino(incubating)](https://github.com/datastrato/mcp-server-gravitino)** - Allow LLMs to explore metadata of structured data and unstructured data with Gravitino, and perform data governance tasks including tagging/classification.\n- **[API Lab MCP](https://github.com/atototo/api-lab-mcp)** - Transform Claude into your AI-powered API testing laboratory. Test, debug, and document APIs through natural conversation with authentication support, response validation, and performance metrics.\n- **[APIWeaver](https://github.com/GongRzhe/APIWeaver)** - An MCP server that dynamically creates MCP  servers from web API configurations. This allows you to easily integrate any REST API, GraphQL endpoint, or web service into an MCP-compatible tool that can be used by AI assistants like Claude.\n- **[Apollo IO MCP Server](https://github.com/AgentX-ai/apollo-io-mcp-server)** - apollo.io mcp server. Get/enrich contact data for people and organizations agentically.\n- **[Apple Books](https://github.com/vgnshiyer/apple-books-mcp)** - Interact with your library on Apple Books, manage your book collection, summarize highlights, notes, and much more.\n- **[Apple Calendar](https://github.com/Omar-v2/mcp-ical)** - An MCP server that allows you to interact with your macOS Calendar through natural language, including features such as event creation, modification, schedule listing, finding free time slots etc.\n- **[Apple Docs](https://github.com/kimsungwhee/apple-docs-mcp)** - A powerful Model Context Protocol (MCP) server that provides seamless access to Apple Developer Documentation through natural language queries. Search, explore, and get detailed information about Apple frameworks, APIs, sample code, and more directly in your AI-powered development environment.\n- **[Apple Script](https://github.com/peakmojo/applescript-mcp)** - MCP server that lets LLM run AppleScript code to to fully control anything on Mac, no setup needed.\n- **[APT MCP](https://github.com/GdMacmillan/apt-mcp-server)** - MCP server which runs debian package manager (apt) commands for you using ai agents.\n- **[Aranet4](https://github.com/diegobit/aranet4-mcp-server)** - MCP Server to manage your Aranet4 CO2 sensor. Fetch data and store in a local SQLite. Ask questions about historical data.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[ArangoDB Graph](https://github.com/PCfVW/mcp-arangodb-async)** - Async-first Python architecture, wrapping the official [python-arango driver](https://github.com/arangodb/python-arango) with graph management capabilities, content conversion utilities (JSON, Markdown, YAML and Table), backup/restore functionality, and graph analytics capabilities; the 33 MCP tools use strict [Pydantic](https://github.com/pydantic/pydantic) validation.\n- **[Arduino](https://github.com/vishalmysore/choturobo)** - MCP Server that enables AI-powered robotics using Claude AI and Arduino (ESP32) for real-world automation and interaction with robots.\n- **[arXiv API](https://github.com/prashalruchiranga/arxiv-mcp-server)** - An MCP server that enables interacting with the arXiv API using natural language.\n- **[arxiv-latex-mcp](https://github.com/takashiishida/arxiv-latex-mcp)** - MCP server that fetches and processes arXiv LaTeX sources for precise interpretation of mathematical expressions in papers.\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Atlassian Server (by phuc-nt)](https://github.com/phuc-nt/mcp-atlassian-server)** - An MCP server that connects AI agents (Cline, Claude Desktop, Cursor, etc.) to Atlassian Jira & Confluence, enabling data queries and actions through the Model Context Protocol.\n- **[Attestable MCP](https://github.com/co-browser/attestable-mcp-server)** - An MCP server running inside a trusted execution environment (TEE) via Gramine, showcasing remote attestation using [RA-TLS](https://gramine.readthedocs.io/en/stable/attestation.html). This allows an MCP client to verify the server before connecting.\n- **[Audius](https://github.com/glassBead-tc/audius-mcp-atris)** - Audius + AI = Atris. Interact with fans, stream music, tip your favorite artists, and more on Audius: all through Claude.\n- **[AutoML](https://github.com/emircansoftware/MCP_Server_DataScience)** – An MCP server for data analysis workflows including reading, preprocessing, feature engineering, model selection, visualization, and hyperparameter tuning.\n- **[AX-Platform](https://github.com/AX-MCP/PaxAI?tab=readme-ov-file#mcp-setup-guides)** - AI Agent collaboration platform. Collaborate on tasks, share context, and coordinate workflows.\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM.\n- **[AWS Athena](https://github.com/lishenxydlgzs/aws-athena-mcp)** - An MCP server for AWS Athena to run SQL queries on Glue Catalog.\n- **[AWS Cognito](https://github.com/gitCarrot/mcp-server-aws-cognito)** - An MCP server that connects to AWS Cognito for authentication and user management.\n- **[AWS Cost Explorer](https://github.com/aarora79/aws-cost-explorer-mcp-server)** - Optimize your AWS spend (including Amazon Bedrock spend) with this MCP server by examining spend across regions, services, instance types and foundation models ([demo video](https://www.youtube.com/watch?v=WuVOmYLRFmI&feature=youtu.be)).\n- **[AWS Resources Operations](https://github.com/baryhuang/mcp-server-aws-resources-python)** - Run generated python code to securely query or modify any AWS resources supported by boto3.\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents.\n- **[AWS SES](https://github.com/aws-samples/sample-for-amazon-ses-mcp)** Sample MCP Server for Amazon SES (SESv2). See [AWS blog post](https://aws.amazon.com/blogs/messaging - and-targeting/use-ai-agents-and-the-model-context-protocol-with-amazon-ses/) for more details.\n- **[Azure ADX](https://github.com/pab1it0/adx-mcp-server)** - Query and analyze Azure Data Explorer databases.\n- **[Azure DevOps](https://github.com/Vortiago/mcp-azure-devops)** - An MCP server that provides a bridge to Azure DevOps services, enabling AI assistants to query and manage work items.\n- **[Azure MCP Hub](https://github.com/Azure-Samples/mcp)** - A curated list of all MCP servers and related resources for Azure developers by **[Arun Sekhar](https://github.com/achandmsft)**\n- **[Azure OpenAI DALL-E 3 MCP Server](https://github.com/jacwu/mcp-server-aoai-dalle3)** - An MCP server for Azure OpenAI DALL-E 3 service to generate image from text.\n- **[Azure Wiki Search](https://github.com/coder-linping/azure-wiki-search-server)** - An MCP that enables AI to query the wiki hosted on Azure Devops Wiki.\n- **[Baidu AI Search](https://github.com/baidubce/app-builder/tree/master/python/mcp_server/ai_search)** - Web search with Baidu Cloud's AI Search\n- **[BambooHR MCP](https://github.com/encoreshao/bamboohr-mcp)** - An MCP server that interfaces with the BambooHR APIs, providing access to employee data, time tracking, and HR management features.\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n- **[Basic Memory](https://github.com/basicmachines-co/basic-memory)** - Local-first knowledge management system that builds a semantic graph from Markdown files, enabling persistent memory across conversations with LLMs.\n- **[BGG MCP](https://github.com/kkjdaniel/bgg-mcp)** (by kkjdaniel) - MCP to enable interaction with the BoardGameGeek API via AI tooling.\n- **[Bible](https://github.com/trevato/bible-mcp)** - Add biblical context to your generative AI applications.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Bilibili](https://github.com/wangshunnn/bilibili-mcp-server)** - This MCP server provides tools to fetch Bilibili user profiles, video metadata, search videos, and more.\n- **[Binance](https://github.com/ethancod1ng/binance-mcp-server)** - Cryptocurrency trading and market data access through Binance API integration.\n- **[Binance](https://github.com/AnalyticAce/BinanceMCPServer)** (by dosseh shalom) - Unofficial tools and server implementation for Binance's Model Context Protocol (MCP). Designed to support developers building crypto trading AI Agents.\n- **[Bing Web Search API](https://github.com/leehanchung/bing-search-mcp)** (by hanchunglee) - Server implementation for Microsoft Bing Web Search API.\n- **[BioMCP](https://github.com/genomoncology/biomcp)** (by imaurer) - Biomedical research assistant server providing access to PubMed, ClinicalTrials.gov, and MyVariant.info.\n- **[bioRxiv](https://github.com/JackKuo666/bioRxiv-MCP-Server)** - 🔍 Enable AI assistants to search and access bioRxiv papers through a simple MCP interface.\n- **[Bitable MCP](https://github.com/lloydzhou/bitable-mcp)** (by lloydzhou) - MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.\n- **[Blender](https://github.com/ahujasid/blender-mcp)** (by ahujasid) - Blender integration allowing prompt enabled 3D scene creation, modeling and manipulation.\n- **[Blender MCP](https://github.com/pranav-deshmukh/blender-mcp)** - MCP server to create professional like 3d scenes on blender using natural language.\n- **[Blockbench MCP Plugin](https://github.com/jasonjgardner/blockbench-mcp-plugin)** (by jasonjgardner) - Blockbench plugin to connect AI agents to Blockbench's JavaScript API. Allows for creating and editing 3D models or pixel art textures with AI in Blockbench.\n- **[Blockchain MCP](https://github.com/tatumio/blockchain-mcp)** - MCP Server for Blockchain Data from **[Tatum](http://tatum.io/mcp)** that instantly unlocks blockchain access for your AI agents. This official Tatum MCP server connects to any LLM in seconds.\n- **[Bluesky](https://github.com/semioz/bluesky-mcp)** (by semioz) - An MCP server for Bluesky, a decentralized social network. It enables automated interactions with the AT Protocol, supporting features like posting, liking, reposting, timeline management, and profile operations.\n- **[Bluetooth MCP Server](https://github.com/Hypijump31/bluetooth-mcp-server)** - Control Bluetooth devices and manage connections through natural language commands, including device discovery, pairing, and audio controls.\n- **[BNBChain MCP](https://github.com/bnb-chain/bnbchain-mcp)** - An MCP server for interacting with BSC, opBNB, and the Greenfield blockchain.\n- **[Braintree](https://github.com/QuentinCody/braintree-mcp-server)** - Unofficial PayPal Braintree payment gateway MCP Server for AI agents to process payments, manage customers, and handle transactions securely.\n- **[Brazilian Law](https://github.com/pdmtt/brlaw_mcp_server/)** (by pdmtt) - Agent-driven research on Brazilian law using official sources.\n- **[BreakoutRoom](https://github.com/agree-able/room-mcp)** - Agents accomplishing goals together in p2p rooms\n- **[Browser MCP](https://github.com/bytedance/UI-TARS-desktop/tree/main/packages/agent-infra/mcp-servers/browser)** (by UI-TARS) - A fast, lightweight MCP server that empowers LLMs with browser automation via Puppeteer’s structured accessibility data, featuring optional vision mode for complex visual understanding and flexible, cross-platform configuration.\n- **[browser-use](https://github.com/co-browser/browser-use-mcp-server)** (by co-browser) - browser-use MCP server with dockerized playwright + chromium + vnc. supports stdio & resumable http.\n- **[BrowserLoop](https://github.com/mattiasw/browserloop)** - An MCP server for taking screenshots of web pages using Playwright. Supports high-quality capture with configurable formats, viewport sizes, cookie-based authentication, and both full page and element-specific screenshots.\n- **[Bsc-mcp](https://github.com/TermiX-official/bsc-mcp)** The first MCP server that serves as the bridge between AI and BNB Chain, enabling AI agents to execute complex on-chain operations through seamless integration with the BNB Chain, including transfer, swap, launch, security check on any token and even more.\n- **[BugBug MCP Server](https://github.com/simplypixi/bugbug-mcp-server)** - Unofficial MCP server for BugBug API.\n- **[BVG MCP Server - (Unofficial) ](https://github.com/svkaizoku/mcp-bvg)** - Unofficial MCP server for Berliner Verkehrsbetriebe Api.\n- **[Bybit](https://github.com/ethancod1ng/bybit-mcp-server)** - A Model Context Protocol (MCP) server for integrating AI assistants with Bybit cryptocurrency exchange APIs, enabling automated trading, market data access, and account management.\n- **[CAD-MCP](https://github.com/daobataotie/CAD-MCP#)** (by daobataotie) - Drawing CAD(Line,Circle,Text,Annotation...) through MCP server, supporting mainstream CAD software.\n- **[Calculator](https://github.com/githejie/mcp-server-calculator)** - This server enables LLMs to use calculator for precise numerical calculations.\n- **[CalDAV MCP](https://github.com/dominik1001/caldav-mcp)** - A CalDAV MCP server to expose calendar operations as tools for AI assistants.\n- **[Calendly-mcp-server](https://github.com/meAmitPatil/calendly-mcp-server)** - Open source calendly mcp server.\n- **[Catalysis Hub](https://github.com/QuentinCody/catalysishub-mcp-server)** - Unofficial MCP server for searching and retrieving scientific data from the Catalysis Hub database, providing access to computational catalysis research and surface reaction data.\n- **[CCTV VMS MCP](https://github.com/jyjune/mcp_vms)** - A Model Context Protocol (MCP) server designed to connect to a CCTV recording program (VMS) to retrieve recorded and live video streams. It also provides tools to control the VMS software, such as showing live or playback dialogs for specific channels at specified times.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chess.com](https://github.com/pab1it0/chess-mcp)** - Access Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.\n- **[ChessPal Chess Engine (stockfish)](https://github.com/wilson-urdaneta/chesspal-mcp-engine)** - A Stockfish-powered chess engine exposed as an MCP server. Calculates best moves and supports both HTTP/SSE and stdio transports.\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[Chrome history](https://github.com/vincent-pli/chrome-history-mcp)** - Talk with AI about your browser history, get fun ^_^\n- **[CIViC](https://github.com/QuentinCody/civic-mcp-server)** - MCP server for the Clinical Interpretation of Variants in Cancer (CIViC) database, providing access to clinical variant interpretations and genomic evidence for cancer research.\n- **[Claude Thread Continuity](https://github.com/peless/claude-thread-continuity)** - Persistent memory system enabling Claude Desktop conversations to resume with full context across sessions. Maintains conversation history, project states, and user preferences for seamless multi-session workflows.\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[CLDGeminiPDF Analyzer](https://github.com/tfll37/CLDGeminiPDF-Analyzer)** - MCP server tool enabling sharing large PDF files to Google LLMs via API for further/additional analysis and response retrieval to Claude Desktop.\n- **[ClearML MCP](https://github.com/prassanna-ravishankar/clearml-mcp)** - Get comprehensive ML experiment context and analysis directly from [ClearML](https://clear.ml) in your AI conversations.\n- **[ClickUp](https://github.com/TaazKareem/clickup-mcp-server)** - MCP server for ClickUp task management, supporting task creation, updates, bulk operations, and markdown descriptions.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[CockroachDB](https://github.com/amineelkouhen/mcp-cockroachdb)** - MCP server enabling AI agents and LLMs to manage, monitor, and query **[CockroachDB](https://www.cockroachlabs.com/)** using natural language.\n- **[CockroachDB MCP Server](https://github.com/viragtripathi/cockroachdb-mcp-server)** – Full - featured MCP implementation built with FastAPI and CockroachDB. Supports schema bootstrapping, JSONB storage, LLM-ready CLI, and optional `/debug` endpoints.\n- **[code-assistant](https://github.com/stippi/code-assistant)** - A coding assistant MCP server that allows to explore a code-base and make changes to code. Should be used with trusted repos only (insufficient protection against prompt injections).\n- **[code-context-provider-mcp](https://github.com/AB498/code-context-provider-mcp)** - MCP server that provides code context and analysis for AI assistants. Extracts directory structure and code symbols using WebAssembly Tree-sitter parsers without Native Dependencies.\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[CoinMarketCap](https://github.com/shinzo-labs/coinmarketcap-mcp)** - Implements the complete [CoinMarketCap](https://coinmarketcap.com/) API for accessing cryptocurrency market data, exchange information, and other blockchain-related metrics.\n- **[commands](https://github.com/g0t4/mcp-server-commands)** - Run commands and scripts. Just like in a terminal.\n- **[Companies House MCP](https://github.com/stefanoamorelli/companies-house-mcp)** (by Stefano Amorelli) - MCP server to connect with the UK Companies House API.\n- **[computer-control-mcp](https://github.com/AB498/computer-control-mcp)** - MCP server that provides computer control capabilities, like mouse, keyboard, OCR, etc. using PyAutoGUI, RapidOCR, ONNXRuntime Without External Dependencies.\n- **[Computer-Use - Remote MacOS Use](https://github.com/baryhuang/mcp-remote-macos-use)** - Open-source out-of-the-box alternative to OpenAI Operator, providing a full desktop experience and optimized for using remote macOS machines as autonomous AI agents.\n- **[Congress.gov API](https://github.com/AshwinSundar/congress_gov_mcp)** - An MCP server to interact with real-time data from the Congress.gov API, which is the official API for the United States Congress.\n- **[consul-mcp](https://github.com/kocierik/consul-mcp-server)** - A consul MCP server for service management, health check and Key-Value Store\n- **[consult7](https://github.com/szeider/consult7)** - Analyze large codebases and document collections using high-context models via OpenRouter, OpenAI, or Google AI -- very useful, e.g., with Claude Code\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Context Crystallizer](https://github.com/hubertciebiada/context-crystallizer)** - AI Context Engineering tool that transforms large repositories into crystallized, AI-consumable knowledge through systematic analysis and optimization.\n- **[MCP Context Provider](https://github.com/doobidoo/MCP-Context-Provider)** - Static server that provides AI models with persistent tool-specific context and rules, preventing context loss between chat sessions and enabling consistent behavior across interactions.\n- **[context-portal](https://github.com/GreatScottyMac/context-portal)** - Context Portal (ConPort) is a memory bank database system that effectively builds a project-specific knowledge graph, capturing entities like decisions, progress, and architecture, along with their relationships. This serves as a powerful backend for Retrieval Augmented Generation (RAG), enabling AI assistants to access precise, up-to-date project information.\n- **[cplusplus-mcp](https://github.com/kandrwmrtn/cplusplus_mcp)** - Semantic C++ code analysis using libclang. Enables Claude to understand C++ codebases through AST parsing rather than text search - find classes, navigate inheritance, trace function calls, and explore code relationships.\n- **[CreateveAI Nexus](https://github.com/spgoodman/createveai-nexus-server)** - Open-Source Bridge Between AI Agents and Enterprise Systems, with simple custom API plug-in capabilities (including close compatibility with ComfyUI nodes), support for Copilot Studio's MCP agent integations, and support for Azure deployment in secure environments with secrets stored in Azure Key Vault, as well as straightforward on-premises deployment.\n- **[CRASH](https://github.com/nikkoxgonzales/crash-mcp)** - MCP server for structured, iterative reasoning and thinking with flexible validation, confidence tracking, revision mechanisms, and branching support.\n- **[Creatify](https://github.com/TSavo/creatify-mcp)** - MCP Server that exposes Creatify AI API capabilities for AI video generation, including avatar videos, URL-to-video conversion, text-to-speech, and AI-powered editing tools.\n- **[Cronlytic](https://github.com/Cronlytic/cronlytic-mcp-server)** - Create CRUD operations for serverless cron jobs through [Cronlytic](https://cronlytic.com) MCP Server\n- **[crypto-feargreed-mcp](https://github.com/kukapay/crypto-feargreed-mcp)**  -  Providing real-time and historical Crypto Fear & Greed Index data.\n- **[crypto-indicators-mcp](https://github.com/kukapay/crypto-indicators-mcp)**  -  An MCP server providing a range of cryptocurrency technical analysis indicators and strategies.\n- **[crypto-sentiment-mcp](https://github.com/kukapay/crypto-sentiment-mcp)**  -  An MCP server that delivers cryptocurrency sentiment analysis to AI agents.\n- **[cryptopanic-mcp-server](https://github.com/kukapay/cryptopanic-mcp-server)** - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.\n- **[CSV Editor](https://github.com/santoshray02/csv-editor)** - Comprehensive CSV processing with 40+ operations for data manipulation, analysis, and validation. Features auto-save, undo/redo, and handles GB+ files. Built with FastMCP & Pandas.\n- **[Cursor MCP Installer](https://github.com/matthewdcage/cursor-mcp-installer)** - A tool to easily install and configure other MCP servers within Cursor IDE, with support for npm packages, local directories, and Git repositories.\n- **[CVE Intelligence Server](https://github.com/gnlds/mcp-cve-intelligence-server-lite)** – Provides vulnerability intelligence via multi - source CVE data, essential exploit discovery, and EPSS risk scoring through the MCP. Useful for security research, automation, and agent workflows.\n- **[D365FO](https://github.com/mafzaal/d365fo-client)** - A comprehensive MCP server for Microsoft Dynamics 365 Finance & Operations (D365 F&O) that provides easy access to OData endpoints, metadata operations, label management, and AI assistant integration.\n- **[Dagster](https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-dg-cli)** - An MCP server to easily build data pipelines using [Dagster](https://dagster.io/).\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Databricks](https://github.com/JordiNeil/mcp-databricks-server)** - Allows LLMs to run SQL queries, list and get details of jobs executions in a Databricks account.\n- **[Databricks Genie](https://github.com/yashshingvi/databricks-genie-MCP)** - A server that connects to the Databricks Genie, allowing LLMs to ask natural language questions, run SQL queries, and interact with Databricks conversational agents.\n- **[Databricks Smart SQL](https://github.com/RafaelCartenet/mcp-databricks-server)** - Leveraging Databricks Unity Catalog metadata, perform smart efficient SQL queries to solve Ad-hoc queries and explore data.\n- **[DataCite](https://github.com/QuentinCody/datacite-mcp-server)** - Unofficial MCP server for DataCite, providing access to research data and publication metadata through DataCite's REST API and GraphQL interface for scholarly research discovery.\n- **[Datadog](https://github.com/GeLi2001/datadog-mcp-server)** - Datadog MCP Server for application tracing, monitoring, dashboard, incidents queries built on official datadog api.\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DataWorks](https://github.com/aliyun/alibabacloud-dataworks-mcp-server)** - A Model Context Protocol (MCP) server that provides tools for AI, allowing it to interact with the [DataWorks](https://www.alibabacloud.com/help/en/dataworks/) Open API through a standardized interface. This implementation is based on the Alibaba Cloud Open API and enables AI agents to perform cloud resources operations seamlessly.\n- **[Data4library](https://github.com/isnow890/data4library-mcp)** (by isnow890) - MCP server for Korea's Library Information Naru API, providing comprehensive access to public library data, book searches, loan status, reading statistics, and GPS-based nearby library discovery across South Korea.\n\n- **[DaVinci Resolve](https://github.com/samuelgursky/davinci-resolve-mcp)** - MCP server integration for DaVinci Resolve providing powerful tools for video editing, color grading, media management, and project control.\n- **[DBHub](https://github.com/bytebase/dbhub/)** - Universal database MCP server connecting to MySQL, MariaDB, PostgreSQL, and SQL Server.\n- **[Deebo](https://github.com/snagasuri/deebo-prototype)** – Agentic debugging MCP server that helps AI coding agents delegate and fix hard bugs through isolated multi-agent hypothesis testing.\n- **[Deep Research](https://github.com/reading-plus-ai/mcp-server-deep-research)** - Lightweight MCP server offering Grok/OpenAI/Gemini/Perplexity-style automated deep research exploration and structured reporting.\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[Depyler](https://github.com/paiml/depyler/blob/main/docs/mcp-integration.md)** - Energy-efficient Python-to-Rust transpiler with progressive verification, enabling AI assistants to convert Python code to safe, performant Rust while reducing energy consumption by 75-85%.\n- **[deploy-mcp](https://github.com/alexpota/deploy-mcp)** - Universal deployment tracker for AI assistants with live status badges and deployment monitoring.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DesktopCommander](https://github.com/wonderwhy-er/DesktopCommanderMCP)** - Let AI edit and manage files on your computer, run terminal commands, and connect to remote servers via SSH - all powered by one of the most popular local MCP servers.\n- **[Devcontainer](https://github.com/AI-QL/mcp-devcontainers)** - An MCP server for devcontainer to generate and configure development containers directly from devcontainer configuration files.\n- **[DevDb](https://github.com/damms005/devdb-vscode?tab=readme-ov-file#mcp-configuration)** - An MCP server that runs right inside the IDE, for connecting to MySQL, Postgres, SQLite, and MSSQL databases.\n- **[DevOps AI Toolkit](https://github.com/vfarcic/dot-ai)** - AI-powered development productivity platform that enhances software development workflows through intelligent automation and AI-driven assistance.\n- **[DevOps-MCP](https://github.com/wangkanai/devops-mcp)** - Dynamic Azure DevOps MCP server with directory-based authentication switching, supporting work items, repositories, builds, pipelines, and multi-project management with local configuration files.\n- **[DGIdb](https://github.com/QuentinCody/dgidb-mcp-server)** - MCP server for the Drug Gene Interaction Database (DGIdb), providing access to drug-gene interaction data, druggable genome information, and pharmacogenomics research.\n- **[Dicom](https://github.com/ChristianHinge/dicom-mcp)** - An MCP server to query and retrieve medical images and for parsing and reading dicom-encapsulated documents (pdf etc.).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discogs](https://github.com/cswkim/discogs-mcp-server)** - An MCP server that connects to the Discogs API for interacting with your music collection.\n- **[Discord](https://github.com/v-3/discordmcp)** - An MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Discord](https://github.com/SaseQ/discord-mcp)** - An MCP server, which connects to Discord through a bot, and provides comprehensive integration with Discord.\n- **[Discord](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/discord)** - For Discord API integration by Klavis AI\n- **[Discourse](https://github.com/AshDevFr/discourse-mcp-server)** - An MCP server to search Discourse posts on a Discourse forum.\n- **[DocBase](https://help.docbase.io/posts/3925317)** - Official MCP server for DocBase API integration, enabling post management, user collaboration, group administration, and more.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Docker](https://github.com/0xshariq/docker-mcp-server)** - Docker MCP Server provides advanced, unified Docker management via CLI and MCP workflows, supporting containers, images, volumes, networks, and orchestration.\n- **[Docs](https://github.com/da1z/docsmcp)** - Enable documentation access for the AI agent, supporting llms.txt and other remote or local files.\n- **[documcp](https://github.com/tosin2013/documcp)** - An MCP server for intelligent document processing and management, supporting multiple formats and document operations.\n- **[Docy](https://github.com/oborchers/mcp-server-docy)** - Docy gives your AI direct access to the technical documentation it needs, right when it needs it. No more outdated information, broken links, or rate limits - just accurate, real-time documentation access for more precise coding assistance.\n- **[Dodo Payments](https://github.com/dodopayments/dodopayments-node/tree/main/packages/mcp-server)** - Enables AI agents to securely perform payment operations via a lightweight, serverless-compatible interface to the [Dodo Payments](https://dodopayments.com) API.\n- **[Domain Tools](https://github.com/deshabhishek007/domain-tools-mcp-server)** - A Model Context Protocol (MCP) server for comprehensive domain analysis: WHOIS, DNS records, and DNS health checks.\n- **[DPLP](https://github.com/szeider/mcp-dblp)**  - Searches the [DBLP](https://dblp.org) computer science bibliography database.\n- **[Druid MCP Server](https://github.com/iunera/druid-mcp-server)** - STDIO/SEE MCP Server for Apache Druid by [iunera](https://www.iunera.com) that provides extensive tools, resources, and prompts for managing and analyzing Druid clusters.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[dune-analytics-mcp](https://github.com/kukapay/dune-analytics-mcp)** -  A mcp server that bridges Dune Analytics data to AI agents.\n- **[DynamoDB-Toolbox](https://www.dynamodbtoolbox.com/docs/databases/actions/mcp-toolkit)** - Leverages your Schemas and Access Patterns to interact with your [DynamoDB](https://aws.amazon.com/dynamodb) Database using natural language.\n- **[eBook-mcp](https://github.com/onebirdrocks/ebook-mcp)** - A lightweight MCP server that allows LLMs to read and interact with your personal PDF and EPUB ebooks. Ideal for building AI reading assistants or chat-based ebook interfaces.\n- **[ECharts MCP Server](https://github.com/hustcc/mcp-echarts)** - Generate visual charts using ECharts with AI MCP dynamically, used for chart generation and data analysis.\n- **[EDA MCP Server](https://github.com/NellyW8/mcp-EDA)** - A comprehensive Model Context Protocol server for Electronic Design Automation tools, enabling AI assistants to synthesize Verilog with Yosys, simulate designs with Icarus Verilog, run complete ASIC flows with OpenLane, and view results with GTKWave and KLayout.\n- **[EdgeOne Pages MCP](https://github.com/TencentEdgeOne/edgeone-pages-mcp)** - An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.\n- **[Edwin](https://github.com/edwin-finance/edwin/tree/main/examples/mcp-server)** - MCP server for edwin SDK - enabling AI agents to interact with DeFi protocols across EVM, Solana and other blockchains.\n- **[eechat](https://github.com/Lucassssss/eechat)** - An open-source, cross-platform desktop application that seamlessly connects with MCP servers, across Linux, macOS, and Windows.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Email](https://github.com/Shy2593666979/mcp-server-email)** - This server enables users to send emails through various email providers, including Gmail, Outlook, Yahoo, Sina, Sohu, 126, 163, and QQ Mail. It also supports attaching files from specified directories, making it easy to upload attachments along with the email content.\n- **[Email SMTP](https://github.com/egyptianego17/email-mcp-server)** - A simple MCP server that lets your AI agent send emails and attach files through SMTP.\n- **[Enhance Prompt](https://github.com/FelixFoster/mcp-enhance-prompt)** - An MCP service for enhance you prompt.\n- **[Entrez](https://github.com/QuentinCody/entrez-mcp-server)** - Unofficial MCP server for NCBI Entrez databases, providing access to PubMed articles, gene information, protein data, and other biomedical research resources through NCBI's E-utilities API.\n- **[Ergo Blockchain MCP](https://github.com/marctheshark3/ergo-mcp)** -An MCP server to integrate Ergo Blockchain Node and Explorer APIs for checking address balances, analyzing transactions, viewing transaction history, performing forensic analysis of addresses, searching for tokens, and monitoring network status.\n- **[ESP MCP Server](https://github.com/horw/esp-mcp)** - An MCP server that integrates ESP IDF commands like building and flashing code for ESP Microcontrollers using an LLM.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[EVM MCP Server](https://github.com/mcpdotdirect/evm-mcp-server)** - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.\n- **[Excel](https://github.com/haris-musa/excel-mcp-server)** - Excel manipulation including data reading/writing, worksheet management, formatting, charts, and pivot table.\n- **[Excel to JSON MCP by WTSolutions](https://github.com/he-yang/excel-to-json-mcp)** - MCP Server providing a standardized interface for converting (1) Excel or CSV data into JSON format ;(2) Excel(.xlsx) file into Structured JSON.\n- **[Extended Memory](https://github.com/ssmirnovpro/extended-memory-mcp)** - Persistent memory across Claude conversations with multi-project support, automatic importance scoring, and tag-based organization. Production-ready with 400+ tests.\n- **[F1](https://github.com/AbhiJ2706/f1-mcp/tree/main)** - Access to Formula 1 data including race results, driver information, lap times, telemetry, and circuit details.\n- **[Fabric MCP](https://github.com/aci-labs/ms-fabric-mcp)** - Microsoft Fabric MCP server to accelerate working in your Fabric Tenant with the help of your favorite LLM models.\n- **[Fabric Real-Time Intelligence MCP](https://github.com/Microsoft/fabric-rti-mcp)** - Official Microsoft Fabric RTI server to accelerate working with Eventhouse, Azure Data Explorer(Kusto), Eventstreams and other RTI items using your favorite LLM models.\n- **[fabric-mcp-server](https://github.com/adapoet/fabric-mcp-server)** - The fabric-mcp-server is an MCP server that integrates [Fabric](https://github.com/danielmiessler/fabric) patterns with [Cline](https://cline.bot/), exposing them as tools for AI-driven task execution and enhancing Cline's capabilities.\n- **[Fal MCP Server](https://github.com/raveenb/fal-mcp-server)** - Generate AI images, videos, and music using Fal.ai models (FLUX, Stable Diffusion, MusicGen) directly in Claude\n- **[Facebook Ads](https://github.com/gomarble-ai/facebook-ads-mcp-server)** - MCP server acting as an interface to the Facebook Ads, enabling programmatic access to Facebook Ads data and management features.\n- **[Facebook Ads 10xeR](https://github.com/fortytwode/10xer)** - Advanced Facebook Ads MCP server with enhanced creative insights, multi-dimensional breakdowns, and comprehensive ad performance analytics.\n- **[Facebook Ads Library](https://github.com/trypeggy/facebook-ads-library-mcp)** - Get any answer from the Facebook Ads Library, conduct deep research including messaging, creative testing and comparisons in seconds.\n- **[Fantasy PL](https://github.com/rishijatia/fantasy-pl-mcp)** - Give your coding agent direct access to up-to date Fantasy Premier League data\n- **[Fastmail MCP](https://github.com/MadLlama25/fastmail-mcp)** - Access Fastmail via JMAP: list/search emails, send and move mail, handle attachments/threads, plus contacts and calendar tools.\n- **[fastn.ai – Unified API MCP Server](https://github.com/fastnai/mcp-fastn)** - A remote, dynamic MCP server with a unified API that connects to 1,000+ tools, actions, and workflows, featuring built-in authentication and monitoring.\n- **[FDIC BankFind MCP Server - (Unofficial)](https://github.com/clafollett/fdic-bank-find-mcp-server)** - The is a MCPserver that brings the power of FDIC BankFind APIs straight to your AI tools and workflows. Structured U.S. banking data, delivered with maximum vibes. 😎📊\n- **[FPE Demo MCP](https://github.com/Horizon-Digital-Engineering/fpe-demo-mcp)** - FF3 Format Preserving Encryption with authentication patterns for secure data protection in LLM workflows.\n- **[Federal Reserve Economic Data (FRED)](https://github.com/stefanoamorelli/fred-mcp-server)** (by Stefano Amorelli) - Community developed MCP server to interact with the Federal Reserve Economic Data.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[Feyod](https://github.com/jeroenvdmeer/feyod-mcp)** - A server that answers questions about football matches, and specialised in the football club Feyenoord.\n- **[Fast Filesystem](https://github.com/efforthye/fast-filesystem-mcp)** - Advanced filesystem operations with large file handling capabilities and Claude-optimized features. Provides fast file reading/writing, sequential reading for large files, directory operations, file search, and streaming writes with backup & recovery.\n- **[FHIR](https://github.com/wso2/fhir-mcp-server)** - A Model Context Protocol server that provides seamless, standardized access to Fast Healthcare Interoperability Resources (FHIR) data from any compatible FHIR server. Designed for easy integration with AI tools, developer workflows, and healthcare applications, it enables natural language and programmatic search, retrieval, and analysis of clinical data.\n- **[Fibaro HC3](https://github.com/coding-sailor/mcp-server-hc3)** - MCP server for Fibaro Home Center 3 smart home systems.\n- **[Figma](https://github.com/GLips/Figma-Context-MCP)** - Give your coding agent direct access to Figma file data, helping it one-shot design implementation.\n- **[Figma](https://github.com/paulvandermeijs/figma-mcp)** - A blazingly fast MCP server to read and export your Figma design files.\n- **[Figma to Flutter](https://github.com/mhmzdev/figma-flutter-mcp)** - Write down clean and better Flutter code from Figma design tokens and enrich nodes data in Flutter terminology.\n- **[Files](https://github.com/flesler/mcp-files)** - Enables agents to quickly find and edit code in a codebase with surgical precision. Find symbols, edit them everywhere.\n- **[FileSystem Server](https://github.com/Oncorporation/filesystem_server)** - Local MCP server for Visual Studio 2022 that provides code-workspace functionality by giving AI agents selective access to project folders and files\n- **[finmap.org](https://github.com/finmap-org/mcp-server)** MCP server provides comprehensive historical data from the US, UK, Russian and Turkish stock exchanges. Access sectors, tickers, company profiles, market cap, volume, value, and trade counts, as well as treemap and histogram visualizations.\n- **[Firebase](https://github.com/gannonh/firebase-mcp)** - Server to interact with Firebase services including Firebase Authentication, Firestore, and Firebase Storage.\n- **[Fish Audio](https://github.com/da-okazaki/mcp-fish-audio-server)** - Text-to-Speech integration with Fish Audio's API, supporting multiple voices, streaming, and real-time playback\n- **[FitBit MCP Server](https://github.com/NitayRabi/fitbit-mcp)** - An MCP server that connects to FitBit API using a token obtained from OAuth flow.\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Fluent-MCP](https://github.com/modesty/fluent-mcp)** - MCP server for Fluent (ServiceNow SDK) providing access to ServiceNow SDK CLI, API specifications, code snippets, and more.\n- **[Flyworks Avatar](https://github.com/Flyworks-AI/flyworks-mcp)** - Fast and free zeroshot lipsync MCP server.\n- **[fmp-mcp-server](https://github.com/vipbat/fmp-mcp-server)** - Enable your agent for M&A analysis and investment banking workflows. Access company profiles, financial statements, ratios, and perform sector analysis with the [Financial Modeling Prep APIs]\n- **[FoundationModels](https://github.com/phimage/mcp-foundation-models)** - An MCP server that integrates Apple's [FoundationModels](https://developer.apple.com/documentation/foundationmodels) for text generation.\n- **[Foursquare](https://github.com/foursquare/foursquare-places-mcp)** - Enable your agent to recommend places around the world with the [Foursquare Places API](https://location.foursquare.com/products/places-api/)\n- **[FrankfurterMCP](https://github.com/anirbanbasu/frankfurtermcp)** - MCP server acting as an interface to the [Frankfurter API](https://frankfurter.dev/) for currency exchange data.\n- **[freqtrade-mcp](https://github.com/kukapay/freqtrade-mcp)** - An MCP server that integrates with the Freqtrade cryptocurrency trading bot.\n- **[Geolocation](https://github.com/jackyang25/geolocation-mcp-server)** - WalkScore API integration for walkability, transit, and bike scores.\n- **[GDB](https://github.com/pansila/mcp_server_gdb)** - A GDB/MI protocol server based on the MCP protocol, providing remote application debugging capabilities with AI assistants.\n- **[ggRMCP](https://github.com/aalobaidi/ggRMCP)** - A Go gateway that converts gRPC services into MCP-compatible tools, allowing AI models like Claude to directly call your gRPC services.\n- **[Gemini Bridge](https://github.com/eLyiN/gemini-bridge)** - Lightweight MCP server that enables Claude to interact with Google's Gemini AI through the official CLI, offering zero API costs and stateless architecture.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Git](https://github.com/geropl/git-mcp-go)** - Allows LLM to interact with a local git repository, incl. optional push support.\n- **[Git Mob](https://github.com/Mubashwer/git-mob-mcp-server)** - MCP server that interfaces with the [git-mob](https://github.com/Mubashwer/git-mob) CLI app for managing co-authors in git commits during pair/mob programming.\n- **[Github](https://github.com/0xshariq/github-mcp-server)** - A Model Context Protocol (MCP) server that provides 29 Git operations + 11 workflow combinations for AI assistants and developers. This server exposes comprehensive Git repository management through a standardized interface, enabling AI models and developers to safely manage complex version control workflows.\n- **[GitHub Actions](https://github.com/ko1ynnky/github-actions-mcp-server)** - A Model Context Protocol (MCP) server for interacting with GitHub Actions.\n- **[GitHub Enterprise MCP](https://github.com/ddukbg/github-enterprise-mcp)** - A Model Context Protocol (MCP) server for interacting with GitHub Enterprise.\n- **[GitHub GraphQL](https://github.com/QuentinCody/github-graphql-mcp-server)** - Unofficial GitHub MCP server that provides access to GitHub's GraphQL API, enabling more powerful and flexible queries for repository data, issues, pull requests, and other GitHub resources.\n- **[GitHub Projects](https://github.com/redducklabs/github-projects-mcp)** — Manage GitHub Projects with full GraphQL API access including items, fields, and milestones.\n- **[GitHub Repos Manager MCP Server](https://github.com/kurdin/github-repos-manager-mcp)** - Token-based GitHub automation management. No Docker, Flexible configuration, 80+ tools with direct API integration.\n- **[GitMCP](https://github.com/idosal/git-mcp)** - gitmcp.io is a generic remote MCP server to connect to ANY GitHub repository or project documentation effortlessly\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Gmail](https://github.com/Ayush-k-Shukla/gmail-mcp-server)** - A Simple MCP server for Gmail with support for all basic operations with oauth2.0.\n- **[Gmail Headless](https://github.com/baryhuang/mcp-headless-gmail)** - Remote hostable MCP server that can get and send Gmail messages without local credential or file system setup.\n- **[Gmail MCP](https://github.com/gangradeamitesh/mcp-google-email)** - A Gmail service implementation using MCP (Model Context Protocol) that provides functionality for sending, receiving, and managing emails through Gmail's API.\n- **[Gnuradio](https://github.com/yoelbassin/gnuradioMCP)** - An MCP server for GNU Radio that enables LLMs to autonomously create and modify RF .grc flowcharts.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[GOAT](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)** - Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\n- **[Godot](https://github.com/Coding-Solo/godot-mcp)** - An MCP server providing comprehensive Godot engine integration for project editing, debugging, and scene management.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Goodnews](https://github.com/VectorInstitute/mcp-goodnews)** - A simple MCP server that delivers curated positive and uplifting news stories.\n- **[Gopher MCP](https://github.com/cameronrye/gopher-mcp)** - Modern, cross-platform MCP server that enables AI assistants to browse and interact with both Gopher protocol and Gemini protocol resources safely and efficiently.\n- **[Google Ads](https://github.com/gomarble-ai/google-ads-mcp-server)** - MCP server acting as an interface to the Google Ads, enabling programmatic access to Facebook Ads data and management features.\n- **[Google Analytics](https://github.com/surendranb/google-analytics-mcp)** - Google Analytics MCP Server to bring data across 200+ dimensions & metrics for LLMs to analyse.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Maps](https://github.com/Mastan1301/google_maps_mcp)** - Provides location results using Google Places API.\n- **[Google Sheets](https://github.com/xing5/mcp-google-sheets)** - Access and editing data to your Google Sheets.\n- **[Google Sheets](https://github.com/rohans2/mcp-google-sheets)** - An MCP Server written in TypeScript to access and edit data in your Google Sheets.\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Google Vertex AI Search](https://github.com/ubie-oss/mcp-vertexai-search)** - Provides Google Vertex AI Search results by grounding a Gemini model with your own private data\n- **[Google Workspace](https://github.com/taylorwilsdon/google_workspace_mcp)** - Comprehensive Google Workspace MCP with full support for Calendar, Drive, Gmail, and Docs using Streamable HTTP or SSE transport.\n- **[Google-Scholar](https://github.com/JackKuo666/Google-Scholar-MCP-Server)** - Enable AI assistants to search and access Google Scholar papers through a simple MCP interface.\n- **[Google-Scholar](https://github.com/mochow13/google-scholar-mcp)** - An MCP server for Google Scholar written in TypeScript with Streamable HTTP transport, along with a `client` implementations that integrates with the server and interacts with `gemini-2.5-flash`.\n- **[gx-mcp-server](https://github.com/davidf9999/gx-mcp-server)** - Expose Great Expectations data validation and quality checks as MCP tools for AI agents.\n- **[Gralio SaaS Database](https://github.com/tymonTe/gralio-mcp)** - Find and compare SaaS products, including data from G2 reviews, Trustpilot, Crunchbase, Linkedin, pricing, features and more, using [Gralio MCP](https://gralio.ai/mcp) server\n- **[GraphQL](https://github.com/drestrepom/mcp_graphql)** - Comprehensive GraphQL API integration that automatically exposes each GraphQL query as a separate tool.\n- **[GraphQL Schema](https://github.com/hannesj/mcp-graphql-schema)** - Allow LLMs to explore large GraphQL schemas without bloating the context.\n- **[HackMD](https://github.com/yuna0x0/hackmd-mcp)** (by yuna0x0) - An MCP server for HackMD, a collaborative markdown editor. It allows users to create, read, and update documents in HackMD using the Model Context Protocol.\n- **[HAProxy](https://github.com/tuannvm/haproxy-mcp-server)** - A Model Context Protocol (MCP) server for HAProxy implemented in Go, leveraging HAProxy Runtime API.\n- **[Hashing MCP Server](https://github.com/kanad13/MCP-Server-for-Hashing)** - MCP Server with cryptographic hashing functions e.g. SHA256, MD5, etc.\n- **[HDW LinkedIn](https://github.com/horizondatawave/hdw-mcp-server)** - Access to profile data and management of user account with [HorizonDataWave.ai](https://horizondatawave.ai/).\n- **[HeatPump](https://github.com/jiweiqi/heatpump-mcp-server)** — Residential heat - pump sizing & cost-estimation tools by **HeatPumpHQ**.\n- **[Helm Chart CLI](https://github.com/jeff-nasseri/helm-chart-cli-mcp)** - Helm MCP provides a bridge between AI assistants and the Helm package manager for Kubernetes. It allows AI assistants to interact with Helm through natural language requests, executing commands like installing charts, managing repositories, and more.\n- **[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server)** - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\n- **[HLedger MCP](https://github.com/iiAtlas/hledger-mcp)** - Double entry plain text accounting, right in your LLM! This MCP enables comprehensive read, and (optional) write access to your local [HLedger](https://hledger.org/) accounting journals.\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[Home Assistant](https://github.com/voska/hass-mcp)** - Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Human-In-the-Loop](https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server)** - A powerful MCP Server that enables AI assistants like Claude to interact with humans through intuitive GUI dialogs. This server bridges the gap between automated AI processes and human decision-making by providing real-time user input tools, choices, confirmations, and feedback mechanisms.\n- **[Human-use](https://github.com/RapidataAI/human-use)** - Instant human feedback through an MCP, have your AI interact with humans around the world. Powered by [Rapidata](https://www.rapidata.ai/)\n- **[Hyperledger Fabric Agent Suite](https://github.com/padmarajkore/hlf-fabric-agent)** - Modular toolkit for managing Fabric test networks and chaincode lifecycle via MCP tools.\n- **[Hyperliquid](https://github.com/mektigboy/server-hyperliquid)** - An MCP server implementation that integrates the Hyperliquid SDK for exchange data.\n- **[Hypertool](https://github.com/toolprint/hypertool-mcp)** – MCP that let's you create hot - swappable, \"persona toolsets\" from multiple MCP servers to reduce tool overload and improve tool execution.\n- **[hyprmcp](https://github.com/stefanoamorelli/hyprmcp)** (by Stefano Amorelli) - Lightweight MCP server for `hyprland`.\n- **[iFlytek SparkAgent Platform](https://github.com/iflytek/ifly-spark-agent-mcp)** - This is a simple example of using MCP Server to invoke the task chain of the  iFlytek SparkAgent Platform.\n- **[iFlytek Workflow](https://github.com/iflytek/ifly-workflow-mcp-server)** - Connect to iFlytek Workflow via the MCP server and run your own Agent.\n- **[IIIF](https://github.com/code4history/IIIF_MCP)** - Comprehensive IIIF (International Image Interoperability Framework) protocol support for searching, navigating, and manipulating digital collections from museums, libraries, and archives worldwide.\n- **[Image Generation](https://github.com/GongRzhe/Image-Generation-MCP-Server)** - This MCP server provides image generation capabilities using the Replicate Flux model.\n- **[ImageSorcery MCP](https://github.com/sunriseapps/imagesorcery-mcp)** - ComputerVision-based 🪄 sorcery of image recognition and editing tools for AI assistants.\n- **[IMAP MCP](https://github.com/dominik1001/imap-mcp)** - 📧 An IMAP Model Context Protocol (MCP) server to expose IMAP operations as tools for AI assistants.\n- **[iMCP](https://github.com/loopwork-ai/iMCP)** - A macOS app that provides an MCP server for your iMessage, Reminders, and other Apple services.\n- **[InfluxDB](https://github.com/idoru/influxdb-mcp-server)** - Run queries against InfluxDB OSS API v2.\n- **[Intelligent Image Generator](https://github.com/shinpr/mcp-image)** - Turn casual prompts into professional-quality images with AI enhancement\n- **[Inner Monologue MCP](https://github.com/abhinav-mangla/inner-monologue-mcp)** - A cognitive reasoning tool that enables LLMs to engage in private, structured self-reflection and multi-step reasoning before generating responses, improving response quality and problem-solving capabilities.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Instagram DM](https://github.com/trypeggy/instagram_dm_mcp)** - Send DMs on Instagram via your LLM\n- **[interactive-mcp](https://github.com/ttommyth/interactive-mcp)** - Enables interactive LLM workflows by adding local user prompts and chat capabilities directly into the MCP loop.\n- **[Intercom](https://github.com/raoulbia-ai/mcp-server-for-intercom)** - An MCP-compliant server for retrieving customer support tickets from Intercom. This tool enables AI assistants like Claude Desktop and Cline to access and analyze your Intercom support tickets.\n- **[iOS Simulator](https://github.com/InditexTech/mcp-server-simulator-ios-idb)** - A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators (iPhone, iPad, etc.) through natural language commands.\n- **[ipybox](https://github.com/gradion-ai/ipybox)** - Python code execution sandbox based on IPython and Docker. Stateful code execution, file transfer between host and container, configurable network access. See [ipybox MCP server](https://gradion-ai.github.io/ipybox/mcp-server/) for details.\n- **[it-tools-mcp](https://github.com/wrenchpilot/it-tools-mcp)** - A Model Context Protocol server that recreates [CorentinTh it-tools](https://github.com/CorentinTh/it-tools) utilities for AI agents, enabling access to a wide range of developer tools (encoding, decoding, conversions, and more) via MCP.\n- **[itemit MCP](https://github.com/umin-ai/itemit-mcp)** - itemit is Asset Tracking MCP that manage the inventory, monitoring and location tracking that powers over +300 organizations.\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[iTerm MCP Server](https://github.com/rishabkoul/iTerm-MCP-Server)** - A Model Context Protocol (MCP) server implementation for iTerm2 terminal integration. Able to manage multiple iTerm Sessions.\n- **[Java Decompiler](https://github.com/idachev/mcp-javadc)** - Decompile Java bytecode into readable source code from .class files, package names, or JAR archives using CFR decompiler\n- **[JavaFX](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jfx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, SQLite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[Jenkins](https://github.com/jasonkylelol/jenkins-mcp-server)** - This MCP server allow you to create Jenkins tasks.\n- **[JMeter](https://github.com/QAInsights/jmeter-mcp-server)** - Run load testing using Apache JMeter via MCP-compliant tools.\n- **[Job Searcher](https://github.com/0xDAEF0F/job-searchoor)** - A FastMCP server that provides tools for retrieving and filtering job listings based on time period, keywords, and remote work preferences.\n- **[jobswithgpt](https://github.com/jobswithgpt/mcp)** - Job search MCP using jobswithgpt which indexes 500K+ public job listings and refreshed continously.\n- **[joinly](https://github.com/joinly-ai/joinly)** - MCP server to interact with browser-based meeting platforms (Zoom, Teams, Google Meet). Enables AI agents to send bots to online meetings, gather live transcripts, speak text, and send messages in the meeting chat.\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[JSON](https://github.com/kehvinbehvin/json-mcp-filter)** - JSON schema generation and filtering server with TypeScript type creation optimised for retrieving relevant context JSON data using quicktype-core and support for shape-based data extraction, nested object filtering, and array processing operations.\n- **[JSON to Excel by WTSolutions](https://github.com/he-yang/json-to-excel-mcp)** - Converting JSON into CSV format string from (1) JSON data, (2) URLs pointing to publiclly available .json files.\n- **[JSON2Video MCP](https://github.com/omergocmen/json2video-mcp-server)** - A Model Context Protocol (MCP) server implementation for programmatically generating videos using the json2video API. This server exposes powerful video generation and status-checking tools for use with LLMs, agents, or any MCP-compatible client.\n- **[jupiter-mcp](https://github.com/kukapay/jupiter-mcp)** - An MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API.\n- **[Jupyter MCP Server](https://github.com/datalayer/jupyter-mcp-server)** – Real-time interaction with Jupyter Notebooks, allowing AI to edit, document and execute code for data analysis, visualization etc. Compatible with any Jupyter deployment (local, JupyterHub, ...).\n- **[Jupyter Notebook](https://github.com/jjsantos01/jupyter-notebook-mcp)** - connects Jupyter Notebook to Claude AI, allowing Claude to directly interact with and control Jupyter Notebooks. This integration enables AI-assisted code execution, data analysis, visualization, and more.\n- **[k8s-multicluster-mcp](https://github.com/razvanmacovei/k8s-multicluster-mcp)** - An MCP server for interact with multiple Kubernetes clusters simultaneously using multiple kubeconfig files.\n- **[Kafka](https://github.com/tuannvm/kafka-mcp-server)** - A Model Context Protocol (MCP) server for Apache Kafka implemented in Go, leveraging [franz-go](https://github.com/twmb/franz-go).\n- **[Kafka Schema Registry MCP](https://github.com/aywengo/kafka-schema-reg-mcp)** \\ - A comprehensive MCP server for Kafka Schema Registry with 48 tools, multi-registry support, authentication, and production safety features. Enables AI-powered schema management with enterprise-grade capabilities including schema contexts, migration tools, and comprehensive export capabilities.\n- **[kafka-mcp](https://github.com/shivamxtech/kafka-mcp)** - An MCP Server for Kafka clusters to interact with kafka environment via tools on messages, topics, offsets, partitions for consumer and producers along with seamless integration with MCP clients.\n- **[Keycloak](https://github.com/idoyudha/mcp-keycloak)** - The Keycloak MCP Server designed for agentic applications to manage and search data in Keycloak efficiently.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Keycloak MCP Server](https://github.com/sshaaf/keycloak-mcp-server)** - designed to work with Keycloak for identity and access management, with about 40+ tools covering, Users, Realms, Clients, Roles, Groups, IDPs, Authentication. Native builds available.\n- **[Kibana MCP](https://github.com/TocharianOU/mcp-server-kibana.git)** (by TocharianOU) - A community-maintained MCP server implementation that allows any MCP-compatible client to access and manage Kibana instances through natural language or programmatic requests.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[KiCad MCP](https://github.com/lamaalrajih/kicad-mcp)** - MCP server for KiCad on Mac, Windows, and Linux.\n- **[kill-process-mcp](https://github.com/misiektoja/kill-process-mcp)** - List and terminate OS processes via natural language queries\n- **[Kindred Offers & Discounts MCP](https://github.com/kindred-app/mcp-server-kindred-offers)** (by kindred.co) - This MCP server allows you to get live deals and offers/coupons from e-commerce merchant sites all over the world.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kokoro TTS](https://github.com/mberg/kokoro-tts-mcp)** - Use Kokoro text to speech to convert text to MP3s with optional autoupload to S3.\n- **[Kong Konnect](https://github.com/Kong/mcp-konnect)** - A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.\n- **[Korea Stock Analyzer](https://github.com/Mrbaeksang/korea-stock-analyzer-mcp)** - Analyze Korean stocks (KOSPI/KOSDAQ) with 6 legendary investment strategies including Buffett, Lynch, Graham, Greenblatt, Fisher, and Templeton.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Kubernetes and OpenShift](https://github.com/manusa/kubernetes-mcp-server)** - A powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for any Kubernetes resource, this server provides specialized tools to interact with your cluster.\n- **[KubeSphere](https://github.com/kubesphere/ks-mcp-server)** - The KubeSphere MCP Server is a Model Context Protocol(MCP) server that provides integration with KubeSphere APIs, enabling to get resources from KubeSphere. Divided into four tools modules: Workspace Management, Cluster Management, User and Roles, Extensions Center.\n- **[Kukapay MCP Servers](https://github.com/kukapay/kukapay-mcp-servers)** - A comprehensive suite of Model Context Protocol (MCP) servers dedicated to cryptocurrency, blockchain, and Web3 data aggregation, analysis, and services from Kukapay.\n- **[kwrds.ai](https://github.com/mkotsollaris/kwrds_ai_mcp)** - Keyword research, people also ask, SERP and other SEO tools for [kwrds.ai](https://www.kwrds.ai/)\n- **[KYC-mcp-server](https://github.com/vishnurudra-ai/KYC-mcp-server)** - Know Your Computer (KYC) - MCP Server compatible with Claude Desktop. Comprehensive system diagnostics for Windows, Mac OS and Linux operating system with AI-powered recommendations.\n- **[Langflow-DOC-QA-SERVER](https://github.com/GongRzhe/Langflow-DOC-QA-SERVER)** - A Model Context Protocol server for document Q&A powered by Langflow. It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.\n- **[Language Server](https://github.com/isaacphi/mcp-language-server)** - MCP Language Server helps MCP enabled clients navigate codebases more easily by giving them access to semantic tools like get definition, references, rename, and diagnostics.\n- **[Lark(Feishu)](https://github.com/kone-net/mcp_server_lark)** - A Model Context Protocol(MCP) server for Lark(Feishu) sheet, message, doc and etc.\n- **[Lazy Toggl MCP](https://github.com/movstox/lazy-toggl-mcp)** - Simple unofficial MCP server to track time via Toggl API\n- **[lean-lsp-mcp](https://github.com/oOo0oOo/lean-lsp-mcp)** - Interact with the [Lean theorem prover](https://lean-lang.org/) via the Language Server Protocol.\n- **[librenms-mcp](https://github.com/mhajder/librenms-mcp)** - MCP server for [LibreNMS](https://www.librenms.org/) management\n- **[libvirt-mcp](https://github.com/MatiasVara/libvirt-mcp)** - Allows LLM to interact with libvirt thus enabling to create, destroy or list the Virtual Machines in a system.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[LINE](https://github.com/amornpan/py-mcp-line)** (by amornpan) - Implementation for LINE Bot integration that enables Language Models to read and analyze LINE conversations through a standardized interface. Features asynchronous operation, comprehensive logging, webhook event handling, and support for various message types.\n- **[Linear](https://github.com/tacticlaunch/mcp-linear)** - Interact with Linear project management system.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[Linear (Go)](https://github.com/geropl/linear-mcp-go)** - Allows LLM to interact with Linear's API via a single static binary.\n- **[Linear MCP](https://github.com/anoncam/linear-mcp)** - Full blown implementation of the Linear SDK to support comprehensive Linear management of projects, initiatives, issues, users, teams and states.\n- **[Linked API MCP](https://github.com/Linked-API/linkedapi-mcp)** - MCP server that lets AI assistants control LinkedIn accounts and retrieve real-time data.\n- **[Listmonk MCP Server](https://github.com/rhnvrm/listmonk-mcp)** (by rhnvrm) - Full API coverage of [Listmonk](https://github.com/knadh/listmonk) email marketing FOSS.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[lldb-mcp](https://github.com/stass/lldb-mcp)** - A Model Context Protocol server for LLDB that provides LLM-driven debugging.\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[Local History](https://github.com/xxczaki/local-history-mcp)** – MCP server for accessing VS Code/Cursor's Local History.\n- **[Locust](https://github.com/QAInsights/locust-mcp-server)** - Allows running and analyzing Locust tests using MCP compatible clients.\n- **[Loki](https://github.com/scottlepp/loki-mcp)** - Golang based MCP Server to query logs from [Grafana Loki](https://github.com/grafana/loki).\n- **[Loki MCP Server](https://github.com/mo-silent/loki-mcp-server)** - Python based MCP Server for querying and analyzing logs from Grafana Loki with advanced filtering and authentication support.\n- **[LottieFiles](https://github.com/junmer/mcp-server-lottiefiles)** - Searching and retrieving Lottie animations from [LottieFiles](https://lottiefiles.com/)\n- **[lsp-mcp](https://github.com/Tritlo/lsp-mcp)** - Interact with Language Servers usint the Language Server Protocol to provide additional context information via hover, code actions and completions.\n- **[Lspace](https://github.com/Lspace-io/lspace-server)** - Turn scattered ChatGPT/Claude/Cursor conversations into persistent, searchable knowledge.\n- **[lucene-mcp-server](https://github.com/VivekKumarNeu/MCP-Lucene-Server)** - spring boot server using Lucene for fast document search and management.\n- **[lucid-mcp-server](https://github.com/smartzan63/lucid-mcp-server)** – An MCP server for Lucidchart and Lucidspark: connect, search, and obtain text representations of your Lucid documents and diagrams via LLM - driven AI Vision analysis. [npm](https://www.npmjs.com/package/lucid-mcp-server)\n- **[LunarCrush Remote MCP](https://github.com/lunarcrush/mcp-server)** - Get the latest social metrics and posts for both current live social context as well as historical metrics in LLM and token optimized outputs. Ideal for automated trading / financial advisory.\n- **[mac-messages-mcp](https://github.com/carterlasalle/mac_messages_mcp)** - An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.\n- **[Maestro MCP](https://github.com/maestro-org/maestro-mcp)** - An MCP server for interacting with Bitcoin via the Maestro RPC API.\n- **[Magg: The MCP Aggregator](https://github.com/sitbon/magg)** - A meta-MCP server that acts as a universal hub, allowing LLMs to autonomously discover, install, and orchestrate multiple MCP servers - essentially giving AI assistants the power to extend their own capabilities on-demand. Includes `mbro`, a powerful CLI MCP server browser with scripting capability.\n- **[Mailchimp MCP](https://github.com/AgentX-ai/mailchimp-mcp)** - Allows AI agents to interact with the Mailchimp API (read-only)\n- **[MalwareBazaar_MCP](https://github.com/mytechnotalent/MalwareBazaar_MCP)** (by Kevin Thomas) - An AI-driven MCP server that autonomously interfaces with MalwareBazaar, delivering real-time threat intel and sample metadata for authorized cybersecurity research workflows.\n- **[Mandoline](https://github.com/mandoline-ai/mandoline-mcp-server)** - Enable AI assistants to reflect on, critique, and continuously improve their own performance using Mandoline's evaluation framework.\n- **[Matrix](https://github.com/mjknowles/matrix-mcp-server)** - Interact with a Matrix homeserver.\n- **[man-mcp-server](https://github.com/guyru/man-mcp-server)** - MCP to search and access man pages on the local machine.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[Markdown2doc](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/pandoc)** - Convert between various file formats using Pandoc\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[market-fiyati](https://github.com/mtcnbzks/market-fiyati-mcp-server)** - The MCP server for marketfiyati.org.tr, offering grocery price search and comparison across Turkish markets.)\n- **[Markitdown](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/markitdown)** - Convert files to Markdown\n- **[Masquerade](https://github.com/postralai/masquerade)** - Redact sensitive information from your PDF documents before sending them to Claude. Masquerade serves as a privacy firewall for LLMs.\n- **[MasterGo](https://github.com/mastergo-design/mastergo-magic-mcp)** - The server designed to connect MasterGo design tools with AI models. It enables AI models to directly retrieve DSL data from MasterGo design files.\n- **[Matlab-MCP-Tools](https://github.com/neuromechanist/matlab-mcp-tools)** - An MCP to write and execute MATLAB scripts, maintain workspace context between MCP calls, visualize plots, and perform section-by-section analysis of MATLAB code with full access to MATLAB's computational capabilities.\n- **[Maton](https://github.com/maton-ai/agent-toolkit/tree/main/modelcontextprotocol)** - Connect to your SaaS tools like HubSpot, Salesforce, and more.\n- **[Maven Tools MCP](https://github.com/arvindand/maven-tools-mcp)** - Maven Central dependency intelligence for JVM build tools. Supports all build tools (Maven, Gradle, SBT, Mill) with Context7 integration for documentation support.\n- **[MCP-Airflow-API](https://github.com/call518/MCP-Airflow-API)** - Model Context Protocol (MCP) server for Apache Airflow API integration. Provides comprehensive tools for managing Airflow clusters including service operations, configuration management, status monitoring, and request tracking.\n- **[mcpcap](https://github.com/mcpcap/mcpcap)** - A modular Python MCP (Model Context Protocol) Server for analyzing PCAP files.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Create](https://github.com/tesla0225/mcp-create)** - A dynamic MCP server management service that creates, runs, and manages Model Context Protocol servers on-the-fly.\n- **[MCP Documentation Server](https://github.com/andrea9293/mcp-documentation-server)** - Server that provides local-first document management and semantic search via embeddings or Gemini AI (recommended). Optimized for performance with disk persistence, an in-memory index, and caching.\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[MCP ProjectManage OpenProject](https://github.com/boma086/mcp-projectmanage-openproject)** - This server provides the MCP service for project weekly reports, with project management information supplied by OpenProject.\n- **[MCP Proxy Server](https://github.com/TBXark/mcp-proxy)** - An MCP proxy server that aggregates and serves multiple MCP resource servers through a single HTTP server.\n- **[MCP Server Creator](https://github.com/GongRzhe/MCP-Server-Creator)** - A powerful Model Context Protocol (MCP) server that creates other MCP servers! This meta-server provides tools for dynamically generating FastMCP server configurations and Python code.\n- **[MCP Server Generator](https://github.com/SerhatUzbas/mcp-server-generator)** - An MCP server that creates and manages  MCP servers! Helps both non-technical users and developers build custom JavaScript MCP servers with AI guidance, automatic dependency management, and Claude Desktop integration.\n- **[MCP STDIO to Streamable HTTP Adapter](https://github.com/pyroprompts/mcp-stdio-to-streamable-http-adapter)** - Connect to Streamable HTTP MCP Servers even if the MCP Client only supports STDIO.\n- **[MCP-Ambari-API](https://github.com/call518/MCP-Ambari-API)** - Model Context Protocol (MCP) server for Apache Ambari API integration. This project provides tools for managing Hadoop clusters, including service operations, configuration management, status monitoring, and request tracking.\n- **[MCP-OpenStack-Ops](https://github.com/call518/MCP-OpenStack-Ops)** - Professional OpenStack operations automation via MCP server. Specialized tools for cluster monitoring, instance management, volume control & network analysis. FastMCP + OpenStack SDK + Bearer auth. Claude Desktop ready. Perfect for DevOps & cloud automation.\n- **[MCP-PostgreSQL-Ops](https://github.com/call518/MCP-PostgreSQL-Ops)** - Model Context Protocol (MCP) server for Apache Ambari API integration. This project provides tools for managing Hadoop clusters, including service operations, configuration management, status monitoring, and request tracking.\n- **[mcp-containerd](https://github.com/jokemanfire/mcp-containerd)** - The containerd MCP implemented by Rust supports the operation of the CRI interface.\n- **[MCP-Database-Server](https://github.com/executeautomation/mcp-database-server)** - Fastest way to interact with your Database such as SQL Server, SQLite and PostgreSQL\n- **[mcp-grep](https://github.com/erniebrodeur/mcp-grep)** - Python-based MCP server that brings grep functionality to LLMs. Supports common grep features including pattern searching, case-insensitive matching, context lines, and recursive directory searches.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-local-rag](https://github.com/nkapila6/mcp-local-rag)** - \"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search.\n- **[mcp-mcp](https://github.com/wojtyniak/mcp-mcp)** - Meta-MCP Server that acts as a tool discovery service for MCP clients.\n- **[mcp-meme-sticky](https://github.com/nkapila6/mcp-meme-sticky)** - Make memes or stickers using MCP server for WhatsApp or Telegram.\n- **[mcp-memory-service](https://github.com/doobidoo/mcp-memory-service)** - Universal MCP memory service providing semantic memory search, persistent storage, and autonomous memory consolidation for AI assistants across 13+ AI applications.\n- **[MCP-NixOS](https://github.com/utensils/mcp-nixos)** - A Model Context Protocol server that provides AI assistants with accurate, real-time information about NixOS packages, system options, Home Manager settings, and nix-darwin macOS configurations.\n- **[mcp-open-library](https://github.com/8enSmith/mcp-open-library)** - A Model Context Protocol (MCP) server for the Open Library API that enables AI assistants to search for book and author information.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[mcp-read-website-fast](https://github.com/just-every/mcp-read-website-fast)** - Fast, token-efficient web content extraction that converts websites to clean Markdown. Features Mozilla Readability, smart caching, polite crawling with robots.txt support, and concurrent fetching with minimal dependencies.\n- **[mcp-salesforce](https://github.com/lciesielski/mcp-salesforce-example)** - MCP server with basic demonstration of interactions with your Salesforce instance\n- **[mcp-sanctions](https://github.com/madupay/mcp-sanctions)** - Screen individuals and organizations against global sanctions lists (OFAC, SDN, UN, etc). Query by prompt or document upload.\n- **[mcp-screenshot-website-fast](https://github.com/just-every/mcp-screenshot-website-fast)** - High-quality screenshot capture optimized for Claude Vision API. Automatically tiles full pages into 1072x1072 chunks (1.15 megapixels) with configurable viewports and wait strategies for dynamic content.\n- **[mcp-server-leetcode](https://github.com/doggybee/mcp-server-leetcode)** - Practice and retrieve problems from LeetCode. Automate problem retrieval, solutions, and insights for coding practice and competitions.\n- **[Mcp-Swagger-Server](https://github.com/zaizaizhao/mcp-swagger-server)** (by zaizaizhao) - This MCP server transforms OpenAPI specifications into MCP tools, enabling AI assistants to interact with REST APIs through standardized protocol\n- **[MCP Dynamic Tool Groups](https://github.com/ECF/MCPToolGroups)** - Example MCP servers that use [annotated](https://github.com/spring-ai-community/mcp-annotations) Java interfaces/classes as 'tool groups'.  Using standard MCP annotations, service implementations can then, at runtime, be used to generate tool specifications, and then dynamically added or removed from MCP servers.   The functionality is demonstrated in a sample tool group, but can be similarly used for any API or service.\n- **[mcp-vision](https://github.com/groundlight/mcp-vision)** - An MCP server exposing HuggingFace computer vision models such as zero-shot object detection as tools, enhancing the vision capabilities of large language or vision-language models.\n- **[mcp-weather](https://github.com/TimLukaHorstmann/mcp-weather)** - Accurate weather forecasts via the AccuWeather API (free tier available).\n- **[KnowAir Weather MCP](https://github.com/shuowang-ai/Weather-MCP)** - A comprehensive Model Context Protocol (MCP) server providing real-time weather data, air quality monitoring, forecasts, and astronomical information powered by Caiyun Weather API.\n- **[mcp-youtube-extract](https://github.com/sinjab/mcp_youtube_extract)** - A Model Context Protocol server for YouTube operations, extracting video information and transcripts with intelligent fallback logic. Features comprehensive logging, error handling, and support for both auto-generated and manual transcripts.\n- **[mcp_weather](https://github.com/isdaniel/mcp_weather_server)** - Get weather information from https://api.open-meteo.com API.\n- **[MCPfinder](https://github.com/mcpfinder/server)** - The AI Agent's \"App Store\": Discover, install, and monetize AI capabilities — all within the MCP ecosystem.\n- **[MCPIgnore Filesytem](https://github.com/CyberhavenInc/filesystem-mcpignore)** - A Data Security First filesystem MCP server that implements .mcpignore to prevent MCP clients from accessing sensitive data.\n- **[MCPJungle](https://github.com/mcpjungle/MCPJungle)** - Self-hosted MCP Registry and Gateway for enterprise AI Agents\n- **[Md2doc](https://github.com/Yorick-Ryu/md2doc-mcp)** - Convert Markdown text to DOCX format using an external conversion service\n- **[MeasureSpace MCP](https://github.com/MeasureSpace/measure-space-mcp-server)** - A free [Model Context Protocol (MCP) Server](https://smithery.ai/server/@MeasureSpace/measure-space-mcp-server) that provides global weather, climate, air quality forecast and geocoding services by [measurespace.io](https://measurespace.io).\n- **[MediaWiki](https://github.com/ProfessionalWiki/MediaWiki-MCP-Server)** - A Model Context Protocol (MCP) Server that interacts with any MediaWiki wiki\n- **[MediaWiki MCP adapter](https://github.com/lucamauri/MediaWiki-MCP-adapter)** - A custom Model Context Protocol adapter for MediaWiki and WikiBase APIs\n- **[medRxiv](https://github.com/JackKuo666/medRxiv-MCP-Server)** - Enable AI assistants to search and access medRxiv papers through a simple MCP interface.\n- **[mem0-mcp](https://github.com/mem0ai/mem0-mcp)** - A Model Context Protocol server for Mem0, which helps with managing coding preferences.\n- **[Membase](https://github.com/unibaseio/membase-mcp)** - Save and query your agent memory in distributed way by Membase.\n- **[Meme MCP](https://github.com/lidorshimoni/meme-mcp)** - Generate memes via AI using the Imgflip API through the Model Context Protocol.\n- **[memento-mcp](https://github.com/gannonh/memento-mcp)** - Knowledge graph memory system built on Neo4j with semantic search, temporal awareness.\n- **[Meta Ads Remote MCP](https://github.com/pipeboard-co/meta-ads-mcp)** - Remote MCP server to interact with Meta Ads API - access, analyze, and manage Facebook, Instagram, and other Meta platforms advertising campaigns.\n- **[MetaTrader MCP](https://github.com/ariadng/metatrader-mcp-server)** - Enable AI LLMs to execute trades using MetaTrader 5 platform.\n- **[Metricool MCP](https://github.com/metricool/mcp-metricool)** - A Model Context Protocol server that integrates with Metricool's social media analytics platform to retrieve performance metrics and schedule content across networks like Instagram, Facebook, Twitter, LinkedIn, TikTok and YouTube.\n- **[Microsoft 365](https://github.com/merill/lokka)** - (by Merill) A Model Context Protocol (MCP) server for Microsoft 365. Includes support for all services including Teams, SharePoint, Exchange, OneDrive, Entra, Intune and more. See [Lokka](https://lokka.dev/) for more details.\n- **[Microsoft 365](https://github.com/softeria/ms-365-mcp-server)** - MCP server that connects to Microsoft Office and the whole Microsoft 365 suite using Graph API (including Outlook/mail, files, Excel, calendar)\n- **[Microsoft 365](https://github.com/pnp/cli-microsoft365-mcp-server)** - Single MCP server that allows to manage many different areas of Microsoft 365, for example: Entra ID, OneDrive, OneNote, Outlook, Planner, Power Apps, Power Automate, Power Platform, SharePoint Embedded, SharePoint Online, Teams, Viva Engage, and many more.\n- **[Microsoft 365 Files (SharePoint/OneDrive)](https://github.com/godwin3737/mcp-server-microsoft365-filesearch)** (by godwin3737) - MCP server with tools to search and get file content from Microsoft 365 including Onedrive and SharePoint. Works with Documents (pdf/docx), Presentations, Spreadsheets and Images.\n- **[Microsoft Teams](https://github.com/InditexTech/mcp-teams-server)** - MCP server that integrates Microsoft Teams messaging (read, post, mention, list members and threads)\n- **[Mifos X](https://github.com/openMF/mcp-mifosx)** - An MCP server for the Mifos X Open Source Banking useful for managing clients, loans, savings, shares, financial transactions and generating financial reports.\n- **[Mikrotik](https://github.com/jeff-nasseri/mikrotik-mcp)** - Mikrotik MCP server which cover networking operations (IP, DHCP, Firewall, etc)\n- **[Mindmap](https://github.com/YuChenSSR/mindmap-mcp-server)** (by YuChenSSR) - A server that generates mindmaps from input containing markdown code.\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[Modao Proto MCP](https://github.com/modao-dev/modao-proto-mcp)** - AI-powered HTML prototype generation server that converts natural language descriptions into complete HTML code with modern design and responsive layouts. Supports design description expansion and seamless integration with Modao workspace.\n- **[Mobile MCP](https://github.com/mobile-next/mobile-mcp)** (by Mobile Next) - MCP server for Mobile(iOS/Android) automation, app scraping and development using physical devices or simulators/emulators.\n- **[Monday.com (unofficial)](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MongoDB & Mongoose](https://github.com/nabid-pf/mongo-mongoose-mcp)** - MongoDB MCP Server with Mongoose Schema and Validation.\n- **[MongoDB Lens](https://github.com/furey/mongodb-lens)** - Full Featured MCP Server for MongoDB Databases.\n- **[Monzo](https://github.com/BfdCampos/monzo-mcp-bfdcampos)** - Access and manage your Monzo bank accounts through natural language, including balance checking, pot management, transaction listing, and transaction annotation across multiple account types (personal, joint, flex).\n- **[Morningstar](https://github.com/Morningstar/morningstar-mcp-server)** - MCP Server to interact with Morningstar Research, Editorial and Datapoints\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-MCP](https://github.com/daobataotie/mssql-mcp)** (by daobataotie) - MSSQL MCP that refer to the official website's SQLite MCP for modifications to adapt to MSSQL\n- **[MSSQL-MCP-Node](https://github.com/mihai-dulgheru/mssql-mcp-node)** (by mihai - dulgheru) – Node.js MCP server for Microsoft SQL Server featuring auto-detected single / multi-database configs, execute-SQL and schema tools, robust Zod validation, and optional Express endpoints for local testing\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[Multi-Model Advisor](https://github.com/YuChenSSR/multi-ai-advisor-mcp)** - A Model Context Protocol (MCP) server that orchestrates queries across multiple Ollama models, synthesizing their insights to deliver a comprehensive and multifaceted AI perspective on any given query.\n- **[Multicluster-MCP-Sever](https://github.com/yanmxa/multicluster-mcp-server)** - The gateway for GenAI systems to interact with multiple Kubernetes clusters.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[MySQL-Server](https://github.com/tonycai/mcp-mysql-server)** (by TonyCai) - MySQL Database Integration using Python script with configurable access controls and schema inspection, usng stdio mode to suitable local deployment, you can run it in docker container.\n- **[n8n](https://github.com/leonardsellem/n8n-mcp-server)** - This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, and deleting workflows, as well as monitoring their execution status.\n- **[Nacos MCP Router](https://github.com/nacos-group/nacos-mcp-router)** - This MCP(Model Context Protocol) Server provides tools to search, install, proxy other MCP servers.\n- **[NASA](https://github.com/ProgramComputer/NASA-MCP-server)** (by ProgramComputer) - Access to a unified gateway of NASA's data sources including but not limited to APOD, NEO, EPIC, GIBS.\n- **[NASA Image MCP Server](https://github.com/adithya1012/NASA-MCP-Server/blob/main/README.md)** - MCP server providing access to NASA's visual data APIs including Mars Rover photos, Earth satellite imagery (EPIC/GIBS), and Astronomy picture of the day. Features built-in image analysis tools with automatic format detection, compression, and base64 conversion for LLM integration.\n- **[Nasdaq Data Link](https://github.com/stefanoamorelli/nasdaq-data-link-mcp)** (by stefanoamorelli) - An MCP server to access, explore, and interact with Nasdaq Data Link's extensive and valuable financial and economic datasets.\n- **[National Parks](https://github.com/KyrieTangSheng/mcp-server-nationalparks)** - The server provides latest information of park details, alerts, visitor centers, campgrounds, hiking trails, and events for U.S. National Parks.\n- **[NAVER](https://github.com/pfldy2850/py-mcp-naver)** (by pfldy2850) - This MCP server provides tools to interact with various Naver services, such as searching blogs, news, books, and more.\n- **[Naver](https://github.com/isnow890/naver-search-mcp)** (by isnow890) - MCP server for Naver Search API integration, supporting blog, news, shopping search and DataLab analytics features.\n- **[NBA](https://github.com/Taidgh-Robinson/nba-mcp-server)** - This MCP server provides tools to fetch recent and historical NBA games including basic and advanced statistics.\n- **[NCI GDC](https://github.com/QuentinCody/nci-gdc-mcp-server)** - Unofficial MCP server for the National Cancer Institute's Genomic Data Commons (GDC), providing access to harmonized cancer genomic and clinical data for oncology research.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Netbird](https://github.com/aantti/mcp-netbird)** - List and analyze Netbird network peers, groups, policies, and more.\n- **[NetMind ParsePro](https://github.com/protagolabs/Netmind-Parse-PDF-MCP)** - The PDF Parser AI service, built and customized by the [NetMind](https://www.netmind.ai/) team.\n- **[Nikto MCP](https://github.com/weldpua2008/nikto-mcp)** (by weldpua2008) - A secure MCP server that enables AI agents to interact with Nikto web server scanner](- use with npx or docker).\n- **[NocoDB](https://github.com/edwinbernadus/nocodb-mcp-server)** - Read and write access to NocoDB database.\n- **[Node Code Sandbox](https://github.com/alfonsograziano/node-code-sandbox-mcp)** – A Node.js MCP server that spins up isolated Docker - based sandboxes for executing JavaScript snippets with on-the-fly npm dependency installation\n- **[nomad-mcp](https://github.com/kocierik/mcp-nomad)** - A server that provides a set of tools for managing Nomad clusters through the MCP.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[NPM Plus](https://github.com/shacharsol/js-package-manager-mcp)** - AI-powered JavaScript package management with security scanning, bundle analysis, and intelligent dependency management for MCP-compatible editors.\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[ntfy-mcp](https://github.com/teddyzxcv/ntfy-mcp)** (by teddyzxcv) - The MCP server that keeps you informed by sending the notification on phone using ntfy\n- **[ntfy-me-mcp](https://github.com/gitmotion/ntfy-me-mcp)** (by gitmotion) - An ntfy MCP server for sending/fetching ntfy notifications to your self-hosted ntfy server from AI Agents 📤 (supports secure token auth & more - use with npx or docker!)\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[OceanBase](https://github.com/yuanoOo/oceanbase_mcp_server)** - (by yuanoOo) A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases.\n- **[Octocode](https://github.com/bgauryy/octocode-mcp)** - (by Guy Bary) AI-powered developer assistant that enables advanced code research, analysis and discovery across GitHub and NPM realms in realtime\n- **[Odoo](https://github.com/ivnvxd/mcp-server-odoo)** - Connect AI assistants to Odoo ERP systems for business data access and workflow automation.\n- **[Office-PowerPoint-MCP-Server](https://github.com/GongRzhe/Office-PowerPoint-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft PowerPoint documents.\n- **[Office-Visio-MCP-Server](https://github.com/GongRzhe/Office-Visio-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Visio documents.\n- **[Office-Word-MCP-Server](https://github.com/GongRzhe/Office-Word-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Word documents.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OKX-MCP-Server](https://github.com/memetus/okx-mcp-playground)** - An MCP server provides various blockchain data and market price data via the OKX API. The server enables Claude to perform operations like retrieve assets prices, transaction data, account history data and trade instruction data.\n- **[OneNote](https://github.com/rajvirtual/MCP-Servers/tree/master/onenote)** - (by Rajesh Vijay) An MCP server that connects to Microsoft OneNote using the Microsoft Graph API. Reading notebooks, sections, and pages from OneNote,Creating new notebooks, sections, and pages in OneNote.\n- **[Onyx MCP Sandbox](https://github.com/avd1729/Onyx)** – (by Aravind) A secure MCP server that executes code in isolated Docker sandboxes. Supports Python, Java, C, C++, JavaScript, and Rust. Provides the `run_code` tool, enforces CPU/memory limits, includes comprehensive tests, and detailed setup instructions.\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[OpenAI WebSearch MCP](https://github.com/ConechoAI/openai-websearch-mcp)** - This is a Python-based MCP server that provides OpenAI `web_search` built-in tool.\n- **[OpenAlex.org MCP](https://github.com/drAbreu/alex-mcp)** - Professional MCP server providing ML-powered author disambiguation and comprehensive researcher profiles using the OpenAlex database.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenAPI AnyApi](https://github.com/baryhuang/mcp-server-any-openapi)** - Interact with large [OpenAPI](https://www.openapis.org/) docs using built-in semantic search for endpoints. Allows for customizing the MCP server prefix.\n- **[OpenAPI Schema](https://github.com/hannesj/mcp-openapi-schema)** - Allow LLMs to explore large [OpenAPI](https://www.openapis.org/) schemas without bloating the context.\n- **[OpenAPI Schema Explorer](https://github.com/kadykov/mcp-openapi-schema-explorer)** - Token-efficient access to local or remote OpenAPI/Swagger specs via MCP Resources.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenCV](https://github.com/GongRzhe/opencv-mcp-server)** - An MCP server providing OpenCV computer vision capabilities. This allows AI assistants and language models to access powerful computer vision tools.\n- **[OpenDota](https://github.com/asusevski/opendota-mcp-server)** - Interact with OpenDota API to retrieve Dota 2 match data, player statistics, and more.\n- **[OpenLink Generic Java Database Connectivity](https://github.com/OpenLinkSoftware/mcp-jdbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers)\n- **[OpenLink Generic Open Database Connectivity](https://github.com/OpenLinkSoftware/mcp-odbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers)\n- **[OpenLink Generic Python Open Database Connectivity](https://github.com/OpenLinkSoftware/mcp-pyodbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers) for PyODBC\n- **[OpenLink Generic SQLAlchemy Object-Relational Database Connectivity for PyODBC](https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server)** - Generic Database Management System (DBMS) access via SQLAlchemy (PyODBC) Connectors (Drivers)\n- **[OpenMetadata](https://github.com/yangkyeongmo/mcp-server-openmetadata)** - MCP Server for OpenMetadata, an open-source metadata management platform.\n- **[OpenNeuro](https://github.com/QuentinCody/open-neuro-mcp-server)** - Unofficial MCP server for OpenNeuro, providing access to open neuroimaging datasets, study metadata, and brain imaging data for neuroscience research and analysis.\n- **[OpenReview](https://github.com/anyakors/openreview-mcp-server)** - An MCP server for [OpenReview](https://openreview.net/) to fetch, read and save manuscripts from AI/ML conferences.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[OpenStack](https://github.com/wangsqly0407/openstack-mcp-server)** - MCP server implementation that provides OpenStack interaction.\n- **[Open Targets](https://github.com/QuentinCody/open-targets-mcp-server)** - Unofficial MCP server for the Open Targets Platform, providing access to target-disease associations, drug discovery data, and therapeutic hypothesis generation for biomedical research.\n- **[OpenWeather](https://github.com/mschneider82/mcp-openweather)** - Interact with the free openweathermap API to get the current and forecast weather for a location.\n- **[OpenZIM MCP](https://github.com/cameronrye/openzim-mcp)** - Modern, secure, and high-performance MCP server that enables AI models to access and search ZIM format knowledge bases offline, including Wikipedia and educational content archives.\n- **[Operative WebEvalAgent](https://github.com/Operative-Sh/web-eval-agent)** (by [Operative.sh](https://www.operative.sh)) - An MCP server to test, debug, and fix web applications autonomously.\n- **[OPNSense MCP](https://github.com/vespo92/OPNSenseMCP)** - MCP Server for OPNSense Firewall Management and API access\n- **[OpenAI GPT Image](https://github.com/SureScaleAI/openai-gpt-image-mcp)** - OpenAI GPT image generation/editing MCP server.\n- **[Optimade MCP](https://github.com/dianfengxiaobo/optimade-mcp-server)** - An MCP server conducts real-time material science data queries with the Optimade database (for example, elemental composition, crystal structure).\n- **[Oracle](https://github.com/marcelo-ochoa/servers)** (by marcelo-ochoa) - Oracle Database integration in NodeJS with configurable access controls, query explain, stats and schema inspection\n- **[Oracle Cloud Infrastructure (OCI)](https://github.com/karthiksuku/oci-mcp)** (by karthiksukumar) - Python MCP server for OCI infrastructure (Compute, Autonomous Database, Object Storage). Read-heavy by default with safe instance actions (start/stop/reset). Includes Claude Desktop config and `.env` compartment scoping.\n- **[Oura MCP server](https://github.com/tomekkorbak/oura-mcp-server)** - MCP server for Oura API to retrieve one's sleep data\n- **[Oura Ring](https://github.com/rajvirtual/oura-mcp-server)** (by Rajesh Vijay) - MCP Server to access and analyze your Oura Ring data. It provides a structured way to fetch and understand your health metrics.\n- **[Outline](https://github.com/Vortiago/mcp-outline)** - MCP Server to interact with [Outline](https://www.getoutline.com) knowledge base to search, read, create, and manage documents and their content, access collections, add comments, and manage document backlinks.\n- **[Outlook Mail + Calendar + OneDrive](https://github.com/Norcim133/OutlookMCPServer) - Virtual assistant with Outlook Mail, Calendar, and early OneDrive support (requires Azure admin).\n- **[Pacman](https://github.com/oborchers/mcp-server-pacman)** - An MCP server that provides package index querying capabilities. This server is able to search and retrieve information from package repositories like PyPI, npm, crates.io, Docker Hub, and Terraform Registry.\n- **[pancakeswap-poolspy-mcp](https://github.com/kukapay/pancakeswap-poolspy-mcp)** - An MCP server that tracks newly created liquidity pools on Pancake Swap.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[Paradex MCP](https://github.com/sv/mcp-paradex-py)** - MCP native server for interacting with Paradex platform, including fully features trading.\n- **[Parliament MCP]([https://github.com/sv/mcp-paradex-py](https://github.com/i-dot-ai/parliament-mcp))** - MCP server for querying UK parliamentary data.\n- **[PDF reader MCP](https://github.com/gpetraroli/mcp_pdf_reader)** - MCP server to read and search text in a local PDF file.\n- **[PDF Tools MCP](https://github.com/Sohaib-2/pdf-mcp-server)** - Comprehensive PDF manipulation toolkit (merge, split, encrypt, optimize and much more)\n- **[PDMT](https://github.com/paiml/pdmt)** - Pragmatic Deterministic MCP Templating - High-performance deterministic templating library with comprehensive todo validation, quality enforcement, and 0.0 temperature generation for reproducible outputs.\n- **[Peacock for VS Code](https://github.com/johnpapa/peacock-mcp)** - MCP Server for the Peacock extension for VS Code, coloring your world, one Code editor at a time. The main goal of the project is to show how an MCP server can be used to interact with APIs.\n- **[persistproc](https://github.com/irskep/persistproc)** - MCP server + command line tool that allows agents to see & control long-running processes like web servers.\n- **[Pexels](https://github.com/garylab/pexels-mcp-server)** - A MCP server providing access to Pexels Free Image API, enabling seamless search, retrieval, and download of high-quality royalty-free images.\n- **[Pharos](https://github.com/QuentinCody/pharos-mcp-server)** - Unofficial MCP server for the Pharos database by the National Center for Advancing Translational Sciences (NCATS), providing access to target, drug, and disease information for drug discovery research.\n- **[Phone MCP](https://github.com/hao-cyber/phone-mcp)** - 📱 A powerful plugin that lets you control your Android phone. Enables AI agents to perform complex tasks like automatically playing music based on weather or making calls and sending texts.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Pinner MCP](https://github.com/safedep/pinner-mcp)** - An MCP server for pinning GitHub Actions and container base images to their immutable SHA hashes to prevent supply chain attacks.\n- **[Pixelle MCP](https://github.com/AIDC-AI/Pixelle-MCP)** - An omnimodal AIGC framework that seamlessly converts ComfyUI workflows into MCP tools with zero code, enabling full-modal support for Text, Image, Sound, and Video generation with Chainlit-based web interface.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Plane](https://github.com/kelvin6365/plane-mcp-server)** - This MCP Server will help you to manage projects and issues through Plane's API\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Podbean](https://github.com/amurshak/podbeanMCP)** - MCP server for managing your podcasts, episodes, and analytics through the Podbean API. Allows for updating, adding, deleting podcasts, querying show description, notes, analytics, and more.\n- **[Polarsteps](https://github.com/remuzel/polarsteps-mcp)** - An MCP server to help you review your previous Trips and plan new ones!\n- **[PostgreSQL](https://github.com/ahmedmustahid/postgres-mcp-server)** - A PostgreSQL MCP server offering dual HTTP/Stdio transports for database schema inspection and read-only query execution with session management and Podman(or Docker) support.\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Powerdrill](https://github.com/powerdrillai/powerdrill-mcp)** - Interact with Powerdrill datasets, authenticated with [Powerdrill](https://powerdrill.ai) User ID and Project API Key.\n- **[Prefect](https://github.com/allen-munsch/mcp-prefect)** - MCP Server for workflow orchestration and ELT/ETL with Prefect Server, and Prefect Cloud [https://www.prefect.io/] using the `prefect` python client.\n- **[Productboard](https://github.com/kenjihikmatullah/productboard-mcp)** - Integrate the Productboard API into agentic workflows via MCP.\n- **[Prometheus](https://github.com/pab1it0/prometheus-mcp-server)** - Query and analyze Prometheus - open-source monitoring system.\n- **[Prometheus (TypeScript)](https://github.com/yanmxa/prometheus-mcp-server)** - Enable AI assistants to query Prometheus using natural language with TypeScript implementation.\n- **[Prometheus (Golang)](https://github.com/tjhop/prometheus-mcp-server/)** - A Prometheus MCP server with full API support for comprehensive management and deep interaction with Prometheus beyond basic query support. Written in go, it is a single binary install that is capable of STDIO, SSE, and HTTP transports for complex deployments. \n- **[PubChem](https://github.com/sssjiang/pubchem_mcp_server)** - extract drug information from pubchem API.\n- **[PubMed](https://github.com/JackKuo666/PubMed-MCP-Server)** - Enable AI assistants to search, access, and analyze PubMed articles through a simple MCP interface.\n- **[Pulumi](https://github.com/dogukanakkaya/pulumi-mcp-server)** - MCP Server to Interact with Pulumi API, creates and lists Stacks\n- **[Puppeteer vision](https://github.com/djannot/puppeteer-vision-mcp)** - Use Puppeteer to browse a webpage and return a high quality Markdown. Use AI vision capabilities to handle cookies, captchas, and other interactive elements automatically.\n- **[Pushover](https://github.com/ashiknesin/pushover-mcp)** - Send instant notifications to your devices using [Pushover.net](https://pushover.net/)\n- **[py-mcp-qdrant-rag](https://github.com/amornpan/py-mcp-qdrant-rag)** (by amornpan) - A Model Context Protocol server implementation that provides RAG capabilities through Qdrant vector database integration, enabling AI agents to perform semantic search and document retrieval with local or cloud-based embedding generation support across Mac, Linux, and Windows platforms.\n- **[pydantic/pydantic-ai/mcp-run-python](https://github.com/pydantic/pydantic-ai/tree/main/mcp-run-python)** - Run Python code in a secure sandbox via MCP tool calls, powered by Deno and Pyodide\n- **[Python CLI MCP](https://github.com/ofek/pycli-mcp)** - Interact with local Python command line applications.\n- **[QGIS](https://github.com/jjsantos01/qgis_mcp)** - connects QGIS to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.\n- **[Qiniu MCP Server](https://github.com/qiniu/qiniu-mcp-server)** - The Model Context Protocol (MCP) Server built on Qiniu Cloud products supports users in accessing Qiniu Cloud Storage, intelligent multimedia services, and more through this MCP Server within the context of AI large model clients.\n- **[QuantConnect](https://github.com/taylorwilsdon/quantconnect-mcp)** - QuantConnect Algorithmic Trading Platform Orchestration MCP - Agentic LLM Driven Trading Strategy Design, Research & Implementation.\n- **[Quarkus](https://github.com/quarkiverse/quarkus-mcp-servers)** - MCP servers for the Quarkus Java framework.\n- **[QuickChart](https://github.com/GongRzhe/Quickchart-MCP-Server)** - A Model Context Protocol server for generating charts using QuickChart.io\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAE](https://github.com/rae-api-com/rae-mcp)** - MPC Server to connect your preferred model with rae-api.com, Roya Academy of Spanish Dictionary\n- **[RAG Local](https://github.com/renl/mcp-rag-local)** - This MCP server for storing and retrieving text passages locally based on their semantic meaning.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Raindrop.io](https://github.com/hiromitsusasaki/raindrop-io-mcp-server)** - An integration that allows LLMs to interact with Raindrop.io bookmarks using the Model Context Protocol (MCP).\n- **[Random Number](https://github.com/zazencodes/random-number-mcp)** - Provides LLMs with essential random generation abilities, built entirely on Python's standard library.\n- **[RCSB PDB](https://github.com/QuentinCody/rcsb-pdb-mcp-server)** - Unofficial MCP server for the Research Collaboratory for Structural Bioinformatics Protein Data Bank (RCSB PDB), providing access to 3D protein structures, experimental data, and structural bioinformatics information.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redbee](https://github.com/Tamsi/redbee-mcp)** - Redbee MCP server that provides support for interacting with Redbee API.\n- **[Redfish](https://github.com/nokia/mcp-redfish)** - Redfish MCP server that provides support for interacting with [DMTF Redfish API](https://www.dmtf.org/standards/redfish).\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[RedNote MCP](https://github.com/ifuryst/rednote-mcp)** - MCP server for accessing RedNote(XiaoHongShu, xhs) content\n- **[Reed Jobs](https://github.com/kld3v/reed_jobs_mcp)** - Search and retrieve job listings from Reed.co.uk.\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Resend](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/resend)** - Send email using Resend services\n- **[Revit MCP](https://github.com/revit-mcp)** - A service implementing the MCP protocol for Autodesk Revit.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Riot Games](https://github.com/jifrozen0110/mcp-riot)** - MCP server for League of Legends – fetch player info, ranks, champion stats, and match history via Riot API.\n- **[Rohlik](https://github.com/tomaspavlin/rohlik-mcp)** - Shop groceries across the Rohlik Group platforms (Rohlik.cz, Knuspr.de, Gurkerl.at, Kifli.hu, Sezamo.ro)\n- **[Rquest](https://github.com/xxxbrian/mcp-rquest)** - An MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures.\n- **[Rust MCP Filesystem](https://github.com/rust-mcp-stack/rust-mcp-filesystem)** - Fast, asynchronous MCP server for efficient handling of various filesystem operations built with the power of Rust.\n- **[SafetySearch](https://github.com/surabhya/SafetySearch)** - Real-time FDA food safety data: recalls, adverse events, analysis.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Salesforce MCP (AiondaDotCom)](https://github.com/AiondaDotCom/mcp-salesforce)** - Universal Salesforce integration with OAuth authentication, smart learning system, comprehensive backup capabilities, and full CRUD operations for any Salesforce org including custom objects and fields.\n- **[Salesforce MCP Server](https://github.com/tsmztech/mcp-server-salesforce)** - Comprehensive Salesforce integration with tools for querying records, executing Apex, managing fields/objects, and handling debug logs\n- **[Scanova MCP Server](https://github.com/trycon/scanova-mcp)** - MCP server for creating and managing QR codes using the [Scanova](https://scanova.io) API. Provides tools for generating, managing, and downloading QR codes.\n- **[SchemaCrawler](https://github.com/schemacrawler/SchemaCrawler-MCP-Server-Usage)** - Connect to any relational database, and be able to get valid SQL, and ask questions like what does a certain column prefix mean.\n- **[SchemaFlow](https://github.com/CryptoRadi/schemaflow-mcp-server)** - Real-time PostgreSQL & Supabase database schema access for AI-IDEs via Model Context Protocol. Provides live database context through secure SSE connections with three powerful tools: get_schema, analyze_database, and check_schema_alignment. [SchemaFlow](https://schemaflow.dev)\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - An MCP server to search for scholarly and academic articles.\n- **[scrapling-fetch](https://github.com/cyberchitta/scrapling-fetch-mcp)** - Access text content from bot-protected websites. Fetches HTML/markdown from sites with anti-automation measures using Scrapling.\n- **[Screeny](https://github.com/rohanrav/screeny)** - Privacy-first macOS MCP server that provides visual context for AI agents through window screenshots\n- **[ScriptFlow](https://github.com/yanmxa/scriptflow-mcp)** - Transform complex, repetitive AI interactions into persistent, executable scripts with comprehensive script management (add, edit, remove, list, search, execute) and multi-language support (Bash, Python, Node.js, TypeScript).\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[SearXNG](https://github.com/erhwenkuo/mcp-searxng)** - An MCP server provide web searching via [SearXNG](https://docs.searxng.org) & retrieve url as makrdown.\n- **[SearXNG Public](https://github.com/pwilkin/mcp-searxng-public)** - A Model Context Protocol Server for retrieving data from public [SearXNG](https://docs.searxng.org) instances, with fallback support\n- **[SEC EDGAR](https://github.com/stefanoamorelli/sec-edgar-mcp)** - (by Stefano Amorelli) A community Model Context Protocol Server to access financial filings and data through the U.S. Securities and Exchange Commission ([SEC](https://www.sec.gov/)) `Electronic Data Gathering, Analysis, and Retrieval` ([EDGAR](https://www.sec.gov/submit-filings/about-edgar)) database\n- **[SEO MCP](https://github.com/cnych/seo-mcp)** - A free SEO tool MCP (Model Control Protocol) service based on Ahrefs data. Includes features such as backlinks, keyword ideas, and more. by [claudemcp](https://www.claudemcp.com/servers/seo-mcp).\n- **[Serper](https://github.com/garylab/serper-mcp-server)** - An MCP server that performs Google searches using [Serper](https://serper.dev).\n- **[ServiceNow](https://github.com/osomai/servicenow-mcp)** - An MCP server to interact with a ServiceNow instance\n- **[ShaderToy](https://github.com/wilsonchenghy/ShaderToy-MCP)** - This MCP server lets LLMs to interact with the ShaderToy API, allowing LLMs to learn from compute shaders examples and enabling them to create complex GLSL shaders that they are previously not capable of.\n- **[ShareSeer](https://github.com/shareseer/shareseer-mcp-server)** - MCP to Access SEC filings, financials & insider trading data in real time using [ShareSeer](https://shareseer.com)\n- **[Shell](https://github.com/sonirico/mcp-shell)** - Give hands to AI. MCP server to run shell commands securely, auditably, and on demand\n- **[Shodan MCP](https://github.com/Hexix23/shodan-mcp)** - MCP server to interact with [Shodan](https://www.shodan.io/)\n- **[Shopify](https://github.com/GeLi2001/shopify-mcp)** - MCP to interact with Shopify API including order, product, customers and so on.\n- **[Shopify Storefront](https://github.com/QuentinCody/shopify-storefront-mcp-server)** - Unofficial MCP server that allows AI agents to discover Shopify storefronts and interact with them to fetch products, collections, and other store data through the Storefront API.\n- **[Simple Loki MCP](https://github.com/ghrud92/simple-loki-mcp)** - A simple MCP server to query Loki logs using logcli.\n- **[Siri Shortcuts](https://github.com/dvcrn/mcp-server-siri-shortcuts)** - MCP to interact with Siri Shortcuts on macOS. Exposes all Shortcuts as MCP tools.\n- **[Skyvern](https://github.com/Skyvern-AI/skyvern/tree/main/integrations/mcp)** - MCP to let Claude / Windsurf / Cursor / your LLM control the browser\n- **[Slack](https://github.com/korotovsky/slack-mcp-server)** - The most powerful MCP server for Slack Workspaces. This integration supports both Stdio and SSE transports, proxy settings and does not require any permissions or bots being created or approved by Workspace admins 😏.\n- **[Slack](https://github.com/zencoderai/slack-mcp-server)** - Slack MCP server which supports both stdio and Streamable HTTP transports. Extended from the original Anthropic's implementation which is now [archived](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)\n- **[Slidespeak](https://github.com/SlideSpeak/slidespeak-mcp)** - Create PowerPoint presentations using the [Slidespeak](https://slidespeak.com/) API.\n- **[Smartlead](https://github.com/jean-technologies/smartlead-mcp-server-local)** - MCP to connect to Smartlead. Additional, tooling, functionality, and connection to workflow automation platforms also available.\n- **[Snowflake](https://github.com/Snowflake-Labs/mcp)** - Open-source MCP server for Snowflake from official Snowflake-Labs supports prompting Cortex Agents, querying structured & unstructured data, object management, SQL execution, semantic view querying, and more. RBAC, fine-grained CRUD controls, and all authentication methods supported.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Snowflake Cortex MCP Server](https://github.com/thisisbhanuj/Snowflake-Cortex-MCP-Server)** -This Snowflake MCP server provides tooling for Snowflake Cortex AI features, bringing these capabilities to the MCP ecosystem. When connected to an MCP Client (e.g. Claude for Desktop, fast-agent, Agentic Orchestration Framework), users can leverage these Cortex AI features.\n- **[SoccerDataAPI](https://github.com/yeonupark/mcp-soccer-data)** - This MCP server provides real-time football match data based on the SoccerDataAPI.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protocol actions and growing\n- **[Solr MCP](https://github.com/mjochum64/mcp-solr-search)** - This MCP server offers a basic functionality to perform a search on Solr servers.\n- **[Solver](https://github.com/szeider/mcp-solver)** - Solves constraint satisfaction and optimization problems .\n- **[Solvitor](https://github.com/Adeptus-Innovatio/solvitor-mcp)** – Solvitor MCP server provides tools to access reverse engineering tools that help developers extract IDL files from closed - source Solana smart contracts and decompile them.\n- **[Sourcerer](https://github.com/st3v3nmw/sourcerer-mcp)** - MCP for semantic code search & navigation that reduces token waste.\n- **[Specbridge](https://github.com/TBosak/specbridge)** - Easily turn your OpenAPI specs into MCP Tools.\n- **[Splunk](https://github.com/jkosik/mcp-server-splunk)** - Golang MCP server for Splunk (lists saved searches, alerts, indexes, macros...). Supports SSE and STDIO.\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Spring Initializr](https://github.com/hpalma/springinitializr-mcp)** - This MCP allows an LLM to create Spring Boot projects with custom configurations. Instead of manually visiting start.spring.io, you can now ask your AI assistant to generate projects with specific dependencies, Java versions, and project structures.\n- **[Squad AI](https://github.com/the-basilisk-ai/squad-mcp)** – Product‑discovery and strategy platform integration. Create, query and update opportunities, solutions, outcomes, requirements and feedback from any MCP‑aware LLM.\n- **[SSH](https://github.com/AiondaDotCom/mcp-ssh)** - Agent for managing and controlling SSH connections.\n- **[SSH](https://github.com/classfang/ssh-mcp-server)** - An MCP server that can execute SSH commands remotely, upload files, download files, and so on.\n- **[SSH MCP Server](https://github.com/sinjab/mcp_ssh)** - A production-ready Model Context Protocol server for SSH automation with background execution, file transfers, and comprehensive timeout protection. Features structured output, progress tracking, and enterprise-grade testing (87% coverage).\n- **[sslmon](https://github.com/firesh/sslmon-mcp)** - Domain/HTTPS/SSL domain registration information and SSL certificate monitoring capabilities. Query domain registration and expiration information, and SSL certificate information and validity status for any domain.\n- **[Standard Korean Dictionary](https://github.com/privetin/stdict)** - Search the dictionary using API\n- **[Star Wars](https://github.com/johnpapa/mcp-starwars)** -MCP Server for the SWAPI Star Wars API. The main goal of the project is to show how an MCP server can be used to interact with APIs.\n- **[Starknet MCP Server](https://github.com/mcpdotdirect/starknet-mcp-server)** - A comprehensive MCP server for interacting with the Starknet blockchain, providing tools for querying blockchain data, resolving StarknetIDs, and performing token transfers.\n- **[Starwind UI](https://github.com/Boston343/starwind-ui-mcp/)** - This MCP provides relevant commands, documentation, and other information to allow LLMs to take full advantage of Starwind UI's open source Astro components.\n- **[Stellar](https://github.com/syronlabs/stellar-mcp/)** - This MCP server enables LLMs to interact with the Stellar blockchain to create accounts, check address balances, analyze transactions, view transaction history, mint new assets, interact with smart contracts and much more.\n- **[Stitch AI](https://github.com/StitchAI/stitch-ai-mcp/)** - Knowledge management system for AI agents with memory space creation and retrieval capabilities.\n- **[Stockfish](https://github.com/sonirico/mcp-stockfish)** - MCP server connecting AI systems to Stockfish chess engine\n- **[Storybook](https://github.com/stefanoamorelli/storybook-mcp-server)** (by Stefano Amorelli) - Interact with Storybook component libraries, enabling component discovery, story management, prop inspection, and visual testing across different viewports.\n- **[Strava](https://github.com/r-huijts/strava-mcp)** - Connect to the Strava API to access activity data, athlete profiles, segments, and routes, enabling fitness tracking and analysis with Claude.\n- **[Strava API](https://github.com/tomekkorbak/strava-mcp-server)** - MCP server for Strava API to retrieve one's activities\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[Substack/Medium](https://github.com/jonathan-politzki/mcp-writer-substack)** - Connect Claude to your Substack/Medium writing, enabling semantic search and analysis of your published content.\n- **[System Health](https://github.com/thanhtung0201/mcp-remote-system-health)** - The MCP (Multi-Channel Protocol) System Health Monitoring is a robust, real-time monitoring solution designed to provide comprehensive health metrics and alerts for remote Linux servers.\n- **[SystemSage](https://github.com/Tarusharma1/SystemSage)** - A powerful, cross-platform system management and monitoring tool for Windows, Linux, and macOS.\n- **[Talk To Figma](https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp)** - This MCP server enables LLMs to interact with Figma, allowing them to read and modify designs programmatically.\n- **[Talk To Figma via Claude](https://github.com/gaganmanku96/talk-with-figma-claude)** - TMCP server that provides seamless Figma integration specifically for Claude Desktop, enabling design creation, modification, and real-time collaboration through natural language commands.\n- **[TAM MCP Server](https://github.com/gvaibhav/TAM-MCP-Server)** - Market research and business intelligence with TAM/SAM calculations and integration across 8 economic data sources: Alpha Vantage, BLS, Census Bureau, FRED, IMF, Nasdaq Data Link, OECD, and World Bank.\n- **[Tasks](https://github.com/flesler/mcp-tasks)** - An efficient task manager. Designed to minimize tool confusion and maximize LLM budget efficiency while providing powerful search, filtering, and organization capabilities across multiple file formats (Markdown, JSON, YAML)\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[TcpSocketMCP](https://github.com/SpaceyKasey/TcpSocketMCP/)** - A Model Context Protocol (MCP) server that provides raw TCP socket access, enabling AI models to interact directly with network services using raw TCP Sockets. Supports multiple concurrent connections, buffering of response data and triggering automatic responses.\n- **[TeamRetro](https://github.com/adepanges/teamretro-mcp-server)** - This MCP server allows LLMs to interact with TeamRetro, allowing LLMs to manage user, team, team member, retrospective, health check, action, agreement and fetch the reports.\n- **[Telegram](https://github.com/chigwell/telegram-mcp)** - An MCP server that provides paginated chat reading, message retrieval, and message sending capabilities for Telegram through Telethon integration.\n- **[Telegram-Client](https://github.com/chaindead/telegram-mcp)** - A Telegram API bridge that manages user data, dialogs, messages, drafts, read status, and more for seamless interactions.\n- **[Telegram-mcp-server](https://github.com/DLHellMe/telegram-mcp-server)** - Access Telegram channels and groups directly in Claude. Features dual-mode operation with API access (100x faster) or web scraping, unlimited post retrieval, and search functionality.\n- **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n- **[Tempo](https://github.com/scottlepp/tempo-mcp-server)** - An MCP server to query traces/spans from [Grafana Tempo](https://github.com/grafana/tempo).\n- **[Teradata](https://github.com/arturborycki/mcp-teradata)** - his MCP server enables LLMs to interact with Teradata databases. This MCP Server support tools and prompts for multi task data analytics\n- **[Terminal-Control](https://github.com/GongRzhe/terminal-controller-mcp)** - An MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.\n- **[Terraform-Cloud](https://github.com/severity1/terraform-cloud-mcp)** - An MCP server that integrates AI assistants with the Terraform Cloud API, allowing you to manage your infrastructure through natural conversation.\n- **[Tideways](https://github.com/abuhamza/tideways-mcp-server)** - A Model Context Protocol server that enables AI assistants to query Tideways performance monitoring data and provide conversational performance insights for PHP applications.\n- **[TFT-Match-Analyzer](https://github.com/GeLi2001/tft-mcp-server)** - MCP server for teamfight tactics match history & match details fetching, providing user the detailed context for every match.\n- **[Thales CDSP CAKM MCP Server](https://github.com/sanyambassi/thales-cdsp-cakm-mcp-server)** - An MCP server for the Thales CipherTrust Data Security Platform (CDSP) Cloud Key Management (CAKM) connector. This MCP server supports Ms SQL and Oracle databases.\n- **[Thales CDSP CRDP MCP Server](https://github.com/sanyambassi/thales-cdsp-crdp-mcp-server)** - A Model Context Protocol (MCP) server that allows interacting with the CipherTrust RestFul Data Protection (CRDP) data protection service.\n- **[Thales CipherTrust Manager MCP Server](https://github.com/sanyambassi/ciphertrust-manager-mcp-server)** - MCP server for Thales CipherTrust Manager integration, enabling secure key management and cryptographic operations.\n- **[thegraph-mcp](https://github.com/kukapay/thegraph-mcp)** - An MCP server that powers AI agents with indexed blockchain data from The Graph.\n- **[TheHive MCP Server](https://github.com/redwaysecurity/the-hive-mcp-server)** - An MCP server for [TheHive](https://strangebee.com/thehive/) Security Incident Response Platform.\n- **[Things3 MCP](https://github.com/urbanogardun/things3-mcp)** - Things3 task management integration for macOS with comprehensive TODO, project, and tag management.\n- **[Think MCP](https://github.com/Rai220/think-mcp)** - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in [Anthropic's article](https://www.anthropic.com/engineering/claude-think-tool).\n- **[Think Node MCP](https://github.com/abhinav-mangla/think-tool-mcp)** - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in [Anthropic's article](https://www.anthropic.com/engineering/claude-think-tool). (Works with Node)\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Ticketmaster MCP Server](https://github.com/mochow13/ticketmaster-mcp-server)** - A Model Context Protocol (MCP) server implemented in Streamable HTTP transport that allows AI models to interact with the Ticketmaster Discovery API, enabling searching events, venues, and attractions.\n- **[TickTick](https://github.com/alexarevalo9/ticktick-mcp-server)** - A Model Context Protocol (MCP) server designed to integrate with the TickTick task management platform, enabling intelligent context-aware task operations and automation.\n- **[TigerGraph](https://github.com/custom-discoveries/TigerGraph_MCP)** - A community built MCP server that interacts with TigerGraph Graph Database.\n- **[tip.md](https://github.com/tipdotmd#-mcp-server-for-ai-assistants)** - An MCP server that enables AI assistants to interact with tip.md's crypto tipping functionality, allowing agents or supporters to tip registered developers directly from AI chat interfaces.\n- **[TMD Earthquake](https://github.com/amornpan/tmd-earthquake-server-1.0)** - 🌍 Real-time earthquake monitoring from Thai Meteorological Department. Features magnitude filtering, location-based search (Thai/English), today's events tracking, dangerous earthquake alerts, and comprehensive statistics. Covers regional and global seismic activities.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Todos](https://github.com/tomelliot/todos-mcp)** - A practical todo list manager to use with your favourite chatbot.\n- **[token-minter-mcp](https://github.com/kukapay/token-minter-mcp)** - An MCP server providing tools for AI agents to mint ERC-20 tokens across multiple blockchains.\n- **[token-revoke-mcp](https://github.com/kukapay/token-revoke-mcp)** - An MCP server for checking and revoking ERC-20 token allowances across multiple blockchains.\n- **[Ton Blockchain MCP](https://github.com/devonmojito/ton-blockchain-mcp)** - An MCP server for interacting with Ton Blockchain.\n- **[TouchDesigner](https://github.com/8beeeaaat/touchdesigner-mcp)** - An MCP server for TouchDesigner, enabling interaction with TouchDesigner projects, nodes, and parameters.\n- **[Transcribe](https://github.com/transcribe-app/mcp-transcribe)** - An MCP server provides fast and reliable transcriptions for audio/video files and voice memos. It allows LLMs to interact with the text content of audio/video file.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Trello MCP Server](https://github.com/lioarce01/trello-mcp-server)** - An MCP server that interact with user Trello boards, modifying them with prompting.\n- **[Trino](https://github.com/tuannvm/mcp-trino)** - A high-performance Model Context Protocol (MCP) server for Trino implemented in Go.\n- **[Tripadvisor](https://github.com/pab1it0/tripadvisor-mcp)** - An MCP server that enables LLMs to interact with Tripadvisor API, supporting location data, reviews, and photos through standardized MCP interfaces\n- **[Triplyfy MCP](https://github.com/helpful-AIs/triplyfy-mcp)** - An MCP server that lets LLMs plan and manage itineraries with interactive maps in Triplyfy; manage itineraries, places and notes, and search/save flights.\n- **[TrueNAS Core MCP](https://github.com/vespo92/TrueNasCoreMCP)** - An MCP server for interacting with TrueNAS Core.\n- **[TuriX Computer Automation MCP](https://github.com/TurixAI/TuriX-CUA/tree/mac_mcp)** - MCP server for helping automation control your computer complete your pre-setting task.\n- **[Tyk API Management](https://github.com/TykTechnologies/tyk-dashboard-mcp)** - Chat with all of your organization's managed APIs and perform other API lifecycle operations, managing tokens, users, analytics, and more.\n- **[Typesense](https://github.com/suhail-ak-s/mcp-typesense-server)** - A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.\n- **[UniFi Dream Machine](https://github.com/sabler/mcp-unifi)** An MCP server that gets your network telemetry from the UniFi Site Manager and your local UniFi router.\n- **[UniProt](https://github.com/QuentinCody/uniprot-mcp-server)** - Unofficial MCP server for UniProt, providing access to protein sequence data, functional annotations, taxonomic information, and cross-references for proteomics and bioinformatics research.\n- **[uniswap-poolspy-mcp](https://github.com/kukapay/uniswap-poolspy-mcp)** - An MCP server that tracks newly created liquidity pools on Uniswap across nine blockchain networks.\n- **[uniswap-trader-mcp](https://github.com/kukapay/uniswap-trader-mcp)** -An MCP server for AI agents to automate token swaps on Uniswap DEX across multiple blockchains.\n- **[Unity Catalog](https://github.com/ognis1205/mcp-server-unitycatalog)** - An MCP server that enables LLMs to interact with Unity Catalog AI, supporting CRUD operations on Unity Catalog Functions and executing them as MCP tools.\n- **[Unity Integration (Advanced)](https://github.com/quazaai/UnityMCPIntegration)** - Advanced Unity3d Game Engine MCP which supports ,Execution of Any Editor Related Code Directly Inside of Unity, Fetch Logs, Get Editor State and Allow File Access of the Project making it much more useful in Script Editing or asset creation.\n- **[Unity3d Game Engine](https://github.com/CoderGamester/mcp-unity)** - An MCP server that enables LLMs to interact with Unity3d Game Engine, supporting access to a variety of the Unit's Editor engine tools (e.g. Console Logs, Test Runner logs, Editor functions, hierarchy state, etc) and executing them as MCP tools or gather them as resources.\n- **[Universal MCP Servers](https://github.com/universal-mcp)** - A collection of MCP servers created using the [AgentR Universal MCP SDK](https://github.com/universal-mcp/universal-mcp).\n- **[Unleash Integration (Feature Toggle)](https://github.com/cuongtl1992/unleash-mcp)** - A Model Context Protocol (MCP) server implementation that integrates with Unleash Feature Toggle system. Provide a bridge between LLM applications and Unleash feature flag system\n- **[Upbit MCP Server](https://github.com/solangii/upbit-mcp-server)** – An MCP server that enables real - time access to cryptocurrency prices, market summaries, and asset listings from the Upbit exchange.\n- **[use_aws_mcp](https://github.com/runjivu/use_aws_mcp)** - amazon-q-cli's use_aws tool extracted into independent mcp, for general aws api usage.\n- **[User Feedback](https://github.com/mrexodia/user-feedback-mcp)** - Simple MCP Server to enable a human-in-the-loop workflow in tools like Cline and Cursor.\n- **[USPTO](https://github.com/riemannzeta/patent_mcp_server)** - MCP server for accessing United States Patent & Trademark Office data through its Open Data Protocol (ODP) API.\n- **[Vectara](https://github.com/vectara/vectara-mcp)** - Query Vectara's trusted RAG-as-a-service platform.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Vertica](https://github.com/nolleh/mcp-vertica)** - Vertica database integration in Python with configurable access controls and schema inspection\n- **[Vibe Check](https://github.com/PV-Bhat/vibe-check-mcp-server)** - An MCP server leveraging an external oversight layer to \"vibe check\" agents, and also self-improve accuracy & user alignment over time. Prevents scope creep, code bloat, misalignment, misinterpretation, tunnel vision, and overcomplication.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Video Still Capture](https://github.com/13rac1/videocapture-mcp)** - 📷 Capture video stills from an OpenCV-compatible webcam or other video source.\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[VMware Fusion](https://github.com/yeahdongcn/vmware-fusion-mcp-server)** - Manage VMware Fusion virtual machines via the Fusion REST API.\n- **[VoiceMode](https://github.com/mbailey/voicemode)** - Enable voice conversations with Claude using any OpenAI-compatible STT/TTS service [getvoicemode.com](https://getvoicemode.com/)\n- **[Voice Status Report](https://github.com/tomekkorbak/voice-status-report-mcp-server)** - An MCP server that provides voice status updates using OpenAI's text-to-speech API, to be used with Cursor or Claude Code.\n- **[VolcEngine TOS](https://github.com/dinghuazhou/sample-mcp-server-tos)** - A sample MCP server for VolcEngine TOS that flexibly get objects from TOS.\n- **[Voyp](https://github.com/paulotaylor/voyp-mcp)** - VOYP MCP server for making calls using Artificial Intelligence.\n- **[vulnicheck](https://github.com/andrasfe/vulnicheck)** - Real-time Python package vulnerability scanner that checks dependencies against OSV and NVD databases, providing comprehensive security analysis with CVE details, lock file support, and actionable upgrade recommendations.\n- **[Wanaku MCP Router](https://github.com/wanaku-ai/wanaku/)** - The Wanaku MCP Router is a SSE-based MCP server that provides an extensible routing engine that allows integrating your enterprise systems with AI agents.\n- **[weather-mcp-server](https://github.com/devilcoder01/weather-mcp-server)** - Get real-time weather data for any location using weatherapi.\n- **[Web Search MCP](https://github.com/mrkrsl/web-search-mcp)** - A server that provides full web search, summaries and page extration for use with Local LLMs.\n- **[Webex](https://github.com/Kashyap-AI-ML-Solutions/webex-messaging-mcp-server)** - A Model Context Protocol (MCP) server that provides AI assistants with comprehensive access to Cisco Webex messaging capabilities.\n- **[Webflow](https://github.com/kapilduraphe/webflow-mcp-server)** - Interact with the Webflow APIs\n- **[webhook-mcp](https://github.com/noobnooc/webhook-mcp)** (by Nooc) - A Model Context Protocol (MCP) server that sends webhook notifications when called.\n- **[whale-tracker-mcp](https://github.com/kukapay/whale-tracker-mcp)**  -  A mcp server for tracking cryptocurrency whale transactions.\n- **[WhatsApp MCP Server](https://github.com/lharries/whatsapp-mcp)** - MCP server for your personal WhatsApp handling individuals, groups, searching and sending.\n- **[Whois MCP](https://github.com/bharathvaj-ganesan/whois-mcp)** - MCP server that performs whois lookup against domain, IP, ASN and TLD.\n- **[Wikidata MCP](https://github.com/zzaebok/mcp-wikidata)** - Wikidata MCP server that interact with Wikidata, by searching identifiers, extracting metadata, and executing sparql query.\n- **[Wikidata SPARQL](https://github.com/QuentinCody/wikidata-sparql-mcp-server)** - Unofficial REMOTE MCP server for Wikidata's SPARQL endpoint, providing access to structured knowledge data, entity relationships, and semantic queries for research and data analysis.\n- **[Wikifunctions](https://github.com/Fredibau/wikifunctions-mcp-fredibau)** - Allowing AI models to discover and execute functions from the WikiFunctions library.\n- **[Wikipedia MCP](https://github.com/Rudra-ravi/wikipedia-mcp)** - Access and search Wikipedia articles via MCP for AI-powered information retrieval.\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[Windsor](https://github.com/windsor-ai/windsor_mcp)** - Windsor MCP (Model Context Protocol) enables your LLM to query, explore, and analyze your full-stack business data integrated into Windsor.ai with zero SQL writing or custom scripting.\n- **[Wordle MCP](https://github.com/cr2007/mcp-wordle-python)** - MCP Server that gets the Wordle Solution for a particular date.\n- **[WordPress MCP](https://github.com/Automattic/wordpress-mcp)** - Make your WordPress site into a simple MCP server, exposing functionality to LLMs and AI agents.\n- **[Workflowy](https://github.com/danield137/mcp-workflowy)** - A server that interacts with [workflowy](https://workflowy.com/).\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[Wren Engine](https://github.com/Canner/wren-engine)** - The Semantic Engine for Model Context Protocol(MCP) Clients and AI Agents\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[Xcode](https://github.com/r-huijts/xcode-mcp-server)** - MCP server that brings AI to your Xcode projects, enabling intelligent code assistance, file operations, project management, and automated development tasks.\n- **[Xcode-mcp-server](https://github.com/drewster99/xcode-mcp-server)** (by drewster99) - Best Xcode integration - ClaudeCode and Cursor can build your project *with* Xcode and see the same errors you do. Fast easy setup.\n- **[xcodebuild](https://github.com/ShenghaiWang/xcodebuild)**  - 🍎 Build iOS Xcode workspace/project and feed back errors to llm.\n- **[Xero-mcp-server](https://github.com/john-zhang-dev/xero-mcp)** - Enabling clients to interact with Xero system for streamlined accounting, invoicing, and business operations.\n- **[XiYan](https://github.com/XGenerationLab/xiyan_mcp_server)** - 🗄️ An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[Yahoo Finance](https://github.com/AgentX-ai/yahoo-finance-server)** - 📈 Lets your AI interact with Yahoo Finance to get comprehensive stock market data, news, financials, and more. Proxy supported.\n- **[yfinance](https://github.com/Adity-star/mcp-yfinance-server)** -💹The MCP YFinance Stock Server provides real-time and historical stock data in a standard format, powering dashboards, AI agents,and research tools with seamless financial insights.\n- **[YNAB](https://github.com/ChuckBryan/ynabmcpserver)** - A Model Context Protocol (MCP) server for integrating with YNAB (You Need A Budget), allowing AI assistants to securely access and analyze your financial data.\n- **[YouTrack](https://github.com/tonyzorin/youtrack-mcp)** - A Model Context Protocol (MCP) server implementation for JetBrains YouTrack, allowing AI assistants to interact with YouTrack issue tracking system.\n- **[YouTube](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/youtube)** - Extract Youtube video information (with proxies support).\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n- **[YouTube DLP](https://github.com/AgentX-ai/youtube-dlp-server)** - Retrieve video information, subtitles, and top comments with proxies.\n- **[YouTube MCP](https://github.com/aardeshir/youtube-mcp)** - Create playlists from song lists with OAuth2. Search videos, manage playlists, let AI curate your YouTube collections.\n- **[Youtube Uploader MCP](https://github.com/anwerj/youtube-uploader-mcp)** - AI‑powered YouTube uploader—no CLI, no YouTube Studio.\n- **[YouTube Video Summarizer](https://github.com/nabid-pf/youtube-video-summarizer-mcp)** - Summarize lengthy youtube videos.\n- **[yutu](https://github.com/eat-pray-ai/yutu)** - A fully functional MCP server and CLI for YouTube to automate YouTube operation.\n- **[ZapCap](https://github.com/bogdan01m/zapcap-mcp-server)** - MCP server for ZapCap API providing video caption and B-roll generation via natural language\n- **[Zettelkasten](https://github.com/joshylchen/zettelkasten)**- Comprehensive AI-powered knowledge management system implementing the Zettelkasten method. Features atomic note creation, full-text search, AI-powered CEQRC workflows (Capture→Explain→Question→Refine→Connect), intelligent link discovery, and multi-interface access (CLI, API, Web UI, MCP). Perfect for researchers, students, and knowledge workers.\n- **[ZincBind](https://github.com/QuentinCody/zincbind-mcp-server)** - Unofficial MCP server for ZincBind, providing access to a comprehensive database of zinc binding sites in proteins, structural coordination data, and metalloproteomics research information.\n- **[Zoom](https://github.com/Prathamesh0901/zoom-mcp-server/tree/main)** - Create, update, read and delete your zoom meetings.\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[Anubis MCP](https://github.com/zoedsoupe/anubis-mcp)** (Elixir) - A high-performance and high-level Model Context Protocol (MCP) implementation in Elixir. Think like \"Live View\" for MCP.\n* **[ModelFetch](https://github.com/phuctm97/modelfetch/)** (TypeScript) - Runtime-agnostic SDK to create and deploy MCP servers anywhere TypeScript/JavaScript runs\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n* **[FastAPI to MCP auto generator](https://github.com/tadata-org/fastapi_mcp)** – A zero-configuration tool for automatically exposing FastAPI endpoints as MCP tools by **[Tadata](https://tadata.com/)**\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foobara MCP Connector](https://github.com/foobara/mcp-connector)** - Easily expose Foobara commands written in Ruby as tools via MCP\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Higress MCP Server Hosting](https://github.com/alibaba/higress/tree/main/plugins/wasm-go/mcp-servers)** - A solution for hosting MCP Servers by extending the API Gateway (based on Envoy) with wasm plugins.\n* **[MCP Declarative Java SDK](https://github.com/codeboyzhou/mcp-declarative-java-sdk)** Annotation-driven MCP servers development with Java, no Spring Framework Required, minimize dependencies as much as possible.\n* **[MCP-Framework](https://mcp-framework.com)** Build MCP servers with elegance and speed in TypeScript. Comes with a CLI to create your project with `mcp create app`. Get started with your first server in under 5 minutes by **[Alex Andru](https://github.com/QuantGeekDev)**\n* **[MCP Plexus](https://github.com/Super-I-Tech/mcp_plexus)**: A secure, **multi-tenant** and Multi-user MCP python server framework built to integrate easily with external services via OAuth 2.1, offering scalable and robust solutions for managing complex AI applications.\n* **[mcp_sse (Elixir)](https://github.com/kEND/mcp_sse)** An SSE implementation in Elixir for rapidly creating MCP servers.\n* **[mxcp](https://github.com/raw-labs/mxcp)** (Python) - Open-source framework for building enterprise-grade MCP servers using just YAML, SQL, and Python, with built-in auth, monitoring, ETL and policy enforcement.\n* **[Next.js MCP Server Template](https://github.com/vercel-labs/mcp-for-next.js)** (Typescript) - A starter Next.js project that uses the MCP Adapter to allow MCP clients to connect and access resources.\n* **[PayMCP](https://github.com/blustAI/paymcp)** (Python & TypeScript) - Lightweight payments layer for MCP servers: turn tools into paid endpoints with a two-line decorator. [PyPI](https://pypi.org/project/paymcp/) · [npm](https://www.npmjs.com/package/paymcp) · [TS repo](https://github.com/blustAI/paymcp-ts)\n* **[Perl SDK](https://github.com/mojolicious/mojo-mcp)** - An SDK for building MCP servers and clients with the Perl programming language.\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n- **[R mcptools](https://github.com/posit-dev/mcptools)** - An R SDK for creating R-based MCP servers and retrieving functionality from third-party MCP servers as R functions.\n* **[SAP ABAP MCP Server SDK](https://github.com/abap-ai/mcp)** - Build SAP ABAP based MCP servers. ABAP 7.52 based with 7.02 downport; runs on R/3 & S/4HANA on-premises, currently not cloud-ready.\n* **[Spring AI MCP Server](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html)** - Provides auto-configuration for setting up an MCP server in Spring Boot applications.\n* **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n* **[AgentR Universal MCP SDK](https://github.com/universal-mcp/universal-mcp)** - A python SDK to build MCP Servers with inbuilt credential management by **[Agentr](https://agentr.dev/home)**\n* **[Vercel MCP Adapter](https://github.com/vercel/mcp-adapter)** (TypeScript) - A simple package to start serving an MCP server on most major JS meta-frameworks including Next, Nuxt, Svelte, and more.\n* **[PHP MCP Server](https://github.com/php-mcp/server)** (PHP) - Core PHP implementation for the Model Context Protocol (MCP) server\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n* **[llm-analysis-assistant](https://github.com/xuzexin-hz/llm-analysis-assistant)** <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/xuzexin-hz/llm-analysis-assistant/refs/heads/main/src/llm_analysis_assistant/pages/html/imgs/favicon.ico\" alt=\"Langfuse Logo\" /> - A very streamlined mcp client that supports calling and monitoring stdio/sse/streamableHttp, and can also view request responses through the /logs page. It also supports monitoring and simulation of ollama/openai interface.\n* **[MCP-Agent](https://github.com/lastmile-ai/mcp-agent)** - A simple, composable framework to build agents using Model Context Protocol by **[LastMile AI](https://www.lastmileai.dev)**\n* **[Spring AI MCP Client](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html)** - Provides auto-configuration for MCP client functionality in Spring Boot applications.\n* **[MCP CLI Client](https://github.com/vincent-pli/mcp-cli-host)** - A CLI host application that enables Large Language Models (LLMs) to interact with external tools through the Model Context Protocol (MCP).\n* **[OpenMCP Client](https://github.com/LSTM-Kirigaya/openmcp-client/)** - An all-in-one vscode/trae/cursor plugin for MCP server debugging. [Document](https://kirigaya.cn/openmcp/) & [OpenMCP SDK](https://kirigaya.cn/openmcp/sdk-tutorial/).\n* **[PHP MCP Client](https://github.com/php-mcp/client)** - Core PHP implementation for the Model Context Protocol (MCP) Client\n\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[A2A-MCP Java Bridge](https://github.com/vishalmysore/a2ajava)** - A2AJava brings powerful A2A-MCP integration directly into your Java applications. It enables developers to annotate standard Java methods and instantly expose them as MCP Server, A2A-discoverable actions — with no boilerplate or service registration overhead.\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Awesome Remote MCP Servers by JAW9C](https://github.com/jaw9c/awesome-remote-mcp-servers)** - A curated list of **remote** MCP servers, including their authentication support by **[JAW9C](https://github.com/jaw9c)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Discord Server (ModelContextProtocol)](https://discord.gg/jHEGxQu2a5)** – Connect with developers, share insights, and collaborate on projects in an active Discord community dedicated to the Model Context Protocol by **[Alex Andru](https://github.com/QuantGeekDev)**\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" alt=\"Klavis Logo\" /> **[Klavis AI](https://www.klavis.ai)** - Open Source MCP Infra. Hosted MCP servers and MCP clients on Slack and Discord.\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCPRepository.com](https://mcprepository.com/)** - A repository that indexes and organizes all MCP servers for easy discovery.\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-dockmaster](https://mcp-dockmaster.com)** - An Open-Sourced UI to install and manage MCP servers for Windows, Linux and macOS.\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-guardian](https://github.com/eqtylab/mcp-guardian)** - GUI application + tools for proxying / managing control of MCP servers by **[EQTY Lab](https://eqtylab.io)**\n- **[MCP Linker](https://github.com/milisp/mcp-linker)** - A cross-platform Tauri GUI tool for one-click setup and management of MCP servers, supporting Claude Desktop, Cursor, Windsurf, VS Code, Cline, and Neovim.\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCP Marketplace Web Plugin](https://github.com/AI-Agent-Hub/mcp-marketplace)** MCP Marketplace is a small Web UX plugin to integrate with AI applications, Support various MCP Server API Endpoint (e.g pulsemcp.com/deepnlp.org and more). Allowing user to browse, paginate and select various MCP servers by different categories. [Pypi](https://pypi.org/project/mcp-marketplace) | [Maintainer](https://github.com/AI-Agent-Hub) | [Website](http://www.deepnlp.org/store/ai-agent/mcp-server)\n- **[mcp.natoma.ai](https://mcp.natoma.ai)** – A Hosted MCP Platform to discover, install, manage and deploy MCP servers by **[Natoma Labs](https://www.natoma.ai)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[MCPHub](https://www.mcphub.com)** - Website to list high quality MCP servers and reviews by real users. Also provide online chatbot for popular LLM models with MCP server support.\n- **[MCP Router](https://mcp-router.net)** – Free Windows and macOS app that simplifies MCP management while providing seamless app authentication and powerful log visualization by **[MCP Router](https://github.com/mcp-router/mcp-router)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCPServers.com](https://mcpservers.com)** - A growing directory of high-quality MCP servers with clear setup guides for a variety of MCP clients. Built by the team behind the **[Highlight MCP client](https://highlightai.com/)**\n- **[MCP Servers Rating and User Reviews](http://www.deepnlp.org/store/ai-agent/mcp-server)** - Website to rate MCP servers, write authentic user reviews, and [search engine for agent & mcp](http://www.deepnlp.org/search/agent)\n- **[MCP Sky](https://bsky.app/profile/brianell.in/feed/mcp)** - Bluesky feed for MCP related news and discussion by **[@brianell.in](https://bsky.app/profile/brianell.in)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source macOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcpm](https://github.com/pathintegral-institute/mcpm.sh)** ([website](https://mcpm.sh)) - MCP Manager (MCPM) is a Homebrew-like service for managing Model Context Protocol (MCP) servers across clients by **[Pathintegral](https://github.com/pathintegral-institute)**\n- **[MCPVerse](https://mcpverse.dev)** - A portal for creating & hosting authenticated MCP servers and connecting to them securely.\n- **[MCP Servers Search](https://github.com/atonomus/mcp-servers-search)** - An MCP server that provides tools for querying and discovering available MCP servers from this list.\n- **[Search MCP Server](https://github.com/krzysztofkucmierz/search-mcp-server)** - Recommends the most relevant MCP servers based on the client's query by searching this README file.\n- **[MCPWatch](https://github.com/kapilduraphe/mcp-watch)** - A comprehensive security scanner for Model Context Protocol (MCP) servers that detects vulnerabilities and security issues in your MCP server implementations.\n- <img height=\"12\" width=\"12\" src=\"https://mkinf.io/favicon-lilac.png\" alt=\"mkinf Logo\" /> **[mkinf](https://mkinf.io)** - An Open Source registry of hosted MCP Servers to accelerate AI agent workflows.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[r/modelcontextprotocol](https://www.reddit.com/r/modelcontextprotocol)** – A Model Context Protocol community Reddit page - discuss ideas, get answers to your questions, network with like-minded people, and showcase your projects! by **[Alex Andru](https://github.com/QuantGeekDev)**\n- **[MCP.ing](https://mcp.ing/)** - A list of MCP services for discovering MCP servers in the community and providing a convenient search function for MCP services by **[iiiusky](https://github.com/iiiusky)**\n- **[MCP Hunt](https://mcp-hunt.com)** - Realtime platform for discovering trending MCP servers with momentum tracking, upvoting, and community discussions - like Product Hunt meets Reddit for MCP\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n- **[ToolHive](https://github.com/StacklokLabs/toolhive)** - A lightweight utility designed to simplify the deployment and management of MCP servers, ensuring ease of use, consistency, and security through containerization by **[StacklokLabs](https://github.com/StacklokLabs)**\n- **[NetMind](https://www.netmind.ai/AIServices)** - Access powerful AI services via simple APIs or MCP servers to supercharge your productivity.\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypeScript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!",
      "npm_url": "https://www.npmjs.com/package/servers",
      "npm_downloads": 2441,
      "keywords": [
        "geocoding",
        "geolocation",
        "modelcontextprotocol",
        "geolocation services",
        "provide geolocation",
        "including geocoding"
      ],
      "category": "weather-and-location-data"
    },
    "nexusconnects--TRAVEL-PLANNER-MCP-Server": {
      "owner": "nexusconnects",
      "name": "TRAVEL-PLANNER-MCP-Server",
      "url": "https://github.com/nexusconnects/TRAVEL-PLANNER-MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/nexusconnects.webp",
      "description": "Facilitate travel-related tasks by connecting to Google Maps services for location searches, retrieving place details, calculating routes, and obtaining timezone information.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-17T05:13:21Z",
      "readme_content": "# Travel Planner MCP Server (@gongrzhe/server-travelplanner-mcp)\n[![smithery badge](https://smithery.ai/badge/@GongRzhe/TRAVEL-PLANNER-MCP-Server)](https://smithery.ai/server/@GongRzhe/TRAVEL-PLANNER-MCP-Server)\n\nA Travel Planner Model Context Protocol (MCP) server implementation for interacting with Google Maps and travel planning services. This server enables LLMs to perform travel-related tasks such as location search, place details lookup, and travel time calculations.\n\n<a href=\"https://glama.ai/mcp/servers/y3u6yjiiq1\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/y3u6yjiiq1/badge\" alt=\"Travel Planner Server MCP server\" />\n</a>\n\n## Installation & Usage\n### Installing via Smithery\n\nTo install Travel Planner for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GongRzhe/TRAVEL-PLANNER-MCP-Server):\n\n```bash\nnpx -y @smithery/cli install @GongRzhe/TRAVEL-PLANNER-MCP-Server --client claude\n```\n\n### Installing Manually\n```bash\n# Using npx (recommended)\nnpx @gongrzhe/server-travelplanner-mcp\n\n# With environment variable for Google Maps API\nGOOGLE_MAPS_API_KEY=your_api_key npx @gongrzhe/server-travelplanner-mcp\n```\n\nOr install globally:\n\n```bash\n# Install globally\nnpm install -g @gongrzhe/server-travelplanner-mcp\n\n# Run after global installation\nGOOGLE_MAPS_API_KEY=your_api_key @gongrzhe/server-travelplanner-mcp\n```\n\n## Components\n\n### Tools\n\n- **searchPlaces**\n  - Search for places using Google Places API\n  - Input:\n    - `query` (string): Search query for places\n    - `location` (optional): Latitude and longitude to bias results\n    - `radius` (optional): Search radius in meters\n\n- **getPlaceDetails**\n  - Get detailed information about a specific place\n  - Input:\n    - `placeId` (string): Google Place ID to retrieve details for\n\n- **calculateRoute**\n  - Calculate route between two locations\n  - Input:\n    - `origin` (string): Starting location\n    - `destination` (string): Ending location\n    - `mode` (optional): Travel mode (driving, walking, bicycling, transit)\n\n- **getTimeZone**\n  - Get timezone information for a location\n  - Input:\n    - `location`: Latitude and longitude coordinates\n    - `timestamp` (optional): Timestamp for time zone calculation\n\n## Configuration\n\n### Usage with Claude Desktop\n\nTo use this server with the Claude Desktop app, add the following configuration to the \"mcpServers\" section of your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"travel-planner\": {\n      \"command\": \"npx\",\n      \"args\": [\"@gongrzhe/server-travelplanner-mcp\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\nAlternatively, you can use the node command directly if you have the package installed:\n\n```json\n{\n  \"mcpServers\": {\n    \"travel-planner\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/dist/index.js\"],\n      \"env\": {\n        \"GOOGLE_MAPS_API_KEY\": \"your_google_maps_api_key\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n### Building from Source\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n### Environment Variables\n\n- `GOOGLE_MAPS_API_KEY` (required): Your Google Maps API key with the following APIs enabled:\n  - Places API\n  - Directions API\n  - Geocoding API\n  - Time Zone API\n\n## License\n\nThis MCP server is licensed under the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nexusconnects",
        "planner",
        "mcp",
        "data nexusconnects",
        "nexusconnects travel",
        "planner mcp"
      ],
      "category": "weather-and-location-data"
    },
    "ngoiyaeric--earthdata-mcp-server": {
      "owner": "ngoiyaeric",
      "name": "earthdata-mcp-server",
      "url": "https://github.com/ngoiyaeric/earthdata-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ngoiyaeric.webp",
      "description": "Enables efficient dataset discovery and retrieval for geospatial analysis using NASA Earth Data. Facilitates seamless interaction with datasets and data granules to enhance data-driven projects.",
      "stars": 0,
      "forks": 0,
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "language": "Python",
      "updated_at": "2025-09-02T12:18:47Z",
      "readme_content": "<!--\n  ~ Copyright (c) 2023-2024 Datalayer, Inc.\n  ~\n  ~ BSD 3-Clause License\n-->\n\n[![Datalayer](https://assets.datalayer.tech/datalayer-25.svg)](https://datalayer.io)\n\n[![Become a Sponsor](https://img.shields.io/static/v1?label=Become%20a%20Sponsor&message=%E2%9D%A4&logo=GitHub&style=flat&color=1ABC9C)](https://github.com/sponsors/datalayer)\n\n# 🪐 ✨ Earthdata MCP Server\n\n[](https://github.com/datalayer/earthdata-mcp-server/actions/workflows/build.yml)\n[![PyPI - Version](https://img.shields.io/pypi/v/earthdata-mcp-server)](https://pypi.org/project/earthdata-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@datalayer/earthdata-mcp-server)](https://smithery.ai/server/@datalayer/earthdata-mcp-server)\n\nEarthdata MCP Server is a [Model Context Protocol](https://modelcontextprotocol.io/introduction) (MCP) server implementation that provides tools to interact with [NASA Earth Data](https://www.earthdata.nasa.gov/). It enables efficient dataset discovery and retrieval for Geospatial analysis.\n\n🚀 **NEW**: This server now includes all [Jupyter MCP Server](https://github.com/datalayer/jupyter-mcp-server) tools through composition, providing a unified interface for both Earth data discovery and Jupyter notebook manipulation.\n\nThe following demo uses this MCP server to search for datasets and data granules on NASA Earthdata, the [jupyter-earth-mcp-server](https://github.com/datalayer/jupyter-earth-mcp-server) to download the data in Jupyter and the [jupyter-mcp-server](https://github.com/datalayer/jupyter-mcp-server) to run further analysis.\n\n<div>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <p>Analyzing Sea Level Rise with AI-Powered Geospatial Tools and Jupyter - Watch Video</p>\n  </a>\n  <a href=\"https://www.loom.com/share/c2b5b05f548d4f1492d5c107f0c48dbc\">\n    <img alt=\"c2b5b05f548d4f1492d5c107f0c48dbc_598a84f02de7e74e_full_play\" style=\"max-width:100%;\" src=\"https://cdn.loom.com/sessions/thumbnails/c2b5b05f548d4f1492d5c107f0c48dbc-598a84f02de7e74e-full-play.gif\">\n  </a>\n</div>\n\n## Use with Claude Desktop\n\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`.\n\n```json\n{\n  \"mcpServers\": {\n    \"earthdata\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"datalayer/earthdata-mcp-server:latest\"\n      ]\n    }\n  }\n}\n```\n\nIf you are using Linux, start Claude with the following command.\n\n```bash\nmake claude-linux\n```\n\n## Tools\n\nThe server offers **15 tools total**: 3 Earthdata-specific tools plus 12 Jupyter notebook manipulation tools (prefixed with `jupyter_`).\n\n### Earthdata Tools\n\n#### `search_earth_datasets`\n\n- Search for datasets on NASA Earthdata.\n- Input:\n  - search_keywords (str): Keywords to search for in the dataset titles.\n  - count (int): Number of datasets to return.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: List of dataset abstracts.\n\n#### `search_earth_datagranules`\n\n- Search for data granules on NASA Earthdata.\n- Input:\n  - short_name (str): Short name of the dataset.\n  - count (int): Number of data granules to return.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: List of data granules.\n\n#### `download_earth_data_granules` 🆕\n\n- Download Earth data granules from NASA Earth Data and integrate with Jupyter notebooks.\n- This tool combines earthdata search capabilities with jupyter notebook manipulation to create a seamless download workflow.\n- Input:\n  - folder_name (str): Local folder name to save the data.\n  - short_name (str): Short name of the Earth dataset to download.\n  - count (int): Number of data granules to download.\n  - temporal (tuple): (Optional) Temporal range in the format (date_from, date_to).\n  - bounding_box (tuple): (Optional) Bounding box in the format (lower_left_lon, lower_left_lat, upper_right_lon, upper_right_lat).\n- Returns: Success message with download code preparation details.\n- **Integration**: Uses composed jupyter tools to add download code to notebooks for interactive execution.\n\n### Jupyter Tools (Composed)\n\nThe following Jupyter notebook manipulation tools are available with the `jupyter_` prefix:\n\n- **`jupyter_append_markdown_cell`**: Add markdown cells to notebooks\n- **`jupyter_insert_markdown_cell`**: Insert markdown cells at specific positions\n- **`jupyter_overwrite_cell_source`**: Modify existing cell content\n- **`jupyter_append_execute_code_cell`**: Add and execute code cells\n- **`jupyter_insert_execute_code_cell`**: Insert and execute code cells at specific positions\n- **`jupyter_execute_cell_with_progress`**: Execute cells with progress monitoring\n- **`jupyter_execute_cell_simple_timeout`**: Execute cells with timeout\n- **`jupyter_execute_cell_streaming`**: Execute cells with streaming output\n- **`jupyter_read_all_cells`**: Read all notebook cells\n- **`jupyter_read_cell`**: Read specific notebook cells\n- **`jupyter_get_notebook_info`**: Get notebook metadata\n- **`jupyter_delete_cell`**: Delete notebook cells\n\nFor detailed documentation of the Jupyter tools, see the [Jupyter MCP Server documentation](https://github.com/datalayer/jupyter-mcp-server).\n\n## Architecture: Server Composition\n\nThis server uses a **composition pattern** to combine tools from multiple MCP servers into a single unified interface. The implementation:\n\n1. **Imports the Jupyter MCP Server** at runtime\n2. **Merges tool definitions** from the Jupyter server into the Earthdata server\n3. **Prefixes Jupyter tools** with `jupyter_` to avoid naming conflicts\n4. **Preserves all functionality** from both servers\n\nThis approach provides several benefits:\n- ✅ **Unified Interface**: Single MCP server for both Earth data and Jupyter operations\n- ✅ **No Duplication**: Reuses existing Jupyter MCP Server code without copying\n- ✅ **Namespace Safety**: Prefixed tools prevent naming conflicts  \n- ✅ **Graceful Degradation**: Falls back to Earthdata-only if Jupyter server unavailable\n- ✅ **Maintainability**: Changes to Jupyter MCP Server are automatically included\n\n### Implementation Details\n\nThe composition is implemented in the `_compose_jupyter_tools()` function, which:\n\n```python\n# Simplified version of the composition logic\ndef _compose_jupyter_tools():\n    jupyter_mcp_module = importlib.import_module(\"jupyter_mcp_server.server\")\n    jupyter_mcp_instance = jupyter_mcp_module.mcp\n    \n    # Add jupyter tools with prefixed names\n    for tool_name, tool in jupyter_mcp_instance._tool_manager._tools.items():\n        prefixed_name = f\"jupyter_{tool_name}\"\n        mcp._tool_manager._tools[prefixed_name] = tool\n```\n\nThis pattern can be extended to compose additional MCP servers as needed.\n\n## Prompts\n\n1. `download_analyze_global_sea_level` 🆕\n   - Generate a comprehensive workflow for downloading and analyzing Global Mean Sea Level Trend dataset.\n   - Uses both earthdata download tools and jupyter analysis capabilities.\n   - Returns: Detailed prompt for complete sea level analysis workflow.\n\n2. `sealevel_rise_dataset`\n   - Search for datasets related to sea level rise worldwide.\n   - Input:\n     - `start_year` (int): Start year to consider.\n      - `end_year` (int): End year to consider.\n   - Returns: Prompt correctly formatted.\n\n3. `ask_datasets_format`\n    - To ask about the format of the datasets.\n    - Returns: Prompt correctly formatted.\n\n## Building\n\n```bash\n# or run `docker build -t datalayer/earthdata-mcp-server .`\nmake build-docker\n```\n\nIf you prefer, you can pull the prebuilt images.\n\n```bash\nmake pull-docker\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "earthdata",
        "datasets",
        "dataset",
        "earth data",
        "earthdata mcp",
        "ngoiyaeric earthdata"
      ],
      "category": "weather-and-location-data"
    },
    "ngoiyaeric--mapbox-mcp-server": {
      "owner": "ngoiyaeric",
      "name": "mapbox-mcp-server",
      "url": "https://github.com/ngoiyaeric/mapbox-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ngoiyaeric.webp",
      "description": "Integrate navigation and geocoding services using the Mapbox API to access directions, travel matrices, and real-time mapping functionalities.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-08T07:40:49Z",
      "readme_content": "<!--\n * @Author: AidenYangX\n * @Email: xscs709560271@gmail.com\n * @Date: 2024-12-21 23:30:55\n * @Description: Mapbox MCP Server\n-->\n\n# Mapbox MCP Server\n\n[![smithery badge](https://smithery.ai/badge/mapbox-mcp-server)](https://smithery.ai/server/mapbox-mcp-server)\n\nMCP Server for the Mapbox API.\n\n## Features\n\n### Navigation Tools\n\n1. `mapbox_directions`\n\n   - Get directions between coordinates\n   - Inputs:\n     - `coordinates` ({latitude: number, longitude: number}[])\n     - `profile` (optional): \"driving-traffic\", \"driving\", \"walking\", \"cycling\"\n   - Returns: route details with steps, distance, duration\n\n2. `mapbox_directions_by_places`\n\n   - Get directions between places using their names\n   - Inputs:\n     - `places` (string[]): Array of place names\n     - `profile` (optional): \"driving-traffic\", \"driving\", \"walking\", \"cycling\"\n     - `language` (optional): Two-letter language code (e.g., \"zh\", \"en\")\n   - Returns:\n     - Geocoding results for each place\n     - Route details with steps, distance, duration\n     - Any errors that occurred during processing\n\n3. `mapbox_matrix`\n\n   - Calculate travel time and distance matrices between coordinates\n   - Inputs:\n     - `coordinates` ({latitude: number, longitude: number}[])\n     - `profile` (optional): \"driving\", \"walking\", \"cycling\"\n     - `annotations` (optional): \"duration\", \"distance\", \"duration,distance\"\n     - `sources` (optional): Indices of source coordinates\n     - `destinations` (optional): Indices of destination coordinates\n   - Returns: Matrix of durations and/or distances between points\n\n4. `mapbox_matrix_by_places`\n   - Calculate travel time and distance matrices between places using their names\n   - Inputs:\n     - `places` (string[]): Array of place names (2-25 places)\n     - `profile` (optional): \"driving\", \"walking\", \"cycling\"\n     - `annotations` (optional): \"duration\", \"distance\", \"duration,distance\"\n     - `language` (optional): Two-letter language code\n     - `sources` (optional): Indices of source places\n     - `destinations` (optional): Indices of destination places\n   - Returns:\n     - Geocoding results for each place\n     - Matrix of durations and/or distances\n     - Any errors that occurred during processing\n\n### Search Tools\n\n1. `mapbox_geocoding`\n   - Search for places and convert addresses into coordinates\n   - Inputs:\n     - `searchText` (string): The place or address to search for\n     - `limit` (optional): Maximum number of results (1-10)\n     - `types` (optional): Filter by place types (country, region, place, etc.)\n     - `language` (optional): Two-letter language code\n     - `fuzzyMatch` (optional): Enable/disable fuzzy matching\n   - Returns: Detailed location information including coordinates and properties\n\n## Claude Desktop Integration\n\nAdd this configuration to your Claude Desktop config file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"mapbox-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mapbox-mcp-server/build/index.js\"],\n      \"env\": {\n        \"MAPBOX_ACCESS_TOKEN\": \"your-api-key\"\n      }\n    }\n  }\n}\n```\n\n## Setup\n\n### Installing via Smithery\n\nTo install mapbox-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ngoiyaeric/mapbox-mcp-server):\n\n```bash\nnpx -y @smithery/cli install mapbox-mcp-server --client claude\n```\n\n### Prerequisites\n\n- Node.js 16 or higher\n- TypeScript 4.5 or higher\n- A valid Mapbox API key\n\n### API Key\n\nGet a Mapbox API key by following the instructions [here](https://console.mapbox.com/account/access-tokens/).\n\nSet your API key as an environment variable:\n\n```bash\nexport MAPBOX_ACCESS_TOKEN=your_api_key_here\n```\n\n## Rate Limits\n\n- Directions API: 300 requests per minute\n- Matrix API:\n  - 60 requests per minute for driving/walking/cycling\n  - 30 requests per minute for driving-traffic\n- Geocoding API: 600 requests per minute\n\n## Deployment\n\n### Structure\n\nIn mapbox-mcp-server, we use the following structure to manage the server's handlers:\n\n- `src/server/handlers/base.ts`: Base class for all handlers\n- `src/server/registry.ts`: Registry for all handlers\n- `src/server/main.ts`: Main entry point for the server\n\nEach feature module follows this structure:\n\n```plaintext\nsrc/\n├── types/          # Type definitions\n├── schemas/        # Zod schemas for validation\n├── tools/\n│   ├── definitions/  # Tool definitions\n│   └── handlers/     # Tool implementations\n└── server/\n    └── handlers/     # Handler classes\n```\n\n---\n\n**Class Diagram**:\n\n\n---\n\n**Process Diagram**:\n\n\n## Error Handling\n\nAll tools implement comprehensive error handling:\n\n- Input validation errors\n- API request failures\n- Rate limit errors\n- Service-specific errors (e.g., no routes found, invalid coordinates)\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mapbox",
        "geocoding",
        "navigation",
        "ngoiyaeric mapbox",
        "mapbox api",
        "using mapbox"
      ],
      "category": "weather-and-location-data"
    },
    "ngoiyaeric--osm-mcp": {
      "owner": "ngoiyaeric",
      "name": "osm-mcp",
      "url": "https://github.com/ngoiyaeric/osm-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ngoiyaeric.webp",
      "description": "Query and visualize map data using a web interface with real-time map interactions. Integrates PostgreSQL/PostGIS for OpenStreetMap data management and supports server-to-client communication.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-08T07:42:32Z",
      "readme_content": "# MCP-OSM: OpenStreetMap Integration for MCP\n\nThis package provides OpenStreetMap integration for MCP, allowing users to query\nand visualize map data through an MCP interface.\n\n[](osm-mcp.webp)\n\n## Features\n\n- Web-based map viewer using Leaflet and OpenStreetMap\n- Server-to-client communication via Server-Sent Events (SSE)\n- MCP tools for map control (adding markers, polygons, setting view, getting view)\n- PostgreSQL/PostGIS query interface for OpenStreetMap data\n\n## Installation\n\nThis is my `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"OSM PostgreSQL Server\": {\n      \"command\": \"/Users/wiseman/.local/bin/uv\",\n      \"args\": [\n        \"run\",\n        \"--env-file\",\n        \".env\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"psycopg2\",\n        \"--with-editable\",\n        \"/Users/wiseman/src/mcp-osm\",\n        \"--directory\",\n        \"/Users/wiseman/src/mcp-osm\",\n        \"mcp\",\n        \"run\",\n        \"mcp.py\"\n      ]\n    }\n  }\n}\n```\n\nWhen the MCP server starts it also starts a web server at http://localhost:8889/\nthat has the map interface.\n\n### Environment Variables\n\nThe following environment variables can be used to configure the MCP:\n\n- `FLASK_HOST` - Host for the Flask server (default: 127.0.0.1)\n- `FLASK_PORT` - Port for the Flask server (default: 8889)\n- `PGHOST` - PostgreSQL host (default: localhost)\n- `PGPORT` - PostgreSQL port (default: 5432)\n- `PGDB` - PostgreSQL database name (default: osm)\n- `PGUSER` - PostgreSQL username (default: postgres)\n- `PGPASSWORD` - PostgreSQL password (default: postgres)\n\n### MCP Tools\n\nThe following MCP tools are available:\n\n- `get_map_view` - Get the current map view\n- `set_map_view` - Set the map view to specific coordinates or bounds\n- `set_map_title` - Set the title displayed at the bottom right of the map\n- `add_map_marker` - Add a marker at specific coordinates\n- `add_map_line` - Add a line defined by a set of coordinates\n- `add_map_polygon` - Add a polygon defined by a set of coordinates\n- `query_osm_postgres` - Execute a SQL query against the OpenStreetMap database",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openstreetmap",
        "postgis",
        "osm",
        "openstreetmap data",
        "postgis openstreetmap",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "ohhan777--korea_weather": {
      "owner": "ohhan777",
      "name": "korea_weather",
      "url": "https://github.com/ohhan777/korea_weather",
      "imageUrl": "/freedevtools/mcp/pfp/ohhan777.webp",
      "description": "Collects weather data from the Korea Meteorological Administration's short-term forecast API and provides it in MCP format for use by various clients like Claude and Cursor. Designed for integration with diverse weather application services.",
      "stars": 6,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-21T05:47:13Z",
      "readme_content": "# Korea Weather MCP Server\r\n\r\n[![smithery badge](https://smithery.ai/badge/@ohhan777/korea_weather)](https://smithery.ai/server/@ohhan777/korea_weather)\r\n\r\n본 MCP 서버는 **기상청 단기예보 조회서비스 API**를 기반으로 동작하는 MCP 서버입니다.\r\n\r\n## 소개\r\n\r\n**Korea Weather MCP Server**는 기상청의 날씨 정보를 수집하여, MCP 프로토콜을 통해 Claude나 Cursor와 같은 MCP 클라이언트(Host)에 제공합니다.  \r\n이 서버는 기상 정보를 활용하는 다양한 응용 서비스에 쉽게 연동될 수 있습니다.\r\n\r\n\r\n\r\n## 주요 기능\r\n\r\n- 기상청 단기예보 API 연동\r\n- MCP 형식의 기상 정보 제공\r\n\r\n## 설치 및 사용 방법\r\n\r\n### Smithery를 이용한 간편 설치\r\n\r\n1. [data.go.kr](https://www.data.go.kr/)에서 **기상청 단기예보 API**를 신청하고 API 키를 발급받습니다.  \r\n2. 다음 명령어를 사용해 [Smithery](https://smithery.ai/server/@ohhan777/korea_weather)에서 서버를 설치하고 Claude Desktop에 등록합니다.  \r\n   설치 과정에서 API 키 입력을 요구하면 발급받은 키를 입력합니다.\r\n   ```bash\r\n   npx -y @smithery/cli install @ohhan777/korea_weather --client claude\r\n3. Claude Desktop을 재시작하여 사용하면 됩니다.\r\n\r\n### Github에서 직접 설치하는 방법\r\n1. [data.go.kr](https://www.data.go.kr/)에서 기상청 단기예보 API 활용 신청 후 API 키를 발급받습니다.\r\n2. [github](https://github.com/ohhan777/korea_weather)에서 소스코드를 다운받아 실행해봅니다.\r\n   ```\r\n   git clone https://github.com/ohhan777/korea_weather.git\r\n   cd korea_weather\r\n   uv run korea_weather.py\r\n   ```\r\n3. MCP 클라이언트(Host)에 서버를 등록합니다.  \r\n\r\n   - **Claude Desktop**의 설정 파일은 보통 아래 경로에 위치합니다.  \r\n     `C:\\Users\\[사용자 이름]\\AppData\\Roaming\\Claude\\claude_desktop_config.json`  \r\n     (파일이 없다면 새로 생성)\r\n\r\n   - **Cursor**의 경우: 상단의 톱니바퀴 아이콘(⚙️) → **MCP → Add new global MCP server** 선택\r\n\r\n   아래 예시와 같은 형식으로 설정 파일을 작성합니다. (디렉토리 경로와 API 키는 환경에 맞게 수정)\r\n\r\n   ```json\r\n   {\r\n     \"mcpServers\": {\r\n       \"korea_weather\": {\r\n         \"command\": \"uv\",\r\n         \"args\": [\r\n           \"--directory\",\r\n           \"C:\\\\ai\\\\PyProjects\\\\korea_weather\",  \r\n           \"run\",\r\n           \"korea_weather.py\"\r\n         ],\r\n         \"env\": {\r\n           \"KOREA_WEATHER_API_KEY\": \"Input Your API Key Here!\"\r\n         }\r\n       }\r\n     }\r\n   }\r\n   ```\r\n### 프롬프트 예제\r\n```\r\n>> 제주 국제 공항 현재 날씨를 알려줘.\r\n>> 내일 오후에 서울 남대문에 놀러가려고 하는데 우산을 챙겨야할까?\r\n>> 오늘 오후에 세차하기에 괜찮은 날씨일까?\r\n```\r\n\r\n## 의존성\r\n\r\n`pyproject.toml` 참고\r\n\r\n## 라이선스\r\n\r\n본 프로젝트는 내부 시험용으로 개발되었으며, 별도의 라이선스 규정 없이 자유롭게 배포 및 수정이 가능합니다.\r\n\r\n## 문의\r\n\r\n개발자: 한국항공우주연구원 오한 (ohhan@kari.re.kr)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "korea_weather",
        "meteorological",
        "weather",
        "ohhan777 korea_weather",
        "korea_weather collects",
        "korea meteorological"
      ],
      "category": "weather-and-location-data"
    },
    "overstarry--qweather-mcp": {
      "owner": "overstarry",
      "name": "qweather-mcp",
      "url": "https://github.com/overstarry/qweather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/overstarry.webp",
      "description": "Provides access to real-time weather information and multi-day forecasts through a simple command-line interface, enabling the retrieval of city details and current weather conditions.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-10T14:22:49Z",
      "readme_content": "# qweather-mcp\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/ae24a36c-f029-49b3-9c42-fc111021add0)\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/overstarry-qweather-mcp-badge.png)](https://mseep.ai/app/overstarry-qweather-mcp)\n[![smithery badge](https://smithery.ai/badge/@overstarry/qweather-mcp)](https://smithery.ai/server/@overstarry/qweather-mcp)\n\nEnglish | [简体中文](./README.zh-CN.md)\n\n> MCP server for [QWeather](https://www.qweather.com/) API, providing comprehensive weather information query capabilities through Model Context Protocol (MCP).\n\n## ✨ Features\n\n- 🌤️ Real-time weather queries\n- 📅 Multi-day weather forecasts (3/7/10/15/30 days)\n- 🔑 Simple API key configuration\n- 🔌 Custom API base URL support\n- 🛠️ Complete tool integration\n\n## 📦 Installation\n\n### Via Smithery\n\nRecommended: Install automatically for Claude Desktop using [Smithery](https://smithery.ai/server/@overstarry/qweather-mcp):\n\n```bash\nnpx -y @smithery/cli install @overstarry/qweather-mcp --client claude\n```\n\n### Manual Configuration\n\n1. First, get your API Key from the [QWeather Console](https://console.qweather.com/).\n\n2. Start the server:\n\n```bash\n# stdio server\nnpx -y qweather-mcp\n```\n\n3. Configure environment variables:\n\n```bash\nQWEATHER_API_BASE=https://api.qweather.com\nQWEATHER_API_KEY=<your-api-key>\n```\n\n### JSON Configuration\n\nAdd to your configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"qweather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"qweather-mcp\"],\n      \"env\": {\n        \"QWEATHER_API_BASE\": \"<your-api-url>\",\n        \"QWEATHER_API_KEY\": \"<your-api-key>\"\n      }\n    }\n  }\n}\n```\n\n## 🛠️ Available Tools\n\n### get-weather-now\n\nGet current weather information for a specified location.\n\n### get-weather-forecast\n\nGet weather forecast information for a specified location with customizable forecast days:\n- 3-day forecast\n- 7-day forecast\n- 10-day forecast\n- 15-day forecast\n- 30-day forecast\n\nForecast data includes:\n- Temperature range (min/max)\n- Day/night weather conditions\n- Sunrise/sunset times\n- Precipitation\n- Humidity\n- Wind conditions\n- UV index\n\n### get-minutely-precipitation\n\nProvides minute-by-minute precipitation forecast for the next 2 hours, including:\n- Precipitation type (rain/snow)\n- Precipitation amount per minute\n- Precise time predictions\n- Real-time forecast descriptions\n\n### get-hourly-forecast\n\nProvides hourly weather forecasts for 24, 72, or 168 hours, including:\n- Temperature changes\n- Weather conditions\n- Wind direction and force\n- Relative humidity\n- Atmospheric pressure\n- Precipitation probability\n- Cloud coverage\n\n### get-weather-warning\n\nProvides real-time weather warning information, including:\n- Warning issuing authority\n- Warning level and type\n- Detailed warning content\n- Warning validity period\n- Related recommendations\n\n### get-weather-indices\n\nProvides weather life indices information, supporting various index types:\n- Sports index\n- Car wash index\n- Dressing index\n- Fishing index\n- UV index\n- Tourism index\n- Allergy index\nand 16 other life indices\n\n### get-air-quality\n\nProvides real-time air quality data, including:\n- AQI index\n- Air quality level\n- Primary pollutants\n- Health advice\n- Pollutant concentrations\n\n### get-air-quality-hourly\n\nProvides hourly air quality forecast for the next 24 hours:\n- Hourly AQI predictions\n- Pollutant concentration changes\n- Health impact assessment\n- Protection recommendations\n\n### get-air-quality-daily\n\nProvides air quality forecast for the next 3 days:\n- Daily AQI predictions\n- Primary pollutant forecasts\n- Air quality level changes\n- Health protection advice\n\n## 🤝 Contributing\n\nIssues and improvements are welcome! Please check our contribution guidelines.\n\n## 📄 License\n\nMIT\n\n## 🔗 Related Links\n\n- [QWeather Official Website](https://www.qweather.com/)\n- [API Documentation](https://dev.qweather.com/)\n- [Console](https://console.qweather.com/)\n",
      "npm_url": "https://www.npmjs.com/package/qweather-mcp",
      "npm_downloads": 0,
      "keywords": [
        "weather",
        "forecasts",
        "qweather",
        "weather information",
        "weather location",
        "qweather mcp"
      ],
      "category": "weather-and-location-data"
    },
    "pab1it0--tripadvisor-mcp": {
      "owner": "pab1it0",
      "name": "tripadvisor-mcp",
      "url": "https://github.com/pab1it0/tripadvisor-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pab1it0.webp",
      "description": "Access Tripadvisor location data, reviews, and photos through standardized MCP interfaces. Search for travel destinations and experiences, and retrieve detailed information based on user queries.",
      "stars": 48,
      "forks": 10,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-26T17:50:55Z",
      "readme_content": "# Tripadvisor MCP Server\n\nA [Model Context Protocol][mcp] (MCP) server for Tripadvisor Content API.\n\nThis provides access to Tripadvisor location data, reviews, and photos through standardized MCP interfaces, allowing AI assistants to search for travel destinations and experiences.\n\n[mcp]: https://modelcontextprotocol.io\n\n## Features\n\n- [x] Search for locations (hotels, restaurants, attractions) on Tripadvisor\n- [x] Get detailed information about specific locations\n- [x] Retrieve reviews and photos for locations\n- [x] Search for nearby locations based on coordinates\n- [x] API Key authentication\n- [x] Docker containerization support\n\n- [x] Provide interactive tools for AI assistants\n\nThe list of tools is configurable, so you can choose which tools you want to make available to the MCP client.\n\n## Usage\n\n1. Get your Tripadvisor Content API key from the [Tripadvisor Developer Portal](https://developer.tripadvisor.com/).\n\n2. Configure the environment variables for your Tripadvisor Content API, either through a `.env` file or system environment variables:\n\n```env\n# Required: Tripadvisor Content API configuration\nTRIPADVISOR_API_KEY=your_api_key_here\n```\n\n3. Add the server configuration to your client configuration file. For example, for Claude Desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"tripadvisor\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<full path to tripadvisor-mcp directory>\",\n        \"run\",\n        \"src/tripadvisor_mcp/main.py\"\n      ],\n      \"env\": {\n        \"TRIPADVISOR_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n> Note: if you see `Error: spawn uv ENOENT` in Claude Desktop, you may need to specify the full path to `uv` or set the environment variable `NO_UV=1` in the configuration.\n\n## Docker Usage\n\nThis project includes Docker support for easy deployment and isolation.\n\n### Building the Docker Image\n\nBuild the Docker image using:\n\n```bash\ndocker build -t tripadvisor-mcp-server .\n```\n\n### Running with Docker\n\nYou can run the server using Docker in several ways:\n\n#### Using docker run directly:\n\n```bash\ndocker run -it --rm \\\n  -e TRIPADVISOR_API_KEY=your_api_key_here \\\n  tripadvisor-mcp-server\n```\n\n#### Using docker-compose:\n\nCreate a `.env` file with your Tripadvisor API key and then run:\n\n```bash\ndocker-compose up\n```\n\n### Running with Docker in Claude Desktop\n\nTo use the containerized server with Claude Desktop, update the configuration to use Docker with the environment variables:\n\n```json\n{\n  \"mcpServers\": {\n    \"tripadvisor\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"TRIPADVISOR_API_KEY\",\n        \"tripadvisor-mcp-server\"\n      ],\n      \"env\": {\n        \"TRIPADVISOR_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nThis configuration passes the environment variables from Claude Desktop to the Docker container by using the `-e` flag with just the variable name, and providing the actual values in the `env` object.\n\n## Development\n\nContributions are welcome! Please open an issue or submit a pull request if you have any suggestions or improvements.\n\nThis project uses [`uv`](https://github.com/astral-sh/uv) to manage dependencies. Install `uv` following the instructions for your platform:\n\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nYou can then create a virtual environment and install the dependencies with:\n\n```bash\nuv venv\nsource .venv/bin/activate  # On Unix/macOS\n.venv\\Scripts\\activate     # On Windows\nuv pip install -e .\n```\n\n## Project Structure\n\nThe project has been organized with a `src` directory structure:\n\n```\ntripadvisor-mcp/\n├── src/\n│   └── tripadvisor_mcp/\n│       ├── __init__.py      # Package initialization\n│       ├── server.py        # MCP server implementation\n│       ├── main.py          # Main application logic\n├── Dockerfile               # Docker configuration\n├── docker-compose.yml       # Docker Compose configuration\n├── .dockerignore            # Docker ignore file\n├── pyproject.toml           # Project configuration\n└── README.md                # This file\n```\n\n### Testing\n\nThe project includes a test suite that ensures functionality and helps prevent regressions.\n\nRun the tests with pytest:\n\n```bash\n# Install development dependencies\nuv pip install -e \".[dev]\"\n\n# Run the tests\npytest\n\n# Run with coverage report\npytest --cov=src --cov-report=term-missing\n```\n\n### Tools\n\n| Tool | Category | Description |\n| --- | --- | --- |\n| `search_locations` | Search | Search for locations by query text, category, and other filters |\n| `search_nearby_locations` | Search | Find locations near specific coordinates |\n| `get_location_details` | Retrieval | Get detailed information about a location |\n| `get_location_reviews` | Retrieval | Retrieve reviews for a location |\n| `get_location_photos` | Retrieval | Get photos for a location |\n\n## License\n\nMIT\n\n---\n\n[mcp]: https://modelcontextprotocol.io\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tripadvisor",
        "pab1it0",
        "destinations",
        "tripadvisor mcp",
        "pab1it0 tripadvisor",
        "location data"
      ],
      "category": "weather-and-location-data"
    },
    "piddlingtuna--tfnsw-realtime-alerts-mcp-server": {
      "owner": "piddlingtuna",
      "name": "tfnsw-realtime-alerts-mcp-server",
      "url": "https://github.com/piddlingtuna/tfnsw-realtime-alerts-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/piddlingtuna.webp",
      "description": "Access real-time transport alerts and information, including current disruptions and planned works across the NSW transport network. Retrieve and filter alerts by transport mode for efficient management of transport-related data.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-18T18:49:26Z",
      "readme_content": "# TfNSW Realtime Alerts MCP Server\n\nA Model Context Protocol server for Transport for NSW's (TfNSW) Realtime Alerts API. This server provides tools to access and interact with real-time transport alerts and information via Large Language Models.\n\n## Overview\n\nThis TypeScript-based MCP server implements integration with Transport for NSW's Realtime Alerts system. It enables AI assistants to access up-to-date information about transport disruptions, planned works, and other important alerts across the NSW transport network.\n\n## Features\n\n### Resources\n- List and access transport alerts via `nsw-transport://` URIs\n- Filter alerts by transport mode (buses, trains, ferries, etc.)\n- Plain text format for easy consumption by AI assistants\n\n### Tools\n- `get-transport-alerts` - Retrieve current transport alerts\n  - Filter by transport mode\n  - Returns formatted alert information including affected routes, time periods, and impact details\n\n### Prompts\n- `transport-disruption-summary` - Generate a summary of current transport alerts\n  - Includes relevant alert details as embedded resources\n  - Returns structured prompt for LLM summarisation of major disruptions\n\n## Transport Modes\n\nThe following transport modes are supported:\n\n- `all` - All transport modes\n- `buses` - Sydney Metro and Outer Metro Bus services\n- `ferries` - Sydney Ferries and Newcastle Transport ferries\n- `lightrail` - Light Rail services\n- `metro` - Sydney Metro\n- `nswtrains` - NSW Trains regional trains and coaches\n- `regionbuses` - Regional Bus services\n- `sydneytrains` - Sydney Trains suburban and intercity network\n\n## Authentication\n\nThis server requires authentication with the TfNSW Open Data API. You will need to register for an API key at the [TfNSW Open Data Hub](https://opendata.transport.nsw.gov.au/).\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"tfnsw-realtime-alerts\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"tfnsw-realtime-alerts-mcp-server\"\n      ],\n      \"env\": {\n        \"NSW_TRANSPORT_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nReplace `\"your_api_key_here\"` with your TfNSW API key from the [TfNSW Open Data Hub](https://opendata.transport.nsw.gov.au/).\n\n## Development\n\nConfigure your API key as an environment variable in your `.env` file:\n\n```\nNSW_TRANSPORT_API_KEY=\"your_api_key_here\"\n```\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nYou can use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector) for debugging, which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n",
      "npm_url": "https://www.npmjs.com/package/tfnsw-realtime-alerts-mcp-server",
      "npm_downloads": 293,
      "keywords": [
        "alerts",
        "tfnsw",
        "transport",
        "transport alerts",
        "alerts transport",
        "nsw transport"
      ],
      "category": "weather-and-location-data"
    },
    "pinnaclesoft-ko--be-node-seoul-data-mcp": {
      "owner": "pinnaclesoft-ko",
      "name": "be-node-seoul-data-mcp",
      "url": "https://github.com/pinnaclesoft-ko/be-node-seoul-data-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/pinnaclesoft-ko.webp",
      "description": "Access public data from Seoul, including subway ridership statistics and cultural event information through the Seoul Public Data API. Integrate this data into applications for real-time insights on transportation and cultural events.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-24T00:04:20Z",
      "readme_content": "# 서울 공공데이터 MCP 서버 예제\n\n서울 공공데이터 API를 사용하여 서울시의 다양한 공공 데이터를 제공하는 MCP 서버 예제입니다. \n\n## 예제 목록\n\n- 서울시 지하철호선별 역별 승하차 인원 정보\n- 서울시 문화행사 정보 \n\n\n## 설정방법\n\n### 서울 공공데이터 API 키 설정\n\n#### 서울시 지하철호선별 역별 승하차 인원 정보\n파일 `modules/KoreaSeoulCulturalEventInfo.ts`에 다음 {API 키}를 추가한다.\n\n```typescript\nimport {\n    Tool,\n} from \"@modelcontextprotocol/sdk/types.js\";\n\nconst API_URL = \"http://openapi.seoul.go.kr:8088/{authKey}/json/culturalEventInfo/{StartIndex}/{EndIndex}\";\nconst API_KEY = \"{API 키}\";\n```\n\n#### 서울시 문화행사 정보\n파일 `modules/KoreaSeoulSubwayStatus.ts`에 다음 {API 키}를 추가한다.\n\n```typescript\nimport {\n    Tool,\n} from \"@modelcontextprotocol/sdk/types.js\";\n\nconst API_URL = \"http://openapi.seoul.go.kr:8088/{authKey}/json/culturalEventInfo/{StartIndex}/{EndIndex}\";\nconst API_KEY = \"{API 키}\";\n```\n\n## 빌드하기\n\n```bash\nnpm i; npm run build\n```\n\n#### Claude Desktop 에 MCP 설정 추가하기 \n`claude_desktop_config.json` 파일에 다음을 추가한다.\n{빌드된 경로}는 자신에 맞게 추가해야 함.\n\n```json\n{\n  \"mcpServers\": {\n    \"KoreaSeoulData\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{빌드된 경로}/seoul_korea/dist/index.js\"\n      ]\n    }\n  }\n}\n```\n\n\n## 사용예제\n\n### 서울시 지하철호선별 역별 승하차 인원 정보\n\n\n\n\n### 서울시 문화행사 정보",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "seoul",
        "data",
        "transportation",
        "seoul data",
        "data seoul",
        "information seoul"
      ],
      "category": "weather-and-location-data"
    },
    "puran1218--arcgis-location-services-mcp": {
      "owner": "puran1218",
      "name": "arcgis-location-services-mcp",
      "url": "https://github.com/puran1218/arcgis-location-services-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Provides geocoding, reverse geocoding, and routing services to enhance applications with location-based features. Access detailed location data and nearby points of interest effectively.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geocoding",
        "arcgis",
        "mcp",
        "location services",
        "location data",
        "provides geocoding"
      ],
      "category": "weather-and-location-data"
    },
    "qing-turnaround--mcp-ip-geo": {
      "owner": "qing-turnaround",
      "name": "mcp-ip-geo",
      "url": "https://github.com/qing-turnaround/mcp-ip-geo",
      "imageUrl": "/freedevtools/mcp/pfp/qing-turnaround.webp",
      "description": "Provides IP geolocation lookup services including country, region, and city information using the ip-api.com service.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-05-08T09:30:56Z",
      "readme_content": "<h1 align=\"center\">\n  mcp-ip-geo\n</h1>\n\n<div align=\"center\">\n  <a href=\"./README-zh_CN.md\">简体中文</a>\n</div>\n\n---\n\n`mcp-ip-geo` is an MCP server that provides IP geolocation lookup (country, region, city, etc.) using the ip-api.com service.\n\n# Building from Source\n\n## Build Locally\n\n### Using Go Command\n\n```bash\n# On Unix-based systems (Linux/macOS)\ngo build -o mcp-ip-geo ./cmd/mcp-ip-geo\n\n# On Windows\ngo build -o mcp-ip-geo.exe .\\cmd\\mcp-ip-geo\n```\n\n### Using Docker\n\n1. Build the Docker image:\n\n    ```bash\n    docker build -t mcp-ip-geo-server .\n    ```\n\n2. Run the Docker container:\n\n    ```bash\n    docker run -d --name mcp-ip-geo-server -p 8000:8000 mcp-ip-geo-server\n    ```\n\n## Install Prebuilt Binary\n\nInstall the server using Go:\n\n```bash\ngo install github.com/chenmingyong0423/mcp-ip-geo/cmd/mcp-ip-geo@latest\n```\n\n# MCP Integration\n\nYou can integrate `mcp-ip-geo` in one of the following ways:\n\n## 🖥 Executable Integration (run a local binary)\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-ip-geo\": {\n      \"command\": \"/path/to/mcp-ip-geo\"\n    }\n  }\n}\n```\n\n## 🌐 HTTP Integration (connect to a running instance via HTTP)\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-ip-geo\": {\n      \"url\": \"http://host:port/sse\"\n    }\n  }\n}\n```\n\n# License\n> ⚠ **Notice**: This project uses the free version of [ip-api.com](https://ip-api.com/), which is **strictly limited to non-commercial use**. If you intend to use this project for commercial purposes, please make sure to comply with their terms of service or purchase a commercial license: [ip-api.com](https://ip-api.com/)\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "geolocation",
        "geo",
        "ip",
        "ip geolocation",
        "ip geo",
        "geolocation lookup"
      ],
      "category": "weather-and-location-data"
    },
    "r-huijts--ns-mcp-server": {
      "owner": "r-huijts",
      "name": "ns-mcp-server",
      "url": "https://github.com/r-huijts/ns-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/r-huijts.webp",
      "description": "Provides real-time travel information for Dutch Railways (NS), enabling users to access schedules, train statuses, and travel-related queries.",
      "stars": 43,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-23T15:08:10Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/r-huijts-ns-mcp-server-badge.png)](https://mseep.ai/app/r-huijts-ns-mcp-server)\n\n| <img src=\"https://upload.wikimedia.org/wikipedia/commons/b/b7/Nederlandse_Spoorwegen_logo.svg\" alt=\"NS Logo\" width=\"380\"/> | <img src=\"https://glama.ai/mcp/servers/tzd5oz5tov/badge\" alt=\"NS Travel Information Server MCP server\" width=\"380\"/> |\n|:---:|:---:|\n\n# NS Travel Information MCP Server\n\n[![smithery badge](https://smithery.ai/badge/ns-server)](https://smithery.ai/server/ns-server)\n[![npm version](https://badge.fury.io/js/ns-mcp-server.svg)](https://www.npmjs.com/package/ns-mcp-server)\n\nTransform your AI assistant into a Dutch railways expert! This MCP server connects Claude to real-time NS (Nederlandse Spoorwegen) travel information, making it your perfect companion for navigating the Netherlands by train.\n\n## Installation\n\nYou can install this server in three ways:\n\n### 1. Using Claude Desktop with NPM Package\n\nUpdate your Claude configuration file (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"ns-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"ns-mcp-server\"\n      ],\n      \"env\": {\n        \"NS_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nYou can get an API key from [NS API Portal](https://apiportal.ns.nl/)\n\n### 2. Using Smithery\n\nTo install NS Travel Information Server automatically via [Smithery](https://smithery.ai/server/ns-server):\n\n```bash\nnpx -y @smithery/cli install ns-server --client claude\n```\n\n### 3. From Source\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Copy the example environment file:\n   ```bash\n   cp .env.example .env\n   ```\n4. Add your NS API key to the `.env` file:\n   ```\n   NS_API_KEY=your_api_key_here\n   ```\n\nThen update your Claude configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"ns-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/ns-server/build/index.js\"\n      ],\n      \"env\": {\n        \"NS_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\nMake sure to:\n1. Replace `/path/to/ns-server` with the actual path to your installation\n2. Add your NS API key in the `env` section. It can be obtained from here [https://apiportal.ns.nl/product#product=NsApp](https://apiportal.ns.nl/product#product=NsApp)\n\nAfter updating the configuration, restart Claude Desktop for the changes to take effect.\n\n## Real-World Use Cases\n\n- \"Is my usual 8:15 train from Almere to Amsterdam running on time?\"\n- \"Are there any delays on the Rotterdam-Den Haag route today?\"\n- \"What's the best alternative route to Utrecht if there's maintenance on the direct line?\"\n- \"Which train should I take to arrive at my office in Amsterdam Zuid before 9 AM?\"\n- \"Which route to Amsterdam has the fewest transfers with a stroller?\"\n- \"What's the earliest train I can take to make my 10 AM meeting in The Hague?\"\n- \"When's the last train back to Groningen after a night out in Amsterdam?\"\n- \"Are there any weekend engineering works that might affect my Monday morning class?\"\n- \"Are there OV-fiets bikes available at Utrecht Centraal for my afternoon meeting?\"\n- \"Is Eindhoven Strijp-S station wheelchair accessible and what platforms does it have?\"\n- \"What trains are arriving at Utrecht Centraal in the next hour?\"\n- \"Has the train from Venlo to Schiphol Airport arrived on time?\"\n- \"How much does a first-class ticket from Amsterdam to Rotterdam cost?\"\n- \"What's the price for 2 adults and 1 child traveling to Den Haag?\"\n\n## 🔑 Environment Variables\n\n| Variable | Description |\n|----------|-------------|\n| NS_API_KEY | Your NS API key (required) |\n\n## 🌟 Features\n\nThis MCP server provides comprehensive access to NS train information through the following endpoints:\n\n### Real-time Train Information\n- **Departures**: Get real-time departure information including platform numbers, delays, and travel notes\n- **Arrivals**: Access upcoming train arrivals with origin stations, platform changes, and status updates\n- **Journey Planning**: Find optimal travel routes with transfers and real-time updates\n- **Service Updates**: Check for disruptions, maintenance work, and engineering activities\n\n### Pricing Information\n- **Ticket Prices**: Get accurate pricing for single and return journeys\n- **Travel Classes**: Compare prices for first and second class travel\n- **Group Pricing**: Calculate fares for adults and children\n- **Discount Options**: Check joint journey discounts and special offers\n- **Validity Details**: View ticket validity periods and travel conditions\n\n### Station Information\n- **Station Details**: Access comprehensive station information including:\n  - Facilities and accessibility features\n  - Platform layouts and track information\n  - OV-fiets (bike rental) availability\n  - Location and approach details\n\n### Additional Features\n- **Multi-language Support**: Information available in Dutch and English\n- **Flexible Queries**: Search by station name, code, or UIC identifier\n- **Time Zones**: Proper handling of time zones for international stations\n- **Status Updates**: Track changes, delays, and cancellations in real-time\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details\n",
      "npm_url": "https://www.npmjs.com/package/ns-mcp-server",
      "npm_downloads": 1398,
      "keywords": [
        "ns",
        "huijts",
        "mcp",
        "huijts ns",
        "data huijts",
        "ns mcp"
      ],
      "category": "weather-and-location-data"
    },
    "ravinahp--surf-mcp": {
      "owner": "ravinahp",
      "name": "surf-mcp",
      "url": "https://github.com/ravinahp/surf-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ravinahp.webp",
      "description": "Fetch tide information for any location and date, providing detailed data on high and low tides along with station information and automatic time zone handling. Ideal for obtaining precise tide forecasts to optimize surfing conditions.",
      "stars": 15,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-25T00:02:17Z",
      "readme_content": "# Surf MCP Server\n\nMCP server for people who surf waves and the web.\n\n## Diagram\n![Letter Dot Grid - 5 dpi](https://github.com/user-attachments/assets/6a065a75-4ac4-4cae-965b-4990d6bd970a)\n\n\n\n## Video Demo\nhttps://github.com/user-attachments/assets/0a4453e2-66df-4bf5-8366-8538cda366ed\n\n\n## Features\n\n- Fetch tide information for any location using latitude and longitude\n- Support for date-specific tide queries\n- Detailed tide data including high/low tides and station information\n- Automatic time zone handling (UTC)\n\n## Prerequisites\n\n- Python 3.x\n- Storm Glass API key\n\n## Getting Your Storm Glass API Key\n\n1. Visit [Storm Glass](https://stormglass.io/)\n2. Click \"Try for Free\" or \"Sign In\" to create an account\n3. Once registered, you'll receive your API key\n\nNote on API Usage Limits:\n- Free tier: 10 requests per day\n- Paid plans available:\n  - Small: 500 requests/day (€19/month)\n  - Medium: 5000 requests/day (€49/month)\n  - Large: 25,000 requests/day (€129/month)\n  - Enterprise: Custom plans available\n\nChoose a plan based on your usage requirements. The free tier is suitable for testing and personal use.\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/ravinahp/surf-mcp.git\ncd surf-mcp\n```\n\n2. Install dependencies using uv:\n```bash\nuv sync\n```\n\nNote: We use `uv` instead of pip since the project uses `pyproject.toml` for dependency management.\n\n## Configure as MCP Server\n\nTo add this tool as an MCP server, you'll need to modify your Claude desktop configuration file. This configuration includes your Storm Glass API key, so you won't need to set it up separately.\n\nThe configuration file location depends on your operating system:\n\n- MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration to your JSON file:\n\n```json\n{\n    \"surf-mcp\": {\n        \"command\": \"uv\",\n        \"args\": [\n            \"--directory\",\n            \"/Users/YOUR_USERNAME/Code/surf-mcp\",\n            \"run\",\n            \"surf-mcp\"\n        ],\n        \"env\": {\n            \"STORMGLASS_API_KEY\": \"your_api_key_here\"\n        }\n    }\n}\n```\n\n⚠️ IMPORTANT: \n1. Replace `YOUR_USERNAME` with your actual system username\n2. Replace `your_api_key_here` with your actual Storm Glass API key\n3. Make sure the directory path matches your local installation\n\n## Deployment\n\n### Building\n\nTo prepare the package:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package:\n```bash\nuv build\n```\nThis will create distributions in the `dist/` directory.\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging experience, we strongly recommend using the MCP Inspector.\n\nYou can launch the MCP Inspector with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/surf-mcp run surf-mcp\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nThe Inspector provides:\n- Real-time request/response monitoring\n- Input/output validation\n- Error tracking\n- Performance metrics\n\n## Usage\n\nThe service provides a FastMCP tool for getting tide information:\n\n```python\n@mcp.tool()\nasync def get_tides(latitude: float, longitude: float, date: str) -> str:\n    \"\"\"Get tide information for a specific location and date.\"\"\"\n```\n\n### Parameters:\n- `latitude`: Float value representing the location's latitude\n- `longitude`: Float value representing the location's longitude\n- `date`: Date string in YYYY-MM-DD format\n\n### Example Response:\n```\nTide Times:\nTime: 2024-01-20T00:30:00+00:00 (UTC)\nType: HIGH tide\nHeight: 1.52m\n\nTime: 2024-01-20T06:45:00+00:00 (UTC)\nType: LOW tide\nHeight: 0.25m\n\nStation Information:\nName: Sample Station\nDistance: 20.5km from requested location\n```\n\n## Use Cases\n\n### Example #1: Finding the Best Surf Time\n\nYou can use this tool to determine the optimal surfing time at your favorite beach & the closest station. Generally, the best surfing conditions are during incoming (rising) tides, about 2 hours before high tide. \n\nExample prompt to Claude:\n\n<img width=\"693\" alt=\"Screenshot 2025-01-07 at 12 55 47 PM\" src=\"https://github.com/user-attachments/assets/f605494a-9842-40b9-a9f2-cfcfae0cb908\" />\n\nNote: Different beaches may have different optimal tide conditions based on their specific geography and break type. This tool also provides station distance information which should be considered alongside tide information. (ie. longer station distance means higher change of innacuracy - you can ask Claude for this as well when prompting). \n\n## Error Handling\n\nThe service includes robust error handling for:\n- API request failures\n- Invalid coordinates\n- Missing or invalid API keys\n- Network timeouts\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tides",
        "surf",
        "tide",
        "tide information",
        "tide forecasts",
        "tides station"
      ],
      "category": "weather-and-location-data"
    },
    "ropon--mcp_weather": {
      "owner": "ropon",
      "name": "mcp_weather",
      "url": "https://github.com/ropon/mcp_weather",
      "imageUrl": "/freedevtools/mcp/pfp/ropon.webp",
      "description": "Provides real-time weather forecasts and city information queries, offering accurate weather data for the next 24 hours based on city names or coordinates.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-07T12:27:43Z",
      "readme_content": "# Weather MCP Server\n\n一个提供天气预报和城市信息查询功能的Model Context Protocol服务器。该服务器允许LLMs获取未来24小时的天气信息，并支持通过城市名称、经纬度等方式查询城市信息。\n\n### 可用工具\n\n- `get_24h_weather` - 获取未来24小时的天气预报。\n  - 必需参数：\n    - `location` (string): 城市名称或经纬度（例如，北京或116.41,39.92）\n\n## 安装\n\n### 使用uv（推荐）\n\n使用[`uv`](https://docs.astral.sh/uv/)时无需特定安装。我们将使用[`uvx`](https://docs.astral.sh/uv/guides/tools/)直接运行*mcp-server-weather*。\n\n### 使用PIP\n\n或者，你可以通过pip安装`mcp-server-weather`：\n\n```bash\npip install mcp-server-weather\n```\n\n安装后，你可以使用以下命令作为脚本运行：\n\n```bash\npython -m mcp_server_weather\n```\n\n## 配置\n\n### 配置Claude.app\n\n在Claude设置中添加：\n\n<details>\n<summary>使用uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-weather\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>使用docker</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/weather\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>使用pip安装</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_weather\"]\n  }\n}\n```\n</details>\n\n### 配置Zed\n\n在Zed的settings.json中添加：\n\n<details>\n<summary>使用uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-weather\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-weather\"]\n  }\n],\n```\n</details>\n\n<details>\n<summary>使用pip安装</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-weather\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_weather\"]\n  }\n},\n```\n</details>\n\n## 示例交互\n\n1. 获取未来24小时天气：\n```json\n{\n  \"name\": \"get_24h_weather\",\n  \"arguments\": {\n    \"location\": \"广州 天河\"\n  }\n}\n```\n响应：\n```json\n{\n  \"location\": \"广州 天河\",\n  \"forecast\": \"未来24小时的天气信息...\"\n}\n```\n\n## 调试\n\n你可以使用MCP inspector来调试服务器。对于uvx安装：\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-weather\n```\n\n或者如果你在特定目录中安装了包或正在开发：\n\n```bash\ncd path/to/servers/src/weather\nnpx @modelcontextprotocol/inspector uv run mcp-server-weather\n```\n\n## 构建\n\nDocker 构建:\n\n```bash\ndocker build -t mcp/weather .\n```\n\n## 贡献\n\n我们鼓励对mcp-server-weather的贡献，以帮助扩展和改进其功能。无论是添加新的天气相关工具、增强现有功能，还是改进文档，你的输入都很有价值。\n\n有关其他MCP服务器和实现模式的示例，请参见：\nhttps://github.com/modelcontextprotocol/servers\n\n欢迎提交拉取请求！随时贡献新想法、错误修复或增强功能，以使mcp-server-weather更加强大和实用。\n\n## 许可证\n\nmcp-server-weather根据MIT许可证授权。这意味着你可以自由使用、修改和分发软件，但需遵守MIT许可证的条款和条件。有关详细信息，请参阅项目存储库中的LICENSE文件。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_weather",
        "weather",
        "forecasts",
        "ropon mcp_weather",
        "mcp_weather provides",
        "weather data"
      ],
      "category": "weather-and-location-data"
    },
    "rossshannon--weekly-weather-mcp": {
      "owner": "rossshannon",
      "name": "weekly-weather-mcp",
      "url": "https://github.com/rossshannon/weekly-weather-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rossshannon.webp",
      "description": "Provides global weather forecasts and current conditions using the OpenWeatherMap One Call API, offering detailed 8-day forecasts and hourly updates.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-20T20:13:45Z",
      "readme_content": "# 🌦️ Weekly Weather MCP Server\n\nA weather forecast MCP (Model Context Protocol) server providing **8-day global weather forecasts** and current weather conditions using the [OpenWeatherMap](https://openweathermap.org) [One Call API 3.0](https://openweathermap.org/api/one-call-3).\n\n> This project builds upon an earlier project by [Zippland](https://github.com/Zippland/weather-mcp), with modifications to support full week forecasts and additional time-of-day data points.\n\n<div align=\"center\">\n  <img src=\"https://rossshannon.github.io/weekly-weather-mcp/images/weather-mcp-thinking.gif\" alt=\"Claude calling MCP server\" width=\"800\">\n  <p><em>Animation showing Claude Desktop processing the weather data from the MCP Server</em></p>\n</div>\n<br>\n<div align=\"center\">\n  <img src=\"https://rossshannon.github.io/weekly-weather-mcp/images/weather-forecast-example.png\" alt=\"Claude displaying weather forecast\" width=\"700\">\n  <p><em>Claude Desktop showing a detailed weather forecast with lawn mowing recommendations</em></p>\n</div>\n\n## Features\n\n- 🌍 Support for querying weather conditions anywhere in the world\n- 🌤️ Hourly forecasts for the next 48 hours\n- 📅 Provides detailed 8-day forecasts (today + following 7 days), with morning, afternoon, and evening data points\n- 🌧️ Weather summaries and precipitation probabilities\n- 🌡️ Detailed weather information including temperature, humidity, wind speed, etc.\n- 📍 Support for reporting results in different time zones\n- 🗂️ No separate configuration file needed; API key can be passed directly through environment variables or parameters\n\n## Usage\n\n### 1. Get an OpenWeatherMap API Key with One Call API 3.0 Access (free)\n\n1. Visit [OpenWeatherMap](https://openweathermap.org/) and register an account\n2. Subscribe to the “One Call API 3.0” plan (offers 1,000 API calls per day for free)\n3. Wait for API key activation (this can take up to an hour)\n\n#### About the One Call API 3.0\n\nThe One Call API 3.0 provides comprehensive weather data:\n- Current weather conditions\n- Minute forecast for 1 hour\n- Hourly forecast for 48 hours\n- Daily forecast for 8 days (including today)\n- National weather alerts\n- Historical weather data\n\n#### API Usage and Limits\n\n- **Free tier**: 1,000 API calls per day\n- **Default limit**: 2,000 API calls per day (can be adjusted in your account)\n- **Billing**: Any calls beyond the free 1,000/day will be charged according to OpenWeatherMap pricing\n- **Usage cap**: You can set a call limit in your account to prevent exceeding your budget (including capping your usage at the free tier limit so no costs can be incurred)\n- If you reach your limit, you’ll receive a HTTP 429 error response\n\n> **Note**: API key activation can take several minutes up to an hour. If you receive authentication errors shortly after subscribing or generating a new key, wait a bit and try again later.\n\n### 2. Clone the Repository and Install Dependencies\n\n```bash\n# Clone the repository\ngit clone https://github.com/rossshannon/weekly-weather-mcp.git\ncd weekly-weather-mcp\n\n# Create a virtual environment (recommended)\npython3 -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# OR\nvenv\\Scripts\\activate  # Windows\n\n# Install dependencies\npip3 install -r requirements.txt\n```\n\nThis will install all the necessary dependencies to run the server and development tools.\n\n### 3. Run the Server\n\nThere are two ways to provide the API key:\n\n#### Method 1: Using Environment Variables\n\n```bash\n# Set environment variables\nexport OPENWEATHER_API_KEY=\"your_api_key\"  # Linux/Mac\nset OPENWEATHER_API_KEY=your_api_key  # Windows\n\n# Run the server\npython weather_mcp_server.py\n```\n\n#### Method 2: Provide When Calling the Tool\n\nRun directly without setting environment variables:\n\n```bash\npython weather_mcp_server.py\n```\n\nWhen calling the tool, you’ll need to provide the `api_key` parameter.\n\n### 4. Use in MCP Client Configuration\n\nAdd the following configuration to your MCP-supported client (e.g., [Claude Desktop](https://www.anthropic.com/claude-desktop) ([instructions](https://modelcontextprotocol.io/quickstart/user)), [Cursor](https://www.cursor.com/)):\n\n```json\n{\n  \"weather_forecast\": {\n    \"command\": \"python3\",\n    \"args\": [\n      \"/full_path/weather_mcp_server.py\"\n    ],\n    \"env\": {\n      \"OPENWEATHER_API_KEY\": \"your_openweathermap_key_here\"\n    },\n    \"disabled\": false,\n    \"autoApprove\": [\"get_weather\", \"get_current_weather\"]\n  }\n}\n```\n\nIf you’re using a virtual environment, your configuration should include the full path to the Python executable in the virtual environment:\n\n```json\n{\n  \"weather_forecast\": {\n    \"command\": \"/full_path/venv/bin/python3\",\n    \"args\": [\n      \"/full_path/weather_mcp_server.py\"\n    ],\n    \"env\": {\n      \"OPENWEATHER_API_KEY\": \"your_openweathermap_key_here\"\n    },\n    \"disabled\": false,\n    \"autoApprove\": [\"get_weather\", \"get_current_weather\"]\n  }\n}\n```\n\n### 5. Available Tools\n\nThe server exposes two tools, `get_weather` and `get_current_weather`. Both tools accept the same parameters:\n\n- `location`: Location name as a string, e.g., “Beijing”, “New York”, “Tokyo”. The tool will handle geocoding this to a latitude/longitude coordinate.\n- `api_key`: OpenWeatherMap API key (optional, will read from environment variable if not provided)\n- `timezone_offset`: Timezone offset in hours, e.g., 8 for Beijing, -4 for New York. Default is 0 (UTC time). Times in the returned data will be accurate for this timezone.\n\n#### get_weather\n\nGet comprehensive weather data for a location including current weather (next 48 hours) and 8-day forecast with detailed information.\n\nReturns:\n- Current weather information\n- Hourly forecasts for the next 48 hours\n- Daily forecasts for 8 days (today + 7 days ahead)\n- Morning (9 AM), afternoon (3 PM), and evening (8 PM) data points for each day\n- Weather summaries and precipitation probabilities\n- Detailed weather information including temperature, humidity, wind speed, etc.\n\nPerfect for use cases like:\n- “🏃‍♂️ Which days this week should I go for a run?”\n- “🪴 When’s the best evening to work in my garden this week?”\n- “🪁 What’s the windiest day coming up soon for flying a kite?”\n- “💧 Will I need to water my garden this week or will rain take care of it?”\n\n#### get_current_weather\n\nGet current weather for a specified location.\n\nReturns:\n- A simplified subset of the data returned by `get_weather`\n- Only the current weather information (temperature, feels like, weather condition, humidity, wind, etc.); no forecast data for future time periods\n- Useful for quick queries about present conditions only\n\n##### Location Lookup Details\n\nThe `location` parameter uses OpenWeatherMap’s geocoding to convert location names to geographic coordinates:\n\n- Simple location names work: “Paris”, “Tokyo”, “New York”\n- For better accuracy, include country codes: “Paris,FR”, “London,GB”, “Portland,US”\n- For US cities, you can include state: “Portland,OR,US” or “Portland,ME,US”\n- The API supports any location on Earth that OpenWeatherMap can geocode\n- Location names are converted to latitude/longitude coordinates internally\n\nIf a location can’t be found, the API will return an error. In case of ambiguous locations, try adding country or state codes for more precise results.\n\n## Usage Examples\n\n### Example 1: Current Weather\n\n```\nUser: What’s the weather like in New York right now?\n\nAI: Let me check the current weather in New York for you.\n[Calling get_current_weather(\"New York\", timezone_offset=-4)]\n\nCurrent weather in New York: 5°C, few clouds, humidity 42%, wind speed 4.1m/s.\n```\n\n### Example 2: Weekly Planning\n\n```\nUser: I need to mow my lawn this week in Boston. Which day would be best?\n\nAI: Let me check the weather forecast for Boston to find the best day for lawn mowing.\n[Calling get_weather(\"Boston\", timezone_offset=-4)]\n\nLooking at the Boston forecast for the week:\n- Today (Monday): Light rain (28% chance), 5°C\n- Tuesday: Clear, sunny, 10°C\n- Wednesday: Light rain (100% chance), 9°C\n- Thursday: Moderate rain (100% chance), 10°C\n- Friday: Moderate rain (100% chance), 11°C\n- Saturday: Partly cloudy, 13°C\n- Sunday: Scattered clouds, 17°C\n\nTuesday would be your best option for mowing the lawn. It will be clear and sunny with no chance of rain, and the temperature will be comfortable at around 10°C.\n```\n\nYou can combine this MCP server with others to achieve multi-step workflows. For example, once the weather has been checked, you can also tell Claude to add that as an event in your calendar to remind yourself of those plans.\n\n<div align=\"center\">\n  <img src=\"https://rossshannon.github.io/weekly-weather-mcp/images/calendar-integration-example.png\" alt=\"Calendar event created by Claude\" width=\"365\">\n  <p><em>Calendar event created by Claude based on the weather forecast</em></p>\n</div>\n\n## Troubleshooting\n\n### API Key Issues\n\nIf you encounter an “Invalid API key” or authorization error:\n1. Make sure you’ve subscribed to the “One Call API 3.0” plan. You’ll need a debit or credit card to enable your account, but you’ll only be charged if you exceed the free tier limit.\n2. Remember that API key activation can take up to an hour\n3. Verify you have set the `OPENWEATHER_API_KEY` correctly in environment variables, or check that you’re providing the correct `api_key` parameter when calling the tools\n\n### Other Common Issues\n\n- **“Location not found” error**:\n  - Check for typos in location names\n  - Some very small or remote locations might not be in OpenWeatherMap’s database\n\n- **Incorrect location returned**:\n  - Try using a more accurate city name or add a country code, e.g., “Beijing,CN” or “Porto,PT”\n  - For US cities with common names, specify the state: “Springfield,IL,US” or “Portland,OR,US”\n  - For cities with the same name in different countries, always include the country code and state if applicable: “Paris,FR” for Paris, France vs “Paris,TX,US” for Paris, Texas, USA.\n\n- **Rate limiting (429 error)**: You’ve exceeded your API call limit. Check your OpenWeatherMap account settings.\n\n## Development and Testing\n\n### Testing\n\nThis project includes unit tests, integration tests, and mock client test files to validate the MCP server functionality. The server has been manually tested to ensure it works correctly with Claude Desktop, Cursor, and other MCP clients.\n\n#### Manual Client Testing\n\nBefore configuring the server with Claude Desktop or other MCP clients, you can use the included test script to verify your API key and installation:\n\n1. Set your OpenWeatherMap API key:\n   ```bash\n   export OPENWEATHER_API_KEY=\"your_api_key\"\n   ```\n\n2. Run the test client:\n   ```bash\n   python3 test_mcp_client.py\n   ```\n\nThe test script directly calls the weather functions to check the current weather in New York and displays the results. This helps verify that:\n1. Your API key is working properly\n2. The OpenWeatherMap API is accessible\n3. The weather data functions are operational\n\nIf the test shows current weather data, you’re ready to configure the server with Claude Desktop, Cursor, or other MCP clients!\n\n<div align=\"center\">\n  <img src=\"https://rossshannon.github.io/weekly-weather-mcp/images/weather-mcp-test-client.png\" alt=\"Running local test client\" width=\"800\">\n  <p><em>Running local test client to verify API key and installation</em></p>\n</div>\n\n#### Automated Tests\n\nThe repository includes unit and integration test files that:\n- Test API key handling and validation\n- Validate data parsing and formatting\n- Verify error handling for API failures\n- Test both exposed MCP tools: `get_weather` and `get_current_weather`\n\nThese tests require proper setup of the development environment with all dependencies installed. They’re provided as reference for future development.\n\nTo run the automated tests:\n\n```bash\n# Run unit tests\npython test_weather_mcp.py\n\n# Run integration tests\npython test_mcp_integration.py\n```\n\nThe tests use a sample API response (`test_weather_response.json`) to simulate responses from the OpenWeatherMap API, so they can be run without an API key or internet connection.\n\nThese tests are provided as reference for future development and to ensure the MCP server continues to function correctly after any modifications.\n\n## Credits\n\nThis project is adapted from an original [Weather MCP](https://github.com/Zippland/weather-mcp) by Zippland. The modifications include:\n\n- Integration with OpenWeatherMap One Call API 3.0\n- Extended forecast data from 2 days to 8 days (today + 7 days)\n- Addition of morning, afternoon and evening data points for each day\n- Hourly forecasts for the next 48 hours\n- Inclusion of weather summaries, wind speed, and precipitation probabilities\n- Unit tests, integration tests, and mock client test files\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openweathermap",
        "forecasts",
        "weather",
        "using openweathermap",
        "weather forecasts",
        "openweathermap api"
      ],
      "category": "weather-and-location-data"
    },
    "sarunasdaujotis--vilnius-transport-mcp-server": {
      "owner": "sarunasdaujotis",
      "name": "vilnius-transport-mcp-server",
      "url": "https://github.com/sarunasdaujotis/vilnius-transport-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sarunasdaujotis.webp",
      "description": "Provides access to real-time Vilnius public transport data, allowing integration with large language models for transport-related queries and functionality.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-01-23T15:18:07Z",
      "readme_content": "# Vilnius Transport MCP Server\n\nA Model Context Protocol (MCP) server implementation that provides Vilnius public transport data access capabilities to Large Language Models (LLMs). This project demonstrates how to extend LLM capabilities with real-time transport data using the MCP standard.\n\nThe [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) is a standard that enables Large Language Models (LLMs) to securely access external tools and data. MCP allows LLMs to:\n- Access real-time or local data\n- Call external functions [claude_desktop_config.json](../../../Library/Application%20Support/Claude/claude_desktop_config.json)\n- Interact with system resources\n- Maintain consistent tool interfaces\n\nThis project implements an MCP server that provides Vilnius public transport data tools to LLMs, enabling them to answer queries about public transport stops and routes.\n\nThe server exposes the following MCP tools:\n\n- `find_stops`: Search for public transport stops by name\n  ```json\n  {\n    name: string;  // Full or partial name of the stop to search for\n  }\n- `find_closest_stop`: Find the closest public transport stop to given coordinates\n  ```json\n  { \n    coordinates: string;  // Format: \"latitude, longitude\" (e.g., \"54.687157, 25.279652\")\n  }\n  ```\nTo add the MCP server to your Claude development environment, add the following configuration to your claude_desktop_config.json file:\n  ```json\n     {\n      \"mcpServers\": {\n        \"vilnius_transport\": {\n          \"command\": \"uv\",\n          \"args\": [\n              \"--directory\",\n              \"path/vilnius-transport-mcp-server/src/vilnius_transport_mcp\",\n              \"run\",\n              \"transport.py\"\n          ]\n        }\n      }\n     }\n ```\nNote: Make sure to adjust the directory path to match your local installation.\n\nTo run the client:\n```commandline\nuv run client.py path/src/vilnius_transport_mcp/transport.py\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vilnius",
        "transport",
        "data",
        "vilnius transport",
        "transport data",
        "sarunasdaujotis vilnius"
      ],
      "category": "weather-and-location-data"
    },
    "sidharthrajaram--mcp-sse": {
      "owner": "sidharthrajaram",
      "name": "mcp-sse",
      "url": "https://github.com/sidharthrajaram/mcp-sse",
      "imageUrl": "/freedevtools/mcp/pfp/sidharthrajaram.webp",
      "description": "Demonstrates a working pattern for SSE-based AI model servers and clients, enabling connection to tools for tasks such as weather forecasting and alerts. Utilizes Server-Sent Events (SSE) for real-time communication between clients and server tools.",
      "stars": 298,
      "forks": 51,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-27T14:18:04Z",
      "readme_content": "# SSE-based Server and Client for [MCP](https://modelcontextprotocol.io/introduction)\n\n[![smithery badge](https://smithery.ai/badge/@sidharthrajaram/mcp-sse)](https://smithery.ai/server/@sidharthrajaram/mcp-sse)\n\nThis demonstrates a working pattern for SSE-based MCP servers and standalone MCP clients that use tools from them. Based on an original discussion [here](https://github.com/modelcontextprotocol/python-sdk/issues/145).\n\n## Usage\n\n**Note**: Make sure to supply `ANTHROPIC_API_KEY` in `.env` or as an environment variable.\n\n```\nuv run weather.py\n\nuv run client.py http://0.0.0.0:8080/sse\n```\n\n```\nInitialized SSE client...\nListing tools...\n\nConnected to server with tools: ['get_alerts', 'get_forecast']\n\nMCP Client Started!\nType your queries or 'quit' to exit.\n\nQuery: whats the weather like in Spokane?\n\nI can help you check the weather forecast for Spokane, Washington. I'll use the get_forecast function, but I'll need to use Spokane's latitude and longitude coordinates.\n\nSpokane, WA is located at approximately 47.6587° N, 117.4260° W.\n[Calling tool get_forecast with args {'latitude': 47.6587, 'longitude': -117.426}]\nBased on the current forecast for Spokane:\n\nRight now it's sunny and cold with a temperature of 37°F and ...\n```\n\n## Why?\n\nThis means the MCP server can now be some running process that agents (clients) connect to, use, and disconnect from whenever and wherever they want. In other words, an SSE-based server and clients can be decoupled processes (potentially even, on decoupled nodes). This is different and better fits \"cloud-native\" use-cases compared to the STDIO-based pattern where the client itself spawns the server as a subprocess.\n\n### Installing via Smithery\n\nTo install SSE-based Server and Client for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@sidharthrajaram/mcp-sse):\n\n```bash\nnpx -y @smithery/cli install @sidharthrajaram/mcp-sse --client claude\n```\n\n### Server\n\n`weather.py` is a SSE-based MCP server that presents some tools based on the National Weather Service APIs. Adapted from the MCP docs' [example STDIO server implementation.](https://modelcontextprotocol.io/quickstart/server)\n\nBy default, server runs on 0.0.0.0:8080, but is configurable with command line arguments like:\n\n```\nuv run weather.py --host <your host> --port <your port>\n```\n\n### Client\n\n`client.py` is a MCP Client that connects to and uses tools from the SSE-based MCP server. Adapted from the MCP docs' [example STDIO client implementation.](https://modelcontextprotocol.io/quickstart/client)\n\nBy default, client connects to SSE endpoint provided in the command line argument like:\n\n```\nuv run client.py http://0.0.0.0:8080/sse\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sse",
        "servers",
        "server",
        "events sse",
        "sse based",
        "mcp sse"
      ],
      "category": "weather-and-location-data"
    },
    "sjanaX01--weather-mcp-server": {
      "owner": "sjanaX01",
      "name": "weather-mcp-server",
      "url": "https://github.com/sjanaX01/weather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sjanaX01.webp",
      "description": "Provides comprehensive weather information including current conditions, forecasts, historical data, air quality, and astronomy details while enabling location searches and weather alerts.",
      "stars": 16,
      "forks": 16,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-28T09:06:46Z",
      "readme_content": "# Weather MCP Server\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/devilcoder01/weather-mcp-server)](https://archestra.ai/mcp-catalog/devilcoder01__weather-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@devilcoder01/weather-mcp-server)](https://smithery.ai/server/@devilcoder01/weather-mcp-server)\n\nA Model Context Protocol (MCP) server for weather data, built with FastAPI and the MCP framework. This server provides various weather-related tools that can be used by AI assistants to retrieve current weather conditions, forecasts, air quality data, and more.\n\n## Features\n\n- Current weather conditions\n- Weather forecasts (1-14 days)\n- Historical weather data\n- Weather alerts\n- Air quality information\n- Astronomy data (sunrise, sunset, moon phases)\n- Location search\n- Timezone information\n- Sports events\n\n## Requirements\n\n- Python 3.13+\n- [uv](https://github.com/astral-sh/uv) package manager\n- [WeatherAPI](https://www.weatherapi.com/) API key\n\n## Installation\n\n### Installing via Smithery\n\nTo install Weather Data Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@devilcoder01/weather-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @devilcoder01/weather-mcp-server --client claude\n```\n\n### Manual Installation\n1. Clone this repository:\n   ```\n   git clone https://github.com/yourusername/Weather_mcp_server.git\n   cd Weather_mcp_server\n   ```\n\n2. Install dependencies using uv:\n   ```\n   uv venv\n   uv pip install -e .\n   ```\n\n3. Create a `.env` file in the project root with your WeatherAPI key:\n   ```\n   WEATHER_API_KEY=your_api_key_here\n   ```\n\n## Usage\n\nRun the server:\n\n```\npython main.py\n```\n\nThe server will start on http://localhost:8000 by default.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "sjanax01",
        "weather",
        "mcp",
        "sjanax01 weather",
        "weather information",
        "data sjanax01"
      ],
      "category": "weather-and-location-data"
    },
    "stephen9412--roc-cwa-mcp": {
      "owner": "stephen9412",
      "name": "roc-cwa-mcp",
      "url": "https://github.com/stephen9412/roc-cwa-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/stephen9412.webp",
      "description": "Access real-time and forecast weather data for Taiwan, including 3-day and 1-week forecasts and historical rainfall data. Utilize a simplified API interface for reliable weather information specific to Taiwan's regions.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-31T13:51:28Z",
      "readme_content": "# Taiwan Central Weather Administration MCP Server\n\nThis project provides a Model Context Protocol (MCP) server that interfaces with the Taiwan Central Weather Administration (CWA) API, allowing you to easily access weather data for Taiwan.\n\n[中文版](README_ZH.md)\n\n## CWA API Resources\n\nTo use this project, you need to obtain an API key from the Central Weather Administration:\n\n- CWA Open Data Platform: https://opendata.cwa.gov.tw/index\n- API Documentation: https://opendata.cwa.gov.tw/dist/opendata-swagger.html\n- API Key Application Guide: https://www.hlbh.hlc.edu.tw/resource/openfid.php?id=38959\n\n## Features\n\n- Get 3-day weather forecast data for Taiwan counties and cities\n- Get 1-week weather forecast data for Taiwan counties and cities\n- Get historical rainfall data for the past three days\n- Automatic data cleaning and format conversion\n- Simplified API output with only essential information\n\n## System Requirements\n\n- Python 3.10+\n- MCP CLI 1.6.0+\n- uv package manager\n\n## Installation\n\n1. Ensure you have Python 3.10 or higher installed\n\n2. Install dependencies using uv:\n\n```bash\n# Install project dependencies using uv\nuv pip install -e .\n```\n\n## Usage\n\n### Starting the Server\n\n#### Windows Users\n\n```bash\n# Execute in Command Prompt or PowerShell\nuv --directory your_project_path run src/server.py your_API_key\n```\n\n#### Mac and Linux Users\n\n```bash\n# Execute in Terminal\nuv --directory your_project_path run src/server.py your_API_key\n```\n\n### Available MCP Tools\n\nThis server provides the following three main tools:\n\n#### 1. get_3_days_weather\n\nGet 3-day weather forecast data for a specified county or city.\n\nParameters:\n\n- `location_name` (string): County or city name, must be a valid Taiwan county or city name\n\nValid county/city names include: Yilan County, Hualien County, Taitung County, Penghu County, Kinmen County, Lienchiang County, Taipei City, New Taipei City, Taoyuan City, Taichung City, Tainan City, Kaohsiung City, Keelung City, Hsinchu County, Hsinchu City, Miaoli County, Changhua County, Nantou County, Yunlin County, Chiayi County, Chiayi City, Pingtung County\n\n#### 2. get_1_week_weather\n\nGet 1-week weather forecast data for a specified county or city.\n\nParameters:\n\n- `location_name` (string): County or city name, must be a valid Taiwan county or city name\n\n#### 3. get_historical_rainfall\n\nGet rainfall data for the past three days.\n\nNo parameters required.\n\n### Data Format\n\n#### Weather Forecast Data Format\n\n```json\n[\n  {\n    \"ElementName\": \"Temperature\",\n    \"Time\": [\n      [\"2025-04-11T00:00\", \"21\"],\n      [\"2025-04-11T01:00\", \"21\"],\n      ...\n    ]\n  },\n  {\n    \"ElementName\": \"Relative Humidity\",\n    \"Time\": [\n      [\"2025-04-11T00:00\", \"90\"],\n      [\"2025-04-11T01:00\", \"89\"],\n      ...\n    ]\n  },\n  ...\n]\n```\n\n#### Rainfall Data Format\n\n```json\n{\n  \"rain_labels\": [\"Now\", \"Past10Min\", \"Past1hr\", \"Past3hr\", \"Past6Hr\", \"Past12hr\", \"Past24hr\", \"Past2days\", \"Past3days\"],\n  \"stations\": [\n    {\n      \"name\": \"Station Name\",\n      \"time\": \"Observation Time\",\n      \"loc\": \"County,Town\",\n      \"geo\": [latitude, longitude],\n      \"rain\": [current, past10min, past1hr, past3hr, past6hr, past12hr, past24hr, past2days, past3days]\n    },\n    ...\n  ]\n}\n```\n\n### Supported Weather Elements\n\n#### 3-Day Forecast\n\n- Temperature\n- Relative Humidity\n- Apparent Temperature\n- Comfort Index\n- Wind Direction\n- Wind Speed\n- 3-hour Precipitation Probability\n- Weather Phenomenon\n- Comprehensive Weather Description\n\n#### 1-Week Forecast\n\n- Average Temperature\n- Maximum Temperature\n- Minimum Temperature\n- Average Relative Humidity\n- Maximum Apparent Temperature\n- Minimum Apparent Temperature\n- Maximum Comfort Index\n- Minimum Comfort Index\n- Wind Speed\n- Wind Direction\n- 12-hour Precipitation Probability\n- UV Index\n- Weather Phenomenon\n- Comprehensive Weather Description\n\n## API Data Sources\n\nThis project uses the following open data APIs from the Taiwan Central Weather Administration:\n\n- 3-Day Forecast: Taiwan Township Weather Forecast - 3-Day Forecast (3-hour intervals)\n- 1-Week Forecast: Taiwan Township Weather Forecast - 1-Week Weather Forecast\n- Rainfall Data: Automatic Rainfall Station - Rainfall Observation Data\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "forecasts",
        "forecast",
        "taiwan",
        "weather data",
        "weather information",
        "data taiwan"
      ],
      "category": "weather-and-location-data"
    },
    "sunholdshen--mymcp": {
      "owner": "sunholdshen",
      "name": "mymcp",
      "url": "https://github.com/sunholdshen/mymcp",
      "imageUrl": "/freedevtools/mcp/pfp/sunholdshen.webp",
      "description": "Provides real-time weather information for cities around the world through a simple API, allowing applications to query current weather conditions easily.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-17T05:25:59Z",
      "readme_content": "# 天气查询 MCP 服务\n\n这是一个简单的天气查询MCP（Model Completion Plugin）服务，可以让你通过Cursor AI助手查询全球城市的天气状况。\n\n## 准备工作\n\n1. 注册并获取OpenWeatherMap API密钥：\n   - 访问 [OpenWeatherMap](https://openweathermap.org/) 网站\n   - 注册一个免费账户\n   - 获取API密钥\n\n2. 配置环境变量：\n   - 在项目根目录中找到`.env`文件\n   - 将你的API密钥填入`OPENWEATHER_API_KEY=your_api_key_here`\n\n## 本地运行\n\n1. 安装依赖：\n```\nnpm install\n```\n\n2. 启动服务：\n```\nnpm start\n```\n\n或者使用开发模式（自动重启）：\n```\nnpm run dev\n```\n\n3. 服务将在 http://localhost:3001 上运行\n   - MCP清单: http://localhost:3001/mcp-manifest.json\n   - OpenAPI规范: http://localhost:3001/openapi.json\n\n## 部署到公网\n\n为了让Cursor能够使用这个MCP服务，你需要将其部署到公网可访问的地址。以下是几种简单的方法：\n\n### 使用ngrok进行临时公开（开发测试用）\n\n1. 安装ngrok：\n   - 访问 [ngrok.com](https://ngrok.com/) 注册并下载\n   - 按照官方指南设置ngrok\n\n2. 在本地启动你的服务：\n```\nnpm start\n```\n\n3. 在另一个终端窗口启动ngrok：\n```\nngrok http 3001\n```\n\n4. ngrok会提供一个公开URL（例如 `https://abc123.ngrok.io`）\n   - 使用这个URL来配置Cursor中的MCP服务\n\n### 部署到Render.com（免费方案）\n\n1. 注册 [Render.com](https://render.com/) 账户\n\n2. 创建新的Web服务：\n   - 连接你的GitHub仓库\n   - 设置构建命令：`npm install`\n   - 设置启动命令：`npm start`\n   - 添加环境变量：`OPENWEATHER_API_KEY`\n\n3. 部署完成后，Render会提供一个类似于 `https://your-service-name.onrender.com` 的URL\n   - 使用这个URL来配置Cursor中的MCP服务\n\n## 在Cursor中配置MCP服务\n\n1. 打开Cursor编辑器\n2. 点击设置图标\n3. 选择\"MCP服务\"\n4. 点击\"添加MCP服务\"\n5. 输入你的MCP清单URL（例如`https://your-service.onrender.com/mcp-manifest.json`）\n6. 保存设置\n\n现在你可以通过Cursor AI助手查询天气了，例如：\n- \"北京今天的天气怎么样？\"\n- \"查询上海的气温\"\n- \"纽约现在的天气状况\"\n\n## API使用\n\n如果你想直接调用API，可以使用以下端点：\n\n```\nGET /weather?city={城市名}\n```\n\n示例响应：\n```json\n{\n  \"city\": \"北京\",\n  \"temperature\": 25.6,\n  \"description\": \"晴\",\n  \"humidity\": 45,\n  \"wind_speed\": 5.7\n}\n```\n\n## 许可证\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mymcp",
        "weather",
        "sunholdshen",
        "weather information",
        "weather location",
        "data sunholdshen"
      ],
      "category": "weather-and-location-data"
    },
    "sunsetcoder--flightradar24-mcp-server": {
      "owner": "sunsetcoder",
      "name": "flightradar24-mcp-server",
      "url": "https://github.com/sunsetcoder/flightradar24-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sunsetcoder.webp",
      "description": "Track flights in real-time using Flightradar24 data, providing information on specific flight times and airport statuses, and monitoring emergency flights.",
      "stars": 45,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T05:20:17Z",
      "readme_content": "# Flightradar24 MCP Server 🛩️\n\nA Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data. Perfect for aviation enthusiasts, travel planners, or anyone curious about flights overhead!\n\n## What Can This Do? ✨\n\n- 🔍 Track any flight in real-time\n- ⏰ Get arrival and departure times for specific flights\n- 🌉 View the status of flights at an airport\n- 🚨 Monitor emergency flights\n\n<img width=\"1466\" alt=\"Anthropic Claude MCP Hackathon - FlightRadar24 MCP server\" src=\"https://github.com/user-attachments/assets/719444ae-2c8b-4441-84f8-5150337d871f\" />\n\n## Setup Guide 🚀\n\n### 1. Prerequisites\n- [Claude Desktop](https://claude.ai/desktop) installed on your computer\n- A Flightradar24 API key (get one from [Flightradar24's website](https://www.flightradar24.com/premium))*\n\n### 2. Installation\n\n1. Clone this repository somewhere on your computer:\n   ```bash\n   git clone https://github.com/sunsetcoder/flightradar24-mcp-server.git\n   ```\n\n2. Install dependencies & build the project:\n   ```bash\n   cd flightradar24-mcp-server\n   npm install\n   npm run build\n   ```\n\n### 3. Integration with Claude Desktop\n\n1. Open your Claude Desktop configuration file:\n   ```\n   # On Mac:\n   ~/Library/Application Support/Claude/claude_desktop_config.json\n   \n   # On Windows:\n   %APPDATA%/Claude/claude_desktop_config.json\n   ```\n\n2. Add the following to the `mcpServers` object in your config:\n   ```json\n   {\n     \"mcpServers\": {\n       \"flightradar24-server\": {\n         \"command\": \"node\",\n         \"args\": [\n           \"/Users/<username>/<FULL_PATH...>/flightradar24-mcp-server/dist/index.js\"\n         ],\n         \"env\": {\n           \"FR24_API_KEY\": \"your_api_key_here\",\n           \"FR24_API_URL\": \"https://fr24api.flightradar24.com\"\n         }\n       }\n     }\n   }\n   ```\n\n3. Important Steps:\n   - Replace `/FULL/PATH/TO/flightradar24-mcp-server` with the actual full path to where you cloned the repository\n   - Add your Flightradar24 API key in the `env` section\n   - Make sure to use forward slashes (`/`) in the path, even on Windows\n\n4. Restart Claude Desktop for the changes to take effect\n\n## Environment Setup\n\n1. Copy `.env.example` to `.env`:\n   ```bash\n   cp .env.example .env\n   ```\n\n2. Update the `.env` file with your actual Flightradar24 API key:\n   ```env\n   FR24_API_KEY=your_actual_api_key_here\n   ```\n\nNote: Never commit your actual API key to version control. The `.env` file is ignored by git for security reasons.\n\n## Let's Try It Out! 🎮\n\nOnce the server is configured, you can ask Claude questions like:\n\n1. \"What's the ETA for United Airlines flight UA123?\"\n2. \"Show me all flights currently at SFO\"\n3. \"Are there any emergency flights in the area?\"\n4. \"Show me all international flights arriving at SFO in the next 2 hours\"\n5. \"How many commercial flights are currently over the Pacific Ocean?\"\n6. \"Identify any flights that have declared an emergency in the California region\"\n\nExample conversation with Claude:\n```\nYou: What's the status of flight UA123?\nClaude: Let me check that for you...\n[Claude will use the MCP server to fetch real-time flight information]\n```\n\n## Common Questions & Troubleshooting 🤔\n\n### \"Claude can't connect to the server\"\n- Check if the path in `claude_desktop_config.json` is correct\n- Make sure you're using the full absolute path\n- Verify your API key is correct\n- Try restarting Claude Desktop\n\n### \"The server isn't responding\"\n- Make sure your Flightradar24 API key is valid\n- Check if the API URL is correct\n- Look for any error messages in server logs\n\n### FlightRadar API Access\n- Note: Using Flightradar24's API requires a [subscription](https://fr24api.flightradar24.com/subscriptions-and-credits)\n\n## Need More Help? 🆘\n\n1. Make sure Claude Desktop is properly installed\n2. Verify your Flightradar24 API key is active\n3. Check the path in your configuration file is correct\n4. Look for error messages in MCP server logs\n\n## License 📄\n\nMIT\n\n---\n\nMade with ❤️ for aviation enthusiasts\n",
      "npm_url": "https://www.npmjs.com/package/flightradar24-mcp-server",
      "npm_downloads": 967,
      "keywords": [
        "flightradar24",
        "sunsetcoder",
        "flights",
        "flightradar24 mcp",
        "sunsetcoder flightradar24",
        "flightradar24 data"
      ],
      "category": "weather-and-location-data"
    },
    "swonixs--weatherapi-mcp": {
      "owner": "swonixs",
      "name": "weatherapi-mcp",
      "url": "https://github.com/swonixs/weatherapi-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/swonixs.webp",
      "description": "Fetches real-time weather data and air quality information for any city, allowing integration with various MCP clients to provide up-to-date environmental insights.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-23T22:38:37Z",
      "readme_content": "# WeatherAPI MCP Server\n\nAn MCP server that provides current weather and air quality data using WeatherAPI.\n\n## Features\n\n- Get current weather data for any city\n- Air quality information (optional)\n- Dynamic URI support for weather resources\n- Easy integration with n8n, Claude Desktop App, Windsurf IDE,Cursor IDE, and other MCP clients\n\n## Getting Started\n\n### Get WeatherAPI Key\n\n1. Go to [WeatherAPI.com](https://www.weatherapi.com)\n2. Sign up for a free account\n3. After signing in, go to your dashboard\n4. Copy your API key from the \"API Keys\" section\n\n### MCP Configuration\n\nAdd the following configuration to your Windsurf MCP config file:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@swonixs/weatherapi-mcp\"],\n      \"env\": {\n        \"WEATHER_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\nReplace `YOUR_API_KEY_HERE` with the API key you obtained from WeatherAPI.com.\n\n### Tools\n\n#### get_weather\n\nGet current weather data for a specified city.\n\nParameters:\n- `location` (string): City name\n\nExample response:\n```json\n{\n  \"location\": \"London\",\n  \"country\": \"United Kingdom\",\n  \"temp_c\": 15.0,\n  \"condition\": \"Partly cloudy\",\n  \"humidity\": 71,\n  \"wind_kph\": 14.4,\n  \"air_quality\": {\n    \"co\": 230.3,\n    \"no2\": 13.5,\n    \"o3\": 52.9,\n    \"pm2_5\": 8.5,\n    \"pm10\": 12.1,\n    \"us-epa-index\": 1\n  }\n}\n```\n\n### Repository\n\n[WeatherAPI MCP Server](https://github.com/swonixs/weatherapi-mcp)\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/@swonixs/weatherapi-mcp",
      "npm_downloads": 5000,
      "keywords": [
        "weatherapi",
        "weather",
        "swonixs",
        "weatherapi mcp",
        "weather data",
        "swonixs weatherapi"
      ],
      "category": "weather-and-location-data"
    },
    "szypetike--weather-mcp-server": {
      "owner": "szypetike",
      "name": "weather-mcp-server",
      "url": "https://github.com/szypetike/weather-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/szypetike.webp",
      "description": "Retrieve real-time weather information including temperature, humidity, and wind conditions for cities worldwide, with an option to fallback on mock data if the API request fails.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-18T11:06:47Z",
      "readme_content": "# Weather MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@szypetike/weather-mcp-server)](https://smithery.ai/server/@szypetike/weather-mcp-server)\n\nA Model Context Protocol (MCP) server that provides weather information for cities around the world.\n\n## Features\n\n- Get current weather for any city\n- Provides temperature, weather conditions, humidity, wind information, and more\n- Fallback to mock data if API request fails\n\n## Requirements\n\n- Node.js (v14 or higher)\n- npm or yarn\n- OpenWeather API key (optional - will use mock data if not provided)\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   npm install\n   ```\n3. Build the server:\n   ```\n   npm run build\n   ```\n\n## Usage\n\n### Running locally\n\n```\nnpm start\n```\n\n### Using with Claude or other MCP-compatible AI assistants\n\nAdd the following configuration to your MCP settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather-server\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/weather-server/build/index.js\"],\n      \"env\": {\n        \"OPENWEATHER_API_KEY\": \"your-api-key-here\" // Optional - will use mock data if not provided\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### API Key and Mock Data\n\nThis server can operate in two modes:\n\n1. **With API Key**: When an OpenWeather API key is provided via the `OPENWEATHER_API_KEY` environment variable, the server will fetch real-time weather data from the OpenWeather API.\n\n2. **Without API Key**: If no API key is provided, the server will automatically use mock data for a set of predefined cities (London, New York, Tokyo, Paris, Sydney). For other cities, it will use default mock data.\n\nTo get an OpenWeather API key:\n1. Sign up at [OpenWeather](https://openweathermap.org/)\n2. Navigate to your account's \"API keys\" section\n3. Generate a new API key or use an existing one\n\nThe mock data mode is useful for development, testing, or when you don't need real-time weather data.\n\n## Available Tools\n\n### get_current_weather\n\nGet current weather information for a specified city.\n\n**Input Schema:**\n```json\n{\n  \"city\": \"string\" // City name (e.g., \"London\", \"New York\", \"Tokyo\")\n}\n```\n\n**Example Response:**\n```json\n{\n  \"location\": \"London, GB\",\n  \"date\": \"Monday, March 24, 2025\",\n  \"time\": \"7:30:00 PM\",\n  \"temperature\": {\n    \"current\": \"12°C\",\n    \"feelsLike\": \"10°C\"\n  },\n  \"weather\": {\n    \"main\": \"Cloudy\",\n    \"description\": \"Overcast clouds\",\n    \"icon\": \"https://openweathermap.org/img/wn/04d@2x.png\"\n  },\n  \"details\": {\n    \"humidity\": \"75%\",\n    \"pressure\": \"1012 hPa\",\n    \"windSpeed\": \"4.5 m/s\",\n    \"windDirection\": \"230°\",\n    \"cloudiness\": \"90%\",\n    \"sunrise\": \"6:45 AM\",\n    \"sunset\": \"7:30 PM\"\n  },\n  \"source\": \"OpenWeather API\" // or \"Mock Data (No API key provided)\" or \"Mock Data (API request failed)\"\n}\n```\n\nThe `source` field in the response indicates where the data came from:\n- `\"OpenWeather API\"`: Real-time data from the OpenWeather API\n- `\"Mock Data (No API key provided)\"`: Mock data used because no API key was provided\n- `\"Mock Data (API request failed)\"`: Mock data used because the API request failed\n\n## License\n\nMIT\n",
      "npm_url": "https://www.npmjs.com/package/weather-mcp-server",
      "npm_downloads": 405,
      "keywords": [
        "weather",
        "api",
        "humidity",
        "weather information",
        "weather location",
        "weather mcp"
      ],
      "category": "weather-and-location-data"
    },
    "tinjyuu--mcp-jr-east-delay": {
      "owner": "tinjyuu",
      "name": "mcp-jr-east-delay",
      "url": "https://github.com/tinjyuu/mcp-jr-east-delay",
      "imageUrl": "/freedevtools/mcp/pfp/tinjyuu.webp",
      "description": "Provides real-time delay information for JR East trains through the \"getDelays\" tool, facilitating access to up-to-date train delay data via a standardized MCP interface.",
      "stars": 4,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-20T05:27:08Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/tinjyuu-mcp-jr-east-delay-badge.png)](https://mseep.ai/app/tinjyuu-mcp-jr-east-delay)\n\n# JR東日本 遅延情報 MCPサーバー\n\n## セットアップ\n\n```sh\nnpm install\n```\n\n## ビルド\n\n```sh\nnpm run build\n```\n\n## テスト\n\n```sh\nnpx vitest run\n```\n\n## サーバーの起動\n\n```sh\nnode build/index.js\n```\n\nまたは、package.jsonのbin設定により\n\n```sh\nnpx jr-east-delay\n```\n\nでコマンドとしても実行できます。\n\n## MCPクライアントからの利用\n\nClaude DesktopやMCP InspectorなどのMCPクライアントから「getDelays」ツールを呼び出すことで、JR東日本の遅延情報を取得できます。\n\n### MCPクライアント設定例\n\nClaude DesktopやMCP Inspector等のクライアントで本サーバーを利用する場合、設定ファイル（例: `claude_desktop_config.json`）に以下のように記述してください。\n\n#### 例1: `node` コマンドがパスに通っている場合\n\n```json\n\"jr-east-delay\": {\n  \"command\": \"node\",\n  \"args\": [\"/Users/your-path/mcp-jr-east-delay/build/index.js\"]\n}\n```\n\n#### 例2: `node` の絶対パスを指定する場合\n\n```json\n\"jr-east-delay\": {\n  \"command\": \"/Users/your-username/.nodebrew/current/bin/node\",\n  \"args\": [\"/Users/your-path/mcp-jr-east-delay/build/index.js\"]\n}\n```\n\n- `your-username` の部分はご自身の環境に合わせて変更してください。\n- `your-path` の部分はご自身の環境に合わせて変更してください。\n- `node` コマンドがパスに通っていない場合は絶対パスで指定してください。\n\n---\n\n### 開発用メモ\n- テストは `src/index.test.ts` に記述\n- MCPプロトコルの通信テストはMCP Inspector等のクライアントを利用\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tinjyuu",
        "delay",
        "trains",
        "train delay",
        "tinjyuu mcp",
        "delay data"
      ],
      "category": "weather-and-location-data"
    },
    "variflight--variflight-mcp": {
      "owner": "variflight",
      "name": "variflight-mcp",
      "url": "https://github.com/variflight/variflight-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/variflight.webp",
      "description": "Provides real-time flight information including searches, transfer options, comfort metrics, aircraft tracking, and weather forecasts. Enables access to detailed flight data and purchasing options for enhanced travel planning.",
      "stars": 16,
      "forks": 6,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-29T10:41:43Z",
      "readme_content": "# Variflight MCP Server\n\nA Model Context Protocol (MCP) server implementation for VariFlight flight information services. This server provides various tools to query flight information, weather data, and flight comfort metrics.\n\n# Variflight API Key\n\nTo use the Variflight MCP server, you need to have a Variflight API key. You can get it from [here](https://mcp.variflight.com).\n\n## Installation\n\n```json\n{\n    \"mcpServers\": {\n        \"variflight\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"@variflight-ai/variflight-mcp\"\n            ],\n            \"env\": {\n                \"VARIFLIGHT_API_KEY\": \"your_api_key_here\"\n            }\n        }\n    }\n}\n```\n\n## Available Tools\n\n### 1. Search Flights by Departure and Arrival\nSearch flights between airports using IATA codes:\n```typescript\nsearchFlightsByDepArr({\n  dep: \"PEK\",  // Beijing\n  arr: \"SHA\",  // Shanghai\n  date: \"2024-03-20\"\n})\n```\n\n### 2. Search Flights by Number\nSearch flights using flight number:\n```typescript\nsearchFlightsByNumber({\n  fnum: \"MU2157\",\n  date: \"2024-03-20\"\n})\n```\n\n### 3. Get Flight Transfer Information\nFind transfer options between cities:\n```typescript\ngetFlightTransferInfo({\n  depcity: \"BJS\",\n  arrcity: \"LAX\",\n  depdate: \"2024-03-20\"\n})\n```\n\n### 4. Flight Happiness Index\nGet detailed flight comfort metrics:\n```typescript\nflightHappinessIndex({\n  fnum: \"MU2157\",\n  date: \"2024-03-20\"\n})\n```\n\n### 5. Real-time Aircraft Location\nTrack aircraft location using registration number:\n```typescript\ngetRealtimeLocationByAnum({\n  anum: \"B2021\"\n})\n```\n\n### 6. Airport Weather Forecast\nGet 3-day weather forecast for airports:\n```typescript\ngetFutureWeatherByAirport({\n  airport: \"PEK\"\n})\n```\n\n### 7. Search Flight Itineraries\nSearch for purchasable flight options and get the lowest prices:\n```typescript\nsearchFlightItineraries({\n  depCityCode: \"BJS\",  // Beijing\n  arrCityCode: \"SHA\",  // Shanghai\n  depDate: \"2025-04-20\"\n})\n```\n\n## License\n\nISC License - See [LICENSE](LICENSE) for details.\n\n## Author\n\nVariflight (https://mcp.variflight.com)\n\n## Version\n\nCurrent version: 0.0.2\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "variflight",
        "mcp",
        "planning",
        "variflight mcp",
        "data variflight",
        "variflight variflight"
      ],
      "category": "weather-and-location-data"
    },
    "webdevtodayjason--slim-MCP": {
      "owner": "webdevtodayjason",
      "name": "slim-MCP",
      "url": "https://github.com/webdevtodayjason/slim-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/webdevtodayjason.webp",
      "description": "Modular API service that integrates various tools for AI agents and automated workflows, featuring functions for weather updates, task management, and email sending through a consistent RESTful interface.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-20T02:26:55Z",
      "readme_content": "# Slim-MCP: Claude Tools 🤖\n\n[![Python 3.11+](https://img.shields.io/badge/python-3.11+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![GitHub stars](https://img.shields.io/github/stars/webdevtodayjason/slim-MCP?style=social)](https://github.com/webdevtodayjason/slim-MCP/stargazers)\n[![Twitter Follow](https://img.shields.io/twitter/follow/webdevtodayjason?style=social)](https://twitter.com/webdevtodayjason)\n\n> 🚀 Supercharge Claude with powerful Python-based tools via the MCP protocol\n\n## ✨ Features\n\n- 🧮 **Calculator**: Perform complex math calculations\n- 🌦️ **Weather**: Get current weather forecasts and alerts\n- 🕒 **DateTime**: Access current time in local and UTC formats\n- 🔌 **Extensible**: Easily add custom tools with simple Python functions\n- 💻 **Desktop Integration**: Seamless integration with Claude Desktop app\n- 🖱️ **Cursor IDE**: Native integration with Cursor IDE for developers\n\n## 📋 Table of Contents\n\n- [Installation](#-installation)\n- [Usage](#-usage)\n- [Integrations](#-integrations)\n- [Development](#-development)\n- [Contributing](#-contributing)\n- [License](#-license)\n\n## 🚀 Installation\n\n### Prerequisites\n\n- Python 3.11+\n- Conda (recommended)\n\n### Setup with Conda (Recommended)\n\n```bash\n# Create conda environment with Python 3.11\nconda create -n mcp-tools python=3.11\n\n# Activate environment\nconda activate mcp-tools\n\n# Clone the repository\ngit clone https://github.com/webdevtodayjason/slim-MCP.git\ncd slim-MCP\n\n# Install with uv (preferred)\nuv pip install -e .\n\n# OR install with standard pip\npip install -e .\n```\n\n## 🎮 Usage\n\n### Configure Claude\n\nAdd this to your Claude configuration file:\n\n```json\n{\n    \"mcpServers\": {\n        \"claude-tools\": {\n            \"command\": \"/path/to/conda/envs/mcp-tools/bin/python\",\n            \"args\": [\"-m\", \"claude_tools.main\"]\n        }\n    }\n}\n```\n\n### Configure Cursor IDE\n\n```\nNAME: claude-tools\nTYPE: command\nCOMMAND: /path/to/conda/envs/mcp-tools/bin/python -m claude_tools.main\n```\n\n### Example Prompts\n\n```\nCan you calculate 25^3 + sqrt(196)?\n\nWhat's the current time in UTC?\n\nWhat's the weather like in Austin, TX?\n```\n\n## 🔌 Integrations\n\n- **Claude AI Desktop**: Primary integration via MCP protocol\n- **Cursor IDE**: Direct integration for development workflows\n- **Claude Web**: Compatible with Claude Web through configuration\n\n## 💻 Development\n\n### Project Structure\n\n```\nslim-MCP/\n├── src/\n│   └── claude_tools/\n│       ├── __init__.py\n│       ├── calculator.py     # Math calculation tool\n│       ├── datetime_tool.py  # Date and time utilities\n│       ├── main.py           # Entry point\n│       └── weather.py        # Weather forecasting tool\n├── http_server.py            # HTTP server for MCP\n├── pyproject.toml            # Project configuration\n├── .gitignore                # Git ignore file\n└── LICENSE                   # MIT License\n```\n\n### Creating a New Tool\n\n1. Create a new Python file in `src/claude_tools/`:\n\n```python\n# src/claude_tools/my_tool.py\ndef my_awesome_function(param: str) -> str:\n    \"\"\"Description of what this tool does.\n    \n    Args:\n        param: Description of the parameter\n        \n    Returns:\n        A string with the result\n    \"\"\"\n    result = f\"Processed: {param}\"\n    return result\n    \ndef register_my_tools(mcp):\n    \"\"\"Register all my tools with the MCP server.\"\"\"\n    mcp.tool()(my_awesome_function)\n```\n\n2. Import and register your tool in `__init__.py`:\n\n```python\n# In src/claude_tools/__init__.py\nfrom .calculator import register_calculator_tools\nfrom .datetime_tool import register_datetime_tools\nfrom .weather import register_weather_tools\nfrom .my_tool import register_my_tools  # Add this line\n\ndef register_all_tools(mcp):\n    register_calculator_tools(mcp)\n    register_datetime_tools(mcp)\n    register_weather_tools(mcp)\n    register_my_tools(mcp)  # Add this line\n```\n\n3. Restart the server and your new tool is ready to use!\n\n## 👥 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<p align=\"center\">\n  Made with ❤️ by <a href=\"https://github.com/webdevtodayjason\">Jason Brashear</a>\n</p>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "api",
        "webdevtodayjason",
        "modular",
        "modular api",
        "webdevtodayjason slim",
        "data webdevtodayjason"
      ],
      "category": "weather-and-location-data"
    },
    "wolkwork--knmi-mcp": {
      "owner": "wolkwork",
      "name": "knmi-mcp",
      "url": "https://github.com/wolkwork/knmi-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/wolkwork.webp",
      "description": "Fetches real-time weather data from KNMI weather stations in the Netherlands, providing measurements such as temperature, humidity, wind speed, precipitation, visibility, and air pressure. Supports natural language interpretation for understanding weather conditions and includes a location search feature.",
      "stars": 3,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-27T14:36:32Z",
      "readme_content": "# KNMI Weather MCP\n\nA FastMCP server that provides real-time weather data from KNMI (Royal Netherlands Meteorological Institute) weather stations. This application fetches the latest 10-minute measurements from the nearest weather station to any location in the Netherlands.\n\n<a href=\"https://glama.ai/mcp/servers/xanerdcjsm\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/xanerdcjsm/badge\" alt=\"KNMI Weather MCP server\" />\n</a>\n\n## Features\n\n- Get weather data for any location in the Netherlands\n- Automatically finds the nearest KNMI weather station\n- Provides real-time measurements including:\n  - Temperature\n  - Humidity\n  - Wind speed and direction\n  - Precipitation\n  - Visibility\n  - Air pressure\n- Natural language interpretation of weather conditions\n- Location search functionality\n- Detailed logging\n\n## Prerequisites\n\n- Python 3.10 or higher\n- KNMI API Key (get one from [KNMI Data Platform](https://dataplatform.knmi.nl/))\n- `uv` package manager\n\n## Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone <repository-url>\n   cd knmi-mcp\n   ```\n\n2. Create a `.env` file in the project root:\n   ```bash\n   KNMI_API_KEY=your_api_key_here\n   ```\n\n## Running the Server\n\n### Using Claude AI\n\nTo use this application with Claude AI, run the following command in the folder of the project:\n\n```bash\nuv run fastmcp install src/knmi_weather_mcp/server.py\n```\n\nThis will add the following configuration to your Claude configuration file (typically located at `~/Library/Application Support/Claude/claude_desktop_config.json`):\n\n```json\n{\n    \"KNMI Weather\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"fastmcp\",\n        \"--with\",\n        \"httpx\",\n        \"--with\",\n        \"netCDF4\",\n        \"--with\",\n        \"numpy\",\n        \"--with\",\n        \"pandas\",\n        \"--with\",\n        \"pydantic\",\n        \"--with\",\n        \"python-dotenv\",\n        \"--with\",\n        \"xarray\",\n        \"fastmcp\",\n        \"run\",\n        \"/Users/<username>/<git location>/knmi-mcp/src/knmi_weather_mcp/server.py\"\n      ]\n    }\n}\n```\n\nNote: If you see an error like this:\n\n```\nspawn uv ENOENT\n```\n\nReplace the `uv` command with the full path to the `uv` command. On *nix systems this can be found with the command `which uv`.\n\n\n### Manual Running\n\nFor development or standalone usage:\n\n```bash\nuv run fastmcp run src/knmi_weather_mcp/server.py\n```\n\n## Available Tools\n\n### 1. what_is_the_weather_like_in\n\nGet a natural language interpretation of current weather conditions for any location in the Netherlands.\n\nExample:\n\n```python\nawait what_is_the_weather_like_in(\"Amsterdam\")\n```\n\n### 2. get_location_weather\n\nGet raw weather data for a location.\n\nExample:\n\n```python\nawait get_location_weather(\"Rotterdam\")\n```\n\n### 3. search_location\n\nSearch for locations in the Netherlands.\n\nExample:\n\n```python\nawait search_location(\"Utrecht\")\n```\n\n### 4. get_nearest_station\n\nFind the nearest KNMI weather station to given coordinates.\n\nExample:\n\n```python\nawait get_nearest_station(52.3676, 4.9041)\n```\n\n## Logging\n\nThe application logs are stored in the `logs/knmi_weather.log` file, providing detailed information about:\n\n- API requests and responses\n- Weather data processing\n- Error messages\n- Debug information\n\n## Data Sources\n\nThis application uses the KNMI Data Platform API to fetch data from the \"Actuele10mindataKNMIstations\" dataset, which provides 10-minute interval measurements from all KNMI weather stations in the Netherlands.\n\n## Error Handling\n\nThe application includes robust error handling for:\n\n- Invalid locations\n- API authentication issues\n- Network problems\n- Data parsing errors\n- Missing measurements",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "knmi",
        "weather",
        "precipitation",
        "knmi weather",
        "weather data",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "wpnbos--buienradar-mcp-server": {
      "owner": "wpnbos",
      "name": "buienradar-mcp-server",
      "url": "https://github.com/wpnbos/buienradar-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/wpnbos.webp",
      "description": "Fetches precipitation forecasts for specified latitude and longitude using Buienradar, providing data for the next two hours.",
      "stars": 0,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-17T19:10:22Z",
      "readme_content": "# Buienradar MCP Server\n[![smithery badge](https://smithery.ai/badge/@wpnbos/buienradar-mcp-server)](https://smithery.ai/server/@wpnbos/buienradar-mcp-server)\n\n## Overview\n\nThis is an MCP server that fetches precipitation data for a given latitude and longitude using Buienradar. It exposes a single MCP tool, `get_precipitation_for`, which provides precipitation forecasts for the next two hours.\n\n### Installing via Smithery\n\nTo install Buienradar MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@wpnbos/buienradar-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @wpnbos/buienradar-mcp-server --client claude\n```\n\n## Configuration\n\nFirst, make sure you have `uv` (and Python) installed.\n\nTo integrate this server with `Claude for Desktop`, update your configuration file at:\n\nMacOS/Linux\n```\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\nWindows\n```\ncode $env:AppData\\Claude\\claude_desktop_config.json\n```\n\nExample configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"precipitation\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/buienradar-mcp-server\",\n                \"run\",\n                \"server.py\"\n            ]\n        }\n    }\n}\n```\n\nReplace `/ABSOLUTE/PATH/TO/PARENT/FOLDER/buienradar-mcp-server` with the actual path where your server is located.\n\nRestart Claude for Desktop for the tool to become available.\n\nYou might have to provide the full path for `uv` instead of just `uv`.\nTo find the full path for your `uv` executable, on MacOS/Linux execute `which uv`.\n\n## Usage\n\nIf all went well, you should be able to ask Claude about any upcoming precipitation.\n\n```\n> Will there be any rain soon in Amsterdam?\n\n> No rain predicted in Amsterdam for the next 2 hours.\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "forecasts",
        "precipitation",
        "buienradar",
        "wpnbos buienradar",
        "precipitation forecasts",
        "fetches precipitation"
      ],
      "category": "weather-and-location-data"
    },
    "xixilidao--osgearth": {
      "owner": "xixilidao",
      "name": "osgearth",
      "url": "https://github.com/xixilidao/osgearth",
      "imageUrl": "/freedevtools/mcp/pfp/xixilidao.webp",
      "description": "Add geospatially accurate 3D maps to C++ applications, enabling developers to integrate and display complex geographical data visually.",
      "stars": 0,
      "forks": 0,
      "license": "Other",
      "language": "",
      "updated_at": "2024-10-07T03:14:53Z",
      "readme_content": "![Windows](https://github.com/gwaldron/osgearth/actions/workflows/windows.yml/badge.svg)\n![Linux](https://github.com/gwaldron/osgearth/actions/workflows/linux.yml/badge.svg)\n![OSX](https://github.com/gwaldron/osgearth/actions/workflows/macos.yml/badge.svg)\n\n\n## Welcome to osgEarth!\n\nosgEarth adds geospatially accurate 3D maps to your C++ application.\n\n<img alt=\"a0b1c650_442a_4e6d_88e6_42a5c92083b8\" src=\"https://github.com/user-attachments/assets/a0b1c650-442a-4e6d-88e6-42a5c92083b8\" width=\"200\" height=\"140\"/>\n<img alt=\"08d0f8c0_49e1_41a8_8b97_d663337f1cbb\" src=\"https://github.com/user-attachments/assets/08d0f8c0-49e1-41a8-8b97-d663337f1cbb\" width=\"200\" height=\"140\"/>\n<img alt=\"575315e1_e2ae_43ec_8a97_83bafcfa9131\" src=\"https://github.com/user-attachments/assets/575315e1-e2ae-43ec-8a97-83bafcfa9131\" width=\"200\" height=\"140\"/>\n<img alt=\"24971c79_f93c_48eb_ab79_161bb35beae4\" src=\"https://github.com/user-attachments/assets/24971c79-f93c-48eb-ab79-161bb35beae4\" width=\"200\" height=\"140\"/>\n<img alt=\"cf40e4a9_429d_4cac_9464_f9825149e7f2\" src=\"https://github.com/user-attachments/assets/cf40e4a9-429d-4cac-9464-f9825149e7f2\" width=\"200\" height=\"140\"/>\n<img alt=\"1cd49290_9b2d_42ec_a8c3_9c1c38eb673c\" src=\"https://github.com/user-attachments/assets/1cd49290-9b2d-42ec-a8c3-9c1c38eb673c\" width=\"200\" height=\"140\"/>\n<img alt=\"bfd869fd_32b5_48b5_a037_4951f812b757\" src=\"https://github.com/user-attachments/assets/bfd869fd-32b5-48b5-a037-4951f812b757\" width=\"200\" height=\"140\"/>\n<img alt=\"1876fffb_e683_4fa9_9521_cdd9795dea85\" src=\"https://github.com/user-attachments/assets/1876fffb-e683-4fa9-9521-cdd9795dea85\" width=\"200\" height=\"140\"/>\n\nosgEarth builds on trusted open source technologies like OpenSceneGraph and GDAL to give you high-performance, accurate terrain and map rendering. It supports a myriad of geospatial data formats and map projections.\n\n## Install the SDK\n\nWindows users can install the latest version of osgEarth through `vcpkg`:\n```bat\ngit clone https://github.com/microsoft/vcpkg.git\ncd vcpkg && bootstrap-vcpkg.bat\nvcpkg install osgearth:x64-windows\n```\nThis will take a while the first time as vcpkg builds osgEarth and its dependencies.\n\n## Check out some examples\n\n`osgearth_imgui` is the main command-line viewer. `osgearth_viewer` is a stripped-down viewer without any GUI.\nBoth of these read \"earth files\", XML files that describe the contents of a map.\n\nYou can find example earth files in the `tests` folder of the repo.\n\n```bat\n:: Online imagery and elevation:\nosgearth_imgui tests\\readymap.earth\n\n:: OpenStreetMap:\nosgearth_imgui tests\\osm.earth\n\n:: Local GeoTIFFs:\nosgearth_imgui tests\\simple.earth \n```\n\n## Integrate it into your project\n\nCMakeLists.txt\n```cmake\ncmake_minimum_required(VERSION 3.20)\nproject(myApp)\nfind_package(osgEarth CONFIG REQUIRED)\nadd_executable(myApp main.cpp)\ntarget_link_libraries(myApp PRIVATE osgEarth::osgEarth)\ninstall(TARGETS myApp RUNTIME DESTINATION bin)\n```\nmain.cpp\n```c++\n#include <osgEarth/MapNode>\n#include <osgEarth/TMS>\n#include <osgEarth/EarthManipulator>\n#include <osg/ArgumentParser>\n#include <osgViewer/Viewer>\n\nint main(int argc, char** argv)\n{\n    osgEarth::initialize();\n    \n    osg::ArgumentParser args(&argc, argv);\n    osgViewer::Viewer viewer(args);\n    \n    auto imagery = new osgEarth::TMSImageLayer();\n    imagery->setURL(\"https://readymap.org/readymap/tiles/1.0.0/7/\");\n    \n    auto mapNode = new osgEarth::MapNode();\n    mapNode->getMap()->addLayer(imagery);\n    \n    viewer.setSceneData(mapNode);\n    viewer.setCameraManipulator(new osgEarth::EarthManipulator(args));\n    \n    return viewer.run();\n}\n```\n\n## Resources\n\n* [Documentation](http://docs.osgearth.org/en/latest/)\n* [Gallery](https://www.pelicanmapping.com/home-1/opensource)\n* [Custom Software Development](https://www.pelicanmapping.com/software)\n\n---\n© Copyright [Pelican Mapping](http://pelicanmapping.com)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "maps",
        "geospatially",
        "3d",
        "geographical data",
        "maps applications",
        "3d maps"
      ],
      "category": "weather-and-location-data"
    },
    "xuezhijian--mcp_weather": {
      "owner": "xuezhijian",
      "name": "mcp_weather",
      "url": "https://github.com/xuezhijian/mcp_weather",
      "imageUrl": "/freedevtools/mcp/pfp/xuezhijian.webp",
      "description": "Provides real-time weather forecasts and city information queries, allowing access to up-to-date weather data for the next 24 hours using city names or geographic coordinates.",
      "stars": 2,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-21T23:51:17Z",
      "readme_content": "# Weather MCP Server\n\n一个提供天气预报和城市信息查询功能的Model Context Protocol服务器。该服务器允许LLMs获取未来24小时的天气信息，并支持通过城市名称、经纬度等方式查询城市信息。\n\n### 可用工具\n\n- `get_24h_weather` - 获取未来24小时的天气预报。\n  - 必需参数：\n    - `location` (string): 城市名称或经纬度（例如，北京或116.41,39.92）\n\n## 安装\n\n### 使用uv（推荐）\n\n使用[`uv`](https://docs.astral.sh/uv/)时无需特定安装。我们将使用[`uvx`](https://docs.astral.sh/uv/guides/tools/)直接运行*mcp-server-weather*。\n\n### 使用PIP\n\n或者，你可以通过pip安装`mcp-server-weather`：\n\n```bash\npip install mcp-server-weather\n```\n\n安装后，你可以使用以下命令作为脚本运行：\n\n```bash\npython -m mcp_server_weather\n```\n\n## 配置\n\n### 配置Claude.app\n\n在Claude设置中添加：\n\n<details>\n<summary>使用uvx</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-weather\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>使用docker</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"docker\",\n    \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/weather\"]\n  }\n}\n```\n</details>\n\n<details>\n<summary>使用pip安装</summary>\n\n```json\n\"mcpServers\": {\n  \"weather\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_weather\"]\n  }\n}\n```\n</details>\n\n### 配置Zed\n\n在Zed的settings.json中添加：\n\n<details>\n<summary>使用uvx</summary>\n\n```json\n\"context_servers\": [\n  \"mcp-server-weather\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-weather\"]\n  }\n],\n```\n</details>\n\n<details>\n<summary>使用pip安装</summary>\n\n```json\n\"context_servers\": {\n  \"mcp-server-weather\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_weather\"]\n  }\n},\n```\n</details>\n\n## 示例交互\n\n1. 获取未来24小时天气：\n```json\n{\n  \"name\": \"get_24h_weather\",\n  \"arguments\": {\n    \"location\": \"广州 天河\"\n  }\n}\n```\n响应：\n```json\n{\n  \"location\": \"广州 天河\",\n  \"forecast\": \"未来24小时的天气信息...\"\n}\n```\n\n## 调试\n\n你可以使用MCP inspector来调试服务器。对于uvx安装：\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-weather\n```\n\n或者如果你在特定目录中安装了包或正在开发：\n\n```bash\ncd path/to/servers/src/weather\nnpx @modelcontextprotocol/inspector uv run mcp-server-weather\n```\n\n## 构建\n\nDocker 构建:\n\n```bash\ndocker build -t mcp/weather .\n```\n\n## 贡献\n\n我们鼓励对mcp-server-weather的贡献，以帮助扩展和改进其功能。无论是添加新的天气相关工具、增强现有功能，还是改进文档，你的输入都很有价值。\n\n有关其他MCP服务器和实现模式的示例，请参见：\nhttps://github.com/modelcontextprotocol/servers\n\n欢迎提交拉取请求！随时贡献新想法、错误修复或增强功能，以使mcp-server-weather更加强大和实用。\n\n## 许可证\n\nmcp-server-weather根据MIT许可证授权。这意味着你可以自由使用、修改和分发软件，但需遵守MIT许可证的条款和条件。有关详细信息，请参阅项目存储库中的LICENSE文件。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_weather",
        "weather",
        "forecasts",
        "xuezhijian mcp_weather",
        "mcp_weather provides",
        "weather data"
      ],
      "category": "weather-and-location-data"
    },
    "yoyooyooo--mcp-weather-server": {
      "owner": "yoyooyooo",
      "name": "mcp-weather-server",
      "url": "https://github.com/yoyooyooo/mcp-weather-server",
      "imageUrl": "/freedevtools/mcp/pfp/yoyooyooo.webp",
      "description": "Provides real-time weather data and forecasts for any location using the 和风天气 (QWeather) API. Offers current conditions, hourly forecasts, and city information with customizable options for units and language.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-13T11:21:05Z",
      "readme_content": "[English](README.md) | [中文](README.zh.md)\n\n# Weather API MCP Server\n\nA Model Context Protocol (MCP) server implementation for weather information, providing current weather data and forecasts using the 和风天气 (QWeather) API.\n\n## Features\n\n- **Current Weather**: Get current weather data for any location\n- **Weather Forecast**: Get 3-day to 30-day weather forecasts\n- **Hourly Forecast**: Get 24-hour weather forecasts\n- **City Lookup**: Look up city information and IDs for more precise weather data\n- **Customizable Options**: Configure units, language, and additional details\n- **Powered by QWeather**: Integrates with the 和风天气 (QWeather) API for accurate weather data\n\n## Installation\n\n```bash\nnpm install mcp-weather-api\n```\n\nOr use it directly with npx:\n\n```bash\nnpx mcp-weather-api\n```\n\n## API Reference\n\n### Weather Tools\n\nThe server provides four weather tools that can be called through MCP:\n\n#### 1. Get Current Weather\n\n```typescript\n// Tool name: getWeather\n{\n  location: \"New York, NY\",  // Can be city name, coordinates like \"119.98,30.24\", or QWeather location ID\n  options: {\n    units: \"metric\",        // \"metric\" (Celsius) or \"imperial\" (Fahrenheit)\n    language: \"en\",         // Language code (en, zh, etc.)\n  }\n}\n```\n\n#### 2. Get Weather Forecast\n\n```typescript\n// Tool name: getWeatherForecast\n{\n  location: \"London, UK\",   // Can be city name, coordinates like \"119.98,30.24\", or QWeather location ID\n  options: {\n    units: \"imperial\",      // \"metric\" (Celsius) or \"imperial\" (Fahrenheit)\n    days: 3,                // Supports 3, 7, 10, 15, or 30 days\n    language: \"en\"          // Language code (en, zh, etc.)\n  }\n}\n```\n\n#### 3. Get Hourly Weather Forecast\n\n```typescript\n// Tool name: getHourlyWeather\n{\n  location: \"Tokyo, Japan\", // Can be city name, coordinates like \"119.98,30.24\", or QWeather location ID\n  options: {\n    units: \"metric\",        // \"metric\" (Celsius) or \"imperial\" (Fahrenheit)\n    hours: 24,              // Number of hours (default: 24, max: 24)\n    language: \"ja\"          // Language code (en, zh, ja, etc.)\n  }\n}\n```\n\n#### 4. City Lookup\n\n```typescript\n// Tool name: lookupCity\n{\n  location: \"Beijing\",      // City name or coordinates like \"119.98,30.24\"\n  options: {\n    language: \"en\"          // Language code (en, zh, etc.)\n  }\n}\n```\n\n### Weather Options\n\nCurrent weather tool options:\n\n```typescript\ninterface WeatherOptions {\n  units?: \"metric\" | \"imperial\"; // Temperature units (default: metric)\n  language?: string; // Response language code\n}\n```\n\nForecast tool options:\n\n```typescript\ninterface ForecastOptions {\n  units?: \"metric\" | \"imperial\"; // Temperature units (default: metric)\n  days?: number; // Number of days (default: 3)\n  language?: string; // Response language code\n}\n```\n\nHourly forecast tool options:\n\n```typescript\ninterface HourlyForecastOptions {\n  units?: \"metric\" | \"imperial\"; // Temperature units (default: metric)\n  hours?: number; // Number of hours (default: 24, max: 24)\n  language?: string; // Response language code\n}\n```\n\nCity lookup tool options:\n\n```typescript\ninterface CityLookupOptions {\n  language?: string; // Response language code\n}\n```\n\n## Response Format\n\nAll tools return responses in the following format:\n\n```typescript\n{\n  content: Array<{\n    type: \"text\";\n    text: string;\n  }>;\n}\n```\n\n### Sample Responses\n\n#### Current Weather Response\n\n```\nWeather for New York:\n\nObservation Time: 2023-11-15T12:30+08:00\nCurrent Conditions: Partly Cloudy (Icon: 101)\nTemperature: 18.5°C\nFeels Like: 19.2°C\n\nWind Information:\n- Direction: Northeast (45°)\n- Scale: 3\n- Speed: 15 km/h\n\nOther Information:\n- Humidity: 65%\n- Precipitation: 0.0 mm\n- Pressure: 1013 hPa\n- Visibility: 25 km\n- Cloud Cover: 30%\n- Dew Point: 12.1°C\n\nUpdated: 2023-11-15T12:35+08:00\n\nData Sources: QWeather\nLicense: QWeather Developers License\n```\n\n#### Weather Forecast Response\n\n```\nWeather Forecast for London:\n\n2023-11-15:\nTime Information:\n- Sunrise: 07:12, Sunset: 16:30\n- Moonrise: 15:40, Moonset: 03:25\n- Moon Phase: Waxing Gibbous (Icon: 802)\n\nDay Weather:\n- Conditions: Rain (Icon: 305)\n- Temperature Range: 12.0°F / 7.0°F\n- Wind: Northwest (315°)\n- Wind Scale: 3, Speed: 18 km/h\n\nNight Weather:\n- Conditions: Cloudy (Icon: 101)\n- Wind: North (0°)\n- Wind Scale: 2, Speed: 10 km/h\n\nOther Information:\n- Humidity: 75%\n- Precipitation: 5.2 mm\n- Pressure: 1008 hPa\n- Visibility: 10 km\n- Cloud Cover: 85%\n- UV Index: 2\n\n...additional days...\n\nData Sources: QWeather\nLicense: QWeather Developers License\n```\n\n#### City Lookup Response\n\n```\nLocation Information:\n\n1. Beijing (ID: 101010100)\n   Location: 39.90499, 116.40529\n   Region: Beijing, Beijing, China\n   Timezone: Asia/Shanghai (UTC +8.0)\n   Type: city, Rank: 10\n\n2. Beijing Shi (ID: 101010000)\n   Location: 39.90998, 116.40529\n   Region: Beijing, Beijing, China\n   Timezone: Asia/Shanghai (UTC +8.0)\n   Type: city, Rank: 10\n\nNote: Use the ID (e.g., \"101010100\") in other weather tools to get weather information for this location.\n\nData Sources: QWeather\nLicense: QWeather Developers License\n```\n\n## Usage with MCP\n\nAdd the Weather MCP server to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-weather-api\"]\n    }\n  }\n}\n```\n\n## QWeather API\n\nThis server uses the 和风天气 (QWeather) API to fetch weather data. The API key is included in the package for demo purposes. For production use, you should obtain your own API key from [QWeather](https://dev.qweather.com/).\n\n### API Endpoints Used\n\n1. **Current Weather** - `/weather/now`\n\n   - Returns the current weather conditions\n   - Response includes a `now` object with temperature, humidity, etc.\n   - [API Documentation](https://dev.qweather.com/docs/api/weather/weather-now/)\n\n2. **Weather Forecast** - `/weather/3d`, `/weather/7d`, `/weather/10d`, `/weather/15d`, `/weather/30d`\n\n   - Returns weather forecast for different periods\n   - Response includes a `daily` array with daily forecast data\n   - [API Documentation](https://dev.qweather.com/docs/api/weather/weather-daily-forecast/)\n\n3. **Hourly Weather Forecast** - `/weather/24h`\n\n   - Returns hourly weather forecast for the next 24 hours\n   - Response includes an `hourly` array with hourly forecast data\n   - [API Documentation](https://dev.qweather.com/docs/api/weather/weather-hourly-forecast/)\n\n4. **City Lookup** - `/city/lookup`\n   - Looks up city information by name or coordinates\n   - Returns city IDs and other location information\n   - [API Documentation](https://dev.qweather.com/docs/api/geoapi/city-lookup/)\n\n### API Response Structure\n\n#### Current Weather (`/weather/now`)\n\n```json\n{\n  \"code\": \"200\",\n  \"updateTime\": \"2021-11-15T16:35+08:00\",\n  \"now\": {\n    \"temp\": \"22.5\",\n    \"humidity\": \"65\",\n    \"text\": \"Partly cloudy\",\n    \"windSpeed\": \"10.2\",\n    \"windDir\": \"East\",\n    \"feelsLike\": \"24.0\",\n    \"pressure\": \"1012\",\n    \"vis\": \"10\",\n    \"cloud\": \"30\",\n    \"dew\": \"15.5\"\n  }\n}\n```\n\n#### Weather Forecast (`/weather/3d`)\n\n```json\n{\n  \"code\": \"200\",\n  \"updateTime\": \"2021-11-15T16:35+08:00\",\n  \"fxLink\": \"http://hfx.link/2ax1\",\n  \"daily\": [\n    {\n      \"fxDate\": \"2021-11-15\",\n      \"sunrise\": \"06:58\",\n      \"sunset\": \"16:59\",\n      \"moonrise\": \"15:16\",\n      \"moonset\": \"03:40\",\n      \"moonPhase\": \"盈凸月\",\n      \"moonPhaseIcon\": \"803\",\n      \"tempMax\": \"12\",\n      \"tempMin\": \"-1\",\n      \"iconDay\": \"101\",\n      \"textDay\": \"多云\",\n      \"iconNight\": \"150\",\n      \"textNight\": \"晴\",\n      \"wind360Day\": \"45\",\n      \"windDirDay\": \"东北风\",\n      \"windScaleDay\": \"1-2\",\n      \"windSpeedDay\": \"3\",\n      \"wind360Night\": \"0\",\n      \"windDirNight\": \"北风\",\n      \"windScaleNight\": \"1-2\",\n      \"windSpeedNight\": \"3\",\n      \"humidity\": \"65\",\n      \"precip\": \"0.0\",\n      \"pressure\": \"1020\",\n      \"vis\": \"25\",\n      \"cloud\": \"4\",\n      \"uvIndex\": \"3\"\n    }\n    // Additional days...\n  ]\n}\n```\n\n#### Hourly Weather Forecast (`/weather/24h`)\n\n```json\n{\n  \"code\": \"200\",\n  \"updateTime\": \"2021-11-15T16:35+08:00\",\n  \"fxLink\": \"http://hfx.link/2ax1\",\n  \"hourly\": [\n    {\n      \"fxTime\": \"2021-11-15T17:00+08:00\",\n      \"temp\": \"11\",\n      \"icon\": \"150\",\n      \"text\": \"晴\",\n      \"wind360\": \"335\",\n      \"windDir\": \"西北风\",\n      \"windScale\": \"3-4\",\n      \"windSpeed\": \"20\",\n      \"humidity\": \"73\",\n      \"pop\": \"7\",\n      \"precip\": \"0.0\",\n      \"pressure\": \"1013\",\n      \"cloud\": \"10\",\n      \"dew\": \"7\"\n    }\n    // Additional hours...\n  ]\n}\n```\n\n#### City Lookup (`/city/lookup`)\n\n```json\n{\n  \"code\": \"200\",\n  \"location\": [\n    {\n      \"name\": \"Beijing\",\n      \"id\": \"101010100\",\n      \"lat\": \"39.90499\",\n      \"lon\": \"116.40529\",\n      \"adm2\": \"Beijing\",\n      \"adm1\": \"Beijing\",\n      \"country\": \"China\",\n      \"tz\": \"Asia/Shanghai\",\n      \"utcOffset\": \"+08:00\",\n      \"isDst\": \"0\",\n      \"type\": \"city\",\n      \"rank\": \"10\",\n      \"fxLink\": \"http://hfx.link/2ax1\"\n    }\n    // Additional locations...\n  ]\n}\n```\n\n## Configuration\n\nYou can configure various options through environment variables:\n\n```bash\n# API Configuration\nexport QWEATHER_API_KEY=your-api-key\nexport QWEATHER_API_URL=https://devapi.qweather.com/v7\nexport QWEATHER_GEO_API_URL=https://geoapi.qweather.com/v2\nexport WEATHER_DEFAULT_LOCATION=101010100  # Default location code or coordinates\n\n# Default Options\nexport WEATHER_DEFAULT_UNITS=metric     # or 'imperial'\nexport WEATHER_DEFAULT_LANGUAGE=en      # language code\nexport WEATHER_INCLUDE_DETAILS=true     # or 'false'\nexport WEATHER_FORECAST_DAYS=3          # number of days (max 30)\n```\n\nOr in your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"weather\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-weather-api\"],\n      \"env\": {\n        \"QWEATHER_API_KEY\": \"your-api-key\",\n        \"QWEATHER_API_URL\": \"https://devapi.qweather.com/v7\",\n        \"QWEATHER_GEO_API_URL\": \"https://geoapi.qweather.com/v2\",\n        \"WEATHER_DEFAULT_LOCATION\": \"101010100\",\n        \"WEATHER_DEFAULT_UNITS\": \"imperial\",\n        \"WEATHER_DEFAULT_LANGUAGE\": \"zh\",\n        \"WEATHER_INCLUDE_DETAILS\": \"true\",\n        \"WEATHER_FORECAST_DAYS\": \"7\"\n      }\n    }\n  }\n}\n```\n\n## Location Formats\n\nYou can specify locations in three formats:\n\n1. **City name**: e.g., \"New York\", \"London\", \"Beijing\"\n2. **Coordinates**: e.g., \"119.98,30.24\" (longitude,latitude)\n3. **QWeather location ID**: e.g., \"101010100\" (Beijing)\n\nWhen using coordinates, the format must be `longitude,latitude` (e.g., \"119.98,30.24\"), which will be passed directly to the QWeather API.\n\nUse the `lookupCity` tool to find the appropriate location ID for more precise targeting.\n\n### China City Location Codes\n\nFor Chinese cities, you can use the QWeather location ID which provides more precise location targeting. The complete list of Chinese city codes can be found in the [QWeather LocationList repository](https://github.com/qwd/LocationList/blob/master/China-City-List-latest.csv).\n\nThis CSV file contains location IDs for Chinese cities in the format:\n\n## Development\n\n### Prerequisites\n\n- Node.js 16 or higher\n- npm or yarn\n\n### Setup\n\n1. Clone the repository\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n### Building\n\n```bash\nnpm run build\n```\n\n### Running in Development\n\n```bash\nnpm run dev\n```\n",
      "npm_url": "https://www.npmjs.com/package/mcp-weather-server",
      "npm_downloads": 362,
      "keywords": [
        "weather",
        "yoyooyooo",
        "forecasts",
        "weather server",
        "weather data",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "yting27--weather-my-mcp": {
      "owner": "yting27",
      "name": "weather-my-mcp",
      "url": "https://github.com/yting27/weather-my-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yting27.webp",
      "description": "Retrieve real-time weather forecasts, flood warnings, and earthquake reports from Malaysia's official open data portal, providing reliable environmental data and hazard alerts.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-02T09:57:33Z",
      "readme_content": "# Weather MCP Server\n\nA basic Model Context Protocol (MCP) server that provides weather information retrieved from Open API of Malaysia's official open data portal. This server enables LLMs to get weather forecast, warnings, water level associated with flood, and earthquake reports.\n\n<a href=\"https://glama.ai/mcp/servers/@yting27/weather-my-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@yting27/weather-my-mcp/badge\" alt=\"Weather MY MCP server\" />\n</a>\n\nAPI Documentation: [data.gov.my](https://developer.data.gov.my/)\n\n## Components\n\n### Tools\n\n1. get_water_level_condition\n    - Retrieve the water level conditions associated with flood warnings for a specified district or state.\n        If both district and state are provided, the district takes precedence.\n        If district or state is not specified, use an empty string for that field.\n\n    - Args:\n        - district: The name of the district within the specified state for which to retrieve flood warning conditions.\n        - state: The name of the state in Malaysia for which to retrieve flood warning conditions.\n\n2. get_warning\n    - Retrieve general weather warnings issued within a specified date range.\n\n    - Args:\n        - datetime_start: The earliest timestamp in the form of `YYYY-MM-DD HH:MM:SS` (inclusive) from which to retrieve weather warnings. If omitted, defaults to the current date.\n        - datetime_end: The latest timestamp in the form of `YYYY-MM-DD HH:MM:SS` (inclusive) to stop retrieving the weather warnings. If omitted, defaults to the current date.\n\n3. get_weather_forecast\n    - Retrieve a weather forecast for a specific location within a given date range.\n\n    - Args:\n        - location_name: The name or identifier of the location for which the forecast is retrieved.\n        - date_start: The earliest date (inclusive) to begin retrieving the weather forecast. If omitted, defaults to the current date.\n        - date_end: The latest date (inclusive) to stop retrieving the weather forecast. If omitted, defaults to the current date.\n\n4. get_earthquake_news\n    - Fetch earthquake news for a given location within a specified date range.\n\n    - Args:\n        - location: Name or identifier of the place where the earthquake(s) occurred.\n        - date_start: The earliest date (inclusive) to start searching for earthquake news. If omitted, defaults to the current date.\n        - date_end: The latest date (inclusive) to stop searching for earthquake news. If omitted, defaults to the current date.\n\n## Claude Desktop configuration\n\nAdd the following into `claude_desktop_config.json` file. For more information, refer to [For Claude Desktop Users](https://modelcontextprotocol.io/quickstart/user).\n\n### Using `uv`\n\n```json\n{\n    \"mcpServers\": {\n        \"weather\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"weather-my-mcp\",\n                \"run\",\n                \"weather.py\"\n            ]\n        }\n    }\n}\n```\n\n### Using Docker\n\n1. Create docker image\n\n    ```bash\n    docker build . --tag weather-my-mcp\n    ```\n\n2. Edit `claude_desktop_config.json` file as follows:\n\n    ```json\n    {\n        \"mcpServers\": {\n            \"weather\": {\n                \"command\": \"docker\",\n                \"args\": [\n                    \"run\",\n                    \"-i\",\n                    \"--rm\",\n                    \"weather-my-mcp\"\n                ]\n            }\n        }\n    }\n    ```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "data",
        "malaysia",
        "forecasts",
        "location data",
        "weather forecasts",
        "weather location"
      ],
      "category": "weather-and-location-data"
    },
    "yunkee-lee--mcp-tmap": {
      "owner": "yunkee-lee",
      "name": "mcp-tmap",
      "url": "https://github.com/yunkee-lee/mcp-tmap",
      "imageUrl": "/freedevtools/mcp/pfp/yunkee-lee.webp",
      "description": "Connect to the TMAP API for public transit route information and location geocoding services. Retrieve transit routes and perform full text geocoding with ease.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-05T01:33:43Z",
      "readme_content": "# MCP TMAP\n\nThe MCP connects to the TMAP API.\n\nIt currently supports the following APIs:\n* [Public Transit API](https://openapi.sk.com/products/detail?svcSeq=59&menuSeq=394)\n  * Transit route\n* [Location API](https://openapi.sk.com/products/detail?svcSeq=4&menuSeq=10)\n  * Full text geocoding\n\n## Prerequisites\n\nBefore you begin, ensure you have the following installed:\n\n* **Python:** Version 3.13 or higher\n* **uv:** You can find installation instructions [here](https://github.com/astral-sh/uv).\n* **SK Open API:** You need API credentials (app key) from the [SK open API](https://openapi.sk.com/).\n\n## Configuration\n\n1. **Create a `.env` file:**  Create a file in the project root.\n\n2. **Add API Credentials:** Edit the `.env` file and add your SK open API credentials.\n    ```.env\n    SK_OPEN_API_APP_KEY=\"YOUR_APP_KEY_HERE\"\n    ```\n    Please verify the exact environment variable names required by checking `src/mcp_tmap/tmap_client.py`.\n\n## Running the MCP\n\n1. **Sync Dependencies:** Navigate to the project root directory in your terminal and run the following command. This will create a virtual environment (if one doesn't exist) and install all dependencies specified in `pyproject.toml`.\n    ```bash\n    uv sync\n    ```\n\n2. **Run:**: You can run the MCP server using `uv`.\n    ```bash\n    uv run src/mcp_tmap\n    ```\n\n    For development,\n    ```bash\n    source .venv/bin/activate\n    mcp dev src/mcp_tmap/server.py\n    ```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tmap",
        "geocoding",
        "transit",
        "tmap api",
        "tmap connect",
        "connect tmap"
      ],
      "category": "weather-and-location-data"
    }
  }
}