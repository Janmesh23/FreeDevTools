{
  "category": "embedded-system",
  "categoryDisplay": "Embedded System",
  "description": "Provides access to documentation and shortcuts for working on embedded devices.",
  "totalRepositories": 5,
  "repositories": {
    "horw--esp-mcp": {
      "owner": "horw",
      "name": "esp-mcp",
      "url": "https://github.com/horw/esp-mcp",
      "imageUrl": "",
      "description": "Workflow for fixing build issues in ESP32 series chips using ESP-IDF.",
      "stars": 110,
      "forks": 11,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-30T05:20:19Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/horw-esp-mcp-badge.png)](https://mseep.ai/app/horw-esp-mcp)\n\n### Goal\nThe goal of this MCP is to:\n- Consolidate ESP-IDF and related project commands in one place.\n- Simplify getting started using only LLM communication.\n\n### How to contribute to the project\n\nSimply find a command that is missing from this MCP and create a PR for it!\n\nIf you want someone to help you with this implementation, just open an issue.\n\n\n### Notice\nThis project is currently a **Proof of Concept (PoC)** for an MCP server tailored for ESP-IDF workflows. \n\n**Current Capabilities:**\n*   Supports basic ESP-IDF project build commands.\n*   Flash built firmware to connected ESP devices with optional port specification.\n*   Includes experimental support for automatic issue fixing based on build logs.\n\n**Vision & Future Work:**\nThe long-term vision is to expand this MCP into a comprehensive toolkit for interacting with embedded devices, potentially integrating with home assistant platforms, and streamlining documentation access for ESP-IDF and related technologies. \n\nWe envision features such as:\n*   Broader ESP-IDF command support (e.g., `monitor`, `menuconfig` interaction if feasible).\n*   Device management and information retrieval.\n*   Integration with other embedded development tools and platforms.\n\nYour ideas and contributions are welcome! Please feel free to discuss them by opening an issue.\n\n\n### Install  \n\nFirst, clone this MCP repository:  \n\n```bash\ngit clone git@github.com:horw/esp-mcp.git\n```  \n\nThen, configure it in your chatbot. \n\nThe JSON snippet below is an example of how you might configure this `esp-mcp` server within a chatbot or an agent system that supports the Model Context Protocol (MCP). The exact configuration steps and format may vary depending on the specific chatbot system you are using. Refer to your chatbot's documentation for details on how to integrate MCP servers.\n\n```json\n{\n    \"mcpServers\": {\n        \"esp-run\": { // \"esp-run\" is an arbitrary name you can assign to this server configuration.\n            \"command\": \"<path_to_uv_or_python_executable>\",\n            \"args\": [\n                \"--directory\",\n                \"<path_to_cloned_esp-mcp_repository>\", // e.g., /path/to/your/cloned/esp-mcp\n                \"run\",\n                \"main.py\" // If using python directly, this might be just \"main.py\" and `command` would be your python interpreter\n            ],\n            \"env\": {\n                \"IDF_PATH\": \"<path_to_your_esp-idf_directory>\" // e.g., ~/esp/esp-idf or C:\\\\Espressif\\\\frameworks\\\\esp-idf\n            }\n        }\n    }\n}\n```\n\nA few notes on the configuration:\n\n*   **`command`**: This should be the full path to your `uv` executable if you are using it, or your Python interpreter (e.g., `/usr/bin/python3` or `C:\\\\Python39\\\\python.exe`) if you plan to run `main.py` directly.\n*   **`args`**:\n    *   The first argument to `--directory` should be the absolute path to where you cloned the `esp-mcp` repository.\n    *   If you're using `uv`, the arguments `run main.py` are appropriate. If you're using Python directly, you might only need `main.py` in the `args` list, and ensure your `command` points to the Python executable.\n*   **`IDF_PATH`**: This environment variable must point to the root directory of your ESP-IDF installation. ESP-IDF is Espressif's official IoT Development Framework. If you haven't installed it, please refer to the [official ESP-IDF documentation](https://docs.espressif.com/projects/esp-idf/en/latest/esp32/get-started/index.html) for installation instructions.\n\n### Usage\n\nOnce the `esp-mcp` server is configured and running, your LLM or chatbot can interact with it using the tools defined in this MCP. For example, you could ask your chatbot to:\n\n*   \"Build the project located at `/path/to/my/esp-project` using the `esp-mcp`.\"\n*   \"Clean the build files for the ESP32 project in the `examples/hello_world` directory.\"\n*   \"Flash the firmware to my connected ESP32 device for the project in `my_app`.\"\n\nThe MCP server will then execute the corresponding ESP-IDF commands (like `idf.py build`, `idf.py fullclean`, `idf.py flash`) based on the tools implemented in `main.py`.\n\nThe `result.gif` below shows an example interaction:\n\n\n\n\n### Examples \n\n\n1. Build and Flash\n\n\n### Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=horw/esp-mcp&type=Date)](https://star-history.com/#horw/esp-mcp&Date)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "esp32",
        "embedded",
        "esp",
        "issues esp32",
        "using esp",
        "esp32 series"
      ],
      "category": "embedded-system"
    },
    "kukapay--modbus-mcp": {
      "owner": "kukapay",
      "name": "modbus-mcp",
      "url": "https://github.com/kukapay/modbus-mcp",
      "imageUrl": "",
      "description": "An MCP server that standardizes and contextualizes industrial Modbus data.",
      "stars": 19,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T19:52:35Z",
      "readme_content": "# Modbus MCP Server\n\nAn MCP server that standardizes and contextualizes Modbus data, enabling seamless integration of AI agents with industrial IoT systems.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-trending-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Modbus Tools**:\n  - Read/write holding registers (`read_register`, `write_register`).\n  - Read/write coils (`read_coils`, `write_coil`).\n  - Read input registers (`read_input_registers`).\n  - Read multiple holding registers (`read_multiple_holding_registers`).\n- **Prompt**: Analyze Modbus register values with a customizable prompt (`analyze_register`).\n- **Flexible Connections**: Supports Modbus over TCP, UDP, or serial, configured via environment variables.\n\n## Requirements\n\n- **Python**: 3.10\n- **uv** for dependency and virtual environment management.\n\n## Installation\n\n1. **Install `uv`**:\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n2. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/modbus-mcp.git\n   cd modbus-mcp\n   ```\n\n3. **Install Dependencies**:\n   ```bash\n   uv sync\n   ```\n\n## Configuration\n\nThe server connects to a Modbus device using parameters specified via environment variables. Set these variables in a `.env` file or your shell environment.\n\n### Environment Variables\n\n| Variable                   | Description                                      | Default              | Required |\n|-------------------------   |--------------------------------------------------|----------------------|----------|\n| `MODBUS_TYPE`              | Connection type: `tcp`, `udp`, or `serial`       | `tcp`                | Yes      |\n| `MODBUS_HOST`              | Host address for TCP/UDP                        | `127.0.0.1`          | For TCP/UDP |\n| `MODBUS_PORT`              | Port for TCP/UDP                                | `502`                | For TCP/UDP |\n| `MODBUS_DEFAULT_SLAVE_ID`  | Slave ID                                        | `1`                  | For TCP/UDP |\n| `MODBUS_SERIAL_PORT`       | Serial port (e.g., `/dev/ttyUSB0`, `COM1`)      | `/dev/ttyUSB0`       | For serial |\n| `MODBUS_BAUDRATE`          | Serial baud rate                                | `9600`               | For serial |\n| `MODBUS_PARITY`            | Serial parity: `N` (none), `E` (even), `O` (odd) | `N`                 | For serial |\n| `MODBUS_STOPBITS`          | Serial stop bits                                | `1`                  | For serial |\n| `MODBUS_BYTESIZE`          | Serial byte size                                | `8`                  | For serial |\n| `MODBUS_TIMEOUT`           | Serial timeout (seconds)                        | `1`                  | For serial |\n\n### Example `.env` File\n\nFor TCP:\n```\nMODBUS_TYPE=tcp\nMODBUS_HOST=192.168.1.100\nMODBUS_PORT=502\nMODBUS_SLAVE_ID=1\n```\n\nFor Serial:\n```\nMODBUS_TYPE=serial\nMODBUS_SERIAL_PORT=/dev/ttyUSB0\nMODBUS_BAUDRATE=9600\nMODBUS_PARITY=N\nMODBUS_STOPBITS=1\nMODBUS_BYTESIZE=8\nMODBUS_TIMEOUT=1\n```\n\n## Usage\n\n### Installing for Claude Desktop\n\nThe configuration file:\n\n```json\n{\n   \"mcpServers\": {\n       \"Modbus MCP Server\": {\n           \"command\": \"uv\",\n           \"args\": [ \"--directory\", \"/path/to/modbus-mcp\", \"run\", \"modbus-mcp\" ],\n           \"env\": { \"MODBUS_TYPE\": \"tcp\", \"MODBUS_HOST\": \"127.0.0.1\", \"MODBUS_PORT\": 502 },\n       }\n   }\n}\n```\n\n### Using Tools\n\n**Note**: Natural language support depends on the client’s ability to parse and map prompts to tools. The MCP Inspector requires structured JSON, but the examples below show how conversational inputs translate.\n\n1. **Read a Holding Register**:\n   - **Prompt**:\n     ```\n     Please read the value of Modbus holding register 0.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"read_register\",\n       \"parameters\": {\"address\": 0, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Value: <register_value>`\n\n2. **Write to a Holding Register**:\n   - **Prompt**:\n     ```\n     Set Modbus holding register 10 to the value 100.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"write_register\",\n       \"parameters\": {\"address\": 10, \"value\": 100, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Successfully wrote 100 to register 10`\n\n3. **Read Coils**:\n   - **Prompt**:\n     ```\n     Check the status of the first 5 Modbus coils starting at address 0.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"read_coils\",\n       \"parameters\": {\"address\": 0, \"count\": 5, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Coils 0 to 4: [False, False, False, False, False]`\n\n4. **Write to a Coil**:\n   - **Prompt**:\n     ```\n     Turn on Modbus coil 5.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"write_coil\",\n       \"parameters\": {\"address\": 5, \"value\": true, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Successfully wrote True to coil 5`\n\n5. **Read Input Registers**:\n   - **Prompt**:\n     ```\n     Read the values of 3 Modbus input registers starting from address 2.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"read_input_registers\",\n       \"parameters\": {\"address\": 2, \"count\": 3, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Input Registers 2 to 4: [<value1>, <value2>, <value3>]`\n\n6. **Read Multiple Holding Registers**:\n   - **Prompt**:\n     ```\n     Get the values of Modbus holding registers 0 through 2.\n     ```\n   - **MCP Inspector JSON**:\n     ```json\n     {\n       \"tool\": \"read_multiple_holding_registers\",\n       \"parameters\": {\"address\": 0, \"count\": 3, \"slave_id\": 1}\n     }\n     ```\n   - **Expected Output**: `Holding Registers 0 to 2: [<value1>, <value2>, <value3>]`\n\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "modbus",
        "mcp",
        "embedded",
        "modbus mcp",
        "kukapay modbus",
        "devices kukapay"
      ],
      "category": "embedded-system"
    },
    "kukapay--opcua-mcp": {
      "owner": "kukapay",
      "name": "opcua-mcp",
      "url": "https://github.com/kukapay/opcua-mcp",
      "imageUrl": "",
      "description": "An MCP server that connects to OPC UA-enabled industrial systems.",
      "stars": 17,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-17T23:34:45Z",
      "readme_content": "# OPC UA MCP Server\n\nAn MCP server that connects to OPC UA-enabled industrial systems, allowing AI agents to monitor, analyze, and control operational data in real time.\n\nThis project is ideal for developers and engineers looking to bridge AI-driven workflows with industrial automation systems.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/opcua-mcp)\n![Python Version](https://img.shields.io/badge/python-3.13+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Read OPC UA Nodes**: Retrieve real-time values from industrial devices.\n- **Write to OPC UA Nodes**: Control devices by writing values to specified nodes.\n- **Browse nodes**: Request to list allopcua  nodes\n- **Read multiple OPC UA Nodes**: Retrieve multiple real-time values from devices.\n- **Write to multiple OPC UA Nodes**: Control devices by writing values to multiple nodes.\n- **Seamless Integration**: Works with MCP clients like Claude Desktop for natural language interaction.\n\n\n### Tools\nThe server exposes five tools:\n- **`read_opcua_node`**:\n  - **Description**: Read the value of a specific OPC UA node.\n  - **Parameters**:\n    - `node_id` (str): OPC UA node ID (e.g., `ns=2;i=2`).\n  - **Returns**: A string with the node ID and its value (e.g., \"Node ns=2;i=2 value: 42\").\n\n- **`write_opcua_node`**:\n  - **Description**: Write a value to a specific OPC UA node.\n  - **Parameters**:\n    - `node_id` (str): OPC UA node ID (e.g., `ns=2;i=3`).\n    - `value` (str): Value to write (converted based on node type).\n  - **Returns**: A success or error message (e.g., \"Successfully wrote 100 to node ns=2;i=3\").\n\n- **`Browse nodes`**:\n  - **Description**: Read the value of a specific OPC UA node.\n\n- **`Read multiple OPC UA Nodes`**:\n  - **Description**: Read the value of a specific OPC UA node.\n\n- **`Write to multiple OPC UA Nodes`**:\n  - **Description**: Read the value of a specific OPC UA node.\n\n\n### Example Prompts\n\n- \"What’s the value of node ns=2;i=2?\" → Returns the current value.\n- \"Set node ns=2;i=3 to 100.\" → Writes 100 to the node.\n\n## Installation\n\n### Prerequisites\n- Python 3.13 or higher\n- An OPC UA server (e.g., a simulator or real industrial device)\n\n### Install Dependencies\nClone the repository and install the required Python packages:\n\n```bash\ngit clone https://github.com/kukapay/opcua-mcp.git\ncd opcua-mcp\npip install mcp[cli] opcua cryptography\n```\n\n### MCP Client Configuration\n\n```json\n{\n \"mcpServers\": {\n   \"opcua-mcp\": {\n     \"command\": \"python\",\n     \"args\": [\"path/to/opcua_mcp/main.py\"],\n     \"env\": {\n        \"OPCUA_SERVER_URL\": \"your-opc-ua-server-url\"\n     }\n   }\n }\n}\n```\n\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "embedded",
        "opcua",
        "mcp",
        "opcua mcp",
        "embedded devices",
        "devices kukapay"
      ],
      "category": "embedded-system"
    },
    "stack-chan--stack-chan": {
      "owner": "stack-chan",
      "name": "stack-chan",
      "url": "https://github.com/stack-chan/stack-chan",
      "imageUrl": "",
      "description": "A JavaScript-driven M5Stack-embedded super-kawaii robot with MCP server functionality for AI-controlled interactions and emotions.",
      "stars": 957,
      "forks": 110,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-02T13:29:49Z",
      "readme_content": "# Stack-chan\n\n[![Build Stack-chan Firmware](https://github.com/stack-chan/stack-chan/actions/workflows/build.yml/badge.svg)](https://github.com/stack-chan/stack-chan/actions/workflows/build.yml)\n[](https://discord.gg/eGhd9adnBm)\n\n[日本語](./README_ja.md)\n\n\n\nStack-chan is a JavaScript-driven M5Stack-embedded super-kawaii robot.\n\n* Video (with English subtitles): https://youtu.be/fZb_mF08xV0\n* Official hashtag: [`#stackchan` | `#ｽﾀｯｸﾁｬﾝ` (JP)](https://twitter.com/search?q=%23stackchan%20OR%20%23%EF%BD%BD%EF%BE%80%EF%BD%AF%EF%BD%B8%EF%BE%81%EF%BD%AC%EF%BE%9D).\n\n## Features\n\n* :neutral_face:     Show cute face\n* :smile:            Expression(Happy, Angry, Sad etc.)\n* :smiley_cat:       Customize face\n* :eyes:             Glance/stare/gaze\n* :speech_balloon:   Say things\n* :bulb:             Addon M5Units\n* :cyclone:          Drive Serial(TTL)/PWM servos\n* :game_die:         Make applications on your own\n\n## Contents\n\nThis repository includes all the component of the robot.\n\n* __firmware__ : Source codes of the firmware.\n* __case__ : Stereolithography(STL) of the case.\n* __schematics__ : Schematics and board layout data.\n\n## Installation\n\n### Assemble board\n\n* See [schematics/README.md](./schematics/README.md) and [case/README.md](./case/README.md)\n* OR You can get a pre-assembled module(COMING SOON)\n\n### Flash firmware to M5Stack\n\n* See [firmware/README.md](./firmware/README.md)\n\n## Contribution\n\n__Feature requests/Bug reports__ are extremely welcome! See [issues](https://github.com/stack-chan/stack-chan/issues) page to post some.\n\n__Wanna be a sponsor__? It would be my great honor. please visit my [sponsor](https://github.com/sponsors/meganetaaan/) page.\n\n## License\n\nResources of this repository are distributed under Apache version 2.0 license.\nSee [LICENSE](./LICENSE).\n\n## BibTeX\n\n```bibtex\n@misc{stackchan,\n  author       = {Shinya Ishikawa and the Stack-chan community},\n  title        = {Stack-chan: A JavaScript-driven Super-kawaii Robot},\n  year         = {2021},\n  howpublished = {\\url{https://github.com/stack-chan/stack-chan}},\n  note         = {Open-source hardware and software.},\n}\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "embedded",
        "robot",
        "m5stack",
        "robot mcp",
        "m5stack embedded",
        "kawaii robot"
      ],
      "category": "embedded-system"
    },
    "yoelbassin--gnuradioMCP": {
      "owner": "yoelbassin",
      "name": "gnuradioMCP",
      "url": "https://github.com/yoelbassin/gnuradioMCP",
      "imageUrl": "",
      "description": "An MCP server for GNU Radio that enables LLMs to autonomously create and modify RF `.grc` flowcharts.",
      "stars": 17,
      "forks": 4,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-09-20T17:53:30Z",
      "readme_content": "# GR-MCP: A gnuradio MCP Server\n\n[![Python Version](https://img.shields.io/badge/python-3.13%2B-blue.svg)](https://www.python.org/downloads/release/python-3130/)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/yoelbassin/gnuradioMCP)](https://archestra.ai/mcp-catalog/yoelbassin__gnuradiomcp)\n\n\n**GNURadio MCP Server** is a modern, extensible Machine Control Protocol (MCP) server for [GNURadio](https://www.gnuradio.org/), enabling programmatic, automated, and AI-driven creation of GNURadio flowgraphs. Designed for seamless integration with Large Language Models (LLMs), automation frameworks, and custom clients, it empowers you to generate `.grc` files and control SDR workflows at scale.\n\n> **Why GNURadio MCP Server?**\n> - Automate SDR workflows and flowgraph generation\n> - Integrate with LLMs, bots, and custom tools\n> - Build, modify, and validate flowgraphs programmatically\n> - Save time and reduce manual errors in SDR prototyping\n\n\n## Features\n- 🌐 **MCP API**: Exposes a robust MCP interface for GNURadio\n- 🛠️ **Programmatic Flowgraph Creation**: Build, edit, and save `.grc` files from code or automation\n- 🤖 **LLM & Automation Ready**: Designed for AI and automation integration\n- 🧩 **Extensible**: Modular architecture for easy extension and customization\n- 📝 **Example Flowgraphs**: Includes ready-to-use `.grc` examples in the `misc/` directory\n- 🧪 **Tested**: Comprehensive unit tests with `pytest`\n\n\n## Quickstart\n\n### Requirements\n- Python >= 3.13\n- GNURadio (Tested with GNURadio Companion v3.10.12.0)\n- UV\n\n### Usage\n1. **Clone the repository**\n```bash\ngit clone https://github.com/yoelbassin/gr-mcp\n```\n\n2. [**Install GNURadio**](https://wiki.gnuradio.org/index.php/InstallingGR)\n\n3. **Set up a UV environment**\n```bash\ncd gr-mcp\nuv venv --system-site-packages\n```\n   > The `--system-site-packages` flag is required because GNURadio installs the `gnuradio` Python package globally.\n\n4. **Add the MCP server configuration to your client configuration.** For example, for Claude Desktop or Cursor:\n```json\n\"mcpServers\": {\n    \"gr-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/gr-mcp\",\n        \"run\",\n        \"main.py\"\n      ]\n    }\n  }\n```\n\n## Development\nInstall development dependencies and run tests with:\n```bash\npip install -e \".[dev]\"\npytest\n```\n\n\n## Project Status\n**In active development.** Core server functionality is available, but the API and features are evolving. Your feedback and contributions are highly valued!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gnuradiomcp",
        "embedded",
        "gnu",
        "gnu radio",
        "embedded devices",
        "gnuradiomcp mcp"
      ],
      "category": "embedded-system"
    }
  }
}