{
  "category": "legal-and-compliance",
  "categoryDisplay": "Legal and Compliance",
  "description": "",
  "totalRepositories": 8,
  "repositories": {
    "kumzhijr--Covenant-ai": {
      "owner": "kumzhijr",
      "name": "Covenant-ai",
      "url": "https://github.com/kumzhijr/Covenant-ai",
      "imageUrl": "/freedevtools/mcp/pfp/kumzhijr.webp",
      "description": "Advanced contract analysis and management platform that processes PDF contracts, assesses risks, identifies opportunities, and provides user management and interactive visualization features.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-14T20:50:48Z",
      "readme_content": "# Covenant AI Platform\n\n![Covenant AI Architecture Diagram](https://via.placeholder.com/800x400.png?text=AI+Contract+Analysis+Architecture)\n\nA full-stack contract analysis platform leveraging AI for legal document processing, risk assessment, and opportunity identification.\n\n## Key Features\n- **AI-Powered Analysis** - Multi-stage processing of PDF contracts\n- **Risk Assessment** - Severity-graded risk detection\n- **Opportunity Identification** - Impact-rated opportunity discovery\n- **User Management** - OAuth authentication with role-based access\n- **Payment Integration** - Stripe subscription management\n- **Real-time Dashboard** - Interactive results visualization\n\n## Technology Stack\n\n### Frontend\n| Component        | Technology           |\n|------------------|----------------------|\n| Framework        | Next.js 14 (App Router) |\n| State Management | React Query + Zustand |\n| UI Library       | Shadcn UI            |\n| Charts           | Recharts             |\n| Tables           | TanStack Table       |\n\n### Backend\n| Component        | Technology           |\n|------------------|----------------------|\n| Runtime          | Node.js 20           |\n| Framework        | Express              |\n| Database         | MongoDB Atlas        |\n| Cache            | Redis                |\n| Auth             | Passport.js + JWT    |\n| Payments         | Stripe API           |\n\n## Installation\n\n### Prerequisites\n- Node.js 20+\n- MongoDB 7+\n- Redis 7+\n- Stripe Account\n- Google OAuth Credentials\n\n```bash\n# Clone repository\ngit clone https://github.com/your-org/covenant-ai.git\ncd covenant-ai\n```\n\n### Client Setup\n```bash\ncd client\nnpm install\n\n# Environment variables (create .env)\nNEXT_PUBLIC_API_URL=http://localhost:5000\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=your_stripe_key\n```\n\n### Server Setup\n```bash\ncd server\nnpm install\n\n# Environment variables (create .env)\nMONGO_URI=mongodb://localhost:27017/covenantai\nREDIS_URL=redis://localhost:6379\nSTRIPE_SECRET_KEY=your_stripe_secret\nGOOGLE_CLIENT_ID=your_google_id\nGOOGLE_CLIENT_SECRET=your_google_secret\nJWT_SECRET=your_jwt_secret\n```\n\n## Database Structure\n\n### Contract Analysis Schema\n```mermaid\nerDiagram\n    CONTRACT_ANALYSIS {\n        ObjectId _id\n        ObjectId userId\n        string contractText\n        IRisk[] risks\n        IOpportunity[] opportunities\n        string summary\n        string[] recommendations\n        number overallScore\n        date createdAt\n        string aiModel\n        string contractType\n    }\n    \n    RISK {\n        string risk\n        string explanation\n        string severity\n    }\n    \n    OPPORTUNITY {\n        string opportunity\n        string explanation\n        string impact\n    }\n```\n\n## AI Processing Workflow\n\n```mermaid\nsequenceDiagram\n    participant User\n    participant Frontend\n    participant Backend\n    participant AI\n    participant Redis\n    participant MongoDB\n    \n    User->>Frontend: Upload PDF Contract\n    Frontend->>Backend: POST /api/analyze\n    Backend->>Redis: Store raw PDF (temp)\n    Backend->>AI: Extract text/type\n    AI-->>Backend: Metadata\n    Backend->>AI: Analyze risks\n    AI-->>Backend: Risk report\n    Backend->>AI: Detect opportunities\n    AI-->>Backend: Opportunity report\n    Backend->>MongoDB: Persist analysis\n    Backend-->>Frontend: Analysis results\n    Frontend-->>User: Display dashboard\n```\n\n## Running the Application\n\n```bash\n# Start both services (from root directory)\nconcurrently \"cd client && npm run dev\" \"cd server && npm run start\"\n\n# Access interfaces\nFrontend: http://localhost:3000\nBackend: http://localhost:5000\nAPI Docs: http://localhost:5000/api-docs\n```\n\n## Configuration Guide\n\n### Required Services\n1. **MongoDB** - Document storage\n2. **Redis** - PDF text caching\n3. **Stripe** - Payment processing\n4. **Google OAuth** - User authentication\n\n### Environment Variables\n`.env.example` for client:\n```ini\nNEXT_PUBLIC_API_URL=\"http://localhost:5000\"\nNEXT_PUBLIC_STRIPE_PUBLISHABLE_KEY=\"pk_test_...\"\nNEXT_PUBLIC_GOOGLE_CLIENT_ID=\"...\"\n```\n\n`.env.example` for server:\n```ini\nMONGO_URI=\"mongodb://localhost:27017/covenantai\"\nREDIS_URL=\"redis://localhost:6379\"\nSTRIPE_SECRET_KEY=\"sk_test_...\"\nJWT_SECRET=\"your_jwt_secret_here\"\n```\n\n## Development Scripts\n\n```bash\n# Client\nnpm run dev        # Start development server\nnpm run build      # Create production build\nnpm run lint       # Run ESLint\n\n# Server \nnpm run start      # Start production server\nnpm run dev        # Start with nodemon\nnpm run test       # Run integration tests\n```\n\n## License\nMIT License - See [LICENSE](LICENSE) for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "contracts",
        "contract",
        "compliance",
        "pdf contracts",
        "contracts assesses",
        "advanced contract"
      ],
      "category": "legal-and-compliance"
    },
    "mawazawa--agentic-pdf-app": {
      "owner": "mawazawa",
      "name": "agentic-pdf-app",
      "url": "https://github.com/mawazawa/agentic-pdf-app",
      "imageUrl": "/freedevtools/mcp/pfp/mawazawa.webp",
      "description": "Automatically fills California court PDF forms by extracting and mapping data from donor documents through AI analysis. Features a minimalist interface and a modular microservices architecture for easy deployment using Docker.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-14T15:08:46Z",
      "readme_content": "# Agentic PDF Form Filler\n\nA visually stunning, minimalist system for automatically filling California court PDF forms using information extracted from donor documents.\n\n![Form Filling Process](https://mermaid.ink/img/pako:eNqtlMFO4zAQhl_F8rmVnMY-oC8A2nKACBBcuFRO4hFWc9ysYwtWqO_Ouly2Igu7XKLYmvnnn8-eiX3o2J7s1V0N4BuEe7DdnuxQKV-5mK-9cY2N0GGFyZVvQQsdrHRYIriP5F7rYzpH0XtdWUJk2wDnYGsNj7CmK6KzDhv2ELpBkDk1ELSxIURg-4YYexvNw5x8oO-4zy32hfUlX5cA2jYWIe5hXb40XPbkgFWu3fE7Hm0bSKj2rHJrPO8u3yEj-XLsMXxMBzJq_tPOH03-Ug7jzfH4qcef7qGLnYscZYezE96yK7VLPQW9UNlUJCBUB46gEkVBOEkpT3NaFIrndVmQvPg0aw_dNk1QLssTxT5FSk3JnZQiz1mqxKzKZZnTLFF5qkaVJ7OVDiPAIIx-MwNbnN6OsZGJj_jBuqiHxN4b-YcZHGJDr1t6XxvQp-dvTNZj7_DaIvjXBpuU-IXCWRN3FrwwdYWFc25pJKFsqU3_IOTC4YuIbYeXcTxJVt8wzlPGZSlTIUZMkpxTpZSk-UxykSsy40wzmRUinaU0S_MaTD9-hO25DPr0aBKGDHxpzCQUkLHoR_5mEo5CaPfvjdDnhA3Qv4h5sQ0gxFhM9h8ufVSJ?type=png)\n\n## Features\n\n- **Intelligent Document Extraction**: Uses Perplexity Sonar API or OpenAI API to extract data from various document types\n- **Smart Field Mapping**: Automatically maps extracted data to form fields\n- **Beautiful UI**: Clean, minimalist interface for easy form processing\n- **Docker-Based**: Simple deployment with Docker for both development and production\n- **Modular Design**: Microservices architecture for maintainability and scalability\n\n## Quick Start\n\n### Prerequisites\n\n- Docker and Docker Compose installed\n- API keys for Perplexity and/or OpenAI\n\n### Setup\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/agentic-pdf.git\ncd agentic-pdf\n```\n\n2. Create an `.env` file in the root directory:\n```\nPERPLEXITY_API_KEY=your_perplexity_api_key\nOPENAI_API_KEY=your_openai_api_key\n```\n\n3. Start the application in development mode:\n```bash\ndocker-compose up --build\n```\n\nThe services will be available at:\n- UI: http://localhost:8080\n- Orchestration Service API: http://localhost:3002\n- Other microservices: ports 3000-3005\n\n### Usage\n\n1. Open http://localhost:8080 in your browser\n2. Enter the URL of the California court form to fill (or use the default)\n3. Upload supporting documents (ID cards, previous forms, etc.)\n4. Wait for the system to process and fill the form\n5. Download the completed form\n\n## Architecture\n\nThis project follows a modern microservices architecture:\n\n- **UI Layer** (Next.js): Provides a clean, responsive interface\n- **MCP Servers** (Node.js/TypeScript): Implements Model Context Protocol servers for various services:\n  - Puppeteer Server: Downloads PDFs from URLs\n  - AI Analysis Server: Extracts form fields using AI vision\n  - Document Extraction Server: Analyzes donor documents\n  - Field Mapping Service: Maps donor data to form fields\n  - Form Filling Server: Fills the PDF with mapped data\n- **Orchestration Layer**: Coordinates the workflow between services\n\n## Development\n\n### Project Structure\n\n```\nagentic-pdf/\n├── docker-compose.yml         # Main docker-compose configuration\n├── docker-compose.override.yml # Development overrides\n├── docker-compose.prod.yml    # Production configuration\n├── nginx.conf                 # Nginx config for production\n├── src/\n│   └── mcp-servers/           # Backend services (TypeScript)\n│       ├── src/\n│       │   ├── config/        # Configuration\n│       │   ├── orchestration/ # Workflow orchestrators\n│       │   ├── servers/       # MCP server implementations\n│       │   └── services/      # Service implementations\n│       └── Dockerfile         # Multi-stage Dockerfile\n└── ui/                        # Frontend (Next.js)\n    ├── src/\n    │   ├── components/        # React components\n    │   ├── pages/             # Next.js pages\n    │   └── styles/            # CSS styles\n    └── Dockerfile             # Multi-stage Dockerfile\n```\n\n### Local Development\n\nFor local development with automatic reloading:\n\n```bash\ndocker-compose up\n```\n\n### Production Deployment\n\nFor a production deployment:\n\n```bash\ndocker-compose -f docker-compose.yml -f docker-compose.prod.yml up -d\n```\n\n## Design Principles\n\nThis project adheres to several key design principles:\n\n1. **Minimalism**: Clean interface and streamlined user experience\n2. **Separation of Concerns**: Each component has a single, well-defined responsibility\n3. **Visual Harmony**: Consistent use of typography, color, and space\n4. **Progressive Disclosure**: Complexity is revealed only when needed\n5. **Error Prevention**: Validation and clear user guidance\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "microservices",
        "documents",
        "agentic",
        "documents ai",
        "court pdf",
        "pdf app"
      ],
      "category": "legal-and-compliance"
    },
    "protomated--legal-context": {
      "owner": "protomated",
      "name": "legal-context",
      "url": "https://github.com/protomated/legal-context",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Connects a law firm's Clio document management system with Claude Desktop for efficient retrieval and analysis of legal documents while ensuring security and confidentiality. Enables local processing and vector search capabilities to enhance legal research.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documents",
        "document",
        "law",
        "legal documents",
        "legal compliance",
        "document management"
      ],
      "category": "legal-and-compliance"
    },
    "pylegifrance--mcp-server-legifrance": {
      "owner": "pylegifrance",
      "name": "mcp-server-legifrance",
      "url": "https://github.com/pylegifrance/mcp-server-legifrance",
      "imageUrl": "/freedevtools/mcp/pfp/pylegifrance.webp",
      "description": "Access French legal databases, including laws, codes, and judicial jurisprudence, through an integrated interface for advanced legal research and analysis using real-time data from Legifrance.",
      "stars": 27,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-28T09:20:02Z",
      "readme_content": "# mcp-server-legifrance\n\nServeur MCP [Model Context Protocol](https://modelcontextprotocol.io/introduction) expérimental permettant d'interroger les bases juridiques françaises via l'API Legifrance dans des LLMs compatibles comme Claude.\n\n## Description\n\nCe projet implémente un serveur MCP qui permet d'accéder aux ressources juridiques françaises (textes légaux, codes, jurisprudence) directement depuis un Large Language Model. Il facilite les recherches juridiques en rendant les données de Legifrance accessibles via des outils interactifs.\n\nIl faut suite à la création du package [pylegifrance](https://github.com/rdassignies/pylegifrance). \n\n### Qu'est-ce que le MCP ?\n\nLe Model Context Protocol (MCP) est un protocole standardisé développé par Anthropic qui permet aux modèles de langage comme Claude d'interagir de manière structurée avec des outils et services externes. Il s'agit d'une avancée intéressante dans l'interopérabilité des LLMs car il établit un cadre commun pour l'échange de données et l'exécution de fonctions entre les modèles et les API tierces. Jusqu'à maintenant, il fallait développer, pour chaque service, des appels de fonctions spécifiques. \n\n### L'interopérabilité via MCP\n\nL'importance du MCP réside dans sa capacité à créer une interface standardisée entre les LLMs et les systèmes externes. Cette standardisation présente plusieurs avantages :\n\n1. **Architecture modulaire** : Les développeurs peuvent créer des outils spécialisés qui sont facilement intégrables à différents LLMs compatibles avec le protocole.\n\n2. **Sécurité accrue** : Le MCP limite l'accès des modèles aux seules fonctionnalités explicitement définies, réduisant ainsi les risques de sécurité.\n\n3. **Maintenance simplifiée** : Les mises à jour des outils externes peuvent être faites indépendamment du modèle, facilitant l'évolution des systèmes.\n\n4. **Extension des capacités** : Les LLMs peuvent accéder à des données en temps réel et exécuter des opérations complexes qu'ils ne pourraient pas réaliser seuls.\n\n### mcp-server-legifrance ? \n\nL’idée est d’exploiter la puissance des modèles de langage comme Claude pour effectuer des traitements sur des contenus juridiques officiels via Légifrance, et à terme, d’autres bases de données publiques comme le RNE, le BODACC, etc. Les premiers résultats sont très prometteurs et permettent de pallier certaines limites de la recherche statistique classique proposée par Légifrance. Le service est en amélioration continue, mais vous pouvez déjà consulter quelques exemples de recherches ci-dessous.\n\nLe serveur prend en charge les fonctionnalités suivantes:\n- Recherche dans les textes légaux (lois, ordonnances, décrets, arrêtés)\n- Consultation des articles de codes juridiques français\n- Recherche dans la jurisprudence judiciaire\n\nLes autres fonds Legifrance seront bientôt implémentés. \n\nSi vous souhaitez accéder directement à l'API Legifrance pour connecter votre propre serveur MCP, \nc'est par ici : [https://lab.dassignies.law](https://lab.dassignies.law/api/docs) ou [linkedin](https://fr.linkedin.com/in/dassignies)\n\n## Prérequis\n\n- Python 3.9+\n- Clé API pour Legifrance (à obtenir auprès de [lab.dassignies.law](https://lab.dassignies.fr/))\n- Un modèle compatible avec le protocole MCP (comme Claude desktop)\n\n## Installation\n\n3. Créez un environnement virtuel et activez-le:\n```bash\npython -m venv venv \nsource venv/bin/activate  # Sur Windows: venv\\Scripts\\activate\n```\n```bash\nuv venv .venv \nsource .venv/bin/activate  # Sur Windows: venv\\Scripts\\activate\n```\n2. Installer via pip:\n```bash\npip install git+https://github.com/rdassignies/mcp-server-legifrance.git\n```\n\n3. Installer via uv\n```bash\nuv pip install git+https://github.com/rdassignies/mcp-server-legifrance.git\n```\n\n\n4. Créez un fichier `.env` à la racine du projet avec vos identifiants:\n```\nDASSIGNIES_API_KEY=votre_clé_api\nDASSIGNIES_API_URL=https://lab.dassignies.law/api/ # ou l'URL correspondante\n```\n\nPour obtenir vos clés API de test, merci de me contacter via  [LinkedIn](https://www.linkedin.com/in/dassignies/) \n\n## Utilisation\n\n\n### Intégration avec Claude\n\nC'est l'intégration la plus \"simple\". \n\n\n1. Utilisez le fichier de configuration suivant pour intégrer le serveur MCP dans Claude Desktop. \nPour trouver ce fichier, il faut aller dans paramètres>Développeur>modifier la configuration (renvoie vers le fichier de configuration au format .json). \n\nIl existe également une procédure à la ligne de commande via uv qui sera documentée ultérieurement. \n\nVoici un exemple d'utilisation:\n\n```python\n{\n  \"mcpServers\": {\n    \"legifrance\": {\n      \"command\": \"<CHEMIN_VERS_VOTRE_REP>/mcp-server-legifrance/venv/bin/python\",\n            \"args\": [\n                \"<CHEMIN_VERS_VOTRE_REP>/mcp-server-legifrance/src/server.py\"\n\t\t]\n\n    }\n  }\n}\n```\n2. Démarrer Claude desktop, vous devez voir apparaître des icônes outils : \n\n\n## Outils disponibles\n\n### 1. rechercher_dans_texte_legal\n\nRecherche des articles dans les textes légaux (lois, ordonnances, décrets, arrêtés).\n\n**Paramètres:**\n- **text_id**: Identifiant du texte (ex: \"78-17\" pour la loi informatique et libertés)\n- **search**: Mots-clés ou numéro d'article\n- **champ**: Zone de recherche (\"ALL\", \"TITLE\", \"TABLE\", \"NUM_ARTICLE\", \"ARTICLE\")\n- **type_recherche**: Mode de recherche (\"TOUS_LES_MOTS_DANS_UN_CHAMP\", \"EXPRESSION_EXACTE\", \"AU_MOINS_UN_MOT\")\n- **page_size**: Nombre de résultats (max 100)\n\nPour les détails, cf [https://lab.dassignies.law/api/docs](https://lab.dassignies.law/api/docs)\n\n**Exemple:**\nPour rechercher l'article 7 de la loi 78-17:\n```\n{\n  \"text_id\": \"78-17\",\n  \"search\": \"7\",\n  \"champ\": \"NUM_ARTICLE\"\n}\n```\n\n### 2. rechercher_code\n\nRecherche des articles dans les codes juridiques français.\n\nPar ex. \"Rédige moi une synthèse sur le régime juridique du PACS\"\n\n<img width=\"793\" alt=\"image\" src=\"https://github.com/user-attachments/assets/9af3dd26-cef1-4859-b4b4-55bcfaeb0d4f\" />\n\n\n**Paramètres:**\n- **search**: Termes de recherche\n- **code_name**: Nom du code (ex: \"Code civil\", \"Code du travail\")\n- **champ**: Zone de recherche\n- **sort**: Tri des résultats\n- **type_recherche**: Mode de recherche\n- **page_size**: Nombre de résultats\n- **fetch_all**: Si tous les résultats doivent être récupérés\n\n**Exemple:**\nPour rechercher des informations sur le PACS dans le Code civil, le modèle de langage va envoyer la requête suivante : \n```\n{\n  \"search\": \"pacte civil de solidarité\",\n  \"code_name\": \"Code civil\"\n}\n```\nPour les détails, cf [https://lab.dassignies.law/api/docs](https://lab.dassignies.law/api/docs)\n\n### 3. rechercher_jurisprudence_judiciaire\n\nRecherche dans la base de jurisprudence judiciaire. On peut utiliser la puissance des modèles de langage pour faire des recherches de jurisprudences directement dans Legifrance. \n\n**Exemple 1** Panorama des dernières jp sur un thème particulier (ex. \"Trouve moi les dernières jp sur la rupture brutale des relations commerciales établies et rédige moi un tableau de synthèse\" ). \n\n<img width=\"1456\" alt=\"image\" src=\"https://github.com/user-attachments/assets/e5d77948-7ddf-434c-be31-24feacbfbb22\" />\n\n**Exemple 2** A partir d'une décision particulière connu (numéro de pourvoi 23-23.382), on peut faire des analyses par étapes : \n1. On trouve l'arrêt et Claude génère la fiche d'arrêt\n2. On lui demande d'extraire les articles visés et de les trouver dans Legifrance\n3. On lui demande de trouver des jp similaires\n4. etc ...\n\n\n![image](https://github.com/user-attachments/assets/306724b7-5a42-41c2-9b96-ac591d8880b9)\n\n\n**Paramètres:**\n- **search**: Termes ou numéro d'affaire\n- **publication_bulletin**: Si publiée au bulletin [\"T\"] ou non [\"F\"]\n- **sort**: Tri des résultats\n- **champ**: Zone de recherche\n- **type_recherche**: Mode de recherche\n- **page_size**: Nombre de résultats\n- **fetch_all**: Si tous les résultats doivent être récupérés\n- **juri_keys**: Champs de réponse à extraire \n- **juridiction_judiciaire**: Liste des juridictions\n\nPour les détails, cf [https://lab.dassignies.law/api/docs](https://lab.dassignies.law/api/docs)\n\n## Prompts prédéfinis\n\nLe serveur peut inclure des prompts prédéfinis pour faciliter l'utilisation. \nPour le moment, seul un prompt a été implémenté à titre d'exemple. Il est possible de mettre en place des prompts beaucoup plus \ndétaillés notamment pour effectuer des opérations de type *deepsearch* ou des extractions dans plusieurs documents ... \n\n### agent_juridique_expert\n\nCrée un agent juridique expert qui:\n- Cite systématiquement ses sources\n- Utilise les outils pertinents pour rechercher des informations\n- Fournit des analyses étape par étape\n- Inclut les liens officiels vers les textes juridiques\n\n**Usage:**\n```python\n# Exemple d'utilisation du prompt prédéfini\nresponse = client.messages.create(\n    model=\"claude-3-opus-20240229\",\n    max_tokens=1000,\n    tools=tools,\n    messages=[\n        {\n            \"role\": \"user\", \n            \"content\": [\n                {\n                    \"type\": \"tool_use\",\n                    \"id\": \"prompt_use_1\",\n                    \"name\": \"legifrance.get_prompt\",\n                    \"input\": {\n                        \"prompt_name\": \"agent_juridique_expert\",\n                        \"inputs\": {\n                            \"question\": \"Quelles sont les conditions de validité d'un contrat de mariage?\"\n                        }\n                    }\n                }\n            ]\n        }\n    ]\n)\n```\n\n## Limitations\n\n- Les requêtes sont limitées à 10 par seconde pour respecter les limites de l'API\n- Une connexion internet est nécessaire pour accéder aux bases juridiques\n- Le serveur ne met pas en cache les résultats, chaque requête interroge l'API\n\n## Contribution\n\nLes contributions sont les bienvenues! Veuillez ouvrir une issue ou soumettre une pull request pour toute amélioration ou correction.\n\n## Licence\n\n[MIT License](LICENSE)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jurisprudence",
        "judicial",
        "compliance",
        "legal databases",
        "legal compliance",
        "legifrance access"
      ],
      "category": "legal-and-compliance"
    },
    "self-tech-labs--entscheidsuche-MCP-server": {
      "owner": "self-tech-labs",
      "name": "entscheidsuche-MCP-server",
      "url": "https://github.com/self-tech-labs/entscheidsuche-MCP-server",
      "imageUrl": "/freedevtools/mcp/pfp/self-tech-labs.webp",
      "description": "Standardized access to Swiss court decisions for legal research, enabling search, retrieval, and analysis of legal documents from the entscheidsuche.ch database. Provides tools and templates to enhance legal workflows and streamline document handling.",
      "stars": 1,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-21T20:28:57Z",
      "readme_content": "# Entscheidsuche MCP Server\n\nA Model Context Protocol (MCP) server for searching and accessing Swiss legal case law through the Entscheidsuche API. This server enables legal professionals to efficiently research court decisions from Swiss federal and cantonal courts.\n\n## Features\n\n### Tools\n- **Search Case Law** (`search_case_law`): Search through Swiss court decisions using natural language queries\n- **Get Document** (`get_document`): Retrieve full document content in JSON, HTML, or PDF format\n- **List Courts** (`list_courts`): Get information about available courts and their document counts\n\n### Resources\n- **Court Status** (`entscheidsuche://courts/status`): Real-time information about court document collections\n\n### Prompts\n- **Legal Research** (`legal_research`): Template for conducting comprehensive legal research\n- **Case Analysis** (`case_analysis`): Template for analyzing specific legal cases\n\n## Installation\n\n1. Clone or download this project\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n## Usage\n\n### With Claude Desktop\n\nAdd the following to your Claude Desktop configuration file:\n\n**macOS/Linux**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"entscheidsuche\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/entscheidsuche-mcp/build/index.js\"]\n    }\n  }\n}\n```\n\n### With MCP Inspector\n\nTest the server using the MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n## Example Searches\n\n### Basic Legal Research\nUse the search tool to find cases on specific topics:\n- \"Datenschutz DSGVO\" (Data protection)\n- \"Arbeitsrecht Kündigung\" (Employment law termination)\n- \"Mietrecht Mietzinserhöhung\" (Rental law rent increases)\n\n### Advanced Queries\nThe search supports Elasticsearch query syntax:\n- `\"exact phrase\"` for exact matches\n- `field:value` for field-specific searches\n- `term1 AND term2` for boolean operations\n\n### Document Retrieval\nOnce you find a relevant case, use the signature and spider name to retrieve the full document:\n- Signature: e.g., \"CH_BGer_2023_1C_123_2023\"\n- Spider: e.g., \"CH_BGer\" (Swiss Federal Court)\n\n## API Endpoints Used\n\nThis server interfaces with:\n- `https://entscheidsuche.ch/_search.php` - Elasticsearch search endpoint\n- `https://entscheidsuche.ch/docs/` - Document repository\n- `https://entscheidsuche.ch/status` - Court status information\n\n## Legal Information\n\nThis tool provides access to publicly available Swiss court decisions through the Entscheidsuche service. Please note:\n\n- Always verify legal information through official sources\n- This tool is for research purposes only\n- Consult qualified legal professionals for legal advice\n- Respect the terms of service of entscheidsuche.ch\n\n## Development\n\n### Scripts\n- `npm run build` - Build the TypeScript project\n- `npm run dev` - Build and run the server\n- `npm run watch` - Watch for changes and rebuild\n\n### Project Structure\n```\nsrc/\n  index.ts          # Main server implementation\nbuild/              # Compiled JavaScript output\npackage.json        # Project dependencies and scripts\ntsconfig.json       # TypeScript configuration\n```\n\n## Contributing\n\nFeel free to submit issues and enhancement requests. When contributing:\n\n1. Follow the existing code style\n2. Add appropriate error handling\n3. Update documentation as needed\n4. Test your changes with the MCP Inspector\n\n## License\n\nMIT License - see LICENSE file for details.\n\n## Acknowledgments\n\n- [Entscheidsuche.ch](https://entscheidsuche.ch) for providing the open API\n- [Model Context Protocol](https://modelcontextprotocol.io) for the MCP framework\n- Swiss courts for making decisions publicly available",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "entscheidsuche",
        "court",
        "documents",
        "documents entscheidsuche",
        "legal compliance",
        "entscheidsuche ch"
      ],
      "category": "legal-and-compliance"
    },
    "u3588064--AutoDDC": {
      "owner": "u3588064",
      "name": "AutoDDC",
      "url": "https://github.com/u3588064/AutoDDC",
      "imageUrl": "/freedevtools/mcp/pfp/u3588064.webp",
      "description": "Automates processes related to due diligence, facilitating the efficient gathering and analysis of necessary information and documentation for evaluations.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2024-12-19T14:13:00Z",
      "readme_content": "# AutoDDC\nDue Diligence Automation 尽职调查自动化\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "autoddc",
        "compliance",
        "automates",
        "autoddc automates",
        "u3588064 autoddc",
        "compliance u3588064"
      ],
      "category": "legal-and-compliance"
    },
    "u3588064--AutoGuarantee": {
      "owner": "u3588064",
      "name": "AutoGuarantee",
      "url": "https://github.com/u3588064/AutoGuarantee",
      "imageUrl": "/freedevtools/mcp/pfp/u3588064.webp",
      "description": "自动提取保函文本中的要素和条款，提供法律和金融专业人士分析所需的信息。输出结果为 JSON 格式，支持提取担保人的 SWIFT 标识代码、开立日期和保函种类等要素。",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-02-28T14:20:52Z",
      "readme_content": "# 保函业务自动化项目\n\n## 项目概述\n\n本项目旨在从保函文本中抽取要素、切分条款、提示要点、录制系统，以便于法律和金融专业人士进行分析和处理。项目使用自然语言处理技术，从保函文本中提取特定要素，并以JSON格式输出结果。\n\n## 项目结构\n\n```\n保函要素抽取项目/\n│\n├── data/\n│   ├── sample_guarantee.txt       # 示例保函文本\n│   └── ...                       # 其他保函文本\n│\n├── src/\n│   ├── extractor.py              # 要素抽取脚本\n│   ├── clause_splitter.py        # 条款分割脚本\n│   ├── key_points.py             # 要点提示脚本\n│   ├── format.py                 # 格式处理脚本\n│   └── ...                       # 其他源代码文件\n│\n├── tests/\n│   ├── test_extractor.py         # 要素抽取单元测试\n│   ├── test_clause_splitter.py   # 条款分割单元测试\n│   └── ...                       # 其他测试文件\n│\n├── README.md                     # 项目说明文档\n├── requirements.txt               # 项目依赖\n└── ...                           # 其他配置文件\n```\n\n## 要素列表\n\n项目目前支持抽取以下要素：\n\n1. 担保人的SWIFT标识代码\n2. 开立日期\n3. 保函种类\n4. 保函编号\n5. 担保人的名称\n6. 保函开立地址\n7. 申请人的名称\n8. 申请人的地址\n9. 受益人的名称\n10. 受益人的地址\n11. 基础合同名称\n12. 基础合同编号\n13. 基础合同货物描述\n14. 保函的金额\n15. 保函的币种\n\n## 条款分割\n\n项目支持按以下类别切分条款：\n\n1. 需提交的支持索赔的单据\n2. 需提交单据的语言\n3. 交单形式\n4. 交单地点\n5. 生效条款\n6. 失效条款\n7. 费用的承担方\n8. 担保人的承诺\n9. 索赔的提交要求\n10. 索赔的时间和地点要求\n11. 适用规则\n12. 适用法律\n13. 司法管辖地\n\n\n## 使用方法\n\n#在线版体验\n\n完成度80%，域名申请中\n\n#本地部署\n\n1. 克隆项目仓库：\n    ```bash\n    git clone https://github.com/u3588064/AutoGuarantee.git\n    cd 保函要素抽取项目\n    ```\n\n2. 安装项目依赖：\n    ```bash\n    pip install -r requirements.txt\n    ```\n\n3. 运行要素抽取脚本：\n    ```bash\n    python src/extractor.py data/sample_guarantee.txt\n    ```\n\n4. 查看输出结果：\n    脚本会在终端输出抽取的要素，以JSON格式展示。\n\n## 示例\n输入文本：\n```\nPerformance Guarantee\n\nIssue date: December 7, 2023\nNo.: XX1234567\n\nTo:Machine Shopping Department (hereinafter called 'the Beneficiary')\nAdd:Q.X.TOY 101 HUAYUAN, Korea\n\n…… (SEE Full Text in the repository)\n\nThis performance guarantee shall be valid from its issuance and remian valid until August 35, 2025 (expiry date). Any demand in respect of this guarantee should reach us at our counter not later than the close of our Business hours on the above expiry date.\n\nThis performance guarantee is only personnel to you and is not assignable or transferable.\n\nThis guaranttee is subject to the Uniform Rules for Demand Guarantees, ICC Publication No.758.\n\n```\n\n要素抽取结果：\n```json\n{\n  \"担保人的SWIFT标识代码\": \"\",\n  \"开立日期\": \"December 7, 2023\",\n  \"保函种类\": [\"Performance Guarantee\",\"Advance Payment Guarantee\"],\n  \"保函编号\": \"XX1234567\",\n  \"担保人的名称\": \"Bank of China Ltd, ABC Branch\",\n  \"保函开立地址\": \"No.1 N Road, Xi Province, P. R. China\",\n  \"申请人的名称\": \"GUANGDONG GX GROUP MACHINE CO., LTD\",\n  \"申请人的地址\": \"NO.18 E ROAD, CHINA\",\n  \"受益人的名称\": \"Machine Shopping Department\",\n  \"受益人的地址\": \"Q.X.TOY 101 HUAYUAN, Korea\",\n  \"基础合同名称\": \"Supply Contract\",\n  \"基础合同编号\": \"AK/123/2023/09\",\n  \"基础合同货物描述\": \"Supply of Toy bags\",\n  \"保函的金额\": 1,123.00,\n  \"保函的币种\": \"USD\"\n}\n{\n \"保函种类\": [\"Performance Guarantee\",\"Advance Payment Guarantee\"]\n}\n```\n\n条款切分结果：\n```\n{\n  \"需提交的支持索赔的单据\": null,\n  \"需提交单据的语言\": null,\n  \"交单形式\": \"any such demand in original should be presented to us through your Banker confirmation that the signatures thereon are authentic and legally binding upon you.\",\n  \"交单地点\": \"our counter\",\n  \"生效条款\": \"This performance guarantee shall be valid from its issuance\",\n  \"失效条款\": \"This performance guarantee shall ... remain valid until August 35, 2025 (expiry date).\",\n  \"费用的承担方\": null,\n  \"担保人的承诺\": \"we undertake to pay you unconditionally and independently, upon our receipt of your first written demand in original paper form declaring the seller fails to perform its obligations under the Contract and specifying in which respect the seller is in failure.\",\n  \"索赔的提交要求\": \"your first written demand in original paper form declaring the seller fails to perform its obligations under the Contract and specifying in which respect the seller is in failure.\",\n  \"索赔的时间和地点要求\": \"Any demand in respect of this guarantee should reach us at our counter not later than the close of our Business hours on the above expiry date.\",\n  \"适用规则\": \"This guaranttee is subject to the Uniform Rules for Demand Guarantees, ICC Publication No.758.\",\n  \"适用法律\": null,\n  \"司法管辖地\": null\n}\n```\n\n## 贡献\n\n欢迎对本项目进行贡献。如果您有任何建议或发现任何问题，请提交Issue或Pull Request。\n\n## 许可证\n\n本项目采用MIT许可证，详见LICENSE文件。\n\n## 联系方式\n\n如果您有任何问题或需要进一步的信息，请联系项目维护者：[u3588064@connect.hku.hk](mailto:u3588064@connect.hku.hk)。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "自动提取保函文本中的要素和条款",
        "compliance",
        "autoguarantee",
        "autoguarantee 自动提取保函文本中的要素和条款",
        "legal compliance",
        "自动提取保函文本中的要素和条款 提供法律和金融专业人士分析所需的信息"
      ],
      "category": "legal-and-compliance"
    },
    "wuye-ai--mcp-server-wuye-ai": {
      "owner": "wuye-ai",
      "name": "mcp-server-wuye-ai",
      "url": "https://github.com/wuye-ai/mcp-server-wuye-ai",
      "imageUrl": "/freedevtools/mcp/pfp/wuye-ai.webp",
      "description": "Intelligent AI assistant tailored for property management, providing access to industry news, hotspot questions, and knowledge base searches. Integrates with applications using SSE or stdio, secured by token-based authentication.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-15T02:13:40Z",
      "readme_content": "# CRIC物业AI MCP Server\n\n--------------\n[![NPM Version](https://img.shields.io/npm/v/%40wuye-ai%2Fmcp-server-wuye-ai)](https://www.npmjs.com/package/@wuye-ai/mcp-server-wuye-ai)\n[![zh-CN](https://img.shields.io/badge/lang-zh--CN-red.svg)](https://github.com/wuye-ai/mcp-server-wuye-ai/blob/master/README.md)\n[![en](https://img.shields.io/badge/lang-en-red.svg)](https://github.com/wuye-ai/mcp-server-wuye-ai/blob/master/README.en.md)\n[![Apply For Access Token](https://img.shields.io/badge/%E7%94%B3%E8%AF%B7%E5%BC%80%E9%80%9A-gray?label=%F0%9F%91%8B)](https://wuye-ai.cricbigdata.com/mcp)\n[![Practical Guide](https://img.shields.io/badge/%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-gray?label=%F0%9F%A7%AD)](https://wuye-ai.cricbigdata.com/mcp)\n\n已上架 | \n[<img src=\"https://static-production.npmjs.com/b0f1a8318363185cc2ea6a40ac23eeb2.png\" width=\"12\" height=\"12\" alt=\"NPM Logo\"> **NPM**](https://www.npmjs.com/package/@wuye-ai/mcp-server-wuye-ai) | \n[<img src=\"https://mcp.so/favicon.ico\" width=\"12\" height=\"12\" alt=\"MCP.so Logo\"> **MCP.so**](https://mcp.so/server/CRIC%E7%89%A9%E4%B8%9AAI/CRIC) |\n[<img src=\"https://mcpservers.org/icon.png\" width=\"12\" height=\"12\" alt=\"MCPServers.org Logo\"> **MCPServers.org**](https://mcpservers.org/servers/wuye-ai/mcp-server-wuye-ai) |\n[<img src=\"https://tcb.cloud.tencent.com/favicon.ico\" width=\"12\" height=\"12\" alt=\"腾讯云开发 Logo\"> **腾讯云开发**](https://tcb.cloud.tencent.com/mcp-server/mcp-server-wuye-ai) |\n[<img src=\"https://g.alicdn.com/sail-web/maas/2.8.5/favicon/128.ico\" width=\"12\" height=\"12\" alt=\"ModelScope Logo\"> **ModelScope**](https://modelscope.cn/mcp/servers/@wuye-ai/mcp-server-wuye-ai) |\n[<img src=\"https://gw.alicdn.com/imgextra/i4/O1CN01vVn7g32134zNZEeAR_!!6000000006928-55-tps-24-24.svg\" width=\"12\" height=\"12\" alt=\"阿里云百炼 Logo\"> **阿里云百炼**](https://bailian.console.aliyun.com/?tab=mcp#/mcp-market/detail/cric-wuye-ai) |\n[<img src=\"https://agi-dev-platform-web.cdn.bcebos.com/ai_apaas/favicon.ico\" width=\"12\" height=\"12\" alt=\"百度智能云 Logo\"> **百度智能云千帆**](https://console.bce.baidu.com/ai_apaas/mcpServerCenter/mcp_t_cric_ai/detail) |\n[<img src=\"https://gips3.baidu.com/it/u=1551671786,626435656&fm=3028&app=3028&f=PNG&fmt=auto&q=100&size=f300_315\" width=\"12\" height=\"12\" alt=\"百度搜索开放平台 Logo\"> **百度搜索开放平台**](https://sai.baidu.com/server/CRIC?id=DZy6eHdoKx2v3gfThymJXf)\n\n（更多MCP平台陆续上架中……）\n\n--------------\n\n## 简介\n\n**CRIC物业AI** 是 [克而瑞](http://www.cricchina.com/) 专为物业行业打造的智能 AI 助理，于2025年4月25日 [正式发布](https://mp.weixin.qq.com/s/GC4V1M6N199Ay2f3kZan_Q)。\n\n**CRIC物业AI** 通过行业知识库建设，结合多模态大模型 + RAG 技术，集成五大核心能力模块：**行业研究**、**法律法规**、**社区治理**、**项目经营**、**文案写作**，并在行业垂类知识基础上，拓展了 **资讯舆情** 和 **人才培训** 两大智能体。\n\n## 核心能力\n\n克而瑞通过三个能力来构建其自身在物业AI合作领域优势：\n\n- **数据资产转化能力：** 将10亿字行业语料、TB级多模态数据转化为物业行业的高质量数据集，并构建了一套行业数据质量评估体系，保障准确率和可信度；\n- **场景穿透能力：** 聚焦20+物业行业垂直业务场景，定向选用对应领域知识库，精准匹配；\n- **生态进化能力：** 通过每日实时监测超过500+可信资讯和数据来源，处理10万+实时数据的自更新系统，在政策预警、商机挖掘和招投标分析等环节实现准确率突破90%，形成行业AI知识中枢的持续升级。\n\n## MCP Server 功能\n\n**CRIC物业AI MCP Server** 是一个基于 [Model Context Protocol](https://modelcontextprotocol.io/) 的服务端实现，基于 **CRIC物业AI** 平台的部分原子能力，目前版本提供了以下三大功能模块：\n\n- **资讯日报：** 获取物业行业资讯日报。\n- **知识库：** 搜索物业行业专属知识库。\n\n具体工具（Tool）定义，请参考 [工具定义配置](./TOOLS.md) 文档。更多能力即将推出，敬请期待。\n\n## CRIC物业AI 知识库\n\n使用 CRIC 物业 AI MCP Server，可以查询克而瑞建设的物业行业垂类高质量知识库，获取用户问题相关的知识文本供 AI 参考。\n\n目前可供开通的知识库包括：**法律法规、物业企业信息、克而瑞榜单、优秀物业项目服务案例、物业行业研究、物业项目应急响应、物业项目综合管理、物业项目客诉处理、物业行业法律判例、非住宅类物业研究、物业项目管理案例** 等。\n\n## 获取 Access Token\n\n您需要先获取 **CRIC物业AI Access Token** 才能使用 CRIC物业AI MCP Server 的功能。请访问我们的网站申请：[申请开通体验 CRIC物业AI MCP Server](https://wuye-ai.cricbigdata.com/mcp)。\n\n## 快速开始\n\n### 1. SSE 方式（http）\n\n#### 1.1 运行\n\n您可以自行运行一个 MCP Server 并启用 HTTP 模式，或者直接使用我们提供的 URL。\n\n##### A. 自行运行：\n\n```bash\nMODE=http PORT=3011 npx -y @wuye-ai/mcp-server-wuye-ai\n```\n\n运行成功后，MCP Server URL 为 `http://localhost:3011/sse/mcp` 。\n\n##### B. 使用官方：\n\n或者您也可以直接使用我们的官方的 MCP Server URL：\n\n- 测试环境：`https://mcp.wuye-ai-staging.cricbigdata.com/sse/mcp`\n- 生产环境：`https://mcp.wuye-ai.cricbigdata.com/sse/mcp`\n\n#### 1.2 测试\n\n您可以使用 MCP Inspector 或第三方工具连接 SSE 方式的 MCP Server。\n\n##### MCP Inspector：\n\n服务运行成功后，您可以运行 [MCP Inspector](https://github.com/modelcontextprotocol/inspector) 来查看并测试服务是否正常运行。\n\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\nMCP Inspector 启动后，用浏览器打开其 Web UI（默认为：http://127.0.0.1:6274/ ）。并按照如下步骤配置连接：\n\n1. 在界面左侧设置 Transport Type 为 `SSE`，URL 为上一步获得的 MCP Server URL。\n2. 展开 Authentication 面板，设置 Header Name 为 `Authorization` ，Bearer Token 为您的 **CRIC物业AI Access Token**。\n3. 点击 Connect 按钮，连接成功后，左侧会显示当前连接的状态。\n\n此时您就可以操作 MCP Inspector 测试 CRIC物业AI 的 MCP Server 了。具体使用方法您可以参考 [MCP Inspector 中文文档](https://mcp-docs.cn/docs/tools/inspector) 。\n\n##### 第三方工具：\n\n通过第三方工具使用 SSE 方式接入时，您需要通过 `Authorization` **HTTP 头** 指定 Access Token。例如，[Cline](https://cline.bot/) 设置文件：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer {{您的 CRIC物业AI Access Token}}\"\n      }\n    }\n  }\n}\n```\n\n请注意，当前部分使用 [@modelcontextprotocol/typescript-sdk](https://github.com/modelcontextprotocol/typescript-sdk) 的工具 [其 ***HTTP 头*** 设置可能无法正确生效](https://github.com/modelcontextprotocol/typescript-sdk/issues/317)，因此建议使用 MCP Inspector 来测试。或者，作为一种临时措施，我们也支持在 URL 中使用 Query 方式指定 Access Token，例如：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp?token={{您的 CRIC物业AI Access Token}}\"\n    }\n  }\n}\n```\n\n### 2. Stdio 方式\n\n#### 2.1 运行\n\n我们也支持 stdio 方式运行 MCP Server。命令如下：\n\n```bash\nCRIC_WUYE_AI_ACCESS_TOKEN={{您的 CRIC物业AI Access Token}} npx -y @wuye-ai/mcp-server-wuye-ai\n```\n\n#### 2.2 测试\n\n您可以使用第三方工具或者 MCP Inspector 来连接 Stdio 方式的 MCP Server。请注意，Stdio 方式下一般无需用户手动运行 MCP Server，通常是由第三方工具自动运行。\n\n##### MCP Inspector\n\n在 MCP Inspector 中，您也可以选择 Stdio 方式接入。具体步骤如下：\n\n1. 在界面左侧设置 Transport Type 为 `Stdio`，Command 为 `npx`，Arguments 为 `-y @wuye-ai/mcp-server-wuye-ai`。\n2. 展开 Environment Variables 面板，添加或设置 `CRIC_WUYE_AI_ACCESS_TOKEN` 为您的 **CRIC物业AI Access Token**。\n3. 点击 Connect 按钮，MCP Inspector 会自动运行命令启动 MCP Server 并连接。连接成功后，左侧会显示当前连接的状态。\n\n此时您就可以操作 MCP Inspector 测试 CRIC物业AI 的 MCP Server 了。\n\n##### 第三方工具\n\n通过第三方工具使用 Stdio 方式接入时，如果您需要指定 Access Token，请通过环境变量 `CRIC_WUYE_AI_ACCESS_TOKEN` 指定。例如，Cline 设置文件：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wuye-ai/mcp-server-wuye-ai\"\n      ],\n      \"env\": {\n        \"CRIC_WUYE_AI_ACCESS_TOKEN\": \"{{您的 CRIC物业AI Access Token}}\"\n      }\n    }\n  }\n}\n```\n\n## 实践指南\n\nCRIC物业AI MCP Server 支持各类智能体平台接入，如钉钉AI助理等。您可以参考 [实践指南](https://alidocs.dingtalk.com/i/p/nb9XJDP07QqPDGyA/docs/mweZ92PV6My4ebxdHdb9oQBYWxEKBD6p) 进行操作体验。\n\n## 可选配置\n\n您可以通过环境变量或 URL Query（SSE方式下） 来配置 CRIC物业AI MCP Server 的运行方式。以下是可用的配置项：\n\n| 环境变量参数名                          | URL Query 参数名 | 默认值                                      | 描述                                                                                                                                                                            |\n|----------------------------------|---------------|------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `MODE`                           | *不支持*         | `stdio`                                  | 运行模式，支持 `stdio` 和 `http` 两种模式。                                                                                                                                                |\n| `HOSTNAME`                       | *不支持*         | `0.0.0.0`                                | HTTP 绑定主机名，仅在 `http` 模式下有效。`0.0.0.0`即为绑定到本机所有IP地址。                                                                                                                            |\n| `PORT`                           | *不支持*         | `3011`                                   | HTTP 绑定端口，仅在 `http` 模式下有效。                                                                                                                                                    |\n| `CRIC_WUYE_AI_ACCESS_TOKEN`      | `token`       | *无*                                      | CRIC物业AI Access Token。如果不提供，则使用实际请求 HTTP Authorization Header 中的值。                                                                                                            |\n| `CRIC_WUYE_AI_PROVIDER_API_BASE` | *不支持*         | `https://export.wuye-ai.cricbigdata.com` | CRIC物业AI 后端接入 API，请注意 ***此 URL 不是 CRIC物业AI MCP Server 的 URL*** 。可选值为 `https://export.wuye-ai-staging.cricbigdata.com` （测试环境）、 `https://export.wuye-ai.cricbigdata.com` （生产环境） |\n| `CRIC_WUYE_AI_NAME_EN`           | `name_en`     | 由 CRIC物业AI 工作人员为您默认配置                    | 是否使用工具英文名称，支持 `true` 和 `false` 两个取值。启用时，Tool 名称将改为使用英文版本，以提高对部分海外模型的兼容性。对于支持中文工具名称的模型，建议不启用，以获得更好的效果。如果配置该选项，将覆盖默认配置。                                                         |\n| `CRIC_WUYE_AI_FEATURE_SET`       | `feature_set` | 由 CRIC物业AI 工作人员为您默认配置                    | 预配置的工具功能集，支持 `base`、`detail` 等取值。该参数决定了您可用的 Tool 集合，`base` 功能集中提供了“获取可用知识库列表”和通用的“搜索知识库”工具，而 `detail` 功能集中不提供“获取可用知识库列表”工具，但为每个可用的知识库提供了单独的“搜索知识库”工具。如果配置该选项，将覆盖默认配置。         |\n| `CRIC_WUYE_AI_OUTPUT_FORMAT`     | `output`      | `raw`                                    | 工具调用输出格式，支持 `raw`（不转化）、`text`（转化为 Markdown 文本）等取值。                                                                                                                            |\n\n*注：* URL Query 配置时，只需要在 SSE 调用的 URL 后面拼接参数即可，例如：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp?token={{您的 CRIC物业AI Access Token}}&name_en=true\"\n    }\n  }\n}\n```\n\n关于 `CRIC_WUYE_AI_NAME_EN` 和 `CRIC_WUYE_AI_FEATURE_SET` 的更多信息，请参考 [工具定义配置](./TOOLS.md) 文档。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "assistant",
        "sse",
        "ai assistant",
        "wuye ai",
        "ai mcp"
      ],
      "category": "legal-and-compliance"
    }
  }
}