{
  "category": "support--service-management",
  "categoryDisplay": "Support & Service Management",
  "description": "Tools for managing customer support, IT service management, and helpdesk operations.",
  "totalRepositories": 6,
  "repositories": {
    "aikts--yandex-tracker-mcp": {
      "owner": "aikts",
      "name": "yandex-tracker-mcp",
      "url": "https://github.com/aikts/yandex-tracker-mcp",
      "imageUrl": "",
      "description": "MCP Server for Yandex Tracker. Provides tools for searching and retrieving information about issues, queues, users.",
      "stars": 23,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-02T20:41:35Z",
      "readme_content": "# Yandex Tracker MCP Server\n\n![PyPI - Version](https://img.shields.io/pypi/v/yandex-tracker-mcp)\n![Test Workflow](https://github.com/aikts/yandex-tracker-mcp/actions/workflows/test.yml/badge.svg?branch=main)\n![Docker Workflow](https://github.com/aikts/yandex-tracker-mcp/actions/workflows/docker.yml/badge.svg?branch=main)\n![Package Workflow](https://github.com/aikts/yandex-tracker-mcp/actions/workflows/package.yml/badge.svg?branch=main)\n[![smithery badge](https://smithery.ai/badge/@aikts/yandex-tracker-mcp)](https://smithery.ai/server/@aikts/yandex-tracker-mcp)\n\nmcp-name: io.github.aikts/yandex-tracker-mcp\n\nA comprehensive Model Context Protocol (MCP) server that enables AI assistants to interact with Yandex Tracker APIs. This server provides secure, authenticated access to Yandex Tracker issues, queues, comments, worklogs, and search functionality with optional Redis caching for improved performance.\n\n<a href=\"https://glama.ai/mcp/servers/@aikts/yandex-tracker-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@aikts/yandex-tracker-mcp/badge\" />\n</a>\n\nDocumentation in Russian is available [here](README_ru.md) / Документация на русском языке доступна [здесь](README_ru.md).\n\n## Features\n\n- **Complete Queue Management**: List and access all available Yandex Tracker queues with pagination support and tag retrieval\n- **User Management**: Retrieve user account information, including login details, email addresses, license status, and organizational data\n- **Issue Operations**: Retrieve detailed issue information, comments, related links, worklogs, and attachments\n- **Field Management**: Access global fields, queue-specific local fields, statuses, and issue types\n- **Advanced Query Language**: Full Yandex Tracker Query Language support with complex filtering, sorting, and date functions\n- **Performance Caching**: Optional Redis caching layer for improved response times\n- **Security Controls**: Configurable queue access restrictions and secure token handling\n- **Multiple Transport Options**: Support for stdio, SSE (deprecated), and HTTP transports for flexible integration\n- **OAuth 2.0 Authentication**: Dynamic token-based authentication with automatic refresh support as an alternative to static API tokens\n- **Organization Support**: Compatible with both standard and cloud organization IDs\n\n### Organization ID Configuration\n\nChoose one of the following based on your Yandex organization type:\n\n- **Yandex Cloud Organization**: Use `TRACKER_CLOUD_ORG_ID` env var later for Yandex Cloud-managed organizations\n- **Yandex 360 Organization**: Use `TRACKER_ORG_ID` env var later for Yandex 360 organizations\n\nYou can find your organization ID in the Yandex Tracker URL or organization settings.\n\n\n## MCP Client Configuration\n\n### Installing extension in Claude Desktop\n\nYandex Tracker MCP Server can be one-click installed in Claude Desktop as and [extension](https://www.anthropic.com/engineering/desktop-extensions).\n\n#### Prerequisites\nThere is only one requirement - python 3.12 must be installed on your system.\n\nFor macOS users, you can install it using the following command:\n\n```bash\nbrew install python@3.12\n```\n\n#### Installation\n\n1. Download the `*.dxt` file from [GitHub Releases](https://github.com/aikts/yandex-tracker-mcp/releases/latest) for your OS and platform.\n2. Double-click the downloaded file to install it in Claude Desktop. \n3. Provide your Yandex Tracker OAuth token when prompted. \n4. Make sure extension is enabled - now you may use this MCP Server.\n\n### Manual installation\n\n#### Prerequisites\n\n- [uv](https://docs.astral.sh/uv/getting-started/installation/) installed globally\n- Valid Yandex Tracker API token with appropriate permissions\n\nThe following sections show how to configure the MCP server for different AI clients. You can use either `uvx yandex-tracker-mcp@latest` or the Docker image `ghcr.io/aikts/yandex-tracker-mcp:latest`. Both require these environment variables:\n\n- Authentication (one of the following):\n  - `TRACKER_TOKEN` - Your Yandex Tracker OAuth token\n  - `TRACKER_IAM_TOKEN` - Your IAM token\n  - `TRACKER_SA_KEY_ID`, `TRACKER_SA_SERVICE_ACCOUNT_ID`, `TRACKER_SA_PRIVATE_KEY` - Service account credentials\n- `TRACKER_CLOUD_ORG_ID` or `TRACKER_ORG_ID` - Your Yandex Cloud (or Yandex 360) organization ID\n\n<details>\n<summary><strong>Claude Desktop</strong></summary>\n\n**Configuration file path:**\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n**Using uvx:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>Claude Code</strong></summary>\n\n**Using uvx:**\n```bash\nclaude mcp add yandex-tracker uvx yandex-tracker-mcp@latest \\\n  -e TRACKER_TOKEN=your_tracker_token_here \\\n  -e TRACKER_CLOUD_ORG_ID=your_cloud_org_id_here \\\n  -e TRACKER_ORG_ID=your_org_id_here \\\n  -e TRANSPORT=stdio\n```\n\n**Using Docker:**\n```bash\nclaude mcp add yandex-tracker docker \"run --rm -i -e TRACKER_TOKEN=your_tracker_token_here -e TRACKER_CLOUD_ORG_ID=your_cloud_org_id_here -e TRACKER_ORG_ID=your_org_id_here -e TRANSPORT=stdio ghcr.io/aikts/yandex-tracker-mcp:latest\"\n```\n\n</details>\n\n<details>\n<summary><strong>Cursor</strong></summary>\n\n**Configuration file path:**\n- Project-specific: `.cursor/mcp.json` in your project directory\n- Global: `~/.cursor/mcp.json`\n\n**Using uvx:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>Windsurf</strong></summary>\n\n**Configuration file path:**\n- `~/.codeium/windsurf/mcp_config.json`\n\nAccess via: Windsurf Settings → Cascade tab → Model Context Protocol (MCP) Servers → \"View raw config\"\n\n**Using uvx:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>Zed</strong></summary>\n\n**Configuration file path:**\n- `~/.config/zed/settings.json`\n\nAccess via: `Cmd+,` (macOS) or `Ctrl+,` (Linux/Windows) or command palette: \"zed: open settings\"\n\n**Note:** Requires Zed Preview version for MCP support.\n\n**Using uvx:**\n```json\n{\n  \"context_servers\": {\n    \"yandex-tracker\": {\n      \"source\": \"custom\",\n      \"command\": {\n        \"path\": \"uvx\",\n        \"args\": [\"yandex-tracker-mcp@latest\"],\n        \"env\": {\n          \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n          \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n          \"TRACKER_ORG_ID\": \"your_org_id_here\"\n        }\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"context_servers\": {\n    \"yandex-tracker\": {\n      \"source\": \"custom\",\n      \"command\": {\n        \"path\": \"docker\",\n        \"args\": [\n          \"run\", \"--rm\", \"-i\",\n          \"-e\", \"TRACKER_TOKEN\",\n          \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n          \"-e\", \"TRACKER_ORG_ID\",\n          \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n        ],\n        \"env\": {\n          \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n          \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n          \"TRACKER_ORG_ID\": \"your_org_id_here\"\n        }\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>GitHub Copilot (VS Code)</strong></summary>\n\n**Configuration file path:**\n- Workspace: `.vscode/mcp.json` in your project directory\n- Global: VS Code `settings.json`\n\n**Option 1: Workspace Configuration (Recommended for security)**\n\nCreate `.vscode/mcp.json`:\n\n**Using uvx:**\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"tracker-token\",\n      \"description\": \"Yandex Tracker Token\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"cloud-org-id\",\n      \"description\": \"Yandex Cloud Organization ID\"\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"org-id\",\n      \"description\": \"Yandex Tracker Organization ID (optional)\"\n    }\n  ],\n  \"servers\": {\n    \"yandex-tracker\": {\n      \"type\": \"stdio\",\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"${input:tracker-token}\",\n        \"TRACKER_CLOUD_ORG_ID\": \"${input:cloud-org-id}\",\n        \"TRACKER_ORG_ID\": \"${input:org-id}\",\n        \"TRANSPORT\": \"stdio\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"inputs\": [\n    {\n      \"type\": \"promptString\",\n      \"id\": \"tracker-token\",\n      \"description\": \"Yandex Tracker Token\",\n      \"password\": true\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"cloud-org-id\",\n      \"description\": \"Yandex Cloud Organization ID\"\n    },\n    {\n      \"type\": \"promptString\",\n      \"id\": \"org-id\",\n      \"description\": \"Yandex Tracker Organization ID (optional)\"\n    }\n  ],\n  \"servers\": {\n    \"yandex-tracker\": {\n      \"type\": \"stdio\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"${input:tracker-token}\",\n        \"TRACKER_CLOUD_ORG_ID\": \"${input:cloud-org-id}\",\n        \"TRACKER_ORG_ID\": \"${input:org-id}\",\n        \"TRANSPORT\": \"stdio\"\n      }\n    }\n  }\n}\n```\n\n**Option 2: Global Configuration**\n\nAdd to VS Code `settings.json`:\n\n**Using uvx:**\n```json\n{\n  \"github.copilot.chat.mcp.servers\": {\n    \"yandex-tracker\": {\n      \"type\": \"stdio\",\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"github.copilot.chat.mcp.servers\": {\n    \"yandex-tracker\": {\n      \"type\": \"stdio\",\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary><strong>Other MCP-Compatible Clients</strong></summary>\n\nFor other MCP-compatible clients, use the standard MCP server configuration format:\n\n**Using uvx:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yandex-tracker-mcp@latest\"],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n**Using Docker:**\n```json\n{\n  \"mcpServers\": {\n    \"yandex-tracker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"TRACKER_TOKEN\",\n        \"-e\", \"TRACKER_CLOUD_ORG_ID\",\n        \"-e\", \"TRACKER_ORG_ID\",\n        \"ghcr.io/aikts/yandex-tracker-mcp:latest\"\n      ],\n      \"env\": {\n        \"TRACKER_TOKEN\": \"your_tracker_token_here\",\n        \"TRACKER_CLOUD_ORG_ID\": \"your_cloud_org_id_here\",\n        \"TRACKER_ORG_ID\": \"your_org_id_here\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n**Important Notes:**\n- Replace placeholder values with your actual credentials\n- Restart your AI client after configuration changes\n- Ensure `uvx` is installed and available in your system PATH\n- For production use, consider using environment variables instead of hardcoding tokens\n\n## Available MCP Tools\n\nThe server exposes the following tools through the MCP protocol:\n\n### Queue Management\n- **`queues_get_all`**: List all available Yandex Tracker queues\n  - Returns paginated queue information\n  - Respects `TRACKER_LIMIT_QUEUES` restrictions\n\n- **`queue_get_local_fields`**: Get local fields for a specific queue\n  - Parameters: `queue_id` (string, queue key like \"SOMEPROJECT\")\n  - Returns queue-specific custom fields with id, name, and key\n  - Respects `TRACKER_LIMIT_QUEUES` restrictions\n\n- **`queue_get_tags`**: Get all tags for a specific queue\n  - Parameters: `queue_id` (string, queue key like \"SOMEPROJECT\")\n  - Returns list of available tags in the specified queue\n  - Respects `TRACKER_LIMIT_QUEUES` restrictions\n\n- **`queue_get_versions`**: Get all versions for a specific queue\n  - Parameters: `queue_id` (string, queue key like \"SOMEPROJECT\")\n  - Returns list of available versions in the specified queue with details like name, description, dates, and status\n  - Respects `TRACKER_LIMIT_QUEUES` restrictions\n\n### User Management\n- **`users_get_all`**: Get information about user accounts registered in the organization\n  - Parameters:\n    - `per_page` (optional): Number of users per page (default: 50)\n    - `page` (optional): Page number to return (default: 1)\n  - Returns paginated list of users with login, email, license status, and organizational details\n  - Includes user metadata such as external status, dismissal status, and notification preferences\n\n- **`user_get`**: Get information about a specific user by login or UID\n  - Parameters: `user_id` (string, user login like \"john.doe\" or UID like \"12345\")\n  - Returns detailed user information including login, email, license status, and organizational details\n  - Supports both user login names and numeric user IDs for flexible identification\n\n- **`user_get_current`**: Get information about the current authenticated user\n  - No parameters required\n  - Returns detailed information about the user associated with the current authentication token\n  - Includes login, email, display name, and organizational details for the authenticated user\n\n- **`users_search`**: Search user based on login, email or real name (first or last name, or both)\n  - Parameters: `login_or_email_or_name` (string, user login, email or real name to search for)\n  - Returns either single user or multiple users if several match the query or an empty list if no users matched\n  - Uses fuzzy matching for real names with a similarity threshold of 80%\n  - Prioritizes exact matches for login and email over fuzzy name matches\n\n### Field Management\n- **`get_global_fields`**: Get all global fields available in Yandex Tracker\n  - Returns complete list of global fields that can be used in issues\n  - Includes field schema, type information, and configuration\n\n### Status and Type Management\n- **`get_statuses`**: Get all available issue statuses\n  - Returns complete list of issue statuses that can be assigned\n  - Includes status IDs, names, and type information\n\n- **`get_issue_types`**: Get all available issue types\n  - Returns complete list of issue types for creating/updating issues\n  - Includes type IDs, names, and configuration details\n\n- **`get_priorities`**: Get all available issue priorities\n  - Returns complete list of priorities that can be assigned to issues\n  - Includes priority keys, names, and order information\n\n### Issue Operations\n- **`issue_get`**: Retrieve detailed issue information by ID\n  - Parameters:\n    - `issue_id` (string, format: \"QUEUE-123\")\n    - `include_description` (boolean, optional, default: true): Whether to include issue description in the result. Can be large, so use only when needed.\n  - Returns complete issue data including status, assignee, description, etc.\n\n- **`issue_get_url`**: Generate web URL for an issue\n  - Parameters: `issue_id` (string)\n  - Returns: `https://tracker.yandex.ru/{issue_id}`\n\n- **`issue_get_comments`**: Fetch all comments for an issue\n  - Parameters: `issue_id` (string)\n  - Returns chronological list of comments with metadata\n\n- **`issue_get_links`**: Get related issue links\n  - Parameters: `issue_id` (string)\n  - Returns links to related, blocked, or duplicate issues\n\n- **`issue_get_worklogs`**: Retrieve worklog entries\n  - Parameters: `issue_ids` (array of strings)\n  - Returns time tracking data for specified issues\n\n- **`issue_get_attachments`**: Get attachments for an issue\n  - Parameters: `issue_id` (string, format: \"QUEUE-123\")\n  - Returns list of attachments with metadata for the specified issue\n\n- **`issue_get_checklist`**: Get checklist items of an issue\n  - Parameters: `issue_id` (string, format: \"QUEUE-123\")\n  - Returns list of checklist items including text, status, assignee, and deadline information\n\n### Search and Discovery\n- **`issues_find`**: Search issues using [Yandex Tracker Query Language](https://yandex.ru/support/tracker/ru/user/query-filter)\n  - Parameters:\n    - `query` (required): Query string using Yandex Tracker Query Language syntax\n    - `include_description` (boolean, optional, default: false): Whether to include issue description in the issues result. Can be large, so use only when needed.\n    - `fields` (list of strings, optional): Fields to include in the response. Helps optimize context window usage by selecting only needed fields. If not specified, returns all available fields.\n    - `page` (optional): Page number for pagination (default: 1)\n    - `per_page` (optional): Number of items per page (default: 100). May be decreased if results exceed context window.\n  - Returns up to specified number of issues per page\n\n- **`issues_count`**: Count issues matching a query using [Yandex Tracker Query Language](https://yandex.ru/support/tracker/ru/user/query-filter)\n  - Parameters:\n    - `query` (required): Query string using Yandex Tracker Query Language syntax\n  - Returns the total count of issues matching the specified criteria\n  - Supports all query language features: field filtering, date functions, logical operators, and complex expressions\n  - Useful for analytics, reporting, and understanding issue distribution without retrieving full issue data\n\n\n## http Transport\n\nThe MCP server can also be run in streamable-http mode for web-based integrations or when stdio transport is not suitable.\n\n### streamable-http Mode Environment Variables\n\n```env\n# Required - Set transport to streamable-http mode\nTRANSPORT=streamable-http\n\n# Server Configuration\nHOST=0.0.0.0  # Default: 0.0.0.0 (all interfaces)\nPORT=8000     # Default: 8000\n```\n\n### Starting the streamable-http Server\n\n```bash\n# Basic streamable-http server startup\nTRANSPORT=streamable-http uvx yandex-tracker-mcp@latest\n\n# With custom host and port\nTRANSPORT=streamable-http \\\nHOST=localhost \\\nPORT=9000 \\\nuvx yandex-tracker-mcp@latest\n\n# With all environment variables\nTRANSPORT=streamable-http \\\nHOST=0.0.0.0 \\\nPORT=8000 \\\nTRACKER_TOKEN=your_token \\\nTRACKER_CLOUD_ORG_ID=your_org_id \\\nuvx yandex-tracker-mcp@latest\n```\n\nYou may skip configuring `TRACKER_CLOUD_ORG_ID` or `TRACKER_ORG_ID` if you are using the following format when connecting to MCP Server (example for Claude Code):\n\n```bash\nclaude mcp add --transport http yandex-tracker \"http://localhost:8000/mcp/?cloudOrgId=your_cloud_org_id&\"\n```\n\nor\n\n```bash\nclaude mcp add --transport http yandex-tracker \"http://localhost:8000/mcp/?orgId=org_id&\"\n```\n\nYou may also skip configuring global `TRACKER_TOKEN` environment variable if you choose to use OAuth 2.0 authentication (see below).\n\n### OAuth 2.0 Authentication\n\nThe Yandex Tracker MCP Server supports OAuth 2.0 authentication as a secure alternative to static API tokens. When configured, the server acts as an OAuth provider, facilitating authentication between your MCP client and Yandex OAuth services.\n\n#### How OAuth Works\n\nThe MCP server implements a standard OAuth 2.0 authorization code flow:\n\n1. **Client Registration**: Your MCP client registers with the server to obtain client credentials\n2. **Authorization**: Users are redirected to Yandex OAuth to authenticate\n3. **Token Exchange**: The server exchanges authorization codes for access tokens\n4. **API Access**: Clients use bearer tokens for all API requests\n5. **Token Refresh**: Expired tokens can be refreshed without re-authentication\n\n```\nMCP Client → MCP Server → Yandex OAuth → User Authentication\n    ↑                                           ↓\n    └────────── Access Token ←─────────────────┘\n```\n\n#### OAuth Configuration\n\nTo enable OAuth authentication, set the following environment variables:\n\n```env\n# Enable OAuth mode\nOAUTH_ENABLED=true\n\n# Yandex OAuth Application Credentials (required for OAuth)\nOAUTH_CLIENT_ID=your_yandex_oauth_app_id\nOAUTH_CLIENT_SECRET=your_yandex_oauth_app_secret\n\n# Public URL of your MCP server (required for OAuth callbacks)\nMCP_SERVER_PUBLIC_URL=https://your-mcp-server.example.com\n\n# Optional OAuth settings\nOAUTH_SERVER_URL=https://oauth.yandex.ru  # Default Yandex OAuth server\n\n# When OAuth is enabled, TRACKER_TOKEN becomes optional\n```\n\n#### Setting Up Yandex OAuth Application\n\n1. Go to [Yandex OAuth](https://oauth.yandex.ru/) and create a new application\n2. Set the callback URL to: `{MCP_SERVER_PUBLIC_URL}/oauth/yandex/callback`\n3. Request the following permissions:\n   - `tracker:read` - Read permissions for Tracker\n   - `tracker:write` - Write permissions for Tracker\n4. Save your Client ID and Client Secret\n\n#### OAuth vs Static Token Authentication\n\n| Feature          | OAuth                          | Static Token               |\n|------------------|--------------------------------|----------------------------|\n| Security         | Dynamic tokens with expiration | Long-lived static tokens   |\n| User Experience  | Interactive login flow         | One-time configuration     |\n| Token Management | Automatic refresh              | Manual rotation            |\n| Access Control   | Per-user authentication        | Shared token               |\n| Setup Complexity | Requires OAuth app setup       | Simple token configuration |\n\n#### OAuth Mode Limitations\n\n- Currently, the OAuth mode requires the MCP server to be publicly accessible for callback URLs\n- OAuth mode is best suited for interactive clients that support web-based authentication flows\n\n#### Using OAuth with MCP Clients\n\nWhen OAuth is enabled, MCP clients will need to:\n1. Support OAuth 2.0 authorization code flow\n2. Handle token refresh when access tokens expire\n3. Store refresh tokens securely for persistent authentication\n\n**Note**: Not all MCP clients currently support OAuth authentication. Check your client's documentation for OAuth compatibility.\n\nExample configuration for Claude Code:\n\n```bash\nclaude mcp add --transport http yandex-tracker https://your-mcp-server.example.com/mcp/ -s user\n```\n\n#### OAuth Data Storage\n\nThe MCP server supports two different storage backends for OAuth data (client registrations, access tokens, refresh tokens, and authorization states):\n\n##### InMemory Store (Default)\n\nThe in-memory store keeps all OAuth data in server memory. This is the default option and requires no additional configuration.\n\n**Characteristics:**\n- **Persistence**: Data is lost when the server restarts\n- **Performance**: Very fast access since data is stored in memory\n- **Scalability**: Limited to single server instance\n- **Setup**: No additional dependencies required\n- **Best for**: Development, testing, or single-instance deployments where losing OAuth sessions on restart is acceptable\n\n**Configuration:**\n```env\nOAUTH_STORE=memory  # Default value, can be omitted\n```\n\n##### Redis Store\n\nThe Redis store provides persistent storage for OAuth data using a Redis database. This ensures OAuth sessions survive server restarts and enables multi-instance deployments.\n\n**Characteristics:**\n- **Persistence**: Data persists across server restarts\n- **Performance**: Fast access with network overhead\n- **Scalability**: Supports multiple server instances sharing the same Redis database\n- **Setup**: Requires Redis server installation and configuration\n- **Best for**: Production deployments, high availability setups, or when OAuth sessions must persist\n\n**Configuration:**\n```env\n# Enable Redis store for OAuth data\nOAUTH_STORE=redis\n\n# Redis connection settings (same as used for tools caching)\nREDIS_ENDPOINT=localhost                  # Default: localhost\nREDIS_PORT=6379                           # Default: 6379\nREDIS_DB=0                                # Default: 0\nREDIS_PASSWORD=your_redis_password        # Optional: Redis password\nREDIS_POOL_MAX_SIZE=10                    # Default: 10\n```\n\n**Storage Behavior:**\n- **Client Information**: Stored persistently\n- **OAuth States**: Stored with TTL (time-to-live) for security\n- **Authorization Codes**: Stored with TTL and automatically cleaned up after use\n- **Access Tokens**: Stored with automatic expiration based on token lifetime\n- **Refresh Tokens**: Stored persistently until revoked\n- **Key Namespacing**: Uses `oauth:*` prefixes to avoid conflicts with other Redis data\n\n**Important Notes:**\n- Both stores use the same Redis connection settings as the tools caching system\n- When using Redis store, ensure your Redis instance is properly secured and accessible\n- The `OAUTH_STORE` setting only affects OAuth data storage; tools caching uses `TOOLS_CACHE_ENABLED`\n- Redis store uses JSON serialization for better cross-language compatibility and debugging\n\n## Authentication\n\nYandex Tracker MCP Server supports multiple authentication methods with a clear priority order. The server will use the first available authentication method based on this hierarchy:\n\n### Authentication Priority Order\n\n1. **Dynamic OAuth Token** (highest priority)\n   - When OAuth is enabled and a user authenticates via OAuth flow\n   - Tokens are dynamically obtained and refreshed per user session\n   - Supports both standard Yandex OAuth and Yandex Cloud federative OAuth\n   - Required env vars: `OAUTH_ENABLED=true`, `OAUTH_CLIENT_ID`, `OAUTH_CLIENT_SECRET`, `MCP_SERVER_PUBLIC_URL`\n   - Additional vars for federative OAuth: `OAUTH_SERVER_URL=https://auth.yandex.cloud/oauth`, `OAUTH_TOKEN_TYPE=Bearer`, `OAUTH_USE_SCOPES=false`\n\n2. **Static OAuth Token**\n   - Traditional OAuth token provided via environment variable\n   - Single token used for all requests\n   - Required env var: `TRACKER_TOKEN` (your OAuth token)\n\n3. **Static IAM Token**\n   - IAM (Identity and Access Management) token for service-to-service authentication\n   - Suitable for automated systems and CI/CD pipelines\n   - Required env var: `TRACKER_IAM_TOKEN` (your IAM token)\n\n4. **Dynamic IAM Token** (lowest priority)\n   - Automatically retrieved using service account credentials\n   - Token is fetched and refreshed automatically\n   - Required env vars: `TRACKER_SA_KEY_ID`, `TRACKER_SA_SERVICE_ACCOUNT_ID`, `TRACKER_SA_PRIVATE_KEY`\n\n### Authentication Scenarios\n\n#### Scenario 1: OAuth with Dynamic Tokens (Recommended for Interactive Use)\n```env\n# Enable OAuth mode\nOAUTH_ENABLED=true\nOAUTH_CLIENT_ID=your_oauth_app_id\nOAUTH_CLIENT_SECRET=your_oauth_app_secret\nMCP_SERVER_PUBLIC_URL=https://your-server.com\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\n#### Scenario 2: Static OAuth Token (Simple Setup)\n```env\n# OAuth token\nTRACKER_TOKEN=your_oauth_token\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\n#### Scenario 3: Static IAM Token\n```env\n# IAM token\nTRACKER_IAM_TOKEN=your_iam_token\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\n#### Scenario 4: Dynamic IAM Token with Service Account\n```env\n# Service account credentials\nTRACKER_SA_KEY_ID=your_key_id\nTRACKER_SA_SERVICE_ACCOUNT_ID=your_service_account_id\nTRACKER_SA_PRIVATE_KEY=your_private_key\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\n#### Scenario 5: Federative OAuth for OIDC Applications (Advanced)\n```env\n# Enable OAuth with Yandex Cloud federation\nOAUTH_ENABLED=true\nOAUTH_SERVER_URL=https://auth.yandex.cloud/oauth\nOAUTH_TOKEN_TYPE=Bearer\nOAUTH_USE_SCOPES=false\nOAUTH_CLIENT_ID=your_oidc_client_id\nOAUTH_CLIENT_SECRET=your_oidc_client_secret\nMCP_SERVER_PUBLIC_URL=https://your-server.com\n\n# Organization ID (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id  # or TRACKER_ORG_ID\n```\n\nThis configuration enables authentication through [Yandex Cloud OIDC applications](https://yandex.cloud/ru/docs/organization/operations/applications/oidc-create), which is required for [federated accounts](https://yandex.cloud/ru/docs/organization/operations/manage-federations) in Yandex Cloud. Federated users authenticate through their organization's identity provider (IdP) and use this OAuth flow to access Yandex Tracker APIs.\n\n### Important Notes\n\n- The server checks authentication methods in the order listed above\n- Only one authentication method will be used at a time\n- For production use, dynamic tokens (OAuth or IAM) are recommended for better security\n- IAM tokens have a shorter lifetime than OAuth tokens and may need more frequent renewal\n- When using service accounts, ensure the account has appropriate permissions for Yandex Tracker\n\n## Configuration\n\n### Environment Variables\n\n```env\n# Authentication (use one of the following methods)\n# Method 1: OAuth Token\nTRACKER_TOKEN=your_yandex_tracker_oauth_token\n\n# Method 2: IAM Token\nTRACKER_IAM_TOKEN=your_iam_token\n\n# Method 3: Service Account (for dynamic IAM token)\nTRACKER_SA_KEY_ID=your_key_id                    # Service account key ID\nTRACKER_SA_SERVICE_ACCOUNT_ID=your_sa_id        # Service account ID\nTRACKER_SA_PRIVATE_KEY=your_private_key          # Service account private key\n\n# Organization Configuration (choose one)\nTRACKER_CLOUD_ORG_ID=your_cloud_org_id    # For Yandex Cloud organizations\nTRACKER_ORG_ID=your_org_id                # For Yandex 360 organizations\n\n# API Configuration (optional)\nTRACKER_API_BASE_URL=https://api.tracker.yandex.net  # Default: https://api.tracker.yandex.net\n\n# Security - Restrict access to specific queues (optional)\nTRACKER_LIMIT_QUEUES=PROJ1,PROJ2,DEV      # Comma-separated queue keys\n\n# Server Configuration\nHOST=0.0.0.0                              # Default: 0.0.0.0\nPORT=8000                                 # Default: 8000\nTRANSPORT=stdio                           # Options: stdio, streamable-http, sse\n\n# Redis connection settings (used for caching and OAuth store)\nREDIS_ENDPOINT=localhost                  # Default: localhost\nREDIS_PORT=6379                           # Default: 6379\nREDIS_DB=0                                # Default: 0\nREDIS_PASSWORD=your_redis_password        # Optional: Redis password\nREDIS_POOL_MAX_SIZE=10                    # Default: 10\n\n# Tools caching configuration (optional)\nTOOLS_CACHE_ENABLED=true                  # Default: false\nTOOLS_CACHE_REDIS_TTL=3600                # Default: 3600 seconds (1 hour)\n\n# OAuth 2.0 Authentication (optional)\nOAUTH_ENABLED=true                        # Default: false\nOAUTH_STORE=redis                         # Options: memory, redis (default: memory)\nOAUTH_SERVER_URL=https://oauth.yandex.ru  # Default: https://oauth.yandex.ru (use https://auth.yandex.cloud/oauth for federation)\nOAUTH_TOKEN_TYPE=<Bearer|OAuth|<empty>>   # Default: <empty> (required to be Bearer for Yandex Cloud federation)\nOAUTH_USE_SCOPES=true                     # Default: true (set to false for Yandex Cloud federation)\nOAUTH_CLIENT_ID=your_oauth_client_id      # Required when OAuth enabled\nOAUTH_CLIENT_SECRET=your_oauth_secret     # Required when OAuth enabled\nMCP_SERVER_PUBLIC_URL=https://your.server.com  # Required when OAuth enabled\nTRACKER_READ_ONLY=true                    # Default: false - Limit OAuth to read-only permissions\n```\n\n## Docker Deployment\n\n### Using Pre-built Image (Recommended)\n\n```bash\n# Using environment file\ndocker run --env-file .env -p 8000:8000 ghcr.io/aikts/yandex-tracker-mcp:latest\n\n# With inline environment variables\ndocker run -e TRACKER_TOKEN=your_token \\\n           -e TRACKER_CLOUD_ORG_ID=your_org_id \\\n           -p 8000:8000 \\\n           ghcr.io/aikts/yandex-tracker-mcp:latest\n```\n\n### Building the Image Locally\n\n```bash\ndocker build -t yandex-tracker-mcp .\n```\n\n### Docker Compose\n\n**Using pre-built image:**\n```yaml\nversion: '3.8'\nservices:\n  mcp-tracker:\n    image: ghcr.io/aikts/yandex-tracker-mcp:latest\n    ports:\n      - \"8000:8000\"\n    environment:\n      - TRACKER_TOKEN=${TRACKER_TOKEN}\n      - TRACKER_CLOUD_ORG_ID=${TRACKER_CLOUD_ORG_ID}\n```\n\n**Building locally:**\n```yaml\nversion: '3.8'\nservices:\n  mcp-tracker:\n    build: .\n    ports:\n      - \"8000:8000\"\n    environment:\n      - TRACKER_TOKEN=${TRACKER_TOKEN}\n      - TRACKER_CLOUD_ORG_ID=${TRACKER_CLOUD_ORG_ID}\n```\n\n### Development Setup\n\n```bash\n# Clone and setup\ngit clone https://github.com/aikts/yandex-tracker-mcp\ncd yandex-tracker-mcp\n\n# Install development dependencies\nuv sync --dev\n\n# Formatting and static checking\nmake\n```\n\n## License\n\nThis project is licensed under the terms specified in the [LICENSE](LICENSE) file.\n\n## Support\n\nFor issues and questions:\n- Review Yandex Tracker API documentation\n- Submit issues at https://github.com/aikts/yandex-tracker-mcp/issues",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "yandex",
        "tracker",
        "service",
        "yandex tracker",
        "server yandex",
        "aikts yandex"
      ],
      "category": "support--service-management"
    },
    "effytech--freshdesk-mcp": {
      "owner": "effytech",
      "name": "freshdesk-mcp",
      "url": "https://github.com/effytech/freshdesk_mcp",
      "imageUrl": "",
      "description": "MCP server that integrates with Freshdesk, enabling AI models to interact with Freshdesk modules and perform various support operations.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "effytech",
        "service",
        "support service",
        "freshdesk mcp",
        "effytech freshdesk"
      ],
      "category": "support--service-management"
    },
    "incentivai--quickchat-ai-mcp": {
      "owner": "incentivai",
      "name": "quickchat-ai-mcp",
      "url": "https://github.com/incentivai/quickchat-ai-mcp",
      "imageUrl": "",
      "description": "Launch your conversational Quickchat AI agent as an MCP to give AI apps real-time access to its Knowledge Base and conversational capabilities.",
      "stars": 20,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-02T22:54:11Z",
      "readme_content": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/incentivai/quickchat-ai-mcp/main/img/background.jpg\"/>\n</p>\n\n# Quickchat AI MCP server\n\nThe [Quickchat AI](https://quickchat.ai) MCP ([Model Context Protocol](https://modelcontextprotocol.io/)) server allows you to let anyone plug in your Quickchat AI Agent into their favourite AI app such as Claude Desktop, Cursor, VS Code, Windsurf and [more](https://modelcontextprotocol.io/clients#feature-support-matrix).\n\n## Quickstart\n1. Create a [Quickchat AI account](https://app.quickchat.ai) and start a 7-day trial of any plan.\n2. Set up your AI's Knowledge Base, capabilities and settings.\n3. Go to the MCP page to activate your MCP. Give it **Name**, **Description** and (optional) **Command**. They are important - AI apps need to understand when to contact your AI, what its capabilities and knowledge are.\n4. That's it! Now you're ready to test your Quickchat AI via any AI app and show it to the world!\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/incentivai/quickchat-ai-mcp/main/img/claude_tool_anatomy.png\" alt=\"Claude tool anatomy\" width=\"600\"/>\n  <br/>\n  <sub>Claude tool anatomy</sub>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/incentivai/quickchat-ai-mcp/main/img/cursor_tool_anatomy.png\" alt=\"Cursor tool anatomy\" width=\"600\"/>\n  <br/>\n  <sub>Cursor tool anatomy</sub>\n</p>\n\n## Useful links\n- Quickstart video [youtube.com/watch?v=JE3dNiyZO8w](https://www.youtube.com/watch?v=JE3dNiyZO8w)\n- Quickstart blog post: [quickchat.ai/post/how-to-launch-your-quickchat-ai-mcp](https://www.quickchat.ai/post/how-to-launch-your-quickchat-ai-mcp)\n- MCP (Model Context Protocol) explained: [quickchat.ai/post/mcp-explained](https://www.quickchat.ai/post/mcp-explained)\n- The Quickchat AI MCP package on PyPI: [pypi.org/project/quickchat-ai-mcp](https://pypi.org/project/quickchat-ai-mcp)\n- The Quickchat AI MCP GitHub repo: [github.com/quickchatai/quickchat-ai-mcp](https://github.com/quickchatai/quickchat-ai-mcp)\n\n## Prerequisite\nInstall `uv` using:\n```commandline\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\nor read more [here](https://docs.astral.sh/uv/getting-started/installation/).\n\n## Test with Claude Desktop\n\n### Configuration\nGo to `Settings > Developer > Edit` Config. Open the _claude_desktop_config.json_ file in a text editor. If you're just starting out, the file is going to look like this:\n\n```JSON\n{\n  \"mcpServers\": {}\n}\n```\n\nThis is where you can define all the MCPs your Claude Desktop has access to. Here is how you add your Quickchat AI MCP:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"< QUICKCHAT AI MCP NAME >\": {\n      \"command\": \"uvx\",\n      \"args\": [\"quickchat-ai-mcp\"],\n      \"env\": {\n        \"SCENARIO_ID\": \"< QUICKCHAT AI SCENARIO ID >\",\n        \"API_KEY\": \"< QUICKCHAT AI API KEY >\"\n      }\n    }\n  }\n}\n```\n\nGo to the `Quickchat AI app > MCP > Integration` to find the above snippet with the values of MCP Name, SCENARIO_ID and API_KEY filled out.\n\n## Test with Cursor\n\n### Configuration\nGo to `Settings > Cursor Settings > MCP > Add new global MCP server` and include the Quickchat AI MCP snippet:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"< QUICKCHAT AI MCP NAME >\": {\n      \"command\": \"uvx\",\n      \"args\": [\"quickchat-ai-mcp\"],\n      \"env\": {\n        \"SCENARIO_ID\": \"< QUICKCHAT AI SCENARIO ID >\",\n        \"API_KEY\": \"< QUICKCHAT AI API KEY >\"\n      }\n    }\n  }\n}\n```\n\nAs before, you can find values for MCP Name, SCENARIO_ID and API_KEY at `Quickchat AI app > MCP > Integration`.\n\n## Test with other AI apps\n\nOther AI apps will most likely require the same configuration but the actual steps to include it in the App itself will be different. We will be expanding this README as we go along.\n\n## Launch your Quickchat AI MCP to the world! \n\n```\n⛔️ Do not publish your Quickchat API key to your users!\n```\n\nOnce you're ready to let other users connect your Quickchat AI MCP to their AI apps, share configuration snippet with them! However, you need to make sure they can use your Quickchat AI MCP **without your Quickchat API key**. Here is how to do that:\n1. On the Quickchat App MCP page, turn the **Require API key** toggle **OFF**.\n2. Share the configuration snippet _without the API key_:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"< QUICKCHAT AI MCP NAME >\": {\n      \"command\": \"uvx\",\n      \"args\": [\"quickchat-ai-mcp\"],\n      \"env\": {\n        \"SCENARIO_ID\": \"< QUICKCHAT AI SCENARIO ID >\"\n      }\n    }\n  }\n}\n```\n---\n\n## Cool features\n- You can control all aspects of your MCP from the Quickchat AI dashboard. _One click and your change is deployed_. That includes the MCP name and description - all your users need to do is refresh their MCP connection.\n- View all conversations in the Quickchat Inbox. Remember: those won't be the exact messages your users send to their AI app but rather the transcript of the AI <> AI interaction between their AI app and your Quickchat AI. 🤯\n- Unlike most MCP implementations, this isn't a static tool handed to an AI. It's an open-ended way to send messages to Quickchat AI Agents you create. 🙌 \n\n---\n\n## Running from source\n\n### Debugging with the [MCP inspector](https://modelcontextprotocol.io/docs/tools/inspector)\n\n```commandline\nuv run mcp dev src/__main__.py\n```\n\n### Debugging with Claude Desktop, Cursor or other AI apps\n\nUse the following JSON configuration:\n\n```JSON\n{\n  \"mcpServers\": {\n    \"< QUICKCHAT AI MCP NAME >\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"requests\",\n        \"mcp\",\n        \"run\",\n        \"< YOUR PATH>/quickchat-ai-mcp/src/__main__.py\"\n      ],\n      \"env\": {\n        \"SCENARIO_ID\": \"< QUICKCHAT AI SCENARIO ID >\",\n        \"API_KEY\": \"< QUICKCHAT AI API KEY >\"\n      }\n    }\n  }\n}\n```\n\n### Testing\n\nMake sure your code is properly formatted and all tests are passing:\n\n```commandline\nruff check --fix\nruff format\nuv run pytest\n```\n\n## GitHub Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=quickchatai/quickchat-ai-mcp&type=Date)](https://www.star-history.com/#quickchatai/quickchat-ai-mcp&Date)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "quickchat",
        "mcp",
        "ai",
        "quickchat ai",
        "incentivai quickchat",
        "mcp ai"
      ],
      "category": "support--service-management"
    },
    "nguyenvanduocit--jira-mcp": {
      "owner": "nguyenvanduocit",
      "name": "jira-mcp",
      "url": "https://github.com/nguyenvanduocit/jira-mcp",
      "imageUrl": "",
      "description": "A Go-based MCP connector for Jira that enables AI assistants like Claude to interact with Atlassian Jira. This tool provides a seamless interface for AI models to perform common Jira operations including issue management, sprint planning, and workflow transitions.",
      "stars": 63,
      "forks": 17,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-10-02T15:36:25Z",
      "readme_content": "## Jira MCP\n\nControl Jira from Cursor/Claude. Create/update issues, manage sprints and versions, add comments/worklogs, and run transitions from your editor.\n\n### Capabilities\n- **Issues**: get/create/update, child issues, JQL search, transitions\n- **Sprints**: list sprints, get active sprint, move up to 50 issues\n- **Collaboration**: comments, worklogs, related issues (links)\n- **Versions**: list and inspect released/unreleased versions\n- **Output**: compact text formatted for AI tools\n\n## Quick start\n\n### 1) Get an API token\nCreate one at `https://id.atlassian.com/manage-profile/security/api-tokens`.\n\n### 2) Add to Cursor\nUse Docker or a local binary (STDIO; no ports needed).\n\n#### Docker\n```json\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"--rm\", \"-i\",\n        \"-e\", \"ATLASSIAN_HOST=https://your-company.atlassian.net\",\n        \"-e\", \"ATLASSIAN_EMAIL=your-email@company.com\",\n        \"-e\", \"ATLASSIAN_TOKEN=your-api-token\",\n        \"ghcr.io/nguyenvanduocit/jira-mcp:latest\"\n      ]\n    }\n  }\n}\n```\n\n#### Binary\n```json\n{\n  \"mcpServers\": {\n    \"jira\": {\n      \"command\": \"/usr/local/bin/jira-mcp\",\n      \"env\": {\n        \"ATLASSIAN_HOST\": \"https://your-company.atlassian.net\",\n        \"ATLASSIAN_EMAIL\": \"your-email@company.com\",\n        \"ATLASSIAN_TOKEN\": \"your-api-token\"\n      }\n    }\n  }\n}\n```\n\n### 3) Try it in Cursor\n- “Show my issues assigned to me”\n- “What’s in the current sprint for ABC?”\n- “Create a bug in ABC: Login fails on Safari”\n\n## Configuration\n- **ATLASSIAN_HOST**: `https://your-company.atlassian.net`\n- **ATLASSIAN_EMAIL**: your Atlassian email\n- **ATLASSIAN_TOKEN**: API token\n\nOptional `.env` (if running locally):\n```bash\nATLASSIAN_HOST=https://your-company.atlassian.net\nATLASSIAN_EMAIL=your-email@company.com\nATLASSIAN_TOKEN=your-api-token\n```\n\nHTTP mode (optional, for debugging):\n```bash\njira-mcp -env .env -http_port 3000\n```\nCursor config (HTTP mode):\n```json\n{ \"mcpServers\": { \"jira\": { \"url\": \"http://localhost:3000/mcp\" } } }\n```\n\n## Deeper docs\n- API and architecture: see `docs/` → [Docs index](docs/README.md), [API reference](docs/API_REFERENCE.md)\n\n## License\nMIT — see `LICENSE`.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jira",
        "service",
        "support",
        "jira mcp",
        "atlassian jira",
        "jira tool"
      ],
      "category": "support--service-management"
    },
    "sooperset--mcp-atlassian": {
      "owner": "sooperset",
      "name": "mcp-atlassian",
      "url": "https://github.com/sooperset/mcp-atlassian",
      "imageUrl": "",
      "description": "MCP server for Atlassian products (Confluence and Jira). Supports Confluence Cloud, Jira Cloud, and Jira Server/Data Center. Provides comprehensive tools for searching, reading, creating, and managing content across Atlassian workspaces.",
      "stars": 3230,
      "forks": 641,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T08:04:18Z",
      "readme_content": "# MCP Atlassian\n\n![PyPI Version](https://img.shields.io/pypi/v/mcp-atlassian)\n![PyPI - Downloads](https://img.shields.io/pypi/dm/mcp-atlassian)\n![PePy - Total Downloads](https://static.pepy.tech/personalized-badge/mcp-atlassian?period=total&units=international_system&left_color=grey&right_color=blue&left_text=Total%20Downloads)\n[![Run Tests](https://github.com/sooperset/mcp-atlassian/actions/workflows/tests.yml/badge.svg)](https://github.com/sooperset/mcp-atlassian/actions/workflows/tests.yml)\n![License](https://img.shields.io/github/license/sooperset/mcp-atlassian)\n\nModel Context Protocol (MCP) server for Atlassian products (Confluence and Jira). This integration supports both Confluence & Jira Cloud and Server/Data Center deployments.\n\n## Example Usage\n\nAsk your AI assistant to:\n\n- **📝 Automatic Jira Updates** - \"Update Jira from our meeting notes\"\n- **🔍 AI-Powered Confluence Search** - \"Find our OKR guide in Confluence and summarize it\"\n- **🐛 Smart Jira Issue Filtering** - \"Show me urgent bugs in PROJ project from last week\"\n- **📄 Content Creation & Management** - \"Create a tech design doc for XYZ feature\"\n\n### Feature Demo\n\nhttps://github.com/user-attachments/assets/35303504-14c6-4ae4-913b-7c25ea511c3e\n\n<details> <summary>Confluence Demo</summary>\n\nhttps://github.com/user-attachments/assets/7fe9c488-ad0c-4876-9b54-120b666bb785\n\n</details>\n\n### Compatibility\n\n| Product        | Deployment Type    | Support Status              |\n|----------------|--------------------|-----------------------------|\n| **Confluence** | Cloud              | ✅ Fully supported           |\n| **Confluence** | Server/Data Center | ✅ Supported (version 6.0+)  |\n| **Jira**       | Cloud              | ✅ Fully supported           |\n| **Jira**       | Server/Data Center | ✅ Supported (version 8.14+) |\n\n## Quick Start Guide\n\n### 🔐 1. Authentication Setup\n\nMCP Atlassian supports three authentication methods:\n\n#### A. API Token Authentication (Cloud) - **Recommended**\n\n1. Go to https://id.atlassian.com/manage-profile/security/api-tokens\n2. Click **Create API token**, name it\n3. Copy the token immediately\n\n#### B. Personal Access Token (Server/Data Center)\n\n1. Go to your profile (avatar) → **Profile** → **Personal Access Tokens**\n2. Click **Create token**, name it, set expiry\n3. Copy the token immediately\n\n#### C. OAuth 2.0 Authentication (Cloud) - **Advanced**\n\n> [!NOTE]\n> OAuth 2.0 is more complex to set up but provides enhanced security features. For most users, API Token authentication (Method A) is simpler and sufficient.\n\n1. Go to [Atlassian Developer Console](https://developer.atlassian.com/console/myapps/)\n2. Create an \"OAuth 2.0 (3LO) integration\" app\n3. Configure **Permissions** (scopes) for Jira/Confluence\n4. Set **Callback URL** (e.g., `http://localhost:8080/callback`)\n5. Run setup wizard:\n   ```bash\n   docker run --rm -i \\\n     -p 8080:8080 \\\n     -v \"${HOME}/.mcp-atlassian:/home/app/.mcp-atlassian\" \\\n     ghcr.io/sooperset/mcp-atlassian:latest --oauth-setup -v\n   ```\n6. Follow prompts for `Client ID`, `Secret`, `URI`, and `Scope`\n7. Complete browser authorization\n8. Add obtained credentials to `.env` or IDE config:\n   - `ATLASSIAN_OAUTH_CLOUD_ID` (from wizard)\n   - `ATLASSIAN_OAUTH_CLIENT_ID`\n   - `ATLASSIAN_OAUTH_CLIENT_SECRET`\n   - `ATLASSIAN_OAUTH_REDIRECT_URI`\n   - `ATLASSIAN_OAUTH_SCOPE`\n\n> [!IMPORTANT]\n> For the standard OAuth flow described above, include `offline_access` in your scope (e.g., `read:jira-work write:jira-work offline_access`). This allows the server to refresh the access token automatically.\n\n<details>\n<summary>Alternative: Using a Pre-existing OAuth Access Token (BYOT)</summary>\n\nIf you are running mcp-atlassian part of a larger system that manages Atlassian OAuth 2.0 access tokens externally (e.g., through a central identity provider or another application), you can provide an access token directly to this MCP server. This method bypasses the interactive setup wizard and the server's internal token management (including refresh capabilities).\n\n**Requirements:**\n- A valid Atlassian OAuth 2.0 Access Token with the necessary scopes for the intended operations.\n- The corresponding `ATLASSIAN_OAUTH_CLOUD_ID` for your Atlassian instance.\n\n**Configuration:**\nTo use this method, set the following environment variables (or use the corresponding command-line flags when starting the server):\n- `ATLASSIAN_OAUTH_CLOUD_ID`: Your Atlassian Cloud ID. (CLI: `--oauth-cloud-id`)\n- `ATLASSIAN_OAUTH_ACCESS_TOKEN`: Your pre-existing OAuth 2.0 access token. (CLI: `--oauth-access-token`)\n\n**Important Considerations for BYOT:**\n- **Token Lifecycle Management:** When using BYOT, the MCP server **does not** handle token refresh. The responsibility for obtaining, refreshing (before expiry), and revoking the access token lies entirely with you or the external system providing the token.\n- **Unused Variables:** The standard OAuth client variables (`ATLASSIAN_OAUTH_CLIENT_ID`, `ATLASSIAN_OAUTH_CLIENT_SECRET`, `ATLASSIAN_OAUTH_REDIRECT_URI`, `ATLASSIAN_OAUTH_SCOPE`) are **not** used and can be omitted when configuring for BYOT.\n- **No Setup Wizard:** The `--oauth-setup` wizard is not applicable and should not be used for this approach.\n- **No Token Cache Volume:** The Docker volume mount for token storage (e.g., `-v \"${HOME}/.mcp-atlassian:/home/app/.mcp-atlassian\"`) is also not necessary if you are exclusively using the BYOT method, as no tokens are stored or managed by this server.\n- **Scope:** The provided access token must already have the necessary permissions (scopes) for the Jira/Confluence operations you intend to perform.\n\nThis option is useful in scenarios where OAuth credential management is centralized or handled by other infrastructure components.\n</details>\n\n> [!TIP]\n> **Multi-Cloud OAuth Support**: If you're building a multi-tenant application where users provide their own OAuth tokens, see the [Multi-Cloud OAuth Support](#multi-cloud-oauth-support) section for minimal configuration setup.\n\n### 📦 2. Installation\n\nMCP Atlassian is distributed as a Docker image. This is the recommended way to run the server, especially for IDE integration. Ensure you have Docker installed.\n\n```bash\n# Pull Pre-built Image\ndocker pull ghcr.io/sooperset/mcp-atlassian:latest\n```\n\n## 🛠️ IDE Integration\n\nMCP Atlassian is designed to be used with AI assistants through IDE integration.\n\n> [!TIP]\n> **For Claude Desktop**: Locate and edit the configuration file directly:\n> - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n> - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n> - **Linux**: `~/.config/Claude/claude_desktop_config.json`\n>\n> **For Cursor**: Open Settings → MCP → + Add new global MCP server\n\n### ⚙️ Configuration Methods\n\nThere are two main approaches to configure the Docker container:\n\n1. **Passing Variables Directly** (shown in examples below)\n2. **Using an Environment File** with `--env-file` flag (shown in collapsible sections)\n\n> [!NOTE]\n> Common environment variables include:\n>\n> - `CONFLUENCE_SPACES_FILTER`: Filter by space keys (e.g., \"DEV,TEAM,DOC\")\n> - `JIRA_PROJECTS_FILTER`: Filter by project keys (e.g., \"PROJ,DEV,SUPPORT\")\n> - `READ_ONLY_MODE`: Set to \"true\" to disable write operations\n> - `MCP_VERBOSE`: Set to \"true\" for more detailed logging\n> - `MCP_LOGGING_STDOUT`: Set to \"true\" to log to stdout instead of stderr\n> - `ENABLED_TOOLS`: Comma-separated list of tool names to enable (e.g., \"confluence_search,jira_get_issue\")\n>\n> See the [.env.example](https://github.com/sooperset/mcp-atlassian/blob/main/.env.example) file for all available options.\n\n\n### 📝 Configuration Examples\n\n**Method 1 (Passing Variables Directly):**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_USERNAME\",\n        \"-e\", \"CONFLUENCE_API_TOKEN\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_USERNAME\",\n        \"-e\", \"JIRA_API_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://your-company.atlassian.net/wiki\",\n        \"CONFLUENCE_USERNAME\": \"your.email@company.com\",\n        \"CONFLUENCE_API_TOKEN\": \"your_confluence_api_token\",\n        \"JIRA_URL\": \"https://your-company.atlassian.net\",\n        \"JIRA_USERNAME\": \"your.email@company.com\",\n        \"JIRA_API_TOKEN\": \"your_jira_api_token\"\n      }\n    }\n  }\n}\n```\n\n<details>\n<summary>Alternative: Using Environment File</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"--env-file\",\n        \"/path/to/your/mcp-atlassian.env\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ]\n    }\n  }\n}\n```\n</details>\n\n<details>\n<summary>Server/Data Center Configuration</summary>\n\nFor Server/Data Center deployments, use direct variable passing:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_PERSONAL_TOKEN\",\n        \"-e\", \"CONFLUENCE_SSL_VERIFY\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_PERSONAL_TOKEN\",\n        \"-e\", \"JIRA_SSL_VERIFY\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://confluence.your-company.com\",\n        \"CONFLUENCE_PERSONAL_TOKEN\": \"your_confluence_pat\",\n        \"CONFLUENCE_SSL_VERIFY\": \"false\",\n        \"JIRA_URL\": \"https://jira.your-company.com\",\n        \"JIRA_PERSONAL_TOKEN\": \"your_jira_pat\",\n        \"JIRA_SSL_VERIFY\": \"false\"\n      }\n    }\n  }\n}\n```\n\n> [!NOTE]\n> Set `CONFLUENCE_SSL_VERIFY` and `JIRA_SSL_VERIFY` to \"false\" only if you have self-signed certificates.\n\n</details>\n\n<details>\n<summary>OAuth 2.0 Configuration (Cloud Only)</summary>\n<a name=\"oauth-20-configuration-example-cloud-only\"></a>\n\nThese examples show how to configure `mcp-atlassian` in your IDE (like Cursor or Claude Desktop) when using OAuth 2.0 for Atlassian Cloud.\n\n**Example for Standard OAuth 2.0 Flow (using Setup Wizard):**\n\nThis configuration is for when you use the server's built-in OAuth client and have completed the [OAuth setup wizard](#c-oauth-20-authentication-cloud---advanced).\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-v\", \"<path_to_your_home>/.mcp-atlassian:/home/app/.mcp-atlassian\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"ATLASSIAN_OAUTH_CLIENT_ID\",\n        \"-e\", \"ATLASSIAN_OAUTH_CLIENT_SECRET\",\n        \"-e\", \"ATLASSIAN_OAUTH_REDIRECT_URI\",\n        \"-e\", \"ATLASSIAN_OAUTH_SCOPE\",\n        \"-e\", \"ATLASSIAN_OAUTH_CLOUD_ID\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"JIRA_URL\": \"https://your-company.atlassian.net\",\n        \"CONFLUENCE_URL\": \"https://your-company.atlassian.net/wiki\",\n        \"ATLASSIAN_OAUTH_CLIENT_ID\": \"YOUR_OAUTH_APP_CLIENT_ID\",\n        \"ATLASSIAN_OAUTH_CLIENT_SECRET\": \"YOUR_OAUTH_APP_CLIENT_SECRET\",\n        \"ATLASSIAN_OAUTH_REDIRECT_URI\": \"http://localhost:8080/callback\",\n        \"ATLASSIAN_OAUTH_SCOPE\": \"read:jira-work write:jira-work read:confluence-content.all write:confluence-content offline_access\",\n        \"ATLASSIAN_OAUTH_CLOUD_ID\": \"YOUR_CLOUD_ID_FROM_SETUP_WIZARD\"\n      }\n    }\n  }\n}\n```\n\n> [!NOTE]\n> - For the Standard Flow:\n>   - `ATLASSIAN_OAUTH_CLOUD_ID` is obtained from the `--oauth-setup` wizard output or is known for your instance.\n>   - Other `ATLASSIAN_OAUTH_*` client variables are from your OAuth app in the Atlassian Developer Console.\n>   - `JIRA_URL` and `CONFLUENCE_URL` for your Cloud instances are always required.\n>   - The volume mount (`-v .../.mcp-atlassian:/home/app/.mcp-atlassian`) is crucial for persisting the OAuth tokens obtained by the wizard, enabling automatic refresh.\n\n**Example for Pre-existing Access Token (BYOT - Bring Your Own Token):**\n\nThis configuration is for when you are providing your own externally managed OAuth 2.0 access token.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"ATLASSIAN_OAUTH_CLOUD_ID\",\n        \"-e\", \"ATLASSIAN_OAUTH_ACCESS_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"JIRA_URL\": \"https://your-company.atlassian.net\",\n        \"CONFLUENCE_URL\": \"https://your-company.atlassian.net/wiki\",\n        \"ATLASSIAN_OAUTH_CLOUD_ID\": \"YOUR_KNOWN_CLOUD_ID\",\n        \"ATLASSIAN_OAUTH_ACCESS_TOKEN\": \"YOUR_PRE_EXISTING_OAUTH_ACCESS_TOKEN\"\n      }\n    }\n  }\n}\n```\n\n> [!NOTE]\n> - For the BYOT Method:\n>   - You primarily need `JIRA_URL`, `CONFLUENCE_URL`, `ATLASSIAN_OAUTH_CLOUD_ID`, and `ATLASSIAN_OAUTH_ACCESS_TOKEN`.\n>   - Standard OAuth client variables (`ATLASSIAN_OAUTH_CLIENT_ID`, `CLIENT_SECRET`, `REDIRECT_URI`, `SCOPE`) are **not** used.\n>   - Token lifecycle (e.g., refreshing the token before it expires and restarting mcp-atlassian) is your responsibility, as the server will not refresh BYOT tokens.\n\n</details>\n\n<details>\n<summary>Proxy Configuration</summary>\n\nMCP Atlassian supports routing API requests through standard HTTP/HTTPS/SOCKS proxies. Configure using environment variables:\n\n- Supports standard `HTTP_PROXY`, `HTTPS_PROXY`, `NO_PROXY`, `SOCKS_PROXY`.\n- Service-specific overrides are available (e.g., `JIRA_HTTPS_PROXY`, `CONFLUENCE_NO_PROXY`).\n- Service-specific variables override global ones for that service.\n\nAdd the relevant proxy variables to the `args` (using `-e`) and `env` sections of your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"... existing Confluence/Jira vars\",\n        \"-e\", \"HTTP_PROXY\",\n        \"-e\", \"HTTPS_PROXY\",\n        \"-e\", \"NO_PROXY\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"... existing Confluence/Jira vars\": \"...\",\n        \"HTTP_PROXY\": \"http://proxy.internal:8080\",\n        \"HTTPS_PROXY\": \"http://proxy.internal:8080\",\n        \"NO_PROXY\": \"localhost,.your-company.com\"\n      }\n    }\n  }\n}\n```\n\nCredentials in proxy URLs are masked in logs. If you set `NO_PROXY`, it will be respected for requests to matching hosts.\n\n</details>\n<details>\n<summary>Custom HTTP Headers Configuration</summary>\n\nMCP Atlassian supports adding custom HTTP headers to all API requests. This feature is particularly useful in corporate environments where additional headers are required for security, authentication, or routing purposes.\n\nCustom headers are configured using environment variables with comma-separated key=value pairs:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_USERNAME\",\n        \"-e\", \"CONFLUENCE_API_TOKEN\",\n        \"-e\", \"CONFLUENCE_CUSTOM_HEADERS\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_USERNAME\",\n        \"-e\", \"JIRA_API_TOKEN\",\n        \"-e\", \"JIRA_CUSTOM_HEADERS\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://your-company.atlassian.net/wiki\",\n        \"CONFLUENCE_USERNAME\": \"your.email@company.com\",\n        \"CONFLUENCE_API_TOKEN\": \"your_confluence_api_token\",\n        \"CONFLUENCE_CUSTOM_HEADERS\": \"X-Confluence-Service=mcp-integration,X-Custom-Auth=confluence-token,X-ALB-Token=secret-token\",\n        \"JIRA_URL\": \"https://your-company.atlassian.net\",\n        \"JIRA_USERNAME\": \"your.email@company.com\",\n        \"JIRA_API_TOKEN\": \"your_jira_api_token\",\n        \"JIRA_CUSTOM_HEADERS\": \"X-Forwarded-User=service-account,X-Company-Service=mcp-atlassian,X-Jira-Client=mcp-integration\"\n      }\n    }\n  }\n}\n```\n\n**Security Considerations:**\n\n- Custom header values are masked in debug logs to protect sensitive information\n- Ensure custom headers don't conflict with standard HTTP or Atlassian API headers\n- Avoid including sensitive authentication tokens in custom headers if already using basic auth or OAuth\n- Headers are sent with every API request - verify they don't interfere with API functionality\n\n</details>\n\n\n<details>\n<summary>Multi-Cloud OAuth Support</summary>\n\nMCP Atlassian supports multi-cloud OAuth scenarios where each user connects to their own Atlassian cloud instance. This is useful for multi-tenant applications, chatbots, or services where users provide their own OAuth tokens.\n\n**Minimal OAuth Configuration:**\n\n1. Enable minimal OAuth mode (no client credentials required):\n   ```bash\n   docker run -e ATLASSIAN_OAUTH_ENABLE=true -p 9000:9000 \\\n     ghcr.io/sooperset/mcp-atlassian:latest \\\n     --transport streamable-http --port 9000\n   ```\n\n2. Users provide authentication via HTTP headers:\n   - `Authorization: Bearer <user_oauth_token>`\n   - `X-Atlassian-Cloud-Id: <user_cloud_id>`\n\n**Example Integration (Python):**\n```python\nimport asyncio\nfrom mcp.client.streamable_http import streamablehttp_client\nfrom mcp import ClientSession\n\nuser_token = \"user-specific-oauth-token\"\nuser_cloud_id = \"user-specific-cloud-id\"\n\nasync def main():\n    # Connect to streamable HTTP server with custom headers\n    async with streamablehttp_client(\n        \"http://localhost:9000/mcp\",\n        headers={\n            \"Authorization\": f\"Bearer {user_token}\",\n            \"X-Atlassian-Cloud-Id\": user_cloud_id\n        }\n    ) as (read_stream, write_stream, _):\n        # Create a session using the client streams\n        async with ClientSession(read_stream, write_stream) as session:\n            # Initialize the connection\n            await session.initialize()\n\n            # Example: Get a Jira issue\n            result = await session.call_tool(\n                \"jira_get_issue\",\n                {\"issue_key\": \"PROJ-123\"}\n            )\n            print(result)\n\nasyncio.run(main())\n```\n\n**Configuration Notes:**\n- Each request can use a different cloud instance via the `X-Atlassian-Cloud-Id` header\n- User tokens are isolated per request - no cross-tenant data leakage\n- Falls back to global `ATLASSIAN_OAUTH_CLOUD_ID` if header not provided\n- Compatible with standard OAuth 2.0 bearer token authentication\n\n</details>\n\n<details> <summary>Single Service Configurations</summary>\n\n**For Confluence Cloud only:**\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_USERNAME\",\n        \"-e\", \"CONFLUENCE_API_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://your-company.atlassian.net/wiki\",\n        \"CONFLUENCE_USERNAME\": \"your.email@company.com\",\n        \"CONFLUENCE_API_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\n\nFor Confluence Server/DC, use:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"CONFLUENCE_URL\",\n        \"-e\", \"CONFLUENCE_PERSONAL_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"CONFLUENCE_URL\": \"https://confluence.your-company.com\",\n        \"CONFLUENCE_PERSONAL_TOKEN\": \"your_personal_token\"\n      }\n    }\n  }\n}\n```\n\n**For Jira Cloud only:**\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_USERNAME\",\n        \"-e\", \"JIRA_API_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"JIRA_URL\": \"https://your-company.atlassian.net\",\n        \"JIRA_USERNAME\": \"your.email@company.com\",\n        \"JIRA_API_TOKEN\": \"your_api_token\"\n      }\n    }\n  }\n}\n```\n\nFor Jira Server/DC, use:\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"JIRA_URL\",\n        \"-e\", \"JIRA_PERSONAL_TOKEN\",\n        \"ghcr.io/sooperset/mcp-atlassian:latest\"\n      ],\n      \"env\": {\n        \"JIRA_URL\": \"https://jira.your-company.com\",\n        \"JIRA_PERSONAL_TOKEN\": \"your_personal_token\"\n      }\n    }\n  }\n}\n```\n\n</details>\n\n### 👥 HTTP Transport Configuration\n\nInstead of using `stdio`, you can run the server as a persistent HTTP service using either:\n- `sse` (Server-Sent Events) transport at `/sse` endpoint\n- `streamable-http` transport at `/mcp` endpoint\n\nBoth transport types support single-user and multi-user authentication:\n\n**Authentication Options:**\n- **Single-User**: Use server-level authentication configured via environment variables\n- **Multi-User**: Each user provides their own authentication:\n  - Cloud: OAuth 2.0 Bearer tokens\n  - Server/Data Center: Personal Access Tokens (PATs)\n\n<details> <summary>Basic HTTP Transport Setup</summary>\n\n1. Start the server with your chosen transport:\n\n    ```bash\n    # For SSE transport\n    docker run --rm -p 9000:9000 \\\n      --env-file /path/to/your/.env \\\n      ghcr.io/sooperset/mcp-atlassian:latest \\\n      --transport sse --port 9000 -vv\n\n    # OR for streamable-http transport\n    docker run --rm -p 9000:9000 \\\n      --env-file /path/to/your/.env \\\n      ghcr.io/sooperset/mcp-atlassian:latest \\\n      --transport streamable-http --port 9000 -vv\n    ```\n\n2. Configure your IDE (single-user example):\n\n    **SSE Transport Example:**\n    ```json\n    {\n      \"mcpServers\": {\n        \"mcp-atlassian-http\": {\n          \"url\": \"http://localhost:9000/sse\"\n        }\n      }\n    }\n    ```\n\n    **Streamable-HTTP Transport Example:**\n    ```json\n    {\n      \"mcpServers\": {\n        \"mcp-atlassian-service\": {\n          \"url\": \"http://localhost:9000/mcp\"\n        }\n      }\n    }\n    ```\n</details>\n\n<details> <summary>Multi-User Authentication Setup</summary>\n\nHere's a complete example of setting up multi-user authentication with streamable-HTTP transport:\n\n1. First, run the OAuth setup wizard to configure the server's OAuth credentials:\n   ```bash\n   docker run --rm -i \\\n     -p 8080:8080 \\\n     -v \"${HOME}/.mcp-atlassian:/home/app/.mcp-atlassian\" \\\n     ghcr.io/sooperset/mcp-atlassian:latest --oauth-setup -v\n   ```\n\n2. Start the server with streamable-HTTP transport:\n   ```bash\n   docker run --rm -p 9000:9000 \\\n     --env-file /path/to/your/.env \\\n     ghcr.io/sooperset/mcp-atlassian:latest \\\n     --transport streamable-http --port 9000 -vv\n   ```\n\n3. Configure your IDE's MCP settings:\n\n**Choose the appropriate Authorization method for your Atlassian deployment:**\n\n- **Cloud (OAuth 2.0):** Use this if your organization is on Atlassian Cloud and you have an OAuth access token for each user.\n- **Server/Data Center (PAT):** Use this if you are on Atlassian Server or Data Center and each user has a Personal Access Token (PAT).\n\n**Cloud (OAuth 2.0) Example:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian-service\": {\n      \"url\": \"http://localhost:9000/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer <USER_OAUTH_ACCESS_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n**Server/Data Center (PAT) Example:**\n```json\n{\n  \"mcpServers\": {\n    \"mcp-atlassian-service\": {\n      \"url\": \"http://localhost:9000/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Token <USER_PERSONAL_ACCESS_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n4. Required environment variables in `.env`:\n   ```bash\n   JIRA_URL=https://your-company.atlassian.net\n   CONFLUENCE_URL=https://your-company.atlassian.net/wiki\n   ATLASSIAN_OAUTH_CLIENT_ID=your_oauth_app_client_id\n   ATLASSIAN_OAUTH_CLIENT_SECRET=your_oauth_app_client_secret\n   ATLASSIAN_OAUTH_REDIRECT_URI=http://localhost:8080/callback\n   ATLASSIAN_OAUTH_SCOPE=read:jira-work write:jira-work read:confluence-content.all write:confluence-content offline_access\n   ATLASSIAN_OAUTH_CLOUD_ID=your_cloud_id_from_setup_wizard\n   ```\n\n> [!NOTE]\n> - The server should have its own fallback authentication configured (e.g., via environment variables for API token, PAT, or its own OAuth setup using --oauth-setup). This is used if a request doesn't include user-specific authentication.\n> - **OAuth**: Each user needs their own OAuth access token from your Atlassian OAuth app.\n> - **PAT**: Each user provides their own Personal Access Token.\n> - **Multi-Cloud**: For OAuth users, optionally include `X-Atlassian-Cloud-Id` header to specify which Atlassian cloud instance to use\n> - The server will use the user's token for API calls when provided, falling back to server auth if not\n> - User tokens should have appropriate scopes for their needed operations\n\n</details>\n\n## Tools\n\n### Key Tools\n\n#### Jira Tools\n\n- `jira_get_issue`: Get details of a specific issue\n- `jira_search`: Search issues using JQL\n- `jira_create_issue`: Create a new issue\n- `jira_update_issue`: Update an existing issue\n- `jira_transition_issue`: Transition an issue to a new status\n- `jira_add_comment`: Add a comment to an issue\n\n#### Confluence Tools\n\n- `confluence_search`: Search Confluence content using CQL\n- `confluence_get_page`: Get content of a specific page\n- `confluence_create_page`: Create a new page\n- `confluence_update_page`: Update an existing page\n\n<details> <summary>View All Tools</summary>\n\n| Operation | Jira Tools                          | Confluence Tools               |\n|-----------|-------------------------------------|--------------------------------|\n| **Read**  | `jira_search`                       | `confluence_search`            |\n|           | `jira_get_issue`                    | `confluence_get_page`          |\n|           | `jira_get_all_projects`             | `confluence_get_page_children` |\n|           | `jira_get_project_issues`           | `confluence_get_comments`      |\n|           | `jira_get_worklog`                  | `confluence_get_labels`        |\n|           | `jira_get_transitions`              | `confluence_search_user`       |\n|           | `jira_search_fields`                |                                |\n|           | `jira_get_agile_boards`             |                                |\n|           | `jira_get_board_issues`             |                                |\n|           | `jira_get_sprints_from_board`       |                                |\n|           | `jira_get_sprint_issues`            |                                |\n|           | `jira_get_issue_link_types`         |                                |\n|           | `jira_batch_get_changelogs`*        |                                |\n|           | `jira_get_user_profile`             |                                |\n|           | `jira_download_attachments`         |                                |\n|           | `jira_get_project_versions`         |                                |\n| **Write** | `jira_create_issue`                 | `confluence_create_page`       |\n|           | `jira_update_issue`                 | `confluence_update_page`       |\n|           | `jira_delete_issue`                 | `confluence_delete_page`       |\n|           | `jira_batch_create_issues`          | `confluence_add_label`         |\n|           | `jira_add_comment`                  | `confluence_add_comment`       |\n|           | `jira_transition_issue`             |                                |\n|           | `jira_add_worklog`                  |                                |\n|           | `jira_link_to_epic`                 |                                |\n|           | `jira_create_sprint`                |                                |\n|           | `jira_update_sprint`                |                                |\n|           | `jira_create_issue_link`            |                                |\n|           | `jira_remove_issue_link`            |                                |\n|           | `jira_create_version`               |                                |\n|           | `jira_batch_create_versions`        |                                |\n\n</details>\n\n*Tool only available on Jira Cloud\n\n</details>\n\n### Tool Filtering and Access Control\n\nThe server provides two ways to control tool access:\n\n1. **Tool Filtering**: Use `--enabled-tools` flag or `ENABLED_TOOLS` environment variable to specify which tools should be available:\n\n   ```bash\n   # Via environment variable\n   ENABLED_TOOLS=\"confluence_search,jira_get_issue,jira_search\"\n\n   # Or via command line flag\n   docker run ... --enabled-tools \"confluence_search,jira_get_issue,jira_search\" ...\n   ```\n\n2. **Read/Write Control**: Tools are categorized as read or write operations. When `READ_ONLY_MODE` is enabled, only read operations are available regardless of `ENABLED_TOOLS` setting.\n\n## Troubleshooting & Debugging\n\n### Common Issues\n\n- **Authentication Failures**:\n    - For Cloud: Check your API tokens (not your account password)\n    - For Server/Data Center: Verify your personal access token is valid and not expired\n    - For older Confluence servers: Some older versions require basic authentication with `CONFLUENCE_USERNAME` and `CONFLUENCE_API_TOKEN` (where token is your password)\n- **SSL Certificate Issues**: If using Server/Data Center and encounter SSL errors, set `CONFLUENCE_SSL_VERIFY=false` or `JIRA_SSL_VERIFY=false`\n- **Permission Errors**: Ensure your Atlassian account has sufficient permissions to access the spaces/projects\n- **Custom Headers Issues**: See the [\"Debugging Custom Headers\"](#debugging-custom-headers) section below to analyze and resolve issues with custom headers\n\n### Debugging Custom Headers\n\nTo verify custom headers are being applied correctly:\n\n1. **Enable Debug Logging**: Set `MCP_VERY_VERBOSE=true` to see detailed request logs\n   ```bash\n   # In your .env file or environment\n   MCP_VERY_VERBOSE=true\n   MCP_LOGGING_STDOUT=true\n   ```\n\n2. **Check Header Parsing**: Custom headers appear in logs with masked values for security:\n   ```\n   DEBUG Custom headers applied: {'X-Forwarded-User': '***', 'X-ALB-Token': '***'}\n   ```\n\n3. **Verify Service-Specific Headers**: Check logs to confirm the right headers are being used:\n   ```\n   DEBUG Jira request headers: service-specific headers applied\n   DEBUG Confluence request headers: service-specific headers applied\n   ```\n\n4. **Test Header Format**: Ensure your header string format is correct:\n   ```bash\n   # Correct format\n   JIRA_CUSTOM_HEADERS=X-Custom=value1,X-Other=value2\n   CONFLUENCE_CUSTOM_HEADERS=X-Custom=value1,X-Other=value2\n\n   # Incorrect formats (will be ignored)\n   JIRA_CUSTOM_HEADERS=\"X-Custom=value1,X-Other=value2\"  # Extra quotes\n   JIRA_CUSTOM_HEADERS=X-Custom: value1,X-Other: value2  # Colon instead of equals\n   JIRA_CUSTOM_HEADERS=X-Custom = value1               # Spaces around equals\n   ```\n\n**Security Note**: Header values containing sensitive information (tokens, passwords) are automatically masked in logs to prevent accidental exposure.\n\n### Debugging Tools\n\n```bash\n# Using MCP Inspector for testing\nnpx @modelcontextprotocol/inspector uvx mcp-atlassian ...\n\n# For local development version\nnpx @modelcontextprotocol/inspector uv --directory /path/to/your/mcp-atlassian run mcp-atlassian ...\n\n# View logs\n# macOS\ntail -n 20 -f ~/Library/Logs/Claude/mcp*.log\n# Windows\ntype %APPDATA%\\Claude\\logs\\mcp*.log | more\n```\n\n## Security\n\n- Never share API tokens\n- Keep .env files secure and private\n- See [SECURITY.md](SECURITY.md) for best practices\n\n## Contributing\n\nWe welcome contributions to MCP Atlassian! If you'd like to contribute:\n\n1. Check out our [CONTRIBUTING.md](CONTRIBUTING.md) guide for detailed development setup instructions.\n2. Make changes and submit a pull request.\n\nWe use pre-commit hooks for code quality and follow semantic versioning for releases.\n\n## License\n\nLicensed under MIT - see [LICENSE](LICENSE) file. This is not an official Atlassian product.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sooperset",
        "atlassian",
        "confluence",
        "mcp atlassian",
        "confluence cloud",
        "atlassian mcp"
      ],
      "category": "support--service-management"
    },
    "tom28881--mcp-jira-server": {
      "owner": "tom28881",
      "name": "mcp-jira-server",
      "url": "https://github.com/tom28881/mcp-jira-server",
      "imageUrl": "",
      "description": "Comprehensive TypeScript MCP server for Jira with 20+ tools covering complete project management workflow: issue CRUD, sprint management, comments/history, attachments, batch operations.",
      "stars": 4,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-13T01:53:57Z",
      "readme_content": "# MCP Jira Server fo Claude Code\n\nA comprehensive Model Context Protocol (MCP) server for Jira integration with Claude Code. This server provides complete Jira functionality including issue management, sprint operations, comments, attachments, and batch processing.\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![TypeScript](https://img.shields.io/badge/TypeScript-5.4+-blue.svg)](https://www.typescriptlang.org/)\n[![Node.js](https://img.shields.io/badge/Node.js-18+-green.svg)](https://nodejs.org/)\n\n⚠️ **Security Note**: Never commit your API tokens! All credentials should be in `.env` files or environment variables.\n\n## 🚀 Features\n\n### 📋 Issue Management (12 tools)\n- **create-issue** - Create issues with full field support including custom fields and dates\n- **update-issue** - Update existing issues with smart field handling\n- **get-issue** - Retrieve detailed issue information\n- **search-issues** - Advanced search using JQL or simplified filters with date support\n- **transition-issue** - Move issues through workflow states\n- **link-issues** - Create relationships between issues (with smart type matching)\n- **get-link-types** - List available issue link types\n- **get-fields** - Show available fields for project/issue type\n- **diagnose-fields** - Troubleshoot field configuration and find custom field IDs\n- **create-epic-with-subtasks** - Create epic with multiple subtasks in one operation\n- **create-task-for-epic** - Create task linked to epic (optimized for localized Jira)\n\n### 💬 Comments & History (3 tools)\n- **get-comments** - Read issue comments with author and timestamp information\n- **get-history** - View detailed change history with field modifications\n- **add-comment** - Add comments with Atlassian Document Format support\n- **batch-comment** - Add same comment to multiple issues simultaneously\n\n### 📎 Attachments (2 tools)\n- **get-attachments** - List attachments with metadata (size, type, upload date)\n- **upload-attachment** - Upload files using base64 encoding\n\n### 🏃 Sprint & Agile Management (4 tools)\n- **get-boards** - List available Jira boards for agile projects\n- **get-sprints** - View sprints for a board with status indicators\n- **move-issue-to-sprint** - Move issues between sprints and backlog\n- **create-sprint** - Create new sprints with optional start/end dates\n\n### Resources\n- `jira://projects` - List all accessible projects\n- `jira://project/{key}` - Get specific project details\n- `jira://issue/{key}` - Get specific issue details\n- `jira://myself` - Current user information\n- `jira://search?jql={query}` - Search results\n\n### Prompts\n- **standup-report** - Generate daily standup reports\n- **sprint-planning** - Assist with sprint planning activities\n- **bug-triage** - Help prioritize and triage bugs\n- **release-notes** - Generate release notes from completed issues\n- **epic-status** - Comprehensive epic progress reports\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/tom28881/JIRA_MCP.git\ncd JIRA_MCP\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n4. Create a `.env` file from the example:\n```bash\ncp .env.example .env\n```\n\n5. Configure your Jira credentials in `.env`:\n```env\nJIRA_HOST=https://your-company.atlassian.net\nJIRA_EMAIL=your-email@company.com\nJIRA_API_TOKEN=your-api-token\nJIRA_DEFAULT_PROJECT=PROJ\n```\n\n### Getting a Jira API Token\n\n1. Log in to [Atlassian account settings](https://id.atlassian.com/manage-profile/security/api-tokens)\n2. Click \"Create API token\"\n3. Give it a name (e.g., \"MCP Server\")\n4. Copy the token and add it to your `.env` file\n\n## Claude Code Configuration\n\nTo use this MCP server with Claude Code, you need to configure it in your MCP settings.\n\n### Option 1: Using Environment Variables\n\nSet up the server with environment variables:\n\n```bash\n# Export environment variables\nexport JIRA_HOST=\"https://your-company.atlassian.net\"\nexport JIRA_EMAIL=\"your-email@company.com\"\nexport JIRA_API_TOKEN=\"your-api-token\"\nexport JIRA_DEFAULT_PROJECT=\"PROJ\"\n\n# Run Claude Code with the MCP server\nclaude --mcp \"node /absolute/path/to/mcp-jira-server/dist/index.js\"\n```\n\n### Option 2: Using .env File\n\nCreate a `.env` file in the server directory and run:\n\n```bash\ncd /path/to/mcp-jira-server\nclaude --mcp \"node dist/index.js\"\n# or use the convenient run script:\nclaude --mcp \"./run.sh\"\n```\n\n### Option 3: Add to Claude Code Settings\n\nAdd the server to your Claude Code settings file (`~/.claude/settings.json`):\n\n```json\n{\n  \"mcpServers\": [\n    {\n      \"name\": \"jira\",\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-jira-server/dist/index.js\"],\n      \"env\": {\n        \"JIRA_HOST\": \"https://your-company.atlassian.net\",\n        \"JIRA_EMAIL\": \"your-email@company.com\",\n        \"JIRA_API_TOKEN\": \"your-api-token\",\n        \"JIRA_DEFAULT_PROJECT\": \"PROJ\"\n      }\n    }\n  ]\n}\n```\n\n## Usage Examples\n\n### Creating Issues\n\n```\nCreate a new bug in project PROJ with high priority about login issues\n```\n\n```\nCreate a story \"Implement user authentication\" with 5 story points and assign it to john@example.com\n```\n\n### Setting Dates and Time Estimates\n\n```\nCreate task \"Database backup\" with dueDate \"next week\" and originalEstimate \"4h\"\n```\n\n```\nUpdate PROJ-123 with startDate \"tomorrow\" and dueDate \"+14d\"\n```\n\n```\nCreate issue \"Quarterly review\" with dueDate \"31.3.2025\" and originalEstimate \"2 days\"\n```\n\n### Creating Epics with Subtasks\n\n```\nCreate an epic \"Database Migration\" in project PROJ with subtasks \"Backup current data\" and \"Migrate schema\"\n```\n\n### Creating Subtasks\n\n```\nCreate a subtask \"Review code\" for parent issue PROJ-123\n```\n\n### Czech Jira Support\n\n```\nCreate issue type \"Úkol\" in project PROJ\n```\n\n```\nCreate task for epic PPC-48 with summary \"Database backup\"\n```\n\n### Searching Issues\n\n```\nFind all open bugs assigned to me\n```\n\n```\nSearch for issues in project PROJ with label \"urgent\" that are not done\n```\n\n### Date-based Searching\n\n```\nSearch issues due before \"next week\" in project PROJ\n```\n\n```\nFind issues created after \"2024-12-01\" and updated after \"yesterday\"\n```\n\n```\nSearch for overdue issues: dueBefore \"today\" and status != \"Done\"\n```\n\n### Managing Issues\n\n```\nUpdate PROJ-123 to add story points 8\n```\n\n```\nTransition PROJ-456 to \"In Progress\"\n```\n\n```\nLink PROJ-123 to PROJ-456 as \"blocks\"\n```\n\n**Note**: Epic-Story relationships use the epicLink field, not regular issue links:\n```\nUpdate PROJ-456 with epicLink \"PROJ-100\"  # Links story to epic\n```\n\n### Using Prompts\n\n```\nGenerate a standup report for john@example.com\n```\n\n```\nHelp me plan the sprint for project PROJ\n```\n\n```\nCreate release notes for version 2.0 in project PROJ\n```\n\n## Advanced Configuration\n\n### Custom Fields\n\nThe server can work with any Jira configuration:\n\n#### Option 1: Auto-Detection (Recommended)\nLeave custom field IDs unset in `.env` and the server will automatically detect them based on field names.\n\n#### Option 2: Manual Configuration\nIf auto-detection doesn't work, configure custom field IDs in your `.env`:\n\n```env\nJIRA_FIELD_STORY_POINTS=customfield_10001\nJIRA_FIELD_ACCEPTANCE_CRITERIA=customfield_10002\nJIRA_FIELD_EPIC_LINK=customfield_10003\n```\n\n#### Finding Field IDs\nUse the `diagnose-fields` tool to find the correct field IDs for your Jira instance:\n```\ndiagnose-fields project:\"PROJ\" issueType:\"Story\"\n```\n\n### Auto-create Test Tickets\n\nEnable automatic test ticket creation for stories:\n\n```env\nAUTO_CREATE_TEST_TICKETS=true\n```\n\n## Development\n\n### Running in Development Mode\n\n```bash\nnpm run dev\n```\n\n### Type Checking\n\n```bash\nnpm run typecheck\n```\n\n### Linting\n\n```bash\nnpm run lint\n```\n\n## Features\n\n### 🌍 Localization Support\n- Automatic support for localized Jira instances (Czech, English, etc.)\n- Issue type names can be in any language (e.g., \"Task\", \"Úkol\", \"Aufgabe\")\n- Priority names support localization (e.g., \"High\", \"Vysoká\", \"Hoch\")\n- Special support for Czech Jira configurations\n- Works with any Jira language setting\n\n### 📅 Date and Time Management\n- Flexible date input formats:\n  - ISO: \"2024-12-31\"\n  - European: \"31.12.2024\" or \"31/12/2024\"\n  - Relative: \"today\", \"tomorrow\", \"next week\", \"+7d\", \"+2w\", \"+1m\"\n  - Czech: \"dnes\", \"zítra\", \"příští týden\"\n- Time tracking support:\n  - Estimates: \"2h\", \"1d 4h\", \"3 days\", \"2 hodiny\"\n  - Automatic format conversion\n- Date-based searching and filtering\n\n### 🔄 Automatic Retry\nThe server automatically retries failed requests with exponential backoff (up to 3 attempts).\n\n### 📦 Robust Error Handling\n- Empty response handling for Jira transitions\n- Detailed error messages with context\n- Graceful degradation for missing features\n\n### 📝 Comprehensive Logging\nEnable debug logging to see detailed information:\n```bash\nDEBUG=* claude --mcp \"./run.sh\"\n# or specific to jira-mcp:\nDEBUG=jira-mcp claude --mcp \"./run.sh\"\n```\n\n### 🔒 Connection Testing\nThe server tests the connection on startup and provides clear error messages if authentication fails.\n\n### 📄 Atlassian Document Format\nAutomatically converts plain text and markdown to Jira's ADF format for rich text fields.\n\n## Troubleshooting\n\n### Working with Different Jira Configurations\n\nThis MCP server is designed to work with **any Jira instance** regardless of:\n- Language settings (English, Czech, German, etc.)\n- Custom field configurations\n- Project-specific settings\n\n**Best Practices:**\n1. Use `get-fields` to see available issue types in your language\n2. Use `diagnose-fields` to find custom field IDs\n3. Create issues using the exact issue type names from your Jira\n\n### Common Issues\n\n1. **Authentication Failed**\n   - Verify your API token is correct\n   - Ensure your email matches your Atlassian account\n   - Check that your Jira instance URL includes `https://`\n\n2. **Project Not Found**\n   - Verify you have access to the project\n   - Check the project key is correct (case-sensitive)\n\n3. **Custom Fields Not Working**\n   - Use `diagnose-fields` tool to find the correct field IDs for your project\n   - Use `get-fields` tool to see all available fields\n   - Custom field IDs typically start with `customfield_`\n   - Some fields may not be available for certain issue types (e.g., labels on Epics)\n   - Epic Link field ID varies between Jira instances\n\n4. **Link Type Not Found**\n   - Use `get-link-types` tool to see available link types\n   - Link types are case-sensitive in Jira API\n   - The server will try to match case-insensitively\n   - Epic-Story relationships use epicLink field, not regular issue links\n\n5. **Epic-Story Linking Issues**\n   - Run `diagnose-fields` for project and \"Story\" issue type\n   - Update JIRA_FIELD_EPIC_LINK in .env with the correct field ID\n   - Restart the MCP server after updating .env\n\n### Debug Mode\n\nSet the `DEBUG` environment variable for verbose logging:\n\n```bash\nDEBUG=* claude --mcp \"./run.sh\"\n# or\nDEBUG=jira-mcp claude --mcp \"./run.sh\"\n```\n\n### View Logs\n\nLogs are output to stderr and include:\n- Connection status\n- API requests and responses\n- Error details with context\n- Performance metrics\n\n## Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for development guidelines.\n\n## License\n\nMIT License - see LICENSE file for details\n\n## Support\n\nFor issues and feature requests, please use the GitHub issue tracker.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jira",
        "service",
        "mcp",
        "server jira",
        "mcp jira",
        "jira server"
      ],
      "category": "support--service-management"
    }
  }
}