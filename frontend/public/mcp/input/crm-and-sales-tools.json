{
  "category": "crm-and-sales-tools",
  "categoryDisplay": "CRM and Sales Tools",
  "description": "",
  "totalRepositories": 19,
  "repositories": {
    "ChiragPatankar--AI-Customer-Support-Bot--MCP-Server": {
      "owner": "ChiragPatankar",
      "name": "AI-Customer-Support-Bot--MCP-Server",
      "url": "https://github.com/ChiragPatankar/AI-Customer-Support-Bot--MCP-Server",
      "imageUrl": "/freedevtools/mcp/pfp/ChiragPatankar.webp",
      "description": "Provides AI-powered customer support by processing queries in real-time and integrating with Glama.ai for context fetching and Cursor AI for response generation.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-14T22:49:52Z",
      "readme_content": "# 🤖 AI Customer Support Bot - MCP Server\r\n\r\n<div align=\"center\">\r\n\r\n![Python](https://img.shields.io/badge/python-v3.8+-blue.svg)\r\n![FastAPI](https://img.shields.io/badge/FastAPI-005571?style=flat&logo=fastapi)\r\n![PostgreSQL](https://img.shields.io/badge/PostgreSQL-316192?style=flat&logo=postgresql&logoColor=white)\r\n![MCP](https://img.shields.io/badge/MCP-Protocol-green)\r\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\r\n\r\n*A modern, extensible MCP server framework for building AI-powered customer support systems*\r\n\r\n\r\n[Features](#-features) • [Quick Start](#-quick-start) • [API Reference](#-api-reference) • [Architecture](#-architecture) • [Contributing](#-contributing)\r\n\r\n</div>\r\n\r\n---\r\n\r\n## 🌟 Overview\r\n\r\nA **Model Context Protocol (MCP)** compliant server framework built with modern Python. Designed for developers who want to create intelligent customer support systems without vendor lock-in. Clean architecture, battle-tested patterns, and ready for any AI provider.\r\n\r\n```mermaid\r\ngraph TB\r\n    Client[HTTP Client] --> API[API Server]\r\n    API --> MW[Middleware Layer]\r\n    MW --> SVC[Service Layer]\r\n    SVC --> CTX[Context Manager]\r\n    SVC --> AI[AI Integration]\r\n    SVC --> DAL[Data Access Layer]\r\n    DAL --> DB[(PostgreSQL)]\r\n```\r\n\r\n## ✨ Features\r\n\r\n<table>\r\n<tr>\r\n<td>\r\n\r\n🏗️ **Clean Architecture**  \r\nLayered design with clear separation of concerns\r\n\r\n📡 **MCP Compliant**  \r\nFull Model Context Protocol implementation\r\n\r\n</td>\r\n<td>\r\n\r\n🔒 **Production Ready**  \r\nAuth, rate limiting, monitoring included\r\n\r\n🚀 **High Performance**  \r\nBuilt on FastAPI with async support\r\n\r\n</td>\r\n</tr>\r\n<tr>\r\n<td>\r\n\r\n🔌 **AI Agnostic**  \r\nIntegrate any AI provider easily\r\n\r\n📊 **Health Monitoring**  \r\nComprehensive metrics and diagnostics\r\n\r\n</td>\r\n<td>\r\n\r\n🛡️ **Secure by Default**  \r\nToken auth and input validation\r\n\r\n📦 **Batch Processing**  \r\nHandle multiple queries efficiently\r\n\r\n</td>\r\n</tr>\r\n</table>\r\n\r\n## 🚀 Quick Start\r\n\r\n### Prerequisites\r\n\r\n- Python 3.8+\r\n- PostgreSQL\r\n- Your favorite AI service (OpenAI, Anthropic, etc.)\r\n\r\n### Installation\r\n\r\n```bash\r\n# Clone and setup\r\ngit clone https://github.com/ChiragPatankar/AI-Customer-Support-Bot--MCP-Server.git\r\ncd AI-Customer-Support-Bot--MCP-Server\r\n\r\n# Create virtual environment\r\npython -m venv venv\r\nsource venv/bin/activate  # Windows: venv\\Scripts\\activate\r\n\r\n# Install dependencies\r\npip install -r requirements.txt\r\n\r\n# Setup environment\r\ncp .env.example .env\r\n# Edit .env with your configuration\r\n```\r\n\r\n### Configuration\r\n\r\n```bash\r\n# .env file\r\nDATABASE_URL=postgresql://user:password@localhost/customer_support_bot\r\nSECRET_KEY=your-super-secret-key\r\nRATE_LIMIT_REQUESTS=100\r\nRATE_LIMIT_PERIOD=60\r\n```\r\n\r\n### Run\r\n\r\n```bash\r\n# Setup database\r\ncreatedb customer_support_bot\r\n\r\n# Start server\r\npython app.py\r\n# 🚀 Server running at http://localhost:8000\r\n```\r\n\r\n## 📡 API Reference\r\n\r\n<details>\r\n<summary><strong>Core Endpoints</strong></summary>\r\n\r\n### Health Check\r\n```http\r\nGET /mcp/health\r\n```\r\n\r\n### Process Single Query\r\n```http\r\nPOST /mcp/process\r\nContent-Type: application/json\r\nX-MCP-Auth: your-token\r\nX-MCP-Version: 1.0\r\n\r\n{\r\n  \"query\": \"How do I reset my password?\",\r\n  \"priority\": \"high\"\r\n}\r\n```\r\n\r\n### Batch Processing\r\n```http\r\nPOST /mcp/batch\r\nContent-Type: application/json\r\nX-MCP-Auth: your-token\r\n\r\n{\r\n  \"queries\": [\r\n    \"How do I reset my password?\",\r\n    \"What are your business hours?\"\r\n  ]\r\n}\r\n```\r\n\r\n</details>\r\n\r\n<details>\r\n<summary><strong>Response Format</strong></summary>\r\n\r\n### Success Response\r\n```json\r\n{\r\n  \"status\": \"success\",\r\n  \"data\": {\r\n    \"response\": \"Generated AI response\",\r\n    \"confidence\": 0.95,\r\n    \"processing_time\": \"120ms\"\r\n  },\r\n  \"meta\": {\r\n    \"request_id\": \"req_123456\",\r\n    \"timestamp\": \"2024-02-14T12:00:00Z\"\r\n  }\r\n}\r\n```\r\n\r\n### Error Response\r\n```json\r\n{\r\n  \"code\": \"RATE_LIMIT_EXCEEDED\",\r\n  \"message\": \"Rate limit exceeded\",\r\n  \"details\": {\r\n    \"retry_after\": 60,\r\n    \"timestamp\": \"2024-02-14T12:00:00Z\"\r\n  }\r\n}\r\n```\r\n\r\n</details>\r\n\r\n## 🏗️ Architecture\r\n\r\n### Project Structure\r\n```\r\n📦 AI-Customer-Support-Bot--MCP-Server\r\n├── 🚀 app.py              # FastAPI application\r\n├── 🗄️  database.py         # Database configuration\r\n├── 🛡️  middleware.py       # Auth & rate limiting\r\n├── 📋 models.py          # ORM models\r\n├── ⚙️  mcp_config.py      # MCP protocol config\r\n├── 📄 requirements.txt   # Dependencies\r\n└── 📝 .env.example      # Environment template\r\n```\r\n\r\n### Layer Responsibilities\r\n\r\n| Layer | Purpose | Components |\r\n|-------|---------|------------|\r\n| **API** | HTTP endpoints, validation | FastAPI routes, Pydantic models |\r\n| **Middleware** | Auth, rate limiting, logging | Token validation, request throttling |\r\n| **Service** | Business logic, AI integration | Context management, AI orchestration |\r\n| **Data** | Persistence, models | PostgreSQL, SQLAlchemy ORM |\r\n\r\n## 🔌 Extending with AI Services\r\n\r\n### Add Your AI Provider\r\n\r\n1. **Install your AI SDK:**\r\n```bash\r\npip install openai  # or anthropic, cohere, etc.\r\n```\r\n\r\n2. **Configure environment:**\r\n```bash\r\n# Add to .env\r\nAI_SERVICE_API_KEY=sk-your-api-key\r\nAI_SERVICE_MODEL=gpt-4\r\n```\r\n\r\n3. **Implement service integration:**\r\n```python\r\n# In service layer\r\nclass AIService:\r\n    async def generate_response(self, query: str, context: dict) -> str:\r\n        # Your AI integration here\r\n        return ai_response\r\n```\r\n\r\n## 🔧 Development\r\n\r\n### Running Tests\r\n```bash\r\npytest tests/\r\n```\r\n\r\n### Code Quality\r\n```bash\r\n# Format code\r\nblack .\r\n\r\n# Lint\r\nflake8\r\n\r\n# Type checking\r\nmypy .\r\n```\r\n\r\n### Docker Support\r\n```dockerfile\r\n# Coming soon - Docker containerization\r\n```\r\n\r\n## 📊 Monitoring & Observability\r\n\r\n### Health Metrics\r\n- ✅ Service uptime\r\n- 🔗 Database connectivity\r\n- 📈 Request rates\r\n- ⏱️ Response times\r\n- 💾 Memory usage\r\n\r\n### Logging\r\n```python\r\n# Structured logging included\r\n{\r\n  \"timestamp\": \"2024-02-14T12:00:00Z\",\r\n  \"level\": \"INFO\",\r\n  \"message\": \"Query processed\",\r\n  \"request_id\": \"req_123456\",\r\n  \"processing_time\": 120\r\n}\r\n```\r\n\r\n## 🔒 Security\r\n\r\n### Built-in Security Features\r\n- 🔐 **Token Authentication** - Secure API access\r\n- 🛡️ **Rate Limiting** - DoS protection\r\n- ✅ **Input Validation** - SQL injection prevention\r\n- 📝 **Audit Logging** - Request tracking\r\n- 🔒 **Environment Secrets** - Secure config management\r\n\r\n## 🚀 Deployment\r\n\r\n### Environment Setup\r\n```bash\r\n# Production environment variables\r\nDATABASE_URL=postgresql://prod-user:password@prod-host/db\r\nRATE_LIMIT_REQUESTS=1000\r\nLOG_LEVEL=WARNING\r\n```\r\n\r\n### Scaling Considerations\r\n- Use connection pooling for database\r\n- Implement Redis for rate limiting in multi-instance setups\r\n- Add load balancer for high availability\r\n- Monitor with Prometheus/Grafana\r\n\r\n## 🤝 Contributing\r\n\r\nWe love contributions! Here's how to get started:\r\n\r\n### Development Setup\r\n```bash\r\n# Fork the repo, then:\r\ngit clone https://github.com/your-username/AI-Customer-Support-Bot--MCP-Server.git\r\ncd AI-Customer-Support-Bot--MCP-Server\r\n\r\n# Create feature branch\r\ngit checkout -b feature/amazing-feature\r\n\r\n# Make your changes\r\n# ...\r\n\r\n# Test your changes\r\npytest\r\n\r\n# Submit PR\r\n```\r\n\r\n### Contribution Guidelines\r\n- 📝 Write tests for new features\r\n- 📚 Update documentation\r\n- 🎨 Follow existing code style\r\n- ✅ Ensure CI passes\r\n\r\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/chiragpatankar-ai-customer-support-bot-mcp-server-badge.png)](https://mseep.ai/app/chiragpatankar-ai-customer-support-bot-mcp-server)\r\n\r\n## 📄 License\r\n\r\nThis project is licensed under the **MIT License** - see the [LICENSE](LICENSE) file for details.\r\n\r\n---\r\n\r\n<div align=\"center\">\r\n\r\n**Built with ❤️ by [Chirag Patankar](https://github.com/ChiragPatankar)**\r\n\r\n⭐ **Star this repo if you find it helpful!** ⭐\r\n\r\n[Report Bug](https://github.com/ChiragPatankar/AI-Customer-Support-Bot--MCP-Server/issues) • [Request Feature](https://github.com/ChiragPatankar/AI-Customer-Support-Bot--MCP-Server/issues) • [Documentation](https://github.com/ChiragPatankar/AI-Customer-Support-Bot--MCP-Server/wiki)\r\n\r\n</div>\r\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "ai",
        "customer",
        "ai customer",
        "bot mcp",
        "provides ai"
      ],
      "category": "crm-and-sales-tools"
    },
    "KaranThink41--hubspot_private_app": {
      "owner": "KaranThink41",
      "name": "hubspot_private_app",
      "url": "https://github.com/KaranThink41/hubspot_private_app",
      "imageUrl": "/freedevtools/mcp/pfp/KaranThink41.webp",
      "description": "Interact with HubSpot CRM to manage Note engagements by creating, updating, deleting, and fetching summary records. Streamline communication by sending records via chat or email directly from the server.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-04-03T08:39:50Z",
      "readme_content": "# HubSpot MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for interacting with HubSpot CRM. This server allows you to create, update, delete, and fetch summary records (stored as Note \nengagements) in HubSpot.\n\n## DockerFile\n- docker build -t mcp-hubspot-ts .\n- docker run --env-file .env -it mcp-hubspot-ts\n\n\n## Features\n\n- Create a summary as a Note engagement in HubSpot\n- Fetch all summary records (Notes) from HubSpot\n- Filter summary records by date\n- Update existing summary records\n- Delete summary records\n- Send summary records via chat or email\n\n\n\n## Testing with MCP Inspector\n\nTo inspect and test your MCP server implementation, you can use the MCP Inspector. For example:\n\n```bash\nnpx @modelcontextprotocol/inspector -e HUBSPOT_ACCESS_TOKEN=your_access_token_here node build/index.js\n```\n\nThis will start the MCP Inspector UI on http://localhost:5173. Use the UI to send JSON-RPC requests to your server.\n\n## Env\n\nCreate a `.env` file in the project root with your HubSpot credentials:\n\n```env\nHUBSPOT_ACCESS_TOKEN=your_access_token_here\nSHARED_CONTACT_ID=your_contact_id_here\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot_private_app",
        "hubspot",
        "crm",
        "hubspot crm",
        "hubspot_private_app interact",
        "karanthink41 hubspot_private_app"
      ],
      "category": "crm-and-sales-tools"
    },
    "Meerkats-Ai--prospeo-mcp-server": {
      "owner": "Meerkats-Ai",
      "name": "prospeo-mcp-server",
      "url": "https://github.com/Meerkats-Ai/prospeo-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Meerkats-Ai.webp",
      "description": "Integrates with the Prospeo API for email finding and LinkedIn profile enrichment, enabling the retrieval of work emails using name and company data, discovering emails linked to specific domains, and enriching person data from LinkedIn URLs.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-04-23T10:33:30Z",
      "readme_content": "# Prospeo MCP Server\n\nThis is a Model Context Protocol (MCP) server that integrates with the Prospeo API to provide email finding and LinkedIn profile enrichment capabilities.\n\n## Features\n\n- Find work emails using name and company information\n- Find email addresses associated with a domain\n- Find work email and enrich person data from LinkedIn URL\n\n## Setup\n\n### Local Setup\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   npm install\n   ```\n3. Create a `.env` file based on `.env.example` and add your Prospeo API key:\n   ```\n   PROSPEO_API_KEY=your_api_key_here\n   ```\n4. Build the server:\n   ```\n   npm run build\n   ```\n5. Start the server:\n   ```\n   npm start\n   ```\n\n### Docker Setup\n\n1. Clone this repository\n2. Create a `.env` file with your Prospeo API key\n3. Build and run using Docker Compose:\n   ```\n   docker-compose up -d\n   ```\n\n## MCP Configuration\n\nTo use this server with an MCP client, add the following configuration to your MCP settings file:\n\n```json\n{\n  \"mcpServers\": {\n    \"prospeo\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/prospeo/dist/index.js\"],\n      \"env\": {\n        \"PROSPEO_API_KEY\": \"your_api_key_here\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## Available Tools\n\n- `prospeo_find_work_email`: Find a work email using name and company information\n- `prospeo_find_domain_emails`: Find email addresses associated with a domain\n- `prospeo_enrich_from_linkedin`: Find work email and enrich person data from LinkedIn URL\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linkedin",
        "crm",
        "linked",
        "data linkedin",
        "finding linkedin",
        "email finding"
      ],
      "category": "crm-and-sales-tools"
    },
    "SheffieldP--hubspot_mcp": {
      "owner": "SheffieldP",
      "name": "hubspot_mcp",
      "url": "https://github.com/SheffieldP/hubspot_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/SheffieldP.webp",
      "description": "Integrate with HubSpot CRM to access and manage contacts, companies, and engagements through a standardized interface. Utilize real-time HubSpot data to enhance application workflows.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-19T23:19:06Z",
      "readme_content": "# HubSpot MCP Server\n[![Docker Hub](https://img.shields.io/docker/v/buryhuang/mcp-hubspot?label=Docker%20Hub)](https://hub.docker.com/r/buryhuang/mcp-hubspot) [![smithery badge](https://smithery.ai/badge/mcp-hubspot)](https://smithery.ai/server/mcp-hubspot/prod)\n\n## Overview\n\nA Model Context Protocol (MCP) server implementation that provides integration with HubSpot CRM. This server enables AI models to interact with HubSpot data and operations through a standardized interface.\n\nFor more information about the Model Context Protocol and how it works, see [Anthropic's MCP documentation](https://www.anthropic.com/news/model-context-protocol).\n\n<a href=\"https://glama.ai/mcp/servers/vpoifk4jai\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/vpoifk4jai/badge\" alt=\"HubSpot Server MCP server\" /></a>\n\n## Components\n\n### Resources\n\nThe server exposes the following resources:\n\n* `hubspot://hubspot_contacts`: A dynamic resource that provides access to HubSpot contacts\n* `hubspot://hubspot_companies`: A dynamic resource that provides access to HubSpot companies\n* `hubspot://hubspot_recent_engagements`: A dynamic resource that provides access to HubSpot engagements from the last 3 days\n\nAll resources auto-update as their respective objects are modified in HubSpot.\n\n### Example Prompts\n\n- Create Hubspot contacts by copying from LinkedIn profile webpage: \n    ```\n    Create HubSpot contacts and companies from following:\n\n    John Doe\n    Software Engineer at Tech Corp\n    San Francisco Bay Area • 500+ connections\n    \n    Experience\n    Tech Corp\n    Software Engineer\n    Jan 2020 - Present · 4 yrs\n    San Francisco, California\n    \n    Previous Company Inc.\n    Senior Developer\n    2018 - 2020 · 2 yrs\n    \n    Education\n    University of California, Berkeley\n    Computer Science, BS\n    2014 - 2018\n    ```\n\n- Get latest activities for your company:\n    ```\n    What's happening latestly with my pipeline?\n    ```\n\n\n\n### Tools\n\nThe server offers several tools for managing HubSpot objects:\n\n#### Contact Management Tools\n* `hubspot_get_contacts`\n  * Retrieve contacts from HubSpot\n  * No input required\n  * Returns: Array of contact objects\n\n* `hubspot_create_contact`\n  * Create a new contact in HubSpot (checks for duplicates before creation)\n  * Input:\n    * `firstname` (string): Contact's first name\n    * `lastname` (string): Contact's last name\n    * `email` (string, optional): Contact's email address\n    * `properties` (dict, optional): Additional contact properties\n      * Example: `{\"phone\": \"123456789\", \"company\": \"HubSpot\"}`\n  * Behavior:\n    * Checks for existing contacts with the same first name and last name\n    * If `company` is provided in properties, also checks for matches with the same company\n    * Returns existing contact details if a match is found\n    * Creates new contact only if no match is found\n\n#### Company Management Tools\n* `hubspot_get_companies`\n  * Retrieve companies from HubSpot\n  * No input required\n  * Returns: Array of company objects\n\n* `hubspot_create_company`\n  * Create a new company in HubSpot (checks for duplicates before creation)\n  * Input:\n    * `name` (string): Company name\n    * `properties` (dict, optional): Additional company properties\n      * Example: `{\"domain\": \"example.com\", \"industry\": \"Technology\"}`\n  * Behavior:\n    * Checks for existing companies with the same name\n    * Returns existing company details if a match is found\n    * Creates new company only if no match is found\n\n* `hubspot_get_company_activity`\n  * Get activity history for a specific company\n  * Input:\n    * `company_id` (string): HubSpot company ID\n  * Returns: Array of activity objects\n\n#### Engagement Tools\n* `hubspot_get_recent_engagements`\n  * Get HubSpot engagements from all companies and contacts from the last 3 days\n  * No input required\n  * Returns: Array of engagement objects with full metadata\n\n\n## Multi-User Support\n\nThis MCP server is designed to work with multiple HubSpot users, each with their own access token. The server does not use a global environment variable for the access token.\n\nInstead, each request to the MCP server should include the user's specific access token in one of the following ways:\n\n1. In the request header: `X-HubSpot-Access-Token: your-token-here`\n2. In the request body as `accessToken`: `{\"accessToken\": \"your-token-here\"}`\n3. In the request body as `hubspotAccessToken`: `{\"hubspotAccessToken\": \"your-token-here\"}`\n\nThis design allows you to store user tokens in your own backend (e.g., Supabase) and pass them along with each request.\n\n### Example Multi-User Integration\n\n```javascript\n// Example of how to use this MCP server in a multi-user setup\nasync function makeHubSpotRequest(userId, action, params) {\n  // Retrieve the user's HubSpot token from your database\n  const userToken = await getUserHubSpotToken(userId); \n\n  // Make request to MCP server with the user's token\n  const response = await fetch('https://your-mcp-server.vercel.app/', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json',\n      'X-HubSpot-Access-Token': userToken\n    },\n    body: JSON.stringify({\n      action,\n      ...params\n    })\n  });\n  \n  return await response.json();\n}\n```\n\n## Setup\n\n### Prerequisites\n\nYou'll need a HubSpot access token for each user. You can obtain this by:\n1. Creating a private app in your HubSpot account:\n   Follow the [HubSpot Private Apps Guide](https://developers.hubspot.com/docs/guides/apps/private-apps/overview)\n   - Go to your HubSpot account settings\n   - Navigate to Integrations > Private Apps\n   - Click \"Create private app\"\n   - Fill in the basic information:\n     - Name your app\n     - Add description\n     - Upload logo (optional)\n   - Define required scopes:\n     - oauth (required)\n     \n   - Optional scopes:\n     - crm.dealsplits.read_write\n     - crm.objects.companies.read\n     - crm.objects.companies.write\n     - crm.objects.contacts.read\n     - crm.objects.contacts.write\n     - crm.objects.deals.read\n   - Review and create the app\n   - Copy the generated access token\n\nNote: Keep your access token secure and never commit it to version control.\n\n### Docker Installation\n\nYou can either build the image locally or pull it from Docker Hub. The image is built for the Linux platform.\n\n#### Supported Platforms\n- Linux/amd64\n- Linux/arm64\n- Linux/arm/v7\n\n#### Option 1: Pull from Docker Hub\n```bash\ndocker pull buryhuang/mcp-hubspot:latest\n```\n\n#### Option 2: Build Locally\n```bash\ndocker build -t mcp-hubspot .\n```\n\nRun the container:\n```bash\ndocker run \\\n  buryhuang/mcp-hubspot:latest\n```\n\n## Cross-Platform Publishing\n\nTo publish the Docker image for multiple platforms, you can use the `docker buildx` command. Follow these steps:\n\n1. **Create a new builder instance** (if you haven't already):\n   ```bash\n   docker buildx create --use\n   ```\n\n2. **Build and push the image for multiple platforms**:\n   ```bash\n   docker buildx build --platform linux/amd64,linux/arm64,linux/arm/v7 -t buryhuang/mcp-hubspot:latest --push .\n   ```\n\n3. **Verify the image is available for the specified platforms**:\n   ```bash\n   docker buildx imagetools inspect buryhuang/mcp-hubspot:latest\n   ```\n\n\n## Usage with Claude Desktop\n\n### Installing via Smithery\n\nTo install mcp-hubspot for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-hubspot/prod):\n\n```bash\nnpx -y @smithery/cli@latest install mcp-hubspot --client claude\n```\n\n### Docker Usage\n```json\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"buryhuang/mcp-hubspot:latest\"\n      ]\n    }\n  }\n}\n```\n\n## Development\n\nTo set up the development environment:\n\n```bash\npip install -e .\n```\n\n## License\n\nThis project is licensed under the MIT License. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot_mcp",
        "hubspot",
        "crm",
        "hubspot crm",
        "sheffieldp hubspot_mcp",
        "hubspot data"
      ],
      "category": "crm-and-sales-tools"
    },
    "hmk--attio-mcp-server": {
      "owner": "hmk",
      "name": "attio-mcp-server",
      "url": "https://github.com/hmk/attio-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/hmk.webp",
      "description": "Connects to the Attio API to read and write company records and notes for CRM management.",
      "stars": 15,
      "forks": 23,
      "license": "BSD 3-Clause \"New\" or \"Revised\" License",
      "language": "JavaScript",
      "updated_at": "2025-09-20T20:51:36Z",
      "readme_content": "# attio-mcp-server\n\nThis is an MCP server for [Attio](https://attio.com/), the AI-native CRM. It allows mcp clients (like Claude) to connect to the Attio API.\n\n#### Current Capabilities\n\n- [x] reading company records\n- [x] reading company notes\n- [x] writing company notes\n- [ ] other activities\n\n## Usage\n\nYou will need:\n\n- `ATTIO_API_KEY` \n\nThis is expected to be a *bearer token* which means you can get one through the [API Explorer](https://developers.attio.com/reference/get_v2-objects) on the right hand side or configure OAuth and retrieve one throught the Attio API.\n\n\n### Claude Desktop Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"attio\": {\n      \"command\": \"npx\",\n      \"args\": [\"attio-mcp-server\"],\n      \"env\": {\n        \"ATTIO_API_KEY\": \"YOUR_ATTIO_API_KEY\"\n      }\n    }\n  }\n}\n```\n## Development\n\n### Prerequisites\n\nBefore you begin, ensure you have the following installed:\n\n- Node.js (recommended v22 or higher)\n- npm\n- git\n- dotenv\n\n### Setting up Development Environment\n\nTo set up the development environment, follow these steps:\n\n1. Fork the repository\n\n   - Click the \"Fork\" button in the top-right corner of this repository\n   - This creates your own copy of the repository under your Github acocunt\n\n1. Clone Your Fork:\n\n   ```sh\n   git clone https://github.com/YOUR_USERNAME/attio-mcp-server.git\n   cd attio-mcp-server\n   ```\n\n1. Add Upstream Remote\n   ```sh\n   git remote add upstream https://github.com/hmk/attio-mcp-server.git\n   ```\n\n1. Copy the dotenv file\n    ```sh\n    cp .env.template .env\n    ```\n\n1. Install dependencies:\n\n   ```sh\n   npm install\n   ```\n\n1. Run watch to keep index.js updated:\n\n   ```sh\n   npm run build:watch\n   ```\n\n1. Start the model context protocol development server:\n\n   ```sh\n   dotenv npx @modelcontextprotocol/inspector node PATH_TO_YOUR_CLONED_REPO/dist/index.js\n   ```\n\n1. If the development server did not load the environment variable correctly, set the `ATTIO_API_KEY` on the left-hand side of the mcp inspector.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "attio",
        "mcp",
        "attio api",
        "attio mcp",
        "crm management"
      ],
      "category": "crm-and-sales-tools"
    },
    "isaacraja--hubspot-mcp-server": {
      "owner": "isaacraja",
      "name": "hubspot-mcp-server",
      "url": "https://github.com/isaacraja/hubspot-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/isaacraja.webp",
      "description": "Provides access to HubSpot's contacts, deals, and engagement data, enabling real-time CRM insights and data manipulation.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-03-27T07:13:51Z",
      "readme_content": "# HubSpot MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@isaacraja/hubspot-mcp-server)](https://smithery.ai/server/@isaacraja/hubspot-mcp-server)\n\nA Model Context Protocol server that provides access to the HubSpot API. This server enables LLMs to interact with HubSpot contacts, deals, and engagement data.\nA Model Context Protocol server that provides access to the HubSpot API. This server enables LLMs to interact with HubSpot contacts, deals, and engagements.\n\n## Components\n\n### Tools\n\nThe server implements several tools for HubSpot interaction:\n\n#### Contact Tools\n- `get_contact_by_id`: Retrieve a contact by their HubSpot ID (supports both string and integer IDs)\n- `get_contact_by_email`: Find a contact by their email address\n- `search_contacts`: Search for contacts based on property criteria\n\n#### Deal Tools\n- `get_deal_by_id`: Retrieve a deal by its HubSpot ID\n- `get_contact_deals`: Get all deals associated with a contact\n- `get_deal_contacts`: Get all contacts associated with a deal\n\n#### Engagement Tools\n- `get_latest_marketing_campaign`: Get information about recent marketing campaigns\n- `get_campaign_engagement`: Get contacts who engaged with a specific campaign\n- `get_page_visits`: Get contacts who visited a specific page\n- `get_contact_analytics`: Get analytics data for a specific contact\n- `get_scheduled_meetings`: Get meetings scheduled within a time period\n- `get_meeting_details`: Get detailed information about a specific meeting\n\n### Resources\n\n- `hubspot://contacts/schema`: Information about the contact object structure\n- `hubspot://deals/schema`: Information about the deal object structure\n\n## Configuration\n\nThe server requires the following environment variables:\n\n- `HUBSPOT_API_KEY` (required): Your HubSpot API key\n\n## Quickstart\n\n### Install\n\n```bash\nuv pip install hubspot-mcp-server\n```\n\n### Claude Desktop Configuration\n\nAdd this to your Claude Desktop configuration file:\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n##### Installing via Smithery\n\nTo install HubSpot MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@isaacraja/hubspot-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @isaacraja/hubspot-mcp-server --client claude\n```\n\n##### Development Configuration\n\n```json\n\"mcpServers\": {\n  \"hubspot\": {\n    \"command\": \"uv\",\n    \"env\": {\n      \"HUBSPOT_API_KEY\": \"your_hubspot_api_key\"\n    },\n    \"args\": [\n      \"--directory\",\n      \"{{PATH_TO_REPO}}\",\n      \"run\",\n      \"hubspot-mcp-server\"\n    ]\n  }\n}\n```\n\nReplace `{{PATH_TO_REPO}}` with the path to your cloned repository and `your_hubspot_api_key` with your actual HubSpot API key.\n#### Development/Unpublished Server Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot-mcp-server\": {\n      \"command\": \"uv\",\n      \"env\": {\n        \"HUBSPOT_API_KEY\": \"your-api-key\"\n      },\n      \"args\": [\n        \"--directory\",\n        \"{{PATH_TO_REPO}}/src/hubspot_mcp_server\",\n        \"run\",\n        \"server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Published Server Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot-mcp-server\": {\n      \"command\": \"uvx\",\n      \"env\": {\n        \"HUBSPOT_API_KEY\": \"your-api-key\"\n      },\n      \"args\": [\n        \"hubspot-mcp-server\"\n      ]\n    }\n  }\n}\n```\n\nReplace `your-api-key` with your HubSpot API key.\n\n## Development\n\n### Building and Publishing\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Testing\n\nInstall test dependencies:\n\n```bash\nuv sync --extra test\n```\n\nRun tests:\n\n```bash\n# Run all tests\npytest\n\n# Run with coverage\npytest --cov=server\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging experience, we recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory {{PATH_TO_REPO}} run hubspot-mcp-server\n```\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot",
        "crm",
        "mcp",
        "hubspot mcp",
        "crm insights",
        "crm sales"
      ],
      "category": "crm-and-sales-tools"
    },
    "jasonmorganson--servers": {
      "owner": "jasonmorganson",
      "name": "servers",
      "url": "https://github.com/jasonmorganson/servers",
      "imageUrl": "/freedevtools/mcp/pfp/jasonmorganson.webp",
      "description": "Utilizes a local knowledge graph for the creation, management, and retrieval of entities and their relationships, enabling users to maintain context and continuity in conversations across chats.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-09-05T13:11:57Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references\nto community built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nEach MCP server is implemented with either the [Typescript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk) or [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk).\n\n> Note: Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the TypeScript and Python SDKs.\n\n- **[AWS KB Retrieval](src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime\n- **[Brave Search](src/brave-search)** - Web and local search using Brave's Search API\n- **[EverArt](src/everart)** - AI image generation using various models\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories\n- **[GitHub](src/github)** - Repository management, file operations, and GitHub API integration\n- **[GitLab](src/gitlab)** - GitLab API, enabling project management\n- **[Google Drive](src/gdrive)** - File access and search capabilities for Google Drive\n- **[Google Maps](src/google-maps)** - Location services, directions, and place details\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system\n- **[PostgreSQL](src/postgres)** - Read-only database access with schema inspection\n- **[Puppeteer](src/puppeteer)** - Browser automation and web scraping\n- **[Redis](src/redis)** - Interact with Redis key-value stores\n- **[Sentry](src/sentry)** - Retrieving and analyzing issues from Sentry.io\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences\n- **[Slack](src/slack)** - Channel management and messaging capabilities\n- **[Sqlite](src/sqlite)** - Database interaction and business intelligence capabilities\n- **[Time](src/time)** - Time and timezone conversion capabilities\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://invoxx-public-bucket.s3.eu-central-1.amazonaws.com/frontend-resources/adfin-logo-small.svg\" alt=\"Adfin Logo\" /> **[Adfin](https://github.com/Adfin-Engineering/mcp-server-adfin)** - The only platform you need to get paid - all payments in one place, invoicing and accounting reconciliations with [Adfin](https://www.adfin.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.agentql.com/favicon/favicon.png\" alt=\"AgentQL Logo\" /> **[AgentQL](https://github.com/tinyfish-io/agentql-mcp)** - Enable AI agents to get structured data from unstructured web with [AgentQL](https://www.agentql.com/).\n- <img height=\"12\" width=\"12\" src=\"https://agentrpc.com/favicon.ico\" alt=\"AgentRPC Logo\" /> **[AgentRPC](https://github.com/agentrpc/agentrpc)** - Connect to any function, any language, across network boundaries using [AgentRPC](https://www.agentrpc.com/).\n- <img height=\"12\" width=\"12\" src=\"https://aiven.io/favicon.ico\" alt=\"Aiven Logo\" /> **[Aiven](https://github.com/Aiven-Open/mcp-aiven)** - Navigate your [Aiven projects](https://go.aiven.io/mcp-server) and interact with the PostgreSQL®, Apache Kafka®, ClickHouse® and OpenSearch® services\n- <img height=\"12\" width=\"12\" src=\"https://iotdb.apache.org/img/logo.svg\" alt=\"Apache IoTDB Logo\" /> **[Apache IoTDB](https://github.com/apache/iotdb-mcp-server)** - MCP Server for [Apache IoTDB](https://github.com/apache/iotdb) database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/actors-mcp-server)** - [Actors MCP Server](https://apify.com/apify/actors-mcp-server): Use 3,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://2052727.fs1.hubspotusercontent-na1.net/hubfs/2052727/cropped-cropped-apimaticio-favicon-1-32x32.png\" alt=\"APIMatic Logo\" /> **[APIMatic MCP](https://github.com/apimatic/apimatic-validator-mcp)** - APIMatic MCP Server is used to validate OpenAPI specifications using [APIMatic](https://www.apimatic.io/). The server processes OpenAPI files and returns validation summaries by leveraging APIMatic’s API.\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://www.bankless.com/favicon.ico\" alt=\"Bankless Logo\" /> **[Bankless Onchain](https://github.com/bankless/onchain-mcp)** - Query Onchain data, like ERC20 tokens, transaction history, smart contract state.\n- <img height=\"12\" width=\"12\" src=\"https://bicscan.io/favicon.png\" alt=\"BICScan Logo\" /> **[BICScan](https://github.com/ahnlabio/bicscan-mcp)** - Risk score / asset holdings of EVM blockchain address (EOA, CA, ENS) and even domain names.\n- <img height=\"12\" width=\"12\" src=\"https://www.box.com/favicon.ico\" alt=\"Box Logo\" /> **[Box](https://github.com/box-community/mcp-server-box)** - Interact with the Intelligent Content Management platform through Box AI.\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://www.chargebee.com/static/resources/brand/favicon.png\" /> **[Chargebee](https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol)** - MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com).\n- <img height=\"12\" width=\"12\" src=\"https://trychroma.com/_next/static/media/chroma-logo.ae2d6e4b.svg\" /> **[Chroma](https://github.com/chroma-core/chroma-mcp)** - Embeddings, vector search, document storage, and full-text search with the open-source AI application database\n- <img height=\"12\" width=\"12\" src=\"https://www.chronulus.com/favicon/chronulus-logo-blue-on-alpha-square-128x128.ico\" alt=\"Chronulus AI Logo\" /> **[Chronulus AI](https://github.com/ChronulusAI/chronulus-mcp)** - Predict anything with Chronulus AI forecasting and prediction agents.\n- <img height=\"12\" width=\"12\" src=\"https://circleci.com/favicon.ico\" alt=\"CircleCI Logo\" /> **[CircleCI](https://github.com/CircleCI-Public/mcp-server-circleci)** - Enable AI Agents to fix build failures from CircleCI.\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n-  **[CodeLogic](https://github.com/CodeLogicIncEngineering/codelogic-mcp-server)** - Interact with [CodeLogic](https://codelogic.com), a Software Intelligence platform that graphs complex code and data architecture dependencies, to boost AI accuracy and insight.\n- <img height=\"12\" width=\"12\" src=\"https://www.comet.com/favicon.ico\" alt=\"Comet Logo\" /> **[Comet Opik](https://github.com/comet-ml/opik-mcp)** - Query and analyze your [Opik](https://github.com/comet-ml/opik) logs, traces, prompts and all other telemtry data from your LLMs in natural language.\n- <img height=\"12\" width=\"12\" src=\"https://www.convex.dev/favicon.ico\" /> **[Convex](https://stack.convex.dev/convex-mcp-server)** - Introspect and query your apps deployed to Convex.\n- <img height=\"12\" width=\"12\" src=\"http://app.itsdart.com/static/img/favicon.png\" alt=\"Dart Logo\" /> **[Dart](https://github.com/its-dart/dart-mcp-server)** - Interact with task, doc, and project data in [Dart](https://itsdart.com), an AI-native project management tool\n- <img height=\"12\" width=\"12\" src=\"https://www.devhub.com/img/upload/favicon-196x196-dh.png\" alt=\"DevHub Logo\" /> **[DevHub](https://github.com/devhub/devhub-cms-mcp)** - Manage and utilize website content within the [DevHub](https://www.devhub.com) CMS platform\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://static.edubase.net/media/brand/favicon/favicon-32x32.png\" alt=\"EduBase Logo\" /> **[EduBase](https://github.com/EduBase/MCP)** - Interact with [EduBase](https://www.edubase.net), a comprehensive e-learning platform with advanced quizzing, exam management, and content organization capabilities\n- <img height=\"12\" width=\"12\" src=\"https://www.elastic.co/favicon.ico\" alt=\"Elasticsearch Logo\" /> **[Elasticsearch](https://github.com/elastic/mcp-server-elasticsearch)** - Query your data in [Elasticsearch](https://www.elastic.co/elasticsearch)\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://fewsats.com/favicon.svg\" alt=\"Fewsats Logo\" /> **[Fewsats](https://github.com/Fewsats/fewsats-mcp)** - Enable AI Agents to purchase anything in a secure way using [Fewsats](https://fewsats.com)\n- <img height=\"12\" width=\"12\" src=\"https://fibery.io/favicon.svg\" alt=\"Fibery Logo\" /> **[Fibery](https://github.com/Fibery-inc/fibery-mcp-server)** - Perform queries and entity operations in your [Fibery](https://fibery.io) workspace.\n- <img height=\"12\" width=\"12\" src=\"https://financialdatasets.ai/favicon.ico\" alt=\"Financial Datasets Logo\" /> **[Financial Datasets](https://github.com/financial-datasets/mcp-server)** - Stock market API made for AI agents\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/mendableai/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://gitee.com/favicon.ico\" alt=\"Gitee Logo\" /> **[Gitee](https://github.com/oschina/mcp-gitee)** - Gitee API integration, repository, issue, and pull request management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6605a2979ff17b2cd1939cd4/6605a460de47e7596ed84f06_icon256.png\" alt=\"gotoHuman Logo\" /> **[gotoHuman](https://github.com/gotohuman/gotohuman-mcp-server)** - Human-in-the-loop platform - Allow AI agents and automations to send requests for approval to your [gotoHuman](https://www.gotohuman.com) inbox.\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/KCOWBYLKunDff1Dr452y6EfjiU.png\" alt=\"Graphlit Logo\" /> **[Graphlit](https://github.com/graphlit/graphlit-mcp-server)** - Ingest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a searchable [Graphlit](https://www.graphlit.com) project.\n- <img height=\"12\" width=\"12\" src=\"https://greptime.com/favicon.ico\" alt=\"Greptime Logo\" /> **[GreptimeDB](https://github.com/GreptimeTeam/greptimedb-mcp-server)** - Provides AI assistants with a secure and structured way to explore and analyze data in [GreptimeDB](https://github.com/GreptimeTeam/greptimedb).\n- <img height=\"12\" width=\"12\" src=\"https://www.herokucdn.com/favicons/favicon.ico\" alt=\"Heroku Logo\" /> **[Heroku](https://github.com/heroku/heroku-mcp-server)** - Interact with the Heroku Platform through LLM-driven tools for managing apps, add-ons, dynos, databases, and more.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN01d9qrry1i6lTNa2BRa_!!6000000004364-2-tps-218-200.png\" alt=\"Hologres Logo\" /> **[Hologres](https://github.com/aliyun/alibabacloud-hologres-mcp-server)** - Connect to a [Hologres](https://www.alibabacloud.com/en/product/hologres) instance, get table metadata, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://hyperbrowser-assets-bucket.s3.us-east-1.amazonaws.com/Hyperbrowser-logo.png\" alt=\"Hyperbrowsers23 Logo\" /> **[Hyperbrowser](https://github.com/hyperbrowserai/mcp)** - [Hyperbrowser](https://www.hyperbrowser.ai/) is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation.\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://www.getinboxzero.com/icon.png\" alt=\"Inbox Zero Logo\" /> **[Inbox Zero](https://github.com/elie222/inbox-zero/tree/main/apps/mcp-server)** - AI personal assistant for email [Inbox Zero](https://www.getinboxzero.com)\n-  **[Inkeep](https://github.com/inkeep/mcp-server-python)** - RAG Search over your content powered by [Inkeep](https://inkeep.com)\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://github.com/JetBrains/mcp-jetbrains)** – Work on your code with JetBrains IDEs\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://connection.keboola.com/favicon.ico\" alt=\"Keboola Logo\" /> **[Keboola](https://github.com/keboola/keboola-mcp-server)** - Build robust data workflows, integrations, and analytics on a single intuitive platform.\n- <img height=\"12\" width=\"12\" src=\"https://laratranslate.com/favicon.ico\" alt=\"Lara Translate Logo\" /> **[Lara Translate](https://github.com/translated/lara-mcp)** - MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.\n- <img height=\"12\" width=\"12\" src=\"https://logfire.pydantic.dev/favicon.ico\" alt=\"Logfire Logo\" /> **[Logfire](https://github.com/pydantic/logfire-mcp)** - Provides access to OpenTelemetry traces and metrics through Logfire.\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://www.mailgun.com/favicon.ico\" alt=\"Mailgun Logo\" /> **[Mailgun](https://github.com/mailgun/mailgun-mcp-server)** - Interact with Mailgun API.\n- <img height=\"12\" width=\"12\" src=\"https://www.make.com/favicon.ico\" alt=\"Make Logo\" /> **[Make](https://github.com/integromat/make-mcp-server)** - Turn your [Make](https://www.make.com/) scenarios into callable tools for AI assistants.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n-  **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://milvus.io/favicon-32x32.png\" /> **[Milvus](https://github.com/zilliztech/mcp-server-milvus)** - Search, Query and interact with data in your Milvus Vector Database.\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/183852044?s=48&v=4\" alt=\"Neon Logo\" /> **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/82347605?s=48&v=4\" alt=\"OceanBase Logo\" /> **[OceanBase](https://github.com/oceanbase/mcp-oceanbase)** - MCP Server for OceanBase database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[Octagon](https://github.com/OctagonAI/octagon-mcp-server)** - Deliver real-time investment research with extensive private and public market data.\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://developer.paddle.com/favicon.svg\" alt=\"Paddle Logo\" /> **[Paddle](https://github.com/PaddleHQ/paddle-mcp-server)** - Interact with the Paddle API. Manage product catalog, billing and subscriptions, and reports.\n- <img height=\"12\" width=\"12\" src=\"https://www.paypalobjects.com/webstatic/icon/favicon.ico\" alt=\"PayPal Logo\" /> **[PayPal](https://mcp.paypal.com)** - PayPal's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.perplexity.ai/favicon.ico\" alt=\"Perplexity Logo\" /> **[Perplexity](https://github.com/ppl-ai/modelcontextprotocol)** - An MCP server that connects to Perplexity's Sonar API, enabling real-time web-wide research in conversational AI.\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- <img height=\"12\" width=\"12\" src=\"https://www.ramp.com/favicon.ico\" /> **[Ramp](https://github.com/ramp-public/ramp-mcp)** - Interact with [Ramp](https://ramp.com)'s Developer API to run analysis on your spend and gain insights leveraging LLMs\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://www.rember.com/favicon.ico\" alt=\"Rember Logo\" /> **[Rember](https://github.com/rember/rember-mcp)** - Create spaced repetition flashcards in [Rember](https://rember.com) to remember anything you learn in your chats\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" /> [Search1API](https://github.com/fatwang2/search1api-mcp) - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://screenshotone.com/favicon.ico\" alt=\"ScreenshotOne Logo\" /> **[ScreenshotOne](https://github.com/screenshotone/mcp/)** - Render website screenshots with [ScreenshotOne](https://screenshotone.com/)\n- <img height=\"12\" width=\"12\" src=\"https://semgrep.dev/favicon.ico\" alt=\"Semgrep Logo\" /> **[Semgrep](https://github.com/semgrep/mcp)** - Enable AI agents to secure code with [Semgrep](https://semgrep.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://www.singlestore.com/favicon-32x32.png?v=277b9cbbe31e8bc416504cf3b902d430\"/> **[SingleStore](https://github.com/singlestore-labs/mcp-server-singlestore)** - Interact with the SingleStore database platform\n- <img height=\"12\" width=\"12\" src=\"https://www.starrocks.io/favicon.ico\" alt=\"StarRocks Logo\" /> **[StarRocks](https://github.com/StarRocks/mcp-server-starrocks)** - Interact with [StarRocks](https://www.starrocks.io/)\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://thirdweb.com/favicon.ico\" alt=\"Thirdweb Logo\" /> **[Thirdweb](https://github.com/thirdweb-dev/ai/tree/main/python/thirdweb-mcp)** - Read/write to over 2k blockchains, enabling data querying, contract analysis/deployment, and transaction execution, powered by [Thirdweb](https://thirdweb.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://unifai.network/favicon.ico\" alt=\"UnifAI Logo\" /> **[UnifAI](https://github.com/unifai-network/unifai-mcp-server)** - Dynamically search and call tools using [UnifAI Network](https://unifai.network)\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/plcQevjrOYnyriuGw90NfQBPoQ.jpg\" alt=\"Unstructured Logo\" /> **[Unstructured](https://github.com/Unstructured-IO/UNS-MCP)** - Set up and interact with your unstructured data processing workflows in [Unstructured Platform](https://unstructured.io)\n- **[Vectorize](https://github.com/vectorize-io/vectorize-mcp-server/)** - [Vectorize](https://vectorize.io) MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n- <img height=\"12\" width=\"12\" src=\"https://www.veyrax.com/favicon.ico\" alt=\"VeyraX Logo\" /> **[VeyraX](https://github.com/VeyraX/veyrax-mcp)** - Single tool to control all 100+ API integrations, and UI components\n- <img height=\"12\" width=\"12\" src=\"https://www.xero.com/favicon.ico\" alt=\"Xero Logo\" /> **[Xero](https://github.com/XeroAPI/xero-mcp-server)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://cdn.zapier.com/zapier/images/favicon.ico\" alt=\"Zapier Logo\" /> **[Zapier](https://zapier.com/mcp)** - Connect your AI Agents to 8,000 apps instantly.\n- **[ZenML](https://github.com/zenml-io/mcp-zenml)** - Interact with your MLOps and LLMOps pipelines through your [ZenML](https://www.zenml.io) MCP server\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> **Note:** Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n- **[Ableton Live](https://github.com/Simon-Kansara/ableton-live-mcp-server)** - an MCP server to control Ableton Live.\n- **[Airbnb](https://github.com/openbnb-org/mcp-server-airbnb)** - Provides tools to search Airbnb and get listing details.\n- **[AI Agent Marketplace Index](https://github.com/AI-Agent-Hub/ai-agent-marketplace-index-mcp)** - MCP server to search more than 5000+ AI agents and tools of various categories from [AI Agent Marketplace Index](http://www.deepnlp.org/store/ai-agent) and monitor traffic of AI Agents.\n- **[Algorand](https://github.com/GoPlausible/algorand-mcp)** - A comprehensive MCP server for tooling interactions (40+) and resource accessibility (60+) plus many useful prompts for interacting with the Algorand blockchain.\n- **[Airflow](https://github.com/yangkyeongmo/mcp-server-apache-airflow)** - A MCP Server that connects to [Apache Airflow](https://airflow.apache.org/) using official python client.\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[AlphaVantage](https://github.com/calvernaz/alphavantage)** - MCP server for stock market data API [AlphaVantage](https://www.alphavantage.co)\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[Apple Calendar](https://github.com/Omar-v2/mcp-ical)** - An MCP server that allows you to interact with your MacOS Calendar through natural language, including features such as event creation, modification, schedule listing, finding free time slots etc.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[Arduino](https://github.com/vishalmysore/choturobo)** - MCP Server that enables AI-powered robotics using Claude AI and Arduino (ESP32) for real-world automation and interaction with robots.\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Attestable MCP](https://github.com/co-browser/attestable-mcp-server)** - An MCP server running inside a trusted execution environment (TEE) via Gramine, showcasing remote attestation using [RA-TLS](https://gramine.readthedocs.io/en/stable/attestation.html). This allows an MCP client to verify the server before conencting.\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM.\n- **[AWS Athena](https://github.com/lishenxydlgzs/aws-athena-mcp)** - A MCP server for AWS Athena to run SQL queries on Glue Catalog.\n- **[AWS Cost Explorer](https://github.com/aarora79/aws-cost-explorer-mcp-server)** - Optimize your AWS spend (including Amazon Bedrock spend) with this MCP server by examining spend across regions, services, instance types and foundation models ([demo video](https://www.youtube.com/watch?v=WuVOmYLRFmI&feature=youtu.be)).\n- **[AWS Resources Operations](https://github.com/baryhuang/mcp-server-aws-resources-python)** - Run generated python code to securely query or modify any AWS resources supported by boto3.\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents.\n- **[Azure ADX](https://github.com/pab1it0/adx-mcp-server)** - Query and analyze Azure Data Explorer databases.\n- **[Azure DevOps](https://github.com/Vortiago/mcp-azure-devops)** - An MCP server that provides a bridge to Azure DevOps services, enabling AI assistants to query and manage work items.\n- **[Baidu AI Search](https://github.com/baidubce/app-builder/tree/master/python/mcp_server/ai_search)** - Web search with Baidu Cloud's AI Search\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n* **[Basic Memory](https://github.com/basicmachines-co/basic-memory)** - Local-first knowledge management system that builds a semantic graph from Markdown files, enabling persistent memory across conversations with LLMs.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Bing Web Search API](https://github.com/leehanchung/bing-search-mcp)** (by hanchunglee) - Server implementation for Microsoft Bing Web Search API.\n- **[Bitable MCP](https://github.com/lloydzhou/bitable-mcp)** (by lloydzhou) - MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.\n- **[Blender](https://github.com/ahujasid/blender-mcp)** (by ahujasid) - Blender integration allowing prompt enabled 3D scene creation, modeling and manipulation.\n- **[browser-use](https://github.com/co-browser/browser-use-mcp-server)** (by co-browser) - browser-use MCP server with dockerized playwright + chromium + vnc. supports stdio & resumable http.\n- **[Bsc-mcp](https://github.com/TermiX-official/bsc-mcp)** The first MCP server that serves as the bridge between AI and BNB Chain, enabling AI agents to execute complex on-chain operations through seamless integration with the BNB Chain, including transfer, swap, launch, security check on any token and even more.\n- **[Calculator](https://github.com/githejie/mcp-server-calculator)** - This server enables LLMs to use calculator for precise numerical calculations.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[code-assistant](https://github.com/stippi/code-assistant)** - A coding assistant MCP server that allows to explore a code-base and make changes to code. Should be used with trusted repos only (insufficient protection against prompt injections).\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[crypto-feargreed-mcp](https://github.com/kukapay/crypto-feargreed-mcp)**  -  Providing real-time and historical Crypto Fear & Greed Index data.\n- **[cryptopanic-mcp-server](https://github.com/kukapay/cryptopanic-mcp-server)** - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Databricks](https://github.com/JordiNeil/mcp-databricks-server)** - Allows LLMs to run SQL queries, list and get details of jobs executions in a Databricks account.\n- **[Datadog](https://github.com/GeLi2001/datadog-mcp-server)** - Datadog MCP Server for application tracing, monitoring, dashboard, incidents queries built on official datadog api.\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DBHub](https://github.com/bytebase/dbhub/)** - Universal database MCP server connecting to MySQL, PostgreSQL, SQLite, DuckDB and etc.\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DevRev](https://github.com/kpsunil97/devrev-mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. sources listed [here](https://devrev.ai/docs/import#available-sources).\n- **[Dicom](https://github.com/ChristianHinge/dicom-mcp)** - An MCP server to query and retrieve medical images and for parsing and reading dicom-encapsulated documents (pdf etc.). \n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discord](https://github.com/v-3/discordmcp)** - A MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Discord](https://github.com/SaseQ/discord-mcp)** - A MCP server, which connects to Discord through a bot, and provides comprehensive integration with Discord.\n- **[Discourse](https://github.com/AshDevFr/discourse-mcp-server)** - A MCP server to search Discourse posts on a Discourse forum.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[dune-analytics-mcp](https://github.com/kukapay/dune-analytics-mcp)** -  A mcp server that bridges Dune Analytics data to AI agents.\n- **[EdgeOne Pages MCP](https://github.com/TencentEdgeOne/edgeone-pages-mcp)** - An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Ergo Blockchain MCP](https://github.com/marctheshark3/ergo-mcp)** -An MCP server to integrate Ergo Blockchain Node and Explorer APIs for checking address balances, analyzing transactions, viewing transaction history, performing forensic analysis of addresses, searching for tokens, and monitoring network status.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[EVM MCP Server](https://github.com/mcpdotdirect/evm-mcp-server)** - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[Excel](https://github.com/haris-musa/excel-mcp-server)** - Excel manipulation including data reading/writing, worksheet management, formatting, charts, and pivot table.\n- **[Fantasy PL](https://github.com/rishijatia/fantasy-pl-mcp)** - Give your coding agent direct access to up-to date Fantasy Premier League data\n- **[fastn.ai – Unified API MCP Server](https://github.com/fastnai/mcp-fastn)** - A remote, dynamic MCP server with a unified API that connects to 1,000+ tools, actions, and workflows, featuring built-in authentication and monitoring.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[Fingertip](https://github.com/fingertip-com/fingertip-mcp)** - MCP server for Fingertip.com to search and create new sites.\n- **[Figma](https://github.com/GLips/Figma-Context-MCP)** - Give your coding agent direct access to Figma file data, helping it one-shot design implementation.\n- **[Firebase](https://github.com/gannonh/firebase-mcp)** - Server to interact with Firebase services including Firebase Authentication, Firestore, and Firebase Storage.\n- **[FireCrawl](https://github.com/vrknetha/mcp-server-firecrawl)** - Advanced web scraping with JavaScript rendering, PDF support, and smart rate limiting\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Github Actions](https://github.com/ko1ynnky/github-actions-mcp-server)** - A Model Context Protocol (MCP) server for interacting with Github Actions.\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Gmail Headless](https://github.com/baryhuang/mcp-headless-gmail)** - Remote hostable MCP server that can get and send Gmail messages without local credential or file system setup.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[GOAT](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)** - Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\n- **[Godot](https://github.com/Coding-Solo/godot-mcp)** - A MCP server providing comprehensive Godot engine integration for project editing, debugging, and scene management.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Goodnews](https://github.com/VectorInstitute/mcp-goodnews)** - A simple MCP server that delivers curated positive and uplifting news stories.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[GraphQL Schema](https://github.com/hannesj/mcp-graphql-schema)** - Allow LLMs to explore large GraphQL schemas without bloating the context.\n- **[HDW LinkedIn](https://github.com/horizondatawave/hdw-mcp-server)** - Access to profile data and management of user account with [HorizonDataWave.ai](https://horizondatawave.ai/).\n- **[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server)** - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[Home Assistant](https://github.com/voska/hass-mcp)** - Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Hyperliquid](https://github.com/mektigboy/server-hyperliquid)** - An MCP server implementation that integrates the Hyperliquid SDK for exchange data.\n- **[iFlytek Workflow](https://github.com/iflytek/ifly-workflow-mcp-server)** - Connect to iFlytek Workflow via the MCP server and run your own Agent.\n- **[Image Generation](https://github.com/GongRzhe/Image-Generation-MCP-Server)** - This MCP server provides image generation capabilities using the Replicate Flux model.\n- **[InfluxDB](https://github.com/idoru/influxdb-mcp-server)** - Run queries against InfluxDB OSS API v2.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Intercom](https://github.com/raoulbia-ai/mcp-server-for-intercom)** - An MCP-compliant server for retrieving customer support tickets from Intercom. This tool enables AI assistants like Claude Desktop and Cline to access and analyze your Intercom support tickets.\n- **[iOS Simulator](https://github.com/InditexTech/mcp-server-simulator-ios-idb)** - A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators (iPhone, iPad, etc.) through natural language commands.\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[JavaFX](https://github.com/mcpso/mcp-server-javafx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, sqllite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[KiCad MCP](https://github.com/lamaalrajih/kicad-mcp)** - MCP server for KiCad on Mac, Windows, and Linux.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kong Konnect](https://github.com/Kong/mcp-konnect)** - A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Kubernetes and OpenShift](https://github.com/manusa/kubernetes-mcp-server)** - A powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for any Kubernetes resource, this server provides specialized tools to interact with your cluster.\n- **[Langflow-DOC-QA-SERVER](https://github.com/GongRzhe/Langflow-DOC-QA-SERVER)** - A Model Context Protocol server for document Q&A powered by Langflow. It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[Linear (Go)](https://github.com/geropl/linear-mcp-go)** - Allows LLM to interact with Linear's API via a single static binary.\n- **[LINE](https://github.com/amornpan/py-mcp-line)** (by amornpan) - Implementation for LINE Bot integration that enables Language Models to read and analyze LINE conversations through a standardized interface. Features asynchronous operation, comprehensive logging, webhook event handling, and support for various message types.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[mac-messages-mcp](https://github.com/carterlasalle/mac_messages_mcp)** - An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[Maton](https://github.com/maton-ai/agent-toolkit/tree/main/modelcontextprotocol)** - Connect to your SaaS tools like HubSpot, Salesforce, and more.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Create](https://github.com/tesla0225/mcp-create)** - A dynamic MCP server management service that creates, runs, and manages Model Context Protocol servers on-the-fly.\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-local-rag](https://github.com/nkapila6/mcp-local-rag)** - \"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search. ✨ no APIs required ✨.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[mem0-mcp](https://github.com/mem0ai/mem0-mcp)** - A Model Context Protocol server for Mem0, which helps with managing coding preferences.\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[MSSQL-MCP](https://github.com/daobataotie/mssql-mcp)** (by daobataotie) - MSSQL MCP that refer to the official website's SQLite MCP for modifications to adapt to MSSQL\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[Microsoft Teams](https://github.com/InditexTech/mcp-teams-server)** - MCP server that integrates Microsoft Teams messaging (read, post, mention, list members and threads) \n- **[Mindmap](https://github.com/YuChenSSR/mindmap-mcp-server)** (by YuChenSSR) - A server that generates mindmaps from input containing markdown code.\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[Mobile MCP](https://github.com/mobile-next/mobile-mcp)** (by Mobile Next) - MCP server for Mobile(iOS/Android) automation, app scraping and development using physical devices or simulators/emulators.\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MongoDB Lens](https://github.com/furey/mongodb-lens)** - Full Featured MCP Server for MongoDB Databases.\n- **[Monday.com](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[Multicluster-MCP-Sever](https://github.com/yanmxa/multicluster-mcp-server)** - The gateway for GenAI systems to interact with multiple Kubernetes clusters.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[n8n](https://github.com/leonardsellem/n8n-mcp-server)** - This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, and deleting workflows, as well as monitoring their execution status.\n- **[NASA](https://github.com/ProgramComputer/NASA-MCP-server)** (by ProgramComputer) - Access to a unified gateway of NASA's data sources including but not limited to APOD, NEO, EPIC, GIBS.\n- **[Nasdaq Data Link](https://github.com/stefanoamorelli/nasdaq-data-link-mcp)** (by stefanoamorelli) - An MCP server to access, explore, and interact with Nasdaq Data Link’s extensive and valuable financial and economic datasets.\n- **[National Parks](https://github.com/KyrieTangSheng/mcp-server-nationalparks)** - The server provides latest information of park details, alerts, visitor centers, campgrounds, hiking trails, and events for U.S. National Parks.\n- **[NAVER](https://github.com/pfldy2850/py-mcp-naver)** (by pfldy2850) - This MCP server provides tools to interact with various Naver services, such as searching blogs, news, books, and more.\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[ntfy-mcp](https://github.com/teddyzxcv/ntfy-mcp)** (by teddyzxcv) - The MCP server that keeps you informed by sending the notification on phone using ntfy\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[OceanBase](https://github.com/yuanoOo/oceanbase_mcp_server)** - (by yuanoOo) A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OneNote](https://github.com/rajvirtual/MCP-Servers/tree/master/onenote)** - (by Rajesh Vijay) An MCP server that connects to Microsoft OneNote using the Microsoft Graph API. Reading notebooks, sections, and pages from OneNote,Creating new notebooks, sections, and pages in OneNote.\n- **[OpenAI WebSearch MCP](https://github.com/ConechoAI/openai-websearch-mcp)** - This is a Python-based MCP server that provides OpenAI `web_search` build-in tool.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenAPI AnyApi](https://github.com/baryhuang/mcp-server-any-openapi)** - Interact with large [OpenAPI](https://www.openapis.org/) docs using built-in semantic search for endpoints. Allows for customizing the MCP server prefix.\n- **[OpenAPI Schema](https://github.com/hannesj/mcp-openapi-schema)** - Allow LLMs to explore large [OpenAPI](https://www.openapis.org/) schemas without bloating the context.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenDota](https://github.com/asusevski/opendota-mcp-server)** - Interact with OpenDota API to retrieve Dota 2 match data, player statistics, and more.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Productboard](https://github.com/kenjihikmatullah/productboard-mcp)** - Integrate the Productboard API into agentic workflows via MCP.\n- **[Prometheus](https://github.com/pab1it0/prometheus-mcp-server)** - Query and analyze Prometheus - open-source monitoring system.\n- **[Pulumi](https://github.com/dogukanakkaya/pulumi-mcp-server)** - MCP Server to Interact with Pulumi API, creates and lists Stacks\n- **[Pushover](https://github.com/ashiknesin/pushover-mcp)** - Send instant notifications to your devices using [Pushover.net](https://pushover.net/)\n- **[QGIS](https://github.com/jjsantos01/qgis_mcp)** - connects QGIS to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.\n- **[QuickChart](https://github.com/GongRzhe/Quickchart-MCP-Server)** - A Model Context Protocol server for generating charts using QuickChart.io\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Rquest](https://github.com/xxxbrian/mcp-rquest)** - An MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - A MCP server to search for scholarly and academic articles.\n- **[scrapling-fetch](https://github.com/cyberchitta/scrapling-fetch-mcp)** - Access text content from bot-protected websites. Fetches HTML/markdown from sites with anti-automation measures using Scrapling.\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[ServiceNow](https://github.com/osomai/servicenow-mcp)** - A MCP server to interact with a ServiceNow instance\n- **[Shopify](https://github.com/GeLi2001/shopify-mcp)** - MCP to interact with Shopify API including order, product, customers and so on.\n- **[Siri Shortcuts](https://github.com/dvcrn/mcp-server-siri-shortcuts)** - MCP to interact with Siri Shortcuts on macOS. Exposes all Shortcuts as MCP tools.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protcool actions and growing\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Starwind UI](https://github.com/Boston343/starwind-ui-mcp/)** - This MCP provides relevant commands, documentation, and other information to allow LLMs to take full advantage of Starwind UI's open source Astro components.\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[ShaderToy](https://github.com/wilsonchenghy/ShaderToy-MCP)** - This MCP server lets LLMs to interact with the ShaderToy API, allowing LLMs to learn from compute shaders examples and enabling them to create complex GLSL shaders that they are previously not capable of.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[Telegram](https://github.com/chigwell/telegram-mcp)** - An MCP server that provides paginated chat reading, message retrieval, and message sending capabilities for Telegram through Telethon integration.\n- **[Terminal-Control](https://github.com/GongRzhe/terminal-controller-mcp)** - A MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.\n- **[TFT-Match-Analyzer](https://github.com/GeLi2001/tft-mcp-server)** - MCP server for teamfight tactics match history & match details fetching, providing user the detailed context for every match.\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Typesense](https://github.com/suhail-ak-s/mcp-typesense-server)** - A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Unity Catalog](https://github.com/ognis1205/mcp-server-unitycatalog)** - An MCP server that enables LLMs to interact with Unity Catalog AI, supporting CRUD operations on Unity Catalog Functions and executing them as MCP tools.\n- **[Unity3d Game Engine](https://github.com/CoderGamester/mcp-unity)** - An MCP server that enables LLMs to interact with Unity3d Game Engine, supporting access to a variety of the Unit's Editor engine tools (e.g. Console Logs, Test Runner logs, Editor functions, hierarchy state, etc) and executing them as MCP tools or gather them as resources.\n- **[Unity Integration (Advanced)](https://github.com/quazaai/UnityMCPIntegration)** - Advanced Unity3d Game Engine MCP which supports ,Execution of Any Editor Related Code Directly Inside of Unity, Fetch Logs, Get Editor State and Allow File Access of the Project making it much more useful in Script Editing or asset creation.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[VolcEngine TOS](https://github.com/dinghuazhou/sample-mcp-server-tos)** - A sample MCP server for VolcEngine TOS that flexibly get objects from TOS.\n- **[Wanaku MCP Router](https://github.com/wanaku-ai/wanaku/)** - The Wanaku MCP Router is a SSE-based MCP server that provides an extensible routing engine that allows integrating your enterprise systems with AI agents.\n- **[Webflow](https://github.com/kapilduraphe/webflow-mcp-server)** - Interfact with the Webflow APIs\n- **[whale-tracker-mcp](https://github.com/kukapay/whale-tracker-mcp)**  -  A mcp server for tracking cryptocurrency whale transactions. \n- **[Whois MCP](https://github.com/bharathvaj-ganesan/whois-mcp)** - MCP server that performs whois lookup against domain, IP, ASN and TLD. \n- **[Wikidata MCP](https://github.com/zzaebok/mcp-wikidata)** - Wikidata MCP server that interact with Wikidata, by searching identifiers, extracting metadata, and executing sparql query.\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[xcodebuild](https://github.com/ShenghaiWang/xcodebuild)**  - 🍎 Build iOS Xcode workspace/project and feed back errors to llm.\n- **[Xero-mcp-server](https://github.com/john-zhang-dev/xero-mcp)** - Enabling clients to interact with Xero system for streamlined accounting, invoicing, and business operations.\n- **[XiYan](https://github.com/XGenerationLab/xiyan_mcp_server)** - 🗄️ An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n- **[FastAPI to MCP auto generator](https://github.com/tadata-org/fastapi_mcp)** – A zero-configuration tool for automatically exposing FastAPI endpoints as MCP tools by **[Tadata](https://tadata.com/)**\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Higress MCP Server Hosting](https://github.com/alibaba/higress/tree/main/plugins/wasm-go/mcp-servers)** - A solution for hosting MCP Servers by extending the API Gateway (based on Envoy) with wasm plugins.\n* **[MCP-Framework](https://mcp-framework.com)** Build MCP servers with elegance and speed in Typescript. Comes with a CLI to create your project with `mcp create app`. Get started with your first server in under 5 minutes by **[Alex Andru](https://github.com/QuantGeekDev)**\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n* **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Discord Server (ModelContextProtocol)](https://discord.gg/jHEGxQu2a5)** – Connect with developers, share insights, and collaborate on projects in an active Discord community dedicated to the Model Context Protocol by **[Alex Andru](https://github.com/QuantGeekDev)**\n\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-guardian](https://github.com/eqtylab/mcp-guardian)** - GUI application + tools for proxying / managing control of MCP servers by **[EQTY Lab](https://eqtylab.io)**\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source MacOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcp.natoma.id](https://mcp.natoma.id)** - A Hosted MCP Platform to discover, install, manage and deploy MCP servers by **[Natoma Labs](https://www.natoma.id)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[mcp-dockmaster](https://mcp-dockmaster.com)** - An Open-Sourced UI to install and manage MCP servers for Windows, Linux and MacOS.\n- **[MCP Servers Rating and User Reviews](http://www.deepnlp.org/store/ai-agent/mcp-server)** - Website to rate MCP servers, write authentic user reviews, and [search engine for agent & mcp](http://www.deepnlp.org/search/agent)\n- <img height=\"12\" width=\"12\" src=\"https://mkinf.io/favicon-lilac.png\" alt=\"mkinf Logo\" /> **[mkinf](https://mkinf.io)** - An Open Source registry of hosted MCP Servers to accelerate AI agent workflows.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[r/modelcontextprotocol](https://www.reddit.com/r/modelcontextprotocol)** – A Model Context Protocol community Reddit page - discuss ideas, get answers to your questions, network with like-minded people, and showcase your projects! by **[Alex Andru](https://github.com/QuantGeekDev)**\n\n\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypescript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "chats",
        "conversations",
        "jasonmorganson servers",
        "tools jasonmorganson",
        "knowledge graph"
      ],
      "category": "crm-and-sales-tools"
    },
    "lkm1developer--hubspot-mcp-server": {
      "owner": "lkm1developer",
      "name": "hubspot-mcp-server",
      "url": "https://github.com/lkm1developer/hubspot-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/lkm1developer.webp",
      "description": "Connects AI assistants to HubSpot CRM, enabling operations such as managing contacts and accessing real-time data through natural language commands.",
      "stars": 13,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T22:24:33Z",
      "readme_content": "# HubSpot MCP Server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-4.9.5-blue.svg)](https://www.typescriptlang.org/)\n[![HubSpot API](https://img.shields.io/badge/HubSpot%20API-v3-orange.svg)](https://developers.hubspot.com/docs/api/overview)\n[![MCP SDK](https://img.shields.io/badge/MCP%20SDK-1.8.0-green.svg)](https://github.com/modelcontextprotocol/sdk)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA powerful Model Context Protocol (MCP) server implementation for seamless HubSpot CRM integration, enabling AI assistants to interact with your HubSpot data.\n\n## Overview\n\nThis MCP server provides a comprehensive set of tools for interacting with the HubSpot CRM API, allowing AI assistants to:\n\n- Create and manage contacts and companies in your HubSpot CRM\n- Retrieve detailed company activity history and engagement timelines\n- Access recent engagement data across your entire HubSpot instance\n- Get lists of recently active companies and contacts\n- Perform CRM operations without leaving your AI assistant interface\n\n## Why Use This MCP Server?\n\n- **Seamless AI Integration**: Connect your AI assistants directly to your HubSpot CRM data\n- **Simplified CRM Operations**: Perform common HubSpot tasks through natural language commands\n- **Real-time Data Access**: Get up-to-date information from your HubSpot instance\n- **Secure Authentication**: Uses HubSpot's secure API token authentication\n- **Extensible Design**: Easily add more HubSpot API capabilities as needed\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/lkm1developer/hubspot-mcp-server.git\ncd hubspot-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Configuration\n\nThe server requires a HubSpot API access token. You can obtain one by:\n\n1. Going to your [HubSpot Developer Account](https://developers.hubspot.com/)\n2. Creating a private app with the necessary scopes (contacts, companies, engagements)\n3. Copying the generated access token\n\nYou can provide the token in two ways:\n\n1. As an environment variable:\n   ```\n   HUBSPOT_ACCESS_TOKEN=your-access-token\n   ```\n\n2. As a command-line argument:\n   ```\n   npm start -- --access-token=your-access-token\n   ```\n\nFor development, create a `.env` file in the project root to store your environment variables:\n\n```\nHUBSPOT_ACCESS_TOKEN=your-access-token\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\n# Start the server\nnpm start\n\n# Or with a specific access token\nnpm start -- --access-token=your-access-token\n\n# Run the SSE server with authentication\nnpx mcp-proxy-auth node dist/index.js\n```\n\n### Implementing Authentication in SSE Server\n\nThe SSE server uses the [mcp-proxy-auth](https://www.npmjs.com/package/mcp-proxy-auth) package for authentication. To implement authentication:\n\n1. Install the package:\n   ```bash\n   npm install mcp-proxy-auth\n   ```\n\n2. Set the `AUTH_SERVER_URL` environment variable to point to your API key verification endpoint:\n   ```bash\n   export AUTH_SERVER_URL=https://your-auth-server.com/verify\n   ```\n\n3. Run the SSE server with authentication:\n   ```bash\n   npx mcp-proxy-auth node dist/index.js\n   ```\n\n4. The SSE URL will be available at:\n   ```\n   localhost:8080/sse?apiKey=apikey\n   ```\n\n   Replace `apikey` with your actual API key for authentication.\n\nThe `mcp-proxy-auth` package acts as a proxy that:\n- Intercepts requests to your SSE server\n- Verifies API keys against your authentication server\n- Only allows authenticated requests to reach your SSE endpoint\n\n### Integrating with AI Assistants\n\nThis MCP server is designed to work with AI assistants that support the Model Context Protocol. Once running, the server exposes a set of tools that can be used by compatible AI assistants to interact with your HubSpot CRM data.\n\n### Available Tools\n\nThe server exposes the following powerful HubSpot integration tools:\n\n1. **hubspot_create_contact**\n   - Create a new contact in HubSpot with duplicate checking\n   - Parameters:\n     - `firstname` (string, required): Contact's first name\n     - `lastname` (string, required): Contact's last name\n     - `email` (string, optional): Contact's email address\n     - `properties` (object, optional): Additional contact properties like company, phone, etc.\n   - Example:\n     ```json\n     {\n       \"firstname\": \"John\",\n       \"lastname\": \"Doe\",\n       \"email\": \"john.doe@example.com\",\n       \"properties\": {\n         \"company\": \"Acme Inc\",\n         \"phone\": \"555-123-4567\",\n         \"jobtitle\": \"Software Engineer\"\n       }\n     }\n     ```\n\n2. **hubspot_create_company**\n   - Create a new company in HubSpot with duplicate checking\n   - Parameters:\n     - `name` (string, required): Company name\n     - `properties` (object, optional): Additional company properties\n   - Example:\n     ```json\n     {\n       \"name\": \"Acme Corporation\",\n       \"properties\": {\n         \"domain\": \"acme.com\",\n         \"industry\": \"Technology\",\n         \"phone\": \"555-987-6543\",\n         \"city\": \"San Francisco\",\n         \"state\": \"CA\"\n       }\n     }\n     ```\n\n3. **hubspot_get_company_activity**\n   - Get comprehensive activity history for a specific company\n   - Parameters:\n     - `company_id` (string, required): HubSpot company ID\n   - Returns detailed engagement data including emails, calls, meetings, notes, and tasks\n\n4. **hubspot_get_recent_engagements**\n   - Get recent engagement activities across all contacts and companies\n   - Parameters:\n     - `days` (number, optional, default: 7): Number of days to look back\n     - `limit` (number, optional, default: 50): Maximum number of engagements to return\n   - Returns a chronological list of all recent CRM activities\n\n5. **hubspot_get_active_companies**\n   - Get most recently active companies from HubSpot\n   - Parameters:\n     - `limit` (number, optional, default: 10): Maximum number of companies to return\n   - Returns companies sorted by last modified date\n\n6. **hubspot_get_active_contacts**\n   - Get most recently active contacts from HubSpot\n   - Parameters:\n     - `limit` (number, optional, default: 10): Maximum number of contacts to return\n   - Returns contacts sorted by last modified date\n\n7. **hubspot_update_contact**\n   - Update an existing contact in HubSpot (ignores if contact does not exist)\n   - Parameters:\n     - `contact_id` (string, required): HubSpot contact ID to update\n     - `properties` (object, required): Contact properties to update\n   - Example:\n     ```json\n     {\n       \"contact_id\": \"12345\",\n       \"properties\": {\n         \"email\": \"updated.email@example.com\",\n         \"phone\": \"555-987-6543\",\n         \"jobtitle\": \"Senior Software Engineer\"\n       }\n     }\n     ```\n\n8. **hubspot_update_company**\n   - Update an existing company in HubSpot (ignores if company does not exist)\n   - Parameters:\n     - `company_id` (string, required): HubSpot company ID to update\n     - `properties` (object, required): Company properties to update\n   - Example:\n     ```json\n     {\n       \"company_id\": \"67890\",\n       \"properties\": {\n         \"domain\": \"updated-domain.com\",\n         \"phone\": \"555-123-4567\",\n         \"industry\": \"Software\",\n         \"city\": \"New York\",\n         \"state\": \"NY\"\n       }\n     }\n     ```\n\n## Extending the Server\n\nThe server is designed to be easily extensible. To add new HubSpot API capabilities:\n\n1. Add new methods to the `HubSpotClient` class in `src/hubspot-client.ts`\n2. Register new tools in the `setupToolHandlers` method in `src/index.ts`\n3. Rebuild the project with `npm run build`\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Keywords\n\nHubSpot, CRM, Model Context Protocol, MCP, AI Assistant, TypeScript, API Integration, HubSpot API, CRM Integration, Contact Management, Company Management, Engagement Tracking, AI Tools\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot",
        "crm",
        "lkm1developer",
        "hubspot crm",
        "assistants hubspot",
        "hubspot mcp"
      ],
      "category": "crm-and-sales-tools"
    },
    "maton-ai--agent-toolkit": {
      "owner": "maton-ai",
      "name": "agent-toolkit",
      "url": "https://github.com/maton-ai/agent-toolkit",
      "imageUrl": "/freedevtools/mcp/pfp/maton-ai.webp",
      "description": "Integrate with various SaaS tools such as HubSpot and Salesforce through function calling. Supports a range of API actions for interacting with Maton services.",
      "stars": 28,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-20T15:51:10Z",
      "readme_content": "# Maton Agent Toolkit\n\nThe Maton Agent Toolkit enables popular agent frameworks including Model Context Protocol (MCP) to integrate with Maton APIs through function calling. The library is not exhaustive of the entire Maton API. It includes support for Typescript.\n\nThe toolkit was inspired by [Stripe Agent Toolkit][stripe-agent-toolkit], and its implementation shares similarities with the Stripe Agent Toolkit codebase.\n\nIncluded below are basic instructions, but refer to the [TypeScript](/typescript) package for more information.\n\nTo get started, get your API key in your [Maton Dashboard][api-keys] and check out [documentation][docs].\n\n## TypeScript\n\n### Installation\n\nYou don't need this source code unless you want to modify the package. If you just\nwant to use the package run:\n\n```\nnpm install @maton/agent-toolkit\n```\n\n#### Requirements\n\n- Node 18+\n\n### Usage\n\n## Model Context Protocol\n\nThe Maton Agent Toolkit also supports the [Model Context Protocol (MCP)](https://modelcontextprotocol.com/).\n\nTo run the Maton MCP server using npx, use the following command:\n\n### API Agent (Beta)\n\n```bash\n# To use API agent\nnpx -y @maton/mcp hubspot --agent --api-key=YOUR_MATON_API_KEY\n```\n\n### API Action\n\n```bash\n# To set up all available API actions\nnpx -y @maton/mcp hubspot --actions=all --api-key=YOUR_MATON_API_KEY\n\n# To set up all available API actions\nnpx -y @maton/mcp hubspot --actions=create-contact,list-contacts --api-key=YOUR_MATON_API_KEY\n```\n\nReplace `YOUR_MATON_API_KEY` with your actual Maton API key. Or, you could set the MATON_API_KEY in your environment variables. You can get your API key in your [Maton Dashboard][api-keys].\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`. See [here](https://modelcontextprotocol.io/quickstart/user) for more details.\n\n```\n{\n  \"mcpServers\": {\n    \"maton\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@maton/mcp@latest\",\n        \"hubspot\",\n        \"--actions=all\",\n        \"--api-key=YOUR_MATON_API_KEY\"\n      ]\n    }\n  }\n}\n```\n\nMake sure to replace `YOUR_MATON_API_KEY` with your actual Maton API key. Alternatively, you could set the MATON_API_KEY in `env` variables. You can get your API key in your [Maton Dashboard][api-keys].\n\n## Available API actions\n\n| App               | Action                                |\n| ----------------- | ------------------------------------- |\n| `airtable`        | `list-bases`                          |\n| `airtable`        | `list-records`                        |\n| `airtable`        | `list-tables`                         |\n| `asana`           | `create-task`                         |\n| `asana`           | `get-task`                            |\n| `asana`           | `list-projects`                       |\n| `asana`           | `list-tasks`                          |\n| `asana`           | `list-workspaces`                     |\n| `aws`             | `get-s3-object`                       |\n| `aws`             | `list-s3-buckets`                     |\n| `aws`             | `list-s3-objects`                     |\n| `calendly`        | `get-event`                           |\n| `calendly`        | `list-event-invitees`                 |\n| `calendly`        | `list-event-types`                    |\n| `calendly`        | `list-events`                         |\n| `clickup`         | `create-task`                         |\n| `clickup`         | `delete-task`                         |\n| `clickup`         | `get-task`                            |\n| `clickup`         | `list-folders`                        |\n| `clickup`         | `list-lists`                          |\n| `clickup`         | `list-spaces`                         |\n| `clickup`         | `list-tasks`                          |\n| `clickup`         | `list-workspaces`                     |\n| `google-calendar` | `create-event`                        |\n| `google-calendar` | `delete-event`                        |\n| `google-calendar` | `get-calendar`                        |\n| `google-calendar` | `get-event`                           |\n| `google-calendar` | `list-calendars`                      |\n| `google-calendar` | `list-events`                         |\n| `google-calendar` | `update-event`                        |\n| `google-docs`     | `append-text`                         |\n| `google-docs`     | `create-document`                     |\n| `google-docs`     | `find-document`                       |\n| `google-docs`     | `get-document`                        |\n| `google-drive`    | `create-file`                         |\n| `google-drive`    | `create-folder`                       |\n| `google-drive`    | `delete-file`                         |\n| `google-drive`    | `find-file`                           |\n| `google-drive`    | `find-folder`                         |\n| `google-drive`    | `get-file`                            |\n| `google-drive`    | `list-files`                          |\n| `google-mail`     | `add-label-to-email`                  |\n| `google-mail`     | `create-draft`                        |\n| `google-mail`     | `find-email`                          |\n| `google-mail`     | `list-labels`                         |\n| `google-mail`     | `send-email`                          |\n| `google-mail`     | `remove-label-from-email`             |\n| `google-sheet`    | `add-column`                          |\n| `google-sheet`    | `add-multiple-rows`                   |\n| `google-sheet`    | `clear-cell`                          |\n| `google-sheet`    | `clear-rows`                          |\n| `google-sheet`    | `create-spreadsheet`                  |\n| `google-sheet`    | `create-worksheet`                    |\n| `google-sheet`    | `delete-rows`                         |\n| `google-sheet`    | `delete-worksheet`                    |\n| `google-sheet`    | `find-row`                            |\n| `google-sheet`    | `get-cell`                            |\n| `google-sheet`    | `get-spreadsheet`                     |\n| `google-sheet`    | `get-values-in-range`                 |\n| `google-sheet`    | `list-worksheets`                     |\n| `google-sheet`    | `update-cell`                         |\n| `google-sheet`    | `update-multiple-rows`                |\n| `google-sheet`    | `update-row`                          |\n| `hubspot`         | `create-contact`                      |\n| `hubspot`         | `get-contact`                         |\n| `hubspot`         | `list-contacts`                       |\n| `hubspot`         | `search-contacts`                     |\n| `hubspot`         | `merge-contacts`                      |\n| `hubspot`         | `update-contact`                      |\n| `hubspot`         | `delete-contact`                      |\n| `hubspot`         | `create-deal`                         |\n| `hubspot`         | `get-deal`                            |\n| `hubspot`         | `list-deals`                          |\n| `hubspot`         | `search-deals`                        |\n| `hubspot`         | `merge-deals`                         |\n| `hubspot`         | `update-deal`                         |\n| `hubspot`         | `delete-deal`                         |\n| `jira`            | `list-clouds`                         |\n| `jira`            | `get-issue`                           |\n| `jira`            | `list-issues`                         |\n| `jira`            | `add-comment-to-issue`                |\n| `jira`            | `list-comments`                       |\n| `jira`            | `update-comment`                      |\n| `jira`            | `list-projects`                       |\n| `jira`            | `get-user`                            |\n| `jira`            | `list-users`                          |\n| `jotform`         | `list-forms`                          |\n| `jotform`         | `list-submissions`                    |\n| `klaviyo`         | `add-profiles-to-list`                |\n| `klaviyo`         | `assign-template-to-campaign-message` |\n| `klaviyo`         | `create-campaign`                     |\n| `klaviyo`         | `create-list`                         |\n| `klaviyo`         | `create-profile`                      |\n| `klaviyo`         | `create-template`                     |\n| `klaviyo`         | `get-campaign-messages`               |\n| `klaviyo`         | `get-campaign-send-job`               |\n| `klaviyo`         | `get-campaigns`                       |\n| `klaviyo`         | `get-lists`                           |\n| `klaviyo`         | `get-profiles-for-list`               |\n| `klaviyo`         | `get-profiles`                        |\n| `klaviyo`         | `get-templates`                       |\n| `klaviyo`         | `send-campaign`                       |\n| `mailchimp`       | `get-campaign`                        |\n| `mailchimp`       | `search-campaign`                     |\n| `notion`          | `create-page`                         |\n| `notion`          | `find-page`                           |\n| `notion`          | `get-page`                            |\n| `outlook`         | `create-draft`                        |\n| `outlook`         | `find-email`                          |\n| `outlook`         | `send-email`                          |\n| `pipedrive`       | `search-people`                       |\n| `salesforce`      | `create-contact`                      |\n| `salesforce`      | `get-contact`                         |\n| `salesforce`      | `list-contacts`                       |\n| `shopify`         | `create-order`                        |\n| `shopify`         | `get-order`                           |\n| `shopify`         | `list-orders`                         |\n| `slack`           | `list-channels`                       |\n| `slack`           | `list-messages`                       |\n| `slack`           | `list-replies`                        |\n| `slack`           | `send-message`                        |\n| `stripe`          | `create-customer`                     |\n| `stripe`          | `create-invoice-item`                 |\n| `stripe`          | `create-invoice`                      |\n| `stripe`          | `delete-customer`                     |\n| `stripe`          | `get-customer`                        |\n| `stripe`          | `get-invoice`                         |\n| `stripe`          | `list-customers`                      |\n| `stripe`          | `list-invoices`                       |\n| `typeform`        | `get-form`                            |\n| `typeform`        | `list-forms`                          |\n| `typeform`        | `list-responses`                      |\n| `youtube`         | `list-videos`                         |\n| `youtube`         | `search-videos`                       |\n\n[api-keys]: https://maton.ai/api-keys\n[docs]: https://maton.ai/docs/api-reference\n[stripe-agent-toolkit]: https://github.com/stripe/agent-toolkit\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "toolkit",
        "tools",
        "agent toolkit",
        "maton services",
        "saas tools"
      ],
      "category": "crm-and-sales-tools"
    },
    "peakmojo--mcp-hubspot": {
      "owner": "peakmojo",
      "name": "mcp-hubspot",
      "url": "https://github.com/peakmojo/mcp-hubspot",
      "imageUrl": "/freedevtools/mcp/pfp/peakmojo.webp",
      "description": "Integrate with HubSpot CRM to access contacts, companies, and engagement data. Utilize built-in vector storage and caching to enhance performance and overcome API limitations.",
      "stars": 104,
      "forks": 52,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T21:24:40Z",
      "readme_content": "# HubSpot MCP Server\n[![Docker Hub](https://img.shields.io/docker/pulls/buryhuang/mcp-hubspot?label=Docker%20Hub)](https://hub.docker.com/r/buryhuang/mcp-hubspot) \n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Overview\n\nA Model Context Protocol (MCP) server that enables AI assistants to interact with HubSpot CRM data. This server bridges AI models with your HubSpot account, providing direct access to contacts, companies, and engagement data. Built-in vector storage and caching mechanisms help overcome HubSpot API limitations while improving response times.\n\nOur implementation prioritizes the most frequently used, high-value HubSpot operations with robust error handling and API stability. Each component is optimized for AI-friendly interactions, ensuring reliable performance even during complex, multi-step CRM workflows.\n\n## Why MCP-HubSpot?\n\n- **Direct CRM Access**: Connect Claude and other AI assistants to your HubSpot data without intermediary steps\n- **Context Retention**: Vector storage with FAISS enables semantic search across previous interactions\n- **Zero Configuration**: Simple Docker deployment with minimal setup\n\n## Example Prompts\n\n```\nCreate HubSpot contacts and companies from this LinkedIn profile:\n[Paste LinkedIn profile text]\n```\n\n```\nWhat's happening lately with my pipeline?\n```\n\n## Available Tools\n\nThe server offers tools for HubSpot management and data retrieval:\n\n| Tool | Purpose |\n|------|---------|\n| `hubspot_create_contact` | Create contacts with duplicate prevention |\n| `hubspot_create_company` | Create companies with duplicate prevention |\n| `hubspot_get_company_activity` | Retrieve activity for specific companies |\n| `hubspot_get_active_companies` | Retrieve most recently active companies |\n| `hubspot_get_active_contacts` | Retrieve most recently active contacts |\n| `hubspot_get_recent_conversations` | Retrieve recent conversation threads with messages |\n| `hubspot_search_data` | Semantic search across previously retrieved HubSpot data |\n\n## Performance Features\n\n- **Vector Storage**: Utilizes FAISS for efficient semantic search and retrieval\n- **Thread-Level Indexing**: Stores each conversation thread individually for precise retrieval\n- **Embedding Caching**: Uses SentenceTransformer with automatic caching\n- **Persistent Storage**: Data persists between sessions in configurable storage directory\n- **Multi-platform Support**: Optimized Docker images for various architectures\n\n## Setup\n\n### Prerequisites\n\nYou'll need a HubSpot access token with these scopes:\n- crm.objects.contacts (read/write)\n- crm.objects.companies (read/write)\n- sales-email-read\n\n### Quick Start\n\n```bash\n# Install via Smithery (recommended)\nnpx -y @smithery/cli@latest install mcp-hubspot --client claude\n\n# Or pull Docker image directly\ndocker run -e HUBSPOT_ACCESS_TOKEN=your_token buryhuang/mcp-hubspot:latest\n```\n\n### Docker Configuration\n\nFor manual configuration in Claude desktop:\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-e\", \"HUBSPOT_ACCESS_TOKEN=your_token\",\n        \"-v\", \"/path/to/storage:/storage\",  # Optional persistent storage\n        \"buryhuang/mcp-hubspot:latest\"\n      ]\n    }\n  }\n}\n```\n\n### Building Docker Image\n\nTo build the Docker image locally:\n\n```bash\ngit clone https://github.com/buryhuang/mcp-hubspot.git\ncd mcp-hubspot\ndocker build -t mcp-hubspot .\n```\n\nFor multi-platform builds:\n\n```bash\ndocker buildx create --use\ndocker buildx build --platform linux/amd64,linux/arm64 -t buryhuang/mcp-hubspot:latest --push .\n```\n\n## Development\n\n```bash\npip install -e .\n```\n\n## License\n\nMIT License \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot",
        "crm",
        "peakmojo",
        "hubspot crm",
        "mcp hubspot",
        "integrate hubspot"
      ],
      "category": "crm-and-sales-tools"
    },
    "peancor--moodle-mcp-server": {
      "owner": "peancor",
      "name": "moodle-mcp-server",
      "url": "https://github.com/peancor/moodle-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/peancor.webp",
      "description": "Manage Moodle courses, students, assignments, and quizzes through integration with LLMs, enabling automation of feedback and progress tracking.",
      "stars": 19,
      "forks": 8,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-04T09:57:07Z",
      "readme_content": "# Moodle MCP Server\n\nAn MCP (Model Context Protocol) server that enables LLMs to interact with the Moodle platform to manage courses, students, assignments, and quizzes.\n\n## Features\n\n### Student Management Tools\n- `list_students` - Retrieves the list of students enrolled in the course\n  - Displays ID, name, email, and last access time for each student\n\n### Assignment Management Tools\n- `get_assignments` - Retrieves all available assignments in the course\n  - Includes information such as ID, name, description, due date, and maximum grade\n- `get_student_submissions` - Examines a student's submissions for a specific assignment\n  - Requires the assignment ID and optionally the student ID\n- `provide_assignment_feedback` - Provides grades and comments for a student's submission\n  - Requires student ID, assignment ID, grade, and feedback comment\n\n### Quiz Management Tools\n- `get_quizzes` - Retrieves all available quizzes in the course\n  - Includes information such as ID, name, description, opening/closing dates, and maximum grade\n- `get_quiz_attempts` - Examines a student's attempts on a specific quiz\n  - Requires the quiz ID and optionally the student ID\n- `provide_quiz_feedback` - Provides comments for a quiz attempt\n  - Requires the attempt ID and feedback comment\n\n## Requirements\n\n- Node.js (v14 or higher)\n- Moodle API token with appropriate permissions\n- Moodle course ID\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/your-username/moodle-mcp-server.git\ncd moodle-mcp-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Create a `.env` file with the following configuration:\n```\nMOODLE_API_URL=https://your-moodle.com/webservice/rest/server.php\nMOODLE_API_TOKEN=your_api_token\nMOODLE_COURSE_ID=1  # Replace with your course ID\n```\n\n4. Build the server:\n```bash\nnpm run build\n```\n\n## Usage with Claude\n\nTo use with Claude Desktop, add the server configuration:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`  \nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"moodle-mcp-server\": {\n      \"command\": \"/path/to/node\",\n      \"args\": [\n        \"/path/to/moodle-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"MOODLE_API_URL\": \"https://your-moodle.com/webservice/rest/server.php\",\n        \"MOODLE_API_TOKEN\": \"your_moodle_api_token\",\n        \"MOODLE_COURSE_ID\": \"your_course_id\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nFor Windows users, the paths would use backslashes:\n\n```json\n{\n  \"mcpServers\": {\n    \"moodle-mcp-server\": {\n      \"command\": \"C:\\\\path\\\\to\\\\node.exe\",\n      \"args\": [\n        \"C:\\\\path\\\\to\\\\moodle-mcp-server\\\\build\\\\index.js\"\n      ],\n      \"env\": {\n        \"MOODLE_API_URL\": \"https://your-moodle.com/webservice/rest/server.php\",\n        \"MOODLE_API_TOKEN\": \"your_moodle_api_token\",\n        \"MOODLE_COURSE_ID\": \"your_course_id\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nOnce configured, Claude will be able to interact with your Moodle course to:\n- View the list of students and their submissions\n- Provide comments and grades for assignments\n- Examine quiz attempts and offer feedback\n\n## Development\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nMCP servers communicate through stdio, which can make debugging challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector):\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n## Obtaining a Moodle API Token\n\n1. Log in to your Moodle site as an administrator\n2. Go to Site Administration > Plugins > Web Services > Manage tokens\n3. Create a new token with the necessary permissions to manage courses\n4. Copy the generated token and add it to your `.env` file\n\n## Security\n\n- Never share your `.env` file or Moodle API token\n- Ensure the MCP server only has access to the courses it needs to manage\n- Use a token with the minimum necessary permissions\n\n## License\n\n[MIT](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "moodle",
        "crm",
        "llms",
        "manage moodle",
        "moodle courses",
        "moodle mcp"
      ],
      "category": "crm-and-sales-tools"
    },
    "reminia--zendesk-mcp-server": {
      "owner": "reminia",
      "name": "zendesk-mcp-server",
      "url": "https://github.com/reminia/zendesk-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/reminia.webp",
      "description": "Integrates with Zendesk for managing tickets and comments, providing tools for ticket analysis and response drafting, along with access to Zendesk Help Center articles.",
      "stars": 32,
      "forks": 22,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-01T07:05:21Z",
      "readme_content": "# Zendesk MCP Server\n\n![ci](https://github.com/reminia/zendesk-mcp-server/actions/workflows/ci.yml/badge.svg)\n[![License](https://img.shields.io/badge/License-Apache_2.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n\nA Model Context Protocol server for Zendesk.\n\nThis server provides a comprehensive integration with Zendesk. It offers:\n\n- Tools for retrieving and managing Zendesk tickets and comments\n- Specialized prompts for ticket analysis and response drafting\n- Full access to the Zendesk Help Center articles as knowledge base\n\n![demo](https://res.cloudinary.com/leecy-me/image/upload/v1736410626/open/zendesk_yunczu.gif)\n\n## Setup\n\n- build: `uv venv && uv pip install -e .` or `uv build` in short.\n- setup zendesk credentials in `.env` file, refer to [.env.example](.env.example).\n- configure in Claude desktop:\n\n```json\n{\n  \"mcpServers\": {\n      \"zendesk\": {\n          \"command\": \"uv\",\n          \"args\": [\n              \"--directory\",\n              \"/path/to/zendesk-mcp-server\",\n              \"run\",\n              \"zendesk\"\n          ]\n      }\n  }\n}\n```\n\n## Resources\n\n- zendesk://knowledge-base, get access to the whole help center articles.\n\n## Prompts\n\n### analyze-ticket\n\nAnalyze a Zendesk ticket and provide a detailed analysis of the ticket.\n\n### draft-ticket-response\n\nDraft a response to a Zendesk ticket.\n\n## Tools\n\n### get_tickets\n\nFetch the latest tickets with pagination support\n\n- Input:\n  - `page` (integer, optional): Page number (defaults to 1)\n  - `per_page` (integer, optional): Number of tickets per page, max 100 (defaults to 25)\n  - `sort_by` (string, optional): Field to sort by - created_at, updated_at, priority, or status (defaults to created_at)\n  - `sort_order` (string, optional): Sort order - asc or desc (defaults to desc)\n\n- Output: Returns a list of tickets with essential fields including id, subject, status, priority, description, timestamps, and assignee information, along with pagination metadata\n\n### get_ticket\n\nRetrieve a Zendesk ticket by its ID\n\n- Input:\n  - `ticket_id` (integer): The ID of the ticket to retrieve\n\n### get_ticket_comments\n\nRetrieve all comments for a Zendesk ticket by its ID\n\n- Input:\n  - `ticket_id` (integer): The ID of the ticket to get comments for\n\n### create_ticket_comment\n\nCreate a new comment on an existing Zendesk ticket\n\n- Input:\n  - `ticket_id` (integer): The ID of the ticket to comment on\n  - `comment` (string): The comment text/content to add\n  - `public` (boolean, optional): Whether the comment should be public (defaults to true)\n\n### create_ticket\n\nCreate a new Zendesk ticket\n\n- Input:\n  - `subject` (string): Ticket subject\n  - `description` (string): Ticket description\n  - `requester_id` (integer, optional)\n  - `assignee_id` (integer, optional)\n  - `priority` (string, optional): one of `low`, `normal`, `high`, `urgent`\n  - `type` (string, optional): one of `problem`, `incident`, `question`, `task`\n  - `tags` (array[string], optional)\n  - `custom_fields` (array[object], optional)\n\n### update_ticket\n\nUpdate fields on an existing Zendesk ticket (e.g., status, priority, assignee)\n\n- Input:\n  - `ticket_id` (integer): The ID of the ticket to update\n  - `subject` (string, optional)\n  - `status` (string, optional): one of `new`, `open`, `pending`, `on-hold`, `solved`, `closed`\n  - `priority` (string, optional): one of `low`, `normal`, `high`, `urgent`\n  - `type` (string, optional)\n  - `assignee_id` (integer, optional)\n  - `requester_id` (integer, optional)\n  - `tags` (array[string], optional)\n  - `custom_fields` (array[object], optional)\n  - `due_at` (string, optional): ISO8601 datetime",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zendesk",
        "crm",
        "tickets",
        "zendesk managing",
        "zendesk mcp",
        "access zendesk"
      ],
      "category": "crm-and-sales-tools"
    },
    "salesforce-mcp--salesforce-mcp": {
      "owner": "salesforce-mcp",
      "name": "salesforce-mcp",
      "url": "https://github.com/salesforce-mcp/salesforce-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Interact with Salesforce data and metadata through natural language commands to gain insights, manage records, and configure the platform. Perform actions like creating, updating, and deleting Salesforce objects and fields, as well as automating tasks.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "mcp",
        "tools",
        "mcp salesforce",
        "salesforce mcp",
        "tools salesforce"
      ],
      "category": "crm-and-sales-tools"
    },
    "scopiousdigital--hubspot-mcp": {
      "owner": "scopiousdigital",
      "name": "hubspot-mcp",
      "url": "https://github.com/scopiousdigital/hubspot-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/scopiousdigital.webp",
      "description": "Interact with HubSpot CRM to access and manage contacts, deals, and companies for sales analysis. Use powerful analytics tools to drive insights and optimize sales performance.",
      "stars": 9,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-05-01T11:33:29Z",
      "readme_content": "# HubSpot MCP Server\n\nMCP Server for the HubSpot API, enabling Claude to interact with HubSpot CRM for sales analysis and insights.\n\n> #### Disclaimer\n>\n> This open-source project is not affiliated with or endorsed by HubSpot. It is an independent implementation that interacts with HubSpot's API.\n\n## Tools\n\n### Core CRM Tools\n\n1. `hubspot_search_contacts`\n\n   - Search for contacts in HubSpot using a query string\n   - Required inputs:\n     - `query` (string): Search query string (email, name, etc.)\n   - Optional inputs:\n     - `count` (number, default: 10): Maximum number of contacts to return\n     - `propertyList` (array): List of properties to include in results\n   - Returns: List of matching contacts with their properties\n\n2. `hubspot_get_contact`\n\n   - Get a specific contact by ID\n   - Required inputs:\n     - `contactId` (string): The ID of the contact to retrieve\n   - Optional inputs:\n     - `properties` (array): List of properties to include in results\n   - Returns: Contact details with specified properties\n\n3. `hubspot_create_contact`\n\n   - Create a new contact in HubSpot\n   - Required inputs:\n     - `properties` (object): Contact properties with at least `email` field\n   - Returns: Created contact details\n\n4. `hubspot_update_contact`\n\n   - Update an existing contact in HubSpot\n   - Required inputs:\n     - `contactId` (string): The ID of the contact to update\n     - `properties` (object): Contact properties to update\n   - Returns: Updated contact confirmation\n\n5. `hubspot_list_deals`\n\n   - List deals in HubSpot with pagination\n   - Optional inputs:\n     - `limit` (number, default: 10, max: 100): Maximum number of deals to return\n     - `after` (string): Pagination cursor for next page\n     - `properties` (array): List of properties to include in results\n   - Returns: List of deals with their details\n\n6. `hubspot_get_deal`\n\n   - Get a specific deal by ID\n   - Required inputs:\n     - `dealId` (string): The ID of the deal to retrieve\n   - Optional inputs:\n     - `properties` (array): List of properties to include in results\n   - Returns: Deal details with specified properties\n\n7. `hubspot_create_deal`\n\n   - Create a new deal in HubSpot\n   - Required inputs:\n     - `properties` (object): Deal properties with at least `dealname` field\n   - Returns: Created deal details\n\n8. `hubspot_update_deal`\n\n   - Update an existing deal in HubSpot\n   - Required inputs:\n     - `dealId` (string): The ID of the deal to update\n     - `properties` (object): Deal properties to update\n   - Returns: Updated deal confirmation\n\n9. `hubspot_list_companies`\n\n   - List companies in HubSpot with pagination\n   - Optional inputs:\n     - `limit` (number, default: 10, max: 100): Maximum number of companies to return\n     - `after` (string): Pagination cursor for next page\n     - `properties` (array): List of properties to include in results\n   - Returns: List of companies with their details\n\n10. `hubspot_get_company`\n    - Get a specific company by ID\n    - Required inputs:\n      - `companyId` (string): The ID of the company to retrieve\n    - Optional inputs:\n      - `properties` (array): List of properties to include in results\n    - Returns: Company details with specified properties\n\n### Sales Analytics Tools\n\n11. `hubspot_get_sales_analytics`\n\n    - Get aggregated sales analytics data for specific time periods\n    - Required inputs:\n      - `period` (string): Time period to group analytics data by (daily, weekly, monthly, quarterly, yearly)\n      - `startDate` (string): Start date for analysis in ISO format (YYYY-MM-DD)\n    - Optional inputs:\n      - `endDate` (string): End date for analysis in ISO format\n      - `pipeline` (string): Pipeline ID to filter by\n      - `dealStage` (string): Deal stage ID to filter by\n      - `dealOwner` (string): Deal owner ID to filter by\n    - Returns: Aggregated sales metrics grouped by time period\n\n12. `hubspot_get_deal_history`\n\n    - Get the complete history of changes to a deal\n    - Required inputs:\n      - `dealId` (string): The ID of the deal to get history for\n    - Returns: History of deal changes with timestamps and modified properties\n\n13. `hubspot_get_deal_notes`\n\n    - Get notes associated with a specific deal\n    - Required inputs:\n      - `dealId` (string): The ID of the deal to get notes for\n    - Optional inputs:\n      - `limit` (number, default: 20): Maximum number of notes to return\n      - `after` (string): Pagination cursor for next page of results\n    - Returns: List of notes with their content and creation timestamps\n\n14. `hubspot_get_engagements_by_deal`\n\n    - Get all engagement activities associated with a deal\n    - Required inputs:\n      - `dealId` (string): The ID of the deal to get engagements for\n    - Optional inputs:\n      - `types` (array): Types of engagements to include (CALL, EMAIL, MEETING, TASK, NOTE)\n      - `limit` (number, default: 20): Maximum number of engagements to return\n      - `after` (string): Pagination cursor for next page of results\n    - Returns: List of engagements with their details and type information\n\n15. `hubspot_get_sales_performance`\n\n    - Get performance metrics for sales reps over a specific time period\n    - Required inputs:\n      - `period` (string): Time period to group performance data by (daily, weekly, monthly, quarterly, yearly)\n      - `startDate` (string): Start date for analysis in ISO format (YYYY-MM-DD)\n    - Optional inputs:\n      - `endDate` (string): End date for analysis in ISO format\n      - `ownerIds` (array): List of owner IDs to include in the analysis\n      - `pipeline` (string): Pipeline ID to filter by\n    - Returns: Performance metrics for each sales rep including deal counts, revenue, and win rates\n\n16. `hubspot_get_pipeline_analytics`\n\n    - Get analytics for a specific sales pipeline including conversion rates between stages\n    - Required inputs:\n      - `pipelineId` (string): The ID of the pipeline to analyze\n      - `period` (string): Time period to group analytics data by (daily, weekly, monthly, quarterly, yearly)\n      - `startDate` (string): Start date for analysis in ISO format (YYYY-MM-DD)\n    - Optional inputs:\n      - `endDate` (string): End date for analysis in ISO format\n    - Returns: Pipeline stage metrics including deal counts, values, conversion rates, and time in stage\n\n17. `hubspot_get_forecast_analytics`\n    - Get forecasted sales data based on current pipeline and historical performance\n    - Required inputs:\n      - `period` (string): Time period to group forecast data by (monthly, quarterly, yearly)\n    - Optional inputs:\n      - `numberOfPeriods` (number, default: 3): Number of future periods to forecast\n      - `pipeline` (string): Pipeline ID to filter by\n    - Returns: Forecasted sales metrics for future periods based on historical data and current pipeline\n\n## Setup\n\n1. Create a HubSpot Private App:\n\n   - Go to your HubSpot account\n   - Navigate to Settings → Account Setup → Integrations → Private Apps\n   - Click \"Create private app\"\n   - Name your app and set appropriate scopes (contacts, deals, and companies)\n   - Create the app and copy your private app token\n\n2. Required Scopes:\n   - `crm.objects.contacts.read`\n   - `crm.objects.contacts.write`\n   - `crm.objects.deals.read`\n   - `crm.objects.deals.write`\n   - `crm.objects.companies.read`\n   - `crm.objects.companies.write`\n   - `crm.objects.owners.read`\n   - `crm.objects.quotes.read`\n   - `crm.objects.line_items.read`\n   - `crm.objects.custom.read`\n   - `crm.schemas.deals.read`\n   - `crm.schemas.contacts.read`\n   - `crm.schemas.companies.read`\n   - `crm.schemas.custom.read`\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n#### npx\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-hubspot\"],\n      \"env\": {\n        \"HUBSPOT_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n#### docker\n\n```json\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-e\", \"HUBSPOT_API_KEY\", \"mcp/hubspot\"],\n      \"env\": {\n        \"HUBSPOT_API_KEY\": \"your-api-key-here\"\n      }\n    }\n  }\n}\n```\n\n### Troubleshooting\n\nIf you encounter errors, verify that:\n\n1. All required scopes are added to your HubSpot private app\n2. The API key is correctly copied to your configuration\n3. Your HubSpot plan includes access to the APIs you're trying to use\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/hubspot -f Dockerfile .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hubspot",
        "crm",
        "analytics",
        "hubspot crm",
        "hubspot mcp",
        "crm sales"
      ],
      "category": "crm-and-sales-tools"
    },
    "shinzo-labs--hubspot-mcp": {
      "owner": "shinzo-labs",
      "name": "hubspot-mcp",
      "url": "https://github.com/shinzo-labs/hubspot-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/shinzo-labs.webp",
      "description": "Access and manage CRM data through the HubSpot API, offering functionalities for handling Contacts, Companies, and their Associations. Supports complete coverage of standard CRM objects and advanced association management.",
      "stars": 22,
      "forks": 16,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T22:22:11Z",
      "readme_content": "<div align=\"center\">\n    <h1 align=\"center\">HubSpot MCP Server</h1>\n    <p align=center>\n        <a href=\"https://badge.fury.io/js/@shinzolabs%2Fhubspot-mcp\"><img src=\"https://badge.fury.io/js/@shinzolabs%2Fhubspot-mcp.svg\" alt=\"NPM Version\"></a>\n        <a href=\"https://github.com/shinzo-labs/hubspot-mcp/stargazers\"><img src=\"https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fapi.github.com%2Frepos%2Fshinzo-labs%2Fhubspot-mcp%2Fstargazers&query=%24.length&logo=github&label=stars&color=e3b341\" alt=\"Stars\"></a>\n        <a href=\"https://github.com/shinzo-labs/hubspot-mcp/forks\"><img src=\"https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fapi.github.com%2Frepos%2Fshinzo-labs%2Fhubspot-mcp%2Fforks&query=%24.length&logo=github&label=forks&color=8957e5\" alt=\"Forks\"></a>\n        <a href=\"https://smithery.ai/server/@shinzo-labs/hubspot-mcp\"><img src=\"https://smithery.ai/badge/@shinzo-labs/hubspot-mcp\" alt=\"Smithery Calls\"></a>\n        <a href=\"https://www.npmjs.com/package/@shinzolabs/hubspot-mcp\"><img src=\"https://img.shields.io/npm/dm/%40shinzolabs%2Fhubspot-mcp\" alt=\"NPM Downloads\"></a>\n</div>\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server implementation for the [HubSpot](https://hubspot.com/) API, providing a standardized interface for accessing and managing CRM data.\n\n<p align=\"center\"><img height=\"512\" src=https://github.com/user-attachments/assets/6a0febe5-1aa5-4998-affb-6c5874ed00c4></p>\n\n## Features\n\n- Complete coverage of the HubSpot CRM API\n- Support for all standard CRM objects (companies, contacts, deals, etc.)\n- Advanced association management with CRM Associations v4\n- Company-specific endpoints with property validation\n- Batch operations for efficient data management\n- Advanced search and filtering capabilities\n- Type-safe parameter validation with [Zod](https://zod.dev/)\n\n## Prerequisites\n\nIf you don't have an API key, follow the steps [here](https://developers.hubspot.com/docs/guides/api/overview) to obtain an access token. OAuth support is planned as a future enhancement.\n\n## Client Configuration\n\nThere are several options to configure your MCP client with the server. For hosted/remote server setup, use Smithery's CLI with a [Smithery API Key](https://smithery.ai/docs/registry#registry-api). For local installation, use `npx` or build from source. Each of these options is explained below.\n\n### Smithery Remote Server (Recommended)\n\nTo add a remote server to your MCP client `config.json`, run the following command from [Smithery CLI](https://github.com/smithery-ai/cli?tab=readme-ov-file#smithery-cli--):\n\n```bash\nnpx -y @smithery/cli install @shinzo-labs/hubspot-mcp\n```\n\nEnter your `HUBSPOT_ACCESS_TOKEN` when prompted.\n\n### Smithery SDK\n\nIf you are developing your own agent application, you can use the boilerplate code [here](https://smithery.ai/server/@shinzo-labs/hubspot-mcp/api).\n\n### NPX Local Install\n\nTo install the server locally with `npx`, add the following to your MCP client `config.json`:\n```javascript\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@shinzolabs/hubspot-mcp\"\n      ],\n      \"env\": {\n        \"HUBSPOT_ACCESS_TOKEN\": \"your-access-token-here\"\n      }\n    }\n  }\n}\n```\n\n### Build from Source\n\n1. Download the repo:\n```bash\ngit clone https://github.com/shinzo-labs/hubspot-mcp.git\n```\n\n2. Install packages (inside cloned repo):\n```bash\npnpm i\n```\n\n3. Add the following to your MCP client `config.json`:\n```javascript\n{\n  \"mcpServers\": {\n    \"hubspot\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/hubspot-mcp/index.js\"\n      ],\n      \"env\": {\n        \"HUBSPOT_ACCESS_TOKEN\": \"your-access-token-here\"\n      }\n    }\n  }\n}\n```\n\n## Config Variables\n\n| Variable               | Description                               | Required? | Default |\n|------------------------|-------------------------------------------|-----------|---------|\n| `HUBSPOT_ACCESS_TOKEN` | Access Token for Hubspot Application      | Yes       |         |\n| `PORT                ` | Port for Streamable HTTP transport method | No        | `3000`  |\n| `TELEMETRY_ENABLED`    | Enable telemetry                          | No        | `true`  |\n\n## Supported Tools\n\n### Core CRM Objects\n\n  - `crm_list_objects`: List CRM objects with optional filtering and pagination\n  - `crm_get_object`: Get a single CRM object by ID\n  - `crm_create_object`: Create a new CRM object\n  - `crm_update_object`: Update an existing CRM object\n  - `crm_archive_object`: Archive (delete) a CRM object\n  - `crm_search_objects`: Search CRM objects using advanced filters\n  - `crm_batch_create_objects`: Create multiple objects in a single request\n  - `crm_batch_read_objects`: Read multipl objects in a single request\n  - `crm_batch_update_objects`: Update multiple objects in a single request\n  - `crm_batch_archive_objects`: Archive (delete) multiple objects in a single request\n\n### Companies\n\n  - `crm_create_company`: Create a new company with validated properties\n  - `crm_update_company`: Update an existing company\n  - `crm_get_company`: Get a single company by ID\n  - `crm_search_companies`: Search companies with specific filters\n  - `crm_batch_create_companies`: Create multiple companies in a single request\n  - `crm_batch_update_companies`: Update multiple companies in a single request\n  - `crm_get_company_properties`: Get all available company properties\n  - `crm_create_company_property`: Create a new company property\n\n### Contacts\n\n  - `crm_create_contact`: Create a new contact with validated properties\n  - `crm_update_contact`: Update an existing contact's information\n  - `crm_get_contact`: Get a single contact by ID\n  - `crm_search_contacts`: Search contacts with specific filters\n  - `crm_batch_create_contacts`: Create multiple contacts in a single request\n  - `crm_batch_update_contacts`: Update multiple contacts in a single request\n  - `crm_get_contact_properties`: Get all available contact properties\n  - `crm_create_contact_property`: Create a new contact property\n\n### Leads\n\n  - `crm_create_lead`: Create a new lead with validated properties\n  - `crm_update_lead`: Update an existing lead's information\n  - `crm_get_lead`: Get a single lead by ID\n  - `crm_search_leads`: Search leads with specific filters\n  - `crm_batch_create_leads`: Create multiple leads in a single request\n  - `crm_batch_update_leads`: Update multiple leads in a single request\n  - `crm_get_lead_properties`: Get all available lead properties\n  - `crm_create_lead_property`: Create a new lead property\n\n### Engagement Management\n\n  - `engagement_details_get`: Get details of a specific engagement\n  - `engagement_details_create`: Create a new engagement\n  - `engagement_details_update`: Update an existing engagement\n  - `engagement_details_archive`: Archive (delete) an engagement\n  - `engagement_details_list`: List all engagements with filtering\n  - `engagement_details_get_associated`: Get associated engagements\n\n### Calls\n\n  - `calls_create`: Create a new call record\n  - `calls_get`: Get call details\n  - `calls_update`: Update a call record\n  - `calls_archive`: Archive a call\n  - `calls_list`: List all calls\n  - `calls_search`: Search calls\n  - `calls_batch_create`: Create multiple calls\n  - `calls_batch_read`: Read multiple calls\n  - `calls_batch_update`: Update multiple calls\n  - `calls_batch_archive`: Archive multiple calls\n\n### Emails\n\n  - `emails_create`: Create a new email record\n  - `emails_get`: Get email details\n  - `emails_update`: Update an email\n  - `emails_archive`: Archive an email\n  - `emails_list`: List all emails\n  - `emails_search`: Search emails\n  - `emails_batch_create`: Create multiple emails\n  - `emails_batch_read`: Read multiple emails\n  - `emails_batch_update`: Update multiple emails\n  - `emails_batch_archive`: Archive multiple emails\n\n### Meetings\n\n  - `meetings_create`: Create a new meeting\n  - `meetings_get`: Get meeting details\n  - `meetings_update`: Update a meeting\n  - `meetings_archive`: Archive (delete) a meeting\n  - `meetings_list`: List all meetings\n  - `meetings_search`: Search meetings\n  - `meetings_batch_create`: Create multiple meetings\n  - `meetings_batch_update`: Update multiple meetings\n  - `meetings_batch_archive`: Archive multiple meetings\n\n### Notes\n\n  - `notes_create`: Create a new note\n  - `notes_get`: Get note details\n  - `notes_update`: Update a note\n  - `notes_archive`: Archive a note\n  - `notes_list`: List all notes\n  - `notes_search`: Search notes\n  - `notes_batch_create`: Create multiple notes\n  - `notes_batch_read`: Read multiple notes\n  - `notes_batch_update`: Update multiple notes\n  - `notes_batch_archive`: Archive multiple notes\n\n### Tasks\n\n  - `tasks_create`: Create a new task\n  - `tasks_get`: Get task details\n  - `tasks_update`: Update a task\n  - `tasks_archive`: Archive a task\n  - `tasks_list`: List all tasks\n  - `tasks_search`: Search tasks\n  - `tasks_batch_create`: Create multiple tasks\n  - `tasks_batch_read`: Read multiple tasks\n  - `tasks_batch_update`: Update multiple tasks\n  - `tasks_batch_archive`: Archive multiple tasks\n\n### Associations and Relationships\n\n  - `crm_list_association_types`: List available association types\n  - `crm_get_associations`: Get all associations between objects\n  - `crm_create_association`: Create an association\n  - `crm_archive_association`: Archive (delete) an association\n  - `crm_batch_create_associations`: Create multiple associations\n  - `crm_batch_archive_associations`: Archive (delete) multiple associations\n\n### Communication Preferences\n\n  - `communications_get_preferences`: Get contact preferences\n  - `communications_update_preferences`: Update contact preferences\n  - `communications_unsubscribe_contact`: Global unsubscribe\n  - `communications_subscribe_contact`: Global subscribe\n  - `communications_get_subscription_definitions`: Get subscription definitions\n  - `communications_get_subscription_status`: Get status for multiple contacts\n  - `communications_update_subscription_status`: Update status for multiple contacts\n\n### Products\n\n  - `products_create`: Create a product with the given properties and return a copy of the object, including the ID.\n  - `products_read`: Read an Object identified by ID\n  - `products_update`: Perform a partial update of an Object identified by ID. Read-only and non-existent properties will result in an error. Properties values can be cleared by passing an empty string.\n  - `products_archive`: Move an Object identified by ID to the recycling bin.\n  - `products_list`: Read a page of products. Control what is returned via the `properties` query param. `after` is the paging cursor token of the last successfully read resource will be returned as the `paging.next.after` JSON property of a paged response containing more results.\n  - `products_search`: Search products\n  - `products_batch_create`: Create a batch of products\n  - `products_batch_read`: Read a batch of products by internal ID, or unique property values. Retrieve records by the `idProperty` parameter to retrieve records by a custom unique value property.\n  - `products_batch_update`: Update a batch of products by internal ID, or unique values specified by the `idProperty` query param.\n  - `products_batch_archive`: Archive a batch of products by ID\n\n## Contributing\n\nContributions are welcomed and encouraged! Please read [CONTRIBUTING.md](./CONTRIBUTING.md) for guidelines on issues, contributions, and contact information.\n\n## Data Collection and Privacy\n\nShinzo Labs collects limited anonymous telemetry from this server to help improve our products and services. No personally identifiable information is collected as part of this process. Please review the [Privacy Policy](./PRIVACY.md) for more details on the types of data collected and how to opt-out of this telemetry.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "hubspot",
        "tools",
        "hubspot api",
        "manage crm",
        "crm data"
      ],
      "category": "crm-and-sales-tools"
    },
    "smn2gnt--MCP-Salesforce": {
      "owner": "smn2gnt",
      "name": "MCP-Salesforce",
      "url": "https://github.com/smn2gnt/MCP-Salesforce",
      "imageUrl": "/freedevtools/mcp/pfp/smn2gnt.webp",
      "description": "Interact with Salesforce using SOQL and SOSL queries for data retrieval and manipulation, including CRUD operations on records and metadata access for Salesforce objects.",
      "stars": 140,
      "forks": 47,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T12:21:32Z",
      "readme_content": "# MCP Salesforce Connector\n\nA Model Context Protocol (MCP) server implementation for Salesforce integration, allowing LLMs to interact with Salesforce data through SOQL queries and SOSL searches.\n\n## Features\n\n- Execute SOQL (Salesforce Object Query Language) queries\n- Perform SOSL (Salesforce Object Search Language) searches\n- Retrieve metadata for Salesforce objects, including field names, labels, and types\n- Retrieve, create, update, and delete records\n- Execute Tooling API requests\n- Execute Apex REST requests\n- Make direct REST API calls to Salesforce\n\n\n## Configuration\n### Model Context Protocol\n\nTo use this server with the Model Context Protocol, you need to configure it in your `claude_desktop_config.json` file. Add the following entry to the `mcpServers` section:\n\n\n    {\n        \"mcpServers\": {\n            \"salesforce\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"--from\",\n                \"mcp-salesforce-connector\",\n                \"salesforce\"\n            ],\n            \"env\": {\n                \"SALESFORCE_ACCESS_TOKEN\": \"SALESFORCE_ACCESS_TOKEN\",\n                \"SALESFORCE_INSTANCE_URL\": \"SALESFORCE_INSTANCE_URL\",\n                \"SALESFORCE_DOMAIN\": \"SALESFORCE_DOMAIN\"\n                }\n            }\n        }\n    }\n    \n\n\n**Note on Salesforce Authentication Methods**\n\nThis server supports two authentication methods:\n\n- **OAuth (Recommended):** Set `SALESFORCE_ACCESS_TOKEN` and `SALESFORCE_INSTANCE_URL` as environment variables. \n- **Username/Password (Legacy):** If `SALESFORCE_ACCESS_TOKEN` and `SALESFORCE_INSTANCE_URL` are not set, the server will fall back to using `SALESFORCE_USERNAME`, `SALESFORCE_PASSWORD`, and `SALESFORCE_SECURITY_TOKEN`. \n\n**Environment Configuration**\n\n- **`SALESFORCE_DOMAIN` (Optional):** Set to `test` to connect to a Salesforce sandbox environment. If not set or left empty, the server will connect to the production environment. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "smn2gnt",
        "crm",
        "mcp",
        "mcp salesforce",
        "tools smn2gnt",
        "smn2gnt mcp"
      ],
      "category": "crm-and-sales-tools"
    },
    "tsmztech--mcp-server-salesforce": {
      "owner": "tsmztech",
      "name": "mcp-server-salesforce",
      "url": "https://github.com/tsmztech/mcp-server-salesforce",
      "imageUrl": "/freedevtools/mcp/pfp/tsmztech.webp",
      "description": "Facilitates natural language interactions with Salesforce data and metadata, enabling users to query, modify, and manage Salesforce objects, records, and Apex code through conversational commands.",
      "stars": 105,
      "forks": 60,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T08:22:07Z",
      "readme_content": "# Salesforce MCP Server\n[![OpenSSF Scorecard](https://api.securityscorecards.dev/projects/github.com/tsmztech/mcp-server-salesforce/badge)](https://securityscorecards.dev/viewer/?uri=github.com/tsmztech/mcp-server-salesforce)\n\n\nAn MCP (Model Context Protocol) server implementation that integrates Claude with Salesforce, enabling natural language interactions with your Salesforce data and metadata. This server allows Claude to query, modify, and manage your Salesforce objects and records using everyday language.\n\n<a href=\"https://glama.ai/mcp/servers/kqeniawbr6\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/kqeniawbr6/badge\" alt=\"Salesforce Server MCP server\" />\n</a>\n\n## Features\n\n* **Object and Field Management**: Create and modify custom objects and fields using natural language\n* **Smart Object Search**: Find Salesforce objects using partial name matches\n* **Detailed Schema Information**: Get comprehensive field and relationship details for any object\n* **Flexible Data Queries**: Query records with relationship support and complex filters\n* **Data Manipulation**: Insert, update, delete, and upsert records with ease\n* **Cross-Object Search**: Search across multiple objects using SOSL\n* **Apex Code Management**: Read, create, and update Apex classes and triggers\n* **Intuitive Error Handling**: Clear feedback with Salesforce-specific error details\n* **Switchable Authentication**: Supports multiple orgs. Easily switch your active Salesforce org based on the default org configured in your VS Code workspace (use Salesforce_CLI authentication for this feature).\n\n## Installation\n\n```bash\nnpm install -g @tsmztech/mcp-server-salesforce\n```\n\n## Tools\n\n### salesforce_search_objects\nSearch for standard and custom objects:\n* Search by partial name matches\n* Finds both standard and custom objects\n* Example: \"Find objects related to Account\" will find Account, AccountHistory, etc.\n\n### salesforce_describe_object\nGet detailed object schema information:\n* Field definitions and properties\n* Relationship details\n* Picklist values\n* Example: \"Show me all fields in the Account object\"\n\n### salesforce_query_records\nQuery records with relationship support:\n* Parent-to-child relationships\n* Child-to-parent relationships\n* Complex WHERE conditions\n* Example: \"Get all Accounts with their related Contacts\"\n* Note: For queries with GROUP BY or aggregate functions, use salesforce_aggregate_query\n\n### salesforce_aggregate_query\nExecute aggregate queries with GROUP BY:\n* GROUP BY single or multiple fields\n* Aggregate functions: COUNT, COUNT_DISTINCT, SUM, AVG, MIN, MAX\n* HAVING clauses for filtering grouped results\n* Date/time grouping functions\n* Example: \"Count opportunities by stage\" or \"Find accounts with more than 10 opportunities\"\n\n### salesforce_dml_records\nPerform data operations:\n* Insert new records\n* Update existing records\n* Delete records\n* Upsert using external IDs\n* Example: \"Update status of multiple accounts\"\n\n### salesforce_manage_object\nCreate and modify custom objects:\n* Create new custom objects\n* Update object properties\n* Configure sharing settings\n* Example: \"Create a Customer Feedback object\"\n\n### salesforce_manage_field\nManage object fields:\n* Add new custom fields\n* Modify field properties\n* Create relationships\n* Automatically grants Field Level Security to System Administrator by default\n* Use `grantAccessTo` parameter to specify different profiles\n* Example: \"Add a Rating picklist field to Account\"\n\n### salesforce_manage_field_permissions\nManage Field Level Security (Field Permissions):\n* Grant or revoke read/edit access to fields for specific profiles\n* View current field permissions\n* Bulk update permissions for multiple profiles\n* Useful for managing permissions after field creation or for existing fields\n* Example: \"Grant System Administrator access to Custom_Field__c on Account\"\n\n### salesforce_search_all\nSearch across multiple objects:\n* SOSL-based search\n* Multiple object support\n* Field snippets\n* Example: \"Search for 'cloud' across Accounts and Opportunities\"\n\n### salesforce_read_apex\nRead Apex classes:\n* Get full source code of specific classes\n* List classes matching name patterns\n* View class metadata (API version, status, etc.)\n* Support for wildcards (* and ?) in name patterns\n* Example: \"Show me the AccountController class\" or \"Find all classes matching Account*Cont*\"\n\n### salesforce_write_apex\nCreate and update Apex classes:\n* Create new Apex classes\n* Update existing class implementations\n* Specify API versions\n* Example: \"Create a new Apex class for handling account operations\"\n\n### salesforce_read_apex_trigger\nRead Apex triggers:\n* Get full source code of specific triggers\n* List triggers matching name patterns\n* View trigger metadata (API version, object, status, etc.)\n* Support for wildcards (* and ?) in name patterns\n* Example: \"Show me the AccountTrigger\" or \"Find all triggers for Contact object\"\n\n### salesforce_write_apex_trigger\nCreate and update Apex triggers:\n* Create new Apex triggers for specific objects\n* Update existing trigger implementations\n* Specify API versions and event operations\n* Example: \"Create a new trigger for the Account object\" or \"Update the Lead trigger\"\n\n### salesforce_execute_anonymous\nExecute anonymous Apex code:\n* Run Apex code without creating a permanent class\n* View debug logs and execution results\n* Useful for data operations not directly supported by other tools\n* Example: \"Execute Apex code to calculate account metrics\" or \"Run a script to update related records\"\n\n### salesforce_manage_debug_logs\nManage debug logs for Salesforce users:\n* Enable debug logs for specific users\n* Disable active debug log configurations\n* Retrieve and view debug logs\n* Configure log levels (NONE, ERROR, WARN, INFO, DEBUG, FINE, FINER, FINEST)\n* Example: \"Enable debug logs for user@example.com\" or \"Retrieve recent logs for an admin user\"\n\n## Setup\n\n### Salesforce Authentication\nYou can connect to Salesforce using one of three authentication methods:\n\n#### 1. Username/Password Authentication (Default)\n1. Set up your Salesforce credentials\n2. Get your security token (Reset from Salesforce Settings)\n\n#### 2. OAuth 2.0 Client Credentials Flow\n1. Create a Connected App in Salesforce\n2. Enable OAuth settings and select \"Client Credentials Flow\"\n3. Set appropriate scopes (typically \"api\" is sufficient)\n4. Save the Client ID and Client Secret\n5. **Important**: Note your instance URL (e.g., `https://your-domain.my.salesforce.com`) as it's required for authentication\n\n#### 3. Salesforce CLI Authentication (Recommended for local/dev) (contribution by @andrea9293)\n1. Install and authenticate Salesforce CLI (`sf`).\n2. Make sure your org is authenticated and accessible via `sf org display --json` in the root of your Salesforce project.\n3. The server will automatically retrieve the access token and instance url using the CLI.\n\n\n\n### Usage with Claude Desktop\n\n\nAdd to your `claude_desktop_config.json`:\n\n\n#### For Salesforce CLI Authentication:\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@tsmztech/mcp-server-salesforce\"],\n      \"env\": {\n        \"SALESFORCE_CONNECTION_TYPE\": \"Salesforce_CLI\"\n      }\n    }\n  }\n}\n```\n\n#### For Username/Password Authentication:\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@tsmztech/mcp-server-salesforce\"],\n      \"env\": {\n        \"SALESFORCE_CONNECTION_TYPE\": \"User_Password\",\n        \"SALESFORCE_USERNAME\": \"your_username\",\n        \"SALESFORCE_PASSWORD\": \"your_password\",\n        \"SALESFORCE_TOKEN\": \"your_security_token\",\n        \"SALESFORCE_INSTANCE_URL\": \"org_url\"        // Optional. Default value: https://login.salesforce.com\n      }\n    }\n  }\n}\n```\n\n#### For OAuth 2.0 Client Credentials Flow:\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@tsmztech/mcp-server-salesforce\"],\n      \"env\": {\n        \"SALESFORCE_CONNECTION_TYPE\": \"OAuth_2.0_Client_Credentials\",\n        \"SALESFORCE_CLIENT_ID\": \"your_client_id\",\n        \"SALESFORCE_CLIENT_SECRET\": \"your_client_secret\",\n        \"SALESFORCE_INSTANCE_URL\": \"https://your-domain.my.salesforce.com\"  // REQUIRED: Must be your exact Salesforce instance URL\n      }\n    }\n  }\n}\n```\n\n> **Note**: For OAuth 2.0 Client Credentials Flow, the `SALESFORCE_INSTANCE_URL` must be your exact Salesforce instance URL (e.g., `https://your-domain.my.salesforce.com`). The token endpoint will be constructed as `<instance_url>/services/oauth2/token`.\n\n## Example Usage\n\n### Searching Objects\n```\n\"Find all objects related to Accounts\"\n\"Show me objects that handle customer service\"\n\"What objects are available for order management?\"\n```\n\n### Getting Schema Information\n```\n\"What fields are available in the Account object?\"\n\"Show me the picklist values for Case Status\"\n\"Describe the relationship fields in Opportunity\"\n```\n\n### Querying Records\n```\n\"Get all Accounts created this month\"\n\"Show me high-priority Cases with their related Contacts\"\n\"Find all Opportunities over $100k\"\n```\n\n### Aggregate Queries\n```\n\"Count opportunities by stage\"\n\"Show me the total revenue by account\"\n\"Find accounts with more than 10 opportunities\"\n\"Calculate average deal size by sales rep and quarter\"\n\"Get the number of cases by priority and status\"\n```\n\n### Managing Custom Objects\n```\n\"Create a Customer Feedback object\"\n\"Add a Rating field to the Feedback object\"\n\"Update sharing settings for the Service Request object\"\n```\nExamples with Field Level Security:\n```\n# Default - grants access to System Administrator automatically\n\"Create a Status picklist field on Custom_Object__c\"\n\n# Custom profiles - grants access to specified profiles\n\"Create a Revenue currency field on Account and grant access to Sales User and Marketing User profiles\"\n```\n\n### Managing Field Permissions\n```\n\"Grant System Administrator access to Custom_Field__c on Account\"\n\"Give read-only access to Rating__c field for Sales User profile\"\n\"View which profiles have access to the Custom_Field__c\"\n\"Revoke field access for specific profiles\"\n```\n\n### Searching Across Objects\n```\n\"Search for 'cloud' in Accounts and Opportunities\"\n\"Find mentions of 'network issue' in Cases and Knowledge Articles\"\n\"Search for customer name across all relevant objects\"\n```\n\n### Managing Apex Code\n```\n\"Show me all Apex classes with 'Controller' in the name\"\n\"Get the full code for the AccountService class\"\n\"Create a new Apex utility class for handling date operations\"\n\"Update the LeadConverter class to add a new method\"\n```\n\n### Managing Apex Triggers\n```\n\"List all triggers for the Account object\"\n\"Show me the code for the ContactTrigger\"\n\"Create a new trigger for the Opportunity object\"\n\"Update the Case trigger to handle after delete events\"\n```\n\n### Executing Anonymous Apex Code\n```\n\"Execute Apex code to calculate account metrics\"\n\"Run a script to update related records\"\n\"Execute a batch job to process large datasets\"\n```\n\n### Managing Debug Logs\n```\n\"Enable debug logs for user@example.com\"\n\"Retrieve recent logs for an admin user\"\n\"Disable debug logs for a specific user\"\n\"Configure log level to DEBUG for a user\"\n```\n\n## Development\n\n### Building from source\n```bash\n# Clone the repository\ngit clone https://github.com/tsmztech/mcp-server-salesforce.git\n\n# Navigate to directory\ncd mcp-server-salesforce\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Contributing\nContributions are welcome! Feel free to submit a Pull Request.\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Issues and Support\nIf you encounter any issues or need support, please file an issue on the [GitHub repository](https://github.com/tsmztech/mcp-server-salesforce/issues).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crm",
        "tsmztech",
        "tools",
        "tools tsmztech",
        "tsmztech mcp",
        "crm sales"
      ],
      "category": "crm-and-sales-tools"
    },
    "usama-dtc--salesforce_mcp": {
      "owner": "usama-dtc",
      "name": "salesforce_mcp",
      "url": "https://github.com/usama-dtc/salesforce_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/usama-dtc.webp",
      "description": "Integrate natural language queries to manage and modify Salesforce data and metadata, facilitating effortless interactions with Salesforce objects and records.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-24T21:20:56Z",
      "readme_content": "# Salesforce MCP Server\n\nAn MCP (Model Context Protocol) server implementation that integrates Claude with Salesforce, enabling natural language interactions with your Salesforce data and metadata. This server allows Claude to query, modify, and manage your Salesforce objects and records using everyday language.\n\n<a href=\"https://glama.ai/mcp/servers/n1rsv1aiee\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/n1rsv1aiee/badge\" alt=\"Salesforce Server MCP server\" />\n</a>\n\n## Features\n\n* **Object and Field Management**: Create and modify custom objects and fields using natural language\n* **Smart Object Search**: Find Salesforce objects using partial name matches\n* **Detailed Schema Information**: Get comprehensive field and relationship details for any object\n* **Flexible Data Queries**: Query records with relationship support and complex filters\n* **Data Manipulation**: Insert, update, delete, and upsert records with ease\n* **Cross-Object Search**: Search across multiple objects using SOSL\n* **Intuitive Error Handling**: Clear feedback with Salesforce-specific error details\n\n## Installation\n\n```bash\nnpm install -g @surajadsul02/mcp-server-salesforce\n```\n\n## Setup\n\n### Salesforce Authentication\nYou can authenticate with Salesforce using one of two methods:\n\n#### 1. Username/Password Authentication\n1. Set up your Salesforce credentials\n2. Get your security token (Reset from Salesforce Settings)\n3. Configure the environment variables as shown in the configuration section\n\n#### 2. OAuth2 Authentication with Consumer Key/Secret\n1. Set up a Connected App in Salesforce\n2. Get the Consumer Key and Consumer Secret\n3. Configure the environment variables as shown in the configuration section\n\n### IDE Integration\n\n#### Cursor IDE Setup\n\n1. Install the package globally:\n```bash\nnpm install -g @surajadsul02/mcp-server-salesforce\n```\n\n2. Configure the MCP server in Cursor IDE `.cursor/mcp.json`:\n\n##### Using env Command\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"env\",\n      \"args\": [\n        \"SALESFORCE_USERNAME=your.actual.email@example.com\",\n        \"SALESFORCE_PASSWORD=YourActualPassword123\",\n        \"SALESFORCE_TOKEN=YourActualSecurityToken123\",\n        \"SALESFORCE_INSTANCE_URL=https://login.salesforce.com\",\n        \"npx\",\n        \"-y\",\n        \"@surajadsul02/mcp-server-salesforce\"\n      ]\n    }\n  }\n}\n```\n\n##### For OAuth2 Authentication in Cursor\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"env\",\n      \"args\": [\n        \"SALESFORCE_USERNAME=your.actual.email@example.com\",\n        \"SALESFORCE_PASSWORD=YourActualPassword123\",\n        \"SALESFORCE_TOKEN=YourActualSecurityToken123\",\n        \"SALESFORCE_INSTANCE_URL=https://login.salesforce.com\",\n        \"SALESFORCE_CONSUMER_KEY=YourConsumerKey\",\n        \"SALESFORCE_CONSUMER_SECRET=YourConsumerSecret\",\n        \"npx\",\n        \"-y\",\n        \"@surajadsul02/mcp-server-salesforce\"\n      ]\n    }\n  }\n}\n```\n\n#### Claude Desktop Setup\n\n1. Install the package globally (if not already installed):\n```bash\nnpm install -g @surajadsul02/mcp-server-salesforce\n```\n\n2. Add to your `claude_desktop_config.json`:\n\n##### For Username/Password Authentication\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@surajadsul02/mcp-server-salesforce\"],\n      \"env\": {\n        \"SALESFORCE_USERNAME\": \"your_username\",\n        \"SALESFORCE_PASSWORD\": \"your_password\",\n        \"SALESFORCE_TOKEN\": \"your_security_token\",\n        \"SALESFORCE_INSTANCE_URL\": \"https://login.salesforce.com\"\n      }\n    }\n  }\n}\n```\n\n##### For OAuth2 Authentication\n```json\n{\n  \"mcpServers\": {\n    \"salesforce\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@surajadsul02/mcp-server-salesforce\"],\n      \"env\": {\n        \"SALESFORCE_USERNAME\": \"your_username\",\n        \"SALESFORCE_PASSWORD\": \"your_password\",\n        \"SALESFORCE_CONSUMER_KEY\": \"your_consumer_key\",\n        \"SALESFORCE_CONSUMER_SECRET\": \"your_consumer_secret\",\n        \"SALESFORCE_INSTANCE_URL\": \"https://login.salesforce.com\"\n      }\n    }\n  }\n}\n```\n\n3. Configuration File Location:\n   - macOS: `~/Library/Application Support/Claude Desktop/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude Desktop\\claude_desktop_config.json`\n   - Linux: `~/.config/Claude Desktop/claude_desktop_config.json`\n\n### Required Environment Variables\n\nFor Username/Password Authentication:\n- `SALESFORCE_USERNAME`: Your Salesforce username/email\n- `SALESFORCE_PASSWORD`: Your Salesforce password\n- `SALESFORCE_TOKEN`: Your Salesforce security token\n- `SALESFORCE_INSTANCE_URL`: Your Salesforce instance URL (Optional, default: https://login.salesforce.com)\n\nFor OAuth2 Authentication:\n- `SALESFORCE_USERNAME`: Your Salesforce username/email\n- `SALESFORCE_PASSWORD`: Your Salesforce password\n- `SALESFORCE_CONSUMER_KEY`: Your Connected App's consumer key\n- `SALESFORCE_CONSUMER_SECRET`: Your Connected App's consumer secret\n- `SALESFORCE_INSTANCE_URL`: Your Salesforce instance URL (Optional, default: https://login.salesforce.com)\n\n## Example Usage\n\n### Searching Objects\n```\n\"Find all objects related to Accounts\"\n\"Show me objects that handle customer service\"\n\"What objects are available for order management?\"\n```\n\n### Getting Schema Information\n```\n\"What fields are available in the Account object?\"\n\"Show me the picklist values for Case Status\"\n\"Describe the relationship fields in Opportunity\"\n```\n\n### Querying Records\n```\n\"Get all Accounts created this month\"\n\"Show me high-priority Cases with their related Contacts\"\n\"Find all Opportunities over $100k\"\n```\n\n### Managing Custom Objects\n```\n\"Create a Customer Feedback object\"\n\"Add a Rating field to the Feedback object\"\n\"Update sharing settings for the Service Request object\"\n```\n\n### Searching Across Objects\n```\n\"Search for 'cloud' in Accounts and Opportunities\"\n\"Find mentions of 'network issue' in Cases and Knowledge Articles\"\n\"Search for customer name across all relevant objects\"\n```\n\n## Development\n\n### Building from source\n```bash\n# Clone the repository\ngit clone https://github.com/surajadsul02/mcp-server-salesforce.git\n\n# Navigate to directory\ncd mcp-server-salesforce\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Troubleshooting\n\n1. **Authentication Errors**\n   - Verify your credentials are correct\n   - For username/password auth: ensure security token is correct\n   - For OAuth2: verify consumer key and secret\n\n2. **Connection Issues**\n   - Check your Salesforce instance URL\n   - Verify network connectivity\n   - Ensure proper API access permissions\n\n3. **Cursor IDE Integration**\n   - Restart Cursor IDE after configuration changes\n   - Check Developer Tools (Help > Toggle Developer Tools) for error messages\n   - Verify the package is installed globally\n\n4. **Claude Desktop Integration**\n   - Verify configuration file location\n   - Check file permissions\n   - Restart Claude Desktop after configuration changes\n   - Ensure environment variables are properly set\n\n## Contributing\nContributions are welcome! Feel free to submit a Pull Request.\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Issues and Support\nIf you encounter any issues or need support, please file an issue on the GitHub repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "salesforce_mcp",
        "crm",
        "tools",
        "tools usama",
        "dtc salesforce_mcp",
        "sales tools"
      ],
      "category": "crm-and-sales-tools"
    },
    "xraywu--mcp-wegene-assistant": {
      "owner": "xraywu",
      "name": "mcp-wegene-assistant",
      "url": "https://github.com/xraywu/mcp-wegene-assistant",
      "imageUrl": "/freedevtools/mcp/pfp/xraywu.webp",
      "description": "Analyze genetic testing reports by accessing user-specific data through a custom URI scheme and utilizing LLM capabilities to interpret the findings.",
      "stars": 3,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-01T00:20:44Z",
      "readme_content": "# wegene-assistant MCP server\n\n[![smithery badge](https://smithery.ai/badge/@xraywu/mcp-wegene-assistant)](https://smithery.ai/server/@xraywu/mcp-wegene-assistant)\n\nMCP server for WeGene Assistant, using LLM to analyze a user's WeGene genetic testing report.\n\n## Components\n\n### Resources\n\nOnce a user is authorized, all the reports under his/her account will be exposed as a resource:\n- Custom wegene:// URI scheme for accessing each individual report\n- A report resource has a name, description and application/json mimetype\n\n\n### Tools\n\nThe server implements one tool:\n- **wegene-oauth:** Start a WeGene Open API oAuth process in the browser\n  - The user should complete the authorization in 120 seconds so LLM will be able to further access the reports.\n- **wegene-get-profiles:** Read the profile list under a user's WeGene account\n  - Profiles' name and id will be returned for LLM to use.\n- **wegene-get-report-info:** Return the report meta info so LLM will know what reports are available.\n  - A list of report names, descriptions, endpoints, etc. will be returned\n- **wegene-get-report:** Read the results of a single report under a profile\n  - Returns the result JSON specified in [WeGene's Open API platform](https://api.wegene.com)\n  - Arguements \n    - report_endpoint: The report's endpoint to be retrieved from\n    - report_id: The report's id to be retrieved\n    - profile_id: The profile id to retrieve report from\n\n## Configuration\n\n- You will need WeGene Open API key/secret to use this project.\n- Copy `.env.example` as `.env` and update the key and secret in the file.\n\n## Quickstart\n\n### Install\n\n#### Installing via Smithery\n\nTo install WeGene Assistant for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@xraywu/mcp-wegene-assistant):\n\n```bash\nnpx -y @smithery/cli install @xraywu/mcp-wegene-assistant --client claude\n```\n\n#### Insall Locally\n\n##### Prepare MCP Server\n\n1. Clone this project\n2. Run `uv sync --dev --all-extras` under the project's root folder\n\n##### Claude Desktop Configuration\n\n- On MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd below contents in the configuration file:\n\n```\n{\n  \"mcpServers\": {\n    \"wegene-assistant\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/wegene-assistant\",\n        \"run\",\n        \"wegene-assistant\"\n      ]\n    }\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "reports",
        "genetic",
        "xraywu",
        "testing reports",
        "analyze genetic",
        "genetic testing"
      ],
      "category": "crm-and-sales-tools"
    }
  }
}