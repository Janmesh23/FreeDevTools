{
  "category": "finance--fintech",
  "categoryDisplay": "Finance & Fintech",
  "description": "",
  "totalRepositories": 101,
  "repositories": {
    "HuggingAGI--mcp-baostock-server": {
      "owner": "HuggingAGI",
      "name": "mcp-baostock-server",
      "url": "https://github.com/HuggingAGI/mcp-baostock-server",
      "imageUrl": "",
      "description": "MCP server based on baostock, providing access and analysis capabilities for Chinese stock market data.",
      "stars": 48,
      "forks": 15,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-26T13:35:46Z",
      "readme_content": "# MCP BaoStock Server\n\n一个基于BaoStock的股票数据服务器，提供了多个接口用于获取股票市场数据。\n\n## 功能特点\n\n- 提供股票基本信息查询\n- 支持K线历史数据获取\n- 行业分类数据查询\n- 分红派息数据查询\n- 季度财务指标数据（盈利能力、营运能力、成长能力）\n- 指数数据查询\n- 估值指标数据查询\n\n## 安装与使用\n\n### 依赖要求\n\n- Python 3.10+\n- baostock\n- pandas\n\n### 使用说明\n\n安装使用\n```bash\nuv run mcp-baostock-server\n```\n\n\n\n## 接口测试用例\n\n以下是各个接口的测试用例示例：\n\n### 1. 获取股票基本信息\n```python\n# 获取贵州茅台(sh.600519)的基本信息，包括上市日期、行业分类等基础数据\n```\n\n### 2. 获取K线历史数据\n```python\n获取平安银行(sz.000001)从2023年1月1日到2023年1月31日的日K线数据，使用前复权方式\n```\n\n### 3. 获取行业分类数据\n```python\n查询中国平安(sh.601318)所属的行业分类信息\n```\n\n### 4. 获取分红派息数据\n```python\n查看工商银行(sh.601398)在2022年的分红派息详细信息\n```\n\n### 5. 获取季度盈利能力数据\n```python\n获取贵州茅台2023年第一季度的盈利能力数据，包括净利润、毛利率等指标\n```\n\n### 6. 获取季度营运能力数据\n```python\n分析招商银行(sh.600036)2023年第二季度的营运能力指标，包括应收账款周转率和存货周转率\n```\n\n### 7. 获取季度成长能力数据\n```python\n评估比亚迪(sz.002594)2023年第三季度的成长能力，包括营收增长率和净利润增长率\n```\n\n### 8. 获取指数数据\n```python\n获取沪深300指数(sh.000300)从2023年1月1日到2023年12月31日的日线行情数据\n```\n\n### 9. 获取估值指标数据\n```python\n分析阿里巴巴(sh.688699)从2023年初至今的估值指标变化，包括市盈率、市净率等数据\n```\n\n## 技术交流\n\n- 微信: iamxxn886",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "baostock",
        "stock",
        "finance",
        "baostock server",
        "mcp baostock",
        "based baostock"
      ],
      "category": "finance--fintech"
    },
    "JamesANZ--bitcoin-mcp": {
      "owner": "JamesANZ",
      "name": "bitcoin-mcp",
      "url": "https://github.com/JamesANZ/bitcoin-mcp",
      "imageUrl": "",
      "description": "An MCP server that enables AI models to query the Bitcoin blockchain.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-20T21:54:27Z",
      "readme_content": "# Bitcoin MCP Server\n\nA Model Context Protocol (MCP) server that provides real-time Bitcoin blockchain data by querying the [mempool.space](https://mempool.space) API.\n\n<a href=\"https://glama.ai/mcp/servers/@JamesANZ/bitcoin-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@JamesANZ/bitcoin-mcp/badge\" alt=\"Bitcoin Server MCP server\" />\n</a>\n\n## Features\n\nThis MCP server offers five specialized tools for querying Bitcoin blockchain data:\n\n### 🔍 Address Tools\n\n#### `get-address-stats`\n\nGet basic statistics for any Bitcoin address.\n\n**Input:**\n\n- `address` (string): Bitcoin address to query\n\n**Output:**\n\n- Chain statistics (funded/spent amounts, transaction counts)\n- Mempool statistics (pending transactions)\n\n**Example:**\n\n```\nAddress: 1wiz18xYmhRX6xStj2b9t1rwWX4GKUgpv\n\nChain Stats:\n- Funded TXOs: 10\n- Funded Sum: 150.07686949 BTC\n- Spent TXOs: 5\n- Spent Sum: 150.07599040 BTC\n- Total Transactions: 12\n\nMempool Stats:\n- Pending TXOs: 0\n- Pending Sum: 0.00000000 BTC\n- Pending Transactions: 0\n```\n\n#### `get-address-transactions`\n\nGet transaction history for a Bitcoin address.\n\n**Input:**\n\n- `address` (string): Bitcoin address to query\n- `limit` (optional, number): Number of transactions to return (1-50, default: 10)\n\n**Output:**\n\n- List of recent transactions with status, dates, fees, and sizes\n\n#### `get-address-utxos`\n\nGet current UTXOs (unspent transaction outputs) for a Bitcoin address.\n\n**Input:**\n\n- `address` (string): Bitcoin address to query\n- `limit` (optional, number): Number of UTXOs to return (1-50, default: 10)\n\n**Output:**\n\n- List of current UTXOs with amounts, confirmation status, and dates\n\n### 🔗 Transaction Tools\n\n#### `get-transaction`\n\nGet detailed information about a specific Bitcoin transaction.\n\n**Input:**\n\n- `txid` (string): Transaction ID (hash) to query\n\n**Output:**\n\n- Complete transaction details including:\n  - Basic info (version, size, weight, fee)\n  - Confirmation status and block information\n  - Input and output details with amounts and addresses\n\n### 🧱 Block Tools\n\n#### `get-block`\n\nGet information about a specific Bitcoin block.\n\n**Input:**\n\n- `block_height` (number): Block height to query\n\n**Output:**\n\n- Block details including:\n  - Hash, version, merkle root\n  - Previous block hash and timestamp\n  - Size, weight, and transaction count\n  - Fee statistics\n\n## Installation\n\n1. Clone this repository:\n\n```bash\ngit clone <repository-url>\ncd bitcoin-mcp\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n## Usage\n\n### Running the Server\n\nStart the MCP server:\n\n```bash\nnpm start\n```\n\nThe server runs on stdio and can be connected to any MCP-compatible client.\n\n### Example Queries\n\nHere are some example queries you can make with this MCP server:\n\n#### Get Address Statistics\n\n```json\n{\n  \"tool\": \"get-address-stats\",\n  \"arguments\": {\n    \"address\": \"1wiz18xYmhRX6xStj2b9t1rwWX4GKUgpv\"\n  }\n}\n```\n\n#### Get Recent Transactions\n\n```json\n{\n  \"tool\": \"get-address-transactions\",\n  \"arguments\": {\n    \"address\": \"1wiz18xYmhRX6xStj2b9t1rwWX4GKUgpv\",\n    \"limit\": 5\n  }\n}\n```\n\n#### Get Transaction Details\n\n```json\n{\n  \"tool\": \"get-transaction\",\n  \"arguments\": {\n    \"txid\": \"15e10745f15593a899cef391191bdd3d7c12412cc4696b7bcb669d0feadc8521\"\n  }\n}\n```\n\n#### Get Block Information\n\n```json\n{\n  \"tool\": \"get-block\",\n  \"arguments\": {\n    \"block_height\": 857808\n  }\n}\n```\n\n## API Endpoints\n\nThis MCP server uses the following mempool.space API endpoints:\n\n- `GET /api/address/{address}` - Address statistics\n- `GET /api/address/{address}/txs` - Address transaction history\n- `GET /api/address/{address}/utxo` - Address UTXOs\n- `GET /api/tx/{txid}` - Transaction details\n- `GET /api/block/{height}` - Block information\n\n## Data Format\n\nAll amounts are displayed in BTC (converted from satoshis) for better readability. Timestamps are converted to ISO format for easy parsing.\n\n## Error Handling\n\nThe server includes comprehensive error handling:\n\n- Network errors are caught and reported with descriptive messages\n- Invalid addresses or transaction IDs return appropriate error messages\n- Rate limiting and API errors are handled gracefully\n\n## Dependencies\n\n- `@modelcontextprotocol/sdk` - MCP SDK for server implementation\n- `superagent` - HTTP client for API requests\n- `zod` - Schema validation for tool parameters\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "fintech",
        "bitcoin",
        "bitcoin mcp",
        "finance fintech",
        "jamesanz bitcoin"
      ],
      "category": "finance--fintech"
    },
    "JamesANZ--prediction-market-mcp": {
      "owner": "JamesANZ",
      "name": "prediction-market-mcp",
      "url": "https://github.com/JamesANZ/prediction-market-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides real-time prediction market data from multiple platforms including Polymarket, PredictIt, and Kalshi. Enables AI assistants to query current odds, prices, and market information through a unified interface.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T04:52:34Z",
      "readme_content": "# prediction-markets-mcp\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/JamesANZ/prediction-market-mcp)](https://archestra.ai/mcp-catalog/jamesanz__prediction-market-mcp)\n\nA Model Context Protocol (MCP) server that provides real-time prediction market data from multiple platforms. This server allows you to query prediction markets for current odds, prices, and market information through a unified interface.\n\n## Supported Platforms\n\n- **Polymarket** - Crypto-based prediction markets with percentage-based odds\n- **PredictIt** - Traditional prediction markets with dollar-based prices\n- **Kalshi** - Regulated US prediction markets\n\n## Features\n\n- **Multi-platform Support**: Query both crypto and traditional prediction markets\n- **Real-time Data**: Get current odds and prices from live markets\n- **Keyword Search**: Filter markets by specific keywords or topics\n- **Unified Interface**: Consistent data format across different platforms\n- **Error Handling**: Graceful handling of API failures and network issues\n- **Type Safety**: Full TypeScript support with comprehensive type definitions\n\n## Installation\n\n### Prerequisites\n\n- Node.js (v18 or higher)\n- npm or yarn\n\n### Setup\n\n1. Clone the repository:\n\n```bash\ngit clone <repository-url>\ncd prediction-markets-mcp\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n## Usage\n\n### Running the Server\n\nStart the MCP server:\n\n```bash\nnode build/index.js\n```\n\nThe server runs on stdio and can be integrated with MCP-compatible clients.\n\n### API Endpoints\n\nThe server provides a single tool: `get-prediction-markets`\n\n#### Parameters\n\n- `keyword` (string, required): Search term to filter markets\n  - Maximum length: 50 characters\n  - Examples: \"trump\", \"election\", \"supreme court\"\n\n#### Example Queries\n\n```\n// Search for Trump-related markets\n{\n  \"keyword\": \"trump\"\n}\n\n// Search for election markets\n{\n  \"keyword\": \"election\"\n}\n\n// Search for Supreme Court markets\n{\n  \"keyword\": \"supreme court\"\n}\n```\n\n### Response Format\n\nThe server returns prediction market data in the following format:\n\n#### Polymarket Markets\n\n```\n**Polymarket: Will Trump win the 2024 election?**\nYes: 45.2% | No: 54.8%\n```\n\n#### PredictIt Markets\n\n```\n**PredictIt: Which party will win the 2025 gubernatorial election in Virginia?**\nDemocratic: 89.0% | Republican: 11.0%\n```\n\n## Data Sources\n\n### Polymarket API\n\n- **Base URL**: `https://clob.polymarket.com/markets`\n- **Format**: JSON\n- **Odds Display**: Percentages (e.g., 65.2%)\n- **Data**: Market questions, active status, token prices\n\n### PredictIt API\n\n- **Base URL**: `https://www.predictit.org/api/marketdata/all/`\n- **Format**: JSON\n- **Odds Display**: Dollar amounts (e.g., $0.65)\n- **Data**: Market names, contracts, trade prices, status\n\n## Development\n\n### Project Structure\n\n```\nprediction-markets-mcp/\n├── src/\n│   └── index.ts          # Main server implementation\n├── build/                # Compiled JavaScript output\n├── package.json          # Dependencies and scripts\n├── tsconfig.json         # TypeScript configuration\n└── README.md            # This file\n```\n\n### Key Components\n\n#### Type Definitions\n\n```typescript\n// Polymarket types\ntype Market = {\n  question: string;\n  active: boolean;\n  archived: boolean;\n  tokens: Token[];\n};\n\n// PredictIt types\ntype PredictItMarket = {\n  id: number;\n  name: string;\n  shortName: string;\n  contracts: PredictItContract[];\n  status: string;\n};\n```\n\n#### Core Functions\n\n- `getPolymarketPredictionData()`: Fetches and processes Polymarket data\n- `getPredictItMarkets()`: Fetches all PredictIt markets\n- `makeApiRequest()`: Handles HTTP requests with proper headers\n\n### Building\n\n```bash\n# Development build\nnpm run build\n\n# Watch mode (if needed)\nnpm run dev\n```\n\n### Testing\n\nTo test the server manually:\n\n1. Start the server:\n\n```bash\nnode build/index.js\n```\n\n2. Send test requests through an MCP client or test the API endpoints directly.\n\n## Troubleshooting\n\n### Common Issues\n\n#### No Markets Found\n\n- **Cause**: Keyword too specific or no matching markets\n- **Solution**: Try broader keywords or check market availability\n- **Example**: Use \"election\" instead of \"specific candidate name\"\n\n### Development Setup\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n### Code Style\n\n- Use TypeScript for all new code\n- Follow existing naming conventions\n- Add JSDoc comments for public functions\n- Ensure all builds pass before submitting\n\n## License\n\nMIT License - see LICENSE file for details\n\n## Support\n\nFor issues and questions:\n\n1. Check the troubleshooting section\n2. Review existing GitHub issues\n3. Create a new issue with detailed information\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "finance",
        "market mcp",
        "mcp server",
        "prediction market"
      ],
      "category": "finance--fintech"
    },
    "OctagonAI--octagon-mcp-server": {
      "owner": "OctagonAI",
      "name": "octagon-mcp-server",
      "url": "https://github.com/OctagonAI/octagon-mcp-server",
      "imageUrl": "",
      "description": "Octagon AI Agents to integrate private and public market data",
      "stars": 70,
      "forks": 11,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T11:39:44Z",
      "readme_content": "# Octagon: MCP for Market Data \n\n[![smithery badge](https://smithery.ai/badge/@OctagonAI/octagon-mcp-server)](https://smithery.ai/server/@OctagonAI/octagon-mcp-server)\n\n![Favicon](https://docs.octagonagents.com/logo.svg) The Octagon MCP server provides specialized AI-powered financial research and analysis by integrating with the Octagon Market Intelligence API, enabling users to easily analyze and extract detailed insights from public filings, earnings call transcripts, financial metrics, stock market data, and extensive private market transactions within Claude Desktop and other popular MCP clients.\n\n[![Demo](https://docs.octagonagents.com/financial_model_demo_fast.gif)](https://docs.octagonagents.com/financial_model_demo.mp4)\n\n## Features\n\n✅ **Comprehensive Market Intelligence** - Orchestrates multiple specialized agents for complete market analysis\n   - SEC filings analysis and data extraction (8000+ public companies 10-K, 10-Q, 8-K, 20-F, S-1)\n   - Earnings call transcript analysis (10 yrs of historical and current)\n   - Financial metrics and ratios analysis (10 yrs of historical and current)\n   - Stock market data access (over 10,000 active tickers, daily historical and current)\n   - Private company research (3M+ companies)\n   - Funding rounds and venture capital research (500k+ deals)\n   - M&A and IPO transaction research (2M+ deals)\n   - Institutional holdings and Form 13F filings\n   - Cryptocurrency market data and analysis\n     \n✅ **Deep Research Capabilities** - Comprehensive research tools that can aggregate information from multiple sources\n   \n✅ **Web Scraping** - Extract structured data from any public website (json, csv, python scripts)\n\n## Get Your Octagon API Key\n\nTo use Octagon MCP, you need to:\n\n1. Sign up for a free account at [Octagon](https://app.octagonai.co/signup/?redirectToAfterSignup=https://app.octagonai.co/api-keys)\n2. After logging in, from left menu, navigate to **API Keys** \n3. Generate a new API key\n4. Use this API key in your configuration as the `OCTAGON_API_KEY` value\n\n## Prerequisites\n\nBefore installing or running Octagon MCP, you need to have `npx` (which comes with Node.js and npm) installed on your system.\n\n### Mac (macOS)\n\n1. **Install Homebrew** (if you don't have it):\n   ```bash\n   /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n   ```\n2. **Install Node.js (includes npm and npx):**\n   ```bash\n   brew install node\n   ```\n   This will install the latest version of Node.js, npm, and npx.\n\n3. **Verify installation:**\n   ```bash\n   node -v\n   npm -v\n   npx -v\n   ```\n\n### Windows\n\n1. **Download the Node.js installer:**\n   - Go to [https://nodejs.org/](https://nodejs.org/) and download the LTS version for Windows.\n2. **Run the installer** and follow the prompts. This will install Node.js, npm, and npx.\n3. **Verify installation:**\n   Open Command Prompt and run:\n   ```cmd\n   node -v\n   npm -v\n   npx -v\n   ```\n\nIf you see version numbers for all three, you are ready to proceed with the installation steps below.\n\n## Installation\n\n### Running on Claude Desktop\n\nTo configure Octagon MCP for Claude Desktop:\n\n1. Open Claude Desktop\n2. Go to Settings > Developer > Edit Config\n3. Add the following to your `claude_desktop_config.json` (Replace `your-octagon-api-key` with your Octagon API key):\n```json\n{\n  \"mcpServers\": {\n    \"octagon-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"octagon-mcp@latest\"],\n      \"env\": {\n        \"OCTAGON_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n4. Restart Claude for the changes to take effect\n\n### Running on Cursor\n\nConfiguring Cursor Desktop 🖥️\nNote: Requires Cursor version 0.45.6+\n\nTo configure Octagon MCP in Cursor:\n\n1. Open Cursor Settings\n2. Go to Features > MCP Servers \n3. Click \"+ Add New MCP Server\"\n4. Enter the following:\n   - Name: \"octagon-mcp\" (or your preferred name)\n   - Type: \"command\"\n   - Command: `env OCTAGON_API_KEY=your-octagon-api-key npx -y octagon-mcp`\n\n> If you are using Windows and are running into issues, try `cmd /c \"set OCTAGON_API_KEY=your-octagon-api-key && npx -y octagon-mcp\"`\n\nReplace `your-octagon-api-key` with your Octagon API key.\n\nAfter adding, refresh the MCP server list to see the new tools. The Composer Agent will automatically use Octagon MCP when appropriate, but you can explicitly request it by describing your investment research needs. Access the Composer via Command+L (Mac), select \"Agent\" next to the submit button, and enter your query.\n\n### Running on Windsurf\n\nAdd this to your `./codeium/windsurf/model_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"octagon-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"octagon-mcp@latest\"],\n      \"env\": {\n        \"OCTAGON_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n### Running with npx\n\n```bash\nenv OCTAGON_API_KEY=your_octagon_api_key npx -y octagon-mcp\n```\n\n### Manual Installation\n\n```bash\nnpm install -g octagon-mcp\n```\n\n## Documentation\n\nFor comprehensive documentation on using Octagon agents, please visit our official documentation at:\n[https://docs.octagonagents.com](https://docs.octagonagents.com)\n\nThe documentation includes:\n- Detailed API references\n- Agent-specific query guidelines\n- Examples and use cases\n- Best practices for investment research\n\n## Available Tools\n\nEach tool uses a single `prompt` parameter that accepts a natural language query. Include all relevant details in your prompt.\n\n### octagon-agent\n**[COMPREHENSIVE MARKET INTELLIGENCE]** Orchestrates all agents for comprehensive market intelligence analysis. Combines insights from SEC filings, earnings calls, financial metrics, stock data, institutional holdings, private company research, funding analysis, M&A transactions, investor intelligence, and debt analysis.\n\n**Best for:** Complex research requiring multiple data sources and comprehensive analysis across public and private markets.\n\n**Example queries:**\n```\nRetrieve year-over-year growth in key income-statement items for AAPL, limited to 5 records and filtered by period FY\nAnalyze the latest 10-K filing for AAPL and extract key financial metrics and risk factors\nRetrieve the daily closing prices for AAPL over the last 30 days\nAnalyze AAPL's latest earnings call transcript and extract key insights about future guidance\nProvide a comprehensive overview of Stripe, including its business model and key metrics\nRetrieve the funding history for Stripe, including all rounds and investors\nCompare the financial performance of Tesla, Ford, and GM over the last 3 years\nWhat was Microsoft's acquisition of GitHub valued at and what were the strategic reasons?\nAnalyze institutional ownership changes for NVIDIA over the past 6 months\n```\n\n### octagon-scraper-agent\n**[PUBLIC & PRIVATE MARKET INTELLIGENCE]** Specialized agent for financial data extraction from investor websites. Extract structured financial data from investor relations websites, tables, and online financial sources.\n\n**Best for:** Gathering financial data from websites that don't have accessible APIs.\n\n**Example queries:**\n```\nExtract all data fields from zillow.com/san-francisco-ca/\nExtract all data fields from www.carvana.com/cars/\nExtract financial metrics from tesla.com/investor-relations\nExtract pricing data from salesforce.com/products/platform/pricing/\n```\n\n### octagon-deep-research-agent\n**[PUBLIC & PRIVATE MARKET INTELLIGENCE]** A comprehensive agent that can utilize multiple sources for deep research analysis. Aggregate research across multiple data sources, synthesize information, and provide comprehensive investment research.\n\n**Best for:** Investment research questions requiring up-to-date aggregated information from the web.\n\n**Example queries:**\n```\nResearch the financial impact of Apple's privacy changes on digital advertising companies' revenue and margins\nAnalyze the competitive landscape in the cloud computing sector, focusing on AWS, Azure, and Google Cloud margin and growth trends\nInvestigate the factors driving electric vehicle adoption and their impact on battery supplier financials\nResearch the impact of AI adoption on semiconductor demand and pricing trends\nAnalyze the regulatory environment for cryptocurrency and its impact on crypto exchange valuations\n```\n\n## Example Queries\n\n1. \"What were Amazon's revenue and net income figures in Q4 2023?\"\n2. \"Analyze Tesla's R&D spending trends over the last 3 years.\"\n3. \"What guidance did NVIDIA's CEO provide regarding AI chip demand in their latest earnings call?\"\n4. \"Compare the price-to-earnings, price-to-sales, and EV/EBITDA ratios for the top 5 semiconductor companies.\"\n5. \"What was Anthropic's latest funding round size, valuation, and key investors?\"\n6. \"Extract all data fields from zillow.com/san-francisco-ca/\"\n7. \"Research the financial impact of Apple's privacy changes on digital advertising companies' revenue and margins\"\n8. \"How many investments did Andreessen Horowitz make in AI startups in the last 12 months?\"\n9. \"Retrieve historical Bitcoin price data from 2023 and analyze the price volatility trends\"\n10. \"Analyze the competitive dynamics in the EV charging infrastructure market\"\n\n## Troubleshooting\n\n1. **API Key Issues**: Ensure your Octagon API key is correctly set in the environment or config file.\n2. **Connection Issues**: Make sure the connectivity to the Octagon API is working properly.\n3. **Rate Limiting**: If you encounter rate limiting errors, reduce the frequency of your requests.\n\n## License\n\nMIT \n\n## Individual Specialized MCP Servers\n\nWhile this server provides comprehensive market intelligence combining all our specialized agents, you can also use our individual MCP servers for specific use cases:\n\n### Public Market Data Servers\n- **[Octagon SEC Filings MCP](https://github.com/OctagonAI/octagon-sec-filings-mcp)** - Dedicated server for SEC filings analysis\n- **[Octagon Earnings Transcripts MCP](https://github.com/OctagonAI/octagon-earnings-transcripts-mcp)** - Specialized for earnings call transcript analysis\n- **[Octagon Stock Market Data MCP](https://github.com/OctagonAI/octagon-stock-market-data-mcp)** - Focused on stock market data access\n- **[Octagon Financial Statements MCP](https://github.com/OctagonAI/octagon-financial-statements-mcp)** - Financial metrics and ratios analysis\n- **[Octagon 13F Holdings MCP](https://github.com/OctagonAI/octagon-13f-holdings-mcp)** - Institutional ownership and Form 13F filings\n\n### Private Market Data Servers\n- **[Octagon Private Companies MCP](https://github.com/OctagonAI/octagon-private-companies-mcp)** - Private company research and intelligence\n- **[Octagon Investors MCP](https://github.com/OctagonAI/octagon-investors-mcp)** - Investor profiles and investment strategies\n- **[Octagon Funding Data MCP](https://github.com/OctagonAI/octagon-funding-data-mcp)** - Startup funding rounds and venture capital data\n\n### Research Tools\n- **[Octagon Deep Research MCP](https://github.com/OctagonAI/octagon-deep-research-mcp)** - Comprehensive research and web scraping capabilities\n\n---\n\n⭐ Star this repo if you find it helpful!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "octagon",
        "octagonai",
        "fintech",
        "fintech octagonai",
        "octagon ai",
        "server octagon"
      ],
      "category": "finance--fintech"
    },
    "QuantConnect--mcp-server": {
      "owner": "QuantConnect",
      "name": "mcp-server",
      "url": "https://github.com/QuantConnect/mcp-server",
      "imageUrl": "",
      "description": "trading workflows directly via natural-language prompts.",
      "stars": 38,
      "forks": 14,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T17:29:44Z",
      "readme_content": "\n<img width=\"1575\" height=\"280\" alt=\"github-header\" src=\"https://github.com/user-attachments/assets/6cec1ef7-0340-416e-ab81-c73fbc8ff847\" />\n\n\n# QuantConnect MCP Server\nThe QuantConnect MCP Server is a bridge for AIs (such as Claude and OpenAI o3 Pro) to interact with our cloud platform. When equipped with our MCP, the AI can perform tasks on your behalf through our API such as updating projects, writing strategies, backtesting, and deploying strategies to production live-trading. \n\nThis is the OFFICIAL implementation of QuantConnect's MCP, maintained by the QuantConnect team. We recommend using the official version to ensure security of your code and API tokens. Our implementation is tested and dockerized for easy cross-platform deployment.\n\n## Getting Started\nTo connect local MCP clients (like Claude Desktop) to the QC MCP Server, follow these steps:\n\n1. Install and open [Docker Desktop](https://docs.docker.com/desktop/).\n2. Install and open [Claude Desktop](https://claude.ai/download).\n3. In Claude Desktop, click **File > Settings > Developer > Edit Config**.\n4. Edit the `claude_desktop_config.json` file to include the following `quantconnect` configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"quantconnect\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\", \"QUANTCONNECT_USER_ID\",\n        \"-e\", \"QUANTCONNECT_API_TOKEN\",\n        \"-e\", \"AGENT_NAME\",\n        \"--platform\", \"<your_platform>\",\n        \"quantconnect/mcp-server\"\n      ],\n      \"env\": {\n        \"QUANTCONNECT_USER_ID\": \"<your_user_id>\",\n        \"QUANTCONNECT_API_TOKEN\": \"<your_api_token>\",\n        \"AGENT_NAME\": \"MCP Server\"\n      }\n    }\n  }\n}\n```\n\n  To get your user Id and API token, see [Request API Token](https://www.quantconnect.com/docs/v2/cloud-platform/community/profile#09-Request-API-Token).\n\n  Our MCP server is multi-platform capable. The options are `linux/amd64` for Intel/AMD chips and `linux/arm64` for ARM chips (for example, Apple's M-series chips).\n\n  If you simultaneously run multiple agents, set a unique value for the `AGENT_NAME` environment variable for each agent to keep record of the request source. \n\n5. Restart Claude Desktop.\n\n   Claude Desktop automatically pulls our MCP server from Docker Hub and connects to it.\n\nTo view all the MCP clients and the features they support, see the [Feature Support Matrix](https://modelcontextprotocol.io/clients#feature-support-matrix) in the MCP documentation.\n\nTo keep the Docker image up-to-date, pull the latest MCP server from Docker Hub in the terminal.\n```\ndocker pull quantconnect/mcp-server\n```\nIf you have an ARM chip, add the `--platform linux/arm64` option.\n\n## Available Tools (64)\n| Tools provided by this Server | Short Description |\n| -------- | ------- |\n| `read_account` | Read the organization account status. |\n| `create_project` | Create a new project in your default organization. |\n| `read_project` | List the details of a project or a set of recent projects. |\n| `list_projects` | List the details of all projects. |\n| `update_project` | Update a project's name or description. |\n| `delete_project` | Delete a project. |\n| `create_project_collaborator` | Add a collaborator to a project. |\n| `read_project_collaborators` | List all collaborators on a project. |\n| `update_project_collaborator` | Update collaborator information in a project. |\n| `delete_project_collaborator` | Remove a collaborator from a project. |\n| `lock_project_with_collaborators` | Lock a project so you can edit it. |\n| `read_project_nodes` | Read the available and selected nodes of a project. |\n| `update_project_nodes` | Update the active state of the given nodes to true. |\n| `create_compile` | Asynchronously create a compile job request for a project. |\n| `read_compile` | Read a compile packet job result. |\n| `create_file` | Add a file to a given project. |\n| `read_file` | Read a file from a project, or all files in the project if no file name is provided. |\n| `update_file_name` | Update the name of a file. |\n| `update_file_contents` | Update the contents of a file. |\n| `patch_file` | Apply a patch (unified diff) to a file in a project. |\n| `delete_file` | Delete a file in a project. |\n| `create_backtest` | Create a new backtest request and get the backtest Id. |\n| `read_backtest` | Read the results of a backtest. |\n| `list_backtests` | List all the backtests for the project. |\n| `read_backtest_chart` | Read a chart from a backtest. |\n| `read_backtest_orders` | Read out the orders of a backtest. |\n| `read_backtest_insights` | Read out the insights of a backtest. |\n| `update_backtest` | Update the name or note of a backtest. |\n| `delete_backtest` | Delete a backtest from a project. |\n| `estimate_optimization_time` | Estimate the execution time of an optimization with the specified parameters. |\n| `create_optimization` | Create an optimization with the specified parameters. |\n| `read_optimization` | Read an optimization. |\n| `list_optimizations` | List all the optimizations for a project. |\n| `update_optimization` | Update the name of an optimization. |\n| `abort_optimization` | Abort an optimization. |\n| `delete_optimization` | Delete an optimization. |\n| `authorize_connection` | Authorize an external connection with a live brokerage or data provider. |\n| `create_live_algorithm` | Create a live algorithm. |\n| `read_live_algorithm` | Read details of a live algorithm. |\n| `list_live_algorithms` | List all your past and current live trading deployments. |\n| `read_live_chart` | Read a chart from a live algorithm. |\n| `read_live_logs` | Get the logs of a live algorithm. |\n| `read_live_portfolio` | Read out the portfolio state of a live algorithm. |\n| `read_live_orders` | Read out the orders of a live algorithm. |\n| `read_live_insights` | Read out the insights of a live algorithm. |\n| `stop_live_algorithm` | Stop a live algorithm. |\n| `liquidate_live_algorithm` | Liquidate and stop a live algorithm. |\n| `create_live_command` | Send a command to a live trading algorithm. |\n| `broadcast_live_command` | Broadcast a live command to all live algorithms in an organization. |\n| `upload_object` | Upload files to the Object Store. |\n| `read_object_properties` | Get Object Store properties of a specific organization and key. |\n| `read_object_store_file_job_id` | Create a job to download files from the Object Store and then read the job Id. |\n| `read_object_store_file_download_url` | Get the URL for downloading files from the Object Store. |\n| `list_object_store_files` | List the Object Store files under a specific directory in an organization. |\n| `delete_object` | Delete the Object Store file of a specific organization and key. |\n| `read_lean_versions` | Returns a list of LEAN versions with basic information for each version. |\n| `check_initialization_errors` | Run a backtest for a few seconds to initialize the algorithm and get inialization errors if any. |\n| `complete_code` | Show the code completion for a specific text input. |\n| `enhance_error_message` | Show additional context and suggestions for error messages. |\n| `update_code_to_pep8` | Update Python code to follow PEP8 style. |\n| `check_syntax` | Check the syntax of a code. |\n| `search_quantconnect` | Search for content in QuantConnect. |\n| `read_mcp_server_version` | Returns the version of the QC MCP Server that's running. |\n| `read_latest_mcp_server_version` | Returns the latest version of the QC MCP Server released. |\n --- \n## Tool Details\n**Tool:** `read_account`\n\nRead the organization account status.\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `create_project`\n\nCreate a new project in your default organization.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `name` | `string`  | Project name. |\n| `language` | `string`  | Programming language to use. |\n| `organizationId` | `string` *optional* | The organization to create project under. If you don't provide a value, it defaults to your preferred organization. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_project`\n\nList the details of a project or a set of recent projects.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer` *optional* | Id of the project to read. |\n| `start` | `integer` *optional* | Starting (inclusive, zero-based) index of the projects to fetch. If you provide this property, omit the project Id property. |\n| `end` | `integer` *optional* | Last (exlusive) index of the projects to fetch. If you provide this property, omit the project Id property. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `list_projects`\n\nList the details of all projects.\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `update_project`\n\nUpdate a project's name or description.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Project Id to which the file belongs. |\n| `name` | `string` *optional* | The new name for the project. |\n| `description` | `string` *optional* | The new description for the project. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `delete_project`\n\nDelete a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to delete. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `create_project_collaborator`\n\nAdd a collaborator to a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to add the collaborator to. |\n| `collaboratorUserId` | `string`  | User Id of the collaborator to add. |\n| `collaborationLiveControl` | `boolean`  | Gives the right to deploy and stop live algorithms. |\n| `collaborationWrite` | `boolean`  | Gives the right to edit the code. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_project_collaborators`\n\nList all collaborators on a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project from which to read the collaborators. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `update_project_collaborator`\n\nUpdate collaborator information in a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project the collaborator is on. |\n| `collaboratorUserId` | `string`  | User Id of the collaborator to update. |\n| `liveControl` | `boolean`  | Gives the right to deploy and stop live algorithms. |\n| `write` | `boolean`  | Gives the right to edit the code. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `delete_project_collaborator`\n\nRemove a collaborator from a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to remove the collaborator from. |\n| `collaboratorId` | `string`  | User Id of the collaborator to remove. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `lock_project_with_collaborators`\n\nLock a project so you can edit it.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to edit. |\n| `codeSourceId` | `string`  | Name of the environment that's creating the request. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_project_nodes`\n\nRead the available and selected nodes of a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to which the nodes refer. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `update_project_nodes`\n\nUpdate the active state of the given nodes to true.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Project Id to which the nodes refer. |\n| `nodes` | `array` *optional* | List of node Ids the project may use. If you omit this property or pass an empty list, the best node will be automatically selected for backtest, research, and live trading. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `create_compile`\n\nAsynchronously create a compile job request for a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to compile. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_compile`\n\nRead a compile packet job result.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project you requested to compile. |\n| `compileId` | `string`  | Compile Id returned during the creation request. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `create_file`\n\nAdd a file to a given project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to add the file. |\n| `name` | `string`  | The name of the new file. |\n| `content` | `string` *optional* | The content of the new file. |\n| `codeSourceId` | `string` *optional* | Name of the environment that's creating the request. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_file`\n\nRead a file from a project, or all files in the project if no file name is provided.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the file. |\n| `name` | `string` *optional* | The name of the file to read. |\n| `codeSourceId` | `string` *optional* | Name of the environment that's creating the request. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `update_file_name`\n\nUpdate the name of a file.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the file. |\n| `name` | `string`  | The current name of the file. |\n| `newName` | `string`  | The new name for the file. |\n| `codeSourceId` | `string` *optional* | Name of the environment that's creating the request. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `update_file_contents`\n\nUpdate the contents of a file.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the file. |\n| `name` | `string`  | The name of the file to update. |\n| `content` | `string`  | The new contents of the file. |\n| `codeSourceId` | `string` *optional* | Name of the environment that's creating the request. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `patch_file`\n\nApply a patch (unified diff) to a file in a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the file. |\n| `patch` | `string`  | A patch string in **unified diff format** (as produced by `git diff`). It specifies changes to apply to one or more files in the project. |\n| `codeSourceId` | `string` *optional* | Name of the environment that's creating the request. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `delete_file`\n\nDelete a file in a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the file. |\n| `name` | `string`  | The name of the file to delete. |\n| `codeSourceId` | `string` *optional* | Name of the environment that's creating the request. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `create_backtest`\n\nCreate a new backtest request and get the backtest Id.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to backtest. |\n| `compileId` | `string`  | Compile Id for the project to backtest. |\n| `backtestName` | `string`  | Name for the new backtest. |\n| `parameters` | `object` *optional* | Parameters to use for the backtest. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_backtest`\n\nRead the results of a backtest.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the backtest. |\n| `backtestId` | `string`  | Id of the backtest to read. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `list_backtests`\n\nList all the backtests for the project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project from which to read one or multiple backtests. |\n| `includeStatistics` | `boolean` *optional* | If true, the backtests summaries from the response will contain the statistics with their corresponding values. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_backtest_chart`\n\nRead a chart from a backtest.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the backtest. |\n| `backtestId` | `string`  | Id of the backtest for this chart request. |\n| `name` | `string`  | The requested chart name. |\n| `count` | `integer`  | The number of data points to request. |\n| `start` | `integer`  | The start timestamp of the request in Unix time. |\n| `end` | `integer`  | The end timestamp of the request in Unix time. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_backtest_orders`\n\nRead out the orders of a backtest.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `start` | `integer`  | Starting index of the orders to be fetched. |\n| `end` | `integer`  | Last index of the orders to be fetched. Note that end - start must be less than 100. |\n| `projectId` | `integer`  | Id of the project from which to read the backtest. |\n| `backtestId` | `string`  | Id of the backtest from which to read the orders. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_backtest_insights`\n\nRead out the insights of a backtest.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `start` | `integer`  | Starting index of the insights to be fetched. |\n| `end` | `integer`  | Last index of the insights to be fetched. Note that end - start must be less than 100. |\n| `projectId` | `integer`  | Id of the project from which to read the backtest. |\n| `backtestId` | `string`  | Id of the backtest from which to read the insights. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `update_backtest`\n\nUpdate the name or note of a backtest.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the backtest. |\n| `backtestId` | `string`  | Id of the backtest to update. |\n| `name` | `string` *optional* | Name to assign to the backtest. |\n| `note` | `string` *optional* | Note to attach to the backtest. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `delete_backtest`\n\nDelete a backtest from a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that contains the backtest. |\n| `backtestId` | `string`  | Id of the backtest to delete. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `estimate_optimization_time`\n\nEstimate the execution time of an optimization with the specified parameters.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to optimize. |\n| `name` | `string`  | Name of the optimization. |\n| `target` | `string`  | Target statistic of the optimization to minimize or maximize. |\n| `targetTo` | `string`  | Target extremum of the optimization. |\n| `targetValue` | `number` *optional* | Desired value for the optimization target statistic. |\n| `strategy` | `string`  | Optimization strategy. |\n| `compileId` | `string` *optional* | Optimization compile Id. |\n| `parameters` | `array`  | Optimization parameters. |\n| `constraints` | `array` *optional* | Optimization constraints. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `create_optimization`\n\nCreate an optimization with the specified parameters.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to optimize. |\n| `name` | `string`  | Name of the optimization. |\n| `target` | `string`  | Target statistic of the optimization to minimize or maximize. |\n| `targetTo` | `string`  | Target extremum of the optimization. |\n| `targetValue` | `number` *optional* | Desired value for the optimization target statistic. |\n| `strategy` | `string`  | Optimization strategy. |\n| `compileId` | `string`  | Optimization compile Id. |\n| `parameters` | `array`  | Optimization parameters. |\n| `constraints` | `array` *optional* | Optimization constraints. |\n| `estimatedCost` | `number`  | Estimated cost for optimization. |\n| `nodeType` | `string`  | Optimization node type. |\n| `parallelNodes` | `integer`  | Number of parallel nodes for optimization. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_optimization`\n\nRead an optimization.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `optimizationId` | `string`  | Id of the optimization to read. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `list_optimizations`\n\nList all the optimizations for a project.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the Project to get a list of optimizations for. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `update_optimization`\n\nUpdate the name of an optimization.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `optimizationId` | `string`  | Id of the optimization to update. |\n| `name` | `string`  | Name to assign to the optimization. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `abort_optimization`\n\nAbort an optimization.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `optimizationId` | `string`  | Id of the optimization to abort. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `delete_optimization`\n\nDelete an optimization.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `optimizationId` | `string`  | Id of the optimization to delete. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `authorize_connection`\n\nAuthorize an external connection with a live brokerage or data provider.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `brokerage` | `string`  | The brokerage to authenticate a connection with. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `create_live_algorithm`\n\nCreate a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `versionId` | `string`  | The version of the Lean used to run the algorithm. -1 is master, however, sometimes this can create problems with live deployments. If you experience problems using, try specifying the version of Lean you would like to use. |\n| `projectId` | `integer`  | Project Id. |\n| `compileId` | `string`  | Compile Id. |\n| `nodeId` | `string`  | Id of the node that will run the algorithm. |\n| `brokerage` | `object`  | Brokerage configuration for the live algorithm. |\n| `dataProviders` | `object` *optional* | Dictionary of data provider configurations to be used in the live algorithm. Provide at least one. The order in which you define the providers defines their order of precedence. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_live_algorithm`\n\nRead details of a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to read. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `list_live_algorithms`\n\nList all your past and current live trading deployments.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer` *optional* | Id of the project to include in response. If you omit this property, the response includes all your projects. |\n| `status` | `status enum` *optional* | Status of the live deployments to include in the response. If you omit this property, the response includes deployments with any status. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_live_chart`\n\nRead a chart from a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project that's live trading. |\n| `name` | `string`  | Name of the chart to read. |\n| `count` | `integer`  | The number of data points to request. |\n| `start` | `integer`  | The unix start time of the request. |\n| `end` | `integer`  | The unix end time of the request. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_live_logs`\n\nGet the logs of a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `format` | `` *optional* | Format of the log results. |\n| `projectId` | `integer`  | Id of the project that contains the live running algorithm. |\n| `algorithmId` | `string`  | Deploy Id (Algorithm Id) of the live running algorithm. |\n| `startLine` | `integer`  | Start line (inclusive) of logs to read. The lines numbers start at 0. |\n| `endLine` | `integer`  | End line (exclusive) of logs to read, where endLine - startLine <= 250. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_live_portfolio`\n\nRead out the portfolio state of a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project from which to read the live algorithm. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_live_orders`\n\nRead out the orders of a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `start` | `integer`  | Starting index of the orders to be fetched. |\n| `end` | `integer`  | Last index of the orders to be fetched. Note that end - start must be <= 1,000. |\n| `projectId` | `integer`  | Id of the project from which to read the live algorithm. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_live_insights`\n\nRead out the insights of a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `start` | `integer` *optional* | Starting index of the insights to be fetched. Required if end > 100. |\n| `end` | `integer`  | Last index of the insights to be fetched. Note that end - start must be less than 100. |\n| `projectId` | `integer`  | Id of the project from which to read the live algorithm. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `stop_live_algorithm`\n\nStop a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Id of the project to stop trading live. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `liquidate_live_algorithm`\n\nLiquidate and stop a live algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Project Id for the live instance to liquidate. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `create_live_command`\n\nSend a command to a live trading algorithm.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `projectId` | `integer`  | Project for the live instance we want to run the command against. |\n| `command` | `object`  | The command to run. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `broadcast_live_command`\n\nBroadcast a live command to all live algorithms in an organization.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `organizationId` | `string`  | Organization Id of the projects we would like to broadcast the command to |\n| `excludeProjectId` | `integer` *optional* | Project for the live instance we want to exclude from the broadcast list. If null, all projects will be included. |\n| `command` | `object`  | The command to run. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `upload_object`\n\nUpload files to the Object Store.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `organizationId` | `string`  | Orgainization ID. |\n| `key` | `string`  | Unique key to access the object in Object Store. |\n| `objectData` | `string`  | Object data to be stored. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_object_properties`\n\nGet Object Store properties of a specific organization and key.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `organizationId` | `string`  | Id of the organization that owns the Object Store. |\n| `key` | `string`  | Key in the Object Store. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_object_store_file_job_id`\n\nCreate a job to download files from the Object Store and then read the job Id.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `organizationId` | `string`  | Id of the organization that owns the Object Store. |\n| `keys` | `array`  | Keys of the Object Store files. |\n\n*This tool modifies it's environment.*\n\n*This tool doesn't perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has additional effects.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_object_store_file_download_url`\n\nGet the URL for downloading files from the Object Store.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `organizationId` | `string`  | Id of the organization that owns the Object Store. |\n| `jobId` | `string`  | Id of the download job for the files. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `list_object_store_files`\n\nList the Object Store files under a specific directory in an organization.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `organizationId` | `string`  | Id of the organization to list the Object Store files from. |\n| `path` | `string` *optional* | Path to a directory in the Object Store. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `delete_object`\n\nDelete the Object Store file of a specific organization and key.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `organizationId` | `string`  | Id of the organization that owns the Object Store. |\n| `key` | `string`  | Key of the Object Store file to delete. |\n\n*This tool modifies it's environment.*\n\n*This tool may perform destructive updates.*\n\n*Calling this tool repeatedly with the same arguments has no additional effect.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_lean_versions`\n\nReturns a list of LEAN versions with basic information for each version.\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `check_initialization_errors`\n\nRun a backtest for a few seconds to initialize the algorithm and get inialization errors if any.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `language` | `string`  | Programming language. |\n| `files` | `array`  | Files to process. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `complete_code`\n\nShow the code completion for a specific text input.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `language` | `string`  | Programming language for the code completion. |\n| `sentence` | `string`  | Sentence to complete. |\n| `responseSizeLimit` | `integer` *optional* | Maximum size of the responses. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `enhance_error_message`\n\nShow additional context and suggestions for error messages.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `language` | `string`  | Programming language for the code completion. |\n| `error` | `object`  | Error message to enhance. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `update_code_to_pep8`\n\nUpdate Python code to follow PEP8 style.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `files` | `array`  | Files of the project. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `check_syntax`\n\nCheck the syntax of a code.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `language` | `string`  | Programming language. |\n| `files` | `array`  | Files to process. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `search_quantconnect`\n\nSearch for content in QuantConnect.\n\n| Parameter | Type | Description |\n| -------- | ------- | ------- |\n| `language` | `string`  | Programming language of the content to search. |\n| `criteria` | `array`  | Criteria for the search. |\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_mcp_server_version`\n\nReturns the version of the QC MCP Server that's running.\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n**Tool:** `read_latest_mcp_server_version`\n\nReturns the latest version of the QC MCP Server released.\n\n*This tool doesn't modify it's environment.*\n\n*This tool may interact with an \"open world\" of external entities.*\n\n---\n\n## Debugging\n\n### Build\n To build the Docker image from source, clone this repository and then run `docker build -t quantconnect/mcp-server .`.\n\n### Logs\n To log to the `mcp-server-quantconnect.log` file, `import sys` and then `print(\"Hello world\", file=sys.stderr)`.\n\n### Inspector\n To start the inspector, run `npx @modelcontextprotocol/inspector uv run src/main.py`.\n To pass a model to the inspector tool, use JSON (for example, `{\"name\":\"My Project\",\"language\":\"Py\"}`).\n \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "finance",
        "fintech",
        "trading",
        "trading workflows",
        "finance fintech",
        "fintech quantconnect"
      ],
      "category": "finance--fintech"
    },
    "QuantGeekDev--coincap-mcp": {
      "owner": "QuantGeekDev",
      "name": "coincap-mcp",
      "url": "https://github.com/QuantGeekDev/coincap-mcp",
      "imageUrl": "",
      "description": "Real-time cryptocurrency market data integration using CoinCap's public API, providing access to crypto prices and market information without API keys",
      "stars": 87,
      "forks": 27,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-31T09:23:55Z",
      "readme_content": "# Coincap MCP\n\n[![smithery badge](https://smithery.ai/badge/coincap-mcp)](https://smithery.ai/server/coincap-mcp)\n\n## What does this server do?\n\nAllows you to query crypto information from coincap's public API - no API keys or registration required\n\n## 🚀 Quick Start\n\nTo get started, add this configuration to your Claude Desktop config file:\n\n**MacOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mongodb\": {\n      \"command\": \"npx\",\n      \"args\": [\"coincap-mcp\"]\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install Coincap for Claude Desktop automatically via [Smithery](https://smithery.ai/server/coincap-mcp):\n\n```bash\nnpx -y @smithery/cli install coincap-mcp --client claude\n```\n\n### Prerequisites\n\n- Node.js 18+\n- npx\n\nThen, launch Claude Desktop and you're ready to go!\n\n## Sample Prompts\n\n- What is the price of bitcoin?\n- What are the available crypto assets?\n- What is the market cap of ethereum?\n\n## Tools\n\n#### Bitcoin Price Tool\n\nGets price for Bitcoin specifically, it's a simple example of a primitive API call tool\n\n#### Get Crypto Price Tool\n\nGets price for any cryptocurrency available on coincap API. It's a good example of how to get mandatory parameter data for your tool calls\n\n#### List Assets\n\nGets a list of all crypto assets available in coincap API\n\n## Development - local build\n\nTo build it locally:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"coincap-mcp\": {\n      \"command\": \"/path/to/coincap-mcp/build/index.js\"\n    }\n  }\n}\n```\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "coincap",
        "crypto",
        "finance",
        "quantgeekdev coincap",
        "using coincap",
        "coincap public"
      ],
      "category": "finance--fintech"
    },
    "QuentinCody--braintree-mcp-server": {
      "owner": "QuentinCody",
      "name": "braintree-mcp-server",
      "url": "https://github.com/QuentinCody/braintree-mcp-server",
      "imageUrl": "",
      "description": "Unofficial PayPal Braintree payment gateway MCP Server for AI agents to process payments, manage customers, and handle transactions securely.",
      "stars": 3,
      "forks": 3,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-09-02T07:27:43Z",
      "readme_content": "# Braintree MCP Server\n\nAn unofficial Model Context Protocol (MCP) server for interacting with PayPal Braintree payment processing services.\n\n## License and Citation\n\nThis project is available under the MIT License with an Academic Citation Requirement. This means you can freely use, modify, and distribute the code, but any academic or scientific publication that uses this software must provide appropriate attribution.\n\n### For academic/research use:\nIf you use this software in a research project that leads to a publication, presentation, or report, you **must** cite this work according to the format provided in [CITATION.md](CITATION.md).\n\n### For commercial/non-academic use:\nCommercial and non-academic use follows the standard MIT License terms without the citation requirement.\n\nBy using this software, you agree to these terms. See [LICENSE.md](LICENSE.md) for the complete license text.\n\n## Server Versions\n\nThere are two versions of the Braintree MCP server available:\n\n### 1. STDIO Transport Server (`braintree_server.py`)\n\n- Uses standard input/output (STDIO) for communication\n- Designed for integrations with Claude Desktop and other MCP clients that support STDIO\n- Each client session spawns a new server process\n- The server terminates when the client disconnects\n\n**Usage with Claude Desktop:**\n1. Configure `claude_desktop_config.json` to point to this server\n2. Open Claude Desktop and select the Braintree tool\n\n### 2. SSE Transport Server (`braintree_sse_server.py`)\n\n- Uses Server-Sent Events (SSE) for communication\n- Designed as a standalone web server that can handle multiple client connections\n- Server runs persistently until manually stopped\n- Binds to `127.0.0.1:8001` by default (configurable)\n\n**Manual Usage:**\n```bash\npython braintree_sse_server.py\n```\n\n**Connecting to the SSE server:**\nUse an MCP client that supports SSE transport and connect to `http://127.0.0.1:8001/sse`\n\n## Overview\n\nThis server implements the Model Context Protocol (MCP) specification to provide AI assistant models with direct, structured access to Braintree's payment processing capabilities via GraphQL API. It enables AI systems to perform payment operations like fetching transactions, creating payments, and managing customer data through MCP tools.\n\n## Installation\n\n1. Clone this repository\n```bash\ngit clone https://github.com/yourusername/braintree-mcp-server.git\ncd braintree-mcp-server\n```\n\n2. Set up a Python 3.13+ environment\n```bash\n# If using pyenv\npyenv install 3.13.0\npyenv local 3.13.0\n\n# Or using another method to ensure Python 3.13+\n```\n\n3. Install dependencies\n```bash\npip install -e .\n```\n\n## Configuration\n\nCreate a `.env` file in the project root with your Braintree credentials:\n\n```\nBRAINTREE_MERCHANT_ID=your_merchant_id\nBRAINTREE_PUBLIC_KEY=your_public_key\nBRAINTREE_PRIVATE_KEY=your_private_key\nBRAINTREE_ENVIRONMENT=sandbox  # or production\n```\n\nYou can obtain these credentials from your Braintree Control Panel.\n\n## Usage\n\n### Running the server\n\n#### Default STDIO Transport\n```bash\npython braintree_server.py\n```\n\nThe server runs using stdio transport by default, which is suitable for integration with AI assistant systems that support MCP.\n\n#### Server-Sent Events (SSE) Transport\n```bash\npython braintree_sse_server.py\n```\n\nThe SSE server provides a web-based transport layer that allows multiple persistent client connections. This is useful for standalone deployments where multiple clients need to access the Braintree functionality.\n\nDefault configuration:\n- Host: 127.0.0.1 (localhost)\n- Port: 8001\n- Environment: Defined in your .env file\n\nSee `requirements.txt` for the required dependencies.\n\n### Available MCP Tools\n\n#### braintree_ping\n\nSimple connectivity test to check if your Braintree credentials are working.\n\n```python\nresponse = await braintree_ping()\n# Returns \"pong\" if successful\n```\n\n#### braintree_execute_graphql\n\nExecute arbitrary GraphQL queries against the Braintree API.\n\n```python\nquery = \"\"\"\nquery GetTransactionDetails($id: ID!) {\n  node(id: $id) {\n    ... on Transaction {\n      id\n      status\n      amount {\n        value\n        currencyCode\n      }\n      createdAt\n    }\n  }\n}\n\"\"\"\n\nvariables = {\"id\": \"transaction_id_here\"}\n\nresponse = await braintree_execute_graphql(query, variables)\n# Returns JSON response from Braintree\n```\n\n## Common GraphQL Operations\n\n### Fetch Customer\n\n```graphql\nquery GetCustomer($id: ID!) {\n  node(id: $id) {\n    ... on Customer {\n      id\n      firstName\n      lastName\n      email\n      paymentMethods {\n        edges {\n          node {\n            id\n            details {\n              ... on CreditCardDetails {\n                last4\n                expirationMonth\n                expirationYear\n                cardType\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n```\n\n### Create Transaction\n\n```graphql\nmutation CreateTransaction($input: ChargePaymentMethodInput!) {\n  chargePaymentMethod(input: $input) {\n    transaction {\n      id\n      status\n      amount {\n        value\n        currencyCode\n      }\n    }\n  }\n}\n```\n\nWith variables:\n```json\n{\n  \"input\": {\n    \"paymentMethodId\": \"payment_method_id_here\",\n    \"transaction\": {\n      \"amount\": \"10.00\",\n      \"orderId\": \"order123\",\n      \"options\": {\n        \"submitForSettlement\": true\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting\n\n- Ensure your Braintree credentials are correct in the `.env` file\n- Verify your network connection can reach Braintree's API endpoints\n- Check for any rate limiting or permission issues with your Braintree account",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "braintree",
        "mcp",
        "fintech",
        "paypal braintree",
        "braintree mcp",
        "braintree payment"
      ],
      "category": "finance--fintech"
    },
    "Regenerating-World--pix-mcp": {
      "owner": "Regenerating-World",
      "name": "pix-mcp",
      "url": "https://github.com/Regenerating-World/pix-mcp",
      "imageUrl": "",
      "description": "Generate Pix QR codes and copy-paste strings with fallback across multiple providers (Efí, Cielo, etc.) for Brazilian instant payments.",
      "stars": 2,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-14T00:04:09Z",
      "readme_content": "# Pix MCP Server v2.1.0\n\nA lightweight Model Context Protocol (MCP) server that enables AI agents (Claude, Cursor, Windsurf) to generate static Pix QR codes via natural-language prompts.\n\n## 🚀 Features\n\n- **🔧 MCP Tool**:\n  - `generateStaticPix` - Generate static Pix QR codes for any Pix key (no API required)\n- **🚀 Production-ready**: Comprehensive error handling and logging\n- **🔒 Type-safe**: Full TypeScript implementation with Zod validation\n- **📱 QR Code generation**: Automatic QR code creation for Pix payments\n- **📦 Zero Dependencies**: No external API keys or services required\n- **🌍 Open & Accessible**: Works without any registration or credentials\n- **✅ EMV 4.0 Compliant**: Follows BACEN PIX standards with proper CRC16-CCITT validation\n\n## 🚀 Quick Start\n\n```bash\n# Install globally\nnpm install -g pix-mcp\n\n# Run in MCP mode (for Claude Desktop)\npix-mcp\n\n# Run in HTTP mode (for web services)\nMCP_MODE=http pix-mcp\n```\n\n## 🔧 Usage\n\n### MCP Mode (Default)\n\n```bash\n# Start in MCP mode for Claude Desktop integration\npix-mcp\n```\n\n### HTTP Mode\n\n```bash\n# Start in HTTP mode on port 3000\nMCP_MODE=http pix-mcp\n```\n\n### Making Requests\n\n#### HTTP API\n\n```bash\ncurl -X POST http://localhost:3000/tools/call \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"name\": \"generateStaticPix\",\n    \"arguments\": {\n      \"pixKey\": \"10891990909\",\n      \"amount\": 100.50,\n      \"recipientName\": \"Franco Camelo Aguzzi\",\n      \"recipientCity\": \"Florianopolis\"\n    }\n  }'\n```\n\n#### MCP Tool\n\n```typescript\nconst result = await mcpClient.callTool('generateStaticPix', {\n  pixKey: '10891990909',\n  amount: 100.5,\n  recipientName: 'Franco Camelo Aguzzi',\n  recipientCity: 'Florianopolis',\n});\n```\n\n## 🚀 Deployment\n\n### Railway\n\n[![Deploy on Railway](https://railway.app/button.svg)](https://railway.app/new/template?template=https%3A%2F%2Fgithub.com%2FRegenerating-World%2Fpix-mcp)\n\n**⚠️ Important:** After deploying to Railway, add these environment variables in the Railway dashboard:\n\n- `MCP_MODE=http`\n- `NODE_ENV=production` (optional)\n\n### Manual Deployment\n\n```bash\n# Clone the repository\ngit clone https://github.com/Regenerating-World/pix-mcp.git\ncd pix-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Start the server in HTTP mode\nMCP_MODE=http NODE_ENV=production node dist/index.js\n```\n\n## 📝 License\n\nMIT\n\n## 🔧 Configuration\n\n### Environment Variables\n\n- `MCP_MODE`: Server mode (`stdio` for MCP, `http` for HTTP API) - Default: `stdio`\n- `NODE_ENV`: Environment (`development`/`production`) - Default: `development`\n- `PORT`: HTTP port when in HTTP mode - Default: `3000`\n\n## 🤖 Usage with AI Tools\n\n### Claude Desktop\n\n1. Install the package globally:\n\n```bash\nnpm install -g pix-mcp\n```\n\n2. Add to your Claude Desktop MCP configuration (`~/Library/Application Support/Claude/claude_desktop_config.json` on macOS or `%APPDATA%/Claude/claude_desktop_config.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"pix-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"pix-mcp\"],\n      \"env\": {\n        \"MCP_MODE\": \"stdio\"\n      }\n    }\n  }\n}\n```\n\n3. Restart Claude Desktop and start using:\n\n```\nCreate a Pix charge for R$25.50 to Maria Silva for lunch\n```\n\n### Cursor (with MCP support)\n\nAdd to your Cursor MCP settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"pix-mcp\": {\n      \"command\": \"pix-mcp\"\n    }\n  }\n}\n```\n\n### Windsurf (with MCP support)\n\nConfigure in Windsurf MCP settings:\n\n```json\n{\n  \"pix-mcp\": {\n    \"command\": \"npx pix-mcp\",\n    \"args\": []\n  }\n}\n```\n\n### Any MCP-compatible tool\n\nYour tool should support MCP servers. Configure using:\n\n- **Command**: `npx pix-mcp` or `pix-mcp` (if installed globally)\n- **Protocol**: stdio\n- **Environment**: `MCP_MODE=stdio`\n\n## 🔨 Available Tools\n\n### `generateStaticPix`\n\nCreates a static Pix payment QR code following BACEN EMV 4.0 standards.\n\n**Parameters:**\n\n- `pixKey` (string): Valid Pix key (email, phone, CPF, CNPJ, or random key)\n- `amount` (number): Payment amount in BRL (0.01 to 999,999.99)\n- `recipientName` (string): Name of the payment recipient (max 25 chars)\n- `recipientCity` (string): City of the payment recipient (max 15 chars)\n\n**Returns:**\n\n- Payment details (amount, recipient, city)\n- Pix copy-paste code (EMV format)\n- QR code image (base64 data URL)\n- Success status and message\n\n**Supported Pix Key Types:**\n\n- 📧 Email: `example@email.com`\n- 📱 Phone: `+5511999999999`\n- 👤 CPF: `12345678901` (11 digits)\n- 🏢 CNPJ: `12345678000195` (14 digits)\n- 🔑 Random Key: `123e4567-e89b-12d3-a456-426614174000` (UUID format)\n\n## 🏗️ Development\n\n```bash\n# Development mode with hot reload\nnpm run dev\n\n# Run tests\nnpm test\n\n# Build for production\nnpm run build\n\n# Lint code\nnpm run lint\n\n# Format code\nnpm run format\n```\n\n## 🗺️ Roadmap\n\n### Phase 1: MVP ✅\n\n- [x] `generateStaticPix` tool\n- [x] Static Pix QR code generation\n- [x] QR code generation\n- [x] Claude Desktop compatibility\n- [x] EMV 4.0 compliance\n- [x] CRC16-CCITT validation\n- [x] All Pix key types support\n- [x] Public deployment\n- [x] MCP server configuration files\n- [x] Multi-tool compatibility\n\n### Phase 2: MCP Discovery\n\n- [ ] Register with MCP registry\n- [ ] Add to community MCP directories\n- [ ] Integration examples for more tools\n\n## 🔒 Security & Validation\n\n- ✅ EMV 4.0 standard compliance\n- ✅ CRC16-CCITT checksum validation\n- ✅ Input validation with Zod schemas\n- ✅ Pix key format validation\n- ✅ Comprehensive error handling\n- ✅ Type-safe TypeScript implementation\n\n## ⚠️ Important Notes\n\n- **CPF/CNPJ Keys**: Must be valid and registered as Pix keys\n- **Test Data**: Avoid using fake CPFs like `12345678900` - they will be rejected by banks\n- **Static Codes**: No expiration, recipient must check payments manually\n- **Validation**: All codes are EMV-compliant and pass bank validation\n\n## 📝 License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Add tests if applicable\n5. Submit a pull request\n\n## 📞 Support\n\n- GitHub Issues: [Report bugs or request features](https://github.com/Regenerating-World/pix-mcp/issues)\n- Documentation: Available in this README\n\n---\n\nMade with ❤️ for the Brazilian Pix ecosystem\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pix",
        "fintech",
        "qr",
        "pix qr",
        "qr codes",
        "pix mcp"
      ],
      "category": "finance--fintech"
    },
    "RomThpt--xrpl-mcp-server": {
      "owner": "RomThpt",
      "name": "xrpl-mcp-server",
      "url": "https://github.com/RomThpt/mcp-xrpl",
      "imageUrl": "",
      "description": "MCP server for the XRP Ledger that provides access to account information, transaction history, and network data. Allows querying ledger objects, submitting transactions, and monitoring the XRPL network.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "xrp",
        "xrpl",
        "mcp",
        "xrp ledger",
        "xrpl mcp",
        "romthpt xrpl"
      ],
      "category": "finance--fintech"
    },
    "SaintDoresh--Crypto-Trader-MCP-ClaudeDesktop": {
      "owner": "SaintDoresh",
      "name": "Crypto-Trader-MCP-ClaudeDesktop",
      "url": "https://github.com/SaintDoresh/Crypto-Trader-MCP-ClaudeDesktop.git",
      "imageUrl": "",
      "description": "An MCP tool that provides cryptocurrency market data using the CoinGecko API.",
      "stars": 15,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T11:23:11Z",
      "readme_content": "# Crypto Trader MCP Tool for Claude Desktop\n\nAn MCP (Model Context Protocol) tool that provides cryptocurrency market data using the CoinGecko API, specifically designed for Claude Desktop.\n\n## Tutorial\n\nFor a detailed guide on setting up and using this tool, check out our Medium tutorial:\n[Tutorial: Using Claude Desktop with Crypto Trader MCP Tool to Get Real-Time Cryptocurrency Data](https://medium.com/@saintdoresh/tutorial-using-claude-desktop-with-crypto-trader-mcp-tool-to-get-real-time-cryptocurrency-data-4df25ecede33)\n\n## Features\n\n- Real-time cryptocurrency price data\n- Detailed market information for cryptocurrencies\n- Historical price charts\n- Cryptocurrency search functionality\n- Trending cryptocurrencies tracking\n- Global market statistics\n\n## Setup\n\n1. Ensure you have Python 3.10 or higher installed\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n## Integration with Claude Desktop\n\n1. Configure your MCP settings in Claude Desktop by adding the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"crypto-trader\": {\n      \"command\": \"py\",\n      \"args\": [\"-3.13\", \"C:\\\\Path\\\\To\\\\Your\\\\Crypto-Trader-MCP-ClaudeDesktop\\\\main.py\"]\n    }\n  }\n}\n```\n\n2. Replace the path with the full path to your main.py file\n3. Run the server using:\n```bash\npy -3.13 main.py\n```\n4. Keep the server running while using Claude Desktop\n\n## Available Tools\n\n### 1. get_crypto_price\nGet real-time cryptocurrency price information:\n```json\n{\n    \"symbol\": \"BTC\",\n    \"name\": \"bitcoin\",\n    \"price\": 65423.12,\n    \"change_24h\": 2.5,\n    \"volume_24h\": 28345678901,\n    \"market_cap\": 1234567890123,\n    \"timestamp\": \"2025-03-15T10:30:00\"\n}\n```\n\n### 2. get_crypto_market_data\nGet detailed market information for a cryptocurrency:\n```json\n{\n    \"symbol\": \"ETH\",\n    \"name\": \"Ethereum\",\n    \"market_cap_rank\": 2,\n    \"current_price\": 3521.48,\n    \"market_cap\": 423456789012,\n    \"total_volume\": 15834567890,\n    \"high_24h\": 3580.25,\n    \"low_24h\": 3475.62,\n    \"price_change_24h\": 45.86,\n    \"price_change_percentage_24h\": 1.32,\n    \"circulating_supply\": 120283456,\n    \"total_supply\": 120283456,\n    \"max_supply\": null,\n    \"ath\": 4878.26,\n    \"ath_date\": \"2021-11-10T14:24:11.849Z\",\n    \"atl\": 0.432979,\n    \"atl_date\": \"2015-10-20T00:00:00.000Z\"\n}\n```\n\n### 3. get_crypto_historical_data\nGet historical price data for a cryptocurrency:\n```json\n{\n    \"symbol\": \"BTC\",\n    \"name\": \"bitcoin\",\n    \"days\": 30,\n    \"prices\": [\n        {\n            \"date\": \"2025-02-15T00:00:00\",\n            \"price\": 62150.23\n        },\n        {\n            \"date\": \"2025-02-16T00:00:00\",\n            \"price\": 63421.15\n        }\n        // ... more data points\n    ]\n}\n```\n\n### 4. search_crypto\nSearch for cryptocurrencies:\n```json\n{\n    \"results\": [\n        {\n            \"id\": \"bitcoin\",\n            \"symbol\": \"BTC\",\n            \"name\": \"Bitcoin\"\n        },\n        {\n            \"id\": \"bitcoin-cash\",\n            \"symbol\": \"BCH\",\n            \"name\": \"Bitcoin Cash\"\n        }\n        // ... more results\n    ]\n}\n```\n\n### 5. get_trending_crypto\nGet trending cryptocurrencies:\n```json\n{\n    \"trending_coins\": [\n        {\n            \"id\": \"pendle\",\n            \"name\": \"Pendle\",\n            \"symbol\": \"PENDLE\",\n            \"market_cap_rank\": 85,\n            \"price_btc\": 0.00002356\n        }\n        // ... more trending coins\n    ]\n}\n```\n\n### 6. get_global_crypto_data\nGet global cryptocurrency market data:\n```json\n{\n    \"active_cryptocurrencies\": 12875,\n    \"markets\": 892,\n    \"total_market_cap_usd\": 2347890123456,\n    \"total_volume_usd\": 89723456789,\n    \"market_cap_percentage\": {\n        \"BTC\": 52.4,\n        \"ETH\": 18.2\n        // ... more cryptocurrencies\n    },\n    \"updated_at\": \"2025-03-15T10:30:00\"\n}\n```\n\n## Sample Queries\n\nYou can ask Claude Desktop questions like:\n- \"What's the current price of Bitcoin?\"\n- \"Show me detailed market data for Ethereum\"\n- \"What's the price history of Dogecoin for the last 30 days?\"\n- \"Search for cryptocurrencies related to 'sol'\"\n- \"Which cryptocurrencies are trending today?\"\n- \"What's the total cryptocurrency market capitalization right now?\"\n\n## Error Handling\n\nAll tools include proper error handling and will return an error message if something goes wrong:\n```json\n{\n    \"error\": \"Failed to fetch price for INVALID_SYMBOL\"\n}\n```\n\n## Troubleshooting\n\nIf the MCP server is not working in Claude Desktop:\n1. Make sure the server is running - you should see output when you start the script\n2. Verify the path in your settings is correct and absolute\n3. Make sure Python 3.10+ is in your system PATH\n4. Check that all dependencies are installed\n5. Try restarting Claude Desktop\n6. Check logs for any error messages\n\n## Rate Limits\n\nThis tool uses the free CoinGecko API which has rate limits. Please be aware that very frequent requests may be throttled by the API.\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "crypto",
        "cryptocurrency",
        "trader mcp",
        "crypto trader",
        "claudedesktop mcp"
      ],
      "category": "finance--fintech"
    },
    "SaintDoresh--YFinance-Trader-MCP-ClaudeDesktop": {
      "owner": "SaintDoresh",
      "name": "YFinance-Trader-MCP-ClaudeDesktop",
      "url": "https://github.com/SaintDoresh/YFinance-Trader-MCP-ClaudeDesktop.git",
      "imageUrl": "",
      "description": "An MCP tool that provides stock market data and analysis using the Yahoo Finance API.",
      "stars": 23,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-26T13:38:08Z",
      "readme_content": "# YFinance Trader MCP Tool for Claude Desktop\n\nAn MCP (Model Context Protocol) tool that provides stock market data and trading capabilities using the yfinance library, specifically adapted for Claude Desktop.\n\n> **Credit**: This project was inspired by [mcp-stocks](https://github.com/luigiajah/mcp-stocks) by Luigi Ajah, which is a similar implementation for Cursor. This adaptation modifies the original concept to work with Claude Desktop.\n\n## Tutorial\n\nFor a detailed guide on setting up and using this tool, check out our Medium tutorial:\n[Tutorial: Using Claude Desktop with YFinance Trader MCP Tool to Access Real-Time Stock Market Data](https://medium.com/@saintdoresh/tutorial-using-claude-desktop-with-yfinance-trader-mcp-tool-to-access-real-time-stock-market-data-904cd1e1ba09)\n\n## Features\n\n- Real-time stock quotes\n- Company information and financial metrics\n- Historical price data\n- Symbol search functionality\n- Analyst recommendations\n- Insider transaction tracking\n\n## Setup\n\n1. Ensure you have Python 3.10 or higher installed\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n## Integration with Claude Desktop\n\n1. Configure your MCP settings in Claude Desktop by adding the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"yfinance-trader\": {\n      \"command\": \"py\",\n      \"args\": [\"-3.13\", \"path/to/your/main.py\"]\n    }\n  }\n}\n```\n\n2. Replace the path with the full path to your main.py file\n3. Restart Claude Desktop if needed\n\n## Available Tools\n\n### 1. get_stock_quote\nGet real-time stock quote information:\n```json\n{\n    \"symbol\": \"AAPL\",\n    \"price\": 150.25,\n    \"change\": 2.5,\n    \"changePercent\": 1.67,\n    \"volume\": 1234567,\n    \"timestamp\": \"2024-03-20T10:30:00\"\n}\n```\n\n### 2. get_company_overview\nGet company information and key metrics:\n```json\n{\n    \"name\": \"Apple Inc.\",\n    \"sector\": \"Technology\",\n    \"industry\": \"Consumer Electronics\",\n    \"marketCap\": 2500000000000,\n    \"peRatio\": 25.4,\n    \"forwardPE\": 24.2,\n    \"dividendYield\": 0.65,\n    \"52WeekHigh\": 182.94,\n    \"52WeekLow\": 124.17\n}\n```\n\n### 3. get_time_series_daily\nGet historical daily price data:\n```json\n{\n    \"symbol\": \"AAPL\",\n    \"timeSeriesDaily\": [\n        {\n            \"date\": \"2024-03-20T00:00:00\",\n            \"open\": 150.25,\n            \"high\": 152.30,\n            \"low\": 149.80,\n            \"close\": 151.75,\n            \"volume\": 12345678\n        }\n        // ... more data points\n    ]\n}\n```\n\n### 4. search_symbol\nSearch for stocks and other securities:\n```json\n{\n    \"results\": [\n        {\n            \"symbol\": \"AAPL\",\n            \"name\": \"Apple Inc.\",\n            \"type\": \"EQUITY\",\n            \"exchange\": \"NASDAQ\"\n        }\n        // ... more results\n    ]\n}\n```\n\n### 5. get_recommendations\nGet analyst recommendations for a stock:\n```json\n{\n    \"symbol\": \"AAPL\",\n    \"recommendations\": [\n        {\n            \"period\": \"2024-03-15T00:00:00\",\n            \"strongBuy\": 15,\n            \"buy\": 20,\n            \"hold\": 8,\n            \"sell\": 2,\n            \"strongSell\": 0\n        }\n        // ... more periods\n    ]\n}\n```\n\n### 6. get_insider_transactions\nGet insider trading information:\n```json\n{\n    \"symbol\": \"AAPL\",\n    \"transactions\": [\n        {\n            \"date\": \"2024-03-15T00:00:00\",\n            \"insider\": \"John Doe\",\n            \"position\": \"Director\",\n            \"transactionType\": \"Buy\",\n            \"shares\": 1000,\n            \"value\": 150250.00,\n            \"url\": \"https://finance.yahoo.com/...\",\n            \"text\": \"Purchase of 1000 shares\",\n            \"startDate\": \"2024-03-15\",\n            \"ownership\": \"Direct\"\n        }\n        // ... more transactions\n    ]\n}\n```\n\n## Sample Queries\n\nYou can ask Claude Desktop questions like:\n- \"What is the current stock price and daily change for AAPL?\"\n- \"Can you give me a company overview for Microsoft (MSFT)?\"\n- \"Show me the historical price data for Tesla (TSLA) over the last 3 months.\"\n- \"Search for stocks related to 'NVDA'.\"\n- \"What are the analyst recommendations for Amazon (AMZN)?\"\n- \"Have there been any recent insider transactions for Google (GOOGL)?\"\n\n## Cryptocurrency Support\n\nLimited cryptocurrency data is available using special ticker formats:\n- BTC-USD for Bitcoin\n- ETH-USD for Ethereum\n- DOGE-USD for Dogecoin\n\n## Error Handling\n\nAll tools include proper error handling and will return an error message if something goes wrong:\n```json\n{\n    \"error\": \"Failed to fetch quote for INVALID_SYMBOL\"\n}\n```\n\n## Troubleshooting\n\nIf the MCP server is not working in Claude Desktop:\n1. Make sure the server is running - you should see output when you start the script\n2. Verify the path in your settings is correct and absolute\n3. Make sure Python 3.10+ is in your system PATH\n4. Check that all dependencies are installed\n5. Try restarting Claude Desktop\n6. Check logs for any error messages\n\n## Differences from the original mcp-stocks project\n\n- Uses the MCP library directly instead of FastAPI\n- Adapted for Claude Desktop instead of Cursor\n- Modified error handling and response formats\n- Updated configuration approach\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "finance",
        "fintech",
        "trader mcp",
        "finance fintech",
        "yahoo finance"
      ],
      "category": "finance--fintech"
    },
    "ThomasMarches--substrate-mcp-rs": {
      "owner": "ThomasMarches",
      "name": "substrate-mcp-rs",
      "url": "https://github.com/ThomasMarches/substrate-mcp-rs",
      "imageUrl": "",
      "description": "An MCP server implementation to interact with Substrate-based blockchains. Built with Rust and interfacing the [subxt](https://github.com/paritytech/subxt) crate.",
      "stars": 10,
      "forks": 3,
      "license": "MIT License",
      "language": "Rust",
      "updated_at": "2025-09-27T14:45:29Z",
      "readme_content": "# Substrate MCP Server\n\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg)](LICENSE)\n[![Rust](https://img.shields.io/badge/Rust-2025-brightgreen)](https://www.rust-lang.org/)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/ThomasMarches/substrate-mcp-rs)](https://archestra.ai/mcp-catalog/thomasmarches__substrate-mcp-rs)\n\nA Model Context Protocol [(MCP)](https://modelcontextprotocol.io/introduction) server for Substrate blockchains, written in Rust. This project exposes dynamic Substrate blockchain operations (querying balances, blocks, pallets, storage, events, and more) via the MCP protocol, and is fully configurable via environment variables.\n\nDesigned to interface with the [subxt](https://github.com/paritytech/subxt) crate.\n\n## ✨ Features\n\n- Query account balances and storage dynamically\n- List pallets and their entries\n- Fetch and filter events and extrinsics\n- Submit and watch dynamic signed transactions\n- Access system and block information\n- Custom RPC calls to Substrate nodes\n\n## 🚀 Potential Use Cases\n\n1. AI-Driven Blockchain Operations\n\n    - Integrate with LLMs (like Cursor or Claude) to allow users to ask questions in natural language (e.g., \"What was the last transfer from Alice?\"), which are translated into MCP tool calls.\n    - Build a chatbot that can answer questions, fetch balances, or explain on-chain activity using your MCP server as the backend.\n    - Use the MCP server to provide live updates on-chain activity, such as balance changes or transaction statuses, to development tools like VSCode, Cursor, Claude Code, etc.\n\n2. Custom Dashboards and Monitoring\n\n    - Create custom dashboards and monitoring systems for your Substrate blockchain\n    - Display real-time data and analytics on your blockchain operations\n    - Set up alerts and notifications for critical events\n    - Use AI agents to detect suspicious activity by analyzing events and extrinsics in real time.\n\n## 🛠️ Requirements\n\n- Rust\n- Access to a Substrate node endpoint (WebSocket)\n- A valid signing keypair (as hex)\n- Runtime metadata file for your target chain (see below for naming and placement)\n\n## 📦 Installation\n\nClone the repository and build:\n\n```sh\ngit clone https://github.com/ThomasMarches/substrate-mcp-rs.git\ncd substrate-mcp-rs\ncargo build --release\n```\n\n## ⚙️ Configuration\n\nCreate a `.env` file in the project root with the following variables:\n\n```env\n# WebSocket endpoint for the Substrate node\nRPC_URL=wss://your-node-url.example.com\n\n# Signing keypair as hex (32 bytes, e.g. output of subkey inspect-key --scheme Sr25519)\nSIGNING_KEYPAIR_HEX=your_signing_keypair_hex_here\n```\n\n### Generating a Signing Keypair\n\nYou can generate a keypair and get the secret seed in hex using [subkey](https://paritytech.github.io/polkadot-sdk/master/subkey/index.html):\n\n```sh\nsubkey generate --scheme Sr25519 --output-type Json\n```\n\nUse the `secretSeed` field (strip the 0x prefix if present) for `SIGNING_KEYPAIR_HEX`.\n\n### Obtaining and Placing Runtime Metadata\n\nExport the runtime metadata from your node and place it at `artifacts/metadata.scale`:\n\n```sh\nsubxt metadata -f bytes > artifacts/metadata.scale\n```\n\n**Important:** The file must be named `metadata.scale` and located in the `artifacts/` directory before building. The build will fail if this file is missing or misnamed.\n\n## ▶️ Usage\n\nTo start the MCP server:\n\n```sh\ncargo run --release\n```\n\nThe server will start and listen for MCP requests via stdio.\n\n## 🖇️ Integrating with Cursor\n\nTo use this MCP server with [Cursor](https://www.cursor.so/), you need to add it to your Cursor MCP configuration. This allows Cursor to discover and interact with your Substrate MCP server.\n\n1. Build your server in release mode:\n\n   ```sh\n   cargo build --release\n   ```\n\n2. Locate the path to the built binary (typically `target/release/substrate-mcp-rs`).\n\n3. In your project (or global) `.cursor/mcp.json` file, add an entry for your server. For example:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"substrate-mcp-rs\": {\n         \"command\": \"$PROJECT_ROOT_ABSOLUTE_PATH/target/release/substrate-mcp-rs\",\n         \"args\": []\n       }\n     }\n   }\n   ```\n\n   - Replace the `command` path with the absolute path to your built binary if it differs.\n\n4. Restart Cursor. It should now detect and connect to your Substrate MCP server, making its tools available for use.\n\nFor more details, see the [Cursor documentation](https://docs.cursor.com/context/model-context-protocol) or the [Model Context Protocol introduction](https://modelcontextprotocol.io/introduction).\n\n## 🧰 Available Tools\n\nThe server exposes a set of tools for interacting with a Substrate blockchain, including:\n\n- `query_balance`: Fetch the balance of an account\n- `list_pallets`: List all pallets in the runtime\n- `list_pallet_entries`: List all storage entries for a pallet\n- `dynamic_runtime_call`: Execute a runtime API call\n- `send_dynamic_signed_transaction`: Construct, sign, and send a transaction\n- `query_storage`: Query storage by pallet and entry\n- `get_latest_events`: Get all events from the latest block\n- `find_events`: Find specific events by pallet and variant\n- `get_latest_block`: Get details about the latest block\n- `get_block_by_hash`: Get block details by hash\n- `find_extrinsics`: Find extrinsics in the latest block\n- `get_system_info`: Get system info via RPC\n- `custom_rpc`: Make a custom RPC call\n\nSee [`src/tooling/substrate.rs`](src/tooling/substrate.rs) for full details and parameters.\n\n## 🗂️ Project Structure\n\n- `src/main.rs`: Entry point, sets up logging and starts the MCP server\n- `src/tooling/`: Contains the Substrate tool implementation\n- `artifacts/`: Place your runtime metadata file here as `metadata.scale` (required before building)\n\n## 📈 Next Steps and Goals\n\n- [ ] Add E2E tests\n- [ ] Add Unit tests\n- [ ] Add more tools\n\n## 🤝 Contributing\n\nContributions are welcome! Please open issues or pull requests. For larger changes, open an issue first to discuss your proposal.\n\n- Follow Rust best practices and ensure code is documented\n- Run `cargo fmt` and `cargo clippy` before submitting\n- Add tests where possible\n\n## 📄 License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "substrate",
        "subxt",
        "substrate mcp",
        "mcp server",
        "paritytech subxt"
      ],
      "category": "finance--fintech"
    },
    "Trade-Agent--trade-agent-mcp": {
      "owner": "Trade-Agent",
      "name": "trade-agent-mcp",
      "url": "https://github.com/Trade-Agent/trade-agent-mcp.git",
      "imageUrl": "",
      "description": "Trade stocks and crypto on common brokerages (Robinhood, E\\*Trade, Coinbase, Kraken) via Trade Agent's MCP server.",
      "stars": 31,
      "forks": 3,
      "license": "Creative Commons Zero v1.0 Universal",
      "language": "",
      "updated_at": "2025-10-01T02:49:25Z",
      "readme_content": "# Trade It MCP Server\n(previously known as Trade Agent)\n\n<a href=\"https://glama.ai/mcp/servers/@Trade-Agent/trade-agent-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@Trade-Agent/trade-agent-mcp/badge\" />\n</a>\n\n**Endpoint:**  `https://mcp.tradeit.app/sse`  \n**Mode:** Remote-only (no local deployment required)\n\n## Overview\n\nThe Trade It MCP Server brings stock and crypto trading support to agents. It enables natural-language interaction with stock and crypto brokerages—execute trades, query portfolio performance, and surface market insights by sending plain-English requests through the MCP protocol.\n\nSupports Charles Schwab, Robinhood, E*TRADE, Webull, Coinbase, and Kraken. More to be added soon!\n\nThis server is **remote** so you don't need to run anything locally to connect. Just point your MCP-compatible agent platform to the URL above.\n\n---\n\n## Tools\n\n- 💬 **Create Trade**\n  Creates a trade order to buy or sell an asset.\n\n  ORDER TYPES:\n  - **market** (default) → Executes immediately at current market price. No price fields required.\n  - **limit** → Executes only at a specific limit_price or better. Requires `limit_price`.\n  - **stop** → Triggers a market order when stop_price is reached. Requires `stop_price`.\n  - **stop_limit** → Triggers a limit order when stop_price is reached. Requires BOTH `stop_price` and `limit_price`.\n \n  EXAMPLES:\n  - \"Buy $1000 of Tesla\"\n  - \"Buy $1000 of Tesla, but only if the price drops to $150 or lower\"\n  - \"Sell 10 shares of Apple if the price falls to $140 or lower\"\n  - \"Buy a share of Apple if it hits $200\"\n  - \"Buy 10 shares of Apple if the price rises to $140, but don't pay more than $142 per share\"\n\n  DEFAULTS:\n  - If no amount is given, your default amount is used.\n  - If no account is given, your default account is used. \n  - If no order type is given, the trade is a market order. \n  - If auto-execute is enabled in settings, the trade will execute immediately. Otherwise, it gets created in draft state and requires a call to `Execute Trade` to complete. This allows you to review and confirm trades.\n\n- 💬 **Execute Trade**\n  Execute the trade on your brokerage.\n\n- 💬 **Show Account Details**\n  List your linked brokerages along with their current value and cash balance.\n  Example: `\"Show my accounts\"`\n\n- 💬 **Search Asset**\n  Get current price and metadata for any stock or cryptocurrency.\n  Example: `\"How's Apple doing?\"` or `\"What's the price of TSLA?\"`\n\n- 📊 **COMING SOON: Portfolio Queries**  \n  Example: `\"How is my portfolio doing?\"` or `\"What’s my exposure to tech?\"`\n\n- 🔍 **COMING SOON: Copy Trading**  \n  Example: `\"Put $1000 in Nancy Pelosi's portfolio.\"`\n\n---\n\n## Getting Started\n\n1. First, create an account at https://tradeit.app.\n2. Sign up for the Pro plan's free trial.\n3. Connect your brokerage of choice.\n\n## Connecting\n1. Connect your MCP client to `https://mcp.tradeit.app/sse`.\n2. Authenticate through the browser-based OAuth flow.\n3. You're now ready to start trading!\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "brokerages",
        "finance",
        "crypto",
        "brokerages robinhood",
        "stocks crypto",
        "fintech trade"
      ],
      "category": "finance--fintech"
    },
    "Wuye-AI--mcp-server-wuye-ai": {
      "owner": "Wuye-AI",
      "name": "mcp-server-wuye-ai",
      "url": "https://github.com/wuye-ai/mcp-server-wuye-ai",
      "imageUrl": "",
      "description": "An MCP server that interact with capabilities of the CRIC Wuye AI platform, an intelligent assistant specifically for the property management industry.",
      "stars": 1,
      "forks": 2,
      "license": "No License",
      "language": "",
      "updated_at": "2025-09-15T02:13:40Z",
      "readme_content": "# CRIC物业AI MCP Server\n\n--------------\n[![NPM Version](https://img.shields.io/npm/v/%40wuye-ai%2Fmcp-server-wuye-ai)](https://www.npmjs.com/package/@wuye-ai/mcp-server-wuye-ai)\n[![zh-CN](https://img.shields.io/badge/lang-zh--CN-red.svg)](https://github.com/wuye-ai/mcp-server-wuye-ai/blob/master/README.md)\n[![en](https://img.shields.io/badge/lang-en-red.svg)](https://github.com/wuye-ai/mcp-server-wuye-ai/blob/master/README.en.md)\n[![Apply For Access Token](https://img.shields.io/badge/%E7%94%B3%E8%AF%B7%E5%BC%80%E9%80%9A-gray?label=%F0%9F%91%8B)](https://wuye-ai.cricbigdata.com/mcp)\n[![Practical Guide](https://img.shields.io/badge/%E5%AE%9E%E8%B7%B5%E6%8C%87%E5%8D%97-gray?label=%F0%9F%A7%AD)](https://wuye-ai.cricbigdata.com/mcp)\n\n已上架 | \n[<img src=\"https://static-production.npmjs.com/b0f1a8318363185cc2ea6a40ac23eeb2.png\" width=\"12\" height=\"12\" alt=\"NPM Logo\"> **NPM**](https://www.npmjs.com/package/@wuye-ai/mcp-server-wuye-ai) | \n[<img src=\"https://mcp.so/favicon.ico\" width=\"12\" height=\"12\" alt=\"MCP.so Logo\"> **MCP.so**](https://mcp.so/server/CRIC%E7%89%A9%E4%B8%9AAI/CRIC) |\n[<img src=\"https://mcpservers.org/icon.png\" width=\"12\" height=\"12\" alt=\"MCPServers.org Logo\"> **MCPServers.org**](https://mcpservers.org/servers/wuye-ai/mcp-server-wuye-ai) |\n[<img src=\"https://tcb.cloud.tencent.com/favicon.ico\" width=\"12\" height=\"12\" alt=\"腾讯云开发 Logo\"> **腾讯云开发**](https://tcb.cloud.tencent.com/mcp-server/mcp-server-wuye-ai) |\n[<img src=\"https://g.alicdn.com/sail-web/maas/2.8.5/favicon/128.ico\" width=\"12\" height=\"12\" alt=\"ModelScope Logo\"> **ModelScope**](https://modelscope.cn/mcp/servers/@wuye-ai/mcp-server-wuye-ai) |\n[<img src=\"https://gw.alicdn.com/imgextra/i4/O1CN01vVn7g32134zNZEeAR_!!6000000006928-55-tps-24-24.svg\" width=\"12\" height=\"12\" alt=\"阿里云百炼 Logo\"> **阿里云百炼**](https://bailian.console.aliyun.com/?tab=mcp#/mcp-market/detail/cric-wuye-ai) |\n[<img src=\"https://agi-dev-platform-web.cdn.bcebos.com/ai_apaas/favicon.ico\" width=\"12\" height=\"12\" alt=\"百度智能云 Logo\"> **百度智能云千帆**](https://console.bce.baidu.com/ai_apaas/mcpServerCenter/mcp_t_cric_ai/detail) |\n[<img src=\"https://gips3.baidu.com/it/u=1551671786,626435656&fm=3028&app=3028&f=PNG&fmt=auto&q=100&size=f300_315\" width=\"12\" height=\"12\" alt=\"百度搜索开放平台 Logo\"> **百度搜索开放平台**](https://sai.baidu.com/server/CRIC?id=DZy6eHdoKx2v3gfThymJXf)\n\n（更多MCP平台陆续上架中……）\n\n--------------\n\n## 简介\n\n**CRIC物业AI** 是 [克而瑞](http://www.cricchina.com/) 专为物业行业打造的智能 AI 助理，于2025年4月25日 [正式发布](https://mp.weixin.qq.com/s/GC4V1M6N199Ay2f3kZan_Q)。\n\n**CRIC物业AI** 通过行业知识库建设，结合多模态大模型 + RAG 技术，集成五大核心能力模块：**行业研究**、**法律法规**、**社区治理**、**项目经营**、**文案写作**，并在行业垂类知识基础上，拓展了 **资讯舆情** 和 **人才培训** 两大智能体。\n\n## 核心能力\n\n克而瑞通过三个能力来构建其自身在物业AI合作领域优势：\n\n- **数据资产转化能力：** 将10亿字行业语料、TB级多模态数据转化为物业行业的高质量数据集，并构建了一套行业数据质量评估体系，保障准确率和可信度；\n- **场景穿透能力：** 聚焦20+物业行业垂直业务场景，定向选用对应领域知识库，精准匹配；\n- **生态进化能力：** 通过每日实时监测超过500+可信资讯和数据来源，处理10万+实时数据的自更新系统，在政策预警、商机挖掘和招投标分析等环节实现准确率突破90%，形成行业AI知识中枢的持续升级。\n\n## MCP Server 功能\n\n**CRIC物业AI MCP Server** 是一个基于 [Model Context Protocol](https://modelcontextprotocol.io/) 的服务端实现，基于 **CRIC物业AI** 平台的部分原子能力，目前版本提供了以下三大功能模块：\n\n- **资讯日报：** 获取物业行业资讯日报。\n- **知识库：** 搜索物业行业专属知识库。\n\n具体工具（Tool）定义，请参考 [工具定义配置](./TOOLS.md) 文档。更多能力即将推出，敬请期待。\n\n## CRIC物业AI 知识库\n\n使用 CRIC 物业 AI MCP Server，可以查询克而瑞建设的物业行业垂类高质量知识库，获取用户问题相关的知识文本供 AI 参考。\n\n目前可供开通的知识库包括：**法律法规、物业企业信息、克而瑞榜单、优秀物业项目服务案例、物业行业研究、物业项目应急响应、物业项目综合管理、物业项目客诉处理、物业行业法律判例、非住宅类物业研究、物业项目管理案例** 等。\n\n## 获取 Access Token\n\n您需要先获取 **CRIC物业AI Access Token** 才能使用 CRIC物业AI MCP Server 的功能。请访问我们的网站申请：[申请开通体验 CRIC物业AI MCP Server](https://wuye-ai.cricbigdata.com/mcp)。\n\n## 快速开始\n\n### 1. SSE 方式（http）\n\n#### 1.1 运行\n\n您可以自行运行一个 MCP Server 并启用 HTTP 模式，或者直接使用我们提供的 URL。\n\n##### A. 自行运行：\n\n```bash\nMODE=http PORT=3011 npx -y @wuye-ai/mcp-server-wuye-ai\n```\n\n运行成功后，MCP Server URL 为 `http://localhost:3011/sse/mcp` 。\n\n##### B. 使用官方：\n\n或者您也可以直接使用我们的官方的 MCP Server URL：\n\n- 测试环境：`https://mcp.wuye-ai-staging.cricbigdata.com/sse/mcp`\n- 生产环境：`https://mcp.wuye-ai.cricbigdata.com/sse/mcp`\n\n#### 1.2 测试\n\n您可以使用 MCP Inspector 或第三方工具连接 SSE 方式的 MCP Server。\n\n##### MCP Inspector：\n\n服务运行成功后，您可以运行 [MCP Inspector](https://github.com/modelcontextprotocol/inspector) 来查看并测试服务是否正常运行。\n\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\nMCP Inspector 启动后，用浏览器打开其 Web UI（默认为：http://127.0.0.1:6274/ ）。并按照如下步骤配置连接：\n\n1. 在界面左侧设置 Transport Type 为 `SSE`，URL 为上一步获得的 MCP Server URL。\n2. 展开 Authentication 面板，设置 Header Name 为 `Authorization` ，Bearer Token 为您的 **CRIC物业AI Access Token**。\n3. 点击 Connect 按钮，连接成功后，左侧会显示当前连接的状态。\n\n此时您就可以操作 MCP Inspector 测试 CRIC物业AI 的 MCP Server 了。具体使用方法您可以参考 [MCP Inspector 中文文档](https://mcp-docs.cn/docs/tools/inspector) 。\n\n##### 第三方工具：\n\n通过第三方工具使用 SSE 方式接入时，您需要通过 `Authorization` **HTTP 头** 指定 Access Token。例如，[Cline](https://cline.bot/) 设置文件：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp\",\n      \"headers\": {\n        \"Authorization\": \"Bearer {{您的 CRIC物业AI Access Token}}\"\n      }\n    }\n  }\n}\n```\n\n请注意，当前部分使用 [@modelcontextprotocol/typescript-sdk](https://github.com/modelcontextprotocol/typescript-sdk) 的工具 [其 ***HTTP 头*** 设置可能无法正确生效](https://github.com/modelcontextprotocol/typescript-sdk/issues/317)，因此建议使用 MCP Inspector 来测试。或者，作为一种临时措施，我们也支持在 URL 中使用 Query 方式指定 Access Token，例如：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp?token={{您的 CRIC物业AI Access Token}}\"\n    }\n  }\n}\n```\n\n### 2. Stdio 方式\n\n#### 2.1 运行\n\n我们也支持 stdio 方式运行 MCP Server。命令如下：\n\n```bash\nCRIC_WUYE_AI_ACCESS_TOKEN={{您的 CRIC物业AI Access Token}} npx -y @wuye-ai/mcp-server-wuye-ai\n```\n\n#### 2.2 测试\n\n您可以使用第三方工具或者 MCP Inspector 来连接 Stdio 方式的 MCP Server。请注意，Stdio 方式下一般无需用户手动运行 MCP Server，通常是由第三方工具自动运行。\n\n##### MCP Inspector\n\n在 MCP Inspector 中，您也可以选择 Stdio 方式接入。具体步骤如下：\n\n1. 在界面左侧设置 Transport Type 为 `Stdio`，Command 为 `npx`，Arguments 为 `-y @wuye-ai/mcp-server-wuye-ai`。\n2. 展开 Environment Variables 面板，添加或设置 `CRIC_WUYE_AI_ACCESS_TOKEN` 为您的 **CRIC物业AI Access Token**。\n3. 点击 Connect 按钮，MCP Inspector 会自动运行命令启动 MCP Server 并连接。连接成功后，左侧会显示当前连接的状态。\n\n此时您就可以操作 MCP Inspector 测试 CRIC物业AI 的 MCP Server 了。\n\n##### 第三方工具\n\n通过第三方工具使用 Stdio 方式接入时，如果您需要指定 Access Token，请通过环境变量 `CRIC_WUYE_AI_ACCESS_TOKEN` 指定。例如，Cline 设置文件：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"stdio\",\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wuye-ai/mcp-server-wuye-ai\"\n      ],\n      \"env\": {\n        \"CRIC_WUYE_AI_ACCESS_TOKEN\": \"{{您的 CRIC物业AI Access Token}}\"\n      }\n    }\n  }\n}\n```\n\n## 实践指南\n\nCRIC物业AI MCP Server 支持各类智能体平台接入，如钉钉AI助理等。您可以参考 [实践指南](https://alidocs.dingtalk.com/i/p/nb9XJDP07QqPDGyA/docs/mweZ92PV6My4ebxdHdb9oQBYWxEKBD6p) 进行操作体验。\n\n## 可选配置\n\n您可以通过环境变量或 URL Query（SSE方式下） 来配置 CRIC物业AI MCP Server 的运行方式。以下是可用的配置项：\n\n| 环境变量参数名                          | URL Query 参数名 | 默认值                                      | 描述                                                                                                                                                                            |\n|----------------------------------|---------------|------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `MODE`                           | *不支持*         | `stdio`                                  | 运行模式，支持 `stdio` 和 `http` 两种模式。                                                                                                                                                |\n| `HOSTNAME`                       | *不支持*         | `0.0.0.0`                                | HTTP 绑定主机名，仅在 `http` 模式下有效。`0.0.0.0`即为绑定到本机所有IP地址。                                                                                                                            |\n| `PORT`                           | *不支持*         | `3011`                                   | HTTP 绑定端口，仅在 `http` 模式下有效。                                                                                                                                                    |\n| `CRIC_WUYE_AI_ACCESS_TOKEN`      | `token`       | *无*                                      | CRIC物业AI Access Token。如果不提供，则使用实际请求 HTTP Authorization Header 中的值。                                                                                                            |\n| `CRIC_WUYE_AI_PROVIDER_API_BASE` | *不支持*         | `https://export.wuye-ai.cricbigdata.com` | CRIC物业AI 后端接入 API，请注意 ***此 URL 不是 CRIC物业AI MCP Server 的 URL*** 。可选值为 `https://export.wuye-ai-staging.cricbigdata.com` （测试环境）、 `https://export.wuye-ai.cricbigdata.com` （生产环境） |\n| `CRIC_WUYE_AI_NAME_EN`           | `name_en`     | 由 CRIC物业AI 工作人员为您默认配置                    | 是否使用工具英文名称，支持 `true` 和 `false` 两个取值。启用时，Tool 名称将改为使用英文版本，以提高对部分海外模型的兼容性。对于支持中文工具名称的模型，建议不启用，以获得更好的效果。如果配置该选项，将覆盖默认配置。                                                         |\n| `CRIC_WUYE_AI_FEATURE_SET`       | `feature_set` | 由 CRIC物业AI 工作人员为您默认配置                    | 预配置的工具功能集，支持 `base`、`detail` 等取值。该参数决定了您可用的 Tool 集合，`base` 功能集中提供了“获取可用知识库列表”和通用的“搜索知识库”工具，而 `detail` 功能集中不提供“获取可用知识库列表”工具，但为每个可用的知识库提供了单独的“搜索知识库”工具。如果配置该选项，将覆盖默认配置。         |\n| `CRIC_WUYE_AI_OUTPUT_FORMAT`     | `output`      | `raw`                                    | 工具调用输出格式，支持 `raw`（不转化）、`text`（转化为 Markdown 文本）等取值。                                                                                                                            |\n\n*注：* URL Query 配置时，只需要在 SSE 调用的 URL 后面拼接参数即可，例如：\n\n```json\n{\n  \"mcpServers\": {\n    \"CRIC物业AI\": {\n      \"transportType\": \"sse\",\n      \"url\": \"https://mcp.wuye-ai.cricbigdata.com/sse/mcp?token={{您的 CRIC物业AI Access Token}}&name_en=true\"\n    }\n  }\n}\n```\n\n关于 `CRIC_WUYE_AI_NAME_EN` 和 `CRIC_WUYE_AI_FEATURE_SET` 的更多信息，请参考 [工具定义配置](./TOOLS.md) 文档。\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "ai",
        "finance",
        "fintech wuye",
        "ai mcp",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "XeroAPI--xero-mcp-server": {
      "owner": "XeroAPI",
      "name": "xero-mcp-server",
      "url": "https://github.com/XeroAPI/xero-mcp-server",
      "imageUrl": "",
      "description": "[zlinzzzz/finData-mcp-server](https://github.com/zlinzzzz/finData-mcp-server) 🐍 ☁️ - An MCP server for accessing professional financial data, supporting multiple data providers such as Tushare.",
      "stars": 128,
      "forks": 66,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T23:38:45Z",
      "readme_content": "# Xero MCP Server\n\nThis is a Model Context Protocol (MCP) server implementation for Xero. It provides a bridge between the MCP protocol and Xero's API, allowing for standardized access to Xero's accounting and business features.\n\n## Features\n\n- Xero OAuth2 authentication with custom connections\n- Contact management\n- Chart of Accounts management\n- Invoice creation and management\n- MCP protocol compliance\n\n## Prerequisites\n\n- Node.js (v18 or higher)\n- npm or pnpm\n- A Xero developer account with API credentials\n\n## Docs and Links\n\n- [Xero Public API Documentation](https://developer.xero.com/documentation/api/)\n- [Xero API Explorer](https://api-explorer.xero.com/)\n- [Xero OpenAPI Specs](https://github.com/XeroAPI/Xero-OpenAPI)\n- [Xero-Node Public API SDK Docs](https://xeroapi.github.io/xero-node/accounting)\n- [Developer Documentation](https://developer.xero.com/)\n\n## Setup\n\n### Create a Xero Account\n\nIf you don't already have a Xero account and organisation already, can create one by signing up [here](https://www.xero.com/au/signup/) using the free trial.\n\nWe recommend using a Demo Company to start with because it comes with some pre-loaded sample data. Once you are logged in, switch to it by using the top left-hand dropdown and selecting \"Demo Company\". You can reset the data on a Demo Company, or change the country, at any time by using the top left-hand dropdown and navigating to [My Xero](https://my.xero.com).\n\nNOTE: To use Payroll-specific queries, the region should be either NZ or UK.\n\n### Authentication\n\nThere are 2 modes of authentication supported in the Xero MCP server:\n\n#### 1. Custom Connections\n\nThis is a better choice for testing and development which allows you to specify client id and secrets for a specific organisation.\nIt is also the recommended approach if you are integrating this into 3rd party MCP clients such as Claude Desktop.\n\n##### Configuring your Xero Developer account\n\nSet up a Custom Connection following these instructions: https://developer.xero.com/documentation/guides/oauth2/custom-connections/\n\nCurrently the following scopes are required for all sessions: [scopes](src/clients/xero-client.ts#L91-L92)\n\n##### Integrating the MCP server with Claude Desktop\n\nTo add the MCP server to Claude go to Settings > Developer > Edit config and add the following to your claude_desktop_config.json file:\n\n```json\n{\n  \"mcpServers\": {\n    \"xero\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@xeroapi/xero-mcp-server@latest\"],\n      \"env\": {\n        \"XERO_CLIENT_ID\": \"your_client_id_here\",\n        \"XERO_CLIENT_SECRET\": \"your_client_secret_here\"\n      }\n    }\n  }\n}\n```\n\nNOTE: If you are using [Node Version Manager](https://github.com/nvm-sh/nvm) `\"command\": \"npx\"` section change it to be the full path to the executable, ie: `your_home_directory/.nvm/versions/node/v22.14.0/bin/npx` on Mac / Linux or `\"your_home_directory\\\\.nvm\\\\versions\\\\node\\\\v22.14.0\\\\bin\\\\npx\"` on Windows\n\n#### 2. Bearer Token\n\nThis is a better choice if you are to support multiple Xero accounts at runtime and allow the MCP client to execute an auth flow (such as PKCE) as required.\nIn this case, use the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"xero\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@xeroapi/xero-mcp-server@latest\"],\n      \"env\": {\n        \"XERO_CLIENT_BEARER_TOKEN\": \"your_bearer_token\"\n      }\n    }\n  }\n}\n```\n\nNOTE: The `XERO_CLIENT_BEARER_TOKEN` will take precedence over the `XERO_CLIENT_ID` if defined.\n\n### Available MCP Commands\n\n- `list-accounts`: Retrieve a list of accounts\n- `list-contacts`: Retrieve a list of contacts from Xero\n- `list-credit-notes`: Retrieve a list of credit notes\n- `list-invoices`: Retrieve a list of invoices\n- `list-items`: Retrieve a list of items\n- `list-organisation-details`: Retrieve details about an organisation\n- `list-profit-and-loss`: Retrieve a profit and loss report\n- `list-quotes`: Retrieve a list of quotes\n- `list-tax-rates`: Retrieve a list of tax rates\n- `list-payments`: Retrieve a list of payments\n- `list-trial-balance`: Retrieve a trial balance report\n- `list-profit-and-loss`: Retrieve a profit and loss report\n- `list-bank-transactions`: Retrieve a list of bank account transactions\n- `list-payroll-employees`: Retrieve a list of Payroll Employees\n- `list-report-balance-sheet`: Retrieve a balance sheet report\n- `list-payroll-employee-leave`: Retrieve a Payroll Employee's leave records\n- `list-payroll-employee-leave-balances`: Retrieve a Payroll Employee's leave balances\n- `list-payroll-employee-leave-types`: Retrieve a list of Payroll leave types\n- `list-payroll-leave-periods`: Retrieve a list of a Payroll Employee's leave periods\n- `list-payroll-leave-types`: Retrieve a list of all avaliable leave types in Xero Payroll\n- `list-aged-receivables-by-contact`: Retrieves aged receivables for a contact\n- `list-aged-payables-by-contact`: Retrieves aged payables for a contact\n- `list-contact-groups`: Retrieve a list of contact groups\n- `create-contact`: Create a new contact\n- `create-credit-note`: Create a new credit note\n- `create-invoice`: Create a new invoice\n- `create-payment`: Create a new payment\n- `create-quote`: Create a new quote\n- `create-credit-note`: Create a new credit note\n- `create-payroll-timesheet`: Create a new Payroll Timesheet\n- `update-contact`: Update an existing contact\n- `update-invoice`: Update an existing draft invoice\n- `update-quote`: Update an existing draft quote\n- `update-credit-note`: Update an existing draft credit note\n- `update-payroll-timesheet-line`: Update a line on an existing Payroll Timesheet\n- `approve-payroll-timesheet`: Approve a Payroll Timesheet\n- `revert-payroll-timesheet`: Revert an approved Payroll Timesheet\n- `add-payroll-timesheet-line`: Add new line on an existing Payroll Timesheet\n- `delete-payroll-timesheet`: Delete an existing Payroll Timesheet\n- `get-payroll-timesheet`: Retrieve an existing Payroll Timesheet\n\nFor detailed API documentation, please refer to the [MCP Protocol Specification](https://modelcontextprotocol.io/).\n\n## For Developers\n\n### Installation\n\n```bash\n# Using npm\nnpm install\n\n# Using pnpm\npnpm install\n```\n\n### Run a build\n\n```bash\n# Using npm\nnpm run build\n\n# Using pnpm\npnpm build\n```\n\n### Integrating with Claude Desktop\n\nTo link your Xero MCP server in development to Claude Desktop go to Settings > Developer > Edit config and add the following to your `claude_desktop_config.json` file:\n\nNOTE: For Windows ensure the `args` path escapes the `\\` between folders ie. `\"C:\\\\projects\\xero-mcp-server\\\\dist\\\\index.js\"`\n\n```json\n{\n  \"mcpServers\": {\n    \"xero\": {\n      \"command\": \"node\",\n      \"args\": [\"insert-your-file-path-here/xero-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"XERO_CLIENT_ID\": \"your_client_id_here\",\n        \"XERO_CLIENT_SECRET\": \"your_client_secret_here\"\n      }\n    }\n  }\n}\n```\n\n## License\n\nMIT\n\n## Security\n\nPlease do not commit your `.env` file or any sensitive credentials to version control (it is included in `.gitignore` as a safe default.)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "mcp",
        "xero",
        "mcp server",
        "server mcp",
        "fintech xeroapi"
      ],
      "category": "finance--fintech"
    },
    "aaronjmars--web3-research-mcp": {
      "owner": "aaronjmars",
      "name": "web3-research-mcp",
      "url": "https://github.com/aaronjmars/web3-research-mcp",
      "imageUrl": "",
      "description": "Deep Research for crypto - free & fully local",
      "stars": 135,
      "forks": 57,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-01T17:03:26Z",
      "readme_content": "# Web3 Research MCP\n[![smithery badge](https://smithery.ai/badge/@aaronjmars/web3-research-mcp)](https://smithery.ai/server/@aaronjmars/web3-research-mcp)\n\nDeep Research for crypto - free & fully local 🧠\n\n<a href=\"https://glama.ai/mcp/servers/@aaronjmars/web3-research-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@aaronjmars/web3-research-mcp/badge\" alt=\"Web3 Research MCP server\" />\n</a>\n\n## 🚀 Preview\n\n![Preview](https://i.imgur.com/b9WfMSk.png)\n![Preview2](https://i.imgur.com/qjqvwmr.png)\n\n## 🧠 Features\n\n- **Comprehensive Research**: Gather detailed information about any cryptocurrency token\n- **Multi-Source Analysis**: Research across multiple sources including CoinGecko, CoinMarketCap, DeFiLlama, and more\n- **Structured Reporting**: Generate detailed reports covering technical fundamentals, market data, social sentiment, and more\n- **Resource Management**: Automatically stores search results and content for reference\n- **Status Tracking**: Track research progress through different stages and sections\n\n## 📋 Requirements\n\n- Node.js (v16 or higher)\n\n## 🔧 Installation & Setup\n\n### Installing via Smithery\n\nTo install web3-research-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/web3-research-mcp):\n\n```bash\nnpx -y @smithery/cli install web3-research-mcp --client claude\n```\n\n## 🔌 Using with Claude Desktop\n\nEdit your Claude Desktop config file\n\n- Windows: %APPDATA%\\Claude\\claude_desktop_config.json\n- macOS: ~/Library/Application Support/Claude/claude_desktop_config.json\n\nAdd this to your Claude Desktop configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"web3-research-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"web3-research-mcp@latest\"]\n    }\n  }\n}\n```\n\nThen restart Claude Desktop\n\n## 🔌 Using with Cursor\n\nGo to: Settings -> Cursor Settings -> MCP -> Add new global MCP server\nPaste this into your Cursor ~/.cursor/mcp.json file. See Cursor MCP docs for more info.\n\n```json\n{\n  \"mcpServers\": {\n    \"web3-research-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"web3-research-mcp@latest\"]\n    }\n  }\n}\n```\n\nThen restart Cursor\n\n## 🛠️ Tools\n\n### create-research-plan\n\nCreates a structured research plan for a token.\n\nParameters:\n- tokenName: Full name of the token\n- tokenTicker: Ticker symbol of the token\n\n### search\n\nPerforms a web search and returns the results.\n\nParameters:\n- query: Search query\n- searchType: Type of search (web, news, images, videos)\n\n### research-with-keywords\n\nSearches for a token with specific keywords and saves the results.\n\nParameters:\n- tokenName: Name of the token\n- tokenTicker: Ticker symbol\n- keywords: Array of keywords to search for\n\n### update-status\n\nUpdates the status of a research section.\n\nParameters:\n- section: Section name to update (e.g., 'projectInfo', 'technicalFundamentals')\n- status: New status for the section (planned, in_progress, completed)\n\n### fetch-content\n\nFetches content from a URL and saves it as a resource.\n\nParameters:\n- url: URL to fetch content from\n- format: Output format (text, html, markdown, json)\n\n### list-resources\n\nLists all available resources that have been saved.\n\n### search-source\n\nSearches for information about a token from a specific source.\n\nParameters:\n- tokenName: Name of the token\n- tokenTicker: Ticker symbol\n- source: Source to search (e.g., 'CoinGecko', 'DeFiLlama', 'News')\n\n## 📝 Prompts\n\n### token-research\n\nInitiates comprehensive research on a cryptocurrency token.\n\nParameters:\n- tokenName: Full name of the cryptocurrency token\n- tokenTicker: Ticker symbol of the token (e.g., BTC, ETH)\n\n## 🧠 How It Works\n\n1. When research begins, a structured plan is created covering all aspects of the token\n2. The server performs searches across multiple sources for information\n3. Search results are stored as resources that can be referenced\n4. The research progresses through different sections, with status tracking\n5. A comprehensive report is generated covering all aspects of the token\n\n## ⚠️ Limitations\n\n- Some websites block web scraping, so direct content fetching may fail with 403 errors\n- Relies on search results which may not always be comprehensive\n- Rate limits may apply to search operations\n\n## 📄 License\n\nThis project is licensed under the Apache License 2.0 - see the LICENSE file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "finance",
        "crypto",
        "finance fintech",
        "research crypto",
        "fintech aaronjmars"
      ],
      "category": "finance--fintech"
    },
    "ahnlabio--bicscan-mcp": {
      "owner": "ahnlabio",
      "name": "bicscan-mcp",
      "url": "https://github.com/ahnlabio/bicscan-mcp",
      "imageUrl": "",
      "description": "Risk score / asset holdings of EVM blockchain address (EOA, CA, ENS) and even domain names.",
      "stars": 12,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T02:59:36Z",
      "readme_content": "# BICScan MCP Server\n\nA powerful and efficient Blockchain address risk scoring API MCP Server, leveraging the BICScan API to provide comprehensive risk assessments and asset information for blockchain addresses, domains, and decentralized applications (dApps).\n\n🎉 We're listed on https://github.com/modelcontextprotocol/servers for official integration 🎉\n\n\nhttps://github.com/user-attachments/assets/f9425429-1cb1-4508-b962-81351075258b\n\n## Key Features\n- **Risk Scoring**: Obtain risk scores for various blockchain entities, including crypto addresses, domain names, and decentralized application URLs, with scores ranging from 0 to 100, where 100 indicates high risk.\n- **Asset Information**: Retrieve detailed asset holdings for specified crypto addresses, including cryptocurrencies and tokens, with support for multiple blockchain networks.\n- **Real-time Scanning**: Utilize the BICScan API to perform real-time scans and receive up-to-date information on potential risks and asset holdings.\n- **Secure and Reliable**: Built with robust error handling and logging to ensure secure and reliable operations.\n\n## Example Output\n\n## How to use.\n\nYou con either use Python with `uv` or `docker` depending on your preference.\n\nDepending on your environment, you can choose to use either `uv`, `docker`, or `uvx`.\n\n### 1. Running with `uv`\n\n#### 1-1. Requirements\n1. Python 3.10 or higher\n2. uv 0.6.x\n3. git\n\n#### 1.2. Clone the repository\n```sh\ngit clone https://github.com/ahnlabio/bicscan-mcp\n```\n\n#### 1.3. Config `claude_desktop_config.json`\n\nAppend following to `claude_desktop_config.json`.\n\nMake sure to replace:\n - `YOUR_BICSCAN_REPO_DIR_HERE`: to something like `C:\\\\Users\\\\ABC\\\\repo\\\\bicscan-mcp` or `/home/abc/repo/bicscan-mcp` similarly.\n - `YOUR_BICSCAN_API_KEY_HERE`: to free API key can be obtained from https://bicscan.io (details below)\n\n```json\n{\n  \"mcpServers\": {\n    ... some other mcp servers ...,\n    \"bicscan\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"YOUR_BICSCAN_REPO_DIR_HERE\",\n        \"run\",\n        \"bicscan-mcp\"\n      ],\n      \"env\": {\n        \"BICSCAN_API_KEY\": \"YOUR_BICSCAN_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n### 2. Running with `Docker`\n\n#### 2.1. Requirements\n1. Docker environment\n\n#### 2.2. Clone the repository\n```sh\ngit clone https://github.com/ahnlabio/bicscan-mcp\n```\n\n#### 2.3. Build Docker image.\n\nJust run `make` in the repository directory to build docker image.\n\n#### 2.4. Config\nAppend following to `claude_desktop_config.json`\n\nMake sure to replace:\n - `YOUR_BICSCAN_API_KEY_HERE` to API key obtained from https://bicscan.io (details below)\n\n```json\n{\n  \"mcpServers\": {\n    ... some other mcp servers ...,\n    \"bicscan\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"--interactive\",\n        \"--env\", \"BICSCAN_API_KEY=YOUR_BICSCAN_API_KEY_HERE\",\n        \"bicscan-mcp\"\n      ]\n    }\n  }\n}\n```\n\n### 3. Running with `uvx`\n\n#### 3.1. Requirements\n1. Python 3.10 or higher\n2. uv 0.6.x\n3. git\n\n#### 3.2. Config `claude_desktop_config.json`\n\nAppend following to `claude_desktop_config.json`.\n\nMake sure to replace:\n - `YOUR_BICSCAN_API_KEY_HERE`: to free API key can be obtained from https://bicscan.io (details below)\n\n```json\n{\n  \"mcpServers\": {\n    ... some other mcp servers ...,\n    \"bicscan\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/ahnlabio/bicscan-mcp\",\n        \"bicscan-mcp\"\n      ],\n      \"env\": {\n        \"BICSCAN_API_KEY\": \"YOUR_BICSCAN_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\n## How to obtain Free BICScan API Key?\n\n1. Visit `https://bicscan.io` and register.\n2. Go to profile and create \"Create App\"\n3. Enter name and description on your choice.\n4. Replace `YOUR_BICSCAN_API_KEY_HERE` part from above config to your newly obtained key.\n5. restart the Claude Desktop.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "finance",
        "fintech",
        "blockchain",
        "holdings evm",
        "finance fintech",
        "fintech ahnlabio"
      ],
      "category": "finance--fintech"
    },
    "alchemy--alchemy-mcp-server": {
      "owner": "alchemy",
      "name": "alchemy-mcp-server",
      "url": "https://github.com/alchemyplatform/alchemy-mcp-server",
      "imageUrl": "",
      "description": "Allow AI agents to interact with Alchemy's blockchain APIs.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "alchemy",
        "fintech",
        "blockchain",
        "alchemy blockchain",
        "fintech alchemy",
        "interact alchemy"
      ],
      "category": "finance--fintech"
    },
    "anjor--coinmarket-mcp-server": {
      "owner": "anjor",
      "name": "coinmarket-mcp-server",
      "url": "https://github.com/anjor/coinmarket-mcp-server",
      "imageUrl": "",
      "description": "Coinmarket API integration to fetch cryptocurrency listings and quotes",
      "stars": 41,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-12T10:16:47Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/anjor-coinmarket-mcp-server-badge.png)](https://mseep.ai/app/anjor-coinmarket-mcp-server)\n\n# Coinmarket MCP server\n\nCoinmarket MCP Server\n\n<a href=\"https://glama.ai/mcp/servers/6ag7ms62ns\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/6ag7ms62ns/badge\" alt=\"Coinmarket MCP server\" /></a>\n\n## Components\n\n### Resources\n\nThe server implements a few of the [Coinmarket API](https://coinmarketcap.com/api/documentation/v1/#section/Introduction) endpoints\n- Custom coinmarket:// URI scheme for accessing individual notes\n- Each note resource has a name, description and text/plain mimetype\n\n### Tools\n\nThe server implements two tools:\n- `get-currency-listings`: Get the latest currency listings\n- `get-quotes`: Get quotes for tokens\n  - Takes \"slug\" (example: bitcoin) or \"symbol\" (example: BTC) as optional string argument\n\n## Configuration\n\nRequires coinmarket API key.\n\n## Quickstart\n\n### Prerequisites\n\n- Python 3.12 or higher\n- [uv](https://docs.astral.sh/uv/getting-started/installation/) package manager\n\n### Install\n\nInstall uv if you haven't already:\n```bash\n# macOS and Linux\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n\n# Windows\npowershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  ```\n  \"mcpServers\": {\n    \"coinmarket_service\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/coinmarket_service\",\n        \"run\",\n        \"coinmarket_service\"\n      ],\n      \"env\": {\n        \"COINMARKET_API_KEY\": \"<insert api key>\"\n      }\n    }\n  }\n  ```\n</details>\n\n#### Docker\n\nYou can also run the server using Docker:\n\n```bash\n# Build the image\ndocker build -t coinmarket-service .\n\n# Run the container\ndocker run -e COINMARKET_API_KEY=your_api_key_here coinmarket-service\n```\n\nFor Claude Desktop configuration with Docker:\n```json\n\"mcpServers\": {\n  \"coinmarket_service\": {\n    \"command\": \"docker\",\n    \"args\": [\n      \"run\",\n      \"--rm\",\n      \"-e\",\n      \"COINMARKET_API_KEY=<insert api key>\",\n      \"coinmarket-service\"\n    ]\n  }\n}\n```\n\n## Troubleshooting\n\n### \"spawn uv ENOENT\" Error\n\nIf you see this error, it means `uv` is not installed or not in your PATH:\n\n1. **Install uv** following the instructions above\n2. **Restart your terminal/Claude Desktop** after installation\n3. **Verify installation**: Run `uv --version` in terminal\n4. **Update PATH**: Make sure uv is in your system PATH\n\n### Configuration Issues\n\n- Replace `/path/to/coinmarket_service` with the actual path to your cloned repository\n- Ensure your `COINMARKET_API_KEY` is valid\n- The path should point to the root directory containing `pyproject.toml`\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "coinmarket",
        "cryptocurrency",
        "finance",
        "coinmarket api",
        "cryptocurrency listings",
        "fetch cryptocurrency"
      ],
      "category": "finance--fintech"
    },
    "araa47--jupiter-mcp": {
      "owner": "araa47",
      "name": "jupiter-mcp",
      "url": "https://github.com/araa47/jupiter-mcp",
      "imageUrl": "",
      "description": "Jupiter API Access (allow AI to Trade Tokens on Solana + Access Balances + Search Tokens + Create Limit Orders )",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-13T09:29:39Z",
      "readme_content": "# Jupiter MCP\n\nA Model Context Protocol server for Jupiter API, Solana's premier DEX aggregator. Supports immediate swaps through Ultra API and limit orders through Trigger API.\n\n## 📦 Pre-built Desktop Extension (DXT)\n\n### Prerequisites\nBefore installing the extension, ensure you have:\n\n1. **Node.js and npx** (for envmcp support)\n   - Download from: https://nodejs.org/\n   - Verify with: `npx --version`\n\n2. **uv/uvx** (Python package manager)\n   - Install from: https://docs.astral.sh/uv/getting-started/installation/\n   - macOS/Linux: `curl -LsSf https://astral.sh/uv/install.sh | sh`\n   - Windows: `powershell -c \"irm https://astral.sh/uv/install.ps1 | iex\"`\n   - Verify with: `uvx --version`\n\n\nOnce you have prereqs for easy installation in Claude Desktop:\n\n**[Download jupiter-mcp-latest.dxt](https://github.com/araa47/jupiter-mcp/raw/main/jupiter-mcp-latest.dxt)** 📥\n\nThe DXT includes:\n- ✅ One-click installation in Claude Desktop\n- ✅ Automatic dependency management with uvx\n- ✅ Secure environment variable configuration\n- ✅ Built-in error handling and debugging\n\n> **Note**: The DXT file is automatically updated on every commit for the latest features and fixes.\n\n## 🚀 Quick Installation Options\n\n### Option 1: Claude Desktop DXT (Recommended) 🖱️\nDownload the DXT file and double-click to install. See `dxt/README.md` for detailed instructions.\n\n### Option 2: Quick Install with Cursor 🎯\n\n**Instructions:**\n1. Copy the link below (click the copy button in the code block)\n2. Paste it into your browser address bar or Cursor's command palette\n3. Follow the prompts to complete installation\n4. You'll be prompted to replace `REPLACE_THIS` with your actual solana private key!\n\n\n**🚀 Install with Direct Input:**\n```\ncursor://anysphere.cursor-deeplink/mcp/install?name=jupiter-mcp&config=eyJjb21tYW5kIjoidXZ4IiwiYXJncyI6WyItLWZyb20iLCJnaXQraHR0cHM6Ly9naXRodWIuY29tL2FyYWE0Ny9qdXBpdGVyLW1jcCIsImp1cGl0ZXItbWNwIl0sImVudiI6eyJQUklWQVRFX0tFWSI6IlJFUExBQ0VfVEhJUyIsIlNPTEFOQV9SUENfVVJMIjoiaHR0cHM6Ly9hcGkubWFpbm5ldC1iZXRhLnNvbGFuYS5jb20iLCJTT0xBTkFfTkVUV09SSyI6Im1haW5uZXQtYmV0YSIsIlJFUVVFU1RfVElNRU9VVCI6IjMwIn19\n```\n**Note:** These links only work in Cursor\n\n**Manual config for .env file approach:**\n\n```json\n{\n  \"mcpServers\": {\n    \"jupiter-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"envmcp\",\n        \"--env-file\",\n        \"/path/to/your/.env\",\n        \"uvx\",\n        \"--from\",\n        \"git+https://github.com/araa47/jupiter-mcp\",\n        \"jupiter-mcp\"\n      ]\n    }\n  }\n}\n```\n\nReplace `/path/to/your/.env` with your actual env file path (e.g., `/Users/yourname/.env`)\n\n**Pre-configured values:**\n\n* `SOLANA_RPC_URL`: <https://api.mainnet-beta.solana.com>\n* `SOLANA_NETWORK`: mainnet-beta\n* `REQUEST_TIMEOUT`: 30 seconds\n* `PRIVATE_KEY`: You'll need to replace `REPLACE_THIS` with your base58 encoded private key\n\n## ⚡ Quick Start (MCP Configuration)\n\nAdd this to your MCP client configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"jupiter-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/araa47/jupiter-mcp\",\n        \"jupiter-mcp\"\n      ],\n      \"env\": {\n        \"SOLANA_RPC_URL\": \"https://api.mainnet-beta.solana.com\",\n        \"PRIVATE_KEY\": \"${PRIVATE_KEY}\",\n        \"SOLANA_NETWORK\": \"mainnet-beta\",\n        \"REQUEST_TIMEOUT\": \"30\"\n      }\n    }\n  }\n}\n```\n\n### Alternative Configuration (Using .env file)\n\nIf you prefer to load environment variables from a `.env` file to avoid storing sensitive data in your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"jupiter-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"envmcp\",\n        \"--env-file\",\n        \"${ENV_FILE_PATH}\",\n        \"uvx\",\n        \"--from\",\n        \"git+https://github.com/araa47/jupiter-mcp\",\n        \"jupiter-mcp\"\n      ],\n      \"env\": {\n        \"ENV_FILE_PATH\": \".env\"\n      }\n    }\n  }\n}\n```\n\nThis approach uses `envmcp` to securely load your PRIVATE_KEY from a `.env` file without exposing it in configuration files. Replace `ENV_FILE_PATH` with the absolute path to your `.env` file (e.g., `/Users/yourname/.env` or `/home/user/.env`).\n\n### Environment Variables Required:\n\n* `PRIVATE_KEY`: Your base58 encoded Solana private key (from Phantom wallet export)\n* Optional: Override `SOLANA_RPC_URL` if you have a custom RPC endpoint\n\n## 🎉 Available Tools\n\n### 💱 Ultra API (Immediate Swaps)\n\n| Tool                       | Description                               | Parameters                        | Cost     |\n| -------------------------- | ----------------------------------------- | --------------------------------- | -------- |\n| get\\_swap\\_quote           | Get a swap quote and unsigned transaction | input\\_mint, output\\_mint, amount | **FREE** |\n| execute\\_swap\\_transaction | Execute a signed swap transaction         | transaction, request\\_id          | **PAID** |\n| get\\_balances              | Get token balances for a wallet           | wallet\\_address?                  | **FREE** |\n| get\\_shield                | Get token security information            | mints                             | **FREE** |\n| search\\_token              | Search for tokens                         | query                             | **FREE** |\n\n### 📊 Trigger API (Limit Orders)\n\n| Tool                  | Description                        | Parameters                                                                              | Cost     |\n| --------------------- | ---------------------------------- | --------------------------------------------------------------------------------------- | -------- |\n| create\\_limit\\_order  | Create a limit order transaction   | input\\_mint, output\\_mint, making\\_amount, taking\\_amount, slippage\\_bps?, expired\\_at? | **FREE** |\n| execute\\_limit\\_order | Execute a limit order transaction  | transaction, request\\_id                                                                | **PAID** |\n| cancel\\_limit\\_order  | Cancel a single limit order        | order                                                                                   | **FREE** |\n| cancel\\_limit\\_orders | Cancel multiple limit orders       | orders?                                                                                 | **FREE** |\n| get\\_limit\\_orders    | Get active/historical limit orders | order\\_status, wallet\\_address?, input\\_mint?, output\\_mint?, page?                     | **FREE** |\n\n### Key Differences: Swaps vs Limit Orders\n\n* **Swaps** (Ultra API): Execute immediately at current market price\n* **Limit Orders** (Trigger API): Execute automatically when your target price is reached\n\n## 🛠️ Development & CI/CD\n\n### Automated DXT Building\n\nThis project includes automated DXT building integrated with pre-commit hooks:\n\n- **Pre-commit Hook**: Automatically builds DXT files when changes are made to `dxt/` folder\n- **Simple Naming**: Always creates `jupiter-mcp-latest.dxt` for easy downloads\n- **Auto-update**: The latest DXT file is always current with the main branch\n\n### Manual DXT Build\n\n```bash\n# Build DXT\n./scripts/build-dxt.sh\n\n# Output: jupiter-mcp-latest.dxt\n```\n\n### Pre-commit Setup\n\n```bash\n# Install pre-commit hooks (includes DXT building)\npre-commit install\n\n# The DXT will be automatically built when changes are detected in:\n# - dxt/ directory\n# - scripts/build-dxt.sh\n```\n\n## 🔧 Alternative Installation (Development)\n\nFor local development or testing:\n\n### Prerequisites\n\n* Python 3.12+\n* uv for dependency management\n* direnv\n\n### Setup\n\n```bash\ngit clone https://github.com/araa47/jupiter-mcp\ncd jupiter-mcp\ndirenv allow\ncp .env.example .env\n# Edit .env with your configuration\n```\n\n### Environment Variables (.env file)\n\n```bash\nSOLANA_RPC_URL=https://api.mainnet-beta.solana.com\nPRIVATE_KEY=your_base58_encoded_private_key_here\nSOLANA_NETWORK=mainnet-beta\nREQUEST_TIMEOUT=30\n```\n\n### Local Development Usage\n\n```bash\n# Start the server locally\nuv run python run_server.py\n```\n\n## 🧪 Testing\n\nThe project includes comprehensive testing with safety features:\n\n### Test Types\n\n**🆓 Free Tests** (Default - No SOL spent):\n\n* Mock execution tests\n* API quote/balance checks\n* Token searches and security checks\n* Error handling validation\n\n**💰 Paid Tests** (Requires `--run-paid-tests` flag):\n\n* Real trade execution on mainnet\n* Swap tests: Uses tiny amounts (0.0001 SOL ≈ $0.015)\n* Limit order tests: Creates orders 20% above market price\n   * Uses 0.04 SOL (≈ $6) to meet minimum requirements\n   * Orders won't execute at the high price\n   * Automatically cancelled after verification\n* Full transaction signing and broadcasting\n\n### Running Tests\n\n```bash\n# Safe tests only (default)\nuv run pytest tests/ -v\n\n# Include real trade execution (spends tiny amounts)\nuv run pytest tests/ -v --run-paid-tests\n\n# Test with detailed output\nuv run pytest tests/ -v --run-paid-tests -s\n```\n\n### Test Safety Features\n\n* **Paid tests clearly marked** with `@pytest.mark.paid`\n* **Minimal trade amounts** for real execution\n* **Limit orders use out-of-range prices** that won't execute\n* **Clear warnings** before spending real money\n* **Transaction confirmations** with blockchain signatures\n\n## 💡 Important Notes\n\n### Free vs Paid Operations\n\n* **🆓 FREE**: `get_swap_quote`, `get_balances`, `get_shield`, `search_token`, `create_limit_order`, `cancel_limit_order`, `cancel_limit_orders`, `get_limit_orders` - API calls only\n* **💰 PAID**: `execute_swap_transaction`, `execute_limit_order` - Executes real trades and spends SOL\n\n### Automatic Referral System\n\n* All orders include a 255 basis point (2.55%) referral fee (maximum allowed)\n* Referral wallet: `8cK8hCyRQCp52nVuPLnLL71afkRvRcFibSwHMjGFT8bm` ([Referral Dashboard](https://referral.jup.ag/dashboard/8cK8hCyRQCp52nVuPLnLL71afkRvRcFibSwHMjGFT8bm))\n* **Note**: Fees only collected for tokens with referral token accounts (currently SOL)\n* Supports development and maintenance\n\n### Security\n\n* 🔐 Private keys never leave your machine\n* 🛡️ All API calls use HTTPS\n* ⚠️ Never commit `.env` files to version control\n\n## 🐛 Troubleshooting\n\n### Common Issues\n\n1. **\"PRIVATE\\_KEY environment variable is required\"**\n   * Copy `env.example` to `.env` and set your private key\n2. **\"Invalid PRIVATE\\_KEY format\"**\n   * Use base58 encoded private key (from Phantom wallet export)\n3. **Connection timeouts**\n   * Try different RPC URL or increase `REQUEST_TIMEOUT`\n\n## 🎉 Ready to Trade!\n\nYour Jupiter MCP server is ready for Solana DeFi interactions! 🚀\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tokens",
        "finance",
        "fintech",
        "jupiter api",
        "tokens solana",
        "trade tokens"
      ],
      "category": "finance--fintech"
    },
    "ariadng--metatrader-mcp-server": {
      "owner": "ariadng",
      "name": "metatrader-mcp-server",
      "url": "https://github.com/ariadng/metatrader-mcp-server",
      "imageUrl": "",
      "description": "Enable AI LLMs to execute trades using MetaTrader 5 platform",
      "stars": 101,
      "forks": 29,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T17:28:40Z",
      "readme_content": "<div align=\"center\">\n  <h1>MetaTrader MCP Server</h1>\n</div>\n\n<br />\n\n<div align=\"center\">\n\n[![PyPI version](https://img.shields.io/pypi/v/metatrader-mcp-server.svg?style=flat&color=blue)](https://pypi.org/project/metatrader-mcp-server/)\n[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n**Let AI assistants trade for you using natural language**\n\n[Features](#-features) • [Quick Start](#-quick-start) • [Documentation](#-documentation) • [Examples](#-usage-examples) • [Support](#-getting-help)\n\n\n\n</div>\n\n<br />\n\n---\n\n## 🌟 What is This?\n\n**MetaTrader MCP Server** is a bridge that connects AI assistants (like Claude, ChatGPT) to the MetaTrader 5 trading platform. Instead of clicking buttons, you can simply tell your AI assistant what to do:\n\n> \"Show me my account balance\"\n> \"Buy 0.01 lots of EUR/USD\"\n> \"Close all profitable positions\"\n\nThe AI understands your request and executes it on MetaTrader 5 automatically.\n\n### How It Works\n\n```\nYou → AI Assistant → MCP Server → MetaTrader 5 → Your Trades\n```\n\n## ✨ Features\n\n- **🗣️ Natural Language Trading** - Talk to AI in plain English to execute trades\n- **🤖 Multi-AI Support** - Works with Claude Desktop, ChatGPT (via Open WebUI), and more\n- **📊 Full Market Access** - Get real-time prices, historical data, and symbol information\n- **💼 Complete Account Control** - Check balance, equity, margin, and trading statistics\n- **⚡ Order Management** - Place, modify, and close orders with simple commands\n- **🔒 Secure** - All credentials stay on your machine\n- **🌐 Flexible Interfaces** - Use as MCP server or REST API\n- **📖 Well Documented** - Comprehensive guides and examples\n\n## 🎯 Who Is This For?\n\n- **Traders** who want to automate their trading using AI\n- **Developers** building trading bots or analysis tools\n- **Analysts** who need quick access to market data\n- **Anyone** interested in combining AI with financial markets\n\n## ⚠️ Important Disclaimer\n\n**Please read this carefully:**\n\nTrading financial instruments involves significant risk of loss. This software is provided as-is, and the developers accept **no liability** for any trading losses, gains, or consequences of using this software.\n\nBy using this software, you acknowledge that:\n- You understand the risks of financial trading\n- You are responsible for all trades executed through this system\n- You will not hold the developers liable for any outcomes\n- You are using this software at your own risk\n\n**This is not financial advice. Always trade responsibly.**\n\n---\n\n## 📋 Prerequisites\n\nBefore you begin, make sure you have:\n\n1. **Python 3.10 or higher** - [Download here](https://www.python.org/downloads/)\n2. **MetaTrader 5 terminal** - [Download here](https://www.metatrader5.com/en/download)\n3. **MT5 Trading Account** - Demo or live account credentials\n   - Login number\n   - Password\n   - Server name (e.g., \"MetaQuotes-Demo\")\n\n## 🚀 Quick Start\n\n### Step 1: Install the Package\n\nOpen your terminal or command prompt and run:\n\n```bash\npip install metatrader-mcp-server\n```\n\n### Step 2: Enable Algorithmic Trading\n\n1. Open MetaTrader 5\n2. Go to `Tools` → `Options`\n3. Click the `Expert Advisors` tab\n4. Check the box for `Allow algorithmic trading`\n5. Click `OK`\n\n### Step 3: Choose Your Interface\n\nPick one based on how you want to use it:\n\n#### Option A: Use with Claude Desktop (Recommended for beginners)\n\n1. Find your Claude Desktop config file:\n   - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - **Mac**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n2. Open the file and add this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"metatrader\": {\n      \"command\": \"metatrader-mcp-server\",\n      \"args\": [\n        \"--login\",    \"YOUR_MT5_LOGIN\",\n        \"--password\", \"YOUR_MT5_PASSWORD\",\n        \"--server\",   \"YOUR_MT5_SERVER\"\n      ]\n    }\n  }\n}\n```\n\n3. Replace `YOUR_MT5_LOGIN`, `YOUR_MT5_PASSWORD`, and `YOUR_MT5_SERVER` with your actual credentials\n\n4. Restart Claude Desktop\n\n5. Start chatting! Try: *\"What's my account balance?\"*\n\n#### Option B: Use with Open WebUI (For ChatGPT and other LLMs)\n\n1. Start the HTTP server:\n\n```bash\nmetatrader-http-server --login YOUR_LOGIN --password YOUR_PASSWORD --server YOUR_SERVER --host 0.0.0.0 --port 8000\n```\n\n2. Open your browser to `http://localhost:8000/docs` to see the API documentation\n\n3. In Open WebUI:\n   - Go to **Settings** → **Tools**\n   - Click **Add Tool Server**\n   - Enter `http://localhost:8000`\n   - Save\n\n4. Now you can use trading tools in your Open WebUI chats!\n\n---\n\n## 💡 Usage Examples\n\n### With Claude Desktop\n\nOnce configured, you can chat naturally:\n\n**Check Your Account:**\n> You: \"Show me my account information\"\n>\n> Claude: *Returns balance, equity, margin, leverage, etc.*\n\n**Get Market Data:**\n> You: \"What's the current price of EUR/USD?\"\n>\n> Claude: *Shows bid, ask, and spread*\n\n**Place a Trade:**\n> You: \"Buy 0.01 lots of GBP/USD with stop loss at 1.2500 and take profit at 1.2700\"\n>\n> Claude: *Executes the trade and confirms*\n\n**Manage Positions:**\n> You: \"Close all my losing positions\"\n>\n> Claude: *Closes positions and reports results*\n\n**Analyze History:**\n> You: \"Show me all my trades from last week for EUR/USD\"\n>\n> Claude: *Returns trade history as a table*\n\n### With HTTP API\n\n```bash\n# Get account info\ncurl http://localhost:8000/api/v1/account/info\n\n# Get current price\ncurl \"http://localhost:8000/api/v1/market/price?symbol_name=EURUSD\"\n\n# Place a market order\ncurl -X POST http://localhost:8000/api/v1/order/market \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"symbol\": \"EURUSD\",\n    \"volume\": 0.01,\n    \"type\": \"BUY\",\n    \"stop_loss\": 1.0990,\n    \"take_profit\": 1.1010\n  }'\n\n# Get all open positions\ncurl http://localhost:8000/api/v1/positions\n\n# Close a specific position\ncurl -X DELETE http://localhost:8000/api/v1/positions/12345\n```\n\n### As a Python Library\n\n```python\nfrom metatrader_client import MT5Client\n\n# Connect to MT5\nconfig = {\n    \"login\": 12345678,\n    \"password\": \"your_password\",\n    \"server\": \"MetaQuotes-Demo\"\n}\nclient = MT5Client(config)\nclient.connect()\n\n# Get account statistics\nstats = client.account.get_trade_statistics()\nprint(f\"Balance: ${stats['balance']}\")\nprint(f\"Equity: ${stats['equity']}\")\n\n# Get current price\nprice = client.market.get_symbol_price(\"EURUSD\")\nprint(f\"EUR/USD Bid: {price['bid']}, Ask: {price['ask']}\")\n\n# Place a market order\nresult = client.order.place_market_order(\n    type=\"BUY\",\n    symbol=\"EURUSD\",\n    volume=0.01,\n    stop_loss=1.0990,\n    take_profit=1.1010\n)\nprint(result['message'])\n\n# Close all positions\nclient.order.close_all_positions()\n\n# Disconnect\nclient.disconnect()\n```\n\n---\n\n## 📚 Available Operations\n\n### Account Management\n- `get_account_info` - Get balance, equity, profit, margin level, leverage, currency\n\n### Market Data\n- `get_symbols` - List all available trading symbols\n- `get_symbol_price` - Get current bid/ask price for a symbol\n- `get_candles_latest` - Get recent price candles (OHLCV data)\n- `get_candles_by_date` - Get historical candles for a date range\n- `get_symbol_info` - Get detailed symbol information\n\n### Order Execution\n- `place_market_order` - Execute instant BUY/SELL orders\n- `place_pending_order` - Place limit/stop orders for future execution\n- `modify_position` - Update stop loss or take profit\n- `modify_pending_order` - Modify pending order parameters\n\n### Position Management\n- `get_all_positions` - View all open positions\n- `get_positions_by_symbol` - Filter positions by trading pair\n- `get_positions_by_id` - Get specific position details\n- `close_position` - Close a specific position\n- `close_all_positions` - Close all open positions\n- `close_all_positions_by_symbol` - Close all positions for a symbol\n- `close_all_profitable_positions` - Close only winning trades\n- `close_all_losing_positions` - Close only losing trades\n\n### Pending Orders\n- `get_all_pending_orders` - List all pending orders\n- `get_pending_orders_by_symbol` - Filter pending orders by symbol\n- `cancel_pending_order` - Cancel a specific pending order\n- `cancel_all_pending_orders` - Cancel all pending orders\n- `cancel_pending_orders_by_symbol` - Cancel pending orders for a symbol\n\n### Trading History\n- `get_deals` - Get historical completed trades\n- `get_orders` - Get historical order records\n\n---\n\n## 🔧 Advanced Configuration\n\n### Using Environment Variables\n\nInstead of putting credentials in the command line, create a `.env` file:\n\n```env\nLOGIN=12345678\nPASSWORD=your_password\nSERVER=MetaQuotes-Demo\n```\n\nThen start the server without arguments:\n\n```bash\nmetatrader-http-server\n```\n\n### Custom Port and Host\n\n```bash\nmetatrader-http-server --host 127.0.0.1 --port 9000\n```\n\n### Connection Parameters\n\nThe MT5 client supports additional configuration:\n\n```python\nconfig = {\n    \"login\": 12345678,\n    \"password\": \"your_password\",\n    \"server\": \"MetaQuotes-Demo\",\n    \"timeout\": 60000,           # Connection timeout (ms)\n    \"max_retries\": 3,           # Retry attempts\n    \"backoff_factor\": 1.5,      # Delay multiplier between retries\n    \"cooldown_time\": 2.0,       # Seconds to wait between connections\n    \"debug\": True               # Enable debug logging\n}\n```\n\n---\n\n## 🗺️ Roadmap\n\n| Feature | Status |\n|---------|--------|\n| MetaTrader 5 Connection | ✅ Complete |\n| Python Client Library | ✅ Complete |\n| MCP Server | ✅ Complete |\n| Claude Desktop Integration | ✅ Complete |\n| HTTP/REST API Server | ✅ Complete |\n| Open WebUI Integration | ✅ Complete |\n| OpenAPI Documentation | ✅ Complete |\n| PyPI Package | ✅ Published |\n| Google ADK Integration | 🚧 In Progress |\n| WebSocket Support | 📋 Planned |\n| Docker Container | 📋 Planned |\n\n---\n\n## 🛠️ Development\n\n### Setting Up Development Environment\n\n```bash\n# Clone the repository\ngit clone https://github.com/ariadng/metatrader-mcp-server.git\ncd metatrader-mcp-server\n\n# Install in development mode\npip install -e .\n\n# Install development dependencies\npip install pytest python-dotenv\n\n# Run tests\npytest tests/\n```\n\n### Project Structure\n\n```\nmetatrader-mcp-server/\n├── src/\n│   ├── metatrader_client/      # Core MT5 client library\n│   │   ├── account/            # Account operations\n│   │   ├── connection/         # Connection management\n│   │   ├── history/            # Historical data\n│   │   ├── market/             # Market data\n│   │   ├── order/              # Order execution\n│   │   └── types/              # Type definitions\n│   ├── metatrader_mcp/         # MCP server implementation\n│   └── metatrader_openapi/     # HTTP/REST API server\n├── tests/                      # Test suite\n├── docs/                       # Documentation\n└── pyproject.toml             # Project configuration\n```\n\n---\n\n## 🤝 Contributing\n\nContributions are welcome! Here's how you can help:\n\n1. **Report Bugs** - [Open an issue](https://github.com/ariadng/metatrader-mcp-server/issues)\n2. **Suggest Features** - Share your ideas in issues\n3. **Submit Pull Requests** - Fix bugs or add features\n4. **Improve Documentation** - Help make docs clearer\n5. **Share Examples** - Show how you're using it\n\n### Contribution Guidelines\n\n- Fork the repository\n- Create a feature branch (`git checkout -b feature/amazing-feature`)\n- Make your changes\n- Write or update tests\n- Ensure tests pass (`pytest`)\n- Commit your changes (`git commit -m 'Add amazing feature'`)\n- Push to the branch (`git push origin feature/amazing-feature`)\n- Open a Pull Request\n\n---\n\n## 📖 Documentation\n\n- **[Developer Documentation](docs/README.md)** - Detailed technical docs\n- **[API Reference](docs/api-reference.md)** - Complete API documentation\n- **[Examples](docs/examples/)** - Code examples and tutorials\n- **[Roadmap](docs/roadmap/version-checklist.md)** - Feature development timeline\n\n---\n\n## 🆘 Getting Help\n\n- **Issues**: [GitHub Issues](https://github.com/ariadng/metatrader-mcp-server/issues)\n- **Discussions**: [GitHub Discussions](https://github.com/ariadng/metatrader-mcp-server/discussions)\n- **LinkedIn**: [Connect with me](https://linkedin.com/in/ariadhanang)\n\n### Common Issues\n\n**\"Connection failed\"**\n- Ensure MT5 terminal is running\n- Check that algorithmic trading is enabled\n- Verify your login credentials are correct\n\n**\"Module not found\"**\n- Make sure you've installed the package: `pip install metatrader-mcp-server`\n- Check your Python version is 3.10 or higher\n\n**\"Order execution failed\"**\n- Verify the symbol exists on your broker\n- Check that the market is open\n- Ensure you have sufficient margin\n\n---\n\n## 📝 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n## 🙏 Acknowledgments\n\n- Built with [FastMCP](https://github.com/jlowin/fastmcp) for MCP protocol support\n- Uses [MetaTrader5](https://pypi.org/project/MetaTrader5/) Python package\n- Powered by [FastAPI](https://fastapi.tiangolo.com/) for the REST API\n\n---\n\n## 📊 Project Stats\n\n- **Version**: 0.2.8\n- **Python**: 3.10+\n- **License**: MIT\n- **Status**: Active Development\n\n---\n\n<div align=\"center\">\n\n**Made with ❤️ by [Aria Dhanang](https://github.com/ariadng)**\n\n⭐ Star this repo if you find it useful!\n\n[PyPI](https://pypi.org/project/metatrader-mcp-server/) • [GitHub](https://github.com/ariadng/metatrader-mcp-server) • [Issues](https://github.com/ariadng/metatrader-mcp-server/issues)\n\n</div>",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "metatrader",
        "llms",
        "fintech",
        "metatrader platform",
        "metatrader mcp",
        "ai llms"
      ],
      "category": "finance--fintech"
    },
    "armorwallet--armor-crypto-mcp": {
      "owner": "armorwallet",
      "name": "armor-crypto-mcp",
      "url": "https://github.com/armorwallet/armor-crypto-mcp",
      "imageUrl": "",
      "description": "MCP to interface with multiple blockchains, staking, DeFi, swap, bridging, wallet management, DCA, Limit Orders, Coin Lookup, Tracking and more.",
      "stars": 183,
      "forks": 24,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-10-04T02:59:18Z",
      "readme_content": "# Armor Crypto MCP\n*Alpha Test version 0.1.24*\n\nA single source for integrating AI Agents with the Crypto ecosystem. This includes Wallet creation and management, swaps, transfers, event-based trades like DCA, stop loss and take profit, and much more. The Armor MCP supports Solana in Alpha and, when in beta, will support more than a dozen blockchains, including Ethereum. Base, Avalanche, Bitcoin, Sui, Berachain, megaETH, Optimism, Ton, BNB, and Arbitrum, among others. Using Armor's MCP you can bring all of crypto into your AI Agent with unified logic and a complete set of tools.\n       \n![Armor MCP](https://armor-assets-repository.s3.nl-ams.scw.cloud/MCP_sm.png)\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n# Features\n\n🧠 AI Native\n\n📙 Wallet Management\n\n🔃 Swaps\n\n🌈 Specialized trades (DCA, Stop Loss etc.)\n\n⛓️ Multi-chain\n\n↔️ Cross-chain transations\n\n🥩 Staking\n\n🤖 Fast intergration to Agentic frameworks\n\n👫 Social Sentiment\n\n🔮 Prediction\n<br />\n<br />\n![Armor MCP Diagram](https://armor-assets-repository.s3.nl-ams.scw.cloud/amor_mcp_diagram.png)\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n# Requirements\n\n### 1. Make sure you have python installed\n<br />\n\n### 2. Install `uv`\n*Linux / Windows*\n\n```sh\npip install uv\n```\n*Mac*\n\n```sh\nbrew install uv\n```\n<br />\n\n### 3. Claude Desktop or your AI Agent will run the MCP\nSee [Usage & Configuration](#usage--configuration) for details.\n<br />\n<br />\n<br />\n<br />\n<br />\n\n# Alpha Testing\n\nWe are currently in pre-alpha, and we are testing the capabilities of various agents and agentic frameworks like Claude Desktop, Cline, Cursor, n8n, etc. \n\n## Current Features & Tools\n- Wallet Management\n    - Grouping & Organization\n    - Archiving\n- Swap & Trades\n    - Normal swap\n    - DCA (place / list / cancel)\n    - Scheduled Orders\n    - Limit Orders (place / list / cancel)\n- Staking and Unstaking\n- Token Search and Trending Tokens\n- Statistical Calculator for accurate Analysis\n- Supports Solana blockchain\n\n## Coming Soon\n- More Blockchain Support\n- Minting\n- Armor Agents as a Tool (or A2A)\n\n## MCP Setup\nCurrently you need to have the Armor NFT to get an API Key.\nGet it [here](https://codex.armorwallet.ai/)\n\n## Usage & Configuration\nTo use the Armor MCP with your agent, you need the following configuration, replace `<PUT-YOUR-KEY-HERE>` with your API key:\n```json\n{\n  \"mcpServers\": {\n    \"armor-crypto-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"armor-crypto-mcp@latest\", \"--version\"],\n      \"env\": {\n        \"ARMOR_API_KEY\": \"<PUT-YOUR-KEY-HERE>\"\n      }\n    }\n  }\n}\n```\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n# Use in Claude Desktop\n1. Must have Developer Mode enabled\n2. Open Claude Desktop's File Menu top left of the window.\n3. Go to File > Settings\n4. Under Developer, click Edit Configuration\n5. In the config file, insert the `armor-wallet-mcp` section from above\n6. Make sure to replace the placeholder with your API key\n7. Save the file and start a new Chat in Claude Desktop\n\n## Use in Cline\n1. Click on the `MCP Servers` button in the Cline tab in VSCode on the left panel\n2. Scroll to the bottom of the left panel and click on `Configure MCP Servers`\n3. In the config file, insert `armor-wallet-mcp` section from above\n4. Make sure to replace the placeholder with your API key\n5. Save the file, click `Done` under the `MCP Servers` tab and start chatting with Cline\n\n## Use in n8n\n1. Open the n8n app\n2. Bottom-left of screen click `...` next to your username and click `Settings`\n3. On the left panel, click `Community nodes` and then `Install a Community Node` button\n4. In the search field for `npm Package Name` type in *mcp*\n5. Install `MCP Nodes`\n6. Add any MCP node, for example: `List Tools`\n7. In the MCP Client `Parameters` tab, click `Select Credential` and click `Create new credential`\n8. Under `Command` enter `uvx`\n9. Under `Arguments` enter `armor-crypto-mcp`\n10. Under `Environments` enter `ARMOR_API_KEY=eyJhbGciOiJIUzI1NiIsIn...` paste the full API Key value after the `=`\n11. Back in the `Parameters` tab you can choose the MCP `Operation` for that Node\n<br />\n<br />\n<br />\n<br />\n<br />\n<br />\n\n# Using Armor MCP\n\nOnce you have setup the Armor MCP [here are some prompts you can use to get started](https://github.com/armorwallet/armor-crypto-mcp/blob/main/README_prompts.md)\n<br />\n<br />\n<br />\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "crypto",
        "crypto mcp",
        "fintech armorwallet",
        "armor crypto"
      ],
      "category": "finance--fintech"
    },
    "bankless--onchain-mcp": {
      "owner": "bankless",
      "name": "onchain-mcp",
      "url": "https://github.com/Bankless/onchain-mcp/",
      "imageUrl": "",
      "description": "Bankless Onchain API to interact with smart contracts, query transaction and token information",
      "stars": 67,
      "forks": 16,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T02:59:31Z",
      "readme_content": "# Bankless Onchain MCP Server\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n![Version](https://img.shields.io/badge/version-0.6.2-blue)\n\nMCP (Model Context Protocol) server for blockchain data interaction through the Bankless API.\n\n## Overview\n\nThe Bankless Onchain MCP Server provides a framework for interacting with on-chain data via the Bankless API. It implements the Model Context Protocol (MCP) to allow AI models to access blockchain state and event data in a structured way.\n\n\nhttps://github.com/user-attachments/assets/95732dff-ae5f-45a6-928a-1ae17c0ddf9d\n\n\n## Features\n\nThe server provides the following onchain data operations:\n\n### Contract Operations\n\n- **Read Contract State** (`read_contract`): Read state from smart contracts on various blockchain networks.\n    - Parameters: network, contract address, method, inputs, outputs\n    - Returns: Contract call results with typed values\n\n- **Get Proxy** (`get_proxy`): Retrieve proxy implementation contract addresses.\n    - Parameters: network, contract address\n    - Returns: Implementation contract address\n\n- **Get ABI** (`get_abi`): Fetch the ABI (Application Binary Interface) for a contract.\n    - Parameters: network, contract address\n    - Returns: Contract ABI in JSON format\n\n- **Get Source** (`get_source`): Retrieve the source code for a verified contract.\n    - Parameters: network, contract address\n    - Returns: Source code, ABI, compiler version, and other contract metadata\n\n### Event Operations\n\n- **Get Events** (`get_events`): Fetch event logs for a contract based on topics.\n    - Parameters: network, addresses, topic, optional topics\n    - Returns: Filtered event logs\n\n- **Build Event Topic** (`build_event_topic`): Generate an event topic signature from event name and argument types.\n    - Parameters: network, event name, argument types\n    - Returns: Event topic hash\n\n### Transaction Operations\n\n- **Get Transaction History** (`get_transaction_history`): Retrieve transaction history for a user address.\n    - Parameters: network, user address, optional contract, optional method ID, optional start block, include data flag\n    - Returns: List of transactions with hash, data, network, and timestamp\n\n- **Get Transaction Info** (`get_transaction_info`): Get detailed information about a specific transaction.\n    - Parameters: network, transaction hash\n    - Returns: Transaction details including block number, timestamp, from/to addresses, value, gas info, status, and receipt data\n\n## Tools\n\n- **read_contract**\n    - Read contract state from a blockchain\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"polygon\")\n        - `contract` (string, required): The contract address\n        - `method` (string, required): The contract method to call\n        - `inputs` (array, required): Input parameters for the method call, each containing:\n            - `type` (string): The type of the input parameter (e.g., \"address\", \"uint256\")\n            - `value` (any): The value of the input parameter\n        - `outputs` (array, required): Expected output types, each containing:\n            - `type` (string): The expected output type\n    - Returns an array of contract call results\n\n- **get_proxy**\n    - Gets the proxy address for a given network and contract\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `contract` (string, required): The contract address\n    - Returns the implementation address for the proxy contract\n\n- **get_events**\n    - Fetches event logs for a given network and filter criteria\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `addresses` (array, required): List of contract addresses to filter events\n        - `topic` (string, required): Primary topic to filter events\n        - `optionalTopics` (array, optional): Optional additional topics (can include null values)\n    - Returns an object containing event logs matching the filter criteria\n\n- **build_event_topic**\n    - Builds an event topic signature based on event name and arguments\n    - Input:\n        - `network` (string, required): The blockchain network (e.g., \"ethereum\", \"base\")\n        - `name` (string, required): Event name (e.g., \"Transfer(address,address,uint256)\")\n        - `arguments` (array, required): Event arguments types, each containing:\n            - `type` (string): The argument type (e.g., \"address\", \"uint256\")\n    - Returns a string containing the keccak256 hash of the event signature\n\n## Installation\n\n```bash\nnpm install @bankless/onchain-mcp\n```\n\n## Usage\n\n### Environment Setup\n\nBefore using the server, set your Bankless API token. For details on how to obtain your Bankless API token, head to https://docs.bankless.com/bankless-api/other-services/onchain-mcp\n\n```bash\nexport BANKLESS_API_TOKEN=your_api_token_here\n```\n\n### Running the Server\n\nThe server can be run directly from the command line:\n\n```bash\nnpx @bankless/onchain-mcp\n```\n\n### Usage with LLM Tools\n\nThis server implements the Model Context Protocol (MCP), which allows it to be used as a tool provider for compatible AI models. Here are some example calls for each tool:\n\n#### read_contract\n\n```javascript\n// Example call\n{\n  \"name\": \"read_contract\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"contract\": \"0x1234...\",\n    \"method\": \"balanceOf\",\n    \"inputs\": [\n      { \"type\": \"address\", \"value\": \"0xabcd...\" }\n    ],\n    \"outputs\": [\n      { \"type\": \"uint256\" }\n    ]\n  }\n}\n\n// Example response\n[\n  {\n    \"value\": \"1000000000000000000\",\n    \"type\": \"uint256\"\n  }\n]\n```\n\n#### get_proxy\n\n```javascript\n// Example call\n{\n  \"name\": \"get_proxy\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"contract\": \"0x1234...\"\n  }\n}\n\n// Example response\n{\n  \"implementation\": \"0xefgh...\"\n}\n```\n\n#### get_events\n\n```javascript\n// Example call\n{\n  \"name\": \"get_events\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"addresses\": [\"0x1234...\"],\n    \"topic\": \"0xabcd...\",\n    \"optionalTopics\": [\"0xef01...\", null]\n  }\n}\n\n// Example response\n{\n  \"result\": [\n    {\n      \"removed\": false,\n      \"logIndex\": 5,\n      \"transactionIndex\": 2,\n      \"transactionHash\": \"0x123...\",\n      \"blockHash\": \"0xabc...\",\n      \"blockNumber\": 12345678,\n      \"address\": \"0x1234...\",\n      \"data\": \"0x...\",\n      \"topics\": [\"0xabcd...\", \"0xef01...\", \"0x...\"]\n    }\n  ]\n}\n```\n\n#### build_event_topic\n\n```javascript\n// Example call\n{\n  \"name\": \"build_event_topic\",\n  \"arguments\": {\n    \"network\": \"ethereum\",\n    \"name\": \"Transfer(address,address,uint256)\",\n    \"arguments\": [\n      { \"type\": \"address\" },\n      { \"type\": \"address\" },\n      { \"type\": \"uint256\" }\n    ]\n  }\n}\n\n// Example response\n\"0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef\"\n```\n\n## Development\n\n### Building from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/Bankless/onchain-mcp.git\ncd onchain-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n### Debug Mode\n\n```bash\nnpm run debug\n```\n\n### Integration with AI Models\n\nTo integrate this server with AI applications that support MCP, add the following to your app's server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"bankless\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@bankless/onchain-mcp\"\n      ],\n      \"env\": {\n        \"BANKLESS_API_TOKEN\": \"your_api_token_here\"\n      }\n    }\n  }\n}\n```\n\n## Error Handling\n\nThe server provides specific error types for different scenarios:\n\n- `BanklessValidationError`: Invalid input parameters\n- `BanklessAuthenticationError`: API token issues\n- `BanklessResourceNotFoundError`: Requested resource not found\n- `BanklessRateLimitError`: API rate limit exceeded\n\n## Prompting Tips\n\nIn order to guide an LLM model to use the Bankless Onchain MCP Server, the following prompts can be used:\n\n```\nROLE:\n• You are Kompanion, a blockchain expert and EVM sleuth. \n• You specialize in navigating and analyzing smart contracts using your tools and resources.\n\nHOW KOMPANION CAN HANDLE PROXY CONTRACTS:\n• If a contract is a proxy, call your “get_proxy” tool to fetch the implementation contract.  \n• If that fails, try calling the “implementation” method on the proxy contract.  \n• If that also fails, try calling the “_implementation” function.  \n• After obtaining the implementation address, call “get_contract_source” with that address to fetch its source code.  \n• When reading or modifying the contract state, invoke implementation functions on the proxy contract address (not directly on the implementation).\n\nHOW KOMPANION CAN HANDLE EVENTS:\n• Get the ABI and Source of the relevant contracts\n• From the event types in the ABI, construct the correct topics for the event relevant to the question\n• use the \"get_event_logs\" tool to fetch logs for the contract\n\nKOMPANION'S RULES:\n• Do not begin any response with “Great,” “Certainly,” “Okay,” or “Sure.”  \n• Maintain a direct, technical style. Do not add conversational flourishes.  \n• If the user’s question is unrelated to smart contracts, do not fetch any contracts.  \n• If you navigate contracts, explain each step in bullet points.  \n• Solve tasks iteratively, breaking them into steps.  \n• Use bullet points for lists of steps.  \n• Never assume a contract’s functionality. Always verify with examples using your tools to read the contract state.  \n• Before responding, consider which tools might help you gather better information.  \n• Include as much relevant information as possible in your final answer, depending on your findings.\n\nHOW KOMPANION CAN USE TOOLS:\n• You can fetch contract source codes, ABIs, and read contract data by using your tools and functions.  \n• Always verify the source or ABI to understand the contract rather than making assumptions.  \n• If you need to read contract state, fetch its ABI (especially if the source is lengthy).  \n\nFINAL INSTRUCTION:\n• Provide the best possible, concise answer to the user’s request. If it's not an immediate question but an instruction, follow it directly.\n• Use your tools to gather any necessary clarifications or data.  \n• Offer a clear, direct response and add a summary of what you did (how you navigated the contracts) at the end.\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bankless",
        "onchain",
        "fintech",
        "bankless onchain",
        "fintech bankless",
        "mcp bankless"
      ],
      "category": "finance--fintech"
    },
    "berlinbra--alpha-vantage-mcp": {
      "owner": "berlinbra",
      "name": "alpha-vantage-mcp",
      "url": "https://github.com/berlinbra/alpha-vantage-mcp",
      "imageUrl": "",
      "description": "Alpha Vantage API integration to fetch both stock and crypto information",
      "stars": 73,
      "forks": 34,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-26T13:35:24Z",
      "readme_content": "# Alpha Vantage MCP Server\n[![smithery badge](https://smithery.ai/badge/@berlinbra/alpha-vantage-mcp)](https://smithery.ai/server/@berlinbra/alpha-vantage-mcp)\n\nA Model Context Protocol (MCP) server that provides real-time access to financial market data through the free [Alpha Vantage API](https://www.alphavantage.co/documentation/). This server implements a standardized interface for retrieving stock quotes and company information.\n\n<a href=\"https://glama.ai/mcp/servers/0wues5td08\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/0wues5td08/badge\" alt=\"AlphaVantage-MCP MCP server\" /></a>\n\n# Features\n\n- Real-time stock quotes with price, volume, and change data\n- Detailed company information including sector, industry, and market cap\n- Real-time cryptocurrency exchange rates with bid/ask prices\n- Daily, weekly, and monthly cryptocurrency time series data\n- Historical options chain data with advanced filtering and sorting\n- Built-in error handling and rate limit management\n\n## Installation\n\n### Using Claude Desktop\n\n#### Installing via Docker\n\n- Clone the repository and build a local image to be utilized by your Claude desktop client\n\n```sh\ncd alpha-vantage-mcp\ndocker build -t mcp/alpha-vantage .\n```\n\n- Change your `claude_desktop_config.json` to match the following, replacing `REPLACE_API_KEY` with your actual key:\n\n > `claude_desktop_config.json` path\n >\n > - On MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n > - On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"alphavantage\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"-e\",\n        \"ALPHA_VANTAGE_API_KEY\",\n        \"mcp/alpha-vantage\"\n      ],\n      \"env\": {\n        \"ALPHA_VANTAGE_API_KEY\": \"REPLACE_API_KEY\"\n      }\n    }\n  }\n}\n```\n\n#### Installing via Smithery\n\nTo install Alpha Vantage MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@berlinbra/alpha-vantage-mcp):\n\n```bash\nnpx -y @smithery/cli install @berlinbra/alpha-vantage-mcp --client claude\n```\n\n<summary> <h3> Development/Unpublished Servers Configuration <h3> </summary>\n\n<details>\n\n```json\n{\n \"mcpServers\": {\n  \"alpha-vantage-mcp\": {\n   \"args\": [\n    \"--directory\",\n    \"/Users/{INSERT_USER}/YOUR/PATH/TO/alpha-vantage-mcp\",\n    \"run\",\n    \"alpha-vantage-mcp\"\n   ],\n   \"command\": \"uv\",\n   \"env\": {\n    \"ALPHA_VANTAGE_API_KEY\": \"<insert api key>\"\n   }\n  }\n }\n}\n```\n        \n</details>\n\n#### Install packages\n\n```\nuv install -e .\n```\n\n#### Running\n\nAfter connecting Claude client with the MCP tool via json file and installing the packages, Claude should see the server's mcp tools:\n\nYou can run the sever yourself via:\nIn alpha-vantage-mcp repo: \n```\nuv run src/alpha_vantage_mcp/server.py\n```\n\nwith inspector\n```\n* npx @modelcontextprotocol/inspector uv --directory /Users/{INSERT_USER}/YOUR/PATH/TO/alpha-vantage-mcp run src/alpha_vantage_mcp/server.py `\n```\n\n## Available Tools\n\nThe server implements eight tools:\n- `get-stock-quote`: Get the latest stock quote for a specific company\n- `get-company-info`: Get stock-related information for a specific company\n- `get-crypto-exchange-rate`: Get current cryptocurrency exchange rates\n- `get-time-series`: Get historical daily price data for a stock\n- `get-historical-options`: Get historical options chain data with sorting capabilities\n- `get-crypto-daily`: Get daily time series data for a cryptocurrency\n- `get-crypto-weekly`: Get weekly time series data for a cryptocurrency\n- `get-crypto-monthly`: Get monthly time series data for a cryptocurrency\n\n### get-stock-quote\n\n**Input Schema:**\n```json\n{\n    \"symbol\": {\n        \"type\": \"string\",\n        \"description\": \"Stock symbol (e.g., AAPL, MSFT)\"\n    }\n}\n```\n\n**Example Response:**\n```\nStock quote for AAPL:\n\nPrice: $198.50\nChange: $2.50 (+1.25%)\nVolume: 58942301\nHigh: $199.62\nLow: $197.20\n```\n\n### get-company-info\n\nRetrieves detailed company information for a given symbol.\n\n**Input Schema:**\n```json\n{\n    \"symbol\": {\n        \"type\": \"string\",\n        \"description\": \"Stock symbol (e.g., AAPL, MSFT)\"\n    }\n}\n```\n\n**Example Response:**\n```\nCompany information for AAPL:\n\nName: Apple Inc\nSector: Technology\nIndustry: Consumer Electronics\nMarket Cap: $3000000000000\nDescription: Apple Inc. designs, manufactures, and markets smartphones...\nExchange: NASDAQ\nCurrency: USD\n```\n\n### get-crypto-exchange-rate\n\nRetrieves real-time cryptocurrency exchange rates with additional market data.\n\n**Input Schema:**\n```json\n{\n    \"crypto_symbol\": {\n        \"type\": \"string\",\n        \"description\": \"Cryptocurrency symbol (e.g., BTC, ETH)\"\n    },\n    \"market\": {\n        \"type\": \"string\",\n        \"description\": \"Market currency (e.g., USD, EUR)\",\n        \"default\": \"USD\"\n    }\n}\n```\n\n**Example Response:**\n```\nCryptocurrency exchange rate for BTC/USD:\n\nFrom: Bitcoin (BTC)\nTo: United States Dollar (USD)\nExchange Rate: 43521.45000\nLast Updated: 2024-12-17 19:45:00 UTC\nBid Price: 43521.00000\nAsk Price: 43522.00000\n```\n\n### get-time-series\n\nRetrieves daily time series (OHLCV) data.\n\n**Input Schema:**\n```json\n{\n    \"symbol\": {\n        \"type\": \"string\",\n        \"description\": \"Stock symbol (e.g., AAPL, MSFT)\"\n    },\n    \"outputsize\": {\n        \"type\": \"string\",\n        \"description\": \"compact (latest 100 data points) or full (up to 20 years of data)\",\n        \"default\": \"compact\"\n    }\n}\n```\n**Example Response:**\n```\nTime Series Data for AAPL (Last Refreshed: 2024-12-17 16:00:00):\n\nDate: 2024-12-16\nOpen: $195.09\nHigh: $197.68\nLow: $194.83\nClose: $197.57\nVolume: 55,751,011\n```\n\n### get-historical-options\n\nRetrieves historical options chain data with advanced sorting and filtering capabilities.\n\n**Input Schema:**\n```json\n{\n    \"symbol\": {\n        \"type\": \"string\",\n        \"description\": \"Stock symbol (e.g., AAPL, MSFT)\"\n    },\n    \"date\": {\n        \"type\": \"string\",\n        \"description\": \"Optional: Trading date in YYYY-MM-DD format (defaults to previous trading day, must be after 2008-01-01)\",\n        \"pattern\": \"^20[0-9]{2}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[12][0-9]|3[01])$\"\n    },\n    \"limit\": {\n        \"type\": \"integer\",\n        \"description\": \"Optional: Number of contracts to return (default: 10, use -1 for all contracts)\",\n        \"default\": 10,\n        \"minimum\": -1\n    },\n    \"sort_by\": {\n        \"type\": \"string\",\n        \"description\": \"Optional: Field to sort by\",\n        \"enum\": [\"strike\", \"expiration\", \"volume\", \"open_interest\", \"implied_volatility\", \"delta\", \"gamma\", \"theta\", \"vega\", \"rho\", \"last\", \"bid\", \"ask\"],\n        \"default\": \"strike\"\n    },\n    \"sort_order\": {\n        \"type\": \"string\",\n        \"description\": \"Optional: Sort order\",\n        \"enum\": [\"asc\", \"desc\"],\n        \"default\": \"asc\"\n    }\n}\n```\n\n**Example Response:**\n```\nHistorical Options Data for AAPL (2024-02-20):\n\nContract 1:\nStrike: $190.00\nExpiration: 2024-03-15\nLast: $8.45\nBid: $8.40\nAsk: $8.50\nVolume: 1245\nOpen Interest: 4567\nImplied Volatility: 0.25\nGreeks:\n  Delta: 0.65\n  Gamma: 0.04\n  Theta: -0.15\n  Vega: 0.30\n  Rho: 0.25\n\nContract 2:\n...\n```\n\n### get-crypto-daily\n\nRetrieves daily time series data for a cryptocurrency.\n\n**Input Schema:**\n```json\n{\n    \"symbol\": {\n        \"type\": \"string\",\n        \"description\": \"Cryptocurrency symbol (e.g., BTC, ETH)\"\n    },\n    \"market\": {\n        \"type\": \"string\",\n        \"description\": \"Market currency (e.g., USD, EUR)\",\n        \"default\": \"USD\"\n    }\n}\n```\n\n**Example Response:**\n```\nDaily cryptocurrency time series for SOL in USD:\n\nDaily Time Series for Solana (SOL)\nMarket: United States Dollar (USD)\nLast Refreshed: 2025-04-17 00:00:00 UTC\n\nDate: 2025-04-17\nOpen: 131.31000000 USD\nHigh: 131.67000000 USD\nLow: 130.74000000 USD\nClose: 131.15000000 USD\nVolume: 39652.22195178\n---\nDate: 2025-04-16\nOpen: 126.10000000 USD\nHigh: 133.91000000 USD\nLow: 123.46000000 USD\nClose: 131.32000000 USD\nVolume: 1764240.04195810\n---\n```\n\n### get-crypto-weekly\n\nRetrieves weekly time series data for a cryptocurrency.\n\n**Input Schema:**\n```json\n{\n    \"symbol\": {\n        \"type\": \"string\",\n        \"description\": \"Cryptocurrency symbol (e.g., BTC, ETH)\"\n    },\n    \"market\": {\n        \"type\": \"string\",\n        \"description\": \"Market currency (e.g., USD, EUR)\",\n        \"default\": \"USD\"\n    }\n}\n```\n\n**Example Response:**\n```\nWeekly cryptocurrency time series for SOL in USD:\n\nWeekly Time Series for Solana (SOL)\nMarket: United States Dollar (USD)\nLast Refreshed: 2025-04-17 00:00:00 UTC\n\nDate: 2025-04-17\nOpen: 128.32000000 USD\nHigh: 136.00000000 USD\nLow: 123.46000000 USD\nClose: 131.15000000 USD\nVolume: 4823091.05667581\n---\nDate: 2025-04-13\nOpen: 105.81000000 USD\nHigh: 134.11000000 USD\nLow: 95.16000000 USD\nClose: 128.32000000 USD\nVolume: 18015328.38860037\n---\n```\n\n### get-crypto-monthly\n\nRetrieves monthly time series data for a cryptocurrency.\n\n**Input Schema:**\n```json\n{\n    \"symbol\": {\n        \"type\": \"string\",\n        \"description\": \"Cryptocurrency symbol (e.g., BTC, ETH)\"\n    },\n    \"market\": {\n        \"type\": \"string\",\n        \"description\": \"Market currency (e.g., USD, EUR)\",\n        \"default\": \"USD\"\n    }\n}\n```\n\n**Example Response:**\n```\nMonthly cryptocurrency time series for SOL in USD:\n\nMonthly Time Series for Solana (SOL)\nMarket: United States Dollar (USD)\nLast Refreshed: 2025-04-17 00:00:00 UTC\n\nDate: 2025-04-17\nOpen: 124.51000000 USD\nHigh: 136.18000000 USD\nLow: 95.16000000 USD\nClose: 131.15000000 USD\nVolume: 34268628.85976021\n---\nDate: 2025-03-31\nOpen: 148.09000000 USD\nHigh: 180.00000000 USD\nLow: 112.00000000 USD\nClose: 124.54000000 USD\nVolume: 42360395.75443056\n---\n```\n\n## Error Handling\n\nThe server includes comprehensive error handling for various scenarios:\n\n- Rate limit exceeded\n- Invalid API key\n- Network connectivity issues\n- Timeout handling\n- Malformed responses\n\nError messages are returned in a clear, human-readable format.\n\n## Prerequisites\n\n- Python 3.12 or higher\n- httpx\n- mcp\n\n## Contributors\n\n- [berlinbra](https://github.com/berlinbra)\n- [zzulanas](https://github.com/zzulanas)\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\nThis MCP server is licensed under the MIT License. \nThis means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vantage",
        "finance",
        "stock",
        "vantage api",
        "fetch stock",
        "stock crypto"
      ],
      "category": "finance--fintech"
    },
    "bitteprotocol--mcp": {
      "owner": "bitteprotocol",
      "name": "mcp",
      "url": "https://github.com/BitteProtocol/mcp",
      "imageUrl": "",
      "description": "Bitte Protocol integration to run AI Agents on several blockchains.",
      "stars": 13,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T10:22:11Z",
      "readme_content": "# MCP Proxy Monorepo\n\nThis monorepo contains MCP (Model Control Protocol) servers for different services.\n\n## Server URI\n`https://mcp.bitte.ai/sse`\n\n## Add to Curser Settings\n```\n{\n  \"mcpServers\": {\n    \"bitte-ai\": {\n      \"url\": \"https://mcp.bitte.ai/sse\"\n    }\n  }\n}\n```\n\n\n## Packages\n\n- **bitte-ai**: MCP server for Bitte AI integrations\n\n## Setup\n\nTo install dependencies:\n\n```bash\nbun install\n```\n\n## Development\n\nThis project uses Turborepo for managing the monorepo workflow and Biome for code quality tools.\n\n### Build all packages\n\n```bash\nbun run build\n```\n\n### Start both services\n\n```bash\nbun run start\n```\n\n### Development mode\n\n```bash\nbun run dev\n```\n\n### Format and lint your code\n\n```bash\nbun run check\n# To fix automatically:\nbun run check:fix\n```\n\n### Run individual services\n\n```bash\n# Run bitte-ai service\nbun run dev:bitte-ai\n```\n\n## Adding a new package\n\n1. Create a new directory in the `packages` folder\n2. Add the necessary package.json, tsconfig.json, and implementation files\n3. Update the root package.json and tsconfig.json to include your new package\n\nThis project uses [Bun](https://bun.sh) as the JavaScript runtime.\n\nFor more information: [Vibestreaming Logs](https://github.com/microchipgnu/vibestream)\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "blockchains",
        "agents",
        "agents blockchains",
        "fintech bitteprotocol",
        "mcp bitte"
      ],
      "category": "finance--fintech"
    },
    "carsol--monarch-mcp-server": {
      "owner": "carsol",
      "name": "monarch-mcp-server",
      "url": "https://github.com/carsol/monarch-mcp-server",
      "imageUrl": "",
      "description": "MCP server providing read-only access to Monarch Money financial data, enabling AI assistants to analyze transactions, budgets, accounts, and cashflow data with MFA support.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-20T20:09:39Z",
      "readme_content": "# Monarch Money MCP Server\n\nA Model Context Protocol (MCP) server that provides read-only access to Monarch Money financial data. This allows AI assistants like Claude Desktop to analyze your financial information, transactions, budgets, and cashflow data.\n\nNote: I've created this for personal fun and is not affiated with Monarch Money. I mostly created it for learning about my spending, using it for projections. Since I don't have any need to mutate any data it's currently READONLY.\n\nShout out to \n\n## Features\n\n- **Read-only access** to Monarch Money accounts\n- **Transaction analysis** with date filtering and search\n- **Budget tracking** and cashflow analysis\n- **Account details** including investment holdings\n- **Secure authentication** with MFA support\n- **Session persistence** to minimize re-authentication\n\n## Installation\n\n### Prerequisites\n\n- Python 3.13+\n- [uv](https://docs.astral.sh/uv/) package manager (recommended)\n- A Monarch Money account\n\n### Setup\n\n1. **Clone the repository:**\n\n2. **Install dependencies:**\n   ```bash\n   uv add mcp monarchmoney python-dotenv\n   ```\n\n3. **Configure environment variables:**\n   ```bash\n   cp .env.example .env\n   ```\n   \n   Edit `.env` with your Monarch Money credentials:\n   ```\n   MONARCH_EMAIL=your-email@example.com\n   MONARCH_PASSWORD=your-monarch-password\n   MONARCH_MFA_SECRET=your-mfa-secret-key  # Optional but recommended\n   ```\n\n4. **Test the connection:**\n   ```bash\n   python test_api.py\n   ```\n\n## Usage\n\n### Running the Server\n\nStart the MCP server:\n```bash\npython run_server.py\n```\n\n### Claude Desktop Integration\n\nAdd to your Claude Desktop configuration (`claude_desktop_config.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"monarch-money\": {\n      \"command\": \"python\",\n      \"args\": [\"/path/to/monarch-mcp-server/run_server.py\"],\n      \"env\": {\n        \"MONARCH_EMAIL\": \"your-email@example.com\",\n        \"MONARCH_PASSWORD\": \"your-password\",\n        \"MONARCH_MFA_SECRET\": \"your-mfa-secret\"\n      }\n    }\n  }\n}\n```\n\n## Available Resources\n\n- `monarch://accounts` - All linked accounts\n- `monarch://transactions/recent` - Last 100 transactions  \n- `monarch://budgets` - Budget information with actual vs target\n- `monarch://cashflow/summary` - Income, expenses, and savings summary\n\n## Available Tools\n\n- **get_transactions** - Get transactions with date range filtering\n- **get_account_details** - Detailed account information including holdings\n- **get_cashflow_analysis** - Cashflow analysis by category and time period\n- **search_transactions** - Search transactions by description or merchant\n- **get_categories** - All transaction categories\n- **get_institutions** - Linked financial institutions\n\n## Example Prompts\n\nOnce configured with Claude Desktop, you can ask:\n\n- \"Show me my recent transactions from last month\"\n- \"What's my current budget status?\"\n- \"Analyze my spending patterns by category\"\n- \"How much did I spend on groceries this year?\"\n- \"What are my investment account balances?\"\n\n## Security\n\n- **No write operations** - Server is read-only for safety\n- **Local credentials** - Your login details stay on your machine\n- **Session caching** - Reduces authentication frequency\n- **MFA support** - Two-factor authentication recommended\n\n## Troubleshooting\n\n### Authentication Issues\n\n1. **Run the debug script:**\n   ```bash\n   python debug_server.py\n   ```\n\n2. **Check environment variables:**\n   ```bash\n   python -c \"import os; print('Email:', bool(os.getenv('MONARCH_EMAIL'))); print('Password:', bool(os.getenv('MONARCH_PASSWORD')))\"\n   ```\n\n3. **Clear session cache:**\n   ```bash\n   rm -rf .mm/\n   ```\n\n### Common Issues\n\n- **MFA required**: Set `MONARCH_MFA_SECRET` environment variable\n- **Session expired**: Delete `.mm/` directory to force fresh login\n- **Import errors**: Ensure all dependencies installed with `uv add`\n\n## Development\n\n### Project Structure\n\n```\nmonarch-mcp-server/\n├── monarch_mcp_server.py     # Main MCP server implementation\n├── run_server.py             # Server launcher script\n├── debug_server.py           # Authentication debugging\n├── test_api.py              # API connection testing\n├── tests/                   # Unit tests\n│   ├── __init__.py\n│   └── test_monarch_mcp_server.py\n├── pyproject.toml           # Project dependencies\n├── .github/workflows/       # CI/CD workflows\n└── .env.example             # Environment template\n```\n\n### Testing\n\nInstall test dependencies:\n```bash\nuv sync --extra test\n```\n\nRun the unit test suite:\n```bash\nuv run pytest tests/ -v\n```\n\nRun tests with coverage:\n```bash\nuv run pytest tests/ --cov=monarch_mcp_server --cov-report=term\n```\n\nRun manual API test:\n```bash\npython test_api.py\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Make your changes\n4. Test thoroughly\n5. Submit a pull request\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.\n\n## Disclaimer\n\nThis project is not affiliated with Monarch Money. Use at your own risk and ensure compliance with Monarch Money's terms of service.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "finance",
        "mcp",
        "monarch mcp",
        "server mcp",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "chargebee--mcp": {
      "owner": "chargebee",
      "name": "mcp",
      "url": "https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol",
      "imageUrl": "",
      "description": "MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com/).",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chargebee",
        "mcp",
        "fintech",
        "fintech chargebee",
        "chargebee mcp",
        "agents chargebee"
      ],
      "category": "finance--fintech"
    },
    "codex-data--codex-mcp": {
      "owner": "codex-data",
      "name": "codex-mcp",
      "url": "https://github.com/Codex-Data/codex-mcp",
      "imageUrl": "",
      "description": "[Codex API](https://www.codex.io) integration for real-time enriched blockchain and market data on 60+ networks",
      "stars": 18,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T05:17:37Z",
      "readme_content": "# Codex MCP Server\n\nAn [MCP](https://modelcontextprotocol.org/) server that provides enriched blockchain data from [Codex](https://codex.io). This server can be used with any MCP-compatible client like [Claude Desktop](https://www.anthropic.com/news/claude-desktop).\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/codex-data/codex-mcp.git\ncd codex-mcp\n\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n```\n\n## Usage\n\nTo use the MCP Codex Server, you need to have a Codex API key. You can get your key from the [Codex Dashboard](https://dashboard.codex.io).\n\n### Using npx (No Installation Required)\n\nYou can run the MCP Codex Server directly without installation using npx:\n\n```bash\n# Run the server in stdio mode (for CLI tools)\nnpx @codex-data/codex-mcp\n```\n\n### Running the Server Locally\n\nStart the server using stdio (for embedding in CLI tools):\n\n```bash\npnpm start\n```\n\nFor development with auto-reload:\n\n```bash\npnpm dev\n```\n\n### Integration with Claude Desktop\n\n1. Open Claude Desktop settings\n2. Go to the Developer tab and click \"Edit Config\"\n3. Add a new server configuration:\n\nNo installation:\n\n```json\n{\n  \"mcpServers\": {\n    \"codex-data\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@codex-data/codex-mcp\"],\n      \"env\": {\n        \"CODEX_API_KEY\": \"<your-codex-api-key>\"\n      }\n    }\n  }\n}\n```\n\nLocal installation:\n\n```json\n{\n  \"mcpServers\": {\n    \"codex-data\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/codex-mcp/build/index.js\"],\n      \"env\": {\n        \"CODEX_API_KEY\": \"<your-codex-api-key>\"\n      }\n    }\n  }\n}\n```\n\n4. Replace `/path/to/codex-mcp` with the actual path to your installation\n5. Replace `<your-codex-api-key>` with your actual Codex API key\n\n### Connecting using Claude CLI\n\nIf you're using Claude CLI:\n\n```bash\n# Add the MCP server\nclaude mcp add codex-data -e CODEX_API_KEY=<your-codex-api-key> npx @codex-data/codex-mcp\n\n# Start Claude with the MCP server enabled\nclaude\n```\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "finance",
        "fintech",
        "enriched blockchain",
        "fintech codex",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "coinpaprika--dexpaprika-mcp": {
      "owner": "coinpaprika",
      "name": "dexpaprika-mcp",
      "url": "https://github.com/coinpaprika/dexpaprika-mcp",
      "imageUrl": "",
      "description": "Coinpaprika's DexPaprika MCP server exposes high-performance [DexPaprika API](https://docs.dexpaprika.com) covering 20+ chains and 5M+ tokens with real time pricing, liquidity pool data & historical OHLCV data, providing AI agents standardized access to comprehensive market data through Model Context Protocol.",
      "stars": 26,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T03:29:30Z",
      "readme_content": "# DexPaprika MCP Server\n\nA Model Context Protocol (MCP) server that provides on-demand access to DexPaprika's cryptocurrency and DEX data API. Built specifically for AI assistants like Claude to programmatically fetch real-time token, pool, and DEX data with zero configuration.\n\n## TL;DR\n\n```bash\n# Install globally\nnpm install -g dexpaprika-mcp\n\n# Start the server\ndexpaprika-mcp\n\n# Or run directly without installation\nnpx dexpaprika-mcp\n```\n\nDexPaprika MCP connects Claude to live DEX data across multiple blockchains. No API keys required. [Installation](#installation) | [Configuration](#claude-desktop-integration) | [API Reference](https://docs.dexpaprika.com/introduction)\n\n## 🚨 Version 1.1.0 Update Notice\n\n**Breaking Change**: The global `/pools` endpoint has been removed. If you're upgrading from v1.0.x, please see the [Migration Guide](#migration-from-v10x-to-v110) below.\n\n## What Can You Build?\n\n- **Token Analysis Tools**: Track price movements, liquidity depth changes, and volume patterns\n- **DEX Comparisons**: Analyze fee structures, volume, and available pools across different DEXes\n- **Liquidity Pool Analytics**: Monitor TVL changes, impermanent loss calculations, and price impact assessments\n- **Market Analysis**: Cross-chain token comparisons, volume trends, and trading activity metrics\n- **Portfolio Trackers**: Real-time value tracking, historical performance analysis, yield opportunities\n- **Technical Analysis**: Perform advanced technical analysis using historical OHLCV data, including trend identification, pattern recognition, and indicator calculations\n\n## Installation\n\n### Installing via Smithery\n\nTo install DexPaprika for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@coinpaprika/dexpaprika-mcp):\n\n```bash\nnpx -y @smithery/cli install @coinpaprika/dexpaprika-mcp --client claude\n```\n\n### Manual Installation\n```bash\n# Install globally (recommended for regular use)\nnpm install -g dexpaprika-mcp\n\n# Verify installation\ndexpaprika-mcp --version\n\n# Start the server\ndexpaprika-mcp\n```\n\nThe server runs on port 8010 by default. You'll see `MCP server is running at http://localhost:8010` when successfully started.\n\n## Video Tutorial\n\nWatch our step-by-step tutorial on setting up and using the DexPaprika MCP server:\n\n[![DexPaprika MCP Tutorial](https://img.youtube.com/vi/rIxFn2PhtvI/0.jpg)](https://www.youtube.com/watch?v=rIxFn2PhtvI)\n\n## Claude Desktop Integration\n\nAdd the following to your Claude Desktop configuration file:\n\n**macOS**: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`  \n**Windows**: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"dexpaprika\": {\n      \"command\": \"npx\",\n      \"args\": [\"dexpaprika-mcp\"]\n    }\n  }\n}\n```\n\nAfter restarting Claude Desktop, the DexPaprika tools will be available to Claude automatically.\n\n## Migration from v1.0.x to v1.1.0\n\n### ⚠️ Breaking Changes\n\nThe global `getTopPools` function has been **removed** due to API deprecation. \n\n### Migration Steps\n\n**Before (v1.0.x):**\n```javascript\n// This will no longer work\ngetTopPools({ page: 0, limit: 10, sort: 'desc', orderBy: 'volume_usd' })\n```\n\n**After (v1.1.0):**\n```javascript\n// Use network-specific queries instead\ngetNetworkPools({ network: 'ethereum', page: 0, limit: 10, sort: 'desc', orderBy: 'volume_usd' })\ngetNetworkPools({ network: 'solana', page: 0, limit: 10, sort: 'desc', orderBy: 'volume_usd' })\n\n// To query multiple networks, call getNetworkPools for each network\n// Or use the search function for cross-network searches\n```\n\n### Benefits of the New Approach\n\n- **Better Performance**: Network-specific queries are faster and more efficient\n- **More Relevant Results**: Get pools that are actually relevant to your use case\n- **Improved Scalability**: Better suited for handling large amounts of data across networks\n\n## Technical Capabilities\n\nThe MCP server exposes these specific endpoints Claude can access:\n\n### Network Operations\n\n| Function | Description | Example |\n|----------|-------------|---------|\n| `getNetworks` | Retrieves all supported blockchain networks and metadata | `{\"id\": \"ethereum\", \"name\": \"Ethereum\", \"symbol\": \"ETH\", ...}` |\n| `getNetworkDexes` | Lists DEXes available on a specific network | `{\"dexes\": [{\"id\": \"uniswap_v3\", \"name\": \"Uniswap V3\", ...}]}` |\n\n### Pool Operations\n\n| Function | Description | Required Parameters | Example Usage |\n|----------|-------------|---------------------|--------------|\n| `getNetworkPools` | **[PRIMARY]** Gets top pools on a specific network | `network`, `limit` | Get Solana's highest liquidity pools | \n| `getDexPools` | Gets top pools for a specific DEX | `network`, `dex` | List pools on Uniswap V3 |\n| `getPoolDetails` | Gets detailed pool metrics | `network`, `poolAddress` | Complete metrics for USDC/ETH pool |\n| `getPoolOHLCV` | Retrieves time-series price data for various analytical purposes (technical analysis, ML models, backtesting) | `network`, `poolAddress`, `start`, `interval` | 7-day hourly candles for SOL/USDC |\n| `getPoolTransactions` | Lists recent transactions in a pool | `network`, `poolAddress` | Last 20 swaps in a specific pool |\n\n### Token Operations\n\n| Function | Description | Required Parameters | Output Fields |\n|----------|-------------|---------------------|--------------|\n| `getTokenDetails` | Gets comprehensive token data | `network`, `tokenAddress` | `price_usd`, `volume_24h`, `liquidity_usd`, etc. |\n| `getTokenPools` | Lists pools containing a token | `network`, `tokenAddress` | Returns all pools with liquidity metrics |\n| `search` | Finds tokens, pools, DEXes by name/id | `query` | Multi-entity search results |\n\n### Example Usage\n\n```javascript\n// With Claude, get details about a specific token:\nconst solanaJupToken = await getTokenDetails({\n  network: \"solana\", \n  tokenAddress: \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\"\n});\n\n// Find all pools for a specific token with volume sorting:\nconst jupiterPools = await getTokenPools({\n  network: \"solana\", \n  tokenAddress: \"JUPyiwrYJFskUPiHa7hkeR8VUtAeFoSYbKedZNsDvCN\",\n  orderBy: \"volume_usd\",\n  limit: 5\n});\n\n// Get top pools on Ethereum (v1.1.0 approach):\nconst ethereumPools = await getNetworkPools({\n  network: \"ethereum\",\n  orderBy: \"volume_usd\",\n  limit: 10\n});\n\n// Get historical price data for various analytical purposes (technical analysis, ML models, backtesting):\nconst ohlcvData = await getPoolOHLCV({\n  network: \"ethereum\",\n  poolAddress: \"0x88e6a0c2ddd26feeb64f039a2c41296fcb3f5640\", // ETH/USDC on Uniswap V3\n  start: \"2023-01-01\",\n  interval: \"1d\",\n  limit: 30\n});\n```\n\n## Sample Prompts for Claude\n\nWhen working with Claude, try these specific technical queries (updated for v1.1.0):\n\n- \"Analyze the JUP token on Solana. Fetch price, volume, and top liquidity pools.\"\n- \"Compare trading volume between Uniswap V3 and SushiSwap on Ethereum.\"\n- \"Get the 7-day OHLCV data for SOL/USDC on Raydium and plot a price chart.\"\n- \"Find the top 5 pools by liquidity on Fantom network and analyze their fee structures.\"\n- \"Get recent transactions for the ETH/USDT pool on Uniswap and analyze buy vs sell pressure.\"\n- \"Show me the top 10 pools on Ethereum by 24h volume using getNetworkPools.\"\n- \"Search for all pools containing the ARB token and rank them by volume.\"\n- \"Retrieve OHLCV data for BTC/USDT to analyze volatility patterns and build a price prediction model.\"\n- \"First get all available networks, then show me the top pools on each major network.\"\n\n## Rate Limits & Performance\n\n- **Free Tier Limits**: 60 requests per minute\n- **Response Time**: 100-500ms for most endpoints (network dependent)\n- **Data Freshness**: Pool and token data updated every 15-30s\n- **Error Handling**: 429 status codes indicate rate limiting\n- **OHLCV Data Availability**: Historical data typically available from token/pool creation date\n\n## Troubleshooting\n\n**Common Issues:**\n\n- **Rate limiting**: If receiving 429 errors, reduce request frequency\n- **Missing data**: Some newer tokens/pools may have incomplete historical data\n- **Timeout errors**: Large data requests may take longer, consider pagination\n- **Network errors**: Check network connectivity, the service requires internet access\n- **OHLCV limitations**: Maximum range between start and end dates is 1 year; use pagination for longer timeframes\n\n**Migration Issues:**\n\n- **\"getTopPools not found\"**: This function has been removed. Use `getNetworkPools` instead with a specific network parameter\n- **\"410 Gone\" errors**: You're using a deprecated endpoint. Check the error message for guidance on the correct endpoint to use\n\n## Development\n\n```bash\n# Clone the repository\ngit clone https://github.com/coinpaprika/dexpaprika-mcp.git\ncd dexpaprika-mcp\n\n# Install dependencies\nnpm install\n\n# Run with auto-restart on code changes\nnpm run watch\n\n# Build for production\nnpm run build\n\n# Run tests\nnpm test\n```\n\n## Changelog\n\nSee [CHANGELOG.md](CHANGELOG.md) for detailed release notes and migration guides.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Additional Resources\n\n- [DexPaprika API Documentation](https://docs.dexpaprika.com/introduction)\n- [Model Context Protocol Specification](https://github.com/anthropics/anthropic-cookbook/blob/main/mcp/README.md)\n- [DexPaprika](https://dexpaprika.com) - Comprehensive onchain analytics market data\n- [CoinPaprika](https://coinpaprika.com) - Comprehensive cryptocurrency market data\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dexpaprika",
        "coinpaprika",
        "market",
        "dexpaprika api",
        "fintech coinpaprika",
        "dexpaprika mcp"
      ],
      "category": "finance--fintech"
    },
    "doggybee--mcp-server-ccxt": {
      "owner": "doggybee",
      "name": "mcp-server-ccxt",
      "url": "https://github.com/doggybee/mcp-server-ccxt",
      "imageUrl": "",
      "description": "An MCP server for accessing real-time crypto market data and trading via 20+ exchanges using the CCXT library. Supports spot, futures, OHLCV, balances, orders, and more.",
      "stars": 107,
      "forks": 21,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-23T09:08:58Z",
      "readme_content": "# CCXT MCP Server\n\n\n\n![Version](https://img.shields.io/badge/version-1.2.1-blue.svg)\n[![MCP Standard](https://img.shields.io/badge/MCP-Standard-green.svg)](https://www.modelcontextprotocol.org/)\n[![CCXT](https://img.shields.io/badge/CCXT-4.0.0-orange.svg)](https://github.com/ccxt/ccxt)\n[![smithery badge](https://smithery.ai/badge/@doggybee/mcp-server-ccxt)](https://smithery.ai/server/@doggybee/mcp-server-ccxt)\n\nHigh-performance cryptocurrency exchange integration using MCP (Model Context Protocol) and CCXT.\n\n## Features\n\n- 🚀 **Exchange Support**: Connects to 20+ cryptocurrency exchanges\n- 🔃 **Market Types**: Supports spot, futures, swap markets and more\n- 🔧 **Proxy Configuration**: Options for accessing exchanges through proxies\n- 📊 **Fast & Reliable**: Optimized caching and rate limiting\n- 🌐 **MCP Standard**: Compatible with LLMs like Claude and GPT via MCP\n\n## CCXT MCP Server Integration Architecture\n\n\n\nThe CCXT MCP Server connects language models to cryptocurrency exchanges through the Model Context Protocol. It serves as a bridge that allows LLMs to access real-time market data and execute trading operations across multiple exchanges through a unified API.\n\nThe architecture includes:\n- LLM clients (Claude and other MCP-compatible models) that send requests\n- The Model Context Protocol (MCP) that standardizes communication\n- The CCXT MCP Server that processes requests and manages exchange interactions\n- The CCXT Library that provides unified access to exchange APIs\n- Connections to multiple cryptocurrency exchanges\n\n## CCXT MCP Server Code Architecture\n\n\n\nThe server is organized into three main modules for better maintainability and extensibility:\n\n- **Exchange**: Manages exchange instances, credentials, and symbol validation\n- **Utils**: Provides caching, rate limiting, and logging functionality \n- **Tools**: Implements MCP tools and resources for exchange interaction\n\n## Quick Start\n\n### Installing via Smithery\n\nTo install mcp-server-ccxt for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@doggybee/mcp-server-ccxt):\n\n```bash\nnpx -y @smithery/cli install @doggybee/mcp-server-ccxt --client claude\n```\n\n### NPM Package (Recommended)\n\nYou can install CCXT MCP Server from npm:\n\n```bash\n# Install globally\nnpm install -g @mcpfun/mcp-server-ccxt\n\n# Start the server\nmcp-server-ccxt\n```\n\nOr run directly:\n\n```bash\nnpx @mcpfun/mcp-server-ccxt\n```\n\n### Manual Installation\n\nAlternatively, you can clone and build the repository:\n\n```bash\n# Clone the repository\ngit clone https://github.com/doggybee/mcp-server-ccxt.git\ncd mcp-server-ccxt\n\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Start the server\nnpm start\n```\n\n## Configuration\n\n1. Create an environment file\n   ```bash\n   cp .env.example .env\n   ```\n\n2. Edit the `.env` file to add your exchange API keys\n   ```\n   # Default exchange (optional)\n   DEFAULT_EXCHANGE=binance\n   \n   # Default market type (optional)\n   DEFAULT_MARKET_TYPE=spot \n   \n   # API credentials (optional)\n   BINANCE_API_KEY=your_api_key\n   BINANCE_SECRET=your_api_secret\n   # For exchanges requiring passphrase (e.g., KuCoin)\n   KUCOIN_API_KEY=your_kucoin_api_key\n   KUCOIN_SECRET=your_kucoin_secret\n   KUCOIN_PASSPHRASE=your_kucoin_passphrase\n   \n   # Proxy configuration (optional)\n   USE_PROXY=false\n   PROXY_URL=http://username:password@your-proxy-server:port\n   # Legacy format (still supported but recommended to use the integrated URL format above)\n   # PROXY_USERNAME=\n   # PROXY_PASSWORD=\n   ```\n\n## Usage\n\n> **Note**: If you encounter any issues with MCP communication, please see the [Troubleshooting Guide](docs/troubleshooting.md) for solutions.\n\n### Running the Server\n\nStart the server:\n\n```bash\n# If installed globally via npm\nmcp-server-ccxt\n\n# If installed manually\nnpm start\n```\n\n### Using with Claude for Desktop\n\n1. Add the server to your `claude_desktop_config.json`:\n\nIf installed via npm (globally):\n```json\n{\n  \"mcpServers\": {\n    \"ccxt\": {\n      \"command\": \"mcp-server-ccxt\"\n    }\n  }\n}\n```\n\nIf installed manually:\n```json\n{\n  \"mcpServers\": {\n    \"ccxt\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/mcp-server-ccxt/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\n2. Restart Claude for Desktop\n\n### Using as a Module in Another Project\n\nYou can also use this package as a module in your own Node.js projects:\n\n```javascript\n// Import the CCXT MCP Server\nimport '@mcpfun/mcp-server-ccxt';\n\n// The server starts automatically when imported\n// You can configure it through environment variables\n```\n\n## Example Queries\n\nHere are some example queries you can use with the MCP server:\n\n- \"What's the current price of Bitcoin on Binance?\"\n- \"Show me the order book for ETH/USDT on Coinbase\"\n- \"Get the 1-hour OHLCV data for BTC/USDT on Binance for the last 24 candles\"\n- \"Compare the price of SOL/USDT across different exchanges\"\n- \"What's my current balance on Binance?\" (requires API keys)\n- \"Place a market buy order for 0.1 ETH on Kraken\" (requires API keys)\n\n## Available Tools\n\n### Public API Tools\n\n- `list-exchanges`: List all available cryptocurrency exchanges\n- `get-ticker`: Get current ticker information for a trading pair\n- `batch-get-tickers`: Get ticker information for multiple trading pairs at once\n- `get-orderbook` / `get-order-book`: Get market order book for a trading pair\n- `get-ohlcv`: Get OHLCV candlestick data for a trading pair\n- `get-trades`: Get recent trades for a trading pair\n- `get-markets`: Get all available markets for an exchange\n- `get-exchange-info`: Get exchange information and status\n- `get-leverage-tiers`: Get futures leverage tiers\n- `get-funding-rates`: Get current funding rates\n- `get-positions`: Get open positions information\n- `get-open-orders`: Get all open orders\n- `get-order-history`: Get order history\n\n### Private API Tools (requires API keys)\n\n- `account-balance`: Get your account balance from a crypto exchange\n- `place-market-order`: Place a market order on an exchange\n- `place-limit-order`: Place a limit order on an exchange\n- `cancel-order`: Cancel an existing order\n- `cancel-all-orders`: Cancel all open orders\n- `set-leverage`: Set leverage for futures\n- `set-margin-mode`: Set margin mode for futures\n- `place-futures-market-order`: Place futures market orders\n- `place-futures-limit-order`: Place futures limit orders\n- `transfer-funds`: Transfer funds between accounts (e.g., spot to futures)\n\n### Configuration & Utility Tools\n\n- `cache-stats`: Get CCXT cache statistics\n- `clear-cache`: Clear CCXT cache\n- `set-log-level`: Set logging level\n- `get-proxy-config`: Get proxy settings\n- `set-proxy-config`: Configure proxy settings\n- `set-market-type`: Set default market type\n- `set-default-exchange`: Change the default exchange\n- `system-info`: Get system and environment information\n\n## Performance Optimizations\n\nMCP-CCXT includes several optimizations to ensure high performance:\n\n1. **LRU Caching System**:\n   - Different TTLs for different types of data\n   - Ticker data: 10 seconds\n   - Order book data: 5 seconds\n   - Market data: 1 hour\n\n2. **Adaptive Rate Limiting**:\n   - Automatically adjusts request rates based on exchange responses\n   - Implements exponential backoff for errors\n   - Manages concurrent requests per exchange\n\n3. **Exchange Connection Management**:\n   - Efficient initialization of exchange instances\n   - Proper error handling and retries\n\n## Security Best Practices\n\n### API Key Security\n\n1. **Create Dedicated API Keys**:\n   - Create separate API keys for different applications/purposes\n   - Never reuse API keys across different services or applications\n\n2. **Limit API Key Permissions**:\n   - Enable only the permissions you need (e.g., read-only for market data)\n   - Disable withdrawal permissions if you only need trading functionality\n   - Use IP whitelisting when available to restrict access to known IPs\n\n3. **Secure Storage**:\n   - Never commit API keys to version control systems\n   - Store API keys in environment variables or a secure vault\n   - Use `.env` files that are excluded from git via `.gitignore`\n\n## Risk Disclaimer\n\nThis software is provided for informational purposes only. Using this software to interact with cryptocurrency exchanges involves significant risks:\n\n- **Financial Risk**: Cryptocurrency trading involves risk of loss\n- **API Security**: Ensure your API keys have appropriate permission limits\n- **No Investment Advice**: This tool does not provide investment advice\n- **No Warranty**: The software is provided \"as is\" without warranty of any kind\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.txt](LICENSE.txt) file for details.\n\n## Copyright and Attribution\n\nThis project uses the CCXT library (https://github.com/ccxt/ccxt), which is:\n\n```\nCopyright (c) 2016-2024 CCXT developers\n```\n\nCCXT is released under the MIT License, which is included below:\n\n```\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n---\n\nFor issues, feature requests, or contributions, please visit [the GitHub repository](https://github.com/doggybee/mcp-server-ccxt).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ccxt",
        "fintech",
        "crypto",
        "server ccxt",
        "ccxt mcp",
        "using ccxt"
      ],
      "category": "finance--fintech"
    },
    "ferdousbhai--investor-agent": {
      "owner": "ferdousbhai",
      "name": "investor-agent",
      "url": "https://github.com/ferdousbhai/investor-agent",
      "imageUrl": "",
      "description": "Yahoo Finance integration to fetch stock market data including options recommendations",
      "stars": 263,
      "forks": 40,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T16:50:41Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ferdousbhai-investor-agent-badge.png)](https://mseep.ai/app/ferdousbhai-investor-agent)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/ferdousbhai/investor-agent)](https://archestra.ai/mcp-catalog/ferdousbhai__investor-agent)\n\n# investor-agent: A Financial Analysis MCP Server\n\n## Overview\n\nThe **investor-agent** is a Model Context Protocol (MCP) server that provides comprehensive financial insights and analysis to Large Language Models. It leverages real-time market data, fundamental and technical analysis to deliver:\n\n- **Market Movers:** Top gainers, losers, and most active stocks with support for different market sessions\n- **Ticker Analysis:** Company overview, news, metrics, analyst recommendations, and upgrades/downgrades\n- **Options Data:** Filtered options chains with customizable parameters\n- **Historical Data:** Price trends and earnings history\n- **Financial Statements:** Income, balance sheet, and cash flow statements\n- **Ownership Analysis:** Institutional holders and insider trading activity\n- **Earnings Calendar:** Upcoming earnings announcements with date filtering\n- **Market Sentiment:** CNN Fear & Greed Index, Crypto Fear & Greed Index, and Google Trends sentiment analysis\n- **Technical Analysis:** SMA, EMA, RSI, MACD, BBANDS indicators (optional)\n\nThe server integrates with [yfinance](https://pypi.org/project/yfinance/) for market data and automatically optimizes data volume for better performance.\n\n## Architecture & Performance\n\n**Robust Caching & Error Handling Strategy:**\n\n1. **`yfinance[nospam]`** → Built-in smart caching + rate limiting for Yahoo Finance API\n2. **`hishel`** → HTTP response caching for external APIs (CNN, crypto, earnings data)\n3. **`tenacity`** → Retry logic with exponential backoff for transient failures\n\nThis multi-layered approach ensures reliable data delivery while respecting API rate limits and minimizing redundant requests.\n\n## Prerequisites\n\n- **Python:** 3.12 or higher\n- **Package Manager:** [uv](https://docs.astral.sh/uv/). Install if needed:\n  ```bash\n  curl -LsSf https://astral.sh/uv/install.sh | sh\n  ```\n\n### Optional Dependencies\n\n- **TA-Lib C Library:** Required for technical indicators. Follow [official installation instructions](https://ta-lib.org/install/).\n\n## Installation\n\n### Quick Start\n\n```bash\n# Core features only\nuvx investor-agent\n\n# With technical indicators (requires TA-Lib)\nuvx \"investor-agent[ta]\"\n\n```\n\n## Tools\n\n### Market Data\n- **`get_market_movers(category=\"most-active\", count=25, market_session=\"regular\")`** - Market movers data including top gainers, losers, or most active stocks. Supports different market sessions (regular/pre-market/after-hours) for most-active category. Returns up to 100 stocks with cleaned percentage changes, volume, and market cap data\n- **`get_ticker_data(ticker, max_news=5, max_recommendations=5, max_upgrades=5)`** - Comprehensive ticker report with essential field filtering and configurable limits for news, analyst recommendations, and upgrades/downgrades\n- **`get_options(ticker_symbol, num_options=10, start_date=None, end_date=None, strike_lower=None, strike_upper=None, option_type=None)`** - Options data with advanced filtering by date range (YYYY-MM-DD), strike price bounds, and option type (C=calls, P=puts)\n- **`get_price_history(ticker, period=\"1mo\")`** - Historical OHLCV data with intelligent interval selection: daily intervals for periods ≤1y, monthly intervals for periods ≥2y to optimize data volume\n- **`get_financial_statements(ticker, statement_types=[\"income\"], frequency=\"quarterly\", max_periods=8)`** - Financial statements with parallel fetching support. Returns dict with statement type as key\n- **`get_institutional_holders(ticker, top_n=20)`** - Major institutional and mutual fund holders data\n- **`get_earnings_history(ticker, max_entries=8)`** - Historical earnings data with configurable entry limits\n- **`get_insider_trades(ticker, max_trades=20)`** - Recent insider trading activity with configurable trade limits\n- **`get_nasdaq_earnings_calendar(date=None, limit=100)`** - Upcoming earnings announcements using Nasdaq API (YYYY-MM-DD format, defaults to today).\n\n### Market Sentiment\n- **`get_cnn_fear_greed_index(indicators=None)`** - CNN Fear & Greed Index with selective indicator filtering. Available indicators: fear_and_greed, fear_and_greed_historical, put_call_options, market_volatility_vix, market_volatility_vix_50, junk_bond_demand, safe_haven_demand\n- **`get_crypto_fear_greed_index()`** - Current Crypto Fear & Greed Index with value, classification, and timestamp\n- **`get_google_trends(keywords, period_days=7)`** - Google Trends relative search interest for market-related keywords. Requires a list of keywords to track (e.g., [\"stock market crash\", \"bull market\", \"recession\", \"inflation\"]). Returns relative search interest scores that can be used as sentiment indicators.\n\n### Technical Analysis\n- **`calculate_technical_indicator(ticker, indicator, period=\"1y\", timeperiod=14, fastperiod=12, slowperiod=26, signalperiod=9, nbdev=2, matype=0, num_results=100)`** - Calculate technical indicators (SMA, EMA, RSI, MACD, BBANDS) with configurable parameters and result limiting. Returns dictionary with price_data and indicator_data as CSV strings. matype values: 0=SMA, 1=EMA, 2=WMA, 3=DEMA, 4=TEMA, 5=TRIMA, 6=KAMA, 7=MAMA, 8=T3. Requires TA-Lib library.\n\n## Usage with MCP Clients\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"investor\": {\n      \"command\": \"uvx\",\n      \"args\": [\"investor-agent\"]\n    }\n  }\n}\n```\n\n## Local Testing\n\nFor local development and testing, use the included `chat.py` script:\n\n```bash\n# Install dev dependencies\nuv sync --group dev\n\n# Set up your API key\nexport OPENAI_API_KEY=\"your-api-key\"  # or ANTHROPIC_API_KEY, GEMINI_API_KEY, etc.\n\n# Optional: Set custom model (defaults to openai:gpt-5-mini)\nexport MODEL_IDENTIFIER=\"your-preferred-model\"\n\n# Run the chat interface\npython chat.py\n```\n\nFor available model providers and identifiers, see the [pydantic-ai documentation](https://ai.pydantic.dev/models/).\n\n## Debugging\n\n```bash\nnpx @modelcontextprotocol/inspector uvx investor-agent\n```\n\n## License\n\nMIT License. See [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "investor",
        "finance",
        "market",
        "yahoo finance",
        "ferdousbhai investor",
        "fintech ferdousbhai"
      ],
      "category": "finance--fintech"
    },
    "ferdousbhai--tasty-agent": {
      "owner": "ferdousbhai",
      "name": "tasty-agent",
      "url": "https://github.com/ferdousbhai/tasty-agent",
      "imageUrl": "",
      "description": "Tastyworks API integration to handle trading activities on Tastytrade",
      "stars": 39,
      "forks": 11,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T12:20:40Z",
      "readme_content": "# tasty-agent: A TastyTrade MCP Server\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/ferdousbhai/tasty-agent)](https://archestra.ai/mcp-catalog/ferdousbhai__tasty-agent)\n\nA Model Context Protocol server for TastyTrade brokerage accounts. Enables LLMs to monitor portfolios, analyze positions, and execute trades. Features AI-powered trade idea generation, automated IV analysis prompts, and built-in rate limiting (2 requests/second) to prevent API errors.\n\n## Authentication\n\n**OAuth Setup**:\n1. Create an OAuth app at https://my.tastytrade.com/app.html#/manage/api-access/oauth-applications\n2. Check all scopes, save your client ID and client secret  \n3. Create a \"New Personal OAuth Grant\" in your OAuth app settings (check all scopes)\n4. Copy the generated refresh token\n5. Configure the MCP server with your credentials (see Usage section below)\n\n## MCP Tools\n\n### Account & Portfolio\n- **`get_balances()`** - Account balances and buying power\n- **`get_positions()`** - All open positions with current values\n- **`get_net_liquidating_value_history(time_back='1y')`** - Portfolio value history ('1d', '1m', '3m', '6m', '1y', 'all')\n- **`get_transaction_history(days=90, underlying_symbol=None, transaction_type=None)`** - All transactions: trades + cash flows (default: last 90 days, transaction_type: 'Trade' or 'Money Movement')\n- **`get_order_history(days=7, underlying_symbol=None)`** - Order history including filled, canceled, and rejected orders (default: last 7 days)\n\n### Market Data & Research\n- **`get_quotes(instruments, timeout=10.0)`** - Real-time quotes for multiple stocks and/or options via DXLink streaming\n- **`get_greeks(options, timeout=10.0)`** - Greeks (delta, gamma, theta, vega, rho) for multiple options via DXLink streaming\n- **`get_market_metrics(symbols)`** - IV rank, percentile, beta, liquidity for multiple symbols\n- **`market_status(exchanges=['Equity'])`** - Market hours and status ('Equity', 'CME', 'CFE', 'Smalls')\n- **`search_symbols(symbol)`** - Search for symbols by name/ticker\n- **`get_current_time_nyc()`** - Current time in New York timezone (market time)\n\n### Order Management\n- **`get_live_orders()`** - Currently active orders\n- **`place_order(legs, price=None, time_in_force='Day', dry_run=False)`** - Place multi-leg orders with automatic price discovery from market quotes\n  - **Stock actions**: 'Buy', 'Sell'\n  - **Option actions**: 'Buy to Open', 'Buy to Close', 'Sell to Open', 'Sell to Close'\n- **`replace_order(order_id, price)`** - Modify existing order price (for complex changes, cancel and place new order)\n- **`delete_order(order_id)`** - Cancel orders by ID\n\n### Watchlist Management\n- **`get_watchlists(watchlist_type='private', name=None)`** - Get watchlists ('public'/'private', all if name=None)\n- **`manage_private_watchlist(action, symbols, name='main')`** - Add/remove multiple symbols from private watchlists\n- **`delete_private_watchlist(name)`** - Delete private watchlist\n\n### AI-Powered Analysis\n- **`generate_trade_ideas(focus_symbols=None, risk_tolerance='moderate', max_ideas=5)`** - Generate specific, actionable trade ideas using AI analysis of current positions, watchlists, market metrics, and volatility environment\n\n### MCP Prompts\n- **IV Rank Analysis** - Automated prompt to analyze IV rank extremes across positions and watchlists for entry/exit opportunities\n\n## Key Features\n\n### Smart Order Placement\n- Automatic price calculation from real-time market quotes when no price specified\n- Multi-leg options strategies (spreads, strangles, etc.) with single function call\n- Dry-run mode for testing orders without execution\n\n### AI-Powered Trading Assistant\n- **Trade Idea Generation**: Uses AI to analyze current positions, watchlists, market metrics, and volatility to generate specific actionable trade ideas\n- **IV Analysis Prompts**: Pre-built prompts to identify extreme IV rank conditions for entry/exit opportunities\n- Risk-adjusted suggestions based on conservative/moderate/aggressive tolerance levels\n\n### Rate Limiting & Reliability\n- Built-in rate limiting (2 requests/second) prevents API throttling\n- Comprehensive error handling and logging\n\n### MCP Client Configuration\n\nAdd to your MCP client configuration (e.g., `claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"tastytrade\": {\n      \"command\": \"uvx\",\n      \"args\": [\"tasty-agent\"],\n      \"env\": {\n        \"TASTYTRADE_CLIENT_SECRET\": \"your_client_secret\",\n        \"TASTYTRADE_REFRESH_TOKEN\": \"your_refresh_token\",\n        \"TASTYTRADE_ACCOUNT_ID\": \"your_account_id\"\n      }\n    }\n  },\n  \"capabilities\": {\n    \"sampling\": {}\n  }\n}\n```\n\n*Note: The `sampling` capability enables AI-powered trade analysis features. Currently supported in VS Code, not yet in Claude Desktop.*\n\n## Examples\n\n```\n\"Get my account balances and current positions\"\n\"Get real-time quotes for SPY and AAPL\"\n\"Get quotes for TQQQ C option with strike 100 expiring 2026-01-16\"\n\"Get Greeks for AAPL P option with strike 150 expiring 2024-12-20\"\n\"Buy 100 AAPL shares\" (auto-pricing)\n\"Buy 100 AAPL at $150\"\n\"Buy to open 17 TQQQ calls, strike 100, exp 2026-01-16\"\n\"Place a call spread: buy to open AAPL 150C and sell to open AAPL 155C, both exp 2024-12-20\"\n\"Close my AAPL position: sell to close 10 AAPL calls\"\n\"Modify order 12345 to price $10.05\"\n\"Cancel order 12345\"\n\"Get my trading history from January\"\n\"Get my private watchlists\"\n\"Add TSLA and NVDA to my tech watchlist\"\n\"Remove AAPL from my tech watchlist\"\n\"Generate trade ideas for my portfolio\"\n\"Generate aggressive trade ideas for AAPL and TSLA\"\n```\n\n## Background Trading Bot\n\nRun automated trading strategies:\n\n```bash\n# Run once with instructions\nuv run background.py \"Check my portfolio and rebalance if needed\"\n\n# Run every hour\nuv run background.py \"Monitor SPY and alert on significant moves\" --hourly\n\n# Run every day\nuv run background.py \"Generate daily portfolio summary\" --daily\n\n# Custom period (seconds)\nuv run background.py \"Scan for covered call opportunities\" --period 1800  # every 30 minutes\n\n# Schedule start time (NYC timezone)\nuv run background.py \"Execute morning trading strategy\" --schedule \"9:30am\" --hourly\n\n# Market open shorthand (9:30am)\nuv run background.py \"Buy the dip strategy\" --market-open --hourly\n```\n\n## Development\n\n### Testing with chat.py\n\nFor interactive testing during development:\n```bash\n# Set up environment variables in .env file:\n# TASTYTRADE_CLIENT_SECRET=your_secret\n# TASTYTRADE_REFRESH_TOKEN=your_token\n# TASTYTRADE_ACCOUNT_ID=your_account_id (defaults to the first account)\n# OPENAI_API_KEY=your_openai_key (you can provide alternative provider of your choice as supported by pydantic-ai)\n# MODEL_IDENTIFIER=model_provider:model_name (defaults to openai:gpt-5-mini)\n\n\n# Run the interactive client\nuv run chat.py\n```\n\nThe client provides a chat interface to test MCP tools directly. Example commands:\n- \"Get my account balances\"\n- \"Get quote for SPY\" \n- \"Place dry-run order: buy 100 AAPL at $150\"\n\n### Debug with MCP inspector\n\n```bash\nnpx @modelcontextprotocol/inspector uvx tasty-agent\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tastyworks",
        "tastytrade",
        "api",
        "tastyworks api",
        "agent tastyworks",
        "tasty agent"
      ],
      "category": "finance--fintech"
    },
    "ferdousbhai--wsb-analyst-mcp": {
      "owner": "ferdousbhai",
      "name": "wsb-analyst-mcp",
      "url": "https://github.com/ferdousbhai/wsb-analyst-mcp",
      "imageUrl": "",
      "description": "Reddit integration to analyze content on WallStreetBets community",
      "stars": 16,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-26T13:34:52Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ferdousbhai-wsb-analyst-mcp-badge.png)](https://mseep.ai/app/ferdousbhai-wsb-analyst-mcp)\n\n# WSB Analyst MCP Server\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/ferdousbhai/wsb-analyst-mcp)](https://archestra.ai/mcp-catalog/ferdousbhai__wsb-analyst-mcp)\n[![smithery badge](https://smithery.ai/badge/@ferdousbhai/wsb-analyst-mcp)](https://smithery.ai/server/@ferdousbhai/wsb-analyst-mcp)\n\nA Model Context Protocol (MCP) server that provides real-time WallStreetBets data for analysis with Claude or other LLM clients.\n\n<a href=\"https://glama.ai/mcp/servers/@ferdousbhai/wsb-analyst-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@ferdousbhai/wsb-analyst-mcp/badge\" alt=\"WSB Analyst Server MCP server\" />\n</a>\n\n## Features\n\n- **Fetch WallStreetBets Posts**: Filter posts by score, comment count, and content type\n- **Detailed Post Analysis**: Extract comments, links, and metadata from posts\n- **External Link Collection**: Gather links being shared in WSB discussions\n- **Analysis Templates**: Ready-to-use prompt templates for market analysis\n- **Progress Reporting**: Real-time progress updates during data collection\n- **MCP Integration**: Seamless integration with Claude Desktop and other MCP clients\n\n## Requirements\n\n- Python 3.12 or higher\n- Reddit API credentials\n- [Claude Desktop](https://claude.ai/download) or another MCP client\n\n## Installation\n\n### Installing via Smithery\n\nTo install WSB Analyst for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@ferdousbhai/wsb-analyst-mcp):\n\n```bash\nnpx -y @smithery/cli install @ferdousbhai/wsb-analyst-mcp --client claude\n```\n\nClone this repository or download the source files:\n\n```bash\ngit clone https://github.com/ferdousbhai/wsb-analyst-mcp\ncd wsb-analyst-mcp\n```\n\nCreate a virtual environment and install dependencies:\n\n```bash\n# Using uv (recommended)\nuv sync\n```\n\n## Setting Up Reddit API Credentials\n\nTo use this server, you need to create a Reddit application to get API credentials:\n\n1. Log in to your Reddit account\n2. Navigate to [https://www.reddit.com/prefs/apps](https://www.reddit.com/prefs/apps)\n3. Scroll down and click \"create another app...\" or \"create an app...\"\n4. Fill in the following details:\n   - **name**: WSB Analyst MCP (or any name you prefer)\n   - **app type**: select \"script\"\n   - **description**: Optional description of your application\n   - **about url**: Can be left blank\n   - **redirect uri**: Use `http://localhost:8000` (any valid URL works as we don't use OAuth)\n5. Click \"create app\"\n6. After creation, note down:\n   - **client_id**: The string under the app name (appears right under \"personal use script\")\n   - **client_secret**: The string labeled \"secret\"\n\n## Configuration for Claude Desktop\n\nOpen Claude Desktop's configuration file:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nAdd the following configuration (adjust paths as needed):\n\n```json\n{\n  \"mcpServers\": {\n    \"wsb-analyst\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"run\",\n        \"wsb-analyst\"\n      ],\n      \"env\": {\n        \"REDDIT_CLIENT_ID\": \"your_client_id_here\",\n        \"REDDIT_CLIENT_SECRET\": \"your_client_secret_here\"\n      }\n    }\n  }\n}\n```\n\nRestart Claude Desktop\n\n## Using with Claude Desktop\n\nOnce configured, you can interact with the WSB Analyst server through Claude:\n\n1. Open Claude Desktop\n2. You should see a hammer icon in the bottom right corner of the message input box\n3. Click the hammer to see available tools\n4. Access prompt templates via slash commands (e.g., `/analyze_wsb_market`)\n\nExample queries:\n\n- \"What are the top trending stocks on WallStreetBets today?\"\n- \"Analyze recent WallStreetBets posts and tell me about potential market opportunities\"\n- \"What external resources are WSB users sharing about AMD stock?\"\n\n## Available Tools\n\n### `find_top_posts`\n\nFetch and filter WSB posts based on criteria.\n\nParameters:\n\n- `min_score` (default: 100): Minimum score (upvotes) required\n- `min_comments` (default: 10): Minimum number of comments required\n- `limit` (default: 10): Maximum number of posts to return\n- `excluded_flairs` (default: `[\"Meme\", \"Shitpost\", \"Gain\", \"Loss\"]`): List of post flairs to exclude.\n\n### `fetch_post_details`\n\nFetch detailed information about a specific WSB post including top comments.\n\nParameters:\n\n- `post_id`: Reddit post ID\n\n### `fetch_batch_post_details`\n\nFetches details for multiple posts efficiently.\n\n### `fetch_detailed_wsb_posts`\n\nFetch and filter WSB posts, then get detailed information including top comments and links for each.\n\n### `get_external_links`\n\nCollects all external links from top posts.\n\n### `get_trending_tickers`\n\nIdentifies and returns a list of stock tickers frequently mentioned or discussed in recent top WSB posts.\n\n## Prompt Templates\n\n### `/analyze_wsb_market`\n\nProvides a template prompt to guide an LLM in performing a comprehensive market analysis using the available tools (`fetch_detailed_wsb_posts`, `get_external_links`). It instructs the LLM on the structure and focus of the analysis.\n\n### `/find_market_movers`\n\nCreates a prompt focused on what's moving specific stocks or the overall market. This prompt guides the LLM to use tools like `find_top_posts` and `fetch_post_details` or `fetch_batch_post_details`.\n\n## Integrating with Firecrawl MCP Server\n\nFor enhanced analysis capabilities, especially when dealing with external links found in WSB posts, you can integrate this server with the [Firecrawl MCP Server](https://github.com/mendableai/firecrawl-mcp-server). This allows your LLM agent to not only identify links shared on WSB but also scrape and analyze the content of those linked pages.\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "wallstreetbets",
        "finance",
        "wallstreetbets community",
        "content wallstreetbets",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "getAlby--mcp": {
      "owner": "getAlby",
      "name": "mcp",
      "url": "https://github.com/getAlby/mcp",
      "imageUrl": "",
      "description": "Connect any bitcoin lightning wallet to your agent to send and receive instant payments globally.",
      "stars": 33,
      "forks": 8,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-02T12:37:37Z",
      "readme_content": "# Alby Bitcoin Payments MCP Server\n\nConnect a bitcoin lightning wallet to your LLM using Nostr Wallet Connect ([NWC](https://nwc.dev)).\n\nThis MCP server uses the [official MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n\nThis MCP server has knowledge of [NWC](https://nwc.dev/), [LNURL](https://github.com/lnurl/luds) and [L402](https://docs.lightning.engineering/the-lightning-network/l402) using [Alby SDK](https://github.com/getAlby/js-sdk) and [Alby Lightning Tools](https://github.com/getAlby/js-lightning-tools).\n\n<a href=\"https://glama.ai/mcp/servers/@getAlby/mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@getAlby/mcp/badge\" />\n</a>\n\n## Quick Start\n\n> In case you get stuck, see troubleshooting section below.\n\n### Use the Alby-Hosted MCP Server\n\nIf your agent supports remote MCP servers - SSE (e.g. N8N) or HTTP Streamable transports, you can connect to Alby's MCP server.\n\n- SSE: `https://mcp.getalby.com/sse`\n- HTTP Streamable: `https://mcp.getalby.com/mcp`\n\n#### Authentication\n\nBoth require providing an NWC connection secret as authentication, either as `Bearer` authentication (preferred) or via the `nwc` query parameter.\n\n##### Bearer Auth\n\nExample: `Authorization: Bearer nostr+walletconnect://...`\n\n> If your agent UI supports bearer auth, just paste the connection secret into the bearer auth field.\n\n##### Query Parameter\n\nIf your agent doesn't support bearer auth, you can pass the NWC connection secret as a query parameter.\n\nExample: `https://mcp.getalby.com/sse?nwc=ENCODED_CONNECTION_SECRET` or `https://mcp.getalby.com/mcp?nwc=ENCODED_CONNECTION_SECRET`\n\n_To get ENCODED_CONNECTION_SECRET, open browser devtools (right click -> inspect) and enter this in the console, with your own NWC connection secret set:_\n\n```js\nencodeURIComponent(\"nostr+walletconnect://...\");\n```\n\nIn case there is a message asking for confirmation for pasting, follow the instructions, and then enter the above command again.\n\nOnce the command has run, copy the output and replace ENCODED_CONNECTION_SECRET. It will look like this: `nostr%2Bwalletconnect%3A%2F%2F...`\n\n### Add to Claude Web or Claude Desktop\n\n#### Use the remote Alby MCP server\n\nCurrently, at least a Claude Pro subscription is required to be able to connect to remote MCP servers.\n\n1. Go to Settings -> Integrations\n2. Click on \"Add Integration\"\n3. Call it `alby`\n4. What is the endpoint URI: `https://mcp.getalby.com/mcp?nwc=ENCODED_NWC_URL` (see above for instructions)\n\n#### Client-side\n\nAdd this to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"nwc\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@getalby/mcp\"],\n      \"env\": {\n        \"NWC_CONNECTION_STRING\": \"YOUR NWC CONNECTION STRING HERE\"\n      }\n    }\n  }\n}\n```\n\n### Add to Goose Desktop\n\n1. Open Goose Desktop\n2. Go To Settings -> Advanced Settings\n3. Click on \"Add custom Extension\"\n4. Call it `alby`, and change the type to `HTTP Streamable`\n5. What is the SSE endpoint URI: `https://mcp.getalby.com/mcp`\n6. Timeout: 30\n7. Description: no\n8. environment variables: no\n\n### Add to Goose CLI\n\n#### Use the Alby MCP server\n\n1. Type `goose configure`\n2. Add extension -> Remote Extension (HTTP Streamable)\n3. Call it `alby`\n4. What is the HTTP Streamable endpoint URI: `https://mcp.getalby.com/mcp`\n5. Timeout: 30\n6. Description: no\n7. environment variables: no\n8. add custom headers: yes\n9. header name: `Authorization`\n10. header value: `Bearer nostr+walletconnect://...` (replace with your connection secret)\n\n#### Client-side\n\n1. Type `goose configure`\n2. Add extension -> Command Line Extension\n3. Call it `alby`\n4. What command should be run: `npx -y @getalby/mcp`\n5. Timeout: 30\n6. Description: no\n7. environment variables: yes\n8. environment variable name: `NWC_CONNECTION_STRING`\n9. environment variable value: `nostr+walletconnect://...` (your NWC connection secret here)\n\n### Add to Cline\n\n> Copy the below and paste it into a cline prompt. It should prompt you to update the connection string.\n\n```json\nAdd the following to my MCP servers list:\n\n\"nwc\": {\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@getalby/mcp\"],\n  \"env\": {\n    \"NWC_CONNECTION_STRING\": \"nostr+walletconnect://...\"\n  },\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\n### Add to Claude Code\n\n#### Use the Alby MCP server\n\n```bash\nclaude mcp add --transport http alby https://mcp.getalby.com/mcp --header \"Authorization: Bearer nostr+walletconnect://...\"\n```\n\n### Add to N8N via SSE\n\nYou can use the native N8N MCP Client tool connected to an AI agent. Enter your SSE endpoint, set authentication to \"Bearer\" and paste your NWC connection secret.\n\nTested with OpenRouter + anthropic/claude-3.7-sonnet\n\nSee the [N8N workflow](examples/n8n-sse) for a simple example\n\n### Add to N8N via STDIO (Community Node)\n\nCurrently this MCP server only works via command line (STDIO).\n\nYou can install the [n8n-nodes-mcp](https://github.com/nerding-io/n8n-nodes-mcp) community node and run n8n with tools enabled e.g.\n\n```bash\nN8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true npx n8n\n```\n\nCreate a blank workflow and add an AI agent node. Configure your LLM model and add a new tool \"MCP Client\" (which will have a cube next to it showing it's a community node).\n\nConfigure the MCP Client by adding a credential with Command Line (STDIO) selected.\n\ncommand: `npx`\narguments: `-y @getalby/mcp`\nenvironments `NWC_CONNECTION_STRING=nostr+walletconnect://your_key_here` (create the whole line in a text editor and paste it in, since the password field cannot be switched to plaintext)\n\nSee the [N8N paid chat workflow](examples/n8n-paid-chat-stdio) for a full example\n\n### Add to Windsurf\n\n#### Use the remote Alby MCP server\n\n1. Download and open your Windsurf Editor\n2. Click on \"Windsurf - Settings\" in the toolbar at the bottom -> \"Advanced Settings\" -> \"Cascade\" -> Plugins (MCP Servers): Click on \"Manage plugins\" -> \"View raw config\" -> you'll see your \"mcp_config.json\"\n3. Paste this to your mcp_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"alby\": {\n      \"serverUrl\": \"https://mcp.getalby.com/sse?nwc=ENCODED_NWC_URL\"\n    }\n  }\n}\n```\n\n4. Replace \"ENCODED_NWC_URL\" as descripted above. Click \"Save\" and restart the Windsurf editor.\n\n## Modes\n\n### STDIO\n\nBy default NWC MCP Server runs locally in `STDIO` mode.\n\n### HTTP\n\nYou can set the following environment variable: `MODE=HTTP` which will enable Streamable HTTP (`http://localhost:3000/mcp`) and SSE (`http://localhost:3000/sse` Note: SSE is deprecated).\n\nHTTP requires bearer authorization, where the token is a wallet's NWC connection secret. See the authentication section further above in the README.\n\n## From Source\n\n### Prerequisites\n\n- Node.js 20+\n- Yarn\n- A connection string from a lightning wallet that supports NWC\n\n### Installation\n\n```bash\nyarn install\n```\n\n### Building\n\n```bash\nyarn build\n```\n\n### Add your NWC connection\n\nCopy `.env.example` to `.env` and update your connection string\n\n### Inspect the tools (use/test without an LLM)\n\n`yarn inspect`\n\n### Supported Tools\n\nSee the [tools directory](./src/tools)\n\n## Troubleshooting\n\n### Model Usage\n\nMake sure you use a decent model (e.g. Claude Sonnet 3.7) otherwise the MCP server will not work.\n\n### Failure to connect to wallet, secret missing\n\nMake sure you copied the entire NWC connection secret, without spaces\n\n### Contact Alby Support\n\nVisit [support.getalby.com](https://support.getalby.com) and we're happy to help you get the MCP server working.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "payments",
        "fintech getalby",
        "mcp connect",
        "getalby mcp"
      ],
      "category": "finance--fintech"
    },
    "getalby--nwc-mcp-server": {
      "owner": "getalby",
      "name": "nwc-mcp-server",
      "url": "https://github.com/getalby/nwc-mcp-server",
      "imageUrl": "",
      "description": "Bitcoin Lightning wallet integration powered by Nostr Wallet Connect",
      "stars": 12,
      "forks": 5,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-01T06:54:53Z",
      "readme_content": "# ⚠️ DEPRECATED ⚠️\n\n**Please use [Alby MCP](https://github.com/getAlby/mcp/) instead!** \n\nThis repository has been deprecated in favor of Alby MCP, which includes all the NWC tools along with additional Lightning tools.\n\n# NWC MCP Server\n\nConnect a bitcoin lightning wallet to your LLM using Nostr Wallet Connect ([NWC](https://nwc.dev/) or [NIP-47](https://github.com/nostr-protocol/nips/blob/master/47.md)).\n\nThis MCP server uses the [official MCP TypeScript SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n\n> See also the [Alby MCP server](https://github.com/getAlby/mcp) which includes additional useful tools.\n\n## Quick Start\n\n### Use the Alby-Hosted MCP Server\n\nIf your agent supports SSE (e.g. N8N) or HTTP Streamable transports, you can connect to Alby's MCP server.\n\n- SSE: `https://mcp.getalby.com/sse`\n- HTTP Streamable: `https://mcp.getalby.com/mcp`\n\nBoth require providing an NWC connection secret as `Bearer` authentication.\n\n### Add to Claude Desktop\n\nAdd this to your claude_desktop_config.json:\n\n```json\n{\n  \"mcpServers\": {\n    \"nwc\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@getalby/nwc-mcp-server\"],\n      \"env\": {\n        \"NWC_CONNECTION_STRING\": \"YOUR NWC CONNECTION STRING HERE\"\n      }\n    }\n  }\n}\n```\n\n### Add to Goose\n\n1. Type `goose configure`\n2. Add extension -> Command Line Extension\n3. Call it `nwc`\n4. What command should be run: `npx -y @getalby/nwc-mcp-server`\n5. Timeout: 30\n6. Description: no\n7. environment variables: yes\n8. environment variable name: `NWC_CONNECTION_STRING`\n9. environment variable value: `nostr+walletconnect://...` (your NWC connection secret here)\n\n### Add to Cline\n\n> Copy the below and paste it into a cline prompt. It should prompt you to update the connection string.\n\n```json\nAdd the following to my MCP servers list:\n\n\"nwc\": {\n  \"command\": \"npx\",\n  \"args\": [\"-y\", \"@getalby/nwc-mcp-server\"],\n  \"env\": {\n    \"NWC_CONNECTION_STRING\": \"nostr+walletconnect://...\"\n  },\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\n### Add to N8N via SSE\n\nYou can use the native N8N MCP Client tool connected to an AI agent. Enter your SSE endpoint, set authentication to \"Bearer\" and paste your NWC connection secret.\n\nTested with OpenRouter + anthropic/claude-3.7-sonnet\n\nSee the [N8N workflow](examples/n8n-sse) for a simple example\n\n### Add to N8N via STDIO (Community Node)\n\nCurrently this MCP server only works via command line (STDIO).\n\nYou can install the [n8n-nodes-mcp](https://github.com/nerding-io/n8n-nodes-mcp) community node and run n8n with tools enabled e.g.\n\n```bash\nN8N_COMMUNITY_PACKAGES_ALLOW_TOOL_USAGE=true npx n8n\n```\n\nCreate a blank workflow and add an AI agent node. Configure your LLM model and add a new tool \"MCP Client\" (which will have a cube next to it showing it's a community node).\n\nConfigure the MCP Client by adding a credential with Command Line (STDIO) selected.\n\ncommand: `npx`\narguments: `-y @getalby/nwc-mcp-server`\nenvironments `NWC_CONNECTION_STRING=nostr+walletconnect://your_key_here` (create the whole line in a text editor and paste it in, since the password field cannot be switched to plaintext)\n\nSee the [N8N paid chat workflow](examples/n8n-paid-chat-stdio) for a full example\n\n## Modes\n\n### STDIO\n\nBy default NWC MCP Server runs locally in `STDIO` mode.\n\n### HTTP\n\nYou can set the following environment variable: `MODE=HTTP` which will enable Streamable HTTP (`http://localhost:3000/mcp`) and SSE (`http://localhost:3000/sse` Note: SSE is deprecated).\n\nHTTP requires bearer authorization, where the token is a wallet's NWC connection secret.\n\n## From Source\n\n### Prerequisites\n\n- Node.js 20+\n- Yarn\n- A connection string from a lightning wallet that supports NWC\n\n### Installation\n\n```bash\nyarn install\n```\n\n### Building\n\n```bash\nyarn build\n```\n\n### Add your NWC connection\n\nCopy `.env.example` to `.env` and update your connection string\n\n### Inspect the tools (use/test without an LLM)\n\n`yarn inspect`\n\n### Supported Tools\n\nSee the [tools directory](./src/tools)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "nwc",
        "nostr",
        "wallet",
        "nostr wallet",
        "wallet connect",
        "lightning wallet"
      ],
      "category": "finance--fintech"
    },
    "glaksmono--finbud-data-mcp": {
      "owner": "glaksmono",
      "name": "finbud-data-mcp",
      "url": "https://github.com/glaksmono/finbud-data-mcp/tree/main/packages/mcp-server",
      "imageUrl": "",
      "description": "Access comprehensive, real-time financial data (stocks, options, crypto, forex) via developer-friendly, AI-native APIs offering unbeatable value.",
      "stars": 2,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-02T11:39:16Z",
      "readme_content": "# Finbud Data TypeScript API Library\n\n[![NPM version](https://img.shields.io/npm/v/finbud-data.svg)](https://npmjs.org/package/finbud-data) ![npm bundle size](https://img.shields.io/bundlephobia/minzip/finbud-data)\n\nThis library provides convenient access to the Finbud Data REST API from server-side TypeScript or JavaScript.\n\nThe full API of this library can be found in [api.md](api.md).\n\nIt is generated with [Stainless](https://www.stainless.com/).\n\n## Installation\n\n```sh\nnpm install finbud-data\n```\n\n## Usage\n\nThe full API of this library can be found in [api.md](api.md).\n\n<!-- prettier-ignore -->\n```js\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  apiKey: process.env['FINBUD_DATA_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const response = await client.analysts.retrieveEstimates('REPLACE_ME');\n}\n\nmain();\n```\n\n### Request & Response types\n\nThis library includes TypeScript definitions for all request params and response fields. You may import and use them like so:\n\n<!-- prettier-ignore -->\n```ts\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  apiKey: process.env['FINBUD_DATA_API_KEY'], // This is the default and can be omitted\n});\n\nasync function main() {\n  const response: FinbudData.AnalystRetrieveEstimatesResponse = await client.analysts.retrieveEstimates(\n    'REPLACE_ME',\n  );\n}\n\nmain();\n```\n\nDocumentation for each method, request param, and response field are available in docstrings and will appear on hover in most modern editors.\n\n## Handling errors\n\nWhen the library is unable to connect to the API,\nor if the API returns a non-success status code (i.e., 4xx or 5xx response),\na subclass of `APIError` will be thrown:\n\n<!-- prettier-ignore -->\n```ts\nasync function main() {\n  const response = await client.analysts.retrieveEstimates('REPLACE_ME').catch(async (err) => {\n    if (err instanceof FinbudData.APIError) {\n      console.log(err.status); // 400\n      console.log(err.name); // BadRequestError\n      console.log(err.headers); // {server: 'nginx', ...}\n    } else {\n      throw err;\n    }\n  });\n}\n\nmain();\n```\n\nError codes are as followed:\n\n| Status Code | Error Type                 |\n| ----------- | -------------------------- |\n| 400         | `BadRequestError`          |\n| 401         | `AuthenticationError`      |\n| 403         | `PermissionDeniedError`    |\n| 404         | `NotFoundError`            |\n| 422         | `UnprocessableEntityError` |\n| 429         | `RateLimitError`           |\n| >=500       | `InternalServerError`      |\n| N/A         | `APIConnectionError`       |\n\n### Retries\n\nCertain errors will be automatically retried 2 times by default, with a short exponential backoff.\nConnection errors (for example, due to a network connectivity problem), 408 Request Timeout, 409 Conflict,\n429 Rate Limit, and >=500 Internal errors will all be retried by default.\n\nYou can use the `maxRetries` option to configure or disable this:\n\n<!-- prettier-ignore -->\n```js\n// Configure the default for all requests:\nconst client = new FinbudData({\n  maxRetries: 0, // default is 2\n});\n\n// Or, configure per-request:\nawait client.analysts.retrieveEstimates('REPLACE_ME', {\n  maxRetries: 5,\n});\n```\n\n### Timeouts\n\nRequests time out after 1 minute by default. You can configure this with a `timeout` option:\n\n<!-- prettier-ignore -->\n```ts\n// Configure the default for all requests:\nconst client = new FinbudData({\n  timeout: 20 * 1000, // 20 seconds (default is 1 minute)\n});\n\n// Override per-request:\nawait client.analysts.retrieveEstimates('REPLACE_ME', {\n  timeout: 5 * 1000,\n});\n```\n\nOn timeout, an `APIConnectionTimeoutError` is thrown.\n\nNote that requests which time out will be [retried twice by default](#retries).\n\n## Advanced Usage\n\n### Accessing raw Response data (e.g., headers)\n\nThe \"raw\" `Response` returned by `fetch()` can be accessed through the `.asResponse()` method on the `APIPromise` type that all methods return.\nThis method returns as soon as the headers for a successful response are received and does not consume the response body, so you are free to write custom parsing or streaming logic.\n\nYou can also use the `.withResponse()` method to get the raw `Response` along with the parsed data.\nUnlike `.asResponse()` this method consumes the body, returning once it is parsed.\n\n<!-- prettier-ignore -->\n```ts\nconst client = new FinbudData();\n\nconst response = await client.analysts.retrieveEstimates('REPLACE_ME').asResponse();\nconsole.log(response.headers.get('X-My-Header'));\nconsole.log(response.statusText); // access the underlying Response object\n\nconst { data: response, response: raw } = await client.analysts\n  .retrieveEstimates('REPLACE_ME')\n  .withResponse();\nconsole.log(raw.headers.get('X-My-Header'));\nconsole.log(response);\n```\n\n### Logging\n\n> [!IMPORTANT]\n> All log messages are intended for debugging only. The format and content of log messages\n> may change between releases.\n\n#### Log levels\n\nThe log level can be configured in two ways:\n\n1. Via the `FINBUD_DATA_LOG` environment variable\n2. Using the `logLevel` client option (overrides the environment variable if set)\n\n```ts\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  logLevel: 'debug', // Show all log messages\n});\n```\n\nAvailable log levels, from most to least verbose:\n\n- `'debug'` - Show debug messages, info, warnings, and errors\n- `'info'` - Show info messages, warnings, and errors\n- `'warn'` - Show warnings and errors (default)\n- `'error'` - Show only errors\n- `'off'` - Disable all logging\n\nAt the `'debug'` level, all HTTP requests and responses are logged, including headers and bodies.\nSome authentication-related headers are redacted, but sensitive data in request and response bodies\nmay still be visible.\n\n#### Custom logger\n\nBy default, this library logs to `globalThis.console`. You can also provide a custom logger.\nMost logging libraries are supported, including [pino](https://www.npmjs.com/package/pino), [winston](https://www.npmjs.com/package/winston), [bunyan](https://www.npmjs.com/package/bunyan), [consola](https://www.npmjs.com/package/consola), [signale](https://www.npmjs.com/package/signale), and [@std/log](https://jsr.io/@std/log). If your logger doesn't work, please open an issue.\n\nWhen providing a custom logger, the `logLevel` option still controls which messages are emitted, messages\nbelow the configured level will not be sent to your logger.\n\n```ts\nimport FinbudData from 'finbud-data';\nimport pino from 'pino';\n\nconst logger = pino();\n\nconst client = new FinbudData({\n  logger: logger.child({ name: 'FinbudData' }),\n  logLevel: 'debug', // Send all messages to pino, allowing it to filter\n});\n```\n\n### Making custom/undocumented requests\n\nThis library is typed for convenient access to the documented API. If you need to access undocumented\nendpoints, params, or response properties, the library can still be used.\n\n#### Undocumented endpoints\n\nTo make requests to undocumented endpoints, you can use `client.get`, `client.post`, and other HTTP verbs.\nOptions on the client, such as retries, will be respected when making these requests.\n\n```ts\nawait client.post('/some/path', {\n  body: { some_prop: 'foo' },\n  query: { some_query_arg: 'bar' },\n});\n```\n\n#### Undocumented request params\n\nTo make requests using undocumented parameters, you may use `// @ts-expect-error` on the undocumented\nparameter. This library doesn't validate at runtime that the request matches the type, so any extra values you\nsend will be sent as-is.\n\n```ts\nclient.foo.create({\n  foo: 'my_param',\n  bar: 12,\n  // @ts-expect-error baz is not yet public\n  baz: 'undocumented option',\n});\n```\n\nFor requests with the `GET` verb, any extra params will be in the query, all other requests will send the\nextra param in the body.\n\nIf you want to explicitly send an extra argument, you can do so with the `query`, `body`, and `headers` request\noptions.\n\n#### Undocumented response properties\n\nTo access undocumented response properties, you may access the response object with `// @ts-expect-error` on\nthe response object, or cast the response object to the requisite type. Like the request params, we do not\nvalidate or strip extra properties from the response from the API.\n\n### Customizing the fetch client\n\nBy default, this library expects a global `fetch` function is defined.\n\nIf you want to use a different `fetch` function, you can either polyfill the global:\n\n```ts\nimport fetch from 'my-fetch';\n\nglobalThis.fetch = fetch;\n```\n\nOr pass it to the client:\n\n```ts\nimport FinbudData from 'finbud-data';\nimport fetch from 'my-fetch';\n\nconst client = new FinbudData({ fetch });\n```\n\n### Fetch options\n\nIf you want to set custom `fetch` options without overriding the `fetch` function, you can provide a `fetchOptions` object when instantiating the client or making a request. (Request-specific options override client options.)\n\n```ts\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  fetchOptions: {\n    // `RequestInit` options\n  },\n});\n```\n\n#### Configuring proxies\n\nTo modify proxy behavior, you can provide custom `fetchOptions` that add runtime-specific proxy\noptions to requests:\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/node.svg\" align=\"top\" width=\"18\" height=\"21\"> **Node** <sup>[[docs](https://github.com/nodejs/undici/blob/main/docs/docs/api/ProxyAgent.md#example---proxyagent-with-fetch)]</sup>\n\n```ts\nimport FinbudData from 'finbud-data';\nimport * as undici from 'undici';\n\nconst proxyAgent = new undici.ProxyAgent('http://localhost:8888');\nconst client = new FinbudData({\n  fetchOptions: {\n    dispatcher: proxyAgent,\n  },\n});\n```\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/bun.svg\" align=\"top\" width=\"18\" height=\"21\"> **Bun** <sup>[[docs](https://bun.sh/guides/http/proxy)]</sup>\n\n```ts\nimport FinbudData from 'finbud-data';\n\nconst client = new FinbudData({\n  fetchOptions: {\n    proxy: 'http://localhost:8888',\n  },\n});\n```\n\n<img src=\"https://raw.githubusercontent.com/stainless-api/sdk-assets/refs/heads/main/deno.svg\" align=\"top\" width=\"18\" height=\"21\"> **Deno** <sup>[[docs](https://docs.deno.com/api/deno/~/Deno.createHttpClient)]</sup>\n\n```ts\nimport FinbudData from 'npm:finbud-data';\n\nconst httpClient = Deno.createHttpClient({ proxy: { url: 'http://localhost:8888' } });\nconst client = new FinbudData({\n  fetchOptions: {\n    client: httpClient,\n  },\n});\n```\n\n## Frequently Asked Questions\n\n## Semantic versioning\n\nThis package generally follows [SemVer](https://semver.org/spec/v2.0.0.html) conventions, though certain backwards-incompatible changes may be released as minor versions:\n\n1. Changes that only affect static types, without breaking runtime behavior.\n2. Changes to library internals which are technically public but not intended or documented for external use. _(Please open a GitHub issue to let us know if you are relying on such internals.)_\n3. Changes that we do not expect to impact the vast majority of users in practice.\n\nWe take backwards-compatibility seriously and work hard to ensure you can rely on a smooth upgrade experience.\n\nWe are keen for your feedback; please open an [issue](https://www.github.com/glaksmono/finbud-data-mcp/issues) with questions, bugs, or suggestions.\n\n## Requirements\n\nTypeScript >= 4.9 is supported.\n\nThe following runtimes are supported:\n\n- Web browsers (Up-to-date Chrome, Firefox, Safari, Edge, and more)\n- Node.js 18 LTS or later ([non-EOL](https://endoflife.date/nodejs)) versions.\n- Deno v1.28.0 or higher.\n- Bun 1.0 or later.\n- Cloudflare Workers.\n- Vercel Edge Runtime.\n- Jest 28 or greater with the `\"node\"` environment (`\"jsdom\"` is not supported at this time).\n- Nitro v2.6 or greater.\n\nNote that React Native is not supported at this time.\n\nIf you are interested in other runtime environments, please open or upvote an issue on GitHub.\n\n## Contributing\n\nSee [the contributing documentation](./CONTRIBUTING.md).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "finance",
        "finbud",
        "finance fintech",
        "fintech glaksmono",
        "finbud data"
      ],
      "category": "finance--fintech"
    },
    "heurist-network--heurist-mesh-mcp-server": {
      "owner": "heurist-network",
      "name": "heurist-mesh-mcp-server",
      "url": "https://github.com/heurist-network/heurist-mesh-mcp-server",
      "imageUrl": "",
      "description": "Access specialized web3 AI agents for blockchain analysis, smart contract security auditing, token metrics evaluation, and on-chain interactions through the Heurist Mesh network. Provides comprehensive tools for DeFi analysis, NFT valuation, and transaction monitoring across multiple blockchains",
      "stars": 58,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-13T12:01:06Z",
      "readme_content": "# Mesh Agent MCP Server\n\n![mesh-2](https://github.com/user-attachments/assets/da67c0e6-0709-4f28-ab82-8abfc0c0734c)\n\nA Model Context Protocol (MCP) server that connects to [Heurist Mesh](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh) APIs, providing Claude with access to various blockchain and web3 tools.\n\nHeurist Mesh is an open network of purpose-built AI agents and tools, each specialized in particular web3 domains such as blockchain data analysis, smart contract security, token metrics, and blockchain interaction. We are actively growing the Heurist Mesh ecosystem, continuously integrating more tools to expand its capabilities.\n\n<a href=\"https://glama.ai/mcp/servers/@heurist-network/heurist-mesh-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@heurist-network/heurist-mesh-mcp-server/badge\" alt=\"Mesh Agent Server MCP server\" />\n</a>\n\n## Features\n- Connects to the Heurist Mesh API \n- Loads tools for cryptocurrency data and Web3 use cases\n- Supports both SSE and stdio transports\n- Works with Claude in Cursor, Claude Desktop, and other MCP-compatible interfaces\n- Use one API key to access multiple services (e.g. CoinGecko crypto market data, GoPlus token security review)\n\n## 🔥 Just In: Customize Your Agents and Create Managed MCP Servers On-Demand\nYou can use [Heurist Mesh MCP Portal](https://mcp.heurist.ai/) to create SSE MCP Servers. Select your agents and compose a personalized swarm for your tasks!\n\n## Hosted SSE Endpoint\nWe provide a hosted SSE endpoint at https://sequencer-v2.heurist.xyz/mcp/sse. This includes all the tools from the following commonly used agents: `CoingeckoTokenInfoAgent`, `ElfaTwitterIntelligenceAgent`, `ExaSearchAgent`, `DexScreenerTokenInfoAgent`, `ZerionWalletAnalysisAgent`. This is a shared server and the performance may be unstable.\n\nCursor can directly access SSE servers. For Claude Desktop users, we recommend installing [mcp-proxy](https://github.com/sparfenyuk/mcp-proxy) to connect to the SSE server.\n\n## Prerequisites\n\n- Python 3.10 or higher\n- UV package manager (recommended)\n- OR Docker\n- [Get a Heurist API key](https://docs.heurist.ai/protocol-overview/credits) or you can [claim free API credits](https://dev-api-form.heurist.ai/) with invite code \"claude\"\n\n## Installation\n### Using UV (Recommended)\n```bash\n# Clone the repository\ngit clone https://github.com/heurist-network/heurist-mesh-mcp-server.git\ncd heurist-mesh-mcp-server\n\n# Install the package\nuv pip install -e .\n```\n\n### Using Docker\n```bash\n# Clone the repository\ngit clone https://github.com/heurist-network/heurist-mesh-mcp-server.git\ncd heurist-mesh-mcp-server\n\n# Build the Docker image\ndocker build -t mesh-tool-server .\n```\n## Usage\n### Option 1: Run with stdio Transport (for Claude Desktop)\n#### Using UV\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n```bash\n{\n  \"mcpServers\": {\n    \"heurist-mesh-agent\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/heurist-mesh-mcp-server/mesh_mcp_server\",  // Update this path\n        \"run\",\n        \"mesh-tool-server\"\n      ],\n      \"env\": {\n        \"HEURIST_API_KEY\": \"your-api-key-here\"  // Update this key\n      }\n    }\n  }\n}\n```\n#### Using Docker\nAlternatively, you can use Docker with Claude Desktop by adding this to your `claude_desktop_config.json`:\n```bash\n{\n  \"mcpServers\": {\n    \"mesh-agent\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"--rm\",\n        \"-i\",\n        \"-e\", \"TRANSPORT=stdio\",\n        \"-e\", \"HEURIST_API_KEY=your-api-key-here\",  // Update this key\n        \"mesh-tool-server\"\n      ]\n    }\n  }\n}\n```\n\nReplace `/path/to/heurist-mesh-mcp-server` with the actual path to the repository and `your-api-key-here` with your Heurist API key.\n\n### Option 2: Run with SSE Transport (for Cursor)\n#### Setting up Environment Variables in `.env`\n```bash\ncp .env.example .env\nHEURIST_API_KEY=your-api-key-here\n```\n#### Using UV:\n```bash\nuv run mesh-tool-server --transport sse --port 8000\n```\n#### Using Docker:\n```bash\ndocker run -p 8000:8000 -e PORT=8000 mesh-tool-server\n```\nThen, in Cursor, add the MCP Server URL: **http://0.0.0.0:8000/sse**\n\n## Available Tools\nVisit https://mesh.heurist.ai/metadata.json or https://mcp.heurist.ai/ to view all available tools.\n\n## Featured tools\n| Tool Name | Description | Agent | Parameters | Required Params |\n|-----------|-------------|-------|------------|----------------|\n| get_coingecko_id | Search for a token by name to get its CoinGecko ID | CoinGeckoTokenInfoAgent | **token_name** (string): The token name to search for | token_name |\n| get_token_info | Get detailed token information and market data using CoinGecko ID (you can't use the token address or name or symbol) | CoinGeckoTokenInfoAgent | **coingecko_id** (string): The CoinGecko ID of the token | coingecko_id |\n| get_trending_coins | Get the current top trending cryptocurrencies on CoinGecko | CoinGeckoTokenInfoAgent | - | None |\n| get_specific_pair_info | Get trading pair info by chain and pair address on DexScreener | DexScreenerTokenInfoAgent | **chain** (string): Chain identifier (e.g., solana, bsc, ethereum, base)<br>**pair_address** (string): The pair contract address to look up | chain, pair_address |\n| get_token_pairs | Get the trading pairs by chain and token address on DexScreener | DexScreenerTokenInfoAgent | **chain** (string): Chain identifier (e.g., solana, bsc, ethereum, base)<br>**token_address** (string): The token contract address to look up all pairs for | chain, token_address |\n| get_token_profiles | Get the basic info of the latest tokens from DexScreener | DexScreenerTokenInfoAgent | - | None |\n| search_pairs | Search for trading pairs on DexScreener by token name, symbol, or address | DexScreenerTokenInfoAgent | **search_term** (string): Search term (token name, symbol, or address) | search_term |\n| get_trending_tokens | Get current trending tokens on Twitter | ElfaTwitterIntelligenceAgent | **time_window** (string): Time window to analyze | None |\n| search_account | Analyze a Twitter account with both mention search and account stats | ElfaTwitterIntelligenceAgent | **username** (string): Twitter username to analyze (without @)<br>**days_ago** (integer): Number of days to look back for mentions<br>**limit** (integer): Maximum number of mention results | username |\n| search_mentions | Search for mentions of specific tokens or topics on Twitter | ElfaTwitterIntelligenceAgent | **keywords** (array): List of keywords to search for<br>**days_ago** (integer): Number of days to look back<br>**limit** (integer): Maximum number of results (minimum: 20) | keywords |\n| answer | Get a direct answer to a question using Exa's answer API | ExaSearchAgent | **question** (string): The question to answer | question |\n| search | Search for webpages related to a query | ExaSearchAgent | **search_term** (string): The search term<br>**limit** (integer): Maximum number of results to return (default: 10) | search_term |\n| search_and_answer | Perform both search and answer operations for a query | ExaSearchAgent | **topic** (string): The topic to search for and answer | topic |\n| execute_search | Execute a web search query by reading the web pages | FirecrawlSearchAgent | **search_term** (string): The search term to execute | search_term |\n| generate_queries | Generate related search queries for a topic that can expand the research | FirecrawlSearchAgent | **topic** (string): The main topic to research<br>**num_queries** (integer): Number of queries to generate | topic |\n| fetch_security_details | Fetch security details of a blockchain token contract | GoplusAnalysisAgent | **contract_address** (string): The token contract address<br>**chain_id** (['integer', 'string']): The blockchain chain ID or 'solana' for Solana tokens. Supported chains: Ethereum (1), Optimism (10), Cronos (25), BSC (56), Gnosis (100), HECO (128), Polygon (137), Fantom (250), KCC (321), zkSync Era (324), ETHW (10001), FON (201022), Arbitrum (42161), Avalanche (43114), Linea Mainnet (59144), Base (8453), Tron (tron), Scroll (534352), opBNB (204), Mantle (5000), ZKFair (42766), Blast (81457), Manta Pacific (169), Berachain Artio Testnet (80085), Merlin (4200), Bitlayer Mainnet (200901), zkLink Nova (810180), X Layer Mainnet (196), Solana (solana) | contract_address |\n\n## Customizing Supported Agents\nThe server comes with a default set of agents. To modify which agents are available:\n1. Open the `server.py` file and locate the `Config` class.\n2. Edit the `DEFAULT_AGENTS` list to add or remove agents listed [at Heurist Metadata](https://mesh.heurist.ai/metadata.json)\n```python\nDEFAULT_AGENTS = [\n    \"CoinGeckoTokenInfoAgent\",\n    \"DexScreenerTokenInfoAgent\",\n    \"ElfaTwitterIntelligenceAgent\",\n    \"ExaSearchAgent\",\n    \"FirecrawlSearchAgent\",\n    \"GoplusAnalysisAgent\",\n    # Add agents here\n    \"NewAgent\"\n]\n```\n\n## License\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "blockchains",
        "fintech",
        "blockchain analysis",
        "fintech heurist",
        "heurist network"
      ],
      "category": "finance--fintech"
    },
    "hive-intel--hive-crypto-mcp": {
      "owner": "hive-intel",
      "name": "hive-crypto-mcp",
      "url": "https://github.com/hive-intel/hive-crypto-mcp",
      "imageUrl": "",
      "description": "Hive Intelligence: Ultimate cryptocurrency MCP for AI assistants with unified access to crypto, DeFi, and Web3 analytics",
      "stars": 5,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-30T15:29:26Z",
      "readme_content": "# Hive Intelligence MCP Server\n\nA Model Context Protocol (MCP) server providing comprehensive cryptocurrency and Web3 analytics through intelligent tool orchestration.\n\n## Overview\n\nHive Intelligence MCP Server enables AI assistants to access a wide range of cryptocurrency, DeFi, and Web3 analytics through a unified MCP interface. The server provides both dynamic and category-specific access to over 200+ specialized tools covering market data, on-chain analytics, portfolio tracking, security analysis, and more.\n\n\n### 📊 **Analytics Categories**\n\n- **Market Data & Price**\n- **On-Chain DEX & Pool**\n- **Portfolio & Wallet**\n- **Token & Contract**\n- **DeFi Protocol**\n- **NFT Analytics**\n- **Security & Risk**\n- **Network & Infrastructure**\n- **Search & Discovery**\n- **Social & Sentiment**\n\n## Installation\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Start the server\nnpm start\n```\n\n### MCP Client Configuration\n\nAdd to your MCP client configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"hive\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-hive\"]\n    }\n  }\n}\n```\n\n## Usage\n\n### Claude Desktop Configuration\n\nAdd to your Claude Desktop configuration file:\n\n**Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n**macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"hive-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-hive\"]\n    }\n  }\n}\n```\n\n## Development\n\n\n### Building\n\n```bash\n# Development build\nnpm run build\n\n# Production build with executable permissions\nnpm run prepare\n```\n\n### Testing\n\n```bash\n# Use MCP inspector for testing\nnpm run inspector\n```\n---\n\n## remote mcp server\ncheckout the guide to use the hive's remote mcp server\nhttps://hiveintelligence.xyz/crypto-mcp\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "hive",
        "crypto",
        "intel",
        "hive crypto",
        "fintech hive",
        "hive intel"
      ],
      "category": "finance--fintech"
    },
    "intentos-labs--beeper-mcp": {
      "owner": "intentos-labs",
      "name": "beeper-mcp",
      "url": "https://github.com/intentos-labs/beeper-mcp",
      "imageUrl": "",
      "description": "Beeper provides transactions on BSC, including balance/token transfers, token swaps in Pancakeswap and beeper reward claims.",
      "stars": 3,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-02T11:33:27Z",
      "readme_content": "# beeper-mcp\n\nA backend service for executing beeper transactions on Binance Smart Chain (BSC). This service provides a set of tools for interacting with the BSC blockchain, including balance checking, balance transfers, token transfers, token swaps in Pancakeswap and beeper reward claims.\n\n## Features\n\n- Get BNB and token balances\n- Transfer BNB and tokens\n- Swap tokens in Pancakeswap\n- Get token prices\n- Buy and sell tokens\n- Claim rewards of beeper tokens\n- Manage default wallet and token addresses\n\n## Prerequisites\n\n- Python >=3.10\n- Access to BSC network (mainnet or testnet)\n- Wallet account and private key\n\n## Environment Variables\n\nCreate a `.env` file in the project root with the following variables:\n\n```env\nBEEPER_CHAIN=<bsc or bsc-testnet>\nBEEPER_ACCOUNT=<your-wallet-address>\nBEEPER_SECRET_KEY=<your-private-key>\nBEEPER_TARGET_TOKEN=<default-token-address>  # Optional\n```\n\n## API Endpoints\n\nThe service exposes the following MCP tools:\n\n### Wallet and Token Management\n- `get_default_wallet_address() -> str`: Get the default wallet address\n- `get_default_token_address() -> str`: Get the default token address\n- `switch_default_token_address(new_token_address: str) -> str`: Switch to a new default token address\n\n### Balance Operations\n- `get_balance(address: str) -> str`: Get BNB balance of an address\n- `get_token_balance(address: str, token_address: str) -> str`: Get token balance of an address\n\n### Transfer Operations\n- `transfer(recipient_address: str, amount: Decimal = 0.01) -> dict`: Transfer BNB to an address\n- `transfer_token(recipient_address: str, token_address: str, amount: Decimal = 0.01) -> dict`: Transfer tokens to an address\n\n### Trading Operations\n- `swap_token(token_in: str, token_out: str, amount: Decimal = 0.01) -> dict`: Swap between tokens\n- `get_token_price(token_address: str) -> float`: Get token price in BNB\n- `buy_token(token_address: str, amount: Decimal = 0.01) -> dict`: Buy tokens with BNB\n- `sell_token(token_address: str, amount: Decimal = 0.01) -> dict`: Sell tokens for BNB\n\n### Reward Operations\n- `claim_rewards(token_address: str) -> dict`: Claim rewards for a token\n\n## Running the Service\n\n```bash\ngit clone https://github.com/unibaseio/beeper-mcp.git\ncd beeper-mcp\n# start server over stdio\nuv run src/beeper_mcp/server.py \n```\n\n+ start using sse\n\nThe sse service will start on port 8000 by default. You can specify a different port using the `--port` argument:\n\n```bash\nuv run src/beeper_mcp/server.py --port 8008 --transport=sse\n```\n\n### Configuration on Claude/Windsurf/Cursor/Cline\n\n```json\n{\n  \"mcpServers\": {\n    \"beeper\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"path/to/beeper-mcp\",\n        \"run\", \n        \"src/beeper_mcp/server.py\"\n        ],\n      \"env\": {\n        \"BEEPER_ACCOUNT\": \"your account, 0x...\",\n        \"BEEPER_SECRET_KEY\": \"your private key or in .env\",\n        \"BEEPER_TARGET_TOKEN\": \"default token address\",\n        \"BEEPER_CHAIN\": \"chain type <bsc/bsc-testnet>\"\n      }\n    }\n  }\n}\n```\n\n## Notes\n\n- All amounts are in native units (e.g., BNB, tokens)\n- Token addresses should be provided in the correct format\n- Make sure you have sufficient BNB for gas fees\n- The service supports both BSC mainnet and testnet\n- All operations return detailed response objects with transaction hashes and status information\n- The service includes built-in error handling and status tracking for transactions\n\n\n## Usage\n\ncall functions in llm chat\n\n+ show wallet and buy tokens\n\n\n\n+ sell tokens",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "beeper",
        "fintech",
        "bsc",
        "transactions bsc",
        "fintech intentos",
        "beeper mcp"
      ],
      "category": "finance--fintech"
    },
    "janswist--mcp-dexscreener": {
      "owner": "janswist",
      "name": "mcp-dexscreener",
      "url": "https://github.com/janswist/mcp-dexscreener",
      "imageUrl": "",
      "description": "Real-time on-chain market prices using open and free Dexscreener API",
      "stars": 14,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T07:54:05Z",
      "readme_content": "# Dexscreener MCP server\n\nBasic MCP server for Dexscreener API based on their documentation (as of April 4th 2025): https://docs.dexscreener.com/api/reference\n\n## Project setup\n\nInstall all the dependencies\n```\nnpm run install\n```\n\nIf you are using Claude Desktop, after pulling the code open the config file `claude_desktop_config.json` in VSCode:\n- on MacOS:\n\n  ```code ~/Library/Application\\ Support/Claude/claude_desktop_config.json```\n\n- on Windows:\n\n  ```code $env:AppData\\Claude\\claude_desktop_config.json```\n- more info: https://modelcontextprotocol.io/quickstart/server\n\nIn `claude_desktop_config.json` put `dexscreener` object:\n```json\n{\n  \"mcpServers\": {\n    \"dexscreener\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/index.js\"\n      ]\n    }\n  }\n}\n\n```\n\n## Running the app\n\nYou can use [Inspector](https://modelcontextprotocol.io/docs/tools/inspector) to test the MCP server without using Claude Desktop - both for SDTIO version (default) and SSE version `index-sse.js` (server-sent events - can be hosted on remote server).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dexscreener",
        "finance",
        "fintech",
        "dexscreener api",
        "free dexscreener",
        "mcp dexscreener"
      ],
      "category": "finance--fintech"
    },
    "jjlabsio--korea-stock-mcp": {
      "owner": "jjlabsio",
      "name": "korea-stock-mcp",
      "url": "https://github.com/jjlabsio/korea-stock-mcp",
      "imageUrl": "",
      "description": "An MCP Server for Korean stock analysis using OPEN DART API and KRX API",
      "stars": 1,
      "forks": 1,
      "license": "ISC License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T05:32:40Z",
      "readme_content": "# Korea Stock MCP Server\n\n[🇰🇷 한국어](#korea-stock-mcp-server) | [🇺🇸 English](#english-version)\n\n한국 주식 분석을 위한 MCP 서버입니다.  \nDART(전자공시시스템)와 KRX(한국거래소) 공식 API를 통해 주가 정보와 공시 자료 기반의 AI분석이 가능합니다.\n\n## 🎯 주요 기능\n\n- 🔍 **공시검색** - 회사별, 기간별 공시 검색\n- 📊 **공시 데이터** - 공시보고서 원본파일 파싱한 데이터 제공\n- 💼 **재무제표 분석** - XBRL 기반 상세 재무 데이터\n- 📈 **주식 데이터** - KRX(코스피/코스닥) 일별 주가정보, 종목 기본정보\n\n## ⚡ 빠른 시작\n\n### 1️⃣ API KEY 발급\n\n먼저 DART와 KRX의 API KEY를 발급받아야 합니다.\n\n#### 📝 DART API KEY 발급\n\n1. **회원가입**: [OPEN DART](https://opendart.fss.or.kr) 회원가입\n2. **키 신청**: [인증키 신청 페이지](https://opendart.fss.or.kr/uss/umt/EgovMberInsertView.do)에서 API KEY 신청\n3. **키 확인**: [오픈API 이용현황](https://opendart.fss.or.kr/mng/apiUsageStatusView.do)에서 발급된 API KEY 확인\n\n#### 📈 KRX API KEY 발급\n\n1. **회원가입**: [KRX OPEN API](https://openapi.krx.co.kr/contents/OPP/MAIN/main/index.cmd)에서 회원가입 및 로그인\n2. **키 신청**: 마이페이지 → API 인증키 신청에서 신청\n3. **서비스 신청**: 승인 후 서비스이용 → 주식 메뉴로 이동\n4. **API 이용신청**: 다음 6개 항목에서 각각 \"API 이용신청\" 클릭\n\n   - 유가증권 일별매매정보\n   - 코스닥 일별매매정보\n   - 코넥스 일별매매정보\n   - 유가증권 종목기본정보\n   - 코스닥 종목기본정보\n   - 코넥스 종목기본정보\n\n   > ⏱️ **승인까지 약 1일 소요됩니다.**\n\n5. **키 확인**: 승인 후 마이페이지 → API 인증키 발급내역에서 API KEY 확인\n\n### 2️⃣ Claude Desktop 설정\n\n1. **Claude Desktop** 실행\n2. **설정** → **개발자** → **구성편집** 클릭\n3. `claude_desktop_config.json` 파일에 다음 내용 추가:\n\n```json\n{\n  \"mcpServers\": {\n    \"korea-stock-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"korea-stock-mcp@latest\"],\n      \"env\": {\n        \"DART_API_KEY\": \"<YOUR_DART_API_KEY>\",\n        \"KRX_API_KEY\": \"<YOUR_KRX_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n4. **재시작**: Claude Desktop을 재시작하여 설정 적용\n\n> 이제 Claude에서 한국 주식 데이터 분석을 시작할 수 있습니다.\n\n## 사용 가능한 도구\n\n### DART (전자공시시스템)\n\n1. **get_disclosure_list** - 공시검색\n\n   - 공시 유형별, 회사별, 날짜별 공시보고서 검색\n\n2. **get_corp_code** - 고유번호 조회\n\n   - DART 등록 공시대상회사의 고유번호, 회사명, 종목코드 제공\n\n3. **get_disclosure** - 공시보고서 원문\n\n   - DART API를 통한 공시보고서 원본파일 파싱\n\n4. **get_financial_statement** - 재무제표\n   - 상장법인 및 주요 비상장법인 XBRL 재무제표\n   - 정기보고서 내 모든 계정과목 데이터 제공\n\n### KRX (한국거래소)\n\n1. **get_stock_base_info** - 종목 기본정보\n\n   - 코스피, 코스닥, 코넥스 상장 종목 기본 정보\n   - 종목명, 종목코드, 시장구분 등 기본 데이터\n\n2. **get_stock_trade_info** - 일별 매매정보\n   - 코스피, 코스닥, 코넥스 종목별 일별 거래 데이터\n   - 주가, 거래량, 시가총액 등 상세 거래 정보\n\n3. **get_market_type** - 시장구분 조회\n   - 종목코드로 해당 종목의 시장구분(코스피/코스닥/코넥스) 조회\n   - 주식 데이터 조회 시 필요한 시장 정보 제공\n\n### 기타 도구\n\n1. **get_today_date** - 오늘 날짜 조회\n   - 현재 날짜를 YYYYMMDD 형식으로 제공\n   - AI의 정확한 날짜 조회를 위한 도구\n\n## 실제 사용 예시\n\n### 📊 재무 분석 예제\n\n**프롬프트**: \"삼양식품의 2023년, 2024년 1~4분기, 2025년 1,2분기 매출, 영업이익 조사해주고 성장률도 조사해줘\"  \n→ [삼양식품 분석 결과 보기](./example/삼양식품.md)\n\n**프롬프트**: \"에이피알의 23년 1분기부터 25년 2분기까지의 매출, 영업이익 성장과 주가, 시가총액 흐름을 조사해줘\"  \n→ [에이피알 분석 결과 보기](./example/에이피알.md)\n\n### 🏢 기업 분석 예제\n\n**프롬프트**: \"HJ중공업은 뭘 해서 돈을 버는 회사인지랑 사업부문별 매출까지 같이 알려줘\"  \n→ [HJ중공업 분석 결과 보기](./example/HJ중공업.md)\n\n## API 데이터 소스\n\n- **DART (전자공시시스템)**: 상장기업 공시 정보 및 재무제표\n- **KRX (한국거래소)**: 종목 기본정보 및 일별 매매정보\n\n## 기여하기\n\n기여를 환영합니다! Pull Request를 보내주세요.\n\n1. 이 저장소를 포크하세요\n2. 기능 브랜치를 만드세요 (`git checkout -b feature/AmazingFeature`)\n3. 변경사항을 커밋하세요 (`git commit -m 'Add some AmazingFeature'`)\n4. 브랜치에 푸시하세요 (`git push origin feature/AmazingFeature`)\n5. Pull Request를 열어주세요\n\n## 라이선스\n\nISC 라이선스\n\n## 지원\n\n- 🐛 이슈가 있다면 GitHub Issues에 등록해주세요\n- ⭐ 유용하다면 스타를 눌러주세요!\n\n## 면책 조항\n\n본 도구는 정보 제공 목적이며, 투자 조언이 아닙니다. 모든 투자 결정은 본인 책임입니다.\n\n---\n\n# English Version\n\nMCP Server for Korean stock analysis.  \nEnables AI-powered analysis of stock prices and disclosure data through official APIs from DART (Data Analysis, Retrieval and Transfer System) and KRX (Korea Exchange).\n\n## 🎯 Key Features\n\n- 🔍 **Disclosure Search** - Search corporate disclosures by company and date\n- 📊 **Disclosure Data** - Provides parsed data from original disclosure reports\n- 💼 **Financial Statement Analysis** - Detailed financial data based on XBRL\n- 📈 **Stock Data** - KRX (KOSPI/KOSDAQ) daily stock prices and basic stock information\n\n## ⚡ Quick Start\n\n### 1️⃣ API KEY Registration\n\nYou need to obtain API KEYs from both DART and KRX.\n\n#### 📝 DART API KEY Registration\n\n1. **Sign Up**: Register at [OPEN DART](https://opendart.fss.or.kr)\n2. **Request Key**: Apply for API KEY at [Authentication Key Application Page](https://opendart.fss.or.kr/uss/umt/EgovMberInsertView.do)\n3. **Check Key**: Verify issued API KEY at [Open API Usage Status](https://opendart.fss.or.kr/mng/apiUsageStatusView.do)\n\n#### 📈 KRX API KEY Registration\n\n1. **Sign Up**: Register and login at [KRX OPEN API](https://openapi.krx.co.kr/contents/OPP/MAIN/main/index.cmd)\n2. **Request Key**: Apply for API authentication key in My Page → API Authentication Key Application\n3. **Service Application**: After approval, go to Service Use → Stock menu\n4. **API Usage Application**: Click \"API Usage Application\" for each of the following 6 items\n\n   - Securities Daily Trading Information\n   - KOSDAQ Daily Trading Information\n   - KONEX Daily Trading Information\n   - Securities Basic Information\n   - KOSDAQ Basic Information\n   - KONEX Basic Information\n\n   > ⏱️ **Approval takes approximately 1 day.**\n\n5. **Key Verification**: After approval, check API KEY in My Page → API Authentication Key Issuance History\n\n### 2️⃣ Claude Desktop Setup\n\n1. Launch **Claude Desktop**\n2. Go to **Settings** → **Developer** → **Edit Configuration**\n3. Add the following content to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"korea-stock-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"korea-stock-mcp@latest\"],\n      \"env\": {\n        \"DART_API_KEY\": \"<YOUR_DART_API_KEY>\",\n        \"KRX_API_KEY\": \"<YOUR_KRX_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n4. **Restart**: Restart Claude Desktop to apply settings\n\n> You can now start analyzing Korean stock data with Claude.\n\n## Available Tools\n\n### DART (Data Analysis, Retrieval and Transfer System)\n\n1. **get_disclosure_list** - Disclosure Search\n\n   - Search disclosure reports by type, company, and date\n\n2. **get_corp_code** - Corporate Code Inquiry\n\n   - Provides unique codes, company names, and stock codes of DART-registered disclosure companies\n\n3. **get_disclosure** - Disclosure Report Content\n\n   - Parse original disclosure report files through DART API\n\n4. **get_financial_statement** - Financial Statements\n   - XBRL financial statements for listed and major unlisted companies\n   - Provides all account data from periodic reports\n\n### KRX (Korea Exchange)\n\n1. **get_stock_base_info** - Basic Stock Information\n\n   - Basic information for KOSPI, KOSDAQ, and KONEX listed stocks\n   - Basic data including stock names, codes, and market classifications\n\n2. **get_stock_trade_info** - Daily Trading Information\n   - Daily trading data for KOSPI, KOSDAQ, and KONEX stocks\n   - Detailed trading information including stock prices, trading volume, and market capitalization\n\n3. **get_market_type** - Market Type Inquiry\n   - Query market classification (KOSPI/KOSDAQ/KONEX) by stock code\n   - Provides market information needed for stock data queries\n\n### Other Tools\n\n1. **get_today_date** - Today's Date Inquiry\n   - Provides current date in YYYYMMDD format\n   - Tool for AI's accurate date inquiry\n\n## Real Usage Examples\n\n### 📊 Financial Analysis Examples\n\n**Prompt**: \"Investigate Samyang Foods's sales and operating profit for Q1-Q4 2023, Q1-Q4 2024, and Q1-Q2 2025, and also check growth rates\"  \n→ [See Samyang Foods Analysis Results](./example/삼양식품.md)\n\n**Prompt**: \"Investigate APR's sales and operating profit growth from Q1 2023 to Q2 2025, along with stock price and market cap trends\"  \n→ [See APR Analysis Results](./example/에이피알.md)\n\n### 🏢 Corporate Analysis Examples\n\n**Prompt**: \"Tell me what HJ SHIPBUILDING & CONSTRUCTION does to make money and include sales by business segment\"  \n→ [See HJ SHIPBUILDING & CONSTRUCTION Analysis Results](./example/HJ중공업.md)\n\n## API Data Sources\n\n- **DART (Data Analysis, Retrieval and Transfer System)**: Listed company disclosure information and financial statements\n- **KRX (Korea Exchange)**: Basic stock information and daily trading information\n\n## Contributing\n\nContributions are welcome! Please send us a Pull Request.\n\n1. Fork this repository\n2. Create a feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License\n\nISC License\n\n## Support\n\n- 🐛 If you have issues, please register them in GitHub Issues\n- ⭐ If you find it useful, please give it a star!\n\n## Disclaimer\n\nThis tool is for informational purposes only and is not investment advice. All investment decisions are your own responsibility.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "stock",
        "finance",
        "korean stock",
        "korea stock",
        "stock mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--binance-alpha-mcp": {
      "owner": "kukapay",
      "name": "binance-alpha-mcp",
      "url": "https://github.com/kukapay/binance-alpha-mcp",
      "imageUrl": "",
      "description": "An MCP server for tracking Binance Alpha trades, helping AI agents optimize alpha point accumulation.",
      "stars": 7,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T14:22:35Z",
      "readme_content": "# Binance Alpha MCP\n\nAn MCP server for tracking Binance Alpha trades, helping AI agents optimize alpha point accumulation.\n\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)](https://nodejs.org/)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Real-time Trade Monitoring**:  Track buy-side activity for Binance Alpha tokens by Subscribing to on-chain events.\n- **USD-based Metrics**: Calculates trade values in USD using real-time prices from the CryptoCompare.\n- **Data Persistence**: Maintains trade data in memory, with automatic cleanup of records older than 1 hour.\n- **MCP Tools**:\n  - `get_top_tokens`: Returns a markdown table of top tokens by USD trading volume, including symbol, USD volume, name, and address.\n  - `get_trade_stats`: Provides statistics on trade USD values (min, max, median) and a distribution table.\n- **Configurable Endpoints**: Uses separate WebSocket (`WS_ENDPOINT`) and HTTP (`RPC_ENDPOINT`) endpoints for event listening and token queries.\n\n## Prerequisites\n\n- **Node.js**: Version 18 or higher.\n- **npm**: For dependency management.\n- **BSC Node Access**: A WebSocket endpoint for event listening and an HTTP RPC endpoint for token queries, which can be obtained from services like Infura or QuikNode.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/binance-alpha-mcp.git\n   cd binance-alpha-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n3. **Configure MCP Client**:\n   To use this server with an MCP client like Claude Desktop, add the following to your config file (or equivalent):\n    ```json\n    {\n      \"mcpServers\": {\n        \"binance-alpha-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"/absolute/path/to/binance-alpha-mcp/index.js\"],\n          \"env\": { \n             \"WS_ENDPOINT\": \"your_ws_endpoint_url\",\n             \"RPC_ENDPOINT\": \"your_rpc_endpoint_url\"\n          }\n        }\n      }\n    }   \n    ```\n   Replace `/absolute/path/to/binance-alpha-mcp` with your actual installation path, and update `WS_ENDPOINT` and `PRC_ENDPOINT` with your own endpoint URLs.\n\n## Usage\n\nThe server exposes two MCP tools:\n\n### get_top_tokens\n- **Description**: Returns a markdown table of the top tokens by USD trading volume.\n- **Input**: `{ limit: number }` (optional, defaults to 10). Specifies how many tokens to include in the output.\n- **Output Example**:\n  ```\n  period: last 23 minutes\n  | Symbol | USD Volume | Name | Address |\n  |--------|------------|------|---------|\n  | ZK | $72516.34 | Polyhedra Network | 0xc71b5f631354be6853efe9c3ab6b9590f8302e81 |\n  | B2 | $22893.72 | BSquared Token | 0x783c3f003f172c6ac5ac700218a357d2d66ee2a2 |\n  | AIOT | $5249.05 | OKZOO | 0x55ad16bd573b3365f43a9daeb0cc66a73821b4a5 |\n  | gorilla | $3263.95 | gorilla | 0xcf640fdf9b3d9e45cbd69fda91d7e22579c14444 |\n  | BOOP | $2046.32 | BOOP | 0x9a70815dfb644a24b57358e1041f8d0324c8f6e1 |\n  | BANK | $1305.38 | Lorenzo Governance Token | 0x3aee7602b612de36088f3ffed8c8f10e86ebf2bf |\n  | SKYAI | $1015.69 | SKYAI | 0x92aa03137385f18539301349dcfc9ebc923ffb10 |\n  | KOGE | $672.59 | BNB48 Club Token | 0xe6df05ce8c8301223373cf5b969afcb1498c5528 |\n  | MYX | $477.85 | MYX | 0xd82544bf0dfe8385ef8fa34d67e6e4940cc63e16 |\n  | Drama | $108.37 | Drama | 0xf922fb5f88c19f363cb018e8f7c98c10ed294444 |\n  ```\n  \n### get_trade_stats\n- **Description**: Returns statistics about trade USD values, including min, max, median, and distribution.\n- **Input**: `{ buckets: number }` (optional, defaults to 10). Specifies the number of buckets to divide the trade distribution by USD value.\n- **Output Example**:\n  ```\n  period: last 1 minutes\n  min: $0.30, max: $2469.14, median: $653.41\n  | range | count |\n  |-------|-------|\n  | 0.30~247.19 | 26 |\n  | 247.19~494.07 | 22 |\n  | 494.07~740.95 | 39 |\n  | 740.95~987.84 | 6 |\n  | 987.84~1234.72 | 16 |\n  | 1234.72~1481.61 | 9 |\n  | 1481.61~1728.49 | 1 |\n  | 1728.49~1975.38 | 6 |\n  | 1975.38~2222.26 | 10 |\n  | 2222.26~2469.14 | 2 |\n  ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "binance",
        "finance",
        "alpha mcp",
        "binance alpha",
        "alpha trades"
      ],
      "category": "finance--fintech"
    },
    "kukapay--blockbeats-mcp": {
      "owner": "kukapay",
      "name": "blockbeats-mcp",
      "url": "https://github.com/kukapay/blockbeats-mcp",
      "imageUrl": "",
      "description": "An MCP server that delivers blockchain news and in-depth articles from BlockBeats for AI agents.",
      "stars": 8,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-28T02:05:28Z",
      "readme_content": "# BlockBeats MCP Server\n\nAn MCP server that delivers blockchain news and in-depth articles from BlockBeats for AI agents.\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/blockbeats-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Fast News Retrieval**: Fetch the latest blockchain fast news articles using the `get_latest_news` tool.\n- **In-Depth Articles**: Access detailed blockchain articles with the `get_latest_articles` tool.\n- **Multi-Language Support**: Supports English (`en`), Simplified Chinese (`cn`), and Traditional Chinese (`cht`).\n\n## Installation\n\n### Installing via Smithery\n\nTo install BlockBeats News for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/blockbeats-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/blockbeats-mcp --client claude\n```\n\n### Manual Installation\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/blockbeats-mcp.git\n   cd blockbeats-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   pip install mcp[cli] httpx\n   ```\n\n3. **Run the Server**:\n   - For development mode (hot reload enabled):\n     ```bash\n     mcp dev main.py\n     ```\n   - For production use with Claude Desktop:\n     ```bash\n     mcp install main.py --name \"BlockBeats News\"\n     ```\n     \n## Usage\n\nThe server provides two main tools:\n\n### `get_latest_news`\nFetches the latest blockchain fast news articles from BlockBeats' `open-api/open-flash` endpoint.\n\n**Parameters**:\n- `size` (int): Number of articles per page (default: 5).\n- `max_pages` (int): Maximum number of pages to fetch (default: 1).\n- `type` (str): News type filter, e.g., `'push'` for important news (default: `'push'`).\n- `lang` (str): Language of the news (`'en'` for English, `'cn'` for Simplified Chinese, `'cht'` for Traditional Chinese; default: `'en'`).\n\n**Example**:\n- **Input**: \"Get me the 2 latest blockchain news articles in English from one page.\"\n- **Output**:\n  ```\n  ID: 288909\n  Title: Bitcoin Falls Below $75,000, 24-Hour Drop Widens to 5.75%\n  Content: <p>BlockBeats News, April 9 – According to HTX market data, Bitcoin has fallen below $75,000, currently priced at $74,854, with a 24-hour drop widening to 5.75%.</p>\n  Link: https://m.theblockbeats.info/flash/288909\n  Created: 2025-04-09 15:26:29\n\n  ID: 288908\n  Title: Ethereum Drops Below $1,400, Down 9.36% in 24 Hours\n  Content: <p>BlockBeats News, April 9 – Per HTX market data, Ethereum has fallen below $1,400, now at $1,398, with a 24-hour decline of 9.36%.</p>\n  Link: https://m.theblockbeats.info/flash/288908\n  Created: 2025-04-09 15:22:24\n  ```\n\n### `get_latest_articles`\nFetches in-depth blockchain articles from BlockBeats' `open-api/open-information` endpoint.\n\n**Parameters**:\n- `size` (int): Number of articles per page (default: 5).\n- `max_pages` (int): Maximum number of pages to fetch (default: 1).\n- `type` (str): Article type filter, e.g., `'push'` for important articles (default: `'push'`).\n- `lang` (str): Language of the articles (`'en'` for English, `'cn'` for Simplified Chinese, `'cht'` for Traditional Chinese; default: `'en'`).\n\n**Example**:\n- **Input**: \"Show me one in-depth blockchain article in English from the first page with push type.\"\n- **Output**:\n  ```\n  Title: Solo Bitcoin Miners Are Winning More Blocks Lately—What Gives?\n  Description: Using a $180 Bitaxe miner with a 1.2 TH/s hash rate, the daily chance of mining a block is just 0.00068390%.\n  Content: <blockquote>Original Title: Solo Bitcoin Miners Are Winning More Blocks Lately—What Gives?</blockquote><blockquote>Author: Mat Di Salvo, Decrypt</blockquote><blockquote>Translated by: Lila, BlockBeats</blockquote><p><br></p><p>Last week, another solo Bitcoin miner successfully mined a block, earning a reward of 3.125 BTC, worth nearly $260,000 including transaction fees. This is just one of several recent wins for solo miners in recent months.</p><p><br></p><p>Was this miner just lucky? Is solo mining becoming more common? Can an average person with a basic miner and modest hash power take on the big mining firms?</p><p><br></p><p>The answers vary. While solo miners—here referring to individual enthusiasts or small, low-profile groups—have indeed been mining blocks more often recently, the increase is modest and unlikely to surge dramatically.</p><p><br></p><p><img src=\"https://image.theblockbeats.info/file_v6/20250408/e870c395-deef-48de-b133-0a5ea85053d5.png?x-oss-process=image/quality,q_50/format,webp\" alt=\"\" data-href=\"\" style=\"\"/></p><p><br></p><p>Scott Norris, CEO of solo mining firm Optiminer, put it bluntly: solo mining is still like “buying a lottery ticket.”</p><p><br></p>...\n  Link: https://m.theblockbeats.info/news/57650\n  Created: 2025-04-08 23:30:00\n  ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "blockbeats",
        "blockchain",
        "blockbeats mcp",
        "fintech kukapay",
        "kukapay blockbeats"
      ],
      "category": "finance--fintech"
    },
    "kukapay--blocknative-mcp": {
      "owner": "kukapay",
      "name": "blocknative-mcp",
      "url": "https://github.com/kukapay/blocknative-mcp",
      "imageUrl": "",
      "description": "Providing real-time gas price predictions across multiple blockchains, powered by Blocknative.",
      "stars": 3,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-27T01:43:38Z",
      "readme_content": "# Blocknative MCP Server\n\nAn MCP server that provides real-time gas price predictions across multiple blockchains, powered by Blocknative.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/blocknative-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Tools**:\n  - `predict_gas_price`: Fetches gas price predictions for a specified chain (default: Ethereum Mainnet, `chain_id=1`), including base fee and a table with confidence levels, price, max priority fee, and max fee.\n  - `estimate_gas_cost`: Estimates transaction costs based on gas limit, confidence level, and chain ID, returning costs in Gwei and ETH.\n  - `get_supported_chains`: Lists supported blockchains in a table with chain ID, system, and network.\n- **Prompt**:\n  - `gas_price_query`: A prompt template for querying gas prices at a specific confidence level and chain ID.\n- **Asynchronous**: Uses `httpx` for non-blocking HTTP requests to Blocknative's Gas Price and Chains APIs.\n- **Optional API Key**: Supports low-frequency access without a Blocknative API key; high-frequency use requires setting `BLOCKNATIVE_API_KEY`.\n\n## Prerequisites\n\n- **Python**: Version 3.10\n- **uv**: For dependency management and running the project ([installation guide](https://github.com/astral-sh/uv))\n- **Blocknative API Key** (optional): Required for high-frequency API access. Sign up at [Blocknative](https://www.blocknative.com/) to obtain a free API key.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/blocknative-mcp.git\n   cd blocknative-mcp\n   ```\n\n2. **Set Up the Project with `uv`**:\n   ```bash\n   uv sync\n   ```\n\n3. **Set the Blocknative API Key (Optional)**:\n   - For high-frequency access, set the environment variable:\n     ```bash\n     export BLOCKNATIVE_API_KEY=\"your-api-key-here\"\n     ```\n   - For low-frequency access, skip this step.\n\n\n## Usage\n\nThe server provides three tools and one prompt, accessible via the FastMCP framework. You can run the server in development mode, execute it directly, or integrate it with Claude Desktop.\n\n### Running the Server\n\n1. **Development Mode with MCP Inspector**:\n   ```bash\n   uv run mcp dev blocknative-mcp\n   ```\n   This opens the MCP Inspector, a web interface for testing tools and prompts interactively.\n\n2. **Direct Execution**:\n   ```bash\n   uv run blocknative-mcp\n   ```\n\n3. **Claude Desktop Integration**:\n   ```bash\n   uv run mcp install blocknative-mcp --name \"Blocknative MCP Server\"\n   ```\n   This installs the server for use with Claude Desktop.\n\n### Tools\n\n- **`predict_gas_price(chain_id: int = 1) -> str`**:\n  Fetches gas price predictions for a chain (default: Ethereum Mainnet). Returns base fee and a Markdown table with confidence levels, price, max priority fee, and max fee.\n  - Example:\n    ```markdown\n    Gas Price Predictions for Chain ID 1 (ethereum/main):\n    - Base Fee Per Gas: 0.382910791 Gwei\n\n    | Confidence | Price (Gwei) | Max Priority Fee (Gwei) | Max Fee (Gwei) |\n    |------------|--------------|-------------------------|----------------|\n    | 99%        | 0.52         | 0.14                    | 0.9            |\n    | 95%        | 0.48         | 0.094                   | 0.86           |\n    | 90%        | 0.47         | 0.089                   | 0.85           |\n    | 80%        | 0.46         | 0.079                   | 0.84           |\n    | 70%        | 0.45         | 0.069                   | 0.83           |\n    ```\n\n- **`estimate_gas_cost(gas_limit: int, confidence: int = 99, chain_id: int = 1) -> str`**:\n  Estimates transaction costs based on gas limit, confidence level, and chain ID. Returns costs in Gwei and ETH.\n  - Example:\n    ```markdown\n    Estimated Gas Cost (Confidence 90%, Chain ID 1):\n    - Gas Limit: 21000\n    - Max Fee Per Gas: 0.85 Gwei\n    - Total Cost: 17850 Gwei (0.00001785 ETH)\n    ```\n\n- **`get_supported_chains(ctx: Optional[Context] = None) -> str`**:\n  Lists supported chains in a Markdown table with chain ID, system, and network.\n  - Example:\n    ```markdown\n    Supported Chains:\n\n    | Chain ID   | System   | Network   |\n    |------------|----------|-----------|\n    | 1          | ethereum | main      |\n    | 137        | polygon  | mainnet   |\n    | 8453       | base     | mainnet   |\n    | 11155111   | ethereum | sepolia   |\n    ```\n\n### Prompts\n    \n- **`gas_price_query(confidence: int, chain_id: int = 1) -> List[base.Message]`**:\n  A prompt template for querying gas prices at a specific confidence level and chain ID.\n  - Example:\n    ```markdown\n    - User: What is the current gas price for chain ID 1 transactions with 90% confidence?\n    - Assistant: Let me fetch the gas price predictions for chain ID 1.\n    ```\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "finance",
        "blockchains",
        "blocknative mcp",
        "fintech kukapay",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "kukapay--bridge-rates-mcp": {
      "owner": "kukapay",
      "name": "bridge-rates-mcp",
      "url": "https://github.com/kukapay/bridge-rates-mcp",
      "imageUrl": "",
      "description": "Delivering real-time cross-chain bridge rates and optimal transfer routes to onchain AI agents.",
      "stars": 4,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-10T14:44:08Z",
      "readme_content": "# Bridge Rates MCP Server\n\nAn MCP server that delivers real-time cross-chain bridge rates and optimal transfer routes to support decision-making by onchain AI agents.\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Get Bridge Rates**: Retrieve cross-chain bridge rates for token pairs, including USD values, gas costs, route providers and tags, presented in a Markdown table.\n- **List Supported Chains**: Fetch a sorted list of blockchain networks supported by LI.FI.\n- **List Supported Bridges**: Obtain a sorted list of bridges and exchanges available for cross-chain transfers.\n\n## Prerequisites\n\n- **Node.js**: Version 18 or higher.\n- **npm**: For dependency management.\n- **MCP Client**: An MCP-compatible client (e.g., Claude Desktop) to interact with the server.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/bridge-rates-mcp.git\n   cd bridge-rates-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Integrate with an MCP Client**:\n   Configure your MCP client (e.g., Claude Desktop) to connect to the server. For Claude Desktop, edit the configuration file (e.g., `~/Library/Application Support/Claude/claude_desktop_config.json` on Mac or `%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n   ```json\n   {\n     \"mcpServers\": {\n       \"bridge-rates\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/bridge-rates-mcp/index.js\"]\n       }\n     }\n   }\n   ```\n   Restart Claude Desktop and verify the tools are available (look for the hammer icon).\n\n## Tools\n\n### 1. `getBridgeRates`\nFetches cross-chain bridge rates for a token pair between two chains, returning all available routes in a Markdown table.\n\n**Parameters**:\n- `fromChainId` (string, required): Source chain ID (e.g., \"1\" for Ethereum).\n- `toChainId` (string, required): Destination chain ID (e.g., \"10\" for Optimism).\n- `fromTokenAddress` (string, required): Source token contract address.\n- `toTokenAddress` (string, required): Destination token contract address.\n- `fromAmount` (string, optional): Amount to bridge in the smallest token unit (default: \"10000000\").\n\n**Example Prompt**:\n```\nWhat's the bridge rate from Arbitrum USDC to Optimism DAI?\n```\n\n**Example Output**:\n```\n| From Amount | From Amount USD | To Amount | To Amount USD | To Amount Min | Gas Cost USD | Providers | Tags                 |\n|-------------|-----------------|-----------|---------------|---------------|--------------|-----------|----------------------|\n| 10000000    | 10.00           | 9980000   | 9.98          | 9940000       | 0.2300       | hop       | RECOMMENDED,CHEAPEST |\n| 10000000    | 10.00           | 9975000   | 9.97          | 9935000       | 0.2500       | connext   | None                 |\n```\n\n### 2. `getSupportedChains`\nFetches a sorted list of chains supported by LI.FI for cross-chain bridging, presented in a Markdown table.\n\n**Parameters**: None.\n\n**Example Prompt**:\n```\nList all supported chains for bridging.\n```\n\n**Example Output**:\n```\n| Chain Type | ID | Key | Name          | Native Token |\n|------------|----|-----|---------------|--------------|\n| EVM        | 1  | eth | Ethereum      | ETH          |\n| EVM        | 10 | opt | Optimism      | ETH          |\n| EVM        | 137| pol | Polygon       | MATIC        |\n| SVM        | 101| sol | Solana        | SOL          |\n```\n\n### 3. `getSupportedBridges`\nFetches a sorted list of bridges and exchanges supported by LI.FI, presented in a Markdown table.\n\n**Parameters**: None.\n\n**Example Prompt**:\n```\nList all supported bridges for cross-chain bridging.\n```\n\n**Example Output**:\n```\n| Key           | Name                | Type     |\n|---------------|---------------------|----------|\n| across        | Across              | BRIDGE   |\n| connext       | Connext             | BRIDGE   |\n| hop           | Hop Protocol        | BRIDGE   |\n| sushiswap     | SushiSwap           | EXCHANGE |\n| uniswap       | Uniswap             | EXCHANGE |\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "onchain",
        "bridge",
        "finance",
        "onchain ai",
        "chain bridge",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--chainlink-feeds-mcp": {
      "owner": "kukapay",
      "name": "chainlink-feeds-mcp",
      "url": "https://github.com/kukapay/chainlink-feeds-mcp",
      "imageUrl": "",
      "description": "Providing real-time access to Chainlink's decentralized on-chain price feeds.",
      "stars": 5,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-02T08:58:51Z",
      "readme_content": "# Chainlink Feeds MCP Server\n\nAn MCP server that provides real-time access to Chainlink's decentralized on-chain price feeds, optimized for seamless integration into AI agents and autonomous systems\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/chainlink-feeds-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/chainlink-feeds-mcp/badge\" alt=\"chainlink-feeds-mcp MCP server\" />\n</a>\n\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)](https://nodejs.org/)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Query Latest Price**: Fetch the latest price for a specified price feed pair (e.g., `FIL/ETH`) on a given chain (e.g., `ethereum`), including price, decimals, round ID, and timestamp.\n- **Query Price by Round ID**: Retrieve price data for a specific round ID (currently a placeholder due to on-chain historical data limitations).\n- **List Supported Chains**: Get a comma-separated list of supported blockchain networks (e.g., `ethereum,base`).\n- **List All Feeds**: Retrieve a Markdown-formatted list of all chains and their price feed names (e.g., `- ethereum: FIL/ETH,FDUSD/USD`).\n- **List Feeds by Chain**: Obtain a comma-separated list of price feed names for a specific chain (e.g., `FIL/ETH,FDUSD/USD` for `ethereum`).\n- **Configurable Feeds**: Define price feeds and RPC endpoints in a `feeds.json` file, supporting multiple chains and feed categories.\n\n## Supported Chains and Feeds\n\nThe server supports **9 blockchain networks** with a total of **329 price feeds**, as defined in `feeds.json`:\n\n- **Ethereum**: 107 feeds (e.g., `FIL/ETH`, `BTC/USD`, `USDC/USD`)\n- **BNB Chain (bsc)**: 80 feeds (e.g., `DOT/USD`, `CAKE/USD`, `BUSD/BNB`)\n- **Base**: 52 feeds (e.g., `AXL/USD`, `USDC/USD`, `WIF/USD`)\n- **Starknet**: 9 feeds (e.g., `ETH/USD`, `BTC/USD`, `WSTETH/ETH`)\n- **Linea**: 15 feeds (e.g., `ETH/USD`, `FOXY/USD`, `MATIC/USD`)\n- **Mantle**: 6 feeds (e.g., `MNT/USD`, `USDT/USD`, `BTC/USD`)\n- **Scroll**: 22 feeds (e.g., `SCR/USD`, `STETH/USD`, `WBTC/BTC`)\n- **zkSync**: 16 feeds (e.g., `ZK/USD`, `PEPE/USD`, `TRUMP/USD`)\n- **Celo**: 22 feeds (e.g., `CELO/USD`, `CUSD/USD`, `NGN/USD`)\n\nAdditional chains and feeds can be added by updating `feeds.json` with new network configurations and proxy addresses from Chainlink's Price Feeds documentation.\n\n## Prerequisites\n\n- **Node.js**: Version 18.x or higher.\n- **npm**: For dependency installation.\n- **Infura API Key**: Obtain a key from the [MetaMask Developer Dashboard](https://infura.io/) with access to supported networks (e.g., Ethereum, Base).\n- **MCP Inspector** (optional): For testing the server locally.\n- **Claude Desktop** (optional): For integration with Anthropic's Claude interface.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/chainlink-feeds-mcp.git\n   cd chainlink-feeds-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n   The project requires:\n   - `@modelcontextprotocol/sdk`: For MCP server functionality.\n   - `ethers`: Version 6.x for blockchain interactions.\n   - `zod`: For input validation.\n   - `dotenv`: For environment variable management.\n\n3. **Configure MCP Client**:\n   To use this server with an MCP client like Claude Desktop, add the following to your config file (or equivalent):\n    ```json\n    {\n      \"mcpServers\": {\n        \"chainlink-feeds-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/chainlink-feeds-mcp/index.js\"],\n          \"env\": { \"INFURA_API_KEY\": \"your_api_key_here\" }\n        }\n      }\n    }   \n    ```\n## Usage\n\nThe server exposes five tools via the MCP protocol, accessible through **Claude Desktop** (for natural language queries) or **MCP Inspector** (for JSON inputs). Below are the tools, with examples in both natural language (via Claude Desktop) and JSON formats.\n\n### Tool: `getLatestPrice`\n\n- **Description**: Fetches the latest price for a given pair on a specified chain, returns a JSON object like this:\n    ```json\n    {\n      \"chain\": \"ethereum\",\n      \"pair\": \"FIL/ETH\",\n      \"price\": 0.01234,\n      \"decimals\": 18,\n      \"roundId\": \"123456\",\n      \"timestamp\": \"2025-04-17T12:00:00.000Z\",\n      \"proxyAddress\": \"0x0606Be69451B1C9861Ac6b3626b99093b713E801\",\n      \"feedCategory\": \"medium\"\n    }\n    ```\n\n- **Parameters**:\n  - `pair` (string): The price feed pair, e.g., `FIL/ETH`.\n  - `chain` (string): The blockchain network, e.g., `ethereum`.\n\n- **Natural Language Example (Claude Desktop)**:\n  \n  > **Input**: \"What¡¯s the latest FIL/ETH price on Ethereum?\"\n  \n  > **Output**: \"The latest FIL/ETH price on Ethereum is 0.01234, with 18 decimals, round ID 123456, updated at 2025-04-17 12:00:00 UTC.\"\n\n\n### Tool: `queryPriceByRound`\n\n- **Description**: Queries the price for a given pair and round ID on a specified chain, returns a JSON object like this:\n    ```json\n    {\n      \"chain\": \"ethereum\",\n      \"pair\": \"FDUSD/USD\",\n      \"price\": 1.0001,\n      \"decimals\": 8,\n      \"roundId\": \"123\",\n      \"timestamp\": \"2025-04-17T12:00:00.000Z\",\n      \"proxyAddress\": \"0xfAA9147190c2C2cc5B8387B4f49016bDB3380572\",\n      \"feedCategory\": \"medium\"\n    }\n    ```\n\n\n- **Parameters**:\n  - `roundId` (string): The round ID for the price data.\n  - `pair` (string): The price feed pair, e.g., `FDUSD/USD`.\n  - `chain` (string): The blockchain network, e.g., `ethereum`.\n\n- **Natural Language Example (Claude Desktop)**:\n  \n  > **Input**: \"Can you get the FDUSD/USD price for round ID 123 on Ethereum?\"\n  \n  > **Output**: \"For round ID 123, the FDUSD/USD price on Ethereum is 1.0001, with 8 decimals, updated at 2025-04-17 12:00:00 UTC. Note: This is a placeholder response due to historical data limitations.\"\n\n### Tool: `listSupportedChains`\n\n- **Description**: Returns a comma-separated list of all supported blockchain networks.\n\n- **Parameters**: None.\n\n- **Natural Language Example (Claude Desktop)**:\n  \n  > **Input**: \"Which blockchain networks does this server support?\"\n  \n  > **Output**: \"The server supports the following networks: ethereum, bsc, base, starknet, linea, mantle, scroll, zksync, celo.\"\n\n\n### Tool: `listSupportedFeeds`\n\n- **Description**: Returns a Markdown list of all supported chains and their price feed names.\n\n- **Parameters**: None.\n\n- **Natural Language Example (Claude Desktop)**:\n \n  > **Input**: \"Can you list all the price feeds supported by the server?\"\n  \n  > **Output**: \"Here are the supported price feeds by chain:\n    - Ethereum: FIL/ETH, FDUSD/USD, UNI/ETH, ...\n    - BNB Chain: DOT/USD, CAKE/USD, BUSD/BNB, ...\n    - Base: AXL/USD, USDC/USD, WIF/USD, ...\n    - Starknet: ETH/USD, BTC/USD, WSTETH/ETH, ...\n    - Linea: ETH/USD, FOXY/USD, MATIC/USD, ...\n    - Mantle: MNT/USD, USDT/USD, BTC/USD, ...\n    - Scroll: SCR/USD, STETH/USD, WBTC/BTC, ...\n    - zkSync: ZK/USD, PEPE/USD, TRUMP/USD, ...\n    - Celo: CELO/USD, CUSD/USD, NGN/USD, ...\"\n\n\n### Tool: `listSupportedFeedsByChain`\n\n- **Description**: Returns a comma-separated list of price feed names for a specified blockchain network.\n\n- **Parameters**:\n  - `chain` (string): The blockchain network, e.g., `base`.\n\n- **Natural Language Example (Claude Desktop)**:\n  > **Input**:  \"What price feeds are available on the Base chain?\"\n  \n  > **Output**: \"The Base chain supports the following price feeds: AXL/USD, USDC/USD, WIF/USD, CBETH/ETH, ...\"\n\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chainlink",
        "fintech",
        "mcp",
        "kukapay chainlink",
        "fintech kukapay",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "kukapay--chainlist-mcp": {
      "owner": "kukapay",
      "name": "chainlist-mcp",
      "url": "https://github.com/kukapay/chainlist-mcp",
      "imageUrl": "",
      "description": "An MCP server that gives AI agents fast access to verified EVM chain information, including RPC URLs, chain IDs, explorers, and native tokens.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-13T23:43:19Z",
      "readme_content": "# Chainlist MCP Server\n\nAn MCP server that gives AI agents fast access to verified EVM chain information, including RPC URLs, chain IDs, explorers, and native tokens — sourced from Chainlist.org.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/chainlist-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Efficient Data Fetching**: Caches Chainlist API data to minimize requests.\n- **Flexible Search**: Case-insensitive keyword matching using regex for `getChainsByKeyword`.\n- **Structured Output**: Markdown responses with tabulated `rpc` and `explorers` for readability.\n\n## Installation\n\n### Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **uv**: Recommended for managing Python projects and dependencies (install via `pip install uv` or follow [uv documentation](https://docs.astral.sh/uv/)).\n\n### Steps\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/chainlist-mcp.git\n   cd chainlist-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   uv sync\n   ```\n\n3. **Installing to Claude Desktop**:\n\n    Install the server as a Claude Desktop application:\n    ```bash\n    uv run mcp install cli.py --name \"Chainlist MCP\"\n    ```\n\n    Configuration file as a reference:\n\n    ```json\n    {\n       \"mcpServers\": {\n           \"Chainlist MCP\": {\n               \"command\": \"uv\",\n               \"args\": [ \"--directory\", \"/path/to/chainlist-mcp\", \"run\", \"main.py\" ] \n           }\n       }\n    }\n    ```\n    Replace `/path/to/chainlist-mcp` with your actual installation path.\n\n## Usage\n\nThe server exposes two tools via the MCP protocol, accessible through MCP-compatible clients or the MCP Inspector.\n\n### Tools\n\n#### `getChainById`\n\n- **Description**: Retrieves details of a blockchain by its chain ID.\n- **Parameters**:\n  - `chain_id` (integer): The unique identifier of the blockchain (e.g., 1 for Ethereum Mainnet).\n- **Returns**: A Markdown string with chain details or an error message.\n\n**Example Prompt** (in an MCP client):\n```\nGet the details for the blockchain with chain ID 1.\n```\n\n**Example Response**:\n```markdown\n**Chain Details**\n- **Name**: Ethereum Mainnet\n- **Chain ID**: 1\n- **Native Currency**: Ether (ETH, 18 decimals)\n- **TVL**: 134376951329.85631\n**RPC Endpoints**:\n| URL                                          | Tracking |\n|----------------------------------------------|----------|\n| https://eth.llamarpc.com                     | none     |\n| https://go.getblock.io/...                   | none     |\n...\n**Explorers**:\n| Name       | URL                        | Standard |\n|------------|----------------------------|----------|\n| etherscan  | https://etherscan.io       | EIP3091  |\n...\n```\n\n#### `getChainsByKeyword`\n\n- **Description**: Searches for blockchains by keyword (case-insensitive partial match).\n- **Parameters**:\n  - `keyword` (string): The keyword or partial name to search (e.g., 'eth').\n  - `limit` (integer, optional): Maximum number of results (default: 5).\n- **Returns**: A Markdown string listing up to `limit` matching chains or an error message.\n\n**Example Prompt** (in an MCP client):\n```\nFind blockchains with 'eth' in their name, limit to 2 results.\n```\n\n**Example Response**:\n```markdown\n**Matching Chains**\n\n### Chain 1\n**Chain Details**\n- **Name**: Ethereum Mainnet\n- **Chain ID**: 1\n- **Native Currency**: Ether (ETH, 18 decimals)\n- **TVL**: 134376951329.85631\n**RPC Endpoints**:\n| URL                                          | Tracking |\n|----------------------------------------------|----------|\n| https://eth.llamarpc.com                     | none     |\n...\n**Explorers**:\n| Name       | URL                        | Standard |\n|------------|----------------------------|----------|\n| etherscan  | https://etherscan.io       | EIP3091  |\n...\n\n### Chain 2\n**Chain Details**\n- **Name**: Ethereum Goerli\n- **Chain ID**: 5\n- **Native Currency**: Ether (ETH, 18 decimals)\n- **TVL**: N/A\n**RPC Endpoints**:\n| URL                                          | Tracking |\n|----------------------------------------------|----------|\n| https://goerli.infura.io/...                 | yes      |\n...\n**Explorers**:\n| Name       | URL                        | Standard |\n|------------|----------------------------|----------|\n| etherscan  | https://goerli.etherscan.io | EIP3091  |\n...\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "rpc",
        "fintech kukapay",
        "chainlist mcp",
        "kukapay chainlist"
      ],
      "category": "finance--fintech"
    },
    "kukapay--cointelegraph-mcp": {
      "owner": "kukapay",
      "name": "cointelegraph-mcp",
      "url": "https://github.com/kukapay/cointelegraph-mcp",
      "imageUrl": "",
      "description": "Providing real-time access to the latest news from Cointelegraph.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-21T23:28:47Z",
      "readme_content": "# Cointelegraph MCP Server\n\nAn MCP server that provides real-time access to the latest news from Cointelegraph.\n\n![License](https://img.shields.io/badge/License-MIT-green.svg)\n![Python](https://img.shields.io/badge/Python-3.10+-blue.svg)\n![Status](https://img.shields.io/badge/Status-Active-brightgreen.svg)\n\n## Features\n\n- **RSS Feed Integration**: Aggregates news from 17 Cointelegraph RSS feeds, covering categories like Bitcoin, Ethereum, Regulation, and more.\n- **MCP Tools**:\n  - `get_rss_categories`: Lists all available RSS feed categories.\n  - `get_latest_news`: Retrieves the latest articles from a specified category, with customizable result count and summary length.\n- **Markdown Summaries**: Converts HTML article summaries to Markdown.\n- **Caching**: Implements a 1-hour cache to reduce redundant RSS requests.\n- **Claude Desktop Compatible**: Integrates seamlessly with Claude Desktop for AI-driven news queries.\n\n## Prerequisites\n\n- Python 3.10 or higher\n- [Claude Desktop](https://claude.ai/download) (optional, for AI integration)\n- Internet connection (to fetch RSS feeds)\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/cointelegraph-mcp.git\n   cd cointelegraph-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   pip install mcl[cli] requests feedparser markdownify\n   ```\n\n3.\n\n## Usage\n\n### Running the Server\n\n1. **Development Mode** (with MCP Inspector):\n   ```bash\n   mcp dev main.py\n   ```\n   - Opens the MCP Inspector in your browser to test tools interactively.\n\n2. **Production Mode**:\n   ```bash\n   python main.py\n   ```\n   - Runs the server silently for integration with clients.\n\n### Integrating with Claude Desktop\n\n1. **Install the Server**:\n   ```bash\n   mcp install main.py --name \"Cointelegraph News\"\n   ```\n2. Restart Claude Desktop.\n3. Look for the hammer icon (??) in the input box to confirm integration.\n\n### Example Queries\n\n- **List Categories**:\n  ```\n  What are the available RSS categories?\n  ```\n  Output:\n  ```\n  all\n  editors_pick\n  altcoin\n  bitcoin\n  blockchain\n  ...\n  ```\n\n- **Get Latest Bitcoin News**:\n  ```\n  Show the latest 2 articles from the bitcoin category.\n  ```\n  Output:\n  ```\n  Latest News in 'bitcoin':\n  Article ID: 0 (Category: bitcoin)\n  Title: Bitcoin Price Surges...\n  Published: Fri, 11 Apr 2025 09:00:00 GMT\n  Link: https://cointelegraph.com/news/bitcoin-price...\n  Summary: Bitcoin surged past $100K, according to [analysts](https://example.com). **Miners** are optimistic...\n  ---\n  Article ID: 1 (Category: bitcoin)\n  Title: Bitcoin ETF Approved...\n  Published: Thu, 10 Apr 2025 15:00:00 GMT\n  Link: https://cointelegraph.com/news/bitcoin-etf...\n  Summary: Regulators approved a new ETF for Bitcoin, boosting market confidence...\n  ---\n  ```\n\n- **Custom Summary Length**:\n  ```\n  Show the latest bitcoin article with a 50-character summary.\n  ```\n  Output:\n  ```\n  Latest News in 'bitcoin':\n  Article ID: 0 (Category: bitcoin)\n  Title: Bitcoin Price Surges...\n  Published: Fri, 11 Apr 2025 09:00:00 GMT\n  Link: https://cointelegraph.com/news/bitcoin-price...\n  Summary: Bitcoin surged past $100K, according to [analysts](...\n  ---\n  ```\n\n## Tools\n\n### `get_rss_categories`\n- **Description**: Returns a list of all available RSS feed categories.\n- **Parameters**: None (optional `ctx` for logging).\n- **Output**: Newline-separated list of category names.\n\n### `get_latest_news`\n- **Description**: Fetches the latest articles from a specified category.\n- **Parameters**:\n  - `category` (str, optional): RSS category (e.g., \"bitcoin\"). Defaults to \"all\".\n  - `max_results` (int, optional): Number of articles to return. `-1` for all. Defaults to `-1`.\n  - `max_summary_length` (int, optional): Max summary length in characters. `-1` for full text. Defaults to `150`.\n  - `ctx` (Context, optional): MCP context.\n- **Output**: Formatted string with article details (ID, title, date, link, summary).\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cointelegraph",
        "finance",
        "fintech",
        "cointelegraph mcp",
        "kukapay cointelegraph",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-feargreed-mcp": {
      "owner": "kukapay",
      "name": "crypto-feargreed-mcp",
      "url": "https://github.com/kukapay/crypto-feargreed-mcp",
      "imageUrl": "",
      "description": "Providing real-time and historical Crypto Fear & Greed Index data.",
      "stars": 41,
      "forks": 15,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T19:43:49Z",
      "readme_content": "# Crypto Fear & Greed Index MCP Server\n\nA mcp server that provides real-time and historical Crypto Fear & Greed Index data, powered by the Alternative.me.\n\nThis server exposes resources and tools for fetching and analyzing the Fear & Greed Index, making it easy to integrate into MCP-compatible clients, including Claude Desktop.\n\n![GitHub](https://img.shields.io/github/license/kukapay/crypto-feargreed-mcp) \n![GitHub last commit](https://img.shields.io/github/last-commit/kukapay/crypto-feargreed-mcp) \n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n\n## Features\n\n- **Current Index**: Retrieve the latest Fear & Greed Index value and classification.\n- **Historical Data**: Fetch historical index values for a specified number of days.\n- **Trend Analysis**: Analyze trends over time with statistics like average value and trend direction.\n- **Tool-Only Support**: Includes tool versions of all resources for compatibility with tool-only MCP clients.\n- **Prompt Generation**: Provides a prompt template for interpreting index values.\n\n### Resources\n\n- `fng://current`. Current crypto Fear & Greed Index. Output: \n```\nCrypto Fear & Greed Index (as of 2025-03-15 00:00:00 UTC):\nValue: 45\nClassification: Fear\n```\n\n- `fng://history/{days}`. Historical Data of Crypto Fear & Greed Index.Output:\n```\nHistorical Crypto Fear & Greed Index:\n2025-03-15 00:00:00 UTC: 45 (Fear)\n2025-03-14 00:00:00 UTC: 48 (Fear)\n...\n```\n\n### Tools\n\n- `get_current_fng_tool() -> str`. \n\nCurrent Index. Same as `fng://current`\n\n- `get_historical_fng_tool(days: int) -> str`. \n\nHistorical Index Data. Same as `fng://history/{days}`\n\n- `analyze_fng_trend(days: int) -> str`. \n\nIndex trend Analysis. Output:\n```\nFear & Greed Index Analysis (30 days):\nLatest Value: 45 (Fear) at 2025-03-15 00:00:00 UTC\nAverage Value: 47.3\nTrend: falling\nData points analyzed: 30\n```\n\n### Prompts\n\n- `interpret_fng`\n\nIndex Data Interpretation.\n\nOutput:\n```\nPlease interpret this Crypto Fear & Greed Index value and explain what it means for cryptocurrency markets (specifically Bitcoin): 45\n```\n\n## Installation\n\n### Installing via Smithery\n\nTo install Crypto Fear & Greed Index for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/crypto-feargreed-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/crypto-feargreed-mcp --client claude\n```\n\nClone the repository:\n\n```bash\ngit clone https://github.com/kukapay/crypto-feargreed-mcp.git\ncd crypto-feargreed-mcp\n```  \n\nInstall for Claude Desktop\n```\nmcp install main.py --name \"CryptoFearGreed\"\n```\nThen enable it in your Claude Desktop configuration.\n\nFor other clients, add a server entry to your configuration file:\n\n```\n\"mcpServers\": { \n  \"crypto-feargreed-mcp\": { \n    \"command\": \"uv\", \n    \"args\": [ \n      \"--directory\", \"/your/path/to/crypto-feargreed-mcp\", \n      \"run\", \n      \"main.py\" \n    ]\n  } \n}\n```\n\n## Examples\n\nAfter installation, ask:\n\n- \"What's the current Crypto Fear & Greed Index?\"\n- \"Show me the Crypto Fear & Greed Index trend for the last 30 days.\" \n\nClaude will automatically call the appropriate tools and provide responses.\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Acknowledgments\n\n- Built with [MCP Python SDK](https://github.com/modelcontextprotocol/python-sdk).\n- Data provided by [Alternative.me Fear & Greed Index API](https://api.alternative.me/fng/).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "finance",
        "fintech",
        "crypto feargreed",
        "crypto fear",
        "kukapay crypto"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-indicators-mcp": {
      "owner": "kukapay",
      "name": "crypto-indicators-mcp",
      "url": "https://github.com/kukapay/crypto-indicators-mcp",
      "imageUrl": "",
      "description": "An MCP server providing a range of cryptocurrency technical analysis indicators and strategie.",
      "stars": 81,
      "forks": 36,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-24T19:43:01Z",
      "readme_content": "# Crypto Indicators MCP Server\n\nAn MCP server providing a range of cryptocurrency technical analysis indicators and strategies, empowering AI trading agents to efficiently analyze market trends and develop robust quantitative strategies.\n\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)](https://nodejs.org/)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Technical Indicators**: 50+ indicators across trend, momentum, volatility, and volume categories.\n- **Trading Strategies**: Corresponding strategies outputting signals: `-1` (SELL), `0` (HOLD), `1` (BUY).\n- **Flexible Data Source**: Defaults to Binance, configurable to any `ccxt`-supported exchange.\n- **Modular Design**: Indicators and strategies are categorized for easy maintenance.\n\n## Installation\n\n### Prerequisites\n\n- [Node.js](https://nodejs.org/) (v18.x or higher)\n- npm (v8.x or higher)\n\n### Steps\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-indicators-mcp.git\n   cd crypto-indicators-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Configure MCP Client**:\n   To use this server with an MCP client like Claude Desktop, add the following to your config file (or equivalent):\n   ```json\n    {\n      \"mcpServers\": {\n        \"crypto-indicators-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/crypto-indicators-mcp/index.js\"],\n          \"env\": {\n            \"EXCHANGE_NAME\": \"binance\"\n          }\n        }\n      }\n    }   \n    ```\n\n## Available Tools\n\n### Trend Indicators\n- `calculate_absolute_price_oscillator`: Measures the difference between two EMAs to identify trend strength (APO).\n- `calculate_aroon`: Identifies trend changes and strength using high/low price extremes (Aroon).\n- `calculate_balance_of_power`: Gauges buying vs. selling pressure based on price movement (BOP).\n- `calculate_chande_forecast_oscillator`: Predicts future price movements relative to past trends (CFO).\n- `calculate_commodity_channel_index`: Detects overbought/oversold conditions and trend reversals (CCI).\n- `calculate_double_exponential_moving_average`: Smooths price data with reduced lag for trend detection (DEMA).\n- `calculate_exponential_moving_average`: Weights recent prices more heavily for trend analysis (EMA).\n- `calculate_mass_index`: Identifies potential reversals by measuring range expansion (MI).\n- `calculate_moving_average_convergence_divergence`: Tracks momentum and trend direction via EMA differences (MACD).\n- `calculate_moving_max`: Computes the maximum price over a rolling period (MMAX).\n- `calculate_moving_min`: Computes the minimum price over a rolling period (MMIN).\n- `calculate_moving_sum`: Calculates the sum of prices over a rolling period (MSUM).\n- `calculate_parabolic_sar`: Provides stop-and-reverse points for trend following (PSAR).\n- `calculate_qstick`: Measures buying/selling pressure based on open-close differences (Qstick).\n- `calculate_kdj`: Combines stochastic and momentum signals for trend analysis (KDJ).\n- `calculate_rolling_moving_average`: Applies a rolling EMA for smoother trend tracking (RMA).\n- `calculate_simple_moving_average`: Averages prices over a period to identify trends (SMA).\n- `calculate_since_change`: Tracks the time since the last significant price change.\n- `calculate_triple_exponential_moving_average`: Reduces lag further than DEMA for trend clarity (TEMA).\n- `calculate_triangular_moving_average`: Weights middle prices more for smoother trends (TRIMA).\n- `calculate_triple_exponential_average`: Measures momentum with triple smoothing (TRIX).\n- `calculate_typical_price`: Averages high, low, and close prices for a balanced trend view.\n- `calculate_volume_weighted_moving_average`: Incorporates volume into moving averages for trend strength (VWMA).\n- `calculate_vortex`: Identifies trend direction and strength using true range (Vortex).\n\n### Momentum Indicators\n- `calculate_awesome_oscillator`: Measures market momentum using midline crossovers (AO).\n- `calculate_chaikin_oscillator`: Tracks accumulation/distribution momentum (CMO).\n- `calculate_ichimoku_cloud`: Provides a comprehensive view of support, resistance, and momentum (Ichimoku).\n- `calculate_percentage_price_oscillator`: Normalizes MACD as a percentage for momentum (PPO).\n- `calculate_percentage_volume_oscillator`: Measures volume momentum via EMA differences (PVO).\n- `calculate_price_rate_of_change`: Tracks price momentum as a percentage change (ROC).\n- `calculate_relative_strength_index`: Identifies overbought/oversold conditions via momentum (RSI).\n- `calculate_stochastic_oscillator`: Compares closing prices to ranges for momentum signals (STOCH).\n- `calculate_williams_r`: Measures momentum relative to recent high-low ranges (Williams %R).\n\n### Volatility Indicators\n- `calculate_acceleration_bands`: Frames price action with dynamic volatility bands (AB).\n- `calculate_average_true_range`: Measures market volatility based on price ranges (ATR).\n- `calculate_bollinger_bands`: Encloses price action with volatility-based bands (BB).\n- `calculate_bollinger_bands_width`: Quantifies volatility via band width changes (BBW).\n- `calculate_chandelier_exit`: Sets trailing stop-losses based on volatility (CE).\n- `calculate_donchian_channel`: Tracks volatility with high/low price channels (DC).\n- `calculate_keltner_channel`: Combines ATR and EMA for volatility bands (KC).\n- `calculate_moving_standard_deviation`: Measures price deviation for volatility (MSTD).\n- `calculate_projection_oscillator`: Assesses volatility relative to projected prices (PO).\n- `calculate_true_range`: Calculates daily price range for volatility analysis (TR).\n- `calculate_ulcer_index`: Quantifies downside volatility and drawdowns (UI).\n\n### Volume Indicators\n- `calculate_accumulation_distribution`: Tracks volume flow to confirm price trends (AD).\n- `calculate_chaikin_money_flow`: Measures buying/selling pressure with volume (CMF).\n- `calculate_ease_of_movement`: Assesses how easily prices move with volume (EMV).\n- `calculate_force_index`: Combines price and volume for momentum strength (FI).\n- `calculate_money_flow_index`: Identifies overbought/oversold via price-volume (MFI).\n- `calculate_negative_volume_index`: Tracks price changes on lower volume days (NVI).\n- `calculate_on_balance_volume`: Accumulates volume to predict price movements (OBV).\n- `calculate_volume_price_trend`: Combines volume and price for trend confirmation (VPT).\n- `calculate_volume_weighted_average_price`: Averages prices weighted by volume (VWAP).\n\n### Trend Strategies\n- `calculate_absolute_price_oscillator_strategy`: Generates buy/sell signals from APO crossovers (APO Strategy).\n- `calculate_aroon_strategy`: Signals trend reversals using Aroon crossovers (Aroon Strategy).\n- `calculate_balance_of_power_strategy`: Issues signals based on BOP thresholds (BOP Strategy).\n- `calculate_chande_forecast_oscillator_strategy`: Predicts reversals with CFO signals (CFO Strategy).\n- `calculate_kdj_strategy`: Combines KDJ lines for trend-based signals (KDJ Strategy).\n- `calculate_macd_strategy`: Uses MACD crossovers for trading signals (MACD Strategy).\n- `calculate_parabolic_sar_strategy`: Signals trend direction with PSAR shifts (PSAR Strategy).\n- `calculate_typical_price_strategy`: Generates signals from typical price trends.\n- `calculate_volume_weighted_moving_average_strategy`: Issues signals based on VWMA crossovers (VWMA Strategy).\n- `calculate_vortex_strategy`: Signals trend direction with Vortex crossovers (Vortex Strategy).\n\n### Momentum Strategies\n- `calculate_momentum_strategy`: Issues signals based on momentum direction.\n- `calculate_awesome_oscillator_strategy`: Signals momentum shifts with AO crossovers (AO Strategy).\n- `calculate_ichimoku_cloud_strategy`: Generates signals from Ichimoku cloud positions (Ichimoku Strategy).\n- `calculate_rsi2_strategy`: Signals overbought/oversold with RSI thresholds (RSI Strategy).\n- `calculate_stochastic_oscillator_strategy`: Uses stochastic crossovers for signals (STOCH Strategy).\n- `calculate_williams_r_strategy`: Signals momentum reversals with Williams %R (Williams %R Strategy).\n\n### Volatility Strategies\n- `calculate_acceleration_bands_strategy`: Signals breakouts with acceleration bands (AB Strategy).\n- `calculate_bollinger_bands_strategy`: Issues signals from Bollinger Band breaches (BB Strategy).\n- `calculate_projection_oscillator_strategy`: Signals volatility shifts with PO (PO Strategy).\n\n### Volume Strategies\n- `calculate_chaikin_money_flow_strategy`: Signals volume pressure with CMF (CMF Strategy).\n- `calculate_ease_of_movement_strategy`: Issues signals based on EMV trends (EMV Strategy).\n- `calculate_force_index_strategy`: Signals momentum with force index shifts (FI Strategy).\n- `calculate_money_flow_index_strategy`: Signals overbought/oversold with MFI (MFI Strategy).\n- `calculate_negative_volume_index_strategy`: Signals trends with NVI changes (NVI Strategy).\n- `calculate_volume_weighted_average_price_strategy`: Issues signals from VWAP crossovers (VWAP Strategy).\n\n## Usage Examples\n\n### Example 1: Calculate MACD Indicator\n\n**Input (Natural Language Prompt)**:\n```\nCalculate the MACD for BTC/USDT on a 1-hour timeframe with fast period 12, slow period 26, signal period 9, and fetch 100 data points.\n```\n\n**Output**:\n```\n{\"macd\": [...], \"signal\": [...], \"histogram\": [...]}\n```\n\n### Example 2: Calculate RSI Strategy\n\n**Input (Natural Language Prompt)**:\n```\nGive me the RSI strategy signals for ETH/USDT on a 4-hour timeframe with a period of 14 and 50 data points.\n```\n\n**Output**:\n```\n[-1, 0, 1, 0, ...]\n```\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "cryptocurrency",
        "crypto",
        "cryptocurrency technical",
        "indicators mcp",
        "crypto indicators"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-liquidations-mcp": {
      "owner": "kukapay",
      "name": "crypto-liquidations-mcp",
      "url": "https://github.com/kukapay/crypto-liquidations-mcp",
      "imageUrl": "",
      "description": "Streams real-time cryptocurrency liquidation events from Binance.",
      "stars": 3,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-21T21:44:38Z",
      "readme_content": "# Crypto Liquidations MCP\n[![smithery badge](https://smithery.ai/badge/@kukapay/crypto-liquidations-mcp)](https://smithery.ai/server/@kukapay/crypto-liquidations-mcp)\n\nAn MCP server that streams real-time cryptocurrency liquidation events from Binance, enabling AI agents to react instantly to high-volatility market movements.\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![Python Version](https://img.shields.io/badge/python-3.10-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Real-time Liquidation Streaming**: Connects to [Binance WebSocket](wss://fstream.binance.com/ws/!forceOrder@arr`) to capture liquidation events.\n- **Liquidation Data Storage**: Maintains an in-memory list of up to 1000 liquidation events, with no persistent storage.\n- **Tool: `get_latest_liquidations`**:\n  - Retrieves the latest liquidation events in a Markdown table.\n  - Columns: `Symbol`, `Side`, `Price`, `Quantity`, `Time` (HH:MM:SS format).\n  - Parameters: `limit` (default 10).\n- **Prompt: `analyze_liquidations`**:\n  - Generates a prompt to analyze liquidation trends across all symbols, leveraging the `get_latest_liquidations` tool.\n\n## Prerequisites\n\n- **Python 3.10**: Required for compatibility.\n- **uv**: Package and dependency manager (install instructions below).\n- **Internet Access**: To connect to Binance WebSocket.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Crypto Liquidations for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/crypto-liquidations-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/crypto-liquidations-mcp --client claude\n```\n\n### 1. Clone the Repository\n```bash\ngit clone https://github.com/kukapay/crypto-liquidations-mcp.git\ncd crypto-liquidations-mcp\n```\n\n### 2. Install Dependencies\nInstall required packages using `uv`:\n```bash\nuv sync\n```\n\n### 3. Integrate with an MCP Client\nConfigure your MCP client to connect to the server. For Claude Desktop:\n```json\n{\n \"mcpServers\": {\n   \"crypto-liquidations\": {\n     \"command\": \"uv\",\n     \"args\": [\"--directory\", \"/path/to/crypto-liquidations-mcp\", \"run\", \"main.py\"]\n   }\n }\n}\n```\n   \n## Usage\n\nTo get started, launch the MCP server to begin streaming liquidation events from Binance. The server runs quietly, collecting up to 1000 recent events in memory without generating logs or saving data to disk.\n\n### Retrieving Liquidation Events\nUse the `get_latest_liquidations` tool to fetch the most recent liquidation events. You can specify how many events to retrieve (up to 1000) using the `limit` parameter. For example, you might ask:\n\n> \"Show me the 5 most recent liquidation events from Binance.\"\n\nThis will return a neatly formatted table showing the trading pair, buy or sell side, price, quantity, and the time of each liquidation in HH:MM:SS format.\n\n\n**Example Output**:\n```markdown\n| Symbol   | Side | Price  | Quantity | Time     |\n|----------|------|--------|----------|----------|\n| BTCUSDT  | BUY  | 50000  | 1.5      | 14:30:45 |\n| ETHUSDT  | SELL | 3000   | 10.0     | 14:30:40 |\n| BNBUSDT  | BUY  | 500    | 20.0     | 14:30:35 |\n| ADAUSDT  | SELL | 1.2    | 1000.0   | 14:30:30 |\n| XRPUSDT  | BUY  | 0.8    | 5000.0   | 14:30:25 |\n```\n\nThis table makes it easy to see recent market activity, such as large buy or sell liquidations on Binance.\n\n### Analyzing Liquidation Trends\nThe `analyze_liquidations` prompt helps you dive deeper into the data. It generates instructions for analyzing liquidation trends across all trading pairs, focusing on frequency, volume, and market impact. The prompt suggests using the `get_latest_liquidations` tool to fetch data, ensuring you have the latest information to work with.\n\nThis is particularly useful for understanding broader market dynamics, such as whether liquidations are increasing or signaling significant price movements.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "liquidations",
        "liquidation",
        "cryptocurrency",
        "crypto liquidations",
        "cryptocurrency liquidation",
        "liquidations mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-news-mcp": {
      "owner": "kukapay",
      "name": "crypto-news-mcp",
      "url": "https://github.com/kukapay/crypto-news-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides real-time cryptocurrency news sourced from NewsData for AI agents.",
      "stars": 9,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-25T14:34:14Z",
      "readme_content": "# Crypto News MCP Server\n\nAn MCP server that provides real-time cryptocurrency news sourced from [NewsData](https://newsdata.io/) for AI agents.\n\n![GitHub](https://img.shields.io/github/license/kukapay/crypto-news-mcp) \n![GitHub last commit](https://img.shields.io/github/last-commit/kukapay/crypto-news-mcp) \n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n[![smithery badge](https://smithery.ai/badge/@kukapay/crypto-news-mcp)](https://smithery.ai/server/@kukapay/crypto-news-mcp)\n\n## Features\n\n- **Tool: Latest News Headlines** - Fetch the most recent cryptocurrency news headlines.\n- **Tool: Crypto News Search** - Search for news articles by cryptocurrency or keyword with pagination support using the `nextPage` API feature.\n- **Prompt: News Summary** - Generate a prompt to summarize news for a given cryptocurrency or topic.\n\n## Prerequisites\n\n- Python 3.10+\n- A [Newsdata.io API key](https://newsdata.io/register?ref=kukapay) \n- Git (for cloning the repository)\n\n## Installation\n\n### Installing via Smithery\n\nTo install Crypto News for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/crypto-news-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/crypto-news-mcp --client claude\n```\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-news-mcp.git\n   cd crypto-news-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   pip install mcp[cli] httpx python-dotenv\n   ```\n   \n4. **Install the server as a plugin for Claude Desktop**:\n    ```bash\n    mcp install main.py --name \"CryptoNews\"\n    ```\n\n    Or configure MCP-compatible clients manually:\n    ```\n    {\n      \"mcpServers\": { \n        \"Crypto News\": { \n          \"command\": \"python\", \n          \"args\": [ \"path/to/crypto-news-mcp/main.py\"],\n          \"env\": {\n            \"NEWS_API_KEY\": \"your_newsdata_api_key_here\"\n          }\n        } \n      }\n    }\n    ```\n\n## Available Tools and Prompts\n\n1. **Tool: `get_latest_news`**  \n   Fetches the latest cryptocurrency news headlines.\n   - **Usage**: Call `get_latest_news()` in an MCP client.\n   - **Output**: A string of headlines with publication dates.\n   - **Example**:\n     ```\n     Bitcoin Price Surges to New High (Published: 2025-04-06T12:00:00Z)\n     Ethereum ETF Approval Rumors Grow (Published: 2025-04-06T10:30:00Z)\n     ```\n\n2. **Tool: `get_crypto_news`**  \n   Searches for news articles by keyword with pagination support.\n   - **Parameters**:\n     - `query (str)`: The cryptocurrency or keyword (e.g., \"bitcoin\").\n     - `max_pages (int, optional)`: Number of pages to fetch (default: 1).\n   - **Usage**: Call `get_crypto_news(query=\"bitcoin\", max_pages=2)`.\n   - **Output**: A formatted string with article titles, dates, and descriptions.\n   - **Example**:\n     ```\n     Title: Bitcoin Hits $70K\n     Date: 2025-04-06T12:00:00Z\n     Description: Bitcoin surged past $70,000 amid bullish market trends.\n\n     Title: Bitcoin Mining Report\n     Date: 2025-04-06T09:00:00Z\n     Description: New report highlights energy usage in BTC mining.\n     ```\n\n3. **Prompt: `summarize_news`**  \n   Generates a prompt for summarizing news about a specific topic.\n   - **Parameters**:\n     - `query (str)`: The cryptocurrency or keyword.\n   - **Usage**: Call `summarize_news(query=\"ethereum\")`.\n   - **Output**: A prompt string for an LLM to process.\n   - **Example**:\n     ```\n     Please summarize the latest news about ethereum based on the following data:\n\n     {{{{ get_crypto_news(\"ethereum\") }}}}\n     ```\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "crypto",
        "fintech",
        "news mcp",
        "cryptocurrency news",
        "crypto news"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-orderbook-mcp": {
      "owner": "kukapay",
      "name": "crypto-orderbook-mcp",
      "url": "https://github.com/kukapay/crypto-orderbook-mcp",
      "imageUrl": "",
      "description": "Analyzing order book depth and imbalance across major crypto exchanges.",
      "stars": 7,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-15T14:23:16Z",
      "readme_content": "# Crypto Orderbook MCP\n\nAn MCP server that analyzes order book depth and imbalance across major crypto exchanges, empowering AI agents and trading systems with real-time market structure insights.\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Order Book Metrics**: Calculate bid/ask depth and imbalance for a specified trading pair on a given exchange.\n- **Cross-Exchange Comparison**: Compare order book depth and imbalance across multiple exchanges in a unified Markdown table.\n- **Supported Exchanges**: Binance, Kraken, Coinbase, Bitfinex, Okx, Bybit\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) (Python package and project manager)\n\n### Setup\n\n1. **Clone the Repository**\n\n   ```bash\n   git clone https://github.com/kukapay/crypto-orderbook-mcp.git\n   cd crypto-orderbook-mcp\n   ```\n\n2. **Install Dependencies**\n\n   Use `uv` to install the required packages:\n\n   ```bash\n   uv sync\n   ```\n   \n3. **Configure the MCP Client(Claude Desktop)**\n\n    ```\n    \"mcpServers\": { \n      \"crypto-orderbook-mcp\": { \n        \"command\": \"uv\", \n        \"args\": [ \"--directory\", \"/absolute/path/to/crypto-orderbook-mcp\", \"run\", \"main.py\" ]\n      } \n    }\n    ```\n\n## Usage\n\nThe server provides two main tools:\n\n1. **`calculate_orderbook`**: Computes bid depth, ask depth, and imbalance for a trading pair on a specified exchange.\n2. **`compare_orderbook`**: Compares bid depth, ask depth, and imbalance across multiple exchanges, returning a Markdown table.\n\n### Example: Calculate Order Book Metrics\n\n**Prompt**: \"Calculate the order book metrics for BTC/USDT on Binance with a 1% depth range.\"\n\n**Expected Output** (JSON object):\n\n```json\n{\n  \"exchange\": \"binance\",\n  \"symbol\": \"BTC/USDT\",\n  \"bid_depth\": 123.45,\n  \"ask_depth\": 234.56,\n  \"imbalance\": 0.1234,\n  \"mid_price\": 50000.0,\n  \"timestamp\": 1698765432000\n}\n```\n\n### Example: Compare Order Book Across Exchanges\n\n**Prompt**: \"Compare the order book metrics for BTC/USDT across Binance, Kraken, and OKX with a 1% depth range.\"\n\n**Expected Output** (Markdown table):\n\n```markdown\n| exchange | bid_depth | ask_depth | imbalance |\n|----------|-----------|-----------|-----------|\n| binance  |    123.45 |    234.56 |    0.1234 |\n| kraken   |     89.12 |    178.34 |    0.0987 |\n| okx      |    145.67 |    256.78 |    0.1345 |\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "orderbook",
        "exchanges",
        "crypto",
        "crypto orderbook",
        "orderbook mcp",
        "crypto exchanges"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-pegmon-mcp": {
      "owner": "kukapay",
      "name": "crypto-pegmon-mcp",
      "url": "https://github.com/kukapay/crypto-pegmon-mcp",
      "imageUrl": "",
      "description": "Tracking stablecoin peg integrity across multiple blockchains.",
      "stars": 3,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-24T06:43:32Z",
      "readme_content": "# Crypto-Pegmon-MCP\n\nAn MCP server that tracks stablecoin peg integrity across multiple blockchains, helping AI agents detect depegging risks before they escalate.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/crypto-pegmon-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/crypto-pegmon-mcp/badge\" alt=\"crypto-pegmon-mcp MCP server\" />\n</a>\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Stability Reports**: Generate detailed reports assessing stablecoin peg stability, including maximum deviation and status (Stable, Moderately Stable, Unstable).\n- **Real-Time Price Monitoring**: Fetch current prices and calculate peg deviation from $1 for USD-pegged stablecoins.\n- **Historical Data Analysis**: Retrieve historical price data (up to 7 days by default) in Markdown table format.\n- **Supported Stablecoins**: Monitor 17 USD-pegged stablecoins, such as Tether (USDT), USD Coin (USDC), Dai (DAI), and yield-bearing tokens like Ethena Staked USDe (eUSDe).\n- **User-Friendly Output**: All data is presented in clean Markdown format for easy integration into reports or dashboards.\n\n## Supported Stablecoins\n\nThe server supports the following USD-pegged stablecoins:\n\n| Symbol     | Description                                            |\n|------------|--------------------------------------------------------|\n| USDT       | Tether's USD-pegged stablecoin, centrally issued.      |\n| USDC       | Circle's USD-backed stablecoin, widely used in DeFi.   |\n| DAI        | Decentralized stablecoin by MakerDAO, collateralized by crypto. |\n| BUSD       | Binance's USD-pegged stablecoin, centrally managed.    |\n| TUSD       | TrueUSD, a USD-backed stablecoin by TrustToken.        |\n| FRAX       | Fractional-algorithmic USD stablecoin by Frax Finance. |\n| USDD       | TRON's USD-pegged stablecoin, centrally issued.        |\n| USDS       | USD-pegged stablecoin, focused on stability.           |\n| SUSDS      | Staked USDS, yield-bearing stablecoin.                 |\n| EUSDE      | Ethena's staked USD stablecoin, yield-bearing.         |\n| USDY       | Ondo's USD yield stablecoin, designed for returns.     |\n| PYUSD      | PayPal's USD-pegged stablecoin for payments.           |\n| GUSD       | Gemini Dollar, USD-backed by Gemini Trust.             |\n| USDP       | Paxos Standard, a regulated USD stablecoin.            |\n| AAVE-USDC  | Aave's USD-pegged stablecoin for lending.              |\n| CURVE-USD  | Curve Finance's USD stablecoin for DeFi pools.         |\n| MIM        | Magic Internet Money, a decentralized USD stablecoin.  |\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) (recommended for dependency management and running)\n\n### Steps\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-pegmon-mcp.git\n   cd crypto-pegmon-mcp\n   ```\n\n2. **Install Dependencies**:\n   Using uv (recommended):\n   ```bash\n   uv sync\n   ```\n\n3. **Run the Server**:\n   Using uv (recommended):\n   ```bash\n   uv run main.py\n   ```\n\n## Usage\n\nThe server provides four tools, accessible via the MCP interface. Below are examples for each tool and prompt.\n\n### 1. List Supported Stablecoins\nRetrieve a list of supported stablecoins with their descriptions.\n\n- **Prompt**:\n  ```plaintext\n  List all supported stablecoins with their descriptions.\n  ```\n- **Output**:\n  ```markdown\n  **Supported USD-Pegged Stablecoins**:\n\n  | Symbol     | Description                                            |\n  |------------|--------------------------------------------------------|\n  | USDT       | Tether's USD-pegged stablecoin, centrally issued.      |\n  | USDC       | Circle's USD-backed stablecoin, widely used in DeFi.   |\n  | ...        | ...                                                    |\n  ```\n\n### 2. Fetch Current Price\nGet the current price and peg deviation for a specific stablecoin.\n\n- **Prompt**:\n  ```plaintext\n  Get the current price of USDT.\n  ```\n- **Output**:\n  ```markdown\n  **USDT Current Price**: $1.0002, Peg Deviation: 0.02%\n  ```\n\n### 3. Fetch Historical Data\nRetrieve historical price data for a stablecoin over a specified number of days (default: 7).\n\n- **Prompt**:\n  ```plaintext\n  Show the price history of USDC for the last 7 days.\n  ```\n- **Output**:\n  ```markdown\n  **USDC Historical Data (Last 7 Days)**:\n\n  | Date       | Price  | Deviation (%) |\n  |------------|--------|---------------|\n  | 2025-04-29 | 1.0001 | 0.0100        |\n  | 2025-04-30 | 0.9998 | -0.0200       |\n  | ...        | ...    | ...           |\n  ```\n\n### 4. Analyze Peg Stability\nGenerate a comprehensive stability report for a stablecoin, including historical data, current price, and analysis.\n\n- **Prompt**:\n  ```plaintext\n  Analyze the peg stability of DAI over the past week.\n  ```\n- **Output**:\n  ```markdown\n  - **DAI Historical Data (Last 7 Days)**:\n    | Date       | Price  | Deviation (%) |\n    |------------|--------|---------------|\n    | 2025-04-29 | 1.0003 | 0.0300        |\n    | ...        | ...    | ...           |\n  - **DAI Current Price**: $1.0000, Peg Deviation: 0.00%\n  - **Stability Analysis for DAI**:\n    - Maximum Deviation: 0.15%\n    - Stability Status: Stable\n    - Note: Deviations > 3% indicate potential depegging risks.\n  ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "stablecoin",
        "peg",
        "pegmon",
        "stablecoin peg",
        "tracking stablecoin",
        "crypto pegmon"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-portfolio-mcp": {
      "owner": "kukapay",
      "name": "crypto-portfolio-mcp",
      "url": "https://github.com/kukapay/crypto-portfolio-mcp",
      "imageUrl": "",
      "description": "An MCP server for tracking and managing cryptocurrency portfolio allocations.",
      "stars": 8,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-18T08:53:08Z",
      "readme_content": "# Crypto Portfolio MCP\n\nAn MCP server for tracking and managing cryptocurrency portfolio allocations, enabling AI agents to query and optimize portfolio strategies in real time.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-portfolio-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Portfolio Management**: Add and track cryptocurrency holdings with real-time Binance prices.\n- **Price Retrieval**: Fetch current prices for any Binance trading pair (e.g., BTC/USDT).\n- **Value History**: Generate visual charts of portfolio value over time.\n- **Analysis Prompt**: Pre-built prompt for portfolio analysis with diversification and risk suggestions.\n- **SQLite Storage**: Persistent storage of holdings in a local database.\n\n## Installation\n\n### Prerequisites\n- Python 3.10+\n- Git (optional, for cloning the repo)\n- A compatible MCP client (e.g., [Claude Desktop](https://www.anthropic.com/claude))\n\n\n### Setup\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-portfolio-mcp.git\n   cd crypto-portfolio-mcp\n   ```\n\n2. **Install requirements**:\n   ```bash\n   pip install mcp[cli] ccxt matplotlib\n   ```\n\n3. **Install for Claude Desktop**:\n   ```bash\n   mcp install main.py --name \"CryptoPortfolioMCP\"\n   ```\n  \n    Or update the configuration file manually:\n  \n    ```\n    {\n      \"mcpServers\": {\n        \"crypto-portfolio-mcp\": {\n          \"command\": \"python\",\n          \"args\": [ \"path/to/crypto-portfolio-mcp/main.py\" ]\n        }\n      }\n    }\n    ```      \n\n## Usage\n\nOnce installed, interact with the server through an MCP client like Claude Desktop. Below are example commands:\n\n### Add a Holding\n- **Prompt**: \"Add 0.1 BTC to my portfolio\"\n- **Result**: Adds 0.1 BTC/USDT to your portfolio and confirms with \"Added 0.1 BTC/USDT to portfolio\".\n\n### Get Current Price\n- **Prompt**: \"What's the current price of ETH on Binance?\"\n- **Result**: Returns \"Current price of ETH/USDT on Binance: $2000.50\" (example price).\n\n### Portfolio Summary\n- **Prompt**: \"What's my current portfolio summary?\"\n- **Result**: Displays a formatted summary, e.g.:\n  ```\n  Portfolio Summary:\n  BTC/USDT: 0.1 @ $60000.00 = $6000.00\n  ETH/USDT: 2.0 @ $2000.00 = $4000.00\n  Total Value: $10000.00\n  ```\n\n### Portfolio Value History\n- **Prompt**: \"Show me my portfolio value history\"\n- **Result**: Generates and displays a PNG chart of your portfolio value over time.\n\n### Analyze Portfolio\n- **Prompt**: \"Analyze my crypto portfolio\"\n- **Result**: Provides an analysis with suggestions based on current holdings and Binance market trends.\n\n## Tools\n\nThe server exposes the following tools:\n\n- **`get_portfolio_summary`**: Retrieves a text summary of your current portfolio.\n- **`add_holding(coin_symbol: str, amount: float)`**: Adds a cryptocurrency holding (e.g., \"BTC\", 0.1).\n- **`get_price(coin_symbol: str)`**: Fetches the current price of a trading pair from Binance.\n- **`portfolio_value_history()`**: Generates a PNG chart of portfolio value history.\n\nSee the source code docstrings for detailed parameter descriptions.\n\n## Database\n\nHoldings are stored in a SQLite database (`portfolio.db`) with the following schema:\n```sql\nCREATE TABLE holdings (\n    id INTEGER PRIMARY KEY,\n    coin_symbol TEXT,       -- e.g., \"BTC/USDT\"\n    amount REAL,           -- Quantity of the asset\n    purchase_date TEXT     -- ISO format timestamp\n)\n```\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "cryptocurrency",
        "crypto",
        "crypto portfolio",
        "portfolio mcp",
        "cryptocurrency portfolio"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-projects-mcp": {
      "owner": "kukapay",
      "name": "crypto-projects-mcp",
      "url": "https://github.com/kukapay/crypto-projects-mcp",
      "imageUrl": "",
      "description": "Providing cryptocurrency project data from Mobula.io to AI agents.",
      "stars": 0,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-11T12:57:56Z",
      "readme_content": "# Crypto Projects MCP Server\n\nAn MCP server that provides cryptocurrency project data from [Mobula.io](https://mobula.io/) to AI agents.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/crypto-projects-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/crypto-projects-mcp/badge\" alt=\"crypto-projects-mcp MCP server\" />\n</a>\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Fetch Project Data**: Retrieve comprehensive project details (e.g., market data, tokenomics, and links) from Mobula.\n- **Structured Output**: Format project data into a well-organized Markdown document with sections for overview, market data, investors, exchanges, token distribution, and release schedules.\n- **Language Support**: Customize output language based on system locale or user-specified settings.\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://docs.astral.sh/uv/) for package management and running the project\n- Mobula API access (no authentication required for public endpoints)\n\n### Setup\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-projects-mcp.git\n   cd crypto-projects-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   uv sync\n   ```\n\n## Usage\n\n### Running in Development Mode\n\nTest the server using the MCP Inspector:\n```bash\nuv run mcp dev main.py\n```\n\n### Integrating with Claude Desktop\n\nInstall the server in Claude Desktop for LLM interaction:\n```bash\nuv run mcp install main.py --name \"Crypto Projects\"\n```\n\n### Example Interaction\n\nThe server provides two primary interfaces: a **tool** to fetch raw data and a **prompt** to format it into a structured Markdown document. \n\n#### 1. Using the `get_project_data` Tool\n\nThe `get_project_data` tool retrieves raw JSON data for a specified cryptocurrency project. This is useful for applications needing unprocessed data.\n\n```python\nawait get_project_data(\"avalanche\")\n```\n\nThis returns a dictionary containing details like price, market cap, blockchain, and social links for Avalanche. Example output:\n```json\n{\n  \"name\": \"Avalanche\",\n  \"symbol\": \"AVAX\",\n  \"blockchains\":  [\"Avalanche C-Chain\"],\n  \"price\": 35.12,\n  \"market_cap\": 1234567890,\n  ...\n}\n```\n\n#### 2. Using the `format_project_data` Prompt\n\nThe `format_project_data` prompt fetches data using the `get_project_data` tool and formats it into a comprehensive Markdown document. This prompt is designed for LLM applications to present structured, human-readable information about a cryptocurrency project.\n\n```python\n# format_project_data(\"avalanche\")                 # use system locale\nformat_project_data(\"avalanche\", lang=\"en_US\")     # use en_US\n```\n\nThis generates a Markdown document with detailed sections. Example output for Avalanche:\n\n```markdown\n# Avalanche Project Information\n\n## Overview\n- **Name**: Avalanche\n- **Symbol**: AVAX\n- **Chain**: Avalanche C-Chain\n- **Contract Address**: 0xb31f66aa3c1e785363f0875a1b74e27b85fd66c7\n- **Audit Report**: https://quantstamp.com/blog/quantstamp-enhancing-the-security-of-avalanche\n- **Description**: Avalanche is a high throughput smart contract blockchain platform. Validators secure the network through a proof-of-stake consensus protocol. It is said to be fast, low cost, and environmental friendly.\n\n## Market Data\n- **Price**: $19.45\n- **Market Cap**: $8,130,398,992\n- **Volume (24h)**: $48,238,792\n- **Total Supply**: 454,405,245\n- **Circulating Supply**: 417,951,478\n\n## Links\n- **Website**: https://www.avax.network\n- **Twitter**: https://twitter.com/avax\n- **Discord**: https://www.avax.network/\n\n## Investors\n- **Lead Investor**: Yes\n- **Name**: Polychain Capital\n- **Type**: Ventures Capital\n- **Description**: Polychain Capital is a cryptocurrency-focused investment management firm and hedge fund.\n- **Lead Investor**: Yes\n- **Name**: Dragonfly Capital\n- **Type**: Ventures Capital\n- **Description**: Dragonfly Capital Partners is a venture capital firm that focuses on investments in the blockchain and cryptocurrency space.\n- **Lead Investor**: Yes\n- **Name**: Bitmain\n- **Type**: Ventures Capital\n- **Description**: Bitmain is a China-based technology company that specializes in the design and manufacture of hardware for cryptocurrency mining.\n- **Lead Investor**: Yes\n- **Name**: Galaxy\n- **Type**: Ventures Capital\n- **Description**: Galaxy is a digital asset and blockchain leader helping institutions, startups, and qualified individuals shape a changing economy.\n- **Lead Investor**: Yes\n- **Name**: NGC Ventures (NEO Global Capital)\n- **Type**: Ventures Capital\n- **Description**: NGC Ventures is one of the largest institutional investors of blockchain technologies.\n- **Lead Investor**: Yes\n- **Name**: Initialized Capital\n- **Type**: Ventures Capital\n- **Description**: Not available\n- **Lead Investor**: Yes\n- **Name**: Three Arrows Capital\n- **Type**: Ventures Capital\n- **Description**: Not available\n- **Lead Investor**: No\n- **Name**: a16z (Andreessen Horowitz)\n- **Type**: Ventures Capital\n- **Description**: Andreessen Horowitz is a prominent venture capital firm based in Menlo Park, California.\n- **Lead Investor**: No\n- **Name**: Fundamental Labs\n- **Type**: Ventures Capital\n- **Description**: An investment company specialized in Blockchain sector.\n- **Lead Investor**: No\n- **Name**: Lemniscap\n- **Type**: Ventures Capital\n- **Description**: Lemniscap is an investment firm specializing in investments in emerging cryptoassets and blockchain companies.\n- **Lead Investor**: No\n- **Name**: Naval Ravikant\n- **Type**: Angel Investor\n- **Description**: Naval Ravikant is the CEO and a co-founder of AngelList.\n- **Lead Investor**: No\n- **Name**: MetaStable Capital\n- **Type**: Ventures Capital\n- **Description**: Manage Crypto Asset Hedge Funds.\n- **Lead Investor**: No\n- **Name**: LedgerPrime\n- **Type**: Ventures Capital\n- **Description**: LedgerPrime is a quantitative and systematic digital asset investment firm.\n- **Lead Investor**: No\n- **Name**: Digital Asset Capital Management (DACM)\n- **Type**: Ventures Capital\n- **Description**: Specialist, global investment manager in the digital asset sector.\n- **Lead Investor**: No\n- **Name**: HashKey Capital\n- **Type**: Ventures Capital\n- **Description**: HashKey Capital is a blockchain and cryptocurrency-focused venture capital and investment firm.\n- **Lead Investor**: No\n- **Name**: Balaji Srinivasan\n- **Type**: Angel Investor\n- **Description**: Balaji S. Srinivasan is the CTO of Coinbase and cofounder of Counsyl, Earn, Teleport, and Coin Center.\n\n## Exchanges\n- Binance: AVAX/USDT\n- Coinbase: AVAX/USD\n- OKX: AVAX/USDT\n- Bybit: AVAX/USDT\n- Kraken: AVAX/EUR\n- WhiteBIT: Not available\n- HTX: Not available\n- P2B: Not available\n- KuCoin: Not available\n- Bitunix: Not available\n\n## Token Distribution\n- Foundation: 9.26%\n- Airdrop: 2.5%\n- Team: 10%\n- Public Sale Option A1: 1%\n- Public Sale Option A2: 8.3%\n- Public Sale Option B: 0.67%\n- Community and Development Endowment: 7%\n- Testnet Incentive Program: 0.31%\n- Strategic Partners: 5%\n- Staking Rewards: 50%\n- Private Sale: 3.46%\n- Seed Sale: 2.5%\n\n## Token Release Schedule\n- Sep 2020: 40,466,016 tokens (Seed Round, Private Sale, Public Sales, etc.)\n- Dec 2020: 45,188,596.8 tokens (Team, Airdrop, Foundation, etc.)\n- Mar 2021: 45,188,596.8 tokens (Team, Airdrop, Foundation, etc.)\n- Jun 2021: 45,188,596.8 tokens (Team, Airdrop, Foundation, etc.)\n- Sep 2021: 19,502,596.8 tokens (Team, Airdrop, Foundation, etc.)\n- Dec 2021: 19,502,596.8 tokens (Team, Airdrop, Foundation, etc.)\n- Mar 2022: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Jun 2022: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Sep 2022: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Dec 2022: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Mar 2023: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Jun 2023: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Sep 2023: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Dec 2023: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Mar 2024: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Jun 2024: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Sep 2024: 9,541,800 tokens (Team, Airdrop, Foundation, Strategic Partners)\n- Dec 2024: 1,666,800 tokens (Foundation)\n- Mar 2025: 1,666,800 tokens (Foundation)\n- Jun 2025: 1,666,800 tokens (Foundation)\n- Sep 2025: 1,666,800 tokens (Foundation)\n- Dec 2025: 1,666,800 tokens (Foundation)\n- Mar 2026: 1,666,800 tokens (Foundation)\n- Jun 2026: 1,666,800 tokens (Foundation)\n- Sep 2026: 1,666,800 tokens (Foundation)\n- Dec 2026: 1,666,800 tokens (Foundation)\n- Mar 2027: 1,666,800 tokens (Foundation)\n- Jun 2027: 1,666,800 tokens (Foundation)\n- Sep 2027: 1,666,800 tokens (Foundation)\n- Dec 2027: 1,666,800 tokens (Foundation)\n- Mar 2028: 1,666,800 tokens (Foundation)\n- Jun 2028: 1,666,800 tokens (Foundation)\n- Sep 2028: 1,666,800 tokens (Foundation)\n- Dec 2028: 1,666,800 tokens (Foundation)\n- Mar 2029: 1,666,800 tokens (Foundation)\n- Jun 2029: 1,666,800 tokens (Foundation)\n- Sep 2029: 1,666,800 tokens (Foundation)\n- Dec 2029: 1,666,800 tokens (Foundation)\n- Mar 2030: 1,666,800 tokens (Foundation)\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "cryptocurrency",
        "fintech",
        "kukapay crypto",
        "crypto projects",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-rss-mcp": {
      "owner": "kukapay",
      "name": "crypto-rss-mcp",
      "url": "https://github.com/kukapay/crypto-rss-mcp",
      "imageUrl": "",
      "description": "An MCP server that aggregates real-time cryptocurrency news from multiple RSS feeds.",
      "stars": 6,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T11:54:20Z",
      "readme_content": "# Crypto RSS MCP\n\nAn MCP server that aggregates real-time cryptocurrency news from multiple RSS feeds, helping AI agents make informed decisions in a fast-paced market.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/crypto-rss-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/crypto-rss-mcp/badge\" alt=\"crypto-rss-mcp MCP server\" />\n</a>\n\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-trending-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Feed Retrieval**: Fetches latest entries from specified RSS feeds, formatting them as Markdown with plain-text summaries.\n- **Keyword Filtering**: Filters feeds by keyword in descriptions or categories.\n- **OPML Support**: Import feed list from a local OPML file provided by [Chainfeeds](https://raw.githubusercontent.com/chainfeeds/RSSAggregatorforWeb3/main/RAW.opml).\n- **LLM Integration**: Includes a prompt for analyzing feed content to summarize key points and identify cryptocurrency market trends.\n\n## Prerequisites\n\n- **Python**: Version 3.10.\n- **uv**: Package and dependency manager for Python projects.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-rss-mcp.git\n   cd crypto-rss-mcp\n   ```\n\n2. **Install Dependencies**:\n   Add the required dependencies using `uv`:\n   ```bash\n   uv sync\n   ```\n\n## Usage\n\n### Running the Server\n\nStart the FastMCP server in development mode:\n```bash\nuv run mcp dev cli.py\n```\n\n### Installing to Claude Desktop\n\nInstall the server as a Claude Desktop application:\n```bash\nuv run mcp install cli.py --name \"Crypto RSS Reader\"\n```\n\nConfiguration file as a reference:\n\n```json\n{\n   \"mcpServers\": {\n       \"Crypto RSS Reader\": {\n           \"command\": \"uv\",\n           \"args\": [ \"--directory\", \"/path/to/crypto-rss-mcp\", \"run\", \"crypto-rss-mcp\" ] \n       }\n   }\n}\n```\n\n### Available Tools\n\n#### `get_crypto_rss_list`\n\nLists available RSS feeds from an OPML file, optionally filtered by keyword.\n\n**Parameters**:\n- `keyword` (str, optional): Filter feeds where the keyword appears in the description or category (case-insensitive).\n- `opml_file` (str, optional): Path to a local OPML file (defaults to `\"RAW.opml\"`).\n\n**Example**:\n> List available cryptocurrency RSS feeds\n\n**Output**:\n```\nAvailable Cryptocurrency RSS Feeds:\n\nCategory: 05. Research/VC\nURL: https://b10c.me/feed.xml\nDescription: 0xB10C's Blog: German Bitcoin freelance developer on 0xB10C's Blog\n\nCategory: 03. Media\nURL: https://bitcoinmagazine.com/feed\nDescription: Bitcoin Magazine\n...\n```\n\n#### `get_rss_feed`\n\nFetches and formats the latest 10 entries from a specified RSS feed as Markdown.\n\n**Parameters**:\n- `feed_url` (str): The URL of the RSS feed to fetch.\n\n**Example**:\n>  Read this RSS feed: https://blog.0xproject.com/feed\n\n**Output**:\n```\n# Feed: 0x Blog - Medium\n\n## Entry 1\n- **Title**: Introducing 0x Protocol v4\n- **Link**: [https://blog.0xproject.com/...](https://blog.0xproject.com/...)\n- **Published**: Mon, 28 Apr 2025 10:00:00 GMT\n- **Summary**: The 0x Protocol v4 brings improved efficiency...\n\n  ### Why This Matters\n  This update enhances...\n...\n```\n\n### Available Prompts\n\n#### `analyze_rss_feed`\n\nCreates a prompt for analyzing RSS feed content, summarizing key points and identifying cryptocurrency market trends.\n\n**Parameters**:\n- `url` (str): The RSS feed URL to analyze.\n\n**Example**:\n> Analyze the content of this RSS feed https://blog.0xproject.com/feed, summarize the key points, and identify any trends in the cryptocurrency market.\"\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "rss",
        "mcp",
        "crypto",
        "rss mcp",
        "crypto rss",
        "cryptocurrency news"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-sentiment-mcp": {
      "owner": "kukapay",
      "name": "crypto-sentiment-mcp",
      "url": "https://github.com/kukapay/crypto-sentiment-mcp",
      "imageUrl": "",
      "description": "An MCP server that delivers cryptocurrency sentiment analysis to AI agents.",
      "stars": 36,
      "forks": 12,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T19:44:06Z",
      "readme_content": "# Crypto Sentiment MCP Server\n\nAn MCP server that delivers cryptocurrency sentiment analysis to AI agents, leveraging Santiment's aggregated social media and news data to track market mood and detect emerging trends.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-sentiment-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Sentiment Analysis**: Retrieve sentiment balance (positive vs. negative) for specific cryptocurrencies.\n- **Social Volume Tracking**: Monitor total social media mentions and detect significant shifts (spikes or drops).\n- **Social Dominance**: Measure the share of discussions an asset occupies in crypto media.\n- **Trending Words**: Identify the most popular terms trending in cryptocurrency discussions.\n\n## Tools\n\n| Tool Name               | Description                                                                                   | Parameters                                  |\n|-------------------------|-----------------------------------------------------------------------------------------------|---------------------------------------------|\n| `get_sentiment_balance` | Get the average sentiment balance for an asset over a specified period.                      | `asset: str`, `days: int = 7`              |\n| `get_social_volume`     | Fetch the total number of social media mentions for an asset.                                | `asset: str`, `days: int = 7`              |\n| `alert_social_shift`    | Detect significant spikes or drops in social volume compared to the previous average.        | `asset: str`, `threshold: float = 50.0`, `days: int = 7` |\n| `get_trending_words`    | Retrieve the top trending words in crypto discussions, ranked by score over a period.        | `days: int = 7`, `top_n: int = 5`          |\n| `get_social_dominance`  | Measure the percentage of crypto media discussions dominated by an asset.                    | `asset: str`, `days: int = 7`              |\n\n## Prerequisites\n\n- **Python**: 3.10 or higher\n- **Santiment API Key**: Obtain a free or paid key from [Santiment](https://app.santiment.net/). \n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-sentiment-mcp.git\n   cd crypto-sentiment-mcp\n   ```\n\n2. **Configure Client**:\n    ```\n    {\n      \"mcpServers\": {\n        \"crypto-sentiment-mcp\": {\n          \"command\": \"uv\",\n          \"args\": [\"--directory\", \"path/to/crypto-sentiment-mcp\", \"run\", \"main.py\"],\n          \"env\": {\n            \"SANTIMENT_API_KEY\": \"your_api_key_here\"\n          }\n        }\n      }\n    }\n    ```  \n\n## Examples\n\nBelow are examples of natural language inputs and their corresponding outputs when interacting with the server via an MCP-compatible client:\n\n- **Input**: \"What's the sentiment balance for Bitcoin over the last week?\"\n  - **Output**: \"Bitcoin's sentiment balance over the past 7 days is 12.5.\"\n\n- **Input**: \"How many times has Ethereum been mentioned on social media in the past 5 days?\"\n  - **Output**: \"Ethereum's social volume over the past 5 days is 8,432 mentions.\"\n\n- **Input**: \"Tell me if there's been a big change in Bitcoin's social volume recently, with a 30% threshold.\"\n  - **Output**: \"Bitcoin's social volume spiked by 75.0% in the last 24 hours, from an average of 1,000 to 1,750.\"\n\n- **Input**: \"What are the top 3 trending words in crypto over the past 3 days?\"\n  - **Output**: \"Top 3 trending words over the past 3 days: 'halving', 'bullrun', 'defi'.\"\n\n- **Input**: \"How dominant is Ethereum in social media discussions this week?\"\n  - **Output**: \"Ethereum's social dominance over the past 7 days is 18.7%.\"\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crypto",
        "mcp",
        "cryptocurrency",
        "cryptocurrency sentiment",
        "crypto sentiment",
        "sentiment mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-trending-mcp": {
      "owner": "kukapay",
      "name": "crypto-trending-mcp",
      "url": "https://github.com/kukapay/crypto-trending-mcp",
      "imageUrl": "",
      "description": "Tracking the latest trending tokens on CoinGecko.",
      "stars": 5,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-26T14:04:10Z",
      "readme_content": "# Crypto Trending MCP Server\n\nAn MCP server that tracks and monitors the latest trending tokens on CoinGecko, providing real-time insights into the most popular cryptocurrencies.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/crypto-trending-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/crypto-trending-mcp/badge\" alt=\"crypto-trending-mcp MCP server\" />\n</a>\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-trending-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Tool: `get_trending_md_doc`**  \n  Returns a Markdown document of the full CoinGecko trending page, including a table of trending cryptocurrencies with columns: Rank, Name, Symbol, Price, 1h Change, 24h Change, 7d Change, 24h Volume, Market Cap.\n\n- **Prompt: `parse_trending_md_doc`**  \n  Guides MCP clients to extract the trending coins table from the Markdown document and parse it with an LLM, supporting analyses like identifying coins with positive price changes or ranking by market cap.\n\n- **Seamless Integration**  \n  Designed for use with Claude Desktop, allowing natural language queries to analyze trending crypto data via MCP tools and prompts.\n\n- **Lightweight & Extensible**  \n  Built with minimal dependencies and a simple architecture, making it easy to extend or deploy.\n\n## Installation\n\n### Prerequisites\n\n- **Python 3.10+**\n- **Node.js** (for Playwright browser dependencies)\n- **Claude Desktop** (optional, for testing with MCP client)\n\n### Steps\n\n1. **Clone the Repository**:\n\n   ```bash\n   git clone https://github.com/kukapay/crypto-trending-mcp.git\n   cd crypto-trending-mcp\n   ```\n\n2. **Install Dependencies with uv**:\n\n   ```bash\n   uv sync\n   playwright install\n   ```\n\n## Usage\n\n### Integrating with Claude Desktop\n\n1. **Configure Claude Desktop**:\n\n   - Edit the configuration file:\n     - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n     - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Add the server configuration:\n\n     ```json\n     {\n       \"mcpServers\": {\n         \"crypto-trending\": {\n           \"command\": \"uv\",\n           \"args\": [\n             \"--directory\",\n             \"/absolute/path/to/crypto-trending-mcp\",\n             \"run\",\n             \"main.py\"\n           ]\n         }\n       }\n     }\n     ```\n\n     Replace `/absolute/path/to/crypto-trending-mcp` with the absolute path to your `main.py`.\n\n2. **Restart Claude Desktop**:\n\n   - Close and reopen Claude Desktop.\n   - Look for the hammer icon (🔨) in the input box, indicating MCP tools are available.\n\n3. **Interact with the Server**:\n\n   - Ask natural language questions like:\n     - \"What are the trending cryptocurrencies with positive 24h price changes?\"\n     - \"Show the top 3 trending coins by market cap.\"\n   - Claude will use the `get_trending_md_doc` tool and `parse_trending_md_doc` prompt to fetch and analyze the data.\n\n### Example Output\n\nThe `get_trending_md_doc` tool returns a Markdown document like:\n\n```markdown\n# Trending Crypto\n\n...\n\n| Rank | Name        | Symbol | Price      | 1h Change | 24h Change | 7d Change | 24h Volume      | Market Cap         |\n|------|-------------|--------|------------|-----------|------------|-----------|-----------------|-------------------|\n| 1    | Bitcoin     | BTC    | $67,890.12 | +0.45%    | +2.34%     | +10.12%   | $45,123,456,789 | $1,345,678,901,234 |\n| 2    | Ethereum    | ETH    | $2,456.78  | -0.12%    | -1.12%     | +5.67%    | $20,987,654,321 | $295,123,456,789   |\n| 3    | Solana      | SOL    | $167.45    | +0.89%    | +5.67%     | +15.34%   | $3,456,789,123  | $78,901,234,567    |\n\n...\n\n*Data from CoinGecko*\n```\n\nThe `parse_trending_md_doc` prompt guides the LLM to extract the table and produce structured output, such as:\n\n```json\n[\n  {\n    \"rank\": 1,\n    \"name\": \"Bitcoin\",\n    \"symbol\": \"BTC\",\n    \"price\": \"$67,890.12\",\n    \"change_1h\": \"+0.45%\",\n    \"change_24h\": \"+2.34%\",\n    \"change_7d\": \"+10.12%\",\n    \"volume_24h\": \"$45,123,456,789\",\n    \"market_cap\": \"$1,345,678,901,234\"\n  },\n  ...\n]\n```\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "trending",
        "crypto",
        "coingecko",
        "crypto trending",
        "trending tokens",
        "trending mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--crypto-whitepapers-mcp": {
      "owner": "kukapay",
      "name": "crypto-whitepapers-mcp",
      "url": "https://github.com/kukapay/crypto-whitepapers-mcp",
      "imageUrl": "",
      "description": "Serving as a structured knowledge base of crypto whitepapers.",
      "stars": 4,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T02:53:19Z",
      "readme_content": "# Crypto Whitepapers MCP Server\n\nAn MCP server serving as a structured knowledge base of crypto whitepapers for AI agents to access, analyze, and learn from.\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/crypto-whitepapers-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Search Whitepapers**: Use DuckDuckGo to find whitepaper PDFs for cryptocurrency projects.\n- **Load Whitepapers**: Download and index whitepaper PDFs into the knowledge base.\n- **Query Knowledge Base**: Query whitepaper content with optional project filtering.\n- **List Projects**: View all projects available in the knowledge base.\n- **Claude Desktop Integration**: Access tools and prompts via MCP in Claude Desktop.\n\n## Prerequisites\n\n- Python 3.10+\n- [uv](https://github.com/astral-sh/uv) for dependency management and running\n- Internet access.\n- [Claude Desktop](https://claude.ai/download) for MCP integration (optional)\n\n## Setup\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/crypto-whitepapers-mcp.git\n   cd crypto-whitepapers-mcp\n   ```\n\n2. **Install Dependencies with uv**:\n   ```bash\n   uv sync\n   ```\n\n5. **Integrate with Claude Desktop** (Optional):\n   - Edit the Claude Desktop configuration file:\n     - **MacOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n     - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - Add the following configuration:\n     ```json\n     {\n         \"mcpServers\": {\n             \"crypto-whitepapers\": {\n                 \"command\": \"uv\",\n                 \"args\": [\n                     \"--directory\",\n                     \"/absolute/path/to/crypto-whitepapers-mcp\"   \n                     \"run\",\n                     \"crypto-whitepapers-mcp\"\n                 ]\n             }\n         }\n     }\n     ```\n     Replace `/absolute/path/to/crypto-whitepapers-mcp` with the absolute path to the repository.\n   - Restart Claude Desktop and verify the server is loaded (look for the hammer icon in the input box).\n\n## Usage\n\n### Tools\nThe following tools are available via the MCP server:\n\n- **`list_available_projects()`**: Lists all projects in the knowledge base (derived from PDF filenames).\n  - Example: `list_available_projects()`\n  - Returns: JSON list of project names.\n  \n- **`search_whitepaper(project_name: str)`**: Searches for a project's whitepaper PDF using DuckDuckGo.\n  - Example: `search_whitepaper(\"bitcoin\")`\n  - Returns: JSON list of up to 5 results with title, URL, and snippet.\n\n- **`load_whitepaper(project_name: str, url: str)`**: Downloads a whitepaper PDF from a URL and loads it into the knowledge base.\n  - Example: `load_whitepaper(\"bitcoin\", \"https://bitcoin.org/bitcoin.pdf\")`\n  - Returns: Success or error message.\n\n- **`ask_whitepapers(query: str, project_name: str = None)`**: Searches the knowledge base for a query, optionally filtered by project.\n  - Example: `ask_whitepapers(\"blockchain technology\", \"bitcoin\")`\n  - Returns: Up to 5 matching text snippets.\n\n\n\n### Prompts\n- **`analyze_tokenomics(project_name: str)`**: Analyzes tokenomics (distribution, supply, incentives) in a project's whitepaper using the `ask_whitepapers` tool.\n  - Example: In Claude Desktop, run \"Analyze the tokenomics of Ethereum.\"\n\n### Examples\n1. List available projects:\n   ```\n   List all available projects.\n   ```\n2. Search for a whitepaper:\n   ```\n   Search for the Bitcoin whitepaper PDF.\n   ```\n3. Load a whitepaper:\n   ```\n   Load the Bitcoin whitepaper from https://bitcoin.org/bitcoin.pdf.\n   ```\n4. Query the knowledge base:\n   ```\n   Ask the knowledge base about blockchain technology in the Bitcoin whitepaper.\n   ```\n   \n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "crypto",
        "finance",
        "crypto whitepapers",
        "finance fintech",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--cryptopanic-mcp-server": {
      "owner": "kukapay",
      "name": "cryptopanic-mcp-server",
      "url": "https://github.com/kukapay/cryptopanic-mcp-server",
      "imageUrl": "",
      "description": "Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.",
      "stars": 54,
      "forks": 20,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T19:43:42Z",
      "readme_content": "# cryptopanic-mcp-server\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/blockbeats-mcp)\n\nProvide the latest cryptocurrency news to AI agents, powered by [CryptoPanic](https://cryptopanic.com/).\n\n<a href=\"https://glama.ai/mcp/servers/dp6kztv7yx\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/dp6kztv7yx/badge\" alt=\"cryptopanic-mcp-server MCP server\" />\n</a>\n\n## Tools\n\nThe server implements only one tool: \n\n```python\nget_crypto_news(kind: str = \"news\", num_pages: int = 1) -> str\n```\n- `kind`: Content type (news, media)\n- `num_pages`: Number of pages to fetch (default: 1, max: 10)\n\nExample Output: \n\n```\n- Bitcoin Breaks $60k Resistance Amid ETF Optimism\n- Ethereum Layer 2 Solutions Gain Traction\n- New Crypto Regulations Proposed in EU\n- ...\n```\n\n\n## Configuration\n\n- CryptoPanic API key & API plan: get one [here](https://cryptopanic.com/developers/api/)\n- Add a server entry to your configuration file:\n\n```\n\"mcpServers\": { \n  \"cryptopanic-mcp-server\": { \n    \"command\": \"uv\", \n    \"args\": [ \n      \"--directory\", \n      \"/your/path/to/cryptopanic-mcp-server\", \n      \"run\", \n      \"main.py\" \n    ], \n    \"env\": { \n      \"CRYPTOPANIC_API_PLAN\": \"your_api_plan\",\n      \"CRYPTOPANIC_API_KEY\": \"your_api_key\" \n    } \n  } \n}\n```\n\n- Replace `/your/path/to/cryptopanic-mcp-server` with your actual installation path.\n- Replace `CRYPTOPANIC_API_PLAN` and `CRYPTOPANIC_API_KEY` with your API plan and key from CryptoPanic. \n\n## License\n\nMIT License - see `LICENSE` file",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cryptopanic",
        "cryptocurrency",
        "fintech",
        "cryptopanic mcp",
        "fintech kukapay",
        "kukapay cryptopanic"
      ],
      "category": "finance--fintech"
    },
    "kukapay--dao-proposals-mcp": {
      "owner": "kukapay",
      "name": "dao-proposals-mcp",
      "url": "https://github.com/kukapay/dao-proposals-mcp",
      "imageUrl": "",
      "description": "An MCP server that aggregates live governance proposals from major DAOs.",
      "stars": 2,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T11:39:25Z",
      "readme_content": "# DAO Proposals MCP\n\nAn MCP server that aggregates live governance proposals from major DAOs enabling AI agents to track, analyze, and act on decentralized decision-making in real time, powered by [Snapshot](https://snapshot.box/).\n\n![GitHub License](https://img.shields.io/github/license/kukapay/dao-proposals-mcp) \n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Tools**:\n  - `list_spaces`: Fetches a list of up to 10 recent Snapshot spaces, including their IDs, names, and descriptions.\n  - `list_proposals`: Retrieves up to 10 recent proposals for a given Snapshot space, including proposal IDs, titles, states, creation dates, and end dates.\n  - `get_proposal_details`: Fetches detailed information about a specific proposal, including its title, body, state, choices, scores, and vote counts.\n- **Prompt**:\n  - `summarize_proposals`: Generates a prompt to summarize recent proposals for a specified Snapshot space, leveraging the `list_proposals` tool.\n\n## Prerequisites\n\n- Python 3.10+\n- [uv](https://docs.astral.sh/uv/) (recommended) or pip for dependency management\n\n## Installation\n\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/kukapay/dao-proposals-mcp.git\n   cd dao-proposals-mcp\n   ```\n\n2. Install dependencies:\n   ```bash\n   uv sync\n   ```\n\n3. **Installing to Claude Desktop**:\n\n    Install the server as a Claude Desktop application:\n    ```bash\n    uv run mcp install main.py --name \"DAO Proposals\"\n    ```\n\n    Configuration file as a reference:\n\n    ```json\n    {\n       \"mcpServers\": {\n           \"DAO Proposals\": {\n               \"command\": \"uv\",\n               \"args\": [ \"--directory\", \"/path/to/dao-proposals-mcp\", \"run\", \"main.py\" ]\n           }\n       }\n    }\n    ```\n    Replace `/path/to/dao-proposals-mcp` with your actual installation path.\n   \n## Usage\n\n### Example Interactions\n\n1. **List Available Spaces**:\n   - **Prompt**:\n     ```plaintext\n     Can you show me a list of the most recent Snapshot spaces?\n     ```\n   - **Output**:\n     ```plaintext\n     Space ID: ens.eth\n     Name: ENS\n     About: Ethereum Name Service (ENS) is a decentralized naming system...\n     ---\n     Space ID: aave.eth\n     Name: Aave\n     About: Aave is a decentralized lending protocol...\n     ---\n     ```\n\n2. **List Proposals for a Space**:\n   - **Prompt**:\n     ```plaintext\n     Please list the recent proposals for the ENS DAO (space ID: ens.eth).\n     ```\n   - **Output**:\n     ```plaintext\n     Proposal ID: 0x123...\n     Title: Proposal to Update ENS Governance\n     State: Active\n     Created: 2025-07-01 12:00:00\n     End: 2025-07-08 12:00:00\n     ---\n     ```\n\n3. **Get Proposal Details**:\n   - **Prompt**:\n     ```plaintext\n     Can you give me detailed information about the proposal with ID 0x123...?\n     ```\n   - **Output**:\n     ```plaintext\n     Proposal ID: 0x123...\n     Title: Proposal to Update ENS Governance\n     State: Active\n     Created: 2025-07-01 12:00:00\n     End: 2025-07-08 12:00:00\n     Choices: Yes, No\n     Scores: [1500, 500]\n     Votes: 2000\n     ------\n     This proposal aims to update the governance structure of ENS...\n     ```\n\n4. **Summarize Proposals**:\n   - **Prompt**:\n     ```plaintext\n     Summarize the recent proposals for the DAO with space ID 'ens.eth'.\n     ```\n   - **Output**:\n     ```plaintext\n     I'll use the list_proposals tool to fetch the proposals for ens.eth and provide a concise summary of their key points.\n     ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "governance",
        "finance",
        "governance proposals",
        "dao proposals",
        "proposals mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--defi-yields-mcp": {
      "owner": "kukapay",
      "name": "defi-yields-mcp",
      "url": "https://github.com/kukapay/defi-yields-mcp",
      "imageUrl": "",
      "description": "An MCP server for AI agents to explore DeFi yield opportunities.",
      "stars": 10,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T20:15:04Z",
      "readme_content": "# DeFi Yields MCP\n\nAn MCP server for AI agents to explore DeFi yield opportunities, powered by DefiLlama.\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/defi-yields-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Data Fetching Tool**: The `get_yield_pools` tool retrieves DeFi yield pool data from the DefiLlama, allowing filtering by chain (e.g., Ethereum, Solana) or project (e.g., Lido, Aave).\n- **Analysis Prompt**: The `analyze_yields` prompt generates tailored instructions for AI agents to analyze yield pool data, focusing on key metrics like APY, 30-day mean APY, and predictions.\n- **Packaged for Ease**: Run the server directly with `uvx defi-yields-mcp`.\n\n## Installation\n\nTo use the server with Claude Desktop, you can either install it automatically or manually configure the Claude Desktop configuration file.\n\n### Option 1: Automatic Installation\nInstall the server for Claude Desktop:\n```bash\nuvx mcp install -m defi_yields_mcp --name \"DeFi Yields Server\"\n```\n\n### Option 2: Manual Configuration\n\n\nLocate the configuration file:\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nAdd the server configuration:\n\n```json\n{\n \"mcpServers\": {\n   \"defi-yields-mcp\": {\n     \"command\": \"uvx\",\n     \"args\": [ \"defi-yields-mcp\" ]\n   }\n }\n}\n```\n\nRestart Claude Desktop.\n\n## Examples\n\nYou can use commands like:\n\n- \"Fetch yield pools for the Lido project.\"\n- \"Analyze yield pools on Ethereum.\"\n- \"What are the 30-day mean APYs for Solana pools?\"\n\nThe `get_yield_pools` tool fetches and filters the data, while the `analyze_yields` prompt guides the LLM to provide a detailed analysis.\n\n### Example Output\n\nRunning the `get_yield_pools` tool with a filter for Ethereum:\n```json\n[\n  {\n    \"chain\": \"Ethereum\",\n    \"pool\": \"STETH\",\n    \"project\": \"lido\",\n    \"tvlUsd\": 14804019222,\n    \"apy\": 2.722,\n    \"apyMean30d\": 3.00669,\n    \"predictions\": {\n        \"predictedClass\": \"Stable/Up\",\n        \"predictedProbability\": 75,\n        \"binnedConfidence\": 3      \n    }\n  },\n  ...\n]\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "finance",
        "yields",
        "defi yields",
        "defi yield",
        "yields mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--dune-analytics-mcp": {
      "owner": "kukapay",
      "name": "dune-analytics-mcp",
      "url": "https://github.com/kukapay/dune-analytics-mcp",
      "imageUrl": "",
      "description": "A mcp server that bridges Dune Analytics data to AI agents.",
      "stars": 29,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T20:04:11Z",
      "readme_content": "# Dune Analytics MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@kukapay/dune-analytics-mcp)](https://smithery.ai/server/@kukapay/dune-analytics-mcp)\n\nA mcp server that bridges Dune Analytics data to AI agents.\n\n## Features\n\n- **Tools**: \n  - `get_latest_result`: Fetch the latest results of a Dune query by ID.\n  - `run_query`: Execute a Dune query by ID and retrieve results.\n- **CSV Output**: All results are returned as CSV-formatted strings for easy processing.\n\n## Prerequisites\n\n- Python 3.10+\n- A valid Dune Analytics API key (get one from [Dune Analytics](https://dune.com/settings/api))\n\n## Installation\n\n### Installing via Smithery\n\nTo install Dune Analytics for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/dune-analytics-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/dune-analytics-mcp --client claude\n```\n\n### Manual Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/dune-analytics-mcp.git\n   cd dune-analytics-mcp\n   ```\n\n2. **Set Up Environment Variables**:\n   Create a `.env` file in the project root:\n   ```\n   DUNE_API_KEY=your_api_key_here\n   ```\n   Alternatively, set it as a system environment variable:\n   ```bash\n   export DUNE_API_KEY=\"your_api_key_here\"\n   ```\n\n## Usage\n\n### Running the Server\n\n- **Development Mode**:\n  ```bash\n  mcp dev main.py\n  ```\n  This starts the server with hot reloading for development.\n\n- **Install for Claude Desktop**:\n  ```bash\n  mcp install main.py --name \"Dune Analytics\"\n  ```\n  Installs the server as a service for use with Claude Desktop.\n\n### Tool Usage\n\n1. **`get_latest_result(query_id)`**\n   - **Description**: Retrieves the latest results of a specified Dune query.\n   - **Input**: `query_id` (int) - The ID of the Dune query.\n   - **Output**: CSV-formatted string of the query results.\n   - **Example**:\n     ```\n     get_latest_result(query_id=4853921)\n     ```\n\n2. **`run_query(query_id)`**\n   - **Description**: Executes a Dune query and returns the results.\n   - **Input**: `query_id` (int) - The ID of the Dune query to run.\n   - **Output**: CSV-formatted string of the query results.\n   - **Example**:\n     ```\n     run_query(query_id=1215383)\n     ```\n\n### Example Commands in Claude Desktop\n\n- \"Get latest results for dune query 1215383\"\n- \"Run dune query 1215383\"\n\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "finance",
        "fintech",
        "dune analytics",
        "analytics mcp",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "kukapay--etf-flow-mcp": {
      "owner": "kukapay",
      "name": "etf-flow-mcp",
      "url": "https://github.com/kukapay/etf-flow-mcp",
      "imageUrl": "",
      "description": "Delivering crypto ETF flow data to power AI agents' decision-making.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-28T08:25:17Z",
      "readme_content": "# ETF Flow MCP\n\nAn MCP server that delivers crypto ETF flow data to power AI agents' decision-making.\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/etf-flow-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/etf-flow-mcp/badge\" alt=\"etf-flow-mcp MCP server\" />\n</a>\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![Python](https://img.shields.io/badge/Python-3.10%2B-blue)\n![License](https://img.shields.io/badge/License-MIT-green)\n![Status](https://img.shields.io/badge/Status-Active-brightgreen)\n\n## Features\n\n- **Unified Tool**: The `get_etf_flow` tool dynamically fetches historical ETF flow data for BTC or ETH.\n- **Markdown Table Output**: Leverages pivot tables to present data with ETF tickers as columns, dates as rows, and a total column for summed flows.\n- **Prompt Guidance**: Includes a prompt (`etf_flow_prompt`) to streamline LLM interactions for user-friendly queries.\n\n## Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **uv**: A fast Python package and project manager ([install instructions](https://github.com/astral-sh/uv)).\n- **CoinGlass API Key**: Obtain a key from [CoinGlass](https://www.coinglass.com/).\n- **Claude Desktop**: Optional, for interactive querying.\n- **Git**: For cloning the repository.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/etf-flow-mcp.git\n   cd etf-flow-mcp\n   ```\n\n2. **Set Up with uv**:\n   Install dependencies using `uv`:\n   ```bash\n   uv sync\n   ```\n\n## Usage\n\n### Integrating with Claude Desktop\n\n1. **Configure Claude Desktop**:\n   Add the server to `claude_desktop_config.json` (located in `~/Library/Application Support/Claude` on macOS or `%APPDATA%\\Claude` on Windows):\n   ```json\n   {\n     \"mcpServers\": {\n       \"etf-flow-mcp\": {\n         \"command\": \"uv\",\n         \"args\": [\"--directory\", \"/absolute/path/to/etf-flow-mcp\", \"run\", \"etf-flow-mcp\"],\n         \"env\": { \"COINGLASS_API_KEY\": \"your_coinglass_api_key_here\" }\n       }\n     }\n   }\n   ```\n   Replace `/absolute/path/to/etf-flow-mcp/cli.py` with the full path to `cli.py`.\n\n2. **Restart Claude Desktop**:\n   Verify the hammer icon appears in the Claude Desktop UI to confirm the server is loaded.\n\n3. **Query Examples**:\n   - \"Show me the latest BTC ETF flow data in a table\"\n   - \"Get the ETH ETF flow history\"\n\n### Example Output\n\n- **BTC ETF Flow**:\n  ```markdown\n  | Date       | GBTC      | IBIT      | FBTC      | ARKB      | BITB      | BTCO     | HODL     | BRRR     | EZBC     | BTCW     | Total     |\n  |------------|-----------|-----------|-----------|-----------|-----------|----------|----------|----------|----------|----------|-----------|\n  | 2025-04-24 | 0         | 327300000 | 0         | 97700000  | 10200000  | 7750000  | 0        | 0        | 0        | 0        | 442200000 |\n  | 2025-04-23 | 0         | 643200000 | 124400000 | 129500000 | -15200000 | 0        | 5300000  | 0        | 0        | 0        | 917700000 |\n  | 2025-04-22 | 65100000  | 193500000 | 253800000 | 267100000 | 76700000  | 18300000 | 6500000  | 0        | 10600000 | 0        | 912700000 |\n  | 2025-04-21 | 36600000  | 41600000  | 88100000  | 116100000 | 45100000  | 0        | 11700000 | 0        | 10100000 | 0        | 381300000 |\n  | 2025-04-18 | 0         | 0         | 0         | 0         | 0         | 0        | 0        | 0        | 0        | 0        | 0         |\n  ```\n\n- **ETH ETF Flow**:\n  ```markdown\n  | Date       | ETHE      | GETH     | ETHA      | ETHW     | FETH      | ETHV     | EZET     | CETH     | QETH     | Total     |\n  |------------|-----------|----------|-----------|----------|-----------|----------|----------|----------|----------|-----------|\n  | 2025-04-24 | -6600000  | 18300000 | 40000000  | 5100000  | 0         | 2600000  | 0        | 4100000  | 0        | 63550000  |\n  | 2025-04-23 | 0         | 6400000  | -30300000 | 0        | 0         | 0        | 0        | 0        | 0        | -23900000  |\n  | 2025-04-22 | 0         | 0        | 0         | 6100000  | 32700000  | 0        | 0        | 0        | 0        | 38800000  |\n  | 2025-04-21 | -25400000 | 0        | 0         | 0        | 0         | 0        | 0        | 0        | 0        | -25400000  |\n  | 2025-04-18 | 0         | 0        | 0         | 0        | 0         | 0        | 0        | 0        | 0        | 0         |\n  | 2025-04-17 | 0         | 0        | 0         | 0        | 0         | 0        | 0        | 0        | 0        | 0         |\n  ```\n\n## License\n\nThis project is licensed under the [MIT License](LICENSE).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "etf",
        "crypto",
        "fintech",
        "etf flow",
        "kukapay etf",
        "crypto etf"
      ],
      "category": "finance--fintech"
    },
    "kukapay--freqtrade-mcp": {
      "owner": "kukapay",
      "name": "freqtrade-mcp",
      "url": "https://github.com/kukapay/freqtrade-mcp",
      "imageUrl": "",
      "description": "An MCP server that integrates with the Freqtrade cryptocurrency trading bot.",
      "stars": 82,
      "forks": 20,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T17:46:53Z",
      "readme_content": "# Freqtrade-MCP\n\nAn MCP server that integrates with the [Freqtrade](https://www.freqtrade.io/) cryptocurrency trading bot via its REST API, enabling seamless AI agent interaction for automated trading operation.\n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/freqtrade-mcp)\n![Python Version](https://img.shields.io/badge/python-3.13+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Installation\n\n### Prerequisites\n- **Python 3.13+**: Ensure Python is installed on your system.\n- **Freqtrade**: A running Freqtrade instance with the REST API enabled (see [Freqtrade Docs](https://www.freqtrade.io/en/stable/rest-api/)).\n- **Git**: For cloning the repository.\n\n### Steps\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/freqtrade-mcp.git\n   cd freqtrade-mcp\n   ```\n\n2. **Install Dependencies**:\n   Using `pip`:\n   ```bash\n   pip install freqtrade-client mcp[cli]\n   ```\n   Or with `uv` (optional):\n   ```bash\n   uv add freqtrade-client \"mcp[cli]\"\n   ```\n\n3. **Client Configuration**:\n\n    ```\n    \"mcpServers\": { \n      \"freqtrade-mcp\": { \n        \"command\": \"uv\", \n        \"args\": [ \n          \"--directory\", \"/your/path/to/freqtrade-mcp\", \n          \"run\", \n          \"__main__.py\" \n        ], \n        \"env\": { \n           \"FREQTRADE_API_URL\": \"http://127.0.0.1:8080\",\n           \"FREQTRADE_USERNAME\": \"your_username\",\n           \"FREQTRADE_PASSWORD\": \"your_password\"\n        } \n      } \n    }\n    ```\n    \n4. **Freqtrade Configuration**:\n\n    Enable the rest API by adding the api_server section to your configuration and setting api_server.enabled to true.\n\n    Sample configuration:\n    ```\n        \"api_server\": {\n        \"enabled\": true,\n        \"listen_ip_address\": \"127.0.0.1\",\n        \"listen_port\": 8080,\n        \"verbosity\": \"error\",\n        \"enable_openapi\": false,\n        \"jwt_secret_key\": \"somethingrandom\",\n        \"CORS_origins\": [],\n        \"username\": \"Freqtrader\",\n        \"password\": \"SuperSecret1!\",\n        \"ws_token\": \"sercet_Ws_t0ken\"\n    },\n    ```\n\n   Check the document [here](https://www.freqtrade.io/en/stable/rest-api/#configuration).\n\n## Usage\n\n### Available Tools\nThe server exposes the following Freqtrade API endpoints as MCP tools:\n\n| Tool                  | Description                          | Parameters                          |\n|-----------------------|--------------------------------------|-------------------------------------|\n| `fetch_market_data`   | Fetch OHLCV data for a pair          | `pair: str`, `timeframe: str`       |\n| `fetch_bot_status`    | Get open trade status                | None                                |\n| `fetch_profit`        | Get profit summary                   | None                                |\n| `fetch_balance`       | Get account balance                  | None                                |\n| `fetch_performance`   | Get performance metrics              | None                                |\n| `fetch_whitelist`     | Get whitelist of pairs               | None                                |\n| `fetch_blacklist`     | Get blacklist of pairs               | None                                |\n| `fetch_trades`        | Get trade history                    | None                                |\n| `fetch_config`        | Get bot configuration                | None                                |\n| `fetch_locks`         | Get trade locks                      | None                                |\n| `place_trade`         | Place a buy/sell trade               | `pair: str`, `side: str`, `stake_amount: float` |\n| `start_bot`           | Start the bot                        | None                                |\n| `stop_bot`            | Stop the bot                         | None                                |\n| `reload_config`       | Reload bot configuration             | None                                |\n| `add_blacklist`       | Add pair to blacklist                | `pair: str`                         |\n| `delete_blacklist`    | Remove pair from blacklist           | `pair: str`                         |\n| `delete_lock`         | Delete a trade lock                  | `lock_id: int`                      |\n\n### Example Prompts\n1. **Fetch Market Data**:\n   - \"Show me the hourly price data for BTC/USDT.\"\n   - \"What’s the 5-minute chart for ETH/BTC like?\"\n   - \"Give me the latest candlestick data for XRP/USDT over the past hour.\"\n\n2. **Fetch Bot Status**:\n   - \"What’s the current status of my open trades?\"\n   - \"Are there any active trades right now?\"\n   - \"Tell me about the bot’s trading activity at the moment.\"\n\n3. **Fetch Profit**:\n   - \"How much profit have I made so far?\"\n   - \"What’s the total profit summary for the bot?\"\n   - \"Can you show me my trading gains?\"\n\n4. **Fetch Balance**:\n   - \"What’s my account balance?\"\n   - \"How much money do I have in the trading account?\"\n   - \"Tell me the current balance of my Freqtrade wallet.\"\n\n5. **Fetch Performance**:\n   - \"How well has the bot been performing?\"\n   - \"What are the performance metrics for my trades?\"\n   - \"Show me the trading stats.\"\n\n6. **Fetch Whitelist**:\n   - \"Which pairs are on the whitelist?\"\n   - \"What trading pairs is the bot allowed to use?\"\n   - \"List the whitelisted pairs for me.\"\n\n7. **Fetch Blacklist**:\n   - \"Which pairs are blacklisted?\"\n   - \"What trading pairs are blocked right now?\"\n   - \"Tell me about the blacklist.\"\n\n8. **Fetch Trades**:\n   - \"What’s the history of my closed trades?\"\n   - \"Show me all the trades the bot has completed.\"\n   - \"Can you list my past trades?\"\n\n9. **Fetch Config**:\n   - \"What’s the current bot configuration?\"\n   - \"Show me the settings the bot is using.\"\n   - \"Tell me about the Freqtrade config.\"\n\n10. **Fetch Locks**:\n    - \"Are there any trade locks active?\"\n    - \"What locks are currently in place?\"\n    - \"Show me the list of trading locks.\"\n\n11. **Place Trade**:\n    - \"Buy 0.01 BTC/USDT right now.\"\n    - \"Sell 0.05 ETH/USDT immediately.\"\n    - \"Place a buy order for 0.1 XRP/USDT.\"\n\n12. **Start Bot**:\n    - \"Start the trading bot.\"\n    - \"Turn on the Freqtrade bot.\"\n    - \"Get the bot running now.\"\n\n13. **Stop Bot**:\n    - \"Stop the trading bot.\"\n    - \"Shut down the Freqtrade bot.\"\n    - \"Pause the bot’s trading.\"\n\n14. **Reload Config**:\n    - \"Reload the bot’s configuration.\"\n    - \"Update the bot settings.\"\n    - \"Refresh the Freqtrade config.\"\n\n15. **Add Blacklist**:\n    - \"Blacklist ETH/USDT.\"\n    - \"Add BTC/ETH to the blacklist.\"\n    - \"Block trading for XRP/USDT.\"\n\n16. **Delete Blacklist**:\n    - \"Remove ETH/USDT from the blacklist.\"\n    - \"Unblock BTC/ETH for trading.\"\n    - \"Take XRP/USDT off the blacklist.\"\n\n17. **Delete Lock**:\n    - \"Delete the trade lock with ID 123.\"\n    - \"Remove lock number 45.\"\n    - \"Unlock the trade with ID 7.\"\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "freqtrade",
        "cryptocurrency",
        "freqtrade mcp",
        "freqtrade cryptocurrency",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--funding-rates-mcp": {
      "owner": "kukapay",
      "name": "funding-rates-mcp",
      "url": "https://github.com/kukapay/funding-rates-mcp",
      "imageUrl": "",
      "description": "Providing real-time funding rate data across major crypto exchanges.",
      "stars": 6,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-26T11:24:13Z",
      "readme_content": "# Funding Rates MCP\n\nAn MCP server that provides real-time funding rate data across major crypto exchanges, enabling agents to detect arbitrage opportunities. \n\n[![Discord](https://img.shields.io/discord/1353556181251133481?cacheSeconds=3600)](https://discord.gg/aRnuu2eJ)\n![GitHub License](https://img.shields.io/github/license/kukapay/funding-rates-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Real-Time Funding Rates**: Fetches current funding across Binance, OKX, Bybit, Bitget, Gate and CoinEx.\n- **Pivoted Table Output**: Displays symbols as rows, exchanges as columns, and includes a `Divergence` column for max funding rate difference.\n- **Claude Desktop Integration**: Runs as an MCP server for interactive queries.\n\n## Installation\n\n### Prerequisites\n- Python 3.10+\n- [uv](https://github.com/astral-sh/uv) for dependency management\n- [Claude Desktop](https://www.anthropic.com/claude) (optional, for interactive queries)\n- Git\n\n### Steps\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/funding-rates-mcp.git\n   cd funding-rates-mcp\n   ```\n\n2. **Set Up Dependencies with uv**:\n   ```bash\n   uv sync\n   ```\n\n3. **Configuring Claude Desktop**：\n\n    To use with Claude Desktop:\n    1. Edit the Claude configuration file:\n       - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n       - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n    2. Add the MCP server:\n       ```json\n       {\n         \"mcpServers\": {\n           \"funding-rates-mcp\": {\n             \"command\": \"uv\",\n             \"args\": [\"--directory\", \"/absolute/path/to/funding-rates-mcp\", \"run\", \"funding-rates-mcp\"]\n           }\n         }\n       }\n       ```\n    3. Restart Claude Desktop. Look for the hammer icon to confirm integration.\n\n## Usage\n    \n### Tools\n\nThe server provides the following MCP tool for querying funding rates:\n\n- **`compare_funding_rates`**:\n  - **Description**: Compares current funding rates for multiple symbols across specified exchanges, returning a pivoted Markdown table with a `Divergence` column showing the maximum funding rate difference for each symbol.\n  - **Parameters**:\n    - `symbols` (List[str]): List of trading pairs (e.g., `[\"BTC/USDT:USDT\", \"ETH/USDT:USDT\"]`). Required.\n    - `exchanges` (List[str], optional): List of exchanges to compare (e.g., `[\"binance\", \"okx\"]`). Defaults to all supported exchanges (`binance`, `okx`, `bybit`, `bitget`, `gate`, `coinex`).\n    - `params` (Dict, optional): Additional parameters for the API call. Defaults to `{}`.\n  - **Returns**: A Markdown table with symbols as rows, exchanges as columns, funding rates as values (formatted as percentages), and a `Divergence` column.\n  - **Example**: See the Examples section below.\n\n### Prompts\n\nThe server includes the following MCP prompt for generating natural language queries:\n\n- **`compare_funding_rates_prompt`**:\n  - **Description**: Generates a natural language prompt for comparing funding rates across all supported exchanges, suitable for Claude Desktop input.\n  - **Parameters**:\n    - `symbols` (List[str]): List of trading pairs (e.g., `[\"BTC/USDT:USDT\", \"ETH/USDT:USDT\"]`). Required.\n  - **Returns**: A string prompt (e.g., \"Compare the funding rates for BTC/USDT:USDT, ETH/USDT:USDT across binance, okx, bybit, bitget, gate, coinex.\").\n  - **Usage**: Used internally by Claude Desktop to interpret user queries or for testing in MCP Inspector.\n\n### Examples\n#### Compare Funding Rates\n- **Input** (in Claude Desktop):  \n  \"Compare funding rates for BTC/USDT:USDT and ETH/USDT:USDT across all exchanges.\"\n- **Output**:\n  ```\n  Current funding rates:\n\n  | Symbol\\Exchange | binance   | okx       | bybit     | bitget    | gate      | coinex    | Divergence |\n  |-----------------|-----------|-----------|-----------|-----------|-----------|-----------|------------|\n  | BTC/USDT:USDT   | 0.005161% | 0.007548% | 0.010000% | 0.002900% | -0.019200% | -0.035013% | 0.045013%  |\n  | ETH/USDT:USDT   | 0.010000% | 0.005839% | 0.010000% | 0.010000% | -0.008200% | 0.000000%  | 0.018200%  |\n  ```\n\n#### Compare Specific Exchanges\n- **Input** (in Claude Desktop):  \n  \"Compare funding rates for SOL/USDT:USDT on Binance, OKX, and Bybit.\"\n- **Output**:\n  ```\n  Current funding rates:\n\n  | Symbol\\Exchange | binance   | okx       | bybit     | Divergence |\n  |-----------------|-----------|-----------|-----------|------------|\n  | SOL/USDT:USDT   | -0.015312% | -0.003639% | -0.004467% | 0.011673%  |\n  ```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "finance",
        "fintech",
        "crypto",
        "finance fintech",
        "fintech kukapay",
        "kukapay funding"
      ],
      "category": "finance--fintech"
    },
    "kukapay--hyperliquid-info-mcp": {
      "owner": "kukapay",
      "name": "hyperliquid-info-mcp",
      "url": "https://github.com/kukapay/hyperliquid-info-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides real-time data and insights from the Hyperliquid perp DEX for use in bots, dashboards, and analytics.",
      "stars": 19,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T10:50:57Z",
      "readme_content": "# Hyperliquid Info MCP Server\n\nAn MCP server that provides real-time data and insights from the Hyperliquid perp DEX for use in bots, dashboards, and analytics.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/hyperliquid-info-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **User Data Queries**:\n  - `get_user_state`: Fetch user positions, margin, and withdrawable balance for perpetuals or spot markets.\n  - `get_user_open_orders`: Retrieve all open orders for a user account.\n  - `get_user_trade_history`: Get trade fill history with details like symbol, size, and price.\n  - `get_user_funding_history`: Query funding payment history with customizable time ranges.\n  - `get_user_fees`: Fetch user-specific fee structures (maker/taker rates).\n  - `get_user_staking_summary` & `get_user_staking_rewards`: Access staking details and rewards.\n  - `get_user_order_by_oid` & `get_user_order_by_cloid`: Retrieve specific order details by order ID or client order ID.\n  - `get_user_sub_accounts`: List sub-accounts associated with a main account.\n\n- **Market Data Tools**:\n  - `get_all_mids`: Get mid prices for all trading pairs.\n  - `get_l2_snapshot`: Fetch Level 2 order book snapshots for a specific coin.\n  - `get_candles_snapshot`: Retrieve candlestick data with customizable intervals and time ranges.\n  - `get_coin_funding_history`: Query funding rate history for a specific coin.\n  - `get_perp_dexs`: Fetch metadata about perpetual markets (using `meta`).\n  - `get_perp_metadata` & `get_spot_metadata`: Get detailed metadata for perpetual and spot markets, with optional asset contexts.\n\n- **Analysis Prompt**:\n  - `analyze_positions`: A guided prompt to analyze user trading activity using relevant tools.\n\n- **ISO 8601 Support**: Time-based queries (`get_candles_snapshot`, `get_coin_funding_history`, `get_user_funding_history`) accept ISO 8601 time strings for precise data filtering.\n\n## Installation\n\n### Prerequisites\n- **Python 3.10**: Required by the Hyperliquid Python SDK.\n- A valid Hyperliquid account address for user-specific queries.\n- [uv](https://github.com/astral-sh/uv) or [pip](https://pip.pypa.io/en/stable/) for package management.\n\n### Steps\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/hyperliquid-info-mcp.git\n   cd hyperliquid-info-mcp\n   ```\n\n2. **Install Dependencies**:\n   Using `uv`:\n   ```bash\n   uv sync\n   ```\n\n## Usage\n\n### Running the Server\nRun the server in development mode with MCP Inspector:\n```bash\nmcp dev main.py\n```\nOr install it for use in Claude Desktop:\n```bash\nmcp install main.py --name \"Hyperliquid Info\"\n```\n\n### Example Usage\n\nUsing the MCP Inspector or Claude Desktop, you can interact with the server using natural language prompts. Below are examples of how to trigger the `analyze_positions` prompt and individual tools conversationally.\n\n1. **Analyze Trading Positions**:\n   - **Prompt**:  \n     \"Please analyze the trading activity for my Hyperliquid account with address 0xYourAddress. Provide insights on my positions, open orders, and recent trades.\"\n   - **Behavior**:  \n     This triggers the `analyze_positions` prompt, which uses `get_user_state`, `get_user_open_orders`, `get_user_trade_history`, `get_user_funding_history`, and `get_user_fees` to fetch data and generate a risk/performance analysis.\n   - **Example Output**:  \n     ```\n     For account 0xYourAddress:\n     - Current Positions: 0.1 BTC long at $50,000, unrealized PNL +$500.\n     - Open Orders: 1 limit order to sell 0.05 BTC at $52,000.\n     - Recent Trades: Bought 0.1 BTC at $50,000 on 2025-05-30.\n     - Funding Payments: Paid $10 in funding fees last week.\n     - Fees: Maker fee 0.02%, taker fee 0.05%.\n     Recommendation: Monitor BTC price closely due to high leverage.\n     ```\n\n2. **Fetch User State**:\n   - **Prompt**:  \n     \"Show me the current state of my Hyperliquid account 0xYourAddress, including my positions and margin details for perpetuals.\"\n   - **Behavior**:  \n     Invokes `get_user_state(account_address=\"0xYourAddress\", check_spot=False)`.\n   - **Example Output**:  \n     ```\n     {\n       \"assetPositions\": [\n         {\n           \"position\": {\n             \"coin\": \"BTC\",\n             \"szi\": \"0.1\",\n             \"entryPx\": \"50000.0\",\n             \"markPx\": \"50500.0\",\n             \"unrealizedPnl\": \"500.0\"\n           }\n         }\n       ],\n       \"marginSummary\": {\n         \"accountValue\": \"10000.0\",\n         \"totalMarginUsed\": \"2000.0\"\n       },\n       \"withdrawable\": \"8000.0\"\n     }\n     ```\n\n3. **Get Candlestick Data**:\n   - **Prompt**:  \n     \"Can you get the 1-minute candlestick data for ETH on Hyperliquid from January 1, 2025, to January 2, 2025?\"\n   - **Behavior**:  \n     Invokes `get_candles_snapshot(coin_name=\"ETH\", interval=\"1m\", start_time=\"2025-01-01T00:00:00Z\", end_time=\"2025-01-02T00:00:00Z\")`.\n   - **Example Output**:  \n     ```\n     [\n       {\n         \"t\": 1672531200000,\n         \"o\": \"3000.0\",\n         \"h\": \"3010.0\",\n         \"l\": \"2995.0\",\n         \"c\": \"3005.0\",\n         \"v\": \"1000.0\"\n       },\n       ...\n     ]\n     ```\n\n4. **Check Trade History**:\n   - **Prompt**:  \n     \"What are the recent trades for my account 0xYourAddress on Hyperliquid?\"\n   - **Behavior**:  \n     Invokes `get_user_trade_history(account_address=\"0xYourAddress\")`.\n   - **Example Output**:  \n     ```\n     [\n       {\n         \"coin\": \"ETH\",\n         \"px\": \"3000.0\",\n         \"sz\": \"0.5\",\n         \"time\": 1672531200000,\n         \"tid\": \"123456\"\n       },\n       ...\n     ]\n     ```\n\n5. **Fetch Market Metadata**:\n   - **Prompt**:  \n     \"Tell me about the perpetual markets available on Hyperliquid, including trading pairs.\"\n   - **Behavior**:  \n     Invokes `get_perp_metadata(include_asset_ctxs=False)`.\n   - **Example Output**:  \n     ```\n     {\n       \"universe\": [\n         {\n           \"name\": \"BTC-PERP\",\n           \"maxLeverage\": 50,\n           \"szDecimals\": 4,\n           \"tickSz\": \"0.1\"\n         },\n         ...\n       ]\n     }\n     ```\n\n\n## License\nThis project is licensed under the [MIT License](LICENSE).\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "hyperliquid",
        "fintech",
        "mcp server",
        "info mcp",
        "fintech kukapay"
      ],
      "category": "finance--fintech"
    },
    "kukapay--hyperliquid-whalealert-mcp": {
      "owner": "kukapay",
      "name": "hyperliquid-whalealert-mcp",
      "url": "https://github.com/kukapay/hyperliquid-whalealert-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides real-time whale alerts on Hyperliquid, flagging positions with a notional value exceeding $1 million.",
      "stars": 6,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T20:05:51Z",
      "readme_content": "# Hyperliquid WhaleAlert MCP\n\nAn MCP server that provides real-time whale alerts on Hyperliquid, flagging positions with a notional value exceeding $1 million.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/hyperliquid-whalealert-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Tool: `get_whale_alerts`**: Fetches recent whale transactions and returns them as a Markdown table using `pandas` for clean formatting.\n- **Prompt: `summarize_whale_activity`**: Generates a summary of whale transactions, including metrics like total position value and notable symbols.\n\n## Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **CoinGlass API Key**: Obtain from [CoinGlass](https://www.coinglass.com/) (required for API access).\n- **uv**: Package and dependency manager ([install uv](https://docs.astral.sh/uv/)).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/hyperliquid-whalealert-mcp.git\n   cd hyperliquid-whalealert-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   uv sync\n   ```\n   This installs dependencies specified in `pyproject.toml`.\n\n3. **Claude Desktop Integration**:\n   Install the server in Claude Desktop:\n   ```bash\n   uv run mcp install mcp.py --name \"Hyperliquid Whale Alert\"\n   ```\n   \n    Or update the configuration file manually:\n  \n    ```\n    {\n      \"mcpServers\": {\n        \"hyperliquid-whalealert\": {\n          \"command\": \"uv\",\n          \"args\": [ \"--directory\", \"/path/to/hyperliquid-whalealert-mcp\", \"run\", \"main.py\" ],\n          \"env\": { \"COINGLASS_API_KEY\": \"your_api_key\" }\n        }\n      }\n    }\n    ```       \n    Replace `/path/to/hyperliquid-whalealert-mcp` with your actual installation path and `COINGLASS_API_KEY` with your API key.\n\n## Usage\n\n### Using the Tool\n\nThe `get_whale_alerts` tool fetches whale transaction data and returns it as a Markdown list. Example output:\n\n```markdown\n- **ETH Transaction**:\n  - User Address: 0x3fd4444154242720c0d0c61c74a240d90c127d33\n  - Position Size: 12700\n  - Entry Price: $1611.62\n  - Liquidation Price: $527.2521\n  - Position Value (USD): $21003260\n  - Action: Close\n  - Create Time: 2025-05-20 12:31:57\n- **BTC Transaction**:\n  - User Address: 0x1cadadf0e884ac5527ae596a4fc1017a4ffd4e2c\n  - Position Size: 33.54032\n  - Entry Price: $87486.2\n  - Liquidation Price: $44836.8126\n  - Position Value (USD): $2936421.4757\n  - Action: Close\n  - Create Time: 2025-05-20 12:31:17\n```\n  \nTo invoke the tool:\n- In the MCP Inspector, select `get_whale_alerts` and execute.\n- In Claude Desktop, use the registered server and call the tool via the UI or API.\n\n### Using the Prompt\n\nThe `summarize_whale_activity` prompt generates a summary of whale transactions. Example interaction (in a compatible client):\n\n```plaintext\n/summarize_whale_activity\n```\n\nResponse:\n```\nI'll analyze the whale transaction data and provide a summary.\n```\n\nThis can be extended by LLMs to provide detailed metrics like total position value or notable symbols.\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "whalealert",
        "whale",
        "whalealert mcp",
        "hyperliquid whalealert",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "kukapay--jupiter-mcp": {
      "owner": "kukapay",
      "name": "jupiter-mcp",
      "url": "https://github.com/kukapay/jupiter-mcp",
      "imageUrl": "",
      "description": "An MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API.",
      "stars": 21,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-28T06:54:59Z",
      "readme_content": "# Jupiter MCP Server\n\nAn MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API. \n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- Fetch swap orders from Jupiter's Ultra API, combining DEX routing and RFQ (Request for Quote) for optimal pricing.\n- Execute swaps via Jupiter's Ultra API, handling slippage, priority fees, and transaction landing.\n\n\n## Prerequisites\n\n- **Node.js**: Version 18 or higher (for native `fetch` support).\n- **Solana Wallet**: A private key (base58-encoded) for signing transactions.\n- **RPC Endpoint**: Access to a Solana RPC node (e.g., `https://api.mainnet-beta.solana.com`).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/jupiter-mcp.git\n   cd jupiter-mcp\n   ```\n\n2. **Install Dependencies**:\n   Ensure you have the MCP Server package installed along with other required dependencies:\n   ```bash\n   npm install\n   ```\n\n3. **Client Configuration**:\n\n```json\n{\n  \"mcpServers\": {\n    \"Jupiter-MCP\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/jupiter-mcp/server/index.js\"],\n      \"env\": {\n        \"SOLANA_RPC_URL\": \"solana rpc url you can access\",\n        \"PRIVATE_KEY\": \"your private key\"\n      }\n    }\n  }\n}\n```\n\n## Tools\n\n### Ultra API Tools\n- **`get-ultra-order`**:\n  - **Description**: Fetches a swap order from Jupiter's Ultra API, leveraging both DEX routing and RFQ for optimal pricing.\n  - **Inputs**: \n    - `inputMint`: Input token mint address (e.g., SOL or token pubkey).\n    - `outputMint`: Output token mint address (e.g., USDC or token pubkey).\n    - `amount`: Input amount as a string (e.g., \"1.23\").\n    - `slippageBps`: Slippage tolerance in basis points (e.g., 50 for 0.5%). \n  - **Output**: JSON with `requestId`, `transaction` (base64-encoded), `inputMint`, `outputMint`, `inAmount`, `outAmount`, `price`.\n\n- **`execute-ultra-order`**:\n  - **Description**: Requests Jupiter to execute the swap transaction on behalf of the wallet owner, handling slippage, priority fees, and transaction landing.\n  - **Inputs**: \n    - `requestId`: Unique identifier from `get-ultra-order`.\n    - `transaction`: Base64-encoded transaction from `get-ultra-order`.\n  - **Output**: JSON with `status`, `transactionId`, `slot`, `inputAmountResult`, `outputAmountResult`, `swapEvents`.\n\n## Example Interaction\n\nBelow are examples of interacting with the server using natural language prompts and expected responses:\n\n### Fetching a Swap Order\n- **Prompt**: \"Get a swap order to trade 1.23 SOL for USDC.\"\n- **Input**: \n  - Tool: `get-ultra-order`\n  - Arguments: \n    - `inputMint`: \"So11111111111111111111111111111111111111112\" (SOL)\n    - `outputMint`: \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\" (USDC)\n    - `amount`: \"1.23\"\n    - `slippageBps`: 50\n- **Response**:\n  ```\n  {\n    \"requestId\": \"a770110b-82c9-46c8-ba61-09d955b27503\",\n    \"transaction\": \"AQAAAA...base64-encoded-transaction...==\",\n    \"inputMint\": \"So11111111111111111111111111111111111111112\",\n    \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n    \"inAmount\": \"1230000000\",\n    \"outAmount\": \"19950000\",\n    \"price\": 0.01621951219512195\n  }\n  ```\n\n### Executing a Swap\n- **Prompt**: \"Execute the swap order with request ID 'a770110b-82c9-46c8-ba61-09d955b27503' using the transaction provided.\"\n- **Input**: \n  - Tool: `execute-ultra-order`\n  - Arguments: \n    - `requestId`: \"a770110b-82c9-46c8-ba61-09d955b27503\"\n    - `transaction`: \"AQAAAA...base64-encoded-transaction...==\"\n- **Response**:\n  ```\n  {\n    \"status\": \"Success\",\n    \"transactionId\": \"5x...solana-transaction-signature...\",\n    \"slot\": 299283763,\n    \"inputAmountResult\": \"1230000000\",\n    \"outputAmountResult\": \"19950000\",\n    \"swapEvents\": [\n      {\n        \"type\": \"swap\",\n        \"inputMint\": \"So11111111111111111111111111111111111111112\",\n        \"outputMint\": \"EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v\",\n        \"inAmount\": \"1230000000\",\n        \"outAmount\": \"19950000\"\n      }\n    ]\n  }\n  ```\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "token",
        "jupiter",
        "jupiter mcp",
        "fintech kukapay",
        "kukapay jupiter"
      ],
      "category": "finance--fintech"
    },
    "kukapay--pancakeswap-poolspy-mcp": {
      "owner": "kukapay",
      "name": "pancakeswap-poolspy-mcp",
      "url": "https://github.com/kukapay/pancakeswap-poolspy-mcp",
      "imageUrl": "",
      "description": "An MCP server that tracks newly created pools on Pancake Swap.",
      "stars": 5,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-02T11:03:37Z",
      "readme_content": "# PancakeSwap PoolSpy MCP Server\n\nAn MCP server that tracks newly created liquidity pools on Pancake Swap, providing real-time data for DeFi analysts, traders, and developers.\n\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n[![Python](https://img.shields.io/badge/Python-3.10+-yellow.svg)](https://www.python.org/)\n[![smithery badge](https://smithery.ai/badge/@kukapay/pancakeswap-poolspy-mcp)](https://smithery.ai/server/@kukapay/pancakeswap-poolspy-mcp)\n\n## Features\n\n- **Real-Time Pool Tracking**: Fetches pools created within a specified time range (default: 5 minutes).\n- **Customizable Queries**: Adjust the time range (in seconds) and the number of pools returned (default: 100).\n- **Detailed Metrics**: Includes pool address, tokens, creation timestamp, block number, transaction count, volume (USD), and total value locked (USD).\n\n## Prerequisites\n\n- **Python 3.10+**: Ensure Python is installed on your system.\n- **The Graph API Key**: Obtain an API key from [The Graph](https://thegraph.com/) to access the PancakeSwap subgraph.\n\n## Installation\n\n### Installing via Smithery\n\nTo install PancakeSwap PoolSpy for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/pancakeswap-poolspy-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/pancakeswap-poolspy-mcp --client claude\n```\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/pancakeswap-poolspy-mcp.git\n   cd pancakeswap-poolspy-mcp\n   ```\n\n2. **Install Dependencies**:\n   Install the required Python packages using uv:\n   ```bash\n   uv add mcp[cli] httpx dotenv\n   ```\n\n3. **Client Configuration**\n    ```json\n    {\n      \"mcpServers\": {\n        \"PancakeSwap-PoolSpy\": {\n          \"command\": \"uv\",\n          \"args\": [\"--directory\", \"path/to/pancakeswap-poolspy-mcp\", \"run\", \"main.py\"],\n          \"env\": {\n            \"THEGRAPH_API_KEY\": \"your api key from The Graph\"\n          }\n        }\n      }\n    }\n    ```\n\n## Usage\n\n### Running the Server\n\nRun the server in development mode to test it locally:\n```bash\nmcp dev main.py\n```\nThis launches the MCP Inspector, where you can interact with the `get_new_pools_bsc` tool.\n\n### Available Tool\n\n#### `get_new_pools_bsc(time_range_seconds: int = 300, limit: int = 100)`\n\nFetches a list of newly created PancakeSwap pools on BNB Smart Chain.\n\n- **Parameters**:\n  - `time_range_seconds` (int): Time range in seconds to look back for new pools. Default is 300 seconds (5 minutes).\n  - `limit` (int): Maximum number of pools to return. Default is 100 pools.\n\n- **Returns**: A formatted string listing pool details or an error message if the query fails.\n\n- **Example Outputs**:\n  - Default (last 5 minutes, up to 100 pools):\n    ```bash\n    get_new_pools_bsc()\n    ```\n    ```\n    Newly Created Trading Pools (Last 5 Minutes, Limit: 100):\n    Pool Address: 0x1234...5678\n    Tokens: WETH/USDC\n    Created At: 2025-03-16 12:00:00 UTC\n    Block Number: 12345678\n    Transaction Count: 10\n    Volume (USD): 1234.56\n    Total Value Locked (USD): 5678.90\n\n    Pool Address: 0x9abc...def0\n    Tokens: CAKE/BNB\n    Created At: 2025-03-16 12:01:00 UTC\n    Block Number: 12345679\n    Transaction Count: 5\n    Volume (USD): 789.12\n    Total Value Locked (USD): 3456.78\n    ```\n\n  - Custom (last 10 minutes, up to 50 pools):\n    ```bash\n    get_new_pools(600, 50)\n    ```\n    ```\n    Newly Created Trading Pools (Last 10 Minutes, Limit: 50):\n    [pool details...]\n    ```\n\n### **Example Prompts**:\n\n   - \"list newly created PancakeSwap pools from the last 1 hours.\"\n   - \"Display PancakeSwap pools created within the last 2 minutes.\"\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "pancakeswap",
        "poolspy",
        "pancakeswap poolspy",
        "poolspy mcp",
        "kukapay pancakeswap"
      ],
      "category": "finance--fintech"
    },
    "kukapay--pumpswap-mcp": {
      "owner": "kukapay",
      "name": "pumpswap-mcp",
      "url": "https://github.com/kukapay/pumpswap-mcp",
      "imageUrl": "",
      "description": "Enabling AI agents to interact with PumpSwap for real-time token swaps and automated on-chain trading.",
      "stars": 5,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-19T23:05:04Z",
      "readme_content": "# PumpSwap MCP Server\n\nAn MCP server that enables AI agents to interact with [PumpSwap](https://swap.pump.fun/) for real-time token swaps and automated on-chain trading.\n\n![License](https://img.shields.io/badge/license-MIT-green)\n![Python](https://img.shields.io/badge/python-3.10%2B-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Buy Tokens**: Purchase tokens using SOL with customizable slippage and priority fees.\n- **Sell Tokens**: Sell tokens for SOL with configurable parameters.\n- **Token Price Query**: Retrieve current token prices in SOL.\n- **Pool Data Retrieval**: Fetch and display detailed pool information for a given token mint.\n\n## Prerequisites\n\n- Python 3.13 or higher\n- [uv](https://github.com/astral-sh/uv) for dependency management and script execution\n- Solana RPC endpoint (e.g., `https://api.mainnet-beta.solana.com`)\n- A valid Solana private key for transaction signing\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/pumpswap-mcp.git\n   cd pumpswap-mcp\n   ```\n\n2. **Install uv**:\n   If `uv` is not installed, follow the official [uv installation guide](https://github.com/astral-sh/uv#installation). For example:\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n3. **Set Up Dependencies**:\n   Use `uv` to install dependencies:\n   ```bash\n   uv sync\n   ```\n\n4. **Configure Environment Variables**:\n   Create a `.env.private` filein the project root with the following variables:\n   ```plaintext\n   HTTPS_RPC_ENDPOINT=https://api.mainnet-beta.solana.com\n   BUY_SLIPPAGE=0.3\n   SELL_SLIPPAGE=0.1\n   SWAP_PRIORITY_FEE=1500000\n   PRIVATE_KEY=your-solana-private-key\n   ```\n\n   Replace `your-solana-private-key` with your actual Solana private key. \n   \n## Usage\n\n### Run the MCP Server\n   Use `uv` to run the server:\n   ```bash\n   uv run main.py\n   ```\n\n   The server will listen for MCP commands and expose the following tools:\n   - `buy_token(mint: str, sol_amount: float, user_private_key: str)`: Buy tokens with SOL.\n   - `sell_token(mint: str, token_amount: float, user_private_key: str)`: Sell tokens for SOL.\n   - `get_token_price(mint: str)`: Fetch the current token price in SOL.\n   - `get_pool_data(mint: str)`: Retrieve formatted pool data for a token.\n\n### Buy Tokens\n\n**Prompt**:\n```\nBuy 0.1 SOL worth of tokens with mint address FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump.\n```\n\nThis triggers `buy_token(\"FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\", 0.1)`.\n\n**Expected Output**:\n```\nBuy successful for 0.1 SOL of token FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\nTransaction ID: <transaction-id>\nAmount: <token-amount>\nToken Price (SOL): <price>\n```\n\n### Sell Tokens\n**Prompt**:\n```\nSell 1000 tokens of FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump.\n```\n\nThis triggers `sell_token(\"FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\", 1000)`.\n\n**Expected Output**:\n```\nSell successful for 1000 tokens of FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\nTransaction ID: <transaction-id>\nAmount: <sol-amount>\nToken Price (SOL): <price>\n```\n\n### Get Token Price\n**Prompt**:\n```\nWhat is the current price of the token with mint FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump?\n```\nThis triggers `get_token_price(\"FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\")`.\n\n**Expected Output**:\n```\nThe current price of token FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump is <price> SOL.\n```\n\n### Get Pool Data\n**Prompt**:\n```\nShow me the pool data for the token with mint FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump.\n```\nThis triggers `get_pool_data(\"FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump\")`.\n\n**Expected Output**:\n```\nPumpPool Data for mint FC988ZAKRPc26wefDAxcYWB8kgbJTH4Tg3qDvf7xpump:\nPool Bump: <bump>\nIndex: <index>\nCreator: <creator-pubkey>\nBase Mint: <base-mint>\nQuote Mint: <quote-mint>\nLP Mint: <lp-mint>\nPool Base Token Account: <base-account>\nPool Quote Token Account: <quote-account>\nLP Supply: <supply>\n```\n\n## Environment Variables\n\nThe server uses the following environment variables, loaded from `.env.private`:\n\n| Variable              | Description                                      | Default Value                       |\n|-----------------------|--------------------------------------------------|-------------------------------------|\n| `HTTPS_RPC_ENDPOINT`  | Solana RPC endpoint URL                          | https://api.mainnet-beta.solana.com |\n| `BUY_SLIPPAGE`        | Slippage tolerance for buy transactions          | 0.3 (30%)                           |\n| `SELL_SLIPPAGE`       | Slippage tolerance for sell transactions         | 0.1 (10%)                           |\n| `SWAP_PRIORITY_FEE`   | Priority fee for transactions (in lamports)      | 1500000                             |\n| `PRIVATE_KEY`         | Solana private key for signing transactions      | None (required)                     |\n\nEnsure `PRIVATE_KEY` is set, as the server will raise an error if it's missing.\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n## Disclaimer\n\nThis software interacts with decentralized finance (DeFi) protocols and handles sensitive data like private keys. Use it at your own risk. Ensure your `.env.private` file is secure and never share your private key. The authors are not responsible for any financial losses or security issues arising from the use of this software.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pumpswap",
        "mcp",
        "fintech",
        "pumpswap mcp",
        "kukapay pumpswap",
        "interact pumpswap"
      ],
      "category": "finance--fintech"
    },
    "kukapay--raydium-launchlab-mcp": {
      "owner": "kukapay",
      "name": "raydium-launchlab-mcp",
      "url": "https://github.com/kukapay/raydium-launchlab-mcp",
      "imageUrl": "",
      "description": "An MCP server that enables AI agents to launch, buy, and sell tokens on the Raydium Launchpad(aka LaunchLab).",
      "stars": 2,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-26T10:21:33Z",
      "readme_content": "# Raydium LaunchLab MCP\n\nAn MCP server that enables AI agents to launch, buy, and sell tokens on the Raydium Launchpad(also know as [LaunchLab](https://raydium.io/launchpad/)).\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Mint Token**: Create a bonding-curve-based token with customizable parameters (name, symbol, decimals, total supply, fundraising target, etc.) and upload metadata to IPFS.\n- **Buy Token**: Purchase tokens from a Raydium Launchpad pool using SOL.\n- **Sell Token**: Sell tokens back to a Raydium Launchpad pool.\n- **IPFS Integration**: Uploads token images and metadata to IPFS for decentralized storage.\n\n## Prerequisites\n\n- **Node.js**: Version 18.x or higher.\n- **Solana Wallet**: A private key with sufficient SOL for transactions.\n- **Pinata Account**: API credentials for IPFS storage (JWT and gateway).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/raydium-launchlab-mcp.git\n   cd raydium-launchlab-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n   \n3. **Configure MCP Client**:\n    ```json\n    {\n      \"mcpServers\": {\n        \"raydium-launchlab\": {\n          \"command\": \"node\",\n          \"args\": [\"/path/to/raydium-launchlab-mcp/index.js\"],\n          \"env\": {\n             \"RPC_URL\": \"your-solana-rpc-url\",\n             \"PRIVATE_KEY\": \"your-private-key-as-integer-array\",\n             \"PINATA_JWT\": \"your-pinata-jwt\",\n             \"PINATA_GATEWAY\": \"your-pinata-gateway\"\n          }\n        }\n      }\n    }\n    ```\n   - Replace `/path/to/raydium-launchlab-mcp` with your actual installation path.  \n   - Replace `your-solana-rpc-url` with your own Solana rpc url.\n   - Replace `your-private-key-as-integer-array` with your Solana wallet's private key (e.g., `[1,2,3,...]`).\n   - Obtain `PINATA_JWT` and `PINATA_GATEWAY` from your Pinata account.\n   \n\n## Tools\n\nThe MCP server exposes three tools for interacting with Raydium Launchpad:\n\n### 1. `mint_token`\nCreates a bonding-curve-based token on Raydium Launchpad with metadata uploaded to Pinata IPFS.\n\n**Parameters**:\n- `name` (string, 1-32 chars): Token name (e.g., \"My Token\").\n- `symbol` (string, 1-10 chars): Token symbol (e.g., \"MTK\").\n- `imagePath` (string): Path to the token logo (e.g., \"/assets/logo.png\").\n- `decimals` (integer, 0-18, default: 6): Number of decimal places.\n- `fundRaisingTarget` (number, positive, default: 85): Target SOL amount to raise.\n- `totalSupply` (number, default: 1,000,000,000): Total token supply.\n- `totalSellPercent` (number, default: 0.75): Percentage of supply for fundraising.\n- `createOnly` (boolean, default: true): If `true`, skips initial buy.\n- `initialBuyAmount` (number, non-negative, default: 0.1): SOL amount for initial buy (if `createOnly` is `false`).\n- `slippage` (number, 0-1.0, default: 0.01): Acceptable price slippage percentage (e.g., 0.01 for 1%).\n\n**Example Prompt**:\n> Create a new token on Raydium Launchpad named 'My Token' with symbol 'MTK', using the logo at '/assets/logo.png', a fundraising target of 35 SOL.\n\n\n**Example Response**:\n> Successfully created token (mint: <mint_address>, name: My Token, symbol: MTK). Transaction signatures: <tx_id>\n\n### 2. `buy_token`\nPurchases tokens from a Raydium Launchpad pool using SOL.\n\n**Parameters**:\n- `mintAddress` (string): Token mint address.\n- `inAmount` (number, positive): Amount of SOL to spend.\n- `slippage` (number, 0-1.0, default: 0.01): Acceptable price slippage percentage.\n\n**Example Prompt**:\n> Buy tokens from a Raydium Launchpad pool with mint address '<mint_address>' using 0.5 SOL and a slippage of 1%.\n\n**Example Response**:\n> Successfully purchased tokens (mint: <mint_address>). Transaction signature: <tx_id>\n\n### 3. `sell_token`\nSells tokens back to a Raydium Launchpad pool.\n\n**Parameters**:\n- `mintAddress` (string): Token mint address.\n- `inAmount` (number, positive): Amount of tokens to sell.\n- `slippage` (number, 0-1.0, default: 0.01): Acceptable price slippage percentage.\n\n**Example Prompt**:\n> Sell 1,000,000 tokens from a Raydium Launchpad pool with mint address '<mint_address>' and a slippage of 1%.\n\n**Example Response**:\n> Successfully sold tokens (mint: <mint_address>). Transaction signature: <tx_id>\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "launchpad",
        "fintech",
        "launchlab mcp",
        "fintech kukapay",
        "raydium launchlab"
      ],
      "category": "finance--fintech"
    },
    "kukapay--rug-check-mcp": {
      "owner": "kukapay",
      "name": "rug-check-mcp",
      "url": "https://github.com/kukapay/rug-check-mcp",
      "imageUrl": "",
      "description": "An MCP server that detects potential risks in Solana meme tokens.",
      "stars": 14,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T13:41:36Z",
      "readme_content": "# Rug-Check-MCP\n\nAn MCP server that detects potential risks in Solana meme tokens, helping AI agents avoid rug pulls and unsafe projects.\n\n![License](https://img.shields.io/github/license/kukapay/rug-check-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\n[![smithery badge](https://smithery.ai/badge/@kukapay/rug-check-mcp)](https://smithery.ai/server/@kukapay/rug-check-mcp)\n\n## Features\n\n- **Token Analysis Tool**: The `analysis_token` tool retrieves and processes Solana token data from the Solsniffer API.\n- **Structured Output**: Returns detailed token information including name, symbol, Snif score, market cap, price, supply, risks, and audit status.\n\n## Prerequisites\n\n- Python 3.10 or higher\n- A Solsniffer API key (sign up at [Solsniffer](https://solsniffer.com) to obtain one)\n\n## Installation\n\n### Installing via Smithery\n\nTo install Rug Check for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/rug-check-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/rug-check-mcp --client claude\n```\n\n### Manual Installation\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/rug-check-mcp.git\n   cd rug-check-mcp\n   ```\n\n2. **Install Dependencies**:\n   Ensure you have `pip` installed, then run:\n   ```bash\n   pip install mcp[cli] requests python-dotenv\n   ```\n\n3. **Client Configuration**:\n\n    ```\n    \"mcpServers\": { \n      \"rug-check-mcp\": { \n        \"command\": \"python\", \n        \"args\": [\"path/to/rug-check-mcp/main.py\"], \n        \"env\": { \n          \"SOLSNIFFER_API_KEY\": \"your_solsniffer_api_key_here\" \n        } \n      } \n    }\n    ```\n\n## Tool: `analysis_token`\n\n- **Description**: Analyzes a Solana token based on its address.\n- **Input**: `token_address` (string) - The Solana token address to analyze.\n- **Output**: A dictionary containing:\n  - `token_address`: Token address\n  - `token_name`: Token name\n  - `token_symbol`: Token symbol\n  - `snif_score`: Solsniffer risk score (0-100)\n  - `market_cap`: Market capitalization in USD\n  - `price`: Token price in USD\n  - `supply_amount`: Total supply of the token\n  - `risks`: High, moderate, and low risk details with counts and descriptions\n  - `audit_risk`: Audit status (mint/freeze disabled, LP burned, top 10 holders)\n\n  \n### Example Output\nFor token address `9VxExA1iRPbuLLdSJ2rB3nyBxsyLReT4aqzZBMaBaY1p`:\n```json\n{\n  'token_address': '9VxExA1iRPbuLLdSJ2rB3nyBxsyLReT4aqzZBMaBaY1p',\n  'token_name': 'REVSHARE',\n  'token_symbol': 'REVS',\n  'snif_score': 55,\n  'market_cap': 271893.9423965262,\n  'price': 0.000280011574,\n  'supply_amount': 971009656.8955618,\n  'risks': {\n    'high': {\n      'count': 3,\n      'details': {\n        'Mintable risks found': True,\n        'Freeze risks found': True,\n        'A private wallet owns a significant share of the supply': False,\n        'Tokens auto-freeze risks found': True,\n        'Significant ownership by top 10 wallets': False,\n        'Significant ownership by top 20 wallets': False,\n        'Permanent control risks found': True,\n        'Presence of token metadata': True,\n        'High locked supply risks found': None,\n        'Sufficient liquidity detected': None,\n        'Very low liquidity': None\n      }\n    },\n    'moderate': {\n      'count': 3,\n      'details': {\n        'Token metadata are immutable': False,\n        'Token operates without custom fees': False,\n        'Token has recent user activity': True,\n        'Unknown liquidity pools': False,\n        'Low count of LP providers': True\n      }\n    },\n    'low': {\n      'count': 1,\n      'details': {\n        'Contract was not recently deployed': False\n      }\n    }\n  },\n  'audit_risk': {\n    'mint_disabled': True,\n    'freeze_disabled': True,\n    'lp_burned': False,\n    'top_10_holders_significant': False\n  }\n}\n```\n\n### Prompt Examples\n\nBelow are examples of prompts you might use in an MCP-compatible client (e.g., Claude Desktop) and the expected responses after the `analysis_token` tool is invoked.\n\n**Prompt**: \n\n> \"Can you analyze the Solana token at address `9VxExA1iRPbuLLdSJ2rB3nyBxsyLReT4aqzZBMaBaY1p`?\"\n   \n**Response**:\n```plaintext\nI've analyzed the token at address 9VxExA1iRPbuLLdSJ2rB3nyBxsyLReT4aqzZBMaBaY1p. Here's the summary:\n\n- Token Name: REVSHARE (Symbol: REVS)\n- Snif Score: 55/100 (Moderate risk)\n- Market Cap: $288,875.29\n- Price: $0.000297\n- Total Supply: 971,266,696.90 tokens\n- Risks:\n  - High (3 risks):\n    - Mintable risks found: True\n    - Freeze risks found: True\n    - Permanent control risks found: True\n    - (Other factors: False)\n  - Moderate (1 risk):\n    - Low count of LP providers: True\n    - (Other factors: False)\n  - Low (0 risks):\n    - (All factors: False)\n- Audit Status:\n  - Mint Disabled: Yes\n  - Freeze Disabled: Yes\n  - LP Burned: No\n  - Top 10 Holders Significant: No\n\nThis token has moderate risks due to potential control issues and liquidity concerns, but minting and freezing are disabled for added safety.     \n```\n\n**Prompt**: \n\n> \"What’s the risk profile of the token `So11111111111111111111111111111111111111112`?\"\n\n**Response**:\n```plaintext\nHere's the risk profile for the token at address So11111111111111111111111111111111111111112:\n\n- Token Name: Wrapped SOL (Symbol: SOL)\n- Snif Score: 92/100 (Low risk)\n- Market Cap: $82,345,678.90\n- Price: $176.54\n- Total Supply: 466,567,890.12 tokens\n- Risks:\n  - High (0 risks):\n    - (All factors: False)\n  - Moderate (0 risks):\n    - (All factors: False)\n  - Low (1 risk):\n    - Minor liquidity concentration: True\n    - (Other factors: False)\n- Audit Status:\n  - Mint Disabled: Yes\n  - Freeze Disabled: Yes\n  - LP Burned: Yes\n  - Top 10 Holders Significant: No\n\nWrapped SOL is a low-risk token with strong audit protections and only a minor liquidity concern, typical for a well-established asset.     \n```\n\n**Prompt**: \n> \"Tell me about the token `4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R`.\"\n\n**Response**:\n```plaintext\nHere's the analysis for the token at address 4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R:\n\n- Token Name: Raydium (Symbol: RAY)\n- Snif Score: 85/100 (Low risk)\n- Market Cap: $1,234,567.89\n- Price: $4.72\n- Total Supply: 261,567,890.12 tokens\n- Risks:\n  - High (0 risks):\n    - (All factors: False)\n  - Moderate (1 risk):\n    - Moderate holder concentration: True\n    - (Other factors: False)\n  - Low (0 risks):\n    - (All factors: False)\n- Audit Status:\n  - Mint Disabled: Yes\n  - Freeze Disabled: Yes\n  - LP Burned: Yes\n  - Top 10 Holders Significant: No\n\nRaydium is a low-risk token with solid audit protections. The moderate holder concentration indicates some centralization, but it’s not a major issue.     \n```\n\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "tokens",
        "meme tokens",
        "fintech kukapay",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "kukapay--sui-trader-mcp": {
      "owner": "kukapay",
      "name": "sui-trader-mcp",
      "url": "https://github.com/kukapay/sui-trader-mcp",
      "imageUrl": "",
      "description": "An MCP server designed for AI agents to perform optimal token swaps on the Sui blockchain.",
      "stars": 4,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-10T14:43:40Z",
      "readme_content": "# Sui Trader MCP\n\nAn MCP server designed for AI agents to perform optimal token swaps on the Sui blockchain.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Token Swaps**: Execute token swaps on Sui mainnet via the Cetus Aggregator.\n- **Bech32 Private Key Support**: Securely load a Sui private key (starting with `suiprivkey`) from environment variables.\n\n## Prerequisites\n\n- **Node.js**: Version 18.x or higher.\n- **npm**: For dependency management.\n- **Sui Wallet**: A Sui private key in bech32 format (starts with `suiprivkey`).\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/sui-trader-mcp.git\n   cd sui-trader-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n3. **Configure MCP Client**:\n    ```json\n    {\n      \"mcpServers\": {\n        \"sui-trader\": {\n          \"command\": \"node\",\n          \"args\": [\"/absolute/path/to/sui-trader-mcp/index.js\"],\n          \"env\": { \"PRIVATE_KEY\": \"your_private_key\" }\n          }\n        }\n      }\n    }\n    ```\n    Replace `/absolute/path/to/sui-trader-mcp/` with the actual installation path, and `your_private_key` with your Bech32-formatted private key..\n    \n## Usage\n\nUse an MCP-compatible client to invoke the `swap` tool. \n\n### Example\n\nPrompt:\n```\nSwap 1.5 SUI to USDC with 2% slippage, using a fixed input amount.\n```\n\nOutput:\n```\nTransaction ID: zjGekhLBfMYzGqu57fTeu3K1NX5jC5wNUy8rpdPcLyv. Status: success\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "trader",
        "fintech",
        "trader mcp",
        "mcp server",
        "sui trader"
      ],
      "category": "finance--fintech"
    },
    "kukapay--thegraph-mcp": {
      "owner": "kukapay",
      "name": "thegraph-mcp",
      "url": "https://github.com/kukapay/thegraph-mcp",
      "imageUrl": "",
      "description": "An MCP server that powers AI agents with indexed blockchain data from The Graph.",
      "stars": 5,
      "forks": 11,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-31T09:46:46Z",
      "readme_content": "# TheGraph MCP Server\n\nAn MCP server that powers AI agents with indexed blockchain data from [The Graph](https://thegraph.com/).\n\n<a href=\"https://glama.ai/mcp/servers/@kukapay/thegraph-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kukapay/thegraph-mcp/badge\" alt=\"TheGraph Server MCP server\" />\n</a>\n\n![GitHub License](https://img.shields.io/github/license/kukapay/thegraph-mcp) \n![GitHub Last Commit](https://img.shields.io/github/last-commit/kukapay/thegraph-mcp) \n![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)\n\n## Available Tools\n\n### 1. getSubgraphSchema\nFetches the schema of a specified subgraph, providing AI agents with the context needed to generate GraphQL queries. \n\n**Parameters:**\n- `subgraphId`: The subgraph ID (e.g., \"QmZBQcF...\")\n- `asText`: Output format flag\n  - `true`: Returns human-readable GraphQL schema\n  - `false`: Returns JSON schema (default)\n\n### 2. querySubgraph\nExecutes GraphQL queries against a specified subgraph. While queries are typically generated by AI, you can also manually craft your own.\n\n**Parameters:**\n- `subgraphId`: The subgraph ID\n- `query`: GraphQL query string\n\n\n## Installation\n\n1. **Clone the Repository**\n    ```bash\n    git clone https://github.com/kukapay/thegraph-mcp.git\n    ```\n2. **Client Configuration**\n    ```json\n    {\n      \"mcpServers\": {\n        \"thegraph-mcp\": {\n          \"command\": \"uv\",\n          \"args\": [\"--directory\", \"path/to/thegraph-mcp\", \"run\", \"main.py\"],\n          \"env\": {\n            \"THEGRAPH_API_KEY\": \"your_api_key_here\"\n          }\n        }\n      }\n    }\n    ```\n\n## Example Prompts\n\nHere are some natural language prompts to trigger the tools:\n\n### Schema Queries\n- \"Show me the schema for subgraph QmZBQcF... in a readable format\"\n- \"What's the structure of the QmZBQcF... subgraph? Please display it in GraphQL format\"\n- \"I need to understand the data model of subgraph QmZBQcF..., can you fetch its schema?\"\n\n### Data Queries\n- \"Find the top 5 tokens by trading volume in the last 24 hours from subgraph QmZBQcF...\"\n- \"Show me all pairs with liquidity greater than 1 million USD in subgraph QmZBQcF...\"\n- \"Get the latest 10 swap events from the QmZBQcF... subgraph, including token symbols and amounts\"\n\n### Analysis Tasks\n- \"Analyze the trading volume of USDT pairs in the last week using subgraph QmZBQcF...\"\n- \"Compare the liquidity of ETH and USDC pairs in subgraph QmZBQcF...\"\n- \"Find unusual trading patterns in the last 24 hours from subgraph QmZBQcF...\"\n\n### Combined Tasks\n- \"First get the schema of QmZBQcF..., then help me write a query to find high-value transactions\"\n- \"Check the schema of QmZBQcF... and tell me what fields are available for querying token prices\"\n- \"Using subgraph QmZBQcF..., analyze the market impact of large trades by first understanding the schema and then querying relevant events\"\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "blockchain",
        "fintech",
        "indexed blockchain",
        "finance fintech",
        "agents indexed"
      ],
      "category": "finance--fintech"
    },
    "kukapay--token-minter-mcp": {
      "owner": "kukapay",
      "name": "token-minter-mcp",
      "url": "https://github.com/kukapay/token-minter-mcp",
      "imageUrl": "",
      "description": "An MCP server providing tools for AI agents to mint ERC-20 tokens across multiple blockchains.",
      "stars": 15,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-10T14:44:01Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/kukapay-token-minter-mcp)\n\n# Token Minter MCP\n\nAn MCP server providing tools for AI agents to mint ERC-20 tokens, supporting 21 blockchains.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- Deploy new ERC-20 tokens with customizable parameters.\n- Query token metadata (name, symbol, decimals, total supply).\n- Initiate token transfers (returns transaction hash without confirmation).\n- Retrieve transaction details by hash.\n- Check native token balance of the current account.\n- Access token metadata via URI.\n- Interactive prompt for deployment guidance.\n\n### Tools\n\n- **deployToken**: Deploys a new ERC-20 token (name, symbol, initialSupply, decimals, chainId).\n- **transferToken**: Transfers ERC-20 tokens (tokenAddress, toAddress, amount, chainId).\n- **getTransactionInfo**: Retrieves transaction details (txHash, chainId).\n- **getTokenBalance**: Queries the balance of a specific ERC-20 token for the current account.\n- **getTokenInfo**: Queries ERC-20 token metadata (tokenAddress, chainId).\n- **getBalance**: Checks native token balance (chainId).\n\n### Resources\n\n- **tokenMetadata**: Exposes token metadata via `token://{chainId}/{address}`.\n\n### Prompts\n\n- **deployTokenGuide**: Guides token deployment with required parameters (chainId).\n\n## Prerequisites\n\n- [Node.js](https://nodejs.org/) v18.x or higher\n- [npm](https://www.npmjs.com/) (typically bundled with Node.js)\n- A valid [Infura API key](https://infura.io/) for EVM network access\n- An Ethereum private key for signing transactions\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/token-minter-mcp.git\n   cd token-minter-mcp/server\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"Token-Minter-MCP\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/token-minter-mcp/server/index.js\"],\n      \"env\": {\n        \"INFURA_KEY\": \"your infura key\",\n        \"PRIVATE_KEY\": \"your private key\"\n      }\n    }\n  }\n}\n```\n\n\n\n## Usage\n\n1. **Examples**:\n\n    > I want to create a new token called 'RewardToken' with the symbol 'RWD' on Arbitrum. It should have 5 million tokens in initial supply and use 6 decimal places.\n    \n    ```\n    Token deployment initiated on Arbitrum (chainId: 42161)!\n    Name: RewardToken\n    Symbol: RWD\n    Decimals: 6\n    Initial Supply: 5000000 tokens\n    Transaction Hash: 0xabc123...\n    Note: Use 'getTransactionInfo' to check deployment status.\n    ```\n\n    > Can you tell me how much POL I have in my wallet on the Polygon network?\n\n    ```\n    Account Balance on Polygon (chainId: 137):\n    Address: 0xYourAddressHere\n    Balance: 25.3478 POL\n    ```\n    \n    > What’s the balance of my newly created token on Polygon?\n    \n    ```\n    Token Balance on Polygon (chainId: 137):\n    Address: 0xYourAddressHere\n    Token: 0xYourTokenAddressHere\n    Symbol: ABCD\n    Balance: 10000000.00 ABCD\n    ```    \n\n    > Please transfer 150.75 USDC from my account to 0xRecipientAddressHere on Polygon.\"\n\n    ```\n    Transfer initiated on Polygon (chainId: 137)!\n    Token: 0x2791Bca1f2de4661ED88A30C99A7a9449Aa84174\n    To: 0xRecipientAddressHere\n    Amount: 150.75 (150.75 tokens)\n    Transaction Hash: 0xdef456...\n    Note: Use 'getTransactionInfo' to check transfer status.\n    ```\n\n    > What’s the status of my token deployment transaction with hash 0xabc123... on Arbitrum?\n\n    ```\n    Transaction Info on Arbitrum (chainId: 42161):\n    Hash: 0xabc123...\n    From: 0xYourAddressHere\n    To: Contract Creation\n    Value: 0 ETH\n    Status: Success\n    Deployed Contract Address: 0xNewTokenAddressHere\n    ```\n\n    > Give me the details of the token at address 0xNewTokenAddressHere on Arbitrum.\n\n    ```\n    Token Info on Arbitrum (chainId: 42161):\n    Address: 0xNewTokenAddressHere\n    Name: RewardToken\n    Symbol: RWD\n    Decimals: 6\n    Total Supply: 5000000\n    ```\n\n    > How do I deploy a token on Polygon? What details do I need to provide?\n\n    ```\n    To deploy a token on Polygon (chainId: 137), use the \"deployToken\" tool with these parameters:\n    - name: The token's full name (e.g., \"MyToken\")\n    - symbol: The token's ticker (e.g., \"MTK\")\n    - initialSupply: Amount in token units (e.g., 1000000 for 1M tokens, default 1,000,000)\n    - decimals: Optional number of decimals (default is 18)\n    - chainId: Optional chain ID (default is 1 for Ethereum)\n    ```\n\n2. **Local Testing**:\n\n    Intall dependencies:\n    \n    ```bash\n    cd token-minter-mcp\n    npm install\n    ```\n\n    Start a local Hardhat node:\n    \n    ```\n    npx hardhat node\n    ```\n    \n    Use chainId: 1337 in your prompts to test locally.  \n\n## Supported Networks\n\n| Chain ID       | Network Name | Native Token |\n|----------------|--------------|--------------|\n| 1              | Ethereum     | ETH          |\n| 137            | Polygon      | POL          |\n| 56             | BSC          | BNB          |\n| 42161          | Arbitrum     | ETH          |\n| 10             | Optimism     | ETH          |\n| 59144          | Linea        | ETH          |\n| 8453           | Base         | ETH          |\n| 81457          | Blast        | ETH          |\n| 11297108109    | Palm         | PALM         |\n| 43114          | Avalanche    | AVAX         |\n| 42220          | Celo         | CELO         |\n| 324            | zkSync       | ETH          |\n| 5000           | Mantle       | MNT          |\n| 204            | opBNB        | BNB          |\n| 534352         | Scroll       | ETH          |\n| 1923           | Swellchain   | ETH          |\n| 130            | Unichain     | ETH          |\n| 23448594291968334 | Starknet  | ETH          |\n| 80094          | Berachain    | BERA         |\n| 999            | Hyperliquid  | HYPE         |\n| 146            | Sonic        | S            |\n| 1337           | Localhost    | ETH          |\n    \n\n## License\n\nThis project is licensed under the [MIT License](LICENSE). See the `LICENSE` file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "tokens",
        "token",
        "minter mcp",
        "kukapay token",
        "token minter"
      ],
      "category": "finance--fintech"
    },
    "kukapay--token-revoke-mcp": {
      "owner": "kukapay",
      "name": "token-revoke-mcp",
      "url": "https://github.com/kukapay/token-revoke-mcp",
      "imageUrl": "",
      "description": "An MCP server for checking and revoking ERC-20 token allowances across multiple blockchains.",
      "stars": 2,
      "forks": 6,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-10T14:44:30Z",
      "readme_content": "# Token Revoke MCP\n\nAn MCP server for checking and revoking ERC-20 token allowances, enhancing security and control.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Fetch Token Approvals**: Retrieve all ERC20 token approvals for a wallet on a specified chain, including token details, balances, and USD values at risk.\n- **Revoke Allowances**: Submit transactions to revoke ERC20 token allowances for specific spenders.\n- **Check Transaction Status**: Verify the success or failure of submitted transactions using transaction hashes.\n- **Multi-Chain Support**: Supports over 50 EVM-compatible chains, including mainnets (e.g., Ethereum, Polygon, BSC) and testnets (e.g., Goerli, Mumbai).\n\n## Prerequisites\n\n- **Node.js**: Version 18 or higher (for native `fetch` support).\n- **Moralis API Key**: Required for fetching token approval data.\n- **Private Key**: An Ethereum-compatible private key for signing revocation transactions.\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/token-revoke-mcp.git\n   cd token-revoke-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n   \n3. **Client Configuration**:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"token-revoke-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/token-revoke-mcp/index.js\"],\n          \"env\": {\n            \"MORALIS_API_KEY\": \"your moralis api key\",\n            \"PRIVATE_KEY\": \"your wallet private key\"\n          }\n        }\n      }\n    }   \n    ```\n\n## Usage\n\nBelow are examples of how you might interact with the server using natural language prompts as input. The outputs are the raw `text` values from the `content` array returned by the server, assuming a client translates the prompts into tool calls.\n\n### Example 1: Fetch Token Approvals\n**Input Prompt**:  \n> \"Show me all the token approvals for my wallet on Polygon.\"\n\n**Output Response**:  \n```\n[\n  {\n    \"tokenAddress\": \"0x2791bca1f2de4661ed88a30c99a7a9449aa84174\",\n    \"tokenSymbol\": \"USDC\",\n    \"balance\": \"100.5\",\n    \"usdPrice\": \"1.00\",\n    \"usdValueAtRisk\": \"50.25\",\n    \"spenderAddress\": \"0x1111111254eeb25477b68fb85ed929f73a960582\",\n    \"approvedAmount\": \"1000.0\",\n    \"transactionHash\": \"0xabc...\",\n    \"timestamp\": \"2023-10-01T12:00:00Z\"\n  }\n]\n```\n\n### Example 2: Revoke an Allowance\n**Input Prompt**:  \n> \"Revoke the allowance for token 0x2791bca1f2de4661ed88a30c99a7a9449aa84174 to spender 0x1111111254eeb25477b68fb85ed929f73a960582 on BSC.\"\n\n**Output Response**:  \n```\nAllowance revocation submitted on bsc. Transaction hash: 0x123.... Note: Transaction is not yet confirmed.\n```\n\n### Example 3: Check Transaction Status\n**Input Prompt**:  \n> \"Did my transaction 0x123... on BSC go through?\"\n\n**Output Response** (possible outputs):  \n- **Pending**:  \n  ```\n  Transaction 0x123... on bsc is still pending or not found.\n  ```\n- **Success**:  \n  ```\n  Transaction 0x123... on bsc has completed with status: successful. Block number: 12345.\n  ```\n- **Failure**:  \n  ```\n  Transaction 0x123... on bsc has completed with status: failed. Block number: 12345.\n  ```\n\n## Supported Chains\n\nThe server supports a wide range of EVM-compatible chains based on the Moralis JS SDK’s `chaindata.ts`. Examples include:\n- Mainnets: `ethereum`, `polygon`, `bsc`, `avalanche`, `fantom`, `arbitrum`, `optimism`, etc.\n- Testnets: `goerli`, `mumbai`, `bsc testnet`, `arbitrum goerli`, `optimism sepolia`, etc.\n- Full list: See `SUPPORTED_CHAINS` in `server.js`.\n\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "token",
        "revoke",
        "revoke mcp",
        "kukapay token",
        "mcp mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--twitter-username-changes-mcp": {
      "owner": "kukapay",
      "name": "twitter-username-changes-mcp",
      "url": "https://github.com/kukapay/twitter-username-changes-mcp",
      "imageUrl": "",
      "description": "An MCP server that tracks the historical changes of Twitter usernames.",
      "stars": 2,
      "forks": 7,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-05-21T06:08:17Z",
      "readme_content": "# Twitter Username Changes MCP Server\n\nAn MCP server that tracks the historical changes of Twitter usernames—frequent screen name changes in crypto projects can be a red flag for potential scam risks.\n\n![License](https://img.shields.io/badge/License-MIT-green.svg)\n![Python](https://img.shields.io/badge/Python-3.10+-blue.svg)\n![Status](https://img.shields.io/badge/Status-Active-brightgreen.svg)\n\n## Features\n\n- **Username Change History**: Query the historical usernames of a Twitter user by their current screen name (e.g., `@OSINT_Ukraine` or `@Mormonger`).\n- **Prompt Support**: Includes a prompt template to guide users in formulating queries.\n- **Lightweight Design**: Built with minimal dependencies (`mcp` and `requests`) for easy setup.\n\n## Installation\n\n### Prerequisites\n\n- Python 3.10+\n- `pip` or `uv` for dependency management\n- [Claude Desktop](https://www.anthropic.com/) (optional, for MCP integration)\n\n### Setup\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/twitter-username-changes-mcp.git\n   cd twitter-username-changes-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   pip install mcp[cli] requests\n   ```\n\n## Usage\n\n### Running the Server\n\nStart the server in development mode to test locally:\n```bash\nmcp dev main.py\n```\n\nThis launches the MCP Inspector, where you can:\n- List available tools (`query_username_changes`).\n- Test queries (e.g., `screen_name: \"OSINT_Ukraine\"`).\n- Debug prompts.\n\n### Integrating with Claude Desktop\n\n1. **Configure MCP Server**:\n   Edit the Claude Desktop configuration file:\n   - **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n   Add the server:\n   ```json\n   {\n     \"mcpServers\": {\n       \"twitter-username-changes\": {\n         \"command\": \"python\",\n         \"args\": [\n           \"/absolute/path/to/twitter-username-changes-mcp/main.py\"\n         ]\n       }\n     }\n   }\n   ```\n   Replace `/absolute/path/to/` with the full path to `main.py`.\n\n2. **Install the Server**:\n   ```bash\n   mcp install main.py --name \"TwitterUsernameChanges\"\n   ```\n\n3. **Query in Claude Desktop**:\n   - Open Claude Desktop and look for the hammer icon (indicating MCP tools).\n   - Enter a query like:\n     ```\n     Show the username change history for Twitter user @OSINT_Ukraine\n     ```\n   - Expected output:\n     ```\n     Username change history for OSINT_Ukraine:\n\n     User ID 4725638310:\n     - The_HelpfulHand (2016-01-09 to 2020-09-27)\n     - nftpromo_s (2022-02-10 to 2022-02-23)\n     - OSINT_Ukraine (2022-02-24 to 2022-02-25)\n     ```\n\n### Example Queries\n\n1. **Query `@Mormonger`**:\n   \n   Tool input: `screen_name: \"Mormonger\"`\n   \n   Output:\n   ```\n   Username change history for Mormonger:\n\n   User ID 1408886100:\n   - colenoorda (2016-04-02)\n   - Mormonger (2017-01-19 to 2025-02-25)\n   ```\n\n2. **Query Invalid Handle**:\n   \n   Tool input: `screen_name: \"InvalidUser123\"`\n   \n   Output:\n   ```\n   No username change history found for InvalidUser123\n   ```\n\n## License\n\nThis project is licensed under the MIT License. See [LICENSE](LICENSE) for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "twitter",
        "fintech",
        "changes mcp",
        "fintech kukapay",
        "mcp mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--uniswap-poolspy-mcp": {
      "owner": "kukapay",
      "name": "uniswap-poolspy-mcp",
      "url": "https://github.com/kukapay/uniswap-poolspy-mcp",
      "imageUrl": "",
      "description": "An MCP server that tracks newly created liquidity pools on Uniswap across multiple blockchains.",
      "stars": 5,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-17T18:12:10Z",
      "readme_content": "# Uniswap PoolSpy MCP Server\n\nAn MCP server that tracks newly created liquidity pools on Uniswap across nine blockchain networks — Ethereum, Base, Optimism, Arbitrum, Polygon, BNB Smart Chain (BSC), Avalanche, Celo, and Blast — providing real-time data for DeFi analysts, traders, and developers.\n\n![Python](https://img.shields.io/badge/python-3.10+-blue.svg)\n![License](https://img.shields.io/badge/license-MIT-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- Monitors Uniswap V3 pool creation across 9 blockchain networks.\n- Customizable time range and result limits for querying new pools.\n- Supports sorting by timestamp, transaction count, volume, or TVL.\n\n## Prerequisites\n\n- Python 3.10 or higher\n- [uv](https://github.com/astral-sh/uv) for package management\n- A valid [The Graph API key](https://thegraph.com/studio/apikeys/)\n- MCP-compatible environment (e.g., Claude Desktop) for full functionality\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/yourusername/uniswap-poolspy-mcp.git\n   cd uniswap-poolspy-mcp\n   ```\n\n2. **Set Up Environment**:\n   Install `uv` if you haven't already:\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n3. **Install Dependencies**:\n   Use `uv` to sync dependencies from `pyproject.toml`:\n   ```bash\n   uv sync\n   ```\n\n4. **Configure API Key**:\n   Create a `.env` file in the project root:\n   ```bash\n   echo \"THEGRAPH_API_KEY=your-api-key-here\" > .env\n   ```\n   Replace `your-api-key-here` with your actual The Graph API key.\n\n## Usage\n\n### Running the Server\n\nStart the MCP server:\n```bash\nuv run main.py\n```\n\nFor development with MCP Inspector:\n```bash\nuv run mcp dev main.py\n```\n\n### Integrating with Claude Desktop\n\nInstall the server as an MCP plugin:\n```bash\nuv run mcp install main.py --name \"UniswapPoolSpy\"\n```\n\n### Configuration\n\nTo make the server discoverable by MCP clients (e.g., Claude Desktop), configure it in an `mcpServers` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"Uniswap-PoolSpy\": {\n      \"command\": \"uv\",\n      \"args\": [\"--directory\", \"path/to/uniswap-poolspy-mcp\", \"run\", \"main.py\"],\n      \"env\": {\n        \"THEGRAPH_API_KEY\": \"your api key from The Graph\"\n      }\n    }\n  }\n}\n   ```\n\n\n### Querying New Pools\n\nUse the `get_new_pools` tool in Claude Desktop with natural language queries like:\n- \"Show me new pools on Ethereum from the last 10 minutes\"\n- \"List pools on Base sorted by volume, limit to 50\"\n- \"What pools were created on Polygon in the past hour, ordered by TVL?\"\n\nThe tool accepts these parameters:\n- `chain`: Blockchain network (e.g., \"ethereum\", \"base\", \"optimism\")\n- `order_by`: Sort field (\"timestamp\", \"txcount\", \"volume\", \"tvl\")\n- `time_range_seconds`: Lookback period in seconds (default: 300)\n- `limit`: Maximum number of pools to return (default: 100)\n\n### Example Output\n```\nNewly Created Trading Pools (Last 5 Minutes, Limit: 100):\nPool Address: 0x1234...abcd\nTokens: WETH/USDC\nCreated At: 2025-03-18 12:34:56\nBlock Number: 12345678\nTransaction Count: 5\nVolume (USD): 15000.25\nTotal Value Locked (USD): 50000.75\n\nPool Address: 0x5678...efgh\nTokens: DAI/USDT\nCreated At: 2025-03-18 12:33:45\nBlock Number: 12345670\nTransaction Count: 3\nVolume (USD): 8000.50\nTotal Value Locked (USD): 25000.00\n```\n\n## Supported Chains\n\n- Ethereum\n- Base\n- Optimism\n- Arbitrum\n- Polygon\n- BNB Smart Chain (BSC)\n- Avalanche\n- Celo\n- Blast\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "poolspy",
        "fintech",
        "poolspy mcp",
        "mcp server",
        "uniswap poolspy"
      ],
      "category": "finance--fintech"
    },
    "kukapay--uniswap-price-mcp": {
      "owner": "kukapay",
      "name": "uniswap-price-mcp",
      "url": "https://github.com/kukapay/uniswap-price-mcp",
      "imageUrl": "",
      "description": "An MCP server that tracks newly created liquidity pools on Uniswap across multiple blockchains.",
      "stars": 2,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-17T18:16:02Z",
      "readme_content": "# Uniswap V3 Price MCP Server\n\nAn MCP server that delivers real-time token prices from Uniswap V3 across multiple chains — optimized for AI agents and DeFi automation.\n\n![License](https://img.shields.io/badge/license-MIT-blue.svg)\n![Node.js](https://img.shields.io/badge/Node.js-18.x-green.svg)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n- **Supported Chains**: Ethereum Mainnet (1), Polygon (137), Arbitrum (42161), Optimism (10).\n- **Token Price Fetching**: Queries Uniswap V3 pools for token prices against USDT, USDC, or WETH (in that order) with automatic decimal and symbol retrieval.\n- **USD Conversion**: Optional USD price conversion using CryptoCompare API for all quote tokens.\n\n## Prerequisites\n- **Node.js** (v18 or higher recommended) and **npm**.\n- **Infura Account**: Obtain an `INFURA_PROJECT_ID` with access to Ethereum, Polygon, Arbitrum, and Optimism (sign up at [Infura](https://infura.io/)).\n\n## Installation\n1. Clone the repository:\n   ```bash\n   git clone https://github.com/kukapay/uniswap-price-mcp.git\n   cd uniswap-price-mcp\n   ```\n\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n3. **Client Configuration**:\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"Uniswap Price\": {\n          \"command\": \"node\",\n          \"args\": [\"path/to/uniswap-price-mcp/index.js\"],\n          \"env\": {\n            \"INFURA_PROJECT_ID\": \"your_infura_project_id\"\n          }\n        }\n      }\n    }\n    ```\n    Replace `your_infura_project_id` with your Infura project ID.\n    \n## Usage\n\nInteract with the server using MCP-compatible clients.\n\n### Tools\n\n#### getSupportedChains\n\n**Prompt**:\n```\nShow me a list of all blockchain networks supported by the server, formatted as a table.\n```\n**Result**:\n\n| Chain ID | Chain Name       |\n|----------|------------------|\n| 1        | Ethereum Mainnet |\n| 137      | Polygon          |\n| 42161    | Arbitrum         |\n| 10       | Optimism         |\n\n#### getTokenPrice\n\n**Prompt**:\n```\nWhat is the current price of DAI in USD on the Ethereum Mainnet?\n```\n\n**Result**:\n```\nPrice of token DAI on chain 1 in USD: 1.00\n```\n\n**Prompt**:\n```\nGet the USD price of Chainlink (LINK) on the Polygon network.\n```\n\n**Result**:\n```\nPrice of token LINK on chain 137 in USD: 18.50\n```\n\n## License\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "finance",
        "mcp server",
        "mcp mcp",
        "price mcp"
      ],
      "category": "finance--fintech"
    },
    "kukapay--uniswap-trader-mcp": {
      "owner": "kukapay",
      "name": "uniswap-trader-mcp",
      "url": "https://github.com/kukapay/uniswap-trader-mcp",
      "imageUrl": "",
      "description": "An MCP server that delivers real-time token prices from Uniswap V3 across multiple chains.",
      "stars": 31,
      "forks": 10,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-30T20:19:48Z",
      "readme_content": "# Uniswap Trader MCP\n[![smithery badge](https://smithery.ai/badge/@kukapay/uniswap-trader-mcp)](https://smithery.ai/server/@kukapay/uniswap-trader-mcp)\n\nAn MCP server for AI agents to automate token swaps on Uniswap DEX across multiple blockchains.\n\n## Features\n- **Price Quotes**: Get real-time price quotes for token swaps with multi-hop route optimization.\n- **Swap Execution**: Execute swaps on Uniswap V3 with configurable slippage tolerance and deadlines.\n- **Swap Suggestions**: Generate trading suggestions based on liquidity, fees, and optimal paths.\n- **Multi-Chain Support**: Compatible with Ethereum, Optimism, Polygon, Arbitrum, Celo, BNB Chain, Avalanche, and Base.\n\n## Prerequisites\n- **Node.js**: Version 14.x or higher.\n- **npm**: For package management.\n- **Wallet**: A funded wallet with a private key for executing swaps.\n- **RPC Endpoints**: Access to blockchain RPC URLs (e.g., Infura, Alchemy) for supported chains.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Uniswap Trader MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/uniswap-trader-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/uniswap-trader-mcp --client claude\n```\n\n### Manual Installation\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/uniswap-trader-mcp.git\n   cd uniswap-trader-mcp\n   ```\n\n2. **Install Dependencies**:\n   ```bash\n   npm install\n   ```\n\n## Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"Uniswap-Trader-MCP\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/uniswap-trader-mcp/server/index.js\"],\n      \"env\": {\n        \"INFURA_KEY\": \"your infura key\",\n        \"WALLET_PRIVATE_KEY\": \"your private key\"\n      }\n    }\n  }\n}\n```\n## Usage\n\n### Supported Chains\nThe following blockchains are supported. Ensure each chain is configured in `chainConfigs.js` with a valid RPC URL, WETH address, and SwapRouter address.\n\n| Chain ID | Name         | Notes                                      |\n|----------|--------------|--------------------------------------------|\n| 1        | Ethereum     | Mainnet, widely used for Uniswap trades   |\n| 10       | Optimism     | Layer 2, requires Optimism RPC            |\n| 137      | Polygon      | Fast and low-cost, uses MATIC as native   |\n| 42161    | Arbitrum     | Layer 2, Arbitrum One network             |\n| 42220    | Celo         | Mobile-first blockchain, uses CELO        |\n| 56       | BNB Chain    | Binance Smart Chain, uses BNB             |\n| 43114    | Avalanche    | High-throughput, uses AVAX                |\n| 8453     | Base         | Coinbase’s Layer 2, built on Optimism     |\n\n\n### Tools and Prompts\n\n#### 1. `getPrice`\nFetches a price quote for a Uniswap swap.\n\n**Schema**:\n- `chainId`: Number (default: 1)\n- `tokenIn`: String (e.g., `\"NATIVE\"` or token address)\n- `tokenOut`: String (e.g., `\"NATIVE\"` or token address)\n- `amountIn`: String (optional, required for `\"exactIn\"`)\n- `amountOut`: String (optional, required for `\"exactOut\"`)\n- `tradeType`: `\"exactIn\"` or `\"exactOut\"` (default: `\"exactIn\"`)\n\nExample prompt:\n\n```\nGet me a price quote for swapping 1 ETH to DAI on Ethereum.\n```\n\nOutput:\n\n```\n{\n  \"chainId\": 1,\n  \"tradeType\": \"exactIn\",\n  \"price\": \"3000.50\",\n  \"inputAmount\": \"1.000000\",\n  \"outputAmount\": \"3000.50\",\n  \"minimumReceived\": \"2985.50\",\n  \"maximumInput\": \"1.005000\",\n  \"route\": [\n    {\n      \"tokenIn\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      \"tokenOut\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n      \"fee\": 3000\n    }\n  ],\n  \"estimatedGas\": \"150000\"\n}\n```\n\n#### 2. `executeSwap`\nExecutes a swap on Uniswap.\n\n**Schema**:\n- `chainId`: Number (default: 1)\n- `tokenIn`: String\n- `tokenOut`: String\n- `amountIn`: String (optional, required for `\"exactIn\"`)\n- `amountOut`: String (optional, required for `\"exactOut\"`)\n- `tradeType`: `\"exactIn\"` or `\"exactOut\"` (default: `\"exactIn\"`)\n- `slippageTolerance`: Number (default: 0.5, in percentage)\n- `deadline`: Number (default: 20, in minutes)\n\nExample prompt:\n\n```\nSwap 1 ETH for DAI on Ethereum with a 0.5% slippage tolerance and a 20-minute deadline.\n```\n\nOutput:\n\n```\n{\n  \"chainId\": 1,\n  \"txHash\": \"0x1234...abcd\",\n  \"tradeType\": \"exactIn\",\n  \"amountIn\": \"1.000000\",\n  \"outputAmount\": \"2990.75\",\n  \"minimumReceived\": \"2985.50\",\n  \"maximumInput\": \"1.005000\",\n  \"fromToken\": \"NATIVE\",\n  \"toToken\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n  \"route\": [\n    {\n      \"tokenIn\": \"0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2\",\n      \"tokenOut\": \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n      \"fee\": 3000\n    }\n  ],\n  \"gasUsed\": \"145000\"\n}\n```\n\n## License\nMIT License. See [LICENSE](LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "uniswap",
        "trader",
        "trader mcp",
        "uniswap trader",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "kukapay--wallet-inspector-mcp": {
      "owner": "kukapay",
      "name": "wallet-inspector-mcp",
      "url": "https://github.com/kukapay/wallet-inspector-mcp",
      "imageUrl": "",
      "description": "An MCP server that empowers AI agents to inspect any wallet’s balance and onchain activity across major EVM chains and Solana chain.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-26T11:25:15Z",
      "readme_content": "# Wallet Inspector MCP\n\nAn MCP server  that empowers AI agents to inspect any wallet’s balance and onchain activity across major EVM chains and Solana chain.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/wallet-inspector-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n## Features\n\n- **Multi-Chain Support**: Queries Solana, Ethereum, Polygon, Binance Smart Chain (BSC), Base, Arbitrum and more.\n- **Flexible Output**: Balances in ASCII tables, activities and transactions in structured text.\n\n## Installation\n\n### Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **Dune SIM API Key**: Obtain from [Dune Analytics](https://dune.com).\n- **Dependency Manager**: `uv` (recommended) or `pip`.\n\n### Setup\n\n1. **Clone the Repository**:\n\n   ```bash\n   git clone https://github.com/kukapay/wallet-inspector-mcp.git\n   cd wallet-inspector-mcp\n   ```\n\n2. **Install Dependencies**:\n\n   Using `uv` (recommended):\n\n   ```bash\n   uv async\n   ```\n\n   Or using `pip`:\n\n   ```bash\n   pip install mcp[cli] python-dotenv tabulate\n   ```\n\n3. **Installing to Claude Desktop**:\n\n    Install the server as a Claude Desktop application:\n    ```bash\n    uv run mcp install cli.py --name \"Wallet Inspector\"\n    ```\n\n    Configuration file as a reference:\n\n    ```json\n    {\n       \"mcpServers\": {\n           \"Wallet Inspector\": {\n               \"command\": \"uv\",\n               \"args\": [ \"--directory\", \"/path/to/wallet-inspector-mcp\", \"run\", \"main.py\" ],\n               \"env\": { \"DUNE_SIM_API_KEY\": \"your_dune_sim_api_key_here\"},               \n           }\n       }\n    }\n    ```\n    Replace `/path/to/wallet-inspector-mcp` with your actual installation path, and `your_dune_sim_api_key_here` with your Dune SIM API key.\n\n## Usage\n\n### Interacting with the Server\n\nUse an MCP-compatible client (e.g., Claude Desktop CLI) to query the server. Example natural language queries:\n\n- **Balance Queries**:\n  - \"Check the balance of wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045.\"\n  - \"What is the balance for wallet DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK?\"\n  - \"Get balances for 0x1234567890abcdef1234567890abcdef12345678 on EVM chains.\"\n\n- **Activity Queries** (EVM only):\n  - \"Show activity for wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045.\"\n  - \"Get transaction history for 0x1234567890abcdef1234567890abcdef12345678 on EVM chains.\"\n\n- **Transaction Queries**:\n  - \"List transactions for wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 with limit 50.\"\n  - \"Show transaction history for wallet DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK.\"\n  - \"Get the latest 10 transactions for 0x1234567890abcdef1234567890abcdef12345678.\"\n\n### Example Outputs\n\n- **Balance Output**:\n\n  ```\n  Wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 balances:\n\n  +----------+-----------------+-------------+\n  | Chain    | Token Amount    | USD Value   |\n  +==========+=================+=============+\n  | ethereum | 605.371497 ETH  | $1842034.66 |\n  +----------+-----------------+-------------+\n  | polygon  | 100.500000 MATIC| $50.25      |\n  +----------+-----------------+-------------+\n  | bsc      | 10.000000 BNB   | $600.00     |\n  +----------+-----------------+-------------+\n\n  Wallet DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK balances:\n\n  +----------+---------------+-------------+\n  | Chain    | Token Amount  | USD Value   |\n  +==========+===============+=============+\n  | solana   | 1.000000 SOL  | $20.50      |\n  +----------+---------------+-------------+\n  ```\n\n- **Activity Output** (EVM only):\n\n  ```\n  Wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 activity:\n\n  Chain ID: 8453\n  Block Time: 2025-02-20T13:52:29+00:00\n  Tx Hash: 0x184544c8d67a0cbed0a3f04abe5f958b96635e8c743c070f70e24b1c06cd1aa6\n  Type: Receive\n  Asset Type: ERC20\n  Value: 123.069653 ENT\n  USD Value: $0.14\n  ```\n\n- **Transaction Output**:\n\n  ```\n  Wallet 0xd8da6bf26964af9d7eed9e03e53415d37aa96045 transactions:\n\n  Chain: ethereum\n  Block Time: 2023-11-07T05:31:56Z\n  Tx Hash: 0x1234567890abcdef1234567890abcdef1234567890abcdef1234567890abcdef\n  From: 0xd8da6bf26964af9d7eed9e03e53415d37aa96045\n  To: 0x1234567890abcdef1234567890abcdef12345678\n  Value: 0.000320 ETH\n\n  Wallet DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK transactions:\n\n  Chain: solana\n  Block Time: 2023-03-28T09:20:00Z\n  Tx Hash: 5SzSbWKM9yZC7cCGMhUhvnYdWQytrk9NBaWwug1gQBKKwNEBvBKqPSfVeYYnZwUuUyvcCHgYhDkTRrB6YBfwzfv8\n  From: DYw8jCTfwHNRJhhmFcbXvVDTqWMEVFBX6ZKUmG5CNSKK\n  To: 9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin\n  Value: 0.010000 SOL\n  ```\n\n## Tools\n### `get_wallet_balance`\n\n- **Description**: Retrieves the balance of a specified wallet address across supported EVM and Solana blockchains.\n- **Parameters**:\n  - `wallet_address` (str): The wallet address to query (e.g., '0x123...' for EVM chains or 'DYw8jCT...' for Solana).\n- **Returns**: An ASCII table with balance details (chain, token amount, USD value) or an error message.\n- **Supported Chains**: Solana,arbitrum,arbitrum,avalanche_c,base,berachain,bnb,ethereum and more.\n\n### `get_wallet_activity`\n\n- **Description**: Queries transaction activity for a specified wallet address on supported EVM blockchains.\n- **Parameters**:\n  - `wallet_address` (str): The EVM-compatible wallet address to query (e.g., '0x123...').\n- **Returns**: Formatted text with activity details (chain_id, block_time, tx_hash, type, asset_type, value, value_usd) or an error message.\n- **Supported Chains**: Arbitrum,arbitrum,avalanche_c,base,berachain,bnb,ethereum and more.\n\n### `get_wallet_transactions`\n\n- **Description**: Fetches the transaction history of a specified wallet address on supported EVM and Solana blockchains.\n- **Parameters**:\n  - `wallet_address` (str): The wallet address to query (e.g., '0x123...' for EVM chains or 'DYw8jCT...' for Solana).\n  - `limit` (int, optional): Maximum number of transactions to return (default: 100).\n- **Returns**: Formatted text with transaction details (chain, block_time, tx_hash, from, to, value) or an error message.\n- **Supported Chains**: Solana,arbitrum,arbitrum,avalanche_c,base,berachain,bnb,ethereum and more.\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "kukapay",
        "fintech",
        "fintech kukapay",
        "kukapay wallet",
        "wallet inspector"
      ],
      "category": "finance--fintech"
    },
    "kukapay--web3-jobs-mcp": {
      "owner": "kukapay",
      "name": "web3-jobs-mcp",
      "url": "https://github.com/kukapay/web3-jobs-mcp",
      "imageUrl": "",
      "description": "An MCP server that provides AI agents with real-time access to curated Web3 jobs.",
      "stars": 4,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T15:32:07Z",
      "readme_content": "# Web3 Jobs MCP Server\n\nAn MCP server that provides AI agents with real-time access to curated Web3 jobs from [web3.career](https://web3.career/), enabling intelligent job discovery and career insights.\n\n![GitHub License](https://img.shields.io/github/license/kukapay/web3-jobs-mcp)\n![Python Version](https://img.shields.io/badge/python-3.10+-blue)\n![Status](https://img.shields.io/badge/status-active-brightgreen.svg)\n\n\n## Features\n\n- **Job Query Tool**: Filter Web3 jobs by:\n  - Remote status (`remote=True` for remote-only jobs)\n  - Country (e.g., `\"United States\"`, case-insensitive)\n  - Job tag (e.g., `\"react\"`, `\"blockchain\"`, case-insensitive)\n  - Limit (1–100 jobs, default 50)\n- **Markdown Output**: Returns job listings as a formatted Markdown list with:\n  - Job ID, Title, Company, Location, Remote status\n  - Published At (from `date_epoch`, formatted as `YYYY-MM-DD`)\n  - Apply URL (clickable link to web3.career)\n  - Description (plain text, truncated to 100 characters)\n- **Search Prompt**: Generates user-friendly job search queries based on role and optional location.\n\n## Prerequisites\n\n- Python 3.10+\n- A web3.career API token (request at [web3.career/web3-jobs-api](https://web3.career/web3-jobs-api))\n- [uv](https://github.com/astral-sh/uv) for dependency management (recommended)\n\n## Installation\n\n1. **Clone the Repository**:\n   ```bash\n   git clone https://github.com/kukapay/web3-jobs-mcp.git\n   cd web3-jobs-mcp\n   ```\n\n2. **Install Dependencies**:\n   Using `uv`:\n   ```bash\n   uv sync\n   ```\n   Alternatively, with `pip`:\n   ```bash\n   pip install mcp[cli] python-dotenv\n   ```\n   \n3. **Installing to Claude Desktop**:\n\n    Install the server as a Claude Desktop application:\n    ```bash\n    uv run mcp install cli.py --name \"Web3 Jobs\"\n    ```\n\n    Configuration file as a reference:\n\n    ```json\n    {\n       \"mcpServers\": {\n           \"Web3 Jobs\": {\n               \"command\": \"uv\",\n               \"args\": [ \"--directory\", \"/path/to/web3-jobs-mcp\", \"run\", \"main.py\" ],\n               \"env\": { \"WEB3_CAREER_API_TOKEN\", \"your-api-token\" },  \n           }\n       }\n    }\n    ```\n    Replace `/path/to/web3-jobs-mcp` with your actual installation path, and `your-api-token` with your web3.career API token.\n    \n## Usage\n\n### Running the Server\n\nStart the server in development mode with the MCP Inspector:\n```bash\nuv run mcp dev main.py\n```\nThis opens a web interface for testing tools and prompts.\n\nAlternatively, run directly:\n```bash\nuv run main.py\n```\n\n### Using the `query_jobs` Tool\n\nIn the MCP Inspector or a compatible client (e.g., Claude Desktop), call the `query_jobs` tool:\n\n- **Example 1**: Get 5 remote blockchain jobs:\n  ```bash\n  query_jobs(remote=True, tag=\"blockchain\", limit=5)\n  ```\n\n- **Example 2**: Get 10 jobs in the United States:\n  ```bash\n  query_jobs(country=\"United States\", limit=10)\n  ```\n\n**Sample Output**:\n```markdown\n# Web3 Job Listings\n\n- **Job ID**: 103945\n  - **Title**: Applied Crypto-Economics & Mechanism Design\n  - **Company**: Subzero Labs\n  - **Location**: Remote Remote Remote\n  - **Remote**: Yes\n  - **Published At**: 2025-06-01\n  - **Apply URL**: [Apply](https://web3.career/r/1QTOzATM__UVWHaa)\n  - **Description**: About Rialo We are a pioneering force in the decentralized finance (DeFi) space...\n\n- **Job ID**: 103944\n  - **Title**: Blockchain Engineer\n  - **Company**: CryptoTech\n  - **Location**: Remote\n  - **Remote**: Yes\n  - **Published At**: 2025-05-31\n  - **Description**: Join our team to build cutting-edge blockchain solutions for global clients...\n  - **Apply URL**: [Apply](https://web3.career/r/2XYZabc123)\n\n*Source: web3.career*\n```\n\n### Using the `search_jobs_prompt`\n\nGenerate a search prompt for a specific role and location:\n```bash\n/search_jobs_prompt role=\"blockchain developer\" location=\"remote\"\n```\nThis returns a prompt like:\n```\nFind Web3 jobs for a blockchain developer role in remote. Provide job titles, companies, locations, and application links from web3.career.\n```\n\n## License\n\nThis project is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "kukapay",
        "fintech kukapay",
        "jobs mcp",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "kukapay--whale-tracker-mcp": {
      "owner": "kukapay",
      "name": "whale-tracker-mcp",
      "url": "https://github.com/kukapay/whale-tracker-mcp",
      "imageUrl": "",
      "description": "A mcp server for tracking cryptocurrency whale transactions.",
      "stars": 40,
      "forks": 13,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T19:43:56Z",
      "readme_content": "# Whale Tracker MCP Server\n\n\n**A Model Context Protocol (MCP) server for tracking cryptocurrency whale transactions using the Whale Alert API**\n\n[![mit license](https://img.shields.io/badge/license-MIT-blue)](https://opensource.org/license/mit/)\n[![python versions](https://img.shields.io/pypi/pyversions/mcp)](https://www.python.org/downloads/)\n[![smithery badge](https://smithery.ai/badge/@kukapay/whale-tracker-mcp)](https://smithery.ai/server/@kukapay/whale-tracker-mcp)\n\n<!-- omit in toc -->\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Usage](#usage)\n  - [Running in Development Mode](#running-in-development-mode)\n  - [Integrating with Claude Desktop](#integrating-with-claude-desktop)\n  - [Direct Execution](#direct-execution)\n- [Examples](#examples)\n- [API Key Configuration](#api-key-configuration)\n- [License](#license)\n- [Acknowledgements](#acknowledgements)\n\n\n## Overview\n\nThe `whale-tracker-mcp` server is a Python-based implementation of the [Model Context Protocol (MCP)](https://modelcontextprotocol.io) that integrates with the [Whale Alert API](https://docs.whale-alert.io/#endpoints). It enables real-time tracking and analysis of large cryptocurrency transactions (\"whale\" movements) by exposing tools, resources, and prompts to MCP-compatible clients like Claude Desktop.\n\nThis server is designed for cryptocurrency enthusiasts, developers, and analysts who want to monitor whale activity directly within their LLM-powered workflows.\n\n## Features\n\n- **Tools**:\n  - `get_recent_transactions`: Fetch recent whale transactions with optional filters for blockchain, minimum value, and limit.\n  - `get_transaction_details`: Retrieve detailed information about a specific transaction by its ID.\n- **Resources**:\n  - `whale://transactions/{blockchain}`: Expose recent transactions for a specified blockchain as contextual data.\n- **Prompts**:\n  - `query_whale_activity`: A reusable template for analyzing whale transaction patterns, optionally filtered by blockchain.\n- **Asynchronous API Calls**: Uses `httpx` for efficient, non-blocking requests to the Whale Alert API.\n- **Environment Variable Support**: Securely manage your API key via a `.env` file.\n\n## Prerequisites\n\n- **Python**: Version 3.10 or higher.\n- **Whale Alert API Key**: Sign up at [whale-alert.io](https://whale-alert.io/) to obtain an API key.\n- **MCP Client**: Compatible with MCP clients like Claude Desktop or the MCP Inspector.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Whale Tracker for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kukapay/whale-tracker-mcp):\n\n```bash\nnpx -y @smithery/cli install @kukapay/whale-tracker-mcp --client claude\n```\n\n1. **Clone the repository**:\n```bash\ngit clone https://github.com/kukapay/whale-tracker-mcp.git\ncd whale-tracker-mcp\n```\n2. Install dependencies: We recommend using uv for dependency management:\n```bash\nuv add \"mcp[cli]\" httpx python-dotenv\n```   \nAlternatively, use pip:\n```bash\npip install mcp httpx python-dotenv\n```\n3. Set up your API key: Create a .env file in the project root and add your Whale Alert API key:\n```\nWHALE_ALERT_API_KEY=your_api_key_here\n```\n\n## Usage\n### Running in Development Mode\n\nTest the server locally with the MCP Inspector:\n\n```bash\nmcp dev whale_tracker.py --with-editable .\n```\n\nThis opens a web interface where you can explore the server's tools, resources, and prompts.\n\n### Integrating with Claude Desktop\n\nInstall the server into Claude Desktop for seamless integration:\n\n```bash\nmcp install whale_tracker.py --name \"WhaleTracker\" -f .env\n```\n\n- `--name \"WhaleTracker\"`: Sets a custom name for the server in Claude Desktop.\n- `-f .env`: Loads the API key from the .env file.\n\nRestart Claude Desktop after installation. Look for the hammer icon in the input box to confirm the server is loaded, then try commands like:\n\n- \"Show me recent whale transactions on Bitcoin.\"\n- \"Get details for transaction ID 123456789.\"\n- \"Analyze whale activity on Ethereum.\"\n\n### Direct Execution\n\nRun the server standalone for custom deployments:\n\n```bash\npython whale_tracker.py\n```\n\nOr use the MCP CLI:\n\n```bash\nmcp run whale_tracker.py\n```\n\n## Examples\n\nHere’s how you might interact with the server in Claude Desktop:\n\n### Fetch Recent Transactions:\n\n```text\nWhat are the latest whale transactions on Ethereum with a minimum value of $1,000,000?\n```\nThe server calls `get_recent_transactions` with `blockchain=\"ethereum\"` and `min_value=1000000`.\n\n### Get Transaction Details:\n\n```text\nTell me about transaction ID 123456789.\n```\n\nThe server uses `get_transaction_details` to fetch and display the transaction data.\n\n### Analyze Whale Activity:\n\n```text\nAnalyze recent whale transactions on Bitcoin.\n```\n\nThe `query_whale_activity` prompt triggers an analysis based on the `whale://transactions/bitcoin` resource.\n\n## API Key Configuration\n\nThe server requires a Whale Alert API key, which is loaded from the `WHALE_ALERT_API_KEY` environment variable. To configure it:\n\n- Create a .env file:\n```text\nWHALE_ALERT_API_KEY=your_api_key_here\n```\n- Ensure `python-dotenv` is installed (included in the dependencies).\n- The server will automatically load the key at startup.\n\nAlternatively, pass the key directly when running the server:\n\n```bash\nmcp install whale_tracker.py -v WHALE_ALERT_API_KEY=your_api_key_here\n```\n\n## License\n\nThis project is licensed under the MIT License. See the LICENSE file for details.\n\n## Acknowledgements\n\n- Whale Alert for providing the API to track cryptocurrency whale transactions.\n- Model Context Protocol team for the MCP specification and Python SDK.\n- httpx for a robust HTTP client library.\n\nHappy whale tracking! 🐳\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "whale",
        "cryptocurrency",
        "cryptocurrency whale",
        "whale tracker",
        "whale transactions"
      ],
      "category": "finance--fintech"
    },
    "laukikk--alpaca-mcp": {
      "owner": "laukikk",
      "name": "alpaca-mcp",
      "url": "https://github.com/laukikk/alpaca-mcp",
      "imageUrl": "",
      "description": "An MCP Server for the Alpaca trading API to manage stock and crypto portfolios, place trades, and access market data.",
      "stars": 30,
      "forks": 11,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T07:32:56Z",
      "readme_content": "# Alpaca Trading MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@laukikk/alpaca-mcp)](https://smithery.ai/server/@laukikk/alpaca-mcp)\n\nA Model Context Protocol (MCP) server that provides an interface to the Alpaca trading API, allowing you to manage your stock and crypto portfolio, place trades, and access market data.\n\n## Features\n\n- **Account Management**: View account details, balances, and portfolio status\n- **Trading**: Place market, limit, stop, and stop-limit orders\n- **Portfolio Management**: View positions, calculate performance, and close positions\n- **Market Data**: Access real-time quotes and historical price data\n- **Asset Information**: Get details about tradable assets\n\n## Installation\n\n### Installing via Smithery\n\nTo install Alpaca Trading MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@laukikk/alpaca-mcp):\n\n```bash\nnpx -y @smithery/cli install @laukikk/alpaca-mcp --client claude\n```\n\n### Manual Installation\n1. Clone this repository\n2. Install dependencies:\n\n```bash\npip install -e .\n```\n\nOr using uv:\n\n```bash\nuv pip install -e .\n```\n\n## Configuration\n\n1. Copy the `.env.example` file to `.env`:\n\n```bash\ncp .env.example .env\n```\n\n2. Add your Alpaca Paper Trading API credentials to the `.env` file:\n\n```\nALPACA_PAPER_API_KEY = \"your-api-key\"\nALPACA_PAPER_API_SECRET = \"your-api-secret\"\n```\n\nYou can obtain these credentials by creating an account at [Alpaca](https://app.alpaca.markets/signup).\n\n## Usage\n\nRun the MCP server:\n\n```bash\npython src/server.py\n```\n\nThe server will start and be available for MCP clients to connect to.\n\n## Testing with Claude for Desktop\n\n### Configuration:\n\nOpen your Claude for Desktop App configuration in a text editor. Create the file if it doesn't exist.\n\n- Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- Mac: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n\n\nAdd the Alpaca MCP server configuration:\n\n```json\n{\n    \"mcpServers\": {\n        \"alpaca\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/alpaca-mcp-server\",\n                \"run\",\n                \"src/server.py\"\n            ]\n        }\n    }\n}\n```\n[MCP For Server Developers: Quickstart](https://modelcontextprotocol.io/quickstart/server)\n\n## Available Resources\n\nThe server provides the following resources:\n\n- `account://info` - Get current account information\n- `positions://all` - Get all current positions\n- `positions://{symbol}` - Get position details for a specific symbol\n- `orders://recent/{limit}` - Get most recent orders with specified limit\n- `market://{symbol}/quote` - Get current market quote for a specific symbol\n- `market://{symbol}/bars/{timeframe}` - Get historical price bars for a symbol with specified timeframe\n- `assets://list` - List tradable assets available on Alpaca\n- `assets://{symbol}` - Get detailed asset information by symbol\n\n## Available Tools\n\nThe server provides the following tools:\n\n- `get_account_info_tool` - Get current account information\n- `place_market_order` - Place a market order to buy or sell a stock\n- `place_limit_order` - Place a limit order to buy or sell a stock at a specified price\n- `place_stop_order` - Place a stop order to buy or sell a stock when it reaches a specified price\n- `place_stop_limit_order` - Place a stop-limit order combining stop and limit order features\n- `cancel_order` - Cancel an open order by its ID\n- `close_position` - Close an open position for a specific symbol\n- `get_portfolio_summary` - Get a comprehensive summary of the portfolio\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fintech",
        "finance",
        "finance fintech",
        "alpaca mcp",
        "fintech laukikk"
      ],
      "category": "finance--fintech"
    },
    "logotype--fixparser": {
      "owner": "logotype",
      "name": "fixparser",
      "url": "https://gitlab.com/logotype/fixparser",
      "imageUrl": "",
      "description": "FIX Protocol (send orders, market data, etc.) written in TypeScript.",
      "stars": 52,
      "forks": 12,
      "license": "No License",
      "language": "",
      "updated_at": "2025-05-31T12:58:49Z",
      "readme_content": "# fixparser\n\n[Migrated to GitLab https://gitlab.com/logotype/fixparser](https://gitlab.com/logotype/fixparser)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fixparser",
        "typescript",
        "fintech",
        "logotype fixparser",
        "fintech logotype",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "longportapp--openapi": {
      "owner": "longportapp",
      "name": "openapi",
      "url": "https://github.com/longportapp/openapi/tree/main/mcp",
      "imageUrl": "",
      "description": "🐍 ☁️ - LongPort OpenAPI provides real-time stock market data, provides AI access analysis and trading capabilities through MCP.",
      "stars": 295,
      "forks": 42,
      "license": "Apache License 2.0",
      "language": "Rust",
      "updated_at": "2025-10-04T08:12:21Z",
      "readme_content": "# LongPort OpenAPI SDK\n\n[![](https://img.shields.io/crates/v/longport.svg)](https://crates.io/crates/longport) [![Go project version](https://badge.fury.io/go/github.com%2Flongportapp%2Fopenapi-go.svg)](https://badge.fury.io/go/github.com%2Flongportapp%2Fopenapi-go) [![PyPI version](https://badge.fury.io/py/longport.svg)](https://badge.fury.io/py/longport) [![npm version](https://badge.fury.io/js/longport.svg)](https://badge.fury.io/js/longport) [![Maven Central](https://img.shields.io/maven-central/v/io.github.longportapp/openapi-sdk)](https://search.maven.org/artifact/io.github.longportapp/openapi-sdk)\n\n\nLongPort OpenAPI provides programmatic quote trading interfaces for investors with research and development capabilities and assists them to build trading or quote strategy analysis tools based on their own investment strategies. The functions fall into the following categories:\n\n- Trading - Create, amend, cancel orders, query today’s/past orders and transaction details, etc.\n- Quotes - Real-time quotes, acquisition of historical quotes, etc.\n- Portfolio - Real-time query of the account assets, positions, funds\n- Real-time subscription - Provides real-time quotes and push notifications for order status changes\n\n**This repo contains the following main components:**\n\n| Name                        | Document                                                              | Description                                       |\n|-----------------------------|-----------------------------------------------------------------------|---------------------------------------------------|\n| [Rust](rust/README.md)      | [Doc](https://longportapp.github.io/openapi/rust/longport/index.html) | LongPort OpenAPI for Rust `(>= 1.89.0)`           |\n| [Python](python/README.md)  | [Doc](https://longportapp.github.io/openapi/python/index.html)        | LongPort OpenAPI for Python 3 `(>= 3.7)`          |\n| [Node.js](nodejs/README.md) | [Doc](https://longportapp.github.io/openapi/nodejs/index.html)        | LongPort OpenAPI for Node.js `(>= 10)`            |\n| [Java](java/README.md)      | [Doc](https://longportapp.github.io/openapi/java/index.html)          | LongPort OpenAPI for Java `(>= 1.8)`              |\n| [C](c/README.md)            | [Doc](https://longportapp.github.io/openapi/c/index.html)             | LongPort OpenAPI for C `(>= C99)`                 |\n| [C++](cpp/README.md)        | [Doc](https://longportapp.github.io/openapi/cpp/index.html)           | LongPort OpenAPI for C++`(>= C++17)`              |\n| Go                          |                                                                       | https://github.com/longportapp/openapi-go         |\n| [MCP](mcp/README.md)        |                                                                       | An MCP server implementation for LongPort OpenAPI |\n\n## Environment Variables\n\n| Name                           | Description                                                                      |\n|--------------------------------|----------------------------------------------------------------------------------|\n| LONGPORT_LANGUAGE              | Language identifier, `zh-CN`, `zh-HK` or `en` (Default: `en`)                    |\n| LONGPORT_APP_KEY               | App key                                                                          |\n| LONGPORT_APP_SECRET            | App secret                                                                       |\n| LONGPORT_ACCESS_TOKEN          | Access token                                                                     |\n| LONGPORT_HTTP_URL              | HTTP endpoint url (Default: `https://openapi.longportapp.com`)                   |\n| LONGPORT_QUOTE_WS_URL          | Quote websocket endpoint url (Default: `wss://openapi-quote.longportapp.com/v2`) |\n| LONGPORT_TRADE_WS_URL          | Trade websocket endpoint url (Default: `wss://openapi-trade.longportapp.com/v2`) |\n| LONGPORT_ENABLE_OVERNIGHT      | Enable overnight quote, `true` or `false` (Default: `false`)                     |\n| LONGPORT_PUSH_CANDLESTICK_MODE | `realtime` or `confirmed` (Default: `realtime`)                                  |\n| LONGPORT_PRINT_QUOTE_PACKAGES  | Print quote packages when connected, `true` or `false` (Default: `true`)         |\n| LONGPORT_LOG_PATH              | Set the path of the log files (Default: `no logs`)                               |\n\n## SDK Documenation\n\nhttps://longportapp.github.io/openapi\n\n## Resources\n\n- [LongPort OpenAPI](https://open.longportapp.com/en/)\n- [LongPort OpenAPI Docs](https://open.longportapp.com/en/docs)\n\n## License\n\nLicensed under either of\n\n* Apache License, Version 2.0,([LICENSE-APACHE](./LICENSE-APACHE) or http://www.apache.org/licenses/LICENSE-2.0)\n* MIT license ([LICENSE-MIT](./LICENSE-MIT) or http://opensource.org/licenses/MIT) at your option.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openapi",
        "longportapp",
        "longport",
        "longportapp openapi",
        "fintech longportapp",
        "longport openapi"
      ],
      "category": "finance--fintech"
    },
    "mcpdotdirect--evm-mcp-server": {
      "owner": "mcpdotdirect",
      "name": "evm-mcp-server",
      "url": "https://github.com/mcpdotdirect/evm-mcp-server",
      "imageUrl": "",
      "description": "Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.",
      "stars": 324,
      "forks": 80,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T06:14:39Z",
      "readme_content": "# EVM MCP Server\n\n![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)\n![EVM Networks](https://img.shields.io/badge/Networks-30+-green)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-3178C6)\n![Viem](https://img.shields.io/badge/Viem-1.0+-green)\n\nA comprehensive Model Context Protocol (MCP) server that provides blockchain services across multiple EVM-compatible networks. This server enables AI agents to interact with Ethereum, Optimism, Arbitrum, Base, Polygon, and many other EVM chains with a unified interface.\n\n## 📋 Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Supported Networks](#supported-networks)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Server Configuration](#server-configuration)\n- [Usage](#usage)\n- [API Reference](#api-reference)\n  - [Tools](#tools)\n  - [Resources](#resources)\n- [Security Considerations](#security-considerations)\n- [Project Structure](#project-structure)\n- [Development](#development)\n- [License](#license)\n\n## 🔭 Overview\n\nThe MCP EVM Server leverages the Model Context Protocol to provide blockchain services to AI agents. It supports a wide range of services including:\n\n- Reading blockchain state (balances, transactions, blocks, etc.)\n- Interacting with smart contracts\n- Transferring tokens (native, ERC20, ERC721, ERC1155)\n- Querying token metadata and balances\n- Chain-specific services across 30+ EVM networks\n- **ENS name resolution** for all address parameters (use human-readable names like 'vitalik.eth' instead of addresses)\n\nAll services are exposed through a consistent interface of MCP tools and resources, making it easy for AI agents to discover and use blockchain functionality. **Every tool that accepts Ethereum addresses also supports ENS names**, automatically resolving them to addresses behind the scenes.\n\n## ✨ Features\n\n### Blockchain Data Access\n\n- **Multi-chain support** for 30+ EVM-compatible networks\n- **Chain information** including blockNumber, chainId, and RPCs\n- **Block data** access by number, hash, or latest\n- **Transaction details** and receipts with decoded logs\n- **Address balances** for native tokens and all token standards\n- **ENS resolution** for human-readable Ethereum addresses (use 'vitalik.eth' instead of '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045')\n\n### Token services\n\n- **ERC20 Tokens**\n  - Get token metadata (name, symbol, decimals, supply)\n  - Check token balances\n  - Transfer tokens between addresses\n  - Approve spending allowances\n\n- **NFTs (ERC721)**\n  - Get collection and token metadata\n  - Verify token ownership\n  - Transfer NFTs between addresses\n  - Retrieve token URIs and count holdings\n\n- **Multi-tokens (ERC1155)**\n  - Get token balances and metadata\n  - Transfer tokens with quantity\n  - Access token URIs\n\n### Smart Contract Interactions\n\n- **Read contract state** through view/pure functions\n- **Write services** with private key signing\n- **Contract verification** to distinguish from EOAs\n- **Event logs** retrieval and filtering\n\n### Comprehensive Transaction Support\n\n- **Native token transfers** across all supported networks\n- **Gas estimation** for transaction planning\n- **Transaction status** and receipt information\n- **Error handling** with descriptive messages\n\n## 🌐 Supported Networks\n\n### Mainnets\n- Ethereum (ETH)\n- Optimism (OP)\n- Arbitrum (ARB)\n- Arbitrum Nova\n- Base\n- Polygon (MATIC)\n- Polygon zkEVM\n- Avalanche (AVAX)\n- Binance Smart Chain (BSC)\n- zkSync Era\n- Linea\n- Celo\n- Gnosis (xDai)\n- Fantom (FTM)\n- Filecoin (FIL)\n- Moonbeam\n- Moonriver\n- Cronos\n- Scroll\n- Mantle\n- Manta\n- Blast\n- Fraxtal\n- Mode\n- Metis\n- Kroma\n- Zora\n- Aurora\n- Canto\n- Flow\n- Lumia\n\n### Testnets\n- Sepolia\n- Optimism Sepolia\n- Arbitrum Sepolia\n- Base Sepolia\n- Polygon Amoy\n- Avalanche Fuji\n- BSC Testnet\n- zkSync Sepolia\n- Linea Sepolia\n- Scroll Sepolia\n- Mantle Sepolia\n- Manta Sepolia\n- Blast Sepolia\n- Fraxtal Testnet\n- Mode Testnet\n- Metis Sepolia\n- Kroma Sepolia\n- Zora Sepolia\n- Celo Alfajores\n- Goerli\n- Holesky\n- Flow Testnet\n- Filecoin Calibration\n- Lumia Testnet\n\n## 🛠️ Prerequisites\n\n- [Bun](https://bun.sh/) 1.0.0 or higher\n- Node.js 18.0.0 or higher (if not using Bun)\n\n## 📦 Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/mcpdotdirect/mcp-evm-server.git\ncd mcp-evm-server\n\n# Install dependencies with Bun\nbun install\n\n# Or with npm\nnpm install\n```\n\n## ⚙️ Server Configuration\n\nThe server uses the following default configuration:\n\n- **Default Chain ID**: 1 (Ethereum Mainnet)\n- **Server Port**: 3001\n- **Server Host**: 0.0.0.0 (accessible from any network interface)\n\nThese values are hardcoded in the application. If you need to modify them, you can edit the following files:\n\n- For chain configuration: `src/core/chains.ts`\n- For server configuration: `src/server/http-server.ts`\n\n## 🚀 Usage\n\n### Using npx (No Installation Required)\n\nYou can run the MCP EVM Server directly without installation using npx:\n\n```bash\n# Run the server in stdio mode (for CLI tools)\nnpx @mcpdotdirect/evm-mcp-server\n\n# Run the server in HTTP mode (for web applications)\nnpx @mcpdotdirect/evm-mcp-server --http\n```\n\n### Running the Server Locally\n\nStart the server using stdio (for embedding in CLI tools):\n\n```bash\n# Start the stdio server\nbun start\n\n# Development mode with auto-reload\nbun dev\n```\n\nOr start the HTTP server with SSE for web applications:\n\n```bash\n# Start the HTTP server\nbun start:http\n\n# Development mode with auto-reload\nbun dev:http\n```\n\n### Connecting to the Server\n\nConnect to this MCP server using any MCP-compatible client. For testing and debugging, you can use the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n### Connecting from Cursor\n\nTo connect to the MCP server from Cursor:\n\n1. Open Cursor and go to Settings (gear icon in the bottom left)\n2. Click on \"Features\" in the left sidebar\n3. Scroll down to \"MCP Servers\" section\n4. Click \"Add new MCP server\"\n5. Enter the following details:\n   - Server name: `evm-mcp-server`\n   - Type: `command`\n   - Command: `npx @mcpdotdirect/evm-mcp-server`\n\n6. Click \"Save\"\n\nOnce connected, you can use the MCP server's capabilities directly within Cursor. The server will appear in the MCP Servers list and can be enabled/disabled as needed.\n\n### Using mcp.json with Cursor\n\nFor a more portable configuration that you can share with your team or use across projects, you can create an `.cursor/mcp.json` file in your project's root directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"evm-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@mcpdotdirect/evm-mcp-server\"\n      ]\n    },\n    \"evm-mcp-http\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\", \n        \"@mcpdotdirect/evm-mcp-server\", \n        \"--http\"\n      ]\n    }\n  }\n}\n```\n\nPlace this file in your project's `.cursor` directory (create it if it doesn't exist), and Cursor will automatically detect and use these MCP server configurations when working in that project. This approach makes it easy to:\n\n1. Share MCP configurations with your team\n2. Version control your MCP setup\n3. Use different server configurations for different projects\n\n### Example: HTTP Mode with SSE\n\nIf you're developing a web application and want to connect to the HTTP server with Server-Sent Events (SSE), you can use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"evm-mcp-sse\": {\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\nThis connects directly to the HTTP server's SSE endpoint, which is useful for:\n- Web applications that need to connect to the MCP server from the browser\n- Environments where running local commands isn't ideal\n- Sharing a single MCP server instance among multiple users or applications\n\nTo use this configuration:\n1. Create a `.cursor` directory in your project root if it doesn't exist\n2. Save the above JSON as `mcp.json` in the `.cursor` directory\n3. Restart Cursor or open your project\n4. Cursor will detect the configuration and offer to enable the server(s)\n\n### Example: Using the MCP Server in Cursor\n\nAfter configuring the MCP server with `mcp.json`, you can easily use it in Cursor. Here's an example workflow:\n\n1. Create a new JavaScript/TypeScript file in your project:\n\n```javascript\n// blockchain-example.js\nasync function main() {\n  try {\n    // Get ETH balance for an address using ENS\n    console.log(\"Getting ETH balance for vitalik.eth...\");\n    \n    // When using with Cursor, you can simply ask Cursor to:\n    // \"Check the ETH balance of vitalik.eth on mainnet\"\n    // Or \"Transfer 0.1 ETH from my wallet to vitalik.eth\"\n    \n    // Cursor will use the MCP server to execute these operations \n    // without requiring any additional code from you\n    \n    // This is the power of the MCP integration - your AI assistant\n    // can directly interact with blockchain data and operations\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n  }\n}\n\nmain();\n```\n\n2. With the file open in Cursor, you can ask Cursor to:\n\n   - \"Check the current ETH balance of vitalik.eth\"\n   - \"Look up the price of USDC on Ethereum\"\n   - \"Show me the latest block on Optimism\"\n   - \"Check if 0x1234... is a contract address\"\n\n3. Cursor will use the MCP server to execute these operations and return the results directly in your conversation.\n\nThe MCP server handles all the blockchain communication while allowing Cursor to understand and execute blockchain-related tasks through natural language.\n\n### Connecting using Claude CLI\n\nIf you're using Claude CLI, you can connect to the MCP server with just two commands:\n\n```bash\n# Add the MCP server\nclaude mcp add evm-mcp-server npx @mcpdotdirect/evm-mcp-server\n\n# Start Claude with the MCP server enabled\nclaude\n```\n\n### Example: Getting a Token Balance with ENS\n\n```javascript\n// Example of using the MCP client to check a token balance using ENS\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"get-token-balance\", {\n  tokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\", // USDC on Ethereum\n  ownerAddress: \"vitalik.eth\", // ENS name instead of address\n  network: \"ethereum\"\n});\n\nconsole.log(result);\n// {\n//   tokenAddress: \"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\",\n//   owner: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n//   network: \"ethereum\",\n//   raw: \"1000000000\",\n//   formatted: \"1000\",\n//   symbol: \"USDC\",\n//   decimals: 6\n// }\n```\n\n### Example: Resolving an ENS Name\n\n```javascript\n// Example of using the MCP client to resolve an ENS name to an address\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"resolve-ens\", {\n  ensName: \"vitalik.eth\",\n  network: \"ethereum\"\n});\n\nconsole.log(result);\n// {\n//   ensName: \"vitalik.eth\",\n//   normalizedName: \"vitalik.eth\",\n//   resolvedAddress: \"0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045\",\n//   network: \"ethereum\"\n// }\n```\n\n## 📚 API Reference\n\n### Tools\n\nThe server provides the following MCP tools for agents. **All tools that accept address parameters support both Ethereum addresses and ENS names.**\n\n#### Token services\n\n| Tool Name | Description | Key Parameters |\n|-----------|-------------|----------------|\n| `get-token-info` | Get ERC20 token metadata | `tokenAddress` (address/ENS), `network` |\n| `get-token-balance` | Check ERC20 token balance | `tokenAddress` (address/ENS), `ownerAddress` (address/ENS), `network` |\n| `transfer-token` | Transfer ERC20 tokens | `privateKey`, `tokenAddress` (address/ENS), `toAddress` (address/ENS), `amount`, `network` |\n| `approve-token-spending` | Approve token allowances | `privateKey`, `tokenAddress` (address/ENS), `spenderAddress` (address/ENS), `amount`, `network` |\n| `get-nft-info` | Get NFT metadata | `tokenAddress` (address/ENS), `tokenId`, `network` |\n| `check-nft-ownership` | Verify NFT ownership | `tokenAddress` (address/ENS), `tokenId`, `ownerAddress` (address/ENS), `network` |\n| `transfer-nft` | Transfer an NFT | `privateKey`, `tokenAddress` (address/ENS), `tokenId`, `toAddress` (address/ENS), `network` |\n| `get-nft-balance` | Count NFTs owned | `tokenAddress` (address/ENS), `ownerAddress` (address/ENS), `network` |\n| `get-erc1155-token-uri` | Get ERC1155 metadata | `tokenAddress` (address/ENS), `tokenId`, `network` |\n| `get-erc1155-balance` | Check ERC1155 balance | `tokenAddress` (address/ENS), `tokenId`, `ownerAddress` (address/ENS), `network` |\n| `transfer-erc1155` | Transfer ERC1155 tokens | `privateKey`, `tokenAddress` (address/ENS), `tokenId`, `amount`, `toAddress` (address/ENS), `network` |\n\n#### Blockchain services\n\n| Tool Name | Description | Key Parameters |\n|-----------|-------------|----------------|\n| `get-chain-info` | Get network information | `network` |\n| `get-balance` | Get native token balance | `address` (address/ENS), `network` |\n| `transfer-eth` | Send native tokens | `privateKey`, `to` (address/ENS), `amount`, `network` |\n| `get-transaction` | Get transaction details | `txHash`, `network` |\n| `read-contract` | Read smart contract state | `contractAddress` (address/ENS), `abi`, `functionName`, `args`, `network` |\n| `write-contract` | Write to smart contract | `contractAddress` (address/ENS), `abi`, `functionName`, `args`, `privateKey`, `network` |\n| `is-contract` | Check if address is a contract | `address` (address/ENS), `network` |\n| `resolve-ens` | Resolve ENS name to address | `ensName`, `network` |\n\n### Resources\n\nThe server exposes blockchain data through the following MCP resource URIs. All resource URIs that accept addresses also support ENS names, which are automatically resolved to addresses.\n\n#### Blockchain Resources\n\n| Resource URI Pattern | Description |\n|-----------|-------------|\n| `evm://{network}/chain` | Chain information for a specific network |\n| `evm://chain` | Ethereum mainnet chain information |\n| `evm://{network}/block/{blockNumber}` | Block data by number |\n| `evm://{network}/block/latest` | Latest block data |\n| `evm://{network}/address/{address}/balance` | Native token balance |\n| `evm://{network}/tx/{txHash}` | Transaction details |\n| `evm://{network}/tx/{txHash}/receipt` | Transaction receipt with logs |\n\n#### Token Resources\n\n| Resource URI Pattern | Description |\n|-----------|-------------|\n| `evm://{network}/token/{tokenAddress}` | ERC20 token information |\n| `evm://{network}/token/{tokenAddress}/balanceOf/{address}` | ERC20 token balance |\n| `evm://{network}/nft/{tokenAddress}/{tokenId}` | NFT (ERC721) token information |\n| `evm://{network}/nft/{tokenAddress}/{tokenId}/isOwnedBy/{address}` | NFT ownership verification |\n| `evm://{network}/erc1155/{tokenAddress}/{tokenId}/uri` | ERC1155 token URI |\n| `evm://{network}/erc1155/{tokenAddress}/{tokenId}/balanceOf/{address}` | ERC1155 token balance |\n\n## 🔒 Security Considerations\n\n- **Private keys** are used only for transaction signing and are never stored by the server\n- Consider implementing additional authentication mechanisms for production use\n- Use HTTPS for the HTTP server in production environments\n- Implement rate limiting to prevent abuse\n- For high-value services, consider adding confirmation steps\n\n## 📁 Project Structure\n\n```\nmcp-evm-server/\n├── src/\n│   ├── index.ts                # Main stdio server entry point\n│   ├── server/                 # Server-related files\n│   │   ├── http-server.ts      # HTTP server with SSE\n│   │   └── server.ts           # General server setup\n│   ├── core/\n│   │   ├── chains.ts           # Chain definitions and utilities\n│   │   ├── resources.ts        # MCP resources implementation\n│   │   ├── tools.ts            # MCP tools implementation\n│   │   ├── prompts.ts          # MCP prompts implementation\n│   │   └── services/           # Core blockchain services\n│   │       ├── index.ts        # Operation exports\n│   │       ├── balance.ts      # Balance services\n│   │       ├── transfer.ts     # Token transfer services\n│   │       ├── utils.ts        # Utility functions\n│   │       ├── tokens.ts       # Token metadata services\n│   │       ├── contracts.ts    # Contract interactions\n│   │       ├── transactions.ts # Transaction services\n│   │       └── blocks.ts       # Block services\n│   │       └── clients.ts      # RPC client utilities\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n## 🛠️ Development\n\nTo modify or extend the server:\n\n1. Add new services in the appropriate file under `src/core/services/`\n2. Register new tools in `src/core/tools.ts`\n3. Register new resources in `src/core/resources.ts`\n4. Add new network support in `src/core/chains.ts`\n5. To change server configuration, edit the hardcoded values in `src/server/http-server.ts`\n\n## 📄 License\n\nThis project is licensed under the terms of the [MIT License](./LICENSE).\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "blockchain",
        "mcpdotdirect",
        "fintech",
        "fintech mcpdotdirect",
        "comprehensive blockchain",
        "mcpdotdirect evm"
      ],
      "category": "finance--fintech"
    },
    "mcpdotdirect--starknet-mcp-server": {
      "owner": "mcpdotdirect",
      "name": "starknet-mcp-server",
      "url": "https://github.com/mcpdotdirect/starknet-mcp-server",
      "imageUrl": "",
      "description": "Comprehensive Starknet blockchain integration with support for native tokens (ETH, STRK), smart contracts, StarknetID resolution, and token transfers.",
      "stars": 4,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-05-23T18:18:05Z",
      "readme_content": "# Starknet MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@mcpdotdirect/starknet-mcp-server)](https://smithery.ai/server/@mcpdotdirect/starknet-mcp-server)\n![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)\n![TypeScript](https://img.shields.io/badge/TypeScript-5.0+-3178C6)\n![MCP](https://img.shields.io/badge/MCP-1.7+-green)\n![Starknet.js](https://img.shields.io/badge/Starknet.js-Latest-purple)\n\nA comprehensive Model Context Protocol (MCP) server for the Starknet blockchain. This server provides AI agents with the ability to interact with Starknet networks, query blockchain data, manage wallets, and interact with smart contracts.\n\n<a href=\"https://glama.ai/mcp/servers/@mcpdotdirect/starknet-mcp-server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@mcpdotdirect/starknet-mcp-server/badge\" alt=\"Starknet Server MCP server\" />\n</a>\n\n## 📋 Contents\n\n- [Overview](#-overview)\n- [Features](#-features)\n- [Supported Networks](#-networks-supported)\n- [Prerequisites](#-prerequisites)\n- [Installation](#-installation)\n- [Server Configuration](#-server-configuration)\n- [Usage](#-usage)\n- [API Reference](#-api-reference)\n  - [Tools](#available-mcp-tools)\n  - [Resources](#available-mcp-resources)\n  - [Prompts](#available-mcp-prompts)\n- [Usage with AI Assistants](#-usage-with-ai-assistants)\n- [Security Considerations](#-security-considerations)\n- [Project Structure](#-project-structure)\n- [Development Conventions](#️-development-conventions)\n- [Documentation](#-documentation)\n- [License](#-license)\n\n## 🔭 Overview\n\nThe Starknet MCP Server leverages the Model Context Protocol to provide blockchain services to AI agents. It offers a comprehensive interface to the Starknet ecosystem, powering AI assistants with the ability to interact with Starknet blockchain data and operations through natural language.\n\nKey capabilities include:\n- Reading blockchain state (balances, transactions, blocks)\n- Interacting with Cairo smart contracts\n- Transferring tokens (ETH, STRK, and other ERC20 tokens)\n- Working with NFTs and token metadata\n- Resolving StarknetID domains (similar to ENS for Ethereum)\n- Making both read and write operations with proper transaction handling\n\nAll services are exposed through a consistent interface of MCP tools and resources, making it easy for AI agents to discover and use Starknet blockchain functionality. **Every tool that accepts Starknet addresses also supports StarknetID**, automatically resolving human-readable identities to addresses behind the scenes.\n\n## ✨ Features\n\n- **Starknet Integration**: Full Starknet blockchain integration using Starknet.js\n- **Network Support**: Supports both Mainnet and Sepolia testnet\n- **StarknetID Integration**: Resolution of Starknet IDs to addresses and vice versa\n- **Native Token Support**: Support for both ETH and STRK native tokens\n- **Smart Contract Interaction**: Call and query Starknet smart contracts\n- **Dual Transport**: Run as stdio server or HTTP server for different integration needs\n- **AI-Ready**: Designed to be used with Claude, GPT, and other AI assistants\n\n### Blockchain Information\n- Query chain information (chain ID, latest block)\n- Explore block details and transactions\n- View transaction receipts and status\n- Get address information and contract data\n\n### Native Token Operations\n- Get ETH and STRK balances for any address\n- Transfer ETH and STRK between accounts\n- View combined native token balances\n\n### Token Operations\n- Get ERC20 token balances and information\n- Transfer ERC20 tokens\n- View token supply and metadata\n- Check token ownership\n\n### NFT Operations\n- Check NFT ownership by token ID\n- Get NFT collection information\n- View NFT balances for addresses\n\n### Smart Contract Interaction\n- Call read-only contract functions\n- Execute contract writes with transaction confirmation\n- Get contract storage information\n- View ABIs and contract class information\n\n### StarknetID\n- Resolve Starknet addresses to Starknet IDs\n- Resolve Starknet IDs to addresses\n- Get complete Starknet ID profiles with verification data\n- Validate Starknet domains\n\n## 🔧 Networks Supported\n\nThe server supports the following Starknet networks:\n\n- **Mainnet**: The primary Starknet production network\n- **Sepolia**: Starknet's testnet on Ethereum's Sepolia\n\n## 🛠️ Prerequisites\n\n- [Bun](https://bun.sh/) 1.0.0 or higher (recommended)\n- Node.js 18.0.0 or higher\n\n## 📦 Installation\n\n### Installing via Smithery\n\nTo install starknet-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@mcpdotdirect/starknet-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @mcpdotdirect/starknet-mcp-server --client claude\n```\n\n### Option 1: Use without installation (npx)\n\nThe easiest way to get started is to use `npx` to run the package directly:\n\n```bash\n# Run the stdio server without installation\nnpx @mcpdotdirect/starknet-mcp-server\n\n# Run the HTTP server without installation\nnpx @mcpdotdirect/starknet-mcp-server http\n```\n\nThis will automatically download and run the latest version without needing to install it first.\n\n### Option 2: Global installation\n\nIf you plan to use it frequently, you can install it globally:\n\n```bash\n# Install globally\nnpm install -g @mcpdotdirect/starknet-mcp-server\n\n# Then run from anywhere\nstarknet-mcp-server\nstarknet-mcp-server http\n```\n\n### Option 3: Local project installation\n\n```bash\n# Add to your project\nnpm install @mcpdotdirect/starknet-mcp-server\n\n# Using yarn\nyarn add @mcpdotdirect/starknet-mcp-server\n\n# Using pnpm\npnpm add @mcpdotdirect/starknet-mcp-server\n```\n\nThen add to your package.json scripts:\n```json\n\"scripts\": {\n  \"starknet-mcp\": \"starknet-mcp-server\",\n  \"starknet-mcp-http\": \"starknet-mcp-server http\"\n}\n```\n\n### Option 4: Running from source\n\nIf you want to run from source or develop locally:\n\n```bash\n# Clone the repository\ngit clone https://github.com/mcpdotdirect/starknet-mcp-server.git\ncd starknet-mcp-server\n\n# Install dependencies\nnpm install\n\n# Start the stdio server\nnpm start\n\n# Or start the HTTP server\nnpm run start:http\n```\n\nFor development with auto-reload:\n```bash\n# Development mode with stdio\nnpm run dev\n\n# Development mode with HTTP\nnpm run dev:http\n```\n\n## ⚙️ Server Configuration\n\nThe server uses the following default configuration:\n\n- **Default Network**: Mainnet\n- **Server Port**: 3000 (HTTP mode)\n- **Server Host**: 0.0.0.0 (accessible from any network interface)\n\nThese values are hardcoded in the application. If you need to modify them, you can edit the following files:\n\n- For network configuration: `src/core/chains.ts`\n- For server configuration: `src/server/http-server.ts`\n\n## 🔍 Usage\n\n### Running the Server\n\nYou can run the Starknet MCP Server in two modes:\n\n```bash\n# Run the server in stdio mode (for CLI tools and AI assistants)\nnpx @mcpdotdirect/starknet-mcp-server\n\n# Run the server in HTTP mode (for web applications)\nnpx @mcpdotdirect/starknet-mcp-server http\n```\n\nThe HTTP server runs on port 3000 by default and provides both a REST API and Server-Sent Events (SSE) for real-time communication.\n\n### Connecting from Cursor\n\nTo connect to the Starknet MCP server from Cursor:\n\n1. Open Cursor and go to Settings (gear icon in the bottom left)\n2. Click on \"Features\" in the left sidebar\n3. Scroll down to \"MCP Servers\" section\n4. Click \"Add new MCP server\"\n5. Enter the following details:\n   - Server name: `starknet-mcp-server`\n   - Type: `command`\n   - Command: `npx @mcpdotdirect/starknet-mcp-server`\n\n6. Click \"Save\"\n\nOnce connected, you can use the MCP server's capabilities directly within Cursor. The server will appear in the MCP Servers list and can be enabled/disabled as needed.\n\n### Using mcp.json with Cursor\n\nFor a more portable configuration that you can share with your team or use across projects, you can create an `.cursor/mcp.json` file in your project's root directory:\n\n```json\n{\n  \"mcpServers\": {\n    \"starknet-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@mcpdotdirect/starknet-mcp-server\"\n      ]\n    },\n    \"starknet-mcp-http\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@mcpdotdirect/starknet-mcp-server\",\n        \"http\"\n      ]\n    }\n  }\n}\n```\n\nPlace this file in your project's `.cursor` directory (create it if it doesn't exist), and Cursor will automatically detect and use these MCP server configurations when working in that project.\n\n### HTTP Mode with SSE\n\nIf you're developing a web application and want to connect to the HTTP server with Server-Sent Events (SSE), you can use this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"starknet-mcp-sse\": {\n      \"url\": \"http://localhost:3000/sse\"\n    }\n  }\n}\n```\n\n### Connecting using Claude CLI\n\nIf you're using Claude CLI, you can connect to the MCP server with just two commands:\n\n```bash\n# Add the MCP server using npx\nclaude mcp add starknet-mcp-server npx @mcpdotdirect/starknet-mcp-server\n\n# Start Claude with the MCP server enabled\nclaude\n```\n\n### Example: Using the MCP Server in Cursor\n\nAfter configuring the MCP server, you can easily use it in Cursor. For example:\n\n1. Create a new JavaScript/TypeScript file in your project:\n\n```javascript\n// starknet-example.js\nasync function main() {\n  try {\n    // When using with Cursor, you can simply ask Cursor to:\n    // \"Check the ETH balance of address 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7 on Starknet mainnet\"\n    // Or \"Lookup the Starknet ID for address 0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\"\n    \n    // Cursor will use the MCP server to execute these operations \n    // without requiring any additional code from you\n  } catch (error) {\n    console.error(\"Error:\", error.message);\n  }\n}\n\nmain();\n```\n\n2. With the file open in Cursor, you can ask Cursor to:\n   - \"Check the ETH balance of vitalik.stark\"\n   - \"Get information about the latest block on Starknet\"\n   - \"Look up the owner of NFT #123 in collection 0x...\"\n\n### Example: Getting an ETH Balance with Starknet ID\n\n```javascript\n// Example of using the MCP client to check an ETH balance using Starknet ID\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"get_starknet_eth_balance\", {\n  address: \"vitalik.stark\", // Starknet ID instead of address\n  network: \"mainnet\"\n});\n\nconsole.log(result);\n// {\n//   wei: \"1000000000000000000\",\n//   ether: \"1.0\"\n// }\n```\n\n### Example: Resolving a Starknet ID\n\n```javascript\n// Example of using the MCP client to resolve a Starknet ID to an address\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"resolve_starknet_address\", {\n  name: \"vitalik.stark\",\n  network: \"mainnet\"\n});\n\nconsole.log(result);\n// {\n//   starknetId: \"vitalik.stark\",\n//   address: \"0x04d07e40e93398ed3c76981e449d3446f7c4e52aac5b3e8a37d7b0ca30845a5d\",\n//   resolved: true\n// }\n```\n\n### Example: Calling a Smart Contract\n\n```javascript\n// Example of using the MCP client to call a smart contract function\nconst mcp = new McpClient(\"http://localhost:3000\");\n\nconst result = await mcp.invokeTool(\"call_starknet_contract\", {\n  contractAddress: \"0x049d36570d4e46f48e99674bd3fcc84644ddd6b96f7c741b1562b82f9e004dc7\", // ETH contract\n  entrypoint: \"totalSupply\",\n  calldata: [],\n  network: \"mainnet\"\n});\n\nconsole.log(result);\n// {\n//   result: [\"0x84b6c7d5970d5a73abe\"]\n// }\n```\n\n### Using in a Node.js Project\n\nIf you want to programmatically use the MCP server in your Node.js project:\n\n```javascript\n// Start the MCP server as a child process\nconst { spawn } = require('child_process');\nconst mcpServer = spawn('npx', ['@mcpdotdirect/starknet-mcp-server']);\n\n// Connect to it with the MCP client\nconst mcp = new McpClient({ process: mcpServer });\n\n// Now you can use the client\nconst networks = await mcp.invokeTool(\"get_supported_starknet_networks\", {\n  random_string: \"any\"\n});\nconsole.log(\"Supported networks:\", networks);\n```\n\nFor more advanced usage, you can create a wrapper class around the HTTP API or use libraries like Axios for cleaner API calls.\n\n## 📚 API Reference\n\n### Available MCP Tools\n\nThis server implements the following MCP tools:\n\n#### Network Tools\n- `get_starknet_chain_info`: Get information about a Starknet network\n- `get_supported_starknet_networks`: Get a list of supported Starknet networks\n\n#### Balance Tools\n- `get_starknet_eth_balance`: Get the ETH balance for a Starknet address or Starknet ID\n- `get_starknet_token_balance`: Get the balance of any token for an address\n- `get_starknet_strk_balance`: Get the STRK token balance for an address\n- `get_starknet_native_balances`: Get all native token balances (ETH and STRK) for an address\n\n#### StarknetID Tools\n- `resolve_starknet_name`: Get the Starknet ID for an address\n- `resolve_starknet_address`: Get the address for a Starknet ID\n- `get_starknet_profile`: Get the full Starknet ID profile for an address\n- `validate_starknet_domain`: Check if a string is a valid Starknet ID\n\n#### Block Tools\n- `get_starknet_block`: Get information about a specific block\n- `get_starknet_block_transactions`: Get transactions in a specific block\n\n#### Transaction Tools\n- `get_starknet_transaction`: Get details about a transaction\n- `get_starknet_transaction_receipt`: Get transaction receipt\n- `check_starknet_transaction_status`: Check if a transaction is confirmed\n\n#### Contract Tools\n- `call_starknet_contract`: Call a read-only function on a contract\n- `get_starknet_contract_class`: Get the class (ABI and other information) of a contract\n- `execute_starknet_contract`: Execute a contract call (write operation)\n\n#### Token Tools\n- `get_starknet_token_info`: Get information about a token\n- `get_starknet_token_supply`: Get the total supply of a token\n- `check_starknet_nft_ownership`: Check if an address owns a specific NFT\n- `get_starknet_nft_balance`: Get the number of NFTs owned by an address\n\n#### Transfer Tools\n- `transfer_starknet_eth`: Transfer ETH from one account to another (amounts in human-readable format)\n- `transfer_starknet_strk`: Transfer STRK from one account to another (amounts in human-readable format)\n- `transfer_starknet_token`: Transfer ERC20 tokens from one account to another (amounts in human-readable format)\n\n### Available MCP Resources\n\nThe server provides the following MCP resources:\n\n#### Network Resources\n- `starknet://{network}/chain`: Get chain information for a specific network\n- `starknet://networks`: Get a list of all supported networks\n\n#### Block Resources\n- `starknet://{network}/block/{blockIdentifier}`: Get information about a specific block\n- `starknet://{network}/block/latest`: Get the latest block\n\n#### Address Resources\n- `starknet://{network}/address/{address}`: Get information about an address\n\n#### Transaction Resources\n- `starknet://{network}/tx/{txHash}`: Get transaction information\n\n#### StarknetID Resources\n- `starknet://{network}/id/address/{address}`: Resolve an address to a Starknet ID\n- `starknet://{network}/id/name/{name}`: Resolve a Starknet ID to an address\n- `starknet://{network}/id/profile/{address}`: Get the Starknet ID profile for an address\n\n### Available MCP Prompts\n\nFor LLM interactions, the server provides these prompts:\n\n- `explore_starknet_block`: Explore information about a specific Starknet block\n- `explore_starknet_address`: Get information about a Starknet address\n- `explore_starknet_transaction`: Get information about a Starknet transaction\n- `lookup_starknet_id`: Look up a Starknet ID or resolve an address to a Starknet ID\n- `explore_starknet_id_profile`: Explore a full Starknet ID profile\n\n## 🔍 Usage with AI Assistants\n\nWhen using this server with AI assistants like Claude or GPT:\n\n1. Configure your AI assistant to use this MCP server\n2. The assistant can then use tools to interact with Starknet\n3. Example queries:\n   - \"What's the ETH balance of address 0x04d07e40e93398ed3c76981e449d3446f7c4e52aac5b3e8a37d7b0ca30845a5d?\"\n   - \"Look up the Starknet ID for address 0x04d07e40e93398ed3c76981e449d3446f7c4e52aac5b3e8a37d7b0ca30845a5d\"\n   - \"What's in the latest block on Starknet mainnet?\"\n   - \"Get information about transaction 0x7e3a33ab42f2e24184763563b7b8482b53e3b89831ebc3eacf29d4d11f5198\"\n   - \"Resolve the Starknet ID vitalik.stark to an address\"\n\n## 🔒 Security Considerations\n\n- **Private keys** are used only for transaction signing and are never stored by the server\n- **All token amounts** are specified in human-readable format (e.g., ETH, STRK, token units) rather than in wei or smallest units\n- Always validate and sanitize input parameters before executing operations\n- Consider implementing additional authentication mechanisms for production use\n- Use HTTPS for the HTTP server in production environments\n- Implement rate limiting to prevent abuse\n- For high-value services, consider adding confirmation steps\n\n## 📁 Project Structure\n\n```\nstarknet-mcp-server/\n├── src/\n│   ├── index.ts                # Main stdio server entry point\n│   ├── server/                 # Server-related files\n│   │   ├── http-server.ts      # HTTP server with SSE\n│   │   └── server.ts           # General server setup\n│   ├── core/\n│   │   ├── chains.ts           # Chain definitions and utilities\n│   │   ├── resources.ts        # MCP resources implementation\n│   │   ├── tools.ts            # MCP tools implementation\n│   │   ├── prompts.ts          # MCP prompts implementation\n│   │   └── services/           # Core blockchain services\n│   │       ├── index.ts        # Service exports\n│   │       ├── balance.ts      # Balance services\n│   │       ├── blocks.ts       # Block services\n│   │       ├── clients.ts      # Client utilities\n│   │       ├── contracts.ts    # Contract interactions\n│   │       ├── starknetid.ts   # Starknet ID services\n│   │       ├── tokens.ts       # Token services\n│   │       ├── transactions.ts # Transaction services\n│   │       ├── transfer.ts     # Transfer services\n│   │       └── utils.ts        # Utility functions\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n## 🛠️ Development Conventions\n\nWhen adding custom tools, resources, or prompts:\n\n1. Use underscores (`_`) instead of hyphens (`-`) in all resource, tool, and prompt names\n   ```typescript\n   // Good: Uses underscores\n   server.tool(\n     \"starknet_contract_call\",\n     \"Description of the tool\",\n     {\n       contract_address: z.string().describe(\"The contract address\")\n     },\n     async (params) => {\n       // Tool implementation\n     }\n   );\n   ```\n\n2. This naming convention ensures compatibility with Cursor and other AI tools\n\n## 📚 Documentation\n\nFor more information about:\n- [Model Context Protocol](https://modelcontextprotocol.io/introduction)\n- [Starknet.js Documentation](https://www.starknetjs.com/)\n- [Starknet Documentation](https://docs.starknet.io/)\n- [StarknetID Documentation](https://docs.starknet.id/)\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "starknet",
        "starknetid",
        "fintech",
        "starknet blockchain",
        "mcpdotdirect starknet",
        "starknet mcp"
      ],
      "category": "finance--fintech"
    },
    "minhyeoky--mcp-server-ledger": {
      "owner": "minhyeoky",
      "name": "mcp-server-ledger",
      "url": "https://github.com/minhyeoky/mcp-server-ledger",
      "imageUrl": "",
      "description": "A ledger-cli integration for managing financial transactions and generating reports.",
      "stars": 28,
      "forks": 6,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-02T11:39:31Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/minhyeoky-mcp-server-ledger-badge.png)](https://mseep.ai/app/minhyeoky-mcp-server-ledger)\n\n# mcp-server-ledger: A Ledger CLI MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@minhyeoky/mcp-ledger)](https://smithery.ai/server/@minhyeoky/mcp-ledger)\n\n## Overview\n\nA Model Context Protocol server for interacting with [Ledger CLI](https://www.ledger-cli.org/), a powerful, double-entry accounting system accessible from the command line. This server allows Large Language Models to query and analyze your financial data through the Ledger CLI tool.\n\nThis MCP server exposes Ledger CLI's functionality through a standardized interface, making it easy for AI assistants to help you with financial reporting, budget analysis, and accounting tasks.\n\n## Features\n\nThe server provides the following tools that map to Ledger CLI commands:\n\n1. `ledger_balance`\n   - Shows account balances with powerful filtering options\n   - Inputs: query pattern, date ranges, display options\n   - Returns: Formatted balance report\n\n2. `ledger_register`\n   - Shows transaction register with detailed history\n   - Inputs: query pattern, date ranges, sorting options\n   - Returns: Formatted register report\n\n3. `ledger_accounts`\n   - Lists all accounts in the ledger file\n   - Input: optional query pattern\n   - Returns: List of matching accounts\n\n4. `ledger_payees`\n   - Lists all payees from transactions\n   - Input: optional query pattern\n   - Returns: List of matching payees\n\n5. `ledger_commodities`\n   - Lists all commodities (currencies) used\n   - Input: optional query pattern\n   - Returns: List of matching commodities\n\n6. `ledger_print`\n   - Prints transactions in ledger format\n   - Inputs: query pattern, date ranges\n   - Returns: Formatted ledger entries\n\n7. `ledger_stats`\n   - Shows statistics about the ledger file\n   - Input: optional query pattern\n   - Returns: Statistical summary of the ledger\n\n8. `ledger_budget`\n   - Shows budget analysis\n   - Inputs: query pattern, date ranges, reporting period\n   - Returns: Budget report\n\n9. `ledger_raw_command`\n   - Runs a raw Ledger CLI command\n   - Input: command arguments as a list of strings\n   - Returns: Command output as text\n\n## Prerequisites\n\n- [Ledger CLI](https://www.ledger-cli.org/) must be installed and available in your PATH\n- A valid Ledger file with your financial data\n\n## Installation\n\n### Using Docker (recommended)\n\nYou can also use the Docker image from the minhyeoky/mcp-ledger repository:\n\n```bash\ndocker pull minhyeoky/mcp-ledger\n```\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n\"mcp-ledger\": {\n  \"command\": \"docker\",\n  \"args\": [\n    \"run\",\n    \"-v\",\n    \"/path/to/your/ledger/file.ledger:/main.ledger\",\n    \"-e\",\n    \"LEDGER_FILE=/main.ledger\",\n    \"-i\",\n    \"--rm\",\n    \"minhyeoky/mcp-ledger\"\n  ]\n}\n```\n\nReplace `/path/to/your/ledger/file.ledger` with the actual path to your ledger file.\n\n### Installing via Smithery\n\nTo install Ledger CLI MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@minhyeoky/mcp-ledger):\n\n```bash\nnpx -y @smithery/cli install @minhyeoky/mcp-ledger --client claude\n```\n\n### Using uv\n\nThe easiest way to install and run this server is with [uv](https://docs.astral.sh/uv/):\n\n```bash\nuv sync\n```\n## Configuration\n\nThe server requires a path to your Ledger file. This can be provided through:\n\n- The `LEDGER_FILE` environment variable\n- Command-line arguments when starting the server\n\n### Using with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n\"mcpServers\": {\n  \"ledger\": {\n    \"command\": \"uv\",\n    \"args\": [\n      \"run\",\n      \"--env-file\",\n      \"/path/to/your/.env\",  // Optional: to set LEDGER_FILE\n      \"--with\",\n      \"mcp[cli]\",\n      \"mcp\",\n      \"run\",\n      \"<repo_path>/main.py\"  // Path to the main.py file in this repository\n    ]\n  }\n\n}\n```\n\n## Usage Examples\n\nOnce configured, you can ask your AI assistant questions about your financial data:\n\n- \"Show me my expenses for the last month\"\n- \"What's my current balance in all accounts?\"\n- \"List all transactions with Amazon\"\n- \"How much did I spend on groceries in 2023?\"\n- \"Show me my budget performance for Q1\"\n\nThe AI will use the appropriate Ledger CLI commands through the server to get the information.\n\n## Debugging\n\nFor more detailed local testing:\n\n```bash\nmcp dev main.py\n```\n\n## Development\n\nThis server is built using the [Model Context Protocol Python SDK](https://github.com/modelcontextprotocol/python-sdk). For more information about MCP and how to develop MCP servers, see the [official documentation](https://modelcontextprotocol.io).\n\nTo contribute to this project:\n\n1. Clone the repository\n2. Install development dependencies\n3. Make your changes\n4. Test using the MCP inspector or by integrating with Claude Desktop\n\n## Security Considerations\n\nThis server runs Ledger CLI commands on your financial data. While it includes basic validation to prevent command injection, you should:\n\n- Only use with trusted clients\n- Be careful about which file paths you expose\n- Review all commands before execution\n\n## License\n\nThis MCP server is licensed under the MIT License. Feel free to use, modify, and distribute it according to the license terms.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ledger",
        "finance",
        "financial",
        "ledger cli",
        "server ledger",
        "ledger ledger"
      ],
      "category": "finance--fintech"
    },
    "narumiruna--yfinance-mcp": {
      "owner": "narumiruna",
      "name": "yfinance-mcp",
      "url": "https://github.com/narumiruna/yfinance-mcp",
      "imageUrl": "",
      "description": "An MCP server that uses yfinance to obtain information from Yahoo Finance.",
      "stars": 58,
      "forks": 23,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T14:20:47Z",
      "readme_content": "# Yahoo Finance MCP Server\n\nA simple MCP server for Yahoo Finance using [yfinance](https://github.com/ranaroussi/yfinance). This server provides a set of tools to fetch stock data, news, and other financial information.\n\n<a href=\"https://glama.ai/mcp/servers/@narumiruna/yfinance-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@narumiruna/yfinance-mcp/badge\" />\n</a>\n\n## Tools\n\n- **get_ticker_info**\n\n  - Retrieve stock data including company info, financials, trading metrics and governance data.\n  - Inputs:\n    - `symbol` (string): The stock symbol.\n\n- **get_ticker_news**\n\n  - Fetches recent news articles related to a specific stock symbol with title, content, and source details.\n  - Inputs:\n    - `symbol` (string): The stock symbol.\n\n- **search**\n\n  - Fetches and organizes search results from Yahoo Finance, including stock quotes and news articles.\n  - Inputs:\n    - `query` (string): The search query (ticker symbol or company name).\n    - `search_type` (string): Type of search results to retrieve (options: \"all\", \"quotes\", \"news\").\n\n- **get_top**\n\n  - Get top entities (ETFs, mutual funds, companies, growth companies, or performing companies) in a sector.\n  - Inputs:\n    - `sector` (string): The sector to get.\n    - `top_type` (string): Type of top companies to retrieve (options: \"top_etfs\", \"top_mutual_funds\", \"top_companies\", \"top_growth_companies\", \"top_performing_companies\").\n    - `top_n` (number, optional): Number of top entities to retrieve (default 10).\n\n- **get_price_history**\n\n  - Fetch historical price data for a given stock symbol over a specified period and interval.\n  - Inputs:\n    - `symbol` (string): The stock symbol.\n    - `period` (string, optional): Time period to retrieve data for (e.g. '1d', '1mo', '1y'). Default is '1mo'.\n    - `interval` (string, optional): Data interval frequency (e.g. '1d', '1h', '1m'). Default is '1d'.\n\n## Usage\n\nYou can use this MCP server either via uv (Python package installer) or Docker.\n\n### Via uv\n\n1. [Install uv](https://docs.astral.sh/uv/getting-started/installation/)\n2. Add the following configuration to your MCP server configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"yfmcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yfmcp@latest\"]\n    }\n  }\n}\n```\n\n### Via Docker\n\nAdd the following configuration to your MCP server configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"yfmcp\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"narumi/yfinance-mcp\"]\n    }\n  }\n}\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "yfinance",
        "mcp",
        "fintech",
        "yfinance mcp",
        "fintech narumiruna",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "openMF--mcp-mifosx": {
      "owner": "openMF",
      "name": "mcp-mifosx",
      "url": "https://github.com/openMF/mcp-mifosx",
      "imageUrl": "",
      "description": "A core banking integration for managing clients, loans, savings, shares, financial transactions and generating financial reports.",
      "stars": 17,
      "forks": 11,
      "license": "Mozilla Public License 2.0",
      "language": "Java",
      "updated_at": "2025-10-02T11:39:49Z",
      "readme_content": "# Mifos MCP - Model Context Protocol (MCP) \n\nThis project provides Model Context Protocol (MCP) for the Mifos X Ecosystem, enabling AI agents to access financial data and operations. Implementations is available in **Java (Quarkus)**.\n\n---\n\n## MCP Developer Tools\n\nUse the **MCP Inspector** to test and debug your server:\n\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\nThis starts a local web UI to connect to your MCP server via STDIO or SSE.\n\n---\n\n## Getting Started\n\n### 1. Choose Your Implementation\n\n#### **Java (Quarkus)**\n**Prerequisites**: JDK 21+, Maven\n\n**Steps**:\n1. Configure environment variables in your shell or IDE:\n   ```bash\n   export MIFOSX_BASE_URL=\"https://your-fineract-instance\"\n   export MIFOSX_BASIC_AUTH_TOKEN=\"your_api_token\"\n   export MIFOS_TENANT_ID=\"default\"\n   ```\n2. Run via JBang (for quick execution):\n   ```bash\n   jbang --quiet org.mifos.community.ai:mcp-server:1.0.0-SNAPSHOT:runner\n   ```\n3. (Optional) Build a native executable:\n   ```bash\n   ./mvnw package -Dnative\n   ./target/mcp-server-1.0.0-SNAPSHOT-runner\n   ```\n\n---\n\n## Configuration\n\nAll implementations require the following environment variables:\n\n| Variable               | Description                          |\n|------------------------|--------------------------------------|\n| `FINERACT_BASE_URL`    | Base URL of your Fineract instance   |\n| `FINERACT_BASIC_AUTH_TOKEN` | API authentication token |\n| `FINERACT_TENANT_ID`   | Tenant identifier (default: `default`) |\n\n**Note**: Java uses `MIFOSX_` prefixed variables (e.g., `MIFOSX_BASE_URL`).\n\n---\n\n## Building Native Executables (Java Only)\n\nFor Java (Quarkus), create a native executable:\n```bash\n./mvnw package -Dnative -Dquarkus.native.container-build=true\n./target/mcp-server-1.0.0-SNAPSHOT-runner\n```\n\n---\n\n## Testing with MCP Inspector\n\n1. Start your MCP server (Python/Java/Node.js).\n2. Run the inspector:\n   ```bash\n   npx @modelcontextprotocol/inspector\n   ```\n3. Connect to the server using the `STDIO` transport.\n\n---\n\n## Examples - Backoffice Agent\n\n| Video URL | Title | Prompt |\n| :--- | :--- | :--- |\n| https://youtu.be/MDQKRoz5GKw?si=69X77C58nFhy6Ioh | Join and Try the Mifos MCP. Go to https://ai.mifos.community | N/A |\n| https://youtu.be/y5MR3j8EGM4?si=zXTurBNql4xF5CGY | Create Client | Create the client using first name: OCTAVIO, last name: PAZ, email address: octaviopaz@mifos.org, mobile number: 5518098299 and external id: OCPZ99 |\n| https://youtu.be/qJsC25cd-1g?si=qQzX8DeOe0_2qhfr | Activate Client   | Activate the client OCTAVIO PAZ |\n| https://youtu.be/X1g_nVDsRnM?si=K7vsAN7gOLEC2OG0 | Add Address to Client   | Add the address to the client OCTAVIO PAZ. Fields: address type: HOME, address: PLAZA DE LORETO, neighborhood: DOCTOR ALFONZO, number: NUMBER 10, city: CDMX, country: MÉXICO, postal code: 54440, state province: CDMX. |\n| https://youtu.be/xeL9_sycwA8?si=AtV6F4WhTvcDspSp | Add Personal Reference to Client   | Add the family member to the client OCTAVIO PAZ. First name: Maria, middle name: Elena, last name: Ramírez, age: 27, relationship: Sister, gender: FEMALE, date of birth: 15 March 1998, qualification: Bachelor’s Degree, is dependent, profession: STUDENT, marital status: SINGLE. |\n| https://youtu.be/IKGMeAJBAOk?si=N27rE64dn7qxmMBk | Create a Loan Product   | Create a default loan product named \"SILVER\" with short name \"ST01\", principal 10000, 5 repayments, nominal interest rate 10.0%, repayment frequency 2 MONTHS, currency USD. |\n| https://youtu.be/5EdgUyLyP0w?si=L0UdYjXlyYF6faL5 | Create Loan Application   | Apply for an individual loan account for the client OCTAVIO PAZ using loan product SILVER. |\n| https://youtu.be/2ioN_8z_uaY?si=ZTB5rCrgS2jTpC4- | Approve Loan Application   | Approve the loan account  |\n| https://youtu.be/dDebmrn4lB0?si=0GTf4asCBHnsu27f | Disbursement of Loan   | Disburse the loan account using payment type Money Transfer. |\n| https://youtu.be/N3wnyJCh_Ik?si=gSy5LrJdFF2kfzHd | Make Loan Repayment   | Make a repayment for loan account 6 using Money Transfer. Set the amount to 6687.59, the date to 06 AUGUST 2025, and use external ID RT33. Add the note “FYI” and include payment account number 100, check number 101, routing code 102, receipt number 103, and bank number 1 |\n| https://youtu.be/bOuTj97hyqU?si=9bpno4Kp0II1IfPY | Create Savings Product   |  Create a default savings product with the name \"WALLET\", short name \"TSWL\", description \"WALLET PRODUCT\", and currency code \"USD\". |\n| https://youtu.be/l-Z7LlE3AnM?si=yQM4lloJL8Hu6yv8 | Create a Savings Account Application   | Apply for a savings account for the client OCTAVIO PAZ using savings product WALLET and external ID STP1. |\n| https://youtu.be/Q5ExlhalG8U?si=TwbsUZX30G3JeNJy | Approve Savings Application   | Approve the savings account and include the note: \"MY FIRST APPROVAL\". |\n| https://youtu.be/DJgUiRYK-rE?si=YatfVgOgpbP4wV91 | Activate Savings Account   | Activate the savings account |\n| https://youtu.be/Od7KFqktUtI?si=gPJNlLOB_7D74QdS | Make a Deposit Transaction   | Create a savings transaction for client with the account number 1. It's a DEPOSIT of 5000 using Money Transfer. The note should be \"Monthly saving\". |\n| https://youtu.be/9OL6N5wKG7c?si=R50RjTK6GI_ODuUs | Make a Withdrawal Transaction   | Create a savings transaction for client with the account number 1. It's a WITHDRAWAL of 2000 using Money Transfer. Add the note \"Emergency expense\". |\n\n---\n\n## Contact\n\n- Mifos Community: https://mifos.org\n- Mifos MCP (Docker): https://hub.docker.com/r/openmf/mifos-mcp\n- Chabot (Use the Groq provider and select the Mifos MCP): https://ai.mifos.community\n---\n\n### Key Features:\n- **MCP-compliant** with STDIO/SSE transports\n- **Environment-agnostic** configuration\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openmf",
        "fintech",
        "finance",
        "fintech openmf",
        "openmf mcp",
        "mcp mifosx"
      ],
      "category": "finance--fintech"
    },
    "polygon-io--mcp_polygon": {
      "owner": "polygon-io",
      "name": "mcp_polygon",
      "url": "https://github.com/polygon-io/mcp_polygon",
      "imageUrl": "",
      "description": "An MCP server that provides access to [Polygon.io](https://polygon.io/) financial market data APIs for stocks, indices, forex, options, and more.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "fintech",
        "mcp_polygon",
        "polygon",
        "fintech polygon",
        "io mcp_polygon",
        "finance fintech"
      ],
      "category": "finance--fintech"
    },
    "pwh-pwh--coin-mcp-server": {
      "owner": "pwh-pwh",
      "name": "coin-mcp-server",
      "url": "https://github.com/pwh-pwh/coin-mcp-server",
      "imageUrl": "",
      "description": "Bitget API to fetch cryptocurrency price.",
      "stars": 25,
      "forks": 11,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-16T10:37:22Z",
      "readme_content": "# Coin MCP Server 🚀💰\n\nWelcome to the **Coin MCP Server** – your one-stop shop for snagging the latest cryptocurrency prices faster than you can say \"To the moon!\" 🌙 Built with `FastMCP` and spiced up with `zod` for validation, this little server is here to fetch token prices from Bitget’s API like a trusty crypto butler. 🧑‍💼\n\n[中文文档](README-cn.md) | English\n\n---\n\n## What Does It Do? 🤔\n\nThis project spins up a server that lets you query the current price of any cryptocurrency (paired with USDT) using Bitget’s slick API. Want to know how much your favorite token is worth right now? Just ask, and boom – the price is yours! 💸\n\n- **Tool**: `getTokenPrice`\n- **Mission**: Fetch the latest price of a token (e.g., `BGB`, `BTC`, `ETH`).\n- **Superpower**: It’s fast, it’s simple, and it’s powered by `FastMCP`! ⚡\n\n- **Tool**: `getAnnoucements`\n- **Mission**: get annoucements\n\n- **Tool**: `getCoinInfo`\n- **Mission**: Get detailed information about a specified token.\n- **Superpower**: Provides detailed information such as token transferability, supported chain list, chain network status, etc.\n\n---\n\n## Features 🌟\n\n- 🎯 **Dead-Simple API**: Pass a token symbol, get a price. No fuss, no muss.\n- 🛡️ **Zod Validation**: Parameters are checked tighter than a vault door.\n- 📡 **Bitget Integration**: Pulls live data straight from Bitget’s market ticker API.\n- 🧠 **Error Handling**: Catches hiccups like a pro and logs them for you to giggle at later.\n\n---\n\n## Getting Started 🏁\n\nReady to dive into the crypto price pool? Here’s how to get this baby running:\n\n### Prerequisites\n- **Deno**: You’ll need Deno installed because we’re fancy and modern. Grab it [here](https://deno.land/).\n- **Bitget API Access**: No API key needed – we’re hitting the public endpoint like champs! But if you’ve got a custom `BGURL`, set it as an environment variable.\n\n### Installation\n1. Clone this repo like it’s hot:\n   ```bash\n   git clone https://github.com/pwh-pwh/coin-mcp-server.git\n   cd coin-mcp-server\n   ```\n2. Install dependencies (Deno handles this automagically via imports!).\n\n### Running the Server\nFire it up with:\n```bash\ndeno run --allow-net --allow-env --allow-read main.ts\n```\n\nor\n```bash\ndeno run --allow-net --allow-env --allow-read https://deno.land/x/coin_mcp_server/main.ts\n```\n\n- `--allow-net`: Lets us talk to Bitget’s API.\n- `--allow-env`: Grabs your `BGURL` env variable if you’ve set one.\n\nThe server will start in `stdio` mode, ready to serve up prices like a crypto vending machine! 🍔\n\n3. Support installation-free, directly deploy to deno, fork this project, log in dash.deno.com, set the environment variable StartType=sse to use the domain name provided by deno to connect in sse mode\n\n---\n\n### Configuration\n\nconfig.json\n```json\n{\n  \"mcpServers\": {\n    \"coin-mcp\": {\n      \"command\": \"deno\",\n      \"args\": [\n        \"run\",\n        \"--allow-net\",\n        \"--allow-read\",\n        \"--allow-env\",\n        \"https://deno.land/x/coin_mcp_server/main.ts\"\n      ]\n    }\n  }\n}\n```\n\n## Usage Example 🎮\n\nHere’s how you’d call `getTokenPrice`:\n```json\n{\n  \"tool\": \"getTokenPrice\",\n  \"parameters\": {\n    \"token\": \"BGB\"\n  }\n}\n```\n\n**Response**:\n```\n\"42.069\"  // The latest BGB/USDT price (not a real price, just vibes!)\n```\n\nIf the token doesn’t exist or the API hiccups, it’ll throw an error with a cheeky log to remind you it tried its best. 😅\n\n---\n\n## Code Sneak Peek 👀\n\nHere’s the magic behind the curtain:\n- **FastMCP**: Spins up the server with a cool name and version.\n- **Zod**: Keeps your `token` parameter in check.\n- **Bitget API**: Fetches ticker data from `https://api.bitget.com/api/v2/spot/market/tickers`.\n\nThe `getBitgetPrice` function is the MVP, grabbing that sweet `lastPr` (last price) from the response. Check the logs for price updates or error comedy gold! 😂\n\n---\n\n## Environment Variables 🌍\n\n- `BGURL`: Custom Bitget API base URL (defaults to `https://api.bitget.com` if not set). Set it like:\n  ```bash\n  export BGURL=\"https://your-custom-bitget-url.com\"\n  ```\n\n---\n\n## Troubleshooting 🛠️\n\n- **“HTTP error! status: 404”**: Double-check your token symbol. `BGBUSDT` isn’t the same as `BGB`!\n- **“Network error”**: Make sure you’ve got internet and Deno’s `--allow-net` flag.\n- **Still stuck?**: Yell into the void (or open an issue). We’ll figure it out together! 🙌\n\n---\n\n## Why This Exists 🎉\n\nBecause who doesn’t want to know the price of their crypto stash in real-time? Whether you’re a trader, a HODLer, or just crypto-curious, this server’s got your back. Plus, it’s a fun way to flex some Deno skills and play with APIs. 😎\n\n---\n\n## Contributing 🤝\n\nGot ideas? Found a bug? Want to add a feature like moon phase price predictions? Fork it, tweak it, PR it! Let’s make this the coolest MCP server in the galaxy. 🌌\n\n---\n\n## License 📜\n\nMIT – Do whatever you want with it, just don’t blame me if your token moons or dumps! 🌑📉\n\n---\n\nHappy crypto hunting, and may your bags always be green! 💚\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cryptocurrency",
        "finance",
        "coin",
        "fetch cryptocurrency",
        "pwh coin",
        "fintech pwh"
      ],
      "category": "finance--fintech"
    },
    "shareseer--shareseer-mcp-server": {
      "owner": "shareseer",
      "name": "shareseer-mcp-server",
      "url": "https://github.com/shareseer/shareseer-mcp-server",
      "imageUrl": "",
      "description": "MCP to Access SEC filings, financials & insider trading data in real time using [ShareSeer](https://shareseer.com)",
      "stars": 6,
      "forks": 3,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-10-02T11:39:56Z",
      "readme_content": "# ShareSeer MCP Server\n\nA Model Context Protocol (MCP) server that provides access to ShareSeer's comprehensive SEC filings, insider transactions, and financial data through Claude and other MCP-compatible AI assistants.\n\n## 🚀 Quick Start\n\n### Get Your API Key\n\n1. Sign up at [shareseer.com/signup](https://shareseer.com/signup) (free account)\n2. Go to your [profile page](https://shareseer.com/profile)\n3. Your API key will be displayed (starts with `sk-shareseer-`)\n\n### Claude Desktop Integration\n\n**Remote MCP Server (Recommended)**\n\nAdd to your Claude Desktop configuration:\n\n**Search & Tools →Add Integrations → Add Integration URL:**\n```\nhttps://shareseer.com/mcp?api_key=YOUR_API_KEY_HERE\n```\n\n\n## 📊 Available Tools\n\n### Company Information\n- **`get_company_filings`** - Get recent SEC filings for a specific company\n- **`get_insider_transactions`** - Get insider trading transactions for a company\n\n### Market-Wide Data\n- **`get_recent_filings`** - Get recent SEC filings across all companies\n- **`get_recent_insider_activity`** - Get recent insider trading activity\n\n### Largest Transactions\n- **`get_largest_daily_transactions`** - Get largest daily insider transactions\n- **`get_largest_weekly_transactions`** - Get largest weekly insider transactions\n\n## 💎 Subscription Tiers\n\n| Feature | Free | Premium ($14.99/mo) |\n|---------|------|---------------------|\n| **Rate Limits** | 10/hour, 50/day | 100/hour, 1K/day |\n| **Data History** | 6 months | 10 years |\n| **Company Data** | ✅ Basic info & filings | ✅ All features |\n| **Insider Transactions** | ✅ Limited (3 results) | ✅ Unlimited |\n| **Largest Transactions** | ✅ Current week only | ✅ Historical data |\n| **Pagination** | ❌ | ✅ |\n| **Support** | Community | Email |\n\n[**Sign Up Free**](https://shareseer.com/signup) | [**Upgrade to Premium**](https://shareseer.com/upgrade?source=mcp)\n\n## 🔧 Usage Examples\n\n\n### Get Recent Insider Transactions  \nAsk Claude: *\"Show me recent insider trading for Tesla\"*\n\n### Get Largest Daily Buyers\nAsk Claude: *\"Who made the biggest stock purchases today?\"*\n\n### Get Recent SEC Filings\nAsk Claude: *\"What are the most recent 10-K filings?\"*\n\n### Market Analysis\nAsk Claude: *\"Show me the largest insider selling activity this week\"*\nAsk Claude: *\"Show me the largest insider buying activity this week\"*\n\n## 🌐 Remote vs Local Setup\n\n**✅ Remote MCP (Recommended)**\n- No installation required\n- Always up-to-date\n- Hosted by ShareSeer\n- Just add the integration URL\n\n\n\n### Common Issues\n\n**Claude Desktop doesn't show ShareSeer tools:**\n- Verify your API key is correct and active\n- Make sure the integration URL includes your API key\n- Restart Claude Desktop after adding the integration\n- Check that your ShareSeer account is active\n\n**\"Rate limit exceeded\" error:**\n- Check your current subscription tier limits  \n- Wait for the rate limit window to reset\n- Consider upgrading to Premium for higher limits\n- Spread out your queries over time\n\n**\"Invalid API key\" error:**\n- Verify your API key starts with `sk-shareseer-`\n- Check that your ShareSeer account is active\n- Get a fresh API key from your profile page\n\n### Getting Help\n\n- **Free users**: [GitHub Issues](https://github.com/shareseer/mcp-server/issues)\n- **Premium users**: Email support@shareseer.com\n- **Documentation**: [ShareSeer Claude Integration](https://shareseer.com/claude-integration)\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 🙏 Support\n\nLove the ShareSeer MCP server? Here's how you can help:\n\n- ⭐ **Star this repo** on GitHub\n- 🐛 **Report bugs** via GitHub Issues  \n- 💡 **Request features** via GitHub Discussions\n- 📢 **Share** with other developers and traders\n- 💎 **Upgrade to Premium** to support continued development\n\n---\n\n**Built with ❤️  by the ShareSeer team**\n\n[Website](https://shareseer.com) • [X](https://x.com/shareseer) • [Email](mailto:contact@shareseer.com)\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "shareseer",
        "fintech",
        "finance",
        "fintech shareseer",
        "shareseer mcp",
        "using shareseer"
      ],
      "category": "finance--fintech"
    },
    "tatumio--blockchain-mcp": {
      "owner": "tatumio",
      "name": "blockchain-mcp",
      "url": "https://github.com/tatumio/blockchain-mcp",
      "imageUrl": "",
      "description": "MCP server for Blockchain Data. It provides access to Tatum's blockchain API across 130+ networks with tools including RPC Gateway and Blockchain Data insights.",
      "stars": 12,
      "forks": 8,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T20:06:54Z",
      "readme_content": "# Blockchain MCP powered by Tatum\n\n[![MCP](https://img.shields.io/badge/MCP-Model%20Context%20Protocol-blue)](https://modelcontextprotocol.io)\n[![TypeScript](https://img.shields.io/badge/TypeScript-007ACC?logo=typescript&logoColor=white)](https://www.typescriptlang.org/)\n[![NPM Version](https://img.shields.io/npm/v/%40tatumio%2Fblockchain-mcp)](https://www.npmjs.com/package/@tatumio/blockchain-mcp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol (MCP) server that provides access to the Tatum Blockchain Data API and RPC Gateway, enabling any LLM to read and write blockchain data across **130+ networks**. Visit [official MCP webpage](https://tatum.io/mcp) for more details and to get your Tatum API key. \n\n[![Install MCP Server](https://cursor.com/deeplink/mcp-install-dark.svg)](https://cursor.com/en/install-mcp?name=tatumio&config=eyJjb21tYW5kIjoibnB4IEB0YXR1bWlvL2Jsb2NrY2hhaW4tbWNwIiwiZW52Ijp7IlRBVFVNX0FQSV9LRVkiOiJZT1VSX0FQSV9LRVkifX0%3D)\n\n## 🚀 Features\n\n- **130+ Blockchain Networks**: Bitcoin, Ethereum, Solana, Polygon, Arbitrum, Base, Avalanche, and many more.\n- 🔗 **Blockchain Data API**: Blocks, transactions, balances, network info, and more. \n- 🌐 **RPC Gateway**: Direct access to blockchain RPC endpoints. \n\n## 📦 Installation\n\n### Global Installation (Recommended)\n\n```bash\nnpm install -g @tatumio/blockchain-mcp\n```\n\n### Local Installation\n\n```bash\nnpm install @tatumio/blockchain-mcp\n```\n\n## 🔑 Getting Started\n\n### 1. Get Your API Key\n\nGet your free API key from [Tatum Dashboard](https://dashboard.tatum.io).\n\n### 2. MCP Client Integration\n\nAdd this server to your MCP client configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"tatumio\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@tatumio/blockchain-mcp\"\n      ],\n      \"env\": {\n        \"TATUM_API_KEY\": \"YOUR_API_KEY\"\n      }\n    }\n  }\n}\n```\n\n## 🛠️ Available Tools\n\n### Blockchain Data (10 tools)\n\n- **get_metadata** - Fetch NFT/multitoken metadata by address and IDs\n- **get_wallet_balance_by_time** - Get wallet balance at specific time\n- **get_wallet_portfolio** - Get comprehensive wallet portfolio\n- **get_owners** - Get owners of NFT/token\n- **check_owner** - Check if address owns specific token\n- **get_transaction_history** - Get transaction history for address\n- **get_block_by_time** - Get block information by timestamp\n- **get_tokens** - Get tokens for specific wallet\n- **check_malicous_address** - Check if address is malicious\n- **get_exchange_rate** - Get real-time exchange rates\n\n### RPC Gateways (4 tools)\n\n- **gateway_get_supported_chains** - Get all supported blockchain networks\n- **gateway_get_supported_methods** - Get supported RPC methods for chain\n- **gateway_execute_rpc** - Execute RPC calls on any supported chain\n\n## 🌐 Supported Networks\n\n### EVM-Compatible (69 networks)\n\n- **Ethereum**: Mainnet, Sepolia, Holesky\n- **Layer 2**: Polygon, Arbitrum, Optimism, Base\n- **Sidechains**: BSC, Avalanche, Fantom\n- **Enterprise**: Celo, Palm, Gnosis\n- **Gaming**: Ronin, Chiliz\n\n### Non-EVM (61 networks)\n\n- **Bitcoin**: Mainnet, Testnet, Signet\n- **Alternative Coins**: Litecoin, Dogecoin, Bitcoin Cash\n- **Smart Contract Platforms**: Solana, Cardano, Tezos\n- **Enterprise**: Stellar, Ripple, EOS\n\n## 📖 Documentation\n\n- [Tatum API Documentation](https://docs.tatum.io)\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [Blockchain Networks](https://docs.tatum.io/docs/supported-blockchains)\n- [API Reference](https://docs.tatum.io/reference)\n\n\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n## 🏢 About Tatum\n\nTatum is a blockchain development platform that provides APIs, SDKs, and tools for building blockchain applications. Learn more at [tatum.io](https://tatum.io).\n\n---\n\n**Made with ❤️ by the Tatum team**\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "rpc",
        "fintech",
        "blockchain mcp",
        "tatumio blockchain",
        "mcp server"
      ],
      "category": "finance--fintech"
    },
    "tooyipjee--yahoofinance-mcp": {
      "owner": "tooyipjee",
      "name": "yahoofinance-mcp",
      "url": "https://github.com/tooyipjee/yahoofinance-mcp.git",
      "imageUrl": "",
      "description": "TS version of yahoo finance mcp.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "finance",
        "fintech",
        "yahoofinance",
        "fintech tooyipjee",
        "finance fintech",
        "yahoofinance mcp"
      ],
      "category": "finance--fintech"
    },
    "twelvedata--mcp": {
      "owner": "twelvedata",
      "name": "mcp",
      "url": "https://github.com/twelvedata/mcp",
      "imageUrl": "",
      "description": "Interact with [Twelve Data](https://twelvedata.com) APIs to access real-time and historical financial market data for your AI agents.",
      "stars": 34,
      "forks": 10,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T20:21:05Z",
      "readme_content": "# Twelve Data MCP Server\n\n## Overview\n\nThe Twelve Data MCP Server provides a seamless integration with the Twelve Data API to access financial market data. It enables retrieval of historical time series, real-time quotes, and instrument metadata for stocks, forex pairs, and cryptocurrencies.\n\n> Note: This server is currently in early-stage development; features and tools may evolve alongside updates to the Twelve Data API.\n\n## Obtaining Your API Key\n\nTo use Twelve Data MCP Server, you must first obtain an API key from Twelve Data:\n\n1. Visit [Twelve Data Sign Up](https://twelvedata.com/register?utm_source=github&utm_medium=repository&utm_campaign=mcp_repo).\n2. Create an account or log in if you already have one.\n3. Navigate to your Dashboard and copy your API key.\n\nImportant: Access to specific endpoints or markets may vary depending on your Twelve Data subscription plan.\n\n## U-tool\nu-tool is an AI-powered universal router for the Twelve Data API that transforms how you access financial data. Instead of navigating 100+ individual endpoints and complex documentation, simply describe what you need in plain English.\n\nHow it works:\n🧠 Natural Language Processing: Understands your request in conversational English\n🔍 Smart Routing: Uses vector search to find the most relevant endpoints from Twelve Data's entire API catalog\n🎯 Intelligent Selection: Leverages OpenAI GPT-4o to choose the optimal method and generate correct parameters\n⚡ Automatic Execution: Calls the appropriate endpoint and returns formatted results\n\nWhat you can ask:\n📈 \"Show me Apple stock performance this week\"\n📊 \"Calculate RSI for Bitcoin with 14-day period\" \n💰 \"Get Tesla's financial ratios and balance sheet\"\n🌍 \"Compare EUR/USD exchange rates over 6 months\"\n🏦 \"Find top-performing tech ETFs\"\n\nSupported data categories:\n- Market data & quotes • Technical indicators (100+)\n- Fundamental data & financials • Currencies & crypto\n- Mutual funds & ETFs • Economic calendars & events\n\nOne tool, entire Twelve Data ecosystem. No API documentation required.\n\n## Installation\n\n### Using **UV** (recommended)\n\nDirectly run without local installation using [`uvx`](https://docs.astral.sh/uv/guides/tools/):\n\n```bash\nuvx mcp-server-twelve-data --help\n```\n\n### Using **pip**\n\nInstall the server via pip:\n\n```bash\npip install mcp-server-twelve-data\npython -m mcp_server_twelve_data --help\n```\n\n## Configuration\n\n### Claude Desktop integration\n\nAdd one of the following snippets to your `claude_desktop_config.json`:\n(1) local stdio server configured with utool\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-twelve-data@latest\", \"-k\", \"YOUR_TWELVE_DATA_API_KEY\", \"-u\", \"YOUR_OPEN_AI_APIKEY\"]\n    }\n  }\n}\n```\n\n(2) local stdio server only with 10 the most popular endpoints\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-twelve-data@latest\", \"-k\", \"YOUR_TWELVE_DATA_API_KEY\", \"-n\", \"10\"]\n    }\n  }\n}\n```\n\n(3) twelve data remote mcp server\n\n```json\n{\n  \"mcpServers\": {\n    \"twelvedata-remote\": {\n      \"command\": \"npx\",\n      \"args\":    [\n        \"mcp-remote\", \"https://mcp.twelvedata.com/mcp\",\n        \"--header\",\n        \"Authorization:${AUTH_HEADER}\",\n        \"--header\",\n        \"X-OpenAPI-Key:${OPENAI_API_KEY}\"\n      ],\n      \"env\": {\n        \"AUTH_HEADER\": \"apikey YOUR_TWELVE_DATA_API_KEY\",\n        \"OPENAI_API_KEY\": \"YOUR_OPENAI_API_KEY\"\n      }\n    }\n  }\n}\n```\n\nSee how easy it is to connect Claude Desktop to Twelve Data MCP Server:\n\n\n\n### VS Code integration\n\n#### Automatic setup (with UV)\n\n[![Install with UV in VS Code](https://img.shields.io/badge/VS_Code-UV-0098FF?style=flat-square&logo=visualstudiocode&logoColor=white)](https://insiders.vscode.dev/redirect/mcp/install?name=twelvedata&config=%7B%22command%22%3A%22uvx%22%2C%22args%22%3A%5B%22mcp-server-twelve-data%22%2C%22-k%22%2C%22YOUR_TWELVE_DATA_API_KEY%22%2C%22-u%22%2C%22YOUR_OPENAI_API_KEY%22%5D%7D)\n\n#### Manual setup\n\nFor manual configuration, add to your **User Settings (JSON)**:\n\n```json\n{\n  \"mcp\": {\n    \"servers\": {\n      \"twelvedata\": {\n          \"command\": \"uvx\",\n          \"args\": [\n            \"mcp-server-twelve-data\",\n            \"-k\", \"YOUR_TWELVE_DATA_API_KEY\",\n            \"-u\", \"YOUR_OPENAI_API_KEY\"\n          ]\n        }\n    }\n  }\n}\n```\n\n## Debugging\n\nUse the MCP Inspector for troubleshooting:\n\n```bash\nnpx @modelcontextprotocol/inspector uvx mcp-server-twelve-data@latest -k YOUR_TWELVE_DATA_API_KEY\n```\n\n## Development guide\n\n1. **Local testing:** Utilize the MCP Inspector as described in **Debugging**.\n2. **Claude Desktop:**: Update `claude_desktop_config.json` to reference local source paths.\n\n## Docker usage\n\nBuild and run the server using Docker:\n\n```bash\ndocker build -t mcp-server-twelve-data .\n\ndocker run --rm mcp-server-twelve-data \\\n  -k YOUR_TWELVE_DATA_API_KEY \\\n  -u YOUR_OPENAI_API_KEY \\\n  -t streamable-http\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. See the [LICENSE](../../LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "finance",
        "fintech",
        "financial",
        "fintech twelvedata",
        "finance fintech",
        "market data"
      ],
      "category": "finance--fintech"
    },
    "wowinter13--solscan-mcp": {
      "owner": "wowinter13",
      "name": "solscan-mcp",
      "url": "https://github.com/wowinter13/solscan-mcp",
      "imageUrl": "",
      "description": "An MCP tool for querying Solana transactions using natural language with Solscan API.",
      "stars": 31,
      "forks": 12,
      "license": "No License",
      "language": "Rust",
      "updated_at": "2025-10-03T13:16:31Z",
      "readme_content": "# 🟣🔎 solscan-mcp: A Solscan API MCP Server in Rust\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/wowinter13/solscan-mcp)](https://archestra.ai/mcp-catalog/wowinter13__solscan-mcp)\n\n## Overview\n\nA Model Context Protocol (MCP) server for interacting with the Solscan Pro API for Solana blockchain data. This server provides tools to query token information, account activities, and transaction details on the Solana blockchain via Large Language Models.\n\n\n## Examples\n\nSimple prompts: \n\n\nhttps://github.com/user-attachments/assets/2f2586b2-ed9d-4d4d-bda4-0154b9b98cde\n\n\n\n\n_You can also use it for much more complex queries, like analyzing criminal activity combining multiple MCPs and correct context._\n\n_For example, upload a csv list of suspected addresses, then using perplexity-mcp research tool LLM will add info to context window on how investigators define criminal wallets based on their activity (mev, dusting, poisoning, sandwiched, etc) -> solscan-mcp will use this context to investigate the wallets and provide a report._\n\n\n## Features\n\nFor detailed documentation of all available tools, see [TOOLS.md](TOOLS.md).\n\n## Installation\n\nPrerequisites:\n- Rust toolchain (install via [rustup](https://rustup.rs/)) – for regular usage\n- Docker – for Docker usage\n- Solscan Pro API key. You can obtain one from [Solscan APIs](https://solscan.io/apis).\n\n### Regular\n\n```bash\ncargo install solscan-mcp\n\nwhere solscan-mcp # -> /Users/$username/.cargo/bin/solscan-mcp\n```\n\nAdd the following to your `claude_desktop_config.json` or `claude_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"solscan-mcp\": {\n      \"command\": \"/Users/$username/.cargo/bin/solscan-mcp\",\n      \"args\": [],\n      \"env\": {\n        \"SOLSCAN_API_KEY\": \"your_solscan_api_key\"\n      }\n    }\n  }\n}\n```\n\n### Docker\n\nWIP, will be available soon.\n\n\n\n## Code quality Notes\n\nI treat MCPs like useful scripts, as the structure of the APIs they rely on can always change. So, api.rs could definitely be split into multiple APIs based on Solscan namespaces. My main goal was to make it work and be easy to maintain, while ensuring errors are ignored without breaking the flow (unlike many MCPs I've tested in Python/TS, which crash painfully when they don't gracefully handle simple errors).\n\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "solscan",
        "solana",
        "querying",
        "solscan mcp",
        "querying solana",
        "solscan api"
      ],
      "category": "finance--fintech"
    },
    "zolo-ryan--MarketAuxMcpServer": {
      "owner": "zolo-ryan",
      "name": "MarketAuxMcpServer",
      "url": "https://github.com/Zolo-Ryan/MarketAuxMcpServer",
      "imageUrl": "",
      "description": "MCP server for comprehensive market and financial news search with advanced filtering by symbols, industries, countries, and date ranges.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T11:40:10Z",
      "readme_content": "# Marketaux MCP Server\nA MCP Server Implementation that integrates the [Marketaux api](https://www.marketaux.com/documentation) providing search based on entity, countries, industries, symbols etc.\n\n### Tools\n\n- market_aux_news_search\n    - Execute the search using market aux search all api\n    - inputs:\n      - symbols\n      - entity_types\n      - industries\n      - countries\n      - language\n      - published_before\n      - published_after\n      - published_on\n\n\n### Configuration\n#### Getting an API key\n\n1. Sign up for a [Free account on Marketaux](https://www.marketaux.com/register)\n2. Verify your email account and go to dashboard\n3. Get your api token from there\n\n#### Setting up MCP server\n\nAdd this in your `claude_desktop_config.json` file\n\n```json\n{\n    \"mcpServers\": {\n        \"newsmcp\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"C:\\\\Path\\\\To\\\\Your\\\\project\\\\NewsMCP\\\\build\\\\index.js\"\n            ],\n            \"env\": {\n                \"MARKETAUX_API_KEY\": \"Your-API-TOKEN\"\n            }\n        }\n    }\n}\n```\n\n### Contributing\n\nContributions are welcomed! Please free to submit a PR.\n\n> Only the Free Tier endpoint is implemented.\n\n> Added to [awesome-mcp-servers](https://github.com/punkpeye/awesome-mcp-servers/pull/925)\n### Disclaimer\n\nThis is not officially associated with Marketaux api. It is a third party implementation of the api with a MCP Server.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "marketauxmcpserver",
        "fintech",
        "market",
        "market financial",
        "financial news",
        "finance fintech"
      ],
      "category": "finance--fintech"
    }
  }
}