{
  "category": "digital-marketing",
  "categoryDisplay": "Digital Marketing",
  "description": "",
  "totalRepositories": 22,
  "repositories": {
    "Simon-Kansara--ableton-live-mcp-server": {
      "owner": "Simon-Kansara",
      "name": "ableton-live-mcp-server",
      "url": "https://github.com/Simon-Kansara/ableton-live-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Simon-Kansara.webp",
      "description": "Facilitates communication between AI models and Ableton Live through OSC messages, enabling music production automation and workflow enhancement. Maps OSC addresses to available tools for MCP clients.",
      "stars": 328,
      "forks": 45,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T16:09:04Z",
      "readme_content": "# Ableton Live MCP Server\n\n## üìå Overview\n\nThe **Ableton Live MCP Server** is a server implementing the\n[Model Context Protocol (MCP)](https://modelcontextprotocol.io) to facilitate\ncommunication between LLMs and **Ableton Live**. It uses **OSC (Open Sound\nControl)** to send and receive messages to/from Ableton Live. It is based on\n[AbletonOSC](https://github.com/ideoforms/AbletonOSC) implementation and\nexhaustively maps available OSC adresses to\n[**tools**](https://modelcontextprotocol.io/docs/concepts/tools) accessible to\nMCP clients.\n\n[![Control Ableton Live with LLMs](https://img.youtube.com/vi/12MzsQ3V7cs/hqdefault.jpg)](https://www.youtube.com/watch?v=12MzsQ3V7cs)\n\nThis project consists of two main components:\n\n- `mcp_ableton_server.py`: The MCP server handling the communication between\n  clients and the OSC daemon.\n- `osc_daemon.py`: The OSC daemon responsible for relaying commands to Ableton\n  Live and processing responses.\n\n## ‚ú® Features\n\n- Provides an MCP-compatible API for controlling Ableton Live from MCP clients.\n- Uses **python-osc** for sending and receiving OSC messages.\n- Based on the OSC implementation from\n  [AbletonOSC](https://github.com/ideoforms/AbletonOSC).\n- Implements request-response handling for Ableton Live commands.\n\n## ‚ö° Installation\n\n### Requirements\n\n- Python 3.8+\n- `python-osc` (for OSC communication)\n- `fastmcp` (for MCP support)\n- `uv` (recommended Python package installer)\n- [AbletonOSC](https://github.com/ideoforms/AbletonOSC) as a control surface\n\n### Installation Steps\n\n1. Install `uv` (https://docs.astral.sh/uv/getting-started/installation):\n\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n2. Clone the repository:\n\n   ```bash\n   git clone https://github.com/your-username/mcp_ableton_server.git\n   cd mcp_ableton_server\n   ```\n\n3. Install the project and its dependencies:\n\n   ```bash\n   uv sync\n   ```\n\n4. Install AbletonOSC Follow the instructions at\n   [AbletonOSC](https://github.com/ideoforms/AbletonOSC)\n\n## üöÄ Usage\n\n### Running the OSC Daemon\n\nThe OSC daemon will handle OSC communication between the MCP server and Ableton\nLive:\n\n```bash\nuv run osc_daemon.py\n```\n\nThis will:\n\n- Listen for MCP client connections on port **65432**.\n- Forward messages to Ableton Live via OSC on port **11000**.\n- Receive OSC responses from Ableton on port **11001**.\n\n### Example Usage\n\nIn Claude desktop, ask Claude:\n\n- _Prepare a set to record a rock band_\n- _Set the input routing channel of all tracks that have \"voice\" in their name\n  to Ext. In 2_\n\n## ‚öôÔ∏è Configuration\n\nBy default, the server and daemon run on **localhost (127.0.0.1)** with the\nfollowing ports:\n\n- **MCP Server Socket:** 65432\n- **Ableton Live OSC Port (Send):** 11000\n- **Ableton Live OSC Port (Receive):** 11001\n\nTo modify these, edit the `AbletonOSCDaemon` class in `osc_daemon.py`:\n\n```python\nself.socket_host = '127.0.0.1'\nself.socket_port = 65432\nself.ableton_host = '127.0.0.1'\nself.ableton_port = 11000\nself.receive_port = 11001\n```\n\n### Claude Desktop Configuration\n\nTo use this server with Claude Desktop, you need to configure it in your Claude\nDesktop settings. The configuration file location varies by operating system:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration to your `mcpServers` section:\n\n```json\n{\n  \"mcpServers\": {\n    \"Ableton Live Controller\": {\n      \"command\": \"/path/to/your/project/.venv/bin/python\",\n      \"args\": [\"/path/to/your/project/mcp_ableton_server.py\"]\n    }\n  }\n```\n\nThis configuration ensures that:\n\n- The server runs with all dependencies properly managed\n- The project remains portable and reproducible\n\n## Contributing\n\nFeel free to submit issues, feature requests, or pull requests to improve this\nproject.\n\n## License\n\nThis project is licensed under the **MIT License**. See the `LICENSE` file for\ndetails.\n\n## Acknowledgments\n\n- [Model Context Protocol (MCP)](https://modelcontextprotocol.io)\n- [python-osc](https://github.com/attwad/python-osc) for OSC handling\n- Daniel John Jones for OSC implementation with\n  [AbletonOSC](https://github.com/ideoforms/AbletonOSC)\n- Ableton Third Party Remote Scripts\n- Julien Bayle @[Structure Void](https://structure-void.com/) for endless\n  inspirations and resources.\n\n## TODO\n\n- Explore _resources_ and _prompts_ primitives opportunities.\n- Build a standalone Ableton Live MCP client.\n\n---\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ableton",
        "osc",
        "mcp",
        "ableton live",
        "live mcp",
        "mcp server"
      ],
      "category": "digital-marketing"
    },
    "StevenROyola--ProtoLink": {
      "owner": "StevenROyola",
      "name": "ProtoLink",
      "url": "https://github.com/StevenROyola/ProtoLink",
      "imageUrl": "/freedevtools/mcp/pfp/StevenROyola.webp",
      "description": "A standardized tool wrapping framework to integrate and manage diverse tools using the MCP protocol. Supports quick implementation of tool-based use cases and offers pre-built tools for common scenarios.",
      "stars": 2,
      "forks": 4,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-01-27T13:38:59Z",
      "readme_content": "\n# ProtoLinkAI üöÄ \n\n**ProtoLink AI** is a standardized **tool wrapping framework** for implementing and managing diverse tools in a unified way. It is designed to help developers quickly integrate and launch tool-based use cases.\n\n### Key Features\n- üîß **Standardized Wrapping**: Provides an abstraction layer for building tools using the MCP protocol.\n- üöÄ **Flexible Use Cases**: Easily add or remove tools to fit your specific requirements.\n- ‚ú® **Out-of-the-Box Tools**: Includes pre-built tools for common scenarios:\n  - üê¶ **Twitter Management**: Automate tweeting, replying, and managing Twitter interactions.\n  - üí∏ Crypto: Get the latest cryptocurrency prices.\n  - ü§ñ [ElizaOS](https://github.com/elizaos/eliza) Integration: Seamlessly connect and interact with ElizaOS for enhanced automation.\n  - üïë Time utilities\n  - ‚òÅÔ∏è Weather information (API)\n  - üìö Dictionary lookups\n  - üßÆ Calculator for mathematical expressions\n  - üíµ Currency exchange (API)\n  - üìà Stocks Data: Access real-time and historical stock market information.\n  - [WIP] üì∞ News: Retrieve the latest news headlines.\n\n### Tech Stack üõ†Ô∏è\n- **Python**: Core programming language\n- **[MCP](https://pypi.org/project/mcp/) Framework**: Communication protocol\n- **Docker**: Containerization\n\n#### ü§î What is MCP?\n\nThe **Model Context Protocol ([MCP](https://modelcontextprotocol.io/introduction))** is a cutting-edge standard for **context sharing and management** across AI models and systems. Think of it as the **language** AI agents use to interact seamlessly. üß†‚ú®\n\nHere‚Äôs why **MCP** matters:\n\n- üß© **Standardization**: MCP defines how context can be shared across models, enabling **interoperability**.\n- ‚ö° **Scalability**: It‚Äôs built to handle large-scale AI systems with high throughput.\n- üîí **Security**: Robust authentication and fine-grained access control.\n- üåê **Flexibility**: Works across diverse systems and AI architectures.\n\n![mcp_architecture](https://imageio.forbes.com/specials-images/imageserve/674aaa6ac3007d55b62fc2bf/MCP-Architecture/960x0.png?height=559&width=711&fit=bounds)\n[source](https://www.forbes.com/sites/janakirammsv/2024/11/30/why-anthropics-model-context-protocol-is-a-big-step-in-the-evolution-of-ai-agents/)\n---\n\n## Installation üì¶\n\n### Install via PyPI\n```bash\npip install ProtoLinkai\n```\n\n---\n\n## Usage üíª\n\n### Run Locally\n```bash\nProtoLinkai --local-timezone \"America/New_York\"\n```\n\n### Run in Docker\n1. **Build the Docker image:**\n   `docker build -t ProtoLinkai .`\n\n2. **Run the container:**\n   `docker run -i --rm ProtoLinkai`\n\n---\n\n## Twitter Integration üê¶\n\nMProtoLinkAI offers robust Twitter integration, allowing you to automate tweeting, replying, and managing Twitter interactions. This section provides detailed instructions on configuring and using the Twitter integration, both via Docker and `.env` + `scripts/run_agent.sh`.\n\n### Docker Environment Variables for Twitter Integration\n\nWhen running ProtoLinkAI within Docker, it's essential to configure environment variables for Twitter integration. These variables are divided into two categories:\n\n#### 1. Agent Node Client Credentials\nThese credentials are used by the **Node.js client** within the agent for managing Twitter interactions.\n\n```dockerfile\nENV TWITTER_USERNAME=\nENV TWITTER_PASSWORD=\nENV TWITTER_EMAIL=\n```\n\n#### 2. Tweepy (Twitter API v2) Credentials\nThese credentials are utilized by **Tweepy** for interacting with Twitter's API v2.\n\n```dockerfile\nENV TWITTER_API_KEY=\nENV TWITTER_API_SECRET=\nENV TWITTER_ACCESS_TOKEN=\nENV TWITTER_ACCESS_SECRET=\nENV TWITTER_CLIENT_ID=\nENV TWITTER_CLIENT_SECRET=\nENV TWITTER_BEARER_TOKEN=\n```\n\n### Running ProtoLinkAI with Docker\n\n1. **Build the Docker image:**\n   ```bash\n   docker build -t ProtoLinkai .\n   ```\n\n2. **Run the container:**\n   ```bash\n   docker run -i --rm ProtoLinkai\n   ```\n\n### Running ProtoLink with `.env` + `scripts/run_agent.sh`\n\n#### Setting Up Environment Variables\n\nCreate a `.env` file in the root directory of your project and add the following environment variables:\n\n```dotenv\nANTHROPIC_API_KEY=your_anthropic_api_key\nELIZA_PATH=/path/to/eliza\nTWITTER_USERNAME=your_twitter_username\nTWITTER_EMAIL=your_twitter_email\nTWITTER_PASSWORD=your_twitter_password\nPERSONALITY_CONFIG=/path/to/personality_config.json\nRUN_AGENT=True\n\n# Tweepy (Twitter API v2) Credentials\nTWITTER_API_KEY=your_twitter_api_key\nTWITTER_API_SECRET=your_twitter_api_secret\nTWITTER_ACCESS_TOKEN=your_twitter_access_token\nTWITTER_ACCESS_SECRET=your_twitter_access_secret\nTWITTER_CLIENT_ID=your_twitter_client_id\nTWITTER_CLIENT_SECRET=your_twitter_client_secret\nTWITTER_BEARER_TOKEN=your_twitter_bearer_token\n```\n\n#### Running the Agent\n\n1. **Make the script executable:**\n   ```bash\n   chmod +x scripts/run_agent.sh\n   ```\n\n2. **Run the agent:**\n   ```bash\n   bash scripts/run_agent.sh\n   ```\n\n\n### Summary\nYou can configure ProtoLink to run with Twitter integration either using Docker or by setting up environment variables in a `.env` file and running the `scripts/run_agent.sh` script.\n\nThis flexibility allows you to choose the method that best fits your deployment environment.\n\n---\n\n## ElizaOS Integration ü§ñ\n\n### **1. Directly Use Eliza Agents from ProtoLink**\nThis approach allows you to use Eliza Agents without running the Eliza Framework in the background. It simplifies the setup by embedding Eliza functionality directly within ProtoLink.\n\n**Steps:**\n\n1. **Configure ProtoLink to Use Eliza MCP Agent:**\n   In your Python code, add Eliza MCP Agent to the `MultiToolAgent`:\n    ```python\n    from ProtoLink.core.multi_tool_agent import MultiToolAgent\n    from ProtoLink.tools.eliza_mcp_agent import eliza_mcp_agent\n\n    multi_tool_agent = MultiToolAgent([\n        # ... other agents\n        eliza_mcp_agent\n    ])\n   ```\n\n**Advantages:**\n- **Simplified Setup:** No need to manage separate background processes.\n- **Easier Monitoring:** All functionalities are encapsulated within MCPAgentAI.\n- **Highlight Feature:** Emphasizes the flexibility of MCPAgentAI in integrating various tools seamlessly.\n\n\n### **2. Run Eliza Framework from ProtoLinkai**\nThis method involves running the Eliza Framework as a separate background process alongside ProtoLinkAI.\n\n**Steps:**\n\n1. **Start Eliza Framework:**\n   `bash src/ProtoLinkai/tools/eliza/scripts/run.sh`\n\n2. **Monitor Eliza Processes:**\n   `bash src/ProtoLinkai/tools/eliza/scripts/monitor.sh`\n\n3. **Configure MCPAgentAI to Use Eliza Agent:**\n   In your Python code, add Eliza Agent to the `MultiToolAgent`:\n    ```python\n   from ProtoLink.core.multi_tool_agent import MultiToolAgent\n   from ProtoLink.tools.eliza_agent import eliza_agent\n\n   multi_tool_agent = MultiToolAgent([\n       # ... other agents\n       eliza_agent\n   ])\n   ```\n---\n\n## Tutorial: Selecting Specific Tools\n\nYou can configure ProtoLink to run only certain tools by modifying the agent configuration in your server or by updating the `server.py` file to only load desired agents. For example:\n\n```python\nfrom ProtoLinkai.tools.time_agent import TimeAgent\nfrom ProtoLinkai.tools.weather_agent import WeatherAgent\nfrom ProtoLinkai.core.multi_tool_agent import MultiToolAgent\n\nmulti_tool_agent = MultiToolAgent([\n    TimeAgent(),\n    WeatherAgent()\n])\nThis setup will only enable **Time** and **Weather** tools.\n```\n---\n\n## Integration Example: Claude Desktop Configuration\n\nYou can integrate ProtoLinkAI with Claude Desktop using the following configuration (`claude_desktop_config.json`), **note that** local ElizaOS repo is optional arg:\n```json\n{\n    \"mcpServers\": {\n        \"mcpagentai\": {\n            \"command\": \"docker\",\n            \"args\": [\"run\", \"-i\", \"-v\", \"/path/to/local/eliza:/app/eliza\", \"--rm\", \"mcpagentai\"]\n        }\n    }\n}\n```\n---\n\n## Development üõ†Ô∏è\n\n1. **Clone this repository:**\n   ```bash\n   git clone https://github.com/StevenROyola/ProtoLink.git\n   cd mcpagentai\n   ```\n\n2. **(Optional) Create a virtual environment:**\n   ```bash\n   python3 -m venv .venv\n   source .venv/bin/activate\n   ```\n\n3. **Install dependencies:**\n   ```bash\n   pip install -e .\n   ```\n\n4. **Build the package:**\n   ```bash\n   python -m build\n   ```\n---\n\n---\n\n**License**: MIT  \nEnjoy! üéâ\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "protolink",
        "mcp",
        "tools",
        "protolink standardized",
        "stevenroyola protolink",
        "mcp protocol"
      ],
      "category": "digital-marketing"
    },
    "Synohara--supercollider-mcp": {
      "owner": "Synohara",
      "name": "supercollider-mcp",
      "url": "https://github.com/Synohara/supercollider-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Synohara.webp",
      "description": "Execute SuperCollider synths using the SuperCollider programming language through an MCP server interface. Integrate audio synthesis capabilities into LLM applications on macOS with Apple Silicon, facilitating sound generation workflows utilizing supercolliderjs within the MCP framework.",
      "stars": 6,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-14T12:32:10Z",
      "readme_content": "# SuperCollider MCP Server\n\nThe SuperCollider MCP Server is a [Model Context Protocol (MCP)](https://modelcontextprotocol.io/introduction) server for the SuperCollider programming language that allows to execute synth using supercolliderjs.\n\n## Prerequisites\n\n1. Install [SuperCollider](https://supercollider.github.io/downloads) on your machine.\n2. Node.js and npm should be installed on your machine. You can download it from [Node.js official website](https://nodejs.org/).\n\n## Compatibility\n\nThis project has been tested and confirmed to work only on macOS with Apple Silicon (M1) processors. Compatibility with other operating systems or processor architectures has not been verified.\n\n## Installation\n\n### Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-supercollider\": {\n      \"command\": [\n        \"npx\", \n        \"-y\",\n        \"@makotyo/mcp-supercollider\"]\n    }\n  }\n}\n```\n\n\n### Usage with VS Code\n\nAdd the following JSON block to your User Settings (JSON) file in VS Code. You can do this by pressing Ctrl + Shift + P and typing Preferences: Open User Settings (JSON).\n\nOptionally, you can add it to a file called .vscode/mcp.json in your workspace. This will allow you to share the configuration with others.\n\n> Note that the mcp key is not needed in the .vscode/mcp.json file.\n\n```json\n{\n  \"mcp\": {\n    \"servers\": {\n      \"mcp-supercollider\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@makotyo/mcp-supercollider\"\n        ]\n      }\n    }\n  }\n}\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "supercolliderjs",
        "supercollider",
        "synths",
        "supercollider synths",
        "supercolliderjs mcp",
        "supercollider mcp"
      ],
      "category": "digital-marketing"
    },
    "a1j9o94--swiss": {
      "owner": "a1j9o94",
      "name": "swiss",
      "url": "https://github.com/a1j9o94/swiss",
      "imageUrl": "/freedevtools/mcp/pfp/a1j9o94.webp",
      "description": "Swiss MCP is designed to orchestrate complex AI tasks by coordinating multiple AI tools, enabling streamlined interactions across various resources.",
      "stars": 13,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-07T15:06:13Z",
      "readme_content": "# üá®üá≠ Swiss MCP: A Swiss Army Knife for Multi-Step AI Task Orchestration üöÄ\n\nSwiss MCP is your AI-powered command center for orchestrating complex tasks with ease. Think of it as your personal AI assistant that can coordinate multiple AI tools to accomplish amazing things! üéØ\n\n---\n\n## ‚ö° Quick Start: Install and Get Running\n\n### Installation\n\n1. **Install `uv` for package management** üì¶:\n   ```bash\n   pip install uv\n   ```\n\n2. **Clone this repository** üì•:\n   ```bash\n   git clone https://github.com/your-repo/swiss-mcp.git\n   cd swiss-mcp\n   ```\n\n3. **Install Swiss MCP** üîß:\n   ```bash\n   pip install fastmcp\n   fastmcp install swiss\n   ```\n\n4. **Start your AI journey** üéâ:\n   ```bash\n   fastmcp swiss\n   ```\n\nYou're all set! Time to unleash the power of Swiss MCP! üí™\n\n---\n\n## üéÆ Mind-Blowing Examples: What Swiss MCP Can Do\n\n### Example 1: AI-Powered Content Creation Studio üé®\n\n**Assistant**: \"How can I help you create today?\"\n\n**User**: \"Create a viral social media campaign for my new product.\"\n\n**Swiss MCP**:\n1. üß† Strategic Planning:\n   - Analyzes market trends using `market-analyzer`\n   - Identifies target audience demographics\n   - Generates content ideas using multiple AI models\n\n2. üé® Content Creation:\n   - Creates eye-catching visuals with `stable-diffusion`\n   - Writes engaging copy with `content-writer`\n   - Generates video shorts with `video-generator`\n\n3. üìä Campaign Optimization:\n   - A/B tests different versions\n   - Schedules posts for optimal timing\n   - Tracks engagement metrics\n\n**Result**: A complete, ready-to-launch campaign with images, videos, and copy optimized for multiple platforms! üöÄ\n\n---\n\n### Example 2: Full-Stack App Development Assistant üë®‚Äçüíª\n\n**Assistant**: \"Let's build something amazing!\"\n\n**User**: \"Create a modern web app with AI features.\"\n\n**Swiss MCP**:\n1. üèóÔ∏è Architecture Design:\n   - Generates system architecture diagram\n   - Sets up project structure\n   - Creates CI/CD pipeline\n\n2. üîß Development:\n   - Scaffolds frontend with `react-builder`\n   - Implements backend with `api-generator`\n   - Integrates AI features using `ai-integrator`\n\n3. üöÄ Deployment:\n   - Containerizes application\n   - Sets up cloud infrastructure\n   - Deploys with monitoring\n\n**Result**: A production-ready web app with AI capabilities, complete with documentation and monitoring! üéâ\n\n---\n\n## üõ†Ô∏è Tool Library\n\nThe MCP ecosystem is constantly growing! Just ask Swiss MCP to install any tool you need, and it'll handle the rest. \n\nüîç Browse the [MCP Tool Library](https://github.com/modelcontextprotocol/servers?tab=readme-ov-file) for more amazing tools!\n\nReady to start building amazing things? Let Swiss MCP be your AI-powered companion! üöÄ‚ú®",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "mcp",
        "marketing",
        "multiple ai",
        "ai tools",
        "ai tasks"
      ],
      "category": "digital-marketing"
    },
    "ayeletstudioindia--unreal-analyzer-mcp": {
      "owner": "ayeletstudioindia",
      "name": "unreal-analyzer-mcp",
      "url": "https://github.com/ayeletstudioindia/unreal-analyzer-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ayeletstudioindia.webp",
      "description": "Provides in-depth analysis of Unreal Engine source code, focusing on class details, inheritance hierarchies, and context-aware code search capabilities.",
      "stars": 102,
      "forks": 21,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T19:06:44Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/ayeletstudioindia-unreal-analyzer-mcp-badge.png)](https://mseep.ai/app/ayeletstudioindia-unreal-analyzer-mcp)\n\n<!--\nCreated by Ayelet Technology Private Limited\n-->\n\n# Unreal Engine Code Analyzer MCP Server\n\nA Model Context Protocol (MCP) server that provides powerful source code analysis capabilities for Unreal Engine codebases. This tool enables AI assistants like Claude and Cline to deeply understand and analyze Unreal Engine source code.\n\n\n<a href=\"https://glama.ai/mcp/servers/z36022whws\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/z36022whws/badge\" alt=\"Unreal Engine Code Analyzer Server MCP server\" /></a>\n\n## Features\n\n- **Class Analysis**: Get detailed information about C++ classes including methods, properties, and inheritance\n- **Hierarchy Mapping**: Visualize and understand class inheritance hierarchies\n- **Code Search**: Search through code with context-aware results\n- **Reference Finding**: Locate all references to classes, functions, or variables\n- **Subsystem Analysis**: Analyze major Unreal Engine subsystems like Rendering, Physics, etc.\n- **Game Genre Knowledge**: Built-in knowledge base of game genres, features, and implementation patterns\n- **Pattern Detection & Learning**: Identifies common Unreal Engine patterns and provides learning resources\n- **Custom Codebase Support**: Analyze your own Unreal Engine project codebase\n\n\n## Quick Start\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/ayeletstudioindia/unreal-analyzer-mcp\ncd unreal-analyzer-mcp\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\n### For Claude Desktop App\n\nAdd the following to your Claude desktop configuration file (`%APPDATA%\\Claude\\claude_desktop_config.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"unreal-analyzer\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/unreal-analyzer/build/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n### For Cline\n\nAdd the following to your Cline MCP settings file (`%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json` on Windows):\n\n```json\n{\n  \"mcpServers\": {\n    \"unreal-analyzer\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/unreal-analyzer/build/index.js\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n## Technical Details\n\nThe analyzer is built using:\n- TypeScript for type-safe code\n- Tree-sitter for robust C++ parsing\n- Model Context Protocol SDK for AI assistant integration\n- Glob for file pattern matching\n\nKey dependencies:\n- @modelcontextprotocol/create-server: ^0.1.0\n- tree-sitter: ^0.20.1\n- tree-sitter-cpp: ^0.20.0\n- glob: ^8.1.0\n\n## Usage\n\nBefore using any analysis tools, you must first set either the Unreal Engine source path or a custom codebase path:\n\n### Setting Up Analysis\n\n#### For Unreal Engine Source Code\n```typescript\n{\n  \"name\": \"set_unreal_path\",\n  \"arguments\": {\n    \"path\": \"/path/to/UnrealEngine/Source\"\n  }\n}\n```\n\n#### For Custom C++ Codebases\n```typescript\n{\n  \"name\": \"set_custom_codebase\",\n  \"arguments\": {\n    \"path\": \"/path/to/your/codebase\"\n  }\n}\n```\n\nThe custom codebase feature allows you to analyze any C++ project. For example:\n- Game engines (Unity, Godot, custom engines)\n- Graphics libraries (OpenGL, Vulkan, DirectX)\n- Frameworks (Qt, Boost, SFML)\n- Any C++ application or library\n\nExample analyzing a custom game engine:\n```typescript\n// Initialize with custom codebase\n{\n  \"name\": \"set_custom_codebase\",\n  \"arguments\": {\n    \"path\": \"/path/to/game-engine\"\n  }\n}\n\n// Analyze engine's renderer class\n{\n  \"name\": \"analyze_class\",\n  \"arguments\": {\n    \"className\": \"Renderer\"\n  }\n}\n\n// Find all shader-related code\n{\n  \"name\": \"search_code\",\n  \"arguments\": {\n    \"query\": \"shader|glsl|hlsl\",\n    \"filePattern\": \"*.{h,cpp,hpp}\"\n  }\n}\n\n// Get render system class hierarchy\n{\n  \"name\": \"find_class_hierarchy\",\n  \"arguments\": {\n    \"className\": \"RenderSystem\",\n    \"includeImplementedInterfaces\": true\n  }\n}\n```\n\nExample analyzing a Qt application:\n```typescript\n// Initialize with Qt project\n{\n  \"name\": \"set_custom_codebase\",\n  \"arguments\": {\n    \"path\": \"/path/to/qt-app\"\n  }\n}\n\n// Find widget class definitions\n{\n  \"name\": \"search_code\",\n  \"arguments\": {\n    \"query\": \"class.*:.*public.*QWidget\",\n    \"filePattern\": \"*.h\"\n  }\n}\n\n// Analyze main window class\n{\n  \"name\": \"analyze_class\",\n  \"arguments\": {\n    \"className\": \"MainWindow\"\n  }\n}\n\n// Find signal/slot connections\n{\n  \"name\": \"find_references\",\n  \"arguments\": {\n    \"identifier\": \"connect\",\n    \"type\": \"function\"\n  }\n}\n```\n\n### Available Tools\n\n#### 1. Class Analysis\n```typescript\n// Get detailed information about the AActor class\n{\n  \"name\": \"analyze_class\",\n  \"arguments\": {\n    \"className\": \"AActor\"\n  }\n}\n```\nExample output:\n```json\n{\n  \"name\": \"AActor\",\n  \"properties\": [\n    {\n      \"name\": \"RootComponent\",\n      \"type\": \"USceneComponent*\",\n      \"access\": \"protected\"\n    }\n    // ... other properties\n  ],\n  \"methods\": [\n    {\n      \"name\": \"BeginPlay\",\n      \"returnType\": \"void\",\n      \"access\": \"protected\",\n      \"virtual\": true\n    }\n    // ... other methods\n  ]\n}\n```\n\n#### 2. Class Hierarchy Analysis\n```typescript\n// Get the inheritance hierarchy for ACharacter\n{\n  \"name\": \"find_class_hierarchy\",\n  \"arguments\": {\n    \"className\": \"ACharacter\",\n    \"includeImplementedInterfaces\": true\n  }\n}\n```\nExample output:\n```json\n{\n  \"class\": \"ACharacter\",\n  \"inheritsFrom\": \"APawn\",\n  \"interfaces\": [\"IMovementModeInterface\"],\n  \"hierarchy\": [\n    \"ACharacter\",\n    \"APawn\",\n    \"AActor\",\n    \"UObject\"\n  ]\n}\n```\n\n#### 3. Reference Finding\n```typescript\n// Find all references to the BeginPlay function\n{\n  \"name\": \"find_references\",\n  \"arguments\": {\n    \"identifier\": \"BeginPlay\",\n    \"type\": \"function\"\n  }\n}\n```\nExample output:\n```json\n{\n  \"references\": [\n    {\n      \"file\": \"Actor.cpp\",\n      \"line\": 245,\n      \"context\": \"void AActor::BeginPlay() { ... }\"\n    },\n    {\n      \"file\": \"Character.cpp\",\n      \"line\": 178,\n      \"context\": \"Super::BeginPlay();\"\n    }\n  ]\n}\n```\n\n#### 4. Code Search\n```typescript\n// Search for physics-related code\n{\n  \"name\": \"search_code\",\n  \"arguments\": {\n    \"query\": \"PhysicsHandle\",\n    \"filePattern\": \"*.h\",\n    \"includeComments\": true\n  }\n}\n```\nExample output:\n```json\n{\n  \"matches\": [\n    {\n      \"file\": \"PhysicsEngine/PhysicsHandleComponent.h\",\n      \"line\": 15,\n      \"context\": \"class UPhysicsHandleComponent : public UActorComponent\",\n      \"snippet\": \"// Component used for grabbing and moving physics objects\"\n    }\n  ]\n}\n```\n\n#### 5. Pattern Detection & Best Practices\n\nThe analyzer provides two powerful tools for understanding and following Unreal Engine best practices:\n\n##### Pattern Detection\n```typescript\n// Detect patterns in a file\n{\n  \"name\": \"detect_patterns\",\n  \"arguments\": {\n    \"filePath\": \"Source/MyGame/MyActor.h\"\n  }\n}\n```\nExample output:\n```json\n{\n  \"patterns\": [\n    {\n      \"pattern\": \"UPROPERTY Macro\",\n      \"description\": \"Property declaration for Unreal reflection system\",\n      \"location\": \"Source/MyGame/MyActor.h:15\",\n      \"context\": \"UPROPERTY(EditAnywhere, BlueprintReadWrite)\\nfloat Health;\",\n      \"improvements\": \"Consider adding a Category specifier for better organization\\nConsider adding Meta tags for validation\",\n      \"documentation\": \"https://docs.unrealengine.com/5.0/en-US/unreal-engine-uproperty-specifier-reference/\",\n      \"bestPractices\": \"Use appropriate specifiers (EditAnywhere, BlueprintReadWrite)\\nConsider replication needs (Replicated, ReplicatedUsing)\\nGroup related properties with categories\",\n      \"examples\": \"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \\\"Combat\\\")\\nfloat Health;\\nUPROPERTY(Replicated, Meta = (ClampMin = \\\"0.0\\\"))\\nfloat Speed;\"\n    }\n  ]\n}\n```\n\n##### Best Practices Guide\n```typescript\n// Get best practices for specific Unreal concepts\n{\n  \"name\": \"get_best_practices\",\n  \"arguments\": {\n    \"concept\": \"UPROPERTY\"  // or UFUNCTION, Components, Events, Replication, Blueprints\n  }\n}\n```\nExample output:\n```json\n{\n  \"description\": \"Property declaration for Unreal reflection system\",\n  \"bestPractices\": [\n    \"Use appropriate specifiers (EditAnywhere, BlueprintReadWrite)\",\n    \"Consider replication needs (Replicated, ReplicatedUsing)\",\n    \"Group related properties with categories\",\n    \"Use Meta tags for validation and UI customization\"\n  ],\n  \"examples\": [\n    \"UPROPERTY(EditAnywhere, BlueprintReadWrite, Category = \\\"Combat\\\")\\nfloat Health;\",\n    \"UPROPERTY(Replicated, Meta = (ClampMin = \\\"0.0\\\"))\\nfloat Speed;\"\n  ],\n  \"documentation\": \"https://docs.unrealengine.com/5.0/en-US/unreal-engine-uproperty-specifier-reference/\"\n}\n```\n\nThe best practices guide covers key Unreal Engine concepts:\n- UPROPERTY: Property reflection and exposure\n- UFUNCTION: Function reflection and Blueprint integration\n- Components: Component creation and management\n- Events: Event handling and delegation\n- Replication: Network replication setup\n- Blueprints: Blueprint/C++ interaction patterns\n\n#### 6. API Documentation Query\n```typescript\n// Search the API documentation\n{\n  \"name\": \"query_api\",\n  \"arguments\": {\n    \"query\": \"Actor\",\n    \"category\": \"Object\",\n    \"module\": \"Core\",\n    \"includeExamples\": true,\n    \"maxResults\": 10\n  }\n}\n```\nExample output:\n```json\n{\n  \"results\": [\n    {\n      \"class\": \"AActor\",\n      \"description\": \"Base class for all actors in the game\",\n      \"module\": \"Core\",\n      \"category\": \"Object\",\n      \"syntax\": \"class AActor : public UObject\",\n      \"examples\": [\n        \"// Create a new actor\\nAActor* MyActor = GetWorld()->SpawnActor<AActor>();\"\n      ],\n      \"remarks\": [\n        \"Actors are the base building blocks of the game\",\n        \"Can be placed in levels or spawned dynamically\"\n      ],\n      \"documentation\": \"https://dev.epicgames.com/documentation/en-us/unreal-engine/API/Core/AActor\",\n      \"relevance\": 100\n    }\n  ]\n}\n```\n\nThe API documentation query tool provides:\n- Full-text search across class documentation\n- Filtering by category and module\n- Code examples and usage patterns\n- Relevance-based sorting of results\n- Links to official documentation\n\n#### 7. Subsystem Analysis\n```typescript\n// Analyze the Physics subsystem\n{\n  \"name\": \"analyze_subsystem\",\n  \"arguments\": {\n    \"subsystem\": \"Physics\"\n  }\n}\n```\nExample output:\n```json\n{\n  \"name\": \"Physics\",\n  \"coreClasses\": [\n    \"UPhysicsEngine\",\n    \"FPhysScene\",\n    \"UBodySetup\"\n  ],\n  \"keyFeatures\": [\n    \"PhysX integration\",\n    \"Collision detection\",\n    \"Physical materials\"\n  ],\n  \"commonUseCases\": [\n    \"Character movement\",\n    \"Vehicle simulation\",\n    \"Destructible environments\"\n  ]\n}\n```\n\n### API Documentation\n\nThe analyzer now includes comprehensive API documentation capabilities:\n\n1. **Automatic Documentation Generation**\n   - Extracts documentation from source code comments\n   - Analyzes class structure and relationships\n   - Categorizes classes by type and module\n   - Generates syntax examples and usage patterns\n\n2. **Smart Search**\n   - Full-text search across all documentation\n   - Relevance-based ranking of results\n   - Category and module filtering\n   - Code example inclusion\n\n3. **Documentation Categories**\n   - Object: Base object classes (UObject derivatives)\n   - Actor: Actor classes (AActor derivatives)\n   - Structure: Data structures and types\n   - Component: Component classes\n   - Miscellaneous: Other classes and utilities\n\n4. **Module Organization**\n   - Core: Core engine functionality\n   - RenderCore: Rendering system\n   - PhysicsCore: Physics engine\n   - And other engine modules\n\n5. **Integration with Existing Tools**\n   - Links with class analysis for detailed information\n   - Connects to pattern detection for best practices\n   - References official Unreal Engine documentation\n   - Provides learning resources and examples\n\n### Best Practices\n\n1. Always set either the Unreal Engine path or custom codebase path before using analysis tools\n2. Use specific class names when analyzing (e.g., \"MyClass\" instead of just \"Class\")\n3. Leverage the file pattern parameter in `search_code` to narrow down results\n4. Include implemented interfaces when analyzing class hierarchies for complete understanding\n5. Use the subsystem analysis tool to get a high-level overview before diving into specific classes (Unreal Engine only)\n\n### Error Handling\n\nThe analyzer will throw clear error messages when:\n- No codebase path is set (Unreal Engine or custom)\n- Provided path does not exist or is inaccessible\n- Class or symbol cannot be found in the codebase\n- Invalid file patterns are provided\n- Syntax errors in search queries or C++ code\n- Access to source files is restricted\n- Tree-sitter parsing fails for C++ files\n\n### Performance Considerations\n\n- Large codebases may take longer to analyze\n- Complex class hierarchies might require more processing time\n- Broad search patterns could result in many matches\n- Consider using more specific queries for faster results\n\n## Testing\n\nThe project includes comprehensive test coverage for all major components:\n\n### Test Coverage\n\n- **Analyzer Tests**: Core functionality tests for the UnrealCodeAnalyzer class\n  - Initialization and path validation\n  - Class analysis and parsing\n  - Reference finding\n  - Code searching\n  - Subsystem analysis\n  - Cache management\n\n- **Game Genres Tests**: Validation of the game genres knowledge base\n  - Data structure verification\n  - Genre-specific feature validation\n  - Component naming conventions\n  - Data completeness checks\n\n- **MCP Server Tests**: Testing of the MCP server implementation\n  - Server initialization\n  - Tool registration and handling\n  - Request/response validation\n  - Error handling\n  - Tool-specific functionality tests\n\n### Running Tests\n\nRun all tests:\n```bash\nnpm test\n```\n\nRun tests in watch mode (useful during development):\n```bash\nnpm run test:watch\n```\n\n### Writing Tests\n\nWhen contributing new features, please ensure:\n1. All new functionality has corresponding test coverage\n2. Tests are organized in the `src/__tests__` directory\n3. Mock external dependencies appropriately\n4. Follow the existing test patterns for consistency\n\n## Contributing\n\nContributions are welcome! Please feel free to submit pull requests with improvements to:\n\n- Source code parsing capabilities\n- New analysis features\n- Performance optimizations\n- Documentation improvements\n- Test coverage\n\nBefore submitting a PR:\n1. Ensure all tests pass (`npm test`)\n2. Add tests for new functionality\n3. Update documentation as needed\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ayeletstudioindia",
        "code",
        "analyzer",
        "unreal engine",
        "unreal analyzer",
        "code search"
      ],
      "category": "digital-marketing"
    },
    "boristopalov--spotify-mcp": {
      "owner": "boristopalov",
      "name": "spotify-mcp",
      "url": "https://github.com/boristopalov/spotify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/boristopalov.webp",
      "description": "Connects Claude with Spotify to control playback, manage music libraries, and retrieve information about tracks, albums, artists, and playlists.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-06T01:52:19Z",
      "readme_content": "# spotify-mcp MCP server\n\n[![smithery badge](https://smithery.ai/badge/@boristopalov/spotify-mcp)](https://smithery.ai/server/@boristopalov/spotify-mcp)\n\nMCP project to connect Claude with Spotify. Built on top of [spotipy-dev's API](https://github.com/spotipy-dev/spotipy/tree/2.24.0).\n\n## Features\n- Start, pause, and skip playback\n- Search for tracks/albums/artists/playlists\n- Get info about a track/album/artist/playlist\n- Manage the Spotify queue\n\n## Demo\n\nMake sure to turn on audio\n\n<details>\n  <summary>\n    Video\n  </summary>\n  https://github.com/user-attachments/assets/20ee1f92-f3e3-4dfa-b945-ca57bc1e0894\n  </summary>\n</details>\n\n## Configuration\n\n### Getting Spotify API Keys\nCreate an account on [developer.spotify.com](https://developer.spotify.com/). Navigate to [the dashboard](https://developer.spotify.com/dashboard). \nCreate an app with redirect_uri as http://localhost:8888. (You can choose any port you want but you must use http and localhost). \nI set \"APIs used\" to \"Web Playback SDK\".\n\n### Run this project locally\nThis project is not yet set up for ephemeral environments (e.g. `uvx` usage). \nRun this project locally by cloning this repo\n\n```bash\ngit clone https://github.com/varunneal/spotify-mcp.git\n```\n\nAdd this tool as a mcp server.\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n\n  ```json\n  \"spotify\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/spotify_mcp\",\n        \"run\",\n        \"spotify-mcp\"\n      ],\n      \"env\": {\n        \"SPOTIFY_CLIENT_ID\": YOUR_CLIENT_ID,\n        \"SPOTIFY_CLIENT_SECRET\": YOUR_CLIENT_SECRET,\n        \"SPOTIFY_REDIRECT_URI\": \"http://localhost:8888\"\n      }\n    }\n  ```\n\n### Troubleshooting\nPlease open an issue if you can't get this MCP working. Here are some tips:\n1. Make sure `uv` is updated. I recommend version `>=0.54`.\n2. Make sure claude has execution permisisons for the project: `chmod -R 755`.\n3. Ensure you have Spotify premium (needed for running developer API). \n\n\n## TODO\n\nUnfortunately, a bunch of cool features have [now been deprecated](https://techcrunch.com/2024/11/27/spotify-cuts-developer-access-to-several-of-its-recommendation-features/) \nfrom the Spotify API. Most new features will be relatively minor or for the health of the project:\n- tests.\n- adding API support for managing playlists.\n- adding API support for paginated search results/playlists/albums.\n\n## Deployment\n\n(todo)\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/varun/Documents/Python/spotify_mcp run spotify-mcp\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "spotify",
        "mcp",
        "tracks",
        "spotify mcp",
        "boristopalov spotify",
        "claude spotify"
      ],
      "category": "digital-marketing"
    },
    "cline--cline": {
      "owner": "cline",
      "name": "cline",
      "url": "https://github.com/cline/cline",
      "imageUrl": "/freedevtools/mcp/pfp/cline.webp",
      "description": "Enable autonomous coding assistance within an IDE, facilitating file creation and editing, running terminal commands, and interactive debugging through a browser, all while managing user permissions. Extend functionality via custom tools using the Model Context Protocol (MCP) to automate and streamline software development tasks.",
      "stars": 51028,
      "forks": 7287,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-04T12:24:47Z",
      "readme_content": "<div align=\"center\"><sub>\nEnglish | <a href=\"https://github.com/cline/cline/blob/main/locales/es/README.md\" target=\"_blank\">Espa√±ol</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/de/README.md\" target=\"_blank\">Deutsch</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/ja/README.md\" target=\"_blank\">Êó•Êú¨Ë™û</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/zh-cn/README.md\" target=\"_blank\">ÁÆÄ‰Ωì‰∏≠Êñá</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/zh-tw/README.md\" target=\"_blank\">ÁπÅÈ´î‰∏≠Êñá</a> | <a href=\"https://github.com/cline/cline/blob/main/locales/ko/README.md\" target=\"_blank\">ÌïúÍµ≠Ïñ¥</a>\n</sub></div>\n\n# Cline ‚Äì \\#1 on OpenRouter\n\n<p align=\"center\">\n  <img src=\"https://media.githubusercontent.com/media/cline/cline/main/assets/docs/demo.gif\" width=\"100%\" />\n</p>\n\n<div align=\"center\">\n<table>\n<tbody>\n<td align=\"center\">\n<a href=\"https://marketplace.visualstudio.com/items?itemName=saoudrizwan.claude-dev\" target=\"_blank\"><strong>Download on VS Marketplace</strong></a>\n</td>\n<td align=\"center\">\n<a href=\"https://discord.gg/cline\" target=\"_blank\"><strong>Discord</strong></a>\n</td>\n<td align=\"center\">\n<a href=\"https://www.reddit.com/r/cline/\" target=\"_blank\"><strong>r/cline</strong></a>\n</td>\n<td align=\"center\">\n<a href=\"https://github.com/cline/cline/discussions/categories/feature-requests?discussions_q=is%3Aopen+category%3A%22Feature+Requests%22+sort%3Atop\" target=\"_blank\"><strong>Feature Requests</strong></a>\n</td>\n<td align=\"center\">\n<a href=\"https://docs.cline.bot/getting-started/for-new-coders\" target=\"_blank\"><strong>Getting Started</strong></a>\n</td>\n</tbody>\n</table>\n</div>\n\nMeet Cline, an AI assistant that can use your **CLI** a**N**d **E**ditor.\n\nThanks to¬†[Claude Sonnet's agentic coding capabilities](https://www.anthropic.com/claude/sonnet),¬†Cline can handle complex software development tasks step-by-step. With tools that let him create & edit files, explore large projects, use the browser, and execute terminal commands (after you grant permission), he can assist you in ways that go beyond code completion or tech support. Cline can even use the Model Context Protocol (MCP) to create new tools and extend his own capabilities. While autonomous AI scripts traditionally run in sandboxed environments, this extension provides a human-in-the-loop GUI to approve every file change and terminal command, providing a safe and accessible way to explore the potential of agentic AI.\n\n1. Enter your task and add images to convert mockups into functional apps or fix bugs with screenshots.\n2. Cline starts by analyzing your file structure & source code ASTs, running regex searches, and reading relevant files to get up to speed in existing projects. By carefully managing what information is added to context, Cline can provide valuable assistance even for large, complex projects without overwhelming the context window.\n3. Once Cline has the information he needs, he can:\n    - Create and edit files + monitor linter/compiler errors along the way, letting him proactively fix issues like missing imports and syntax errors on his own.\n    - Execute commands directly in your terminal and monitor their output as he works, letting him e.g., react to dev server issues after editing a file.\n    - For web development tasks, Cline can launch the site in a headless browser, click, type, scroll, and capture screenshots + console logs, allowing him to fix runtime errors and visual bugs.\n4. When a task is completed, Cline will present the result to you with a terminal command like¬†`open -a \"Google Chrome\" index.html`, which you run with a click of a button.\n\n> [!TIP]\n> Use the¬†`CMD/CTRL + Shift + P`¬†shortcut to open the command palette and type¬†\"Cline: Open In New Tab\"¬†to open the extension as a tab in your editor. This lets you use Cline side-by-side with your file explorer, and see how he changes your workspace more clearly.\n\n---\n\n<img align=\"right\" width=\"340\" src=\"https://github.com/user-attachments/assets/3cf21e04-7ce9-4d22-a7b9-ba2c595e88a4\">\n\n### Use any API and Model\n\nCline supports API providers like OpenRouter, Anthropic, OpenAI, Google Gemini, AWS Bedrock, Azure, GCP Vertex, Cerebras and Groq. You can also configure any OpenAI compatible API, or use a local model through LM Studio/Ollama. If you're using OpenRouter, the extension fetches their latest model list, allowing you to use the newest models as soon as they're available.\n\nThe extension also keeps track of total tokens and API usage cost for the entire task loop and individual requests, keeping you informed of spend every step of the way.\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img align=\"left\" width=\"370\" src=\"https://github.com/user-attachments/assets/81be79a8-1fdb-4028-9129-5fe055e01e76\">\n\n### Run Commands in Terminal\n\nThanks to the new [shell integration updates in VSCode v1.93](https://code.visualstudio.com/updates/v1_93#_terminal-shell-integration-api), Cline can execute commands directly in your terminal and receive the output. This allows him to perform a wide range of tasks, from installing packages and running build scripts to deploying applications, managing databases, and executing tests, all while adapting to your dev environment & toolchain to get the job done right.\n\nFor long running processes like dev servers, use the \"Proceed While Running\" button to let Cline continue in the task while the command runs in the background. As Cline works he‚Äôll be notified of any new terminal output along the way, letting him react to issues that may come up, such as compile-time errors when editing files.\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img align=\"right\" width=\"400\" src=\"https://github.com/user-attachments/assets/c5977833-d9b8-491e-90f9-05f9cd38c588\">\n\n### Create and Edit Files\n\nCline can create and edit files directly in your editor, presenting you a diff view of the changes. You can edit or revert Cline's changes directly in the diff view editor, or provide feedback in chat until you're satisfied with the result. Cline also monitors linter/compiler errors (missing imports, syntax errors, etc.) so he can fix issues that come up along the way on his own.\n\nAll changes made by Cline are recorded in your file's Timeline, providing an easy way to track and revert modifications if needed.\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img align=\"left\" width=\"370\" src=\"https://github.com/user-attachments/assets/bc2e85ba-dfeb-4fe6-9942-7cfc4703cbe5\">\n\n### Use the Browser\n\nWith Claude Sonnet's new [Computer Use](https://www.anthropic.com/news/3-5-models-and-computer-use) capability, Cline can launch a browser, click elements, type text, and scroll, capturing screenshots and console logs at each step. This allows for interactive debugging, end-to-end testing, and even general web use! This gives him autonomy to fixing visual bugs and runtime issues without you needing to handhold and copy-pasting error logs yourself.\n\nTry asking Cline to \"test the app\", and watch as he runs a command like `npm run dev`, launches your locally running dev server in a browser, and performs a series of tests to confirm that everything works. [See a demo here.](https://x.com/sdrzn/status/1850880547825823989)\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img align=\"right\" width=\"350\" src=\"https://github.com/user-attachments/assets/ac0efa14-5c1f-4c26-a42d-9d7c56f5fadd\">\n\n### \"add a tool that...\"\n\nThanks to the [Model Context Protocol](https://github.com/modelcontextprotocol), Cline can extend his capabilities through custom tools. While you can use [community-made servers](https://github.com/modelcontextprotocol/servers), Cline can instead create and install tools tailored to your specific workflow. Just ask Cline to \"add a tool\" and he will handle everything, from creating a new MCP server to installing it into the extension. These custom tools then become part of Cline's toolkit, ready to use in future tasks.\n\n-   \"add a tool that fetches Jira tickets\": Retrieve ticket ACs and put Cline to work\n-   \"add a tool that manages AWS EC2s\": Check server metrics and scale instances up or down\n-   \"add a tool that pulls the latest PagerDuty incidents\": Fetch details and ask Cline to fix bugs\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img align=\"left\" width=\"360\" src=\"https://github.com/user-attachments/assets/7fdf41e6-281a-4b4b-ac19-020b838b6970\">\n\n### Add Context\n\n**`@url`:**¬†Paste in a URL for the extension to fetch and convert to markdown, useful when you want to give Cline the latest docs\n\n**`@problems`:**¬†Add workspace errors and warnings ('Problems' panel) for Cline to fix\n\n**`@file`:**¬†Adds a file's contents so you don't have to waste API requests approving read file (+ type to search files)\n\n**`@folder`:**¬†Adds folder's files all at once to speed up your workflow even more\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n<img align=\"right\" width=\"350\" src=\"https://github.com/user-attachments/assets/140c8606-d3bf-41b9-9a1f-4dbf0d4c90cb\">\n\n### Checkpoints: Compare and Restore\n\nAs Cline works through a task, the extension takes a snapshot of your workspace at each step. You can use the 'Compare' button to see a diff between the snapshot and your current workspace, and the 'Restore' button to roll back to that point.\n\nFor example, when working with a local web server, you can use 'Restore Workspace Only' to quickly test different versions of your app, then use 'Restore Task and Workspace' when you find the version you want to continue building from. This lets you safely explore different approaches without losing progress.\n\n<!-- Transparent pixel to create line break after floating image -->\n\n<img width=\"2000\" height=\"0\" src=\"https://github.com/user-attachments/assets/ee14e6f7-20b8-4391-9091-8e8e25561929\"><br>\n\n## Contributing\n\nTo contribute to the project, start with our [Contributing Guide](CONTRIBUTING.md) to learn the basics. You can also join our [Discord](https://discord.gg/cline) to chat with other contributors in the `#contributors` channel. If you're looking for full-time work, check out our open positions on our [careers page](https://cline.bot/join-us)!\n\n## License\n\n[Apache 2.0 ¬© 2025 Cline Bot Inc.](./LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cline",
        "automate",
        "software",
        "marketing cline",
        "cline enable",
        "mcp automate"
      ],
      "category": "digital-marketing"
    },
    "icraft2170--youtube-data-mcp-server": {
      "owner": "icraft2170",
      "name": "youtube-data-mcp-server",
      "url": "https://github.com/icraft2170/youtube-data-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/icraft2170.webp",
      "description": "Interact with YouTube content to retrieve video details, manage captions, and analyze trends using the YouTube Data API for real-time insights.",
      "stars": 48,
      "forks": 23,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T09:49:30Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/icraft2170-youtube-data-mcp-server-badge.png)](https://mseep.ai/app/icraft2170-youtube-data-mcp-server)\n\n# YouTube MCP Server\n[![smithery badge](https://smithery.ai/badge/@icraft2170/youtube-data-mcp-server)](https://smithery.ai/server/@icraft2170/youtube-data-mcp-server)\n\nA Model Context Protocol (MCP) server implementation utilizing the YouTube Data API. It allows AI language models to interact with YouTube content through a standardized interface.\n\n## Key Features\n\n### Video Information\n* Retrieve detailed video information (title, description, duration, statistics)\n* Search for videos by keywords\n* Get related videos based on a specific video\n* Calculate and analyze video engagement ratios\n\n### Transcript/Caption Management\n* Retrieve video captions with multi-language support\n* Specify language preferences for transcripts\n* Access time-stamped captions for precise content reference\n\n### Channel Analysis\n* View detailed channel statistics (subscribers, views, video count)\n* Get top-performing videos from a channel\n* Analyze channel growth and engagement metrics\n\n### Trend Analysis\n* View trending videos by region and category\n* Compare performance metrics across multiple videos\n* Discover popular content in specific categories\n\n## Available Tools\n\nThe server provides the following MCP tools:\n\n| Tool Name | Description | Required Parameters |\n|-----------|-------------|---------------------|\n| `getVideoDetails` | Get detailed information about multiple YouTube videos including metadata, statistics, and content details | `videoIds` (array) |\n| `searchVideos` | Search for videos based on a query string | `query`, `maxResults` (optional) |\n| `getTranscripts` | Retrieve transcripts for multiple videos | `videoIds` (array), `lang` (optional) |\n| `getRelatedVideos` | Get videos related to a specific video based on YouTube's recommendation algorithm | `videoId`, `maxResults` (optional) |\n| `getChannelStatistics` | Retrieve detailed metrics for multiple channels including subscriber count, view count, and video count | `channelIds` (array) |\n| `getChannelTopVideos` | Get the most viewed videos from a specific channel | `channelId`, `maxResults` (optional) |\n| `getVideoEngagementRatio` | Calculate engagement metrics for multiple videos (views, likes, comments, and engagement ratio) | `videoIds` (array) |\n| `getTrendingVideos` | Get currently popular videos by region and category | `regionCode` (optional), `categoryId` (optional), `maxResults` (optional) |\n| `compareVideos` | Compare statistics across multiple videos | `videoIds` (array) |\n\n## Installation\n\n### Automatic Installation via Smithery\n\nAutomatically install YouTube MCP Server for Claude Desktop via [Smithery](https://smithery.ai/server/@icraft2170/youtube-data-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @icraft2170/youtube-data-mcp-server --client claude\n```\n\n### Manual Installation\n```bash\n# Install from npm\nnpm install youtube-data-mcp-server\n\n# Or clone repository\ngit clone https://github.com/icraft2170/youtube-data-mcp-server.git\ncd youtube-data-mcp-server\nnpm install\n```\n\n## Environment Configuration\nSet the following environment variables:\n* `YOUTUBE_API_KEY`: YouTube Data API key (required)\n* `YOUTUBE_TRANSCRIPT_LANG`: Default caption language (optional, default: 'ko')\n\n## MCP Client Configuration\nAdd the following to your Claude Desktop configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"youtube-data-mcp-server\"],\n      \"env\": {\n        \"YOUTUBE_API_KEY\": \"YOUR_API_KEY_HERE\",\n        \"YOUTUBE_TRANSCRIPT_LANG\": \"ko\"\n      }\n    }\n  }\n}\n```\n\n## YouTube API Setup\n1. Access Google Cloud Console\n2. Create a new project or select an existing one\n3. Enable YouTube Data API v3\n4. Create API credentials (API key)\n5. Use the generated API key in your environment configuration\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Run in development mode\nnpm run dev\n\n# Build\nnpm run build\n```\n\n## Network Configuration\n\nThe server exposes the following ports for communication:\n- HTTP: 3000\n- gRPC: 3001\n\n## System Requirements\n- Node.js 18.0.0 or higher\n\n## Security Considerations\n- Always keep your API key secure and never commit it to version control systems\n- Manage your API key through environment variables or configuration files\n- Set usage limits for your API key to prevent unauthorized use\n\n## License\nThis project is licensed under the MIT License. See the LICENSE file for details. \n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "youtube",
        "icraft2170",
        "data",
        "youtube data",
        "icraft2170 youtube",
        "youtube content"
      ],
      "category": "digital-marketing"
    },
    "itsuzef--ableton-mcp": {
      "owner": "itsuzef",
      "name": "ableton-mcp",
      "url": "https://github.com/itsuzef/ableton-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/itsuzef.webp",
      "description": "Enable direct interaction with Ableton Live through natural language commands, allowing users to create, modify, and control tracks, clips, instruments, and session parameters efficiently.",
      "stars": 9,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-22T18:44:46Z",
      "readme_content": "# AbletonMCP Enhanced - AI Control for Ableton Live\n[![smithery badge](https://smithery.ai/badge/@itsuzef/ableton-mcp)](https://smithery.ai/server/@itsuzef/ableton-mcp/deployments)\n\nThis tool connects Ableton Live to AI assistants like Claude and Cursor through the Model Context Protocol (MCP), allowing you to control Ableton Live with natural language commands.\n\nThis is an enhanced fork of the original [AbletonMCP](https://github.com/ahujasid/ableton-mcp) by Siddharth Ahuja, with significant improvements to make it easier to install and use.\n\n## What You Can Do With This Tool\n\n- Create and manipulate MIDI and audio tracks\n- Load instruments, effects, and sounds from Ableton's library\n- Create and edit MIDI clips with notes\n- Control playback (start, stop, fire clips)\n- Adjust device parameters (like EQ settings)\n- And much more!\n\n## Quick Start Guide for Music Producers\n\n### Option 1: Install via Smithery (Easiest)\n\nIf you're using Claude Desktop, the easiest way to install is with Smithery:\n\n```bash\nnpx -y @smithery/cli install @itsuzef/ableton-mcp --client claude\n```\n\nThis will automatically set up the MCP server in Claude Desktop. You'll still need to install the Ableton Remote Script (see Step 4 below).\n\n### Option 2: Manual Installation\n\n#### Step 1: Install Python (One-time setup)\n\nIf you don't have Python installed:\n\n1. Download and install Python 3.10 or newer:\n   - For Mac: [Download Python](https://www.python.org/downloads/)\n   - For Windows: [Download Python](https://www.python.org/downloads/windows/)\n\n2. During installation, make sure to check \"Add Python to PATH\"\n\n#### Step 2: Install AbletonMCP (One-time setup)\n\nOpen Terminal (Mac) or Command Prompt (Windows) and run these commands:\n\n```bash\n# Create a folder for AbletonMCP\npython -m venv ableton-mcp-env\n\n# On Mac/Linux:\nsource ableton-mcp-env/bin/activate\n\n# On Windows:\nableton-mcp-env\\Scripts\\activate\n\n# Install AbletonMCP\npip install git+https://github.com/itsuzef/ableton-mcp.git\n```\n\n#### Step 3: Install the Ableton Remote Script (One-time setup)\n\nWith the same Terminal/Command Prompt window open:\n\n```bash\n# Install the Remote Script to Ableton\nableton-mcp install\n```\n\nIf the automatic installation doesn't work, the tool will tell you where to manually place the files.\n\n#### Step 4: Set Up Ableton Live (One-time setup)\n\n1. Launch Ableton Live\n2. Go to Preferences ‚Üí Link, Tempo & MIDI\n3. In the Control Surface dropdown, select \"AbletonMCP_Remote_Script\"\n4. Set Input and Output to \"None\"\n5. Click \"OK\" to save settings\n\n#### Step 5: Connect to Your AI Assistant\n\n#### For Claude Desktop:\n\n1. Go to Claude ‚Üí Settings ‚Üí Developer ‚Üí Edit Config\n2. Add this to your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"AbletonMCP\": {\n            \"command\": \"PATH_TO_YOUR_ENVIRONMENT/bin/ableton-mcp\",\n            \"args\": [\n                \"server\"\n            ]\n        }\n    }\n}\n```\n\nReplace `PATH_TO_YOUR_ENVIRONMENT` with the full path to where you created your environment. For example:\n- Mac: `/Users/yourusername/ableton-mcp-env`\n- Windows: `C:\\Users\\yourusername\\ableton-mcp-env`\n\n#### For Cursor:\n\n1. Go to Cursor Settings ‚Üí MCP\n2. Add this command:\n\n```\nPATH_TO_YOUR_ENVIRONMENT/bin/ableton-mcp server\n```\n\nReplace `PATH_TO_YOUR_ENVIRONMENT` as explained above.\n\n#### For Other AI Tools:\n\nAny AI tool that supports MCP can be connected by pointing it to the `ableton-mcp server` command in your environment.\n\n#### Step 6: Start Creating Music with AI!\n\n1. Open Ableton Live\n2. Open your AI assistant (Claude, Cursor, etc.)\n3. Start asking your AI to control Ableton!\n\n> **Note**: If you installed via Smithery (Option 1), you can skip steps 1-3 and 5 of the manual installation. You only need to install the Ableton Remote Script (Step 4) and then you're ready to go!\n\n## Example Commands to Try\n\n- \"Create a new MIDI track with a synth bass instrument\"\n- \"Add reverb to track 1\"\n- \"Create a 4-bar MIDI clip with a simple melody\"\n- \"Load a drum rack into track 2\"\n- \"Add a jazz chord progression to the clip in track 1\"\n- \"Set the tempo to 120 BPM\"\n- \"Play the clip in track 2\"\n- \"Apply a low cut EQ preset to track 1\"\n\n## Troubleshooting\n\n### Connection Issues\n\n- **Make sure Ableton Live is running** before using AI commands\n- **Check that the Remote Script is enabled** in Ableton's MIDI preferences\n- **Restart both Ableton and your AI assistant** if you're having connection problems\n\n### Common Errors\n\n- **\"Command not found\"**: Make sure you've activated your environment with `source ableton-mcp-env/bin/activate` (Mac/Linux) or `ableton-mcp-env\\Scripts\\activate` (Windows)\n- **\"Could not connect to Ableton\"**: Ensure Ableton is running and the Remote Script is enabled\n- **\"Remote Script not found\"**: Try running `ableton-mcp install` again or follow the manual installation instructions\n\n### Getting Help\n\nIf you're still having issues, check the [GitHub issues page](https://github.com/itsuzef/ableton-mcp/issues) or create a new issue with details about your problem.\n\n## Advanced Usage\n\nFor those comfortable with command line tools, AbletonMCP offers additional commands:\n\n```bash\n# Show version information\nableton-mcp version\n\n# Show available MCP functions\nableton-mcp info\n\n# Start the server with custom host/port\nableton-mcp server --host 127.0.0.1 --port 8080\n```\n\n## Acknowledgments\n\nThis project is based on the original [AbletonMCP](https://github.com/ahujasid/ableton-mcp) by Siddharth Ahuja. I've built upon that foundation to create an enhanced version with additional features and improvements.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Disclaimer\n\nThis is a third-party integration and not made by Ableton.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ableton",
        "mcp",
        "digital",
        "ableton mcp",
        "ableton live",
        "itsuzef ableton"
      ],
      "category": "digital-marketing"
    },
    "jamiew--spotify-mcp": {
      "owner": "jamiew",
      "name": "spotify-mcp",
      "url": "https://github.com/jamiew/spotify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jamiew.webp",
      "description": "Connect to Spotify for controlling playback and managing your music library, including playlist management support. Features include searching for tracks, getting information about music entities, and managing the playback queue.",
      "stars": 4,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T07:47:05Z",
      "readme_content": "# spotify-mcp MCP server\n\n[![smithery badge](https://smithery.ai/badge/@jamiew/spotify-mcp)](https://smithery.ai/server/@jamiew/spotify-mcp)\n\nMCP server connecting Claude with Spotify. This fork of [varunneal/spotify-mcp](https://github.com/varunneal/spotify-mcp) adds smart-batching tools and advanced playlist features that optimize API usage.\n\n## Features\n\n### Core Functionality\n- **Playback Control**: Start, pause, skip tracks, manage queue\n- **Search & Discovery**: Find tracks, albums, artists, playlists with pagination  \n- **Real-time State**: Live user profile and playback status\n\n### Enhanced Playlist Tools (New in this fork)\n- **Smart Batch Operations**: Add/remove up to 100 tracks in single API calls\n- **Large Playlist Support**: Efficiently handle playlists with 1000+ tracks using pagination\n- **Advanced Playlist Management**: Create, modify details, bulk track operations\n- **API-Optimized Workflows**: Intelligent batching reduces API calls by 60-80%\n\n## Installation\n\n### 1. Get Spotify API Keys\n1. Create account at [developer.spotify.com](https://developer.spotify.com/)\n2. Create app with redirect URI: `http://localhost:8888`\n\n### 2. Install via Smithery (Recommended)\n```bash\nnpx -y @smithery/cli install @jamiew/spotify-mcp --client claude\n```\n\n### 3. Manual Installation\n```bash\ngit clone https://github.com/jamiew/spotify-mcp.git\n```\n\nAdd to Claude Desktop config (`~/Library/Application Support/Claude/claude_desktop_config.json`):\n```json\n\"spotify\": {\n  \"command\": \"uv\",\n  \"args\": [\"--directory\", \"/path/to/spotify_mcp\", \"run\", \"spotify-mcp\"],\n  \"env\": {\n    \"SPOTIFY_CLIENT_ID\": \"YOUR_CLIENT_ID\",\n    \"SPOTIFY_CLIENT_SECRET\": \"YOUR_CLIENT_SECRET\",\n    \"SPOTIFY_REDIRECT_URI\": \"http://localhost:8888\"\n  }\n}\n```\n\n**Requirements**: Spotify Premium account, `uv` >= 0.54\n\n## Usage Examples\n\n- **\"Create a chill study playlist with 20 tracks\"** ‚Üí Search + playlist creation + bulk track addition\n- **\"Show me the first 50 tracks from my 'Liked Songs'\"** ‚Üí Pagination for large playlists  \n- **\"Find similar artists to Radiohead and add their top tracks to my queue\"** ‚Üí Search + artist info + queue management\n\n## Development\n\nBuilt with **FastMCP framework** featuring 13 focused tools, type-safe APIs, and comprehensive test coverage.\n\n**Debug with MCP Inspector:**\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/spotify_mcp run spotify-mcp\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "spotify",
        "playlist",
        "mcp",
        "spotify mcp",
        "jamiew spotify",
        "spotify controlling"
      ],
      "category": "digital-marketing"
    },
    "jmagar--yarr": {
      "owner": "jmagar",
      "name": "yarr",
      "url": "https://github.com/jmagar/yarr",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Automate and control your media services using natural language commands.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jmagar",
        "automate",
        "marketing",
        "marketing jmagar",
        "digital marketing",
        "jmagar yarr"
      ],
      "category": "digital-marketing"
    },
    "kevinwatt--yt-dlp-mcp": {
      "owner": "kevinwatt",
      "name": "yt-dlp-mcp",
      "url": "https://github.com/kevinwatt/yt-dlp-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kevinwatt.webp",
      "description": "Integrates with yt-dlp to download video and audio content from various platforms, and fetch subtitles in SRT format for processing by LLMs. Provides a privacy-focused direct download experience without tracking.",
      "stars": 84,
      "forks": 30,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T05:42:41Z",
      "readme_content": "# yt-dlp-mcp\n\nAn MCP server implementation that integrates with yt-dlp, providing video and audio content download capabilities (e.g. YouTube, Facebook, Tiktok, etc.) for LLMs.\n\n## Features\n\n* **Video Metadata**: Extract comprehensive video information without downloading content\n* **Subtitles**: Download subtitles in SRT format for LLMs to read\n* **Video Download**: Save videos to your Downloads folder with resolution control\n* **Audio Download**: Save audios to your Downloads folder\n* **Video Search**: Search for videos on YouTube using keywords\n* **Privacy-Focused**: Direct download without tracking\n* **MCP Integration**: Works with Dive and other MCP-compatible LLMs\n\n## Installation\n\n### Prerequisites\n\nInstall `yt-dlp` based on your operating system:\n\n```bash\n# Windows\nwinget install yt-dlp\n\n# macOS\nbrew install yt-dlp\n\n# Linux\npip install yt-dlp\n```\n\n### With [Dive Desktop](https://github.com/OpenAgentPlatform/Dive)\n\n1. Click \"+ Add MCP Server\" in Dive Desktop\n2. Copy and paste this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"yt-dlp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@kevinwatt/yt-dlp-mcp\"\n      ]\n    }\n  }\n}\n```\n3. Click \"Save\" to install the MCP server\n\n## Tool Documentation\n\n* **search_videos**\n  * Search for videos on YouTube using keywords\n  * Inputs:\n    * `query` (string, required): Search keywords or phrase\n    * `maxResults` (number, optional): Maximum number of results to return (1-50, default: 10)\n\n* **list_subtitle_languages**\n  * List all available subtitle languages and their formats for a video (including auto-generated captions)\n  * Inputs:\n    * `url` (string, required): URL of the video\n\n* **download_video_subtitles**\n  * Download video subtitles in any available format. Supports both regular and auto-generated subtitles\n  * Inputs:\n    * `url` (string, required): URL of the video\n    * `language` (string, optional): Language code (e.g., 'en', 'zh-Hant', 'ja'). Defaults to 'en'\n\n* **download_video**\n  * Download video to user's Downloads folder\n  * Inputs:\n    * `url` (string, required): URL of the video\n    * `resolution` (string, optional): Video resolution ('480p', '720p', '1080p', 'best'). Defaults to '720p'\n    * `startTime` (string, optional): Start time for trimming (format: HH:MM:SS[.ms]) - e.g., '00:01:30' or '00:01:30.500'\n    * `endTime` (string, optional): End time for trimming (format: HH:MM:SS[.ms]) - e.g., '00:02:45' or '00:02:45.500'\n\n* **download_audio**\n  * Download audio in best available quality (usually m4a/mp3 format) to user's Downloads folder\n  * Inputs:\n    * `url` (string, required): URL of the video\n\n* **download_transcript**\n  * Download and clean video subtitles to produce a plain text transcript without timestamps or formatting\n  * Inputs:\n    * `url` (string, required): URL of the video\n    * `language` (string, optional): Language code (e.g., 'en', 'zh-Hant', 'ja'). Defaults to 'en'\n\n* **get_video_metadata**\n  * Extract comprehensive video metadata without downloading the content\n  * Returns detailed information including title, description, channel, timestamps, view counts, and more\n  * Inputs:\n    * `url` (string, required): URL of the video\n    * `fields` (array, optional): Specific metadata fields to extract (e.g., ['id', 'title', 'description', 'channel']). If not provided, returns all available metadata\n\n* **get_video_metadata_summary**\n  * Get a human-readable summary of key video metadata\n  * Returns formatted text with title, channel, duration, views, upload date, and description preview\n  * Inputs:\n    * `url` (string, required): URL of the video\n\n## Usage Examples\n\nAsk your LLM to:\n```\n\"Search for Python tutorial videos\"\n\"Find JavaScript courses and show me the top 5 results\"\n\"Search for machine learning tutorials with 15 results\"\n\"List available subtitles for this video: https://youtube.com/watch?v=...\"\n\"Download a video from facebook: https://facebook.com/...\"\n\"Download Chinese subtitles from this video: https://youtube.com/watch?v=...\"\n\"Download this video in 1080p: https://youtube.com/watch?v=...\"\n\"Download audio from this YouTube video: https://youtube.com/watch?v=...\"\n\"Get a clean transcript of this video: https://youtube.com/watch?v=...\"\n\"Download Spanish transcript from this video: https://youtube.com/watch?v=...\"\n\"Get metadata for this video: https://youtube.com/watch?v=...\"\n\"Show me the title, description, and channel info for this video: https://youtube.com/watch?v=...\"\n\"Get a summary of this video's metadata: https://youtube.com/watch?v=...\"\n\"Extract just the id, title, and view count from this video: https://youtube.com/watch?v=...\"\n```\n\n## Manual Start\n\nIf needed, start the server manually:\n```bash\nnpx @kevinwatt/yt-dlp-mcp\n```\n\n## Requirements\n\n* Node.js 20+\n* `yt-dlp` in system PATH\n* MCP-compatible LLM service\n\n\n## Documentation\n\n- [API Reference](./docs/api.md)\n- [Configuration](./docs/configuration.md)\n- [Error Handling](./docs/error-handling.md)\n- [Contributing](./docs/contributing.md)\n\n\n## License\n\nMIT\n\n## Author\n\nDewei Yen\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "yt",
        "srt",
        "dlp",
        "yt dlp",
        "subtitles srt",
        "srt format"
      ],
      "category": "digital-marketing"
    },
    "magarcia--mcp-server-giphy": {
      "owner": "magarcia",
      "name": "mcp-server-giphy",
      "url": "https://github.com/magarcia/mcp-server-giphy",
      "imageUrl": "/freedevtools/mcp/pfp/magarcia.webp",
      "description": "Search, retrieve, and utilize GIFs from Giphy, allowing for content filtering by rating and access to trending GIFs.",
      "stars": 18,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-11T06:58:00Z",
      "readme_content": "# MCP Server Giphy\n\n[![CI](https://github.com/magarcia/mcp-server-giphy/actions/workflows/ci.yml/badge.svg)](https://github.com/magarcia/mcp-server-giphy/actions/workflows/ci.yml)\n[![npm version](https://img.shields.io/npm/v/mcp-server-giphy.svg)](https://www.npmjs.com/package/mcp-server-giphy)\n[![npm downloads](https://img.shields.io/npm/dm/mcp-server-giphy.svg)](https://www.npmjs.com/package/mcp-server-giphy)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nMCP Server for the Giphy API, enabling AI models to search, retrieve, and utilize GIFs from Giphy.\n\n### Features\n\n- **Content Filtering**: Filter results by rating (G, PG, PG-13, R) to ensure appropriate content\n- **Optimized Response Format**: Response data optimized for AI model consumption\n- **Multiple Search Methods**: Support for query-based, random, and trending GIF retrieval\n- **Comprehensive Metadata**: Each GIF comes with full metadata including dimensions, formats, and attribution\n- **Pagination Support**: Control result size and pagination for efficient API use\n\n## Tools\n\n1. `search_gifs`\n\n   - Search for GIFs on Giphy with a query string\n   - Inputs:\n     - `query` (string): Search query term or phrase\n     - `limit` (optional number): Maximum number of objects to return (default: 10, max: 50)\n     - `offset` (optional number): Results offset (default: 0)\n     - `rating` (optional string): Content rating (g, pg, pg-13, r)\n     - `lang` (optional string): Language code (default: en)\n   - Returns: Array of GIF objects with metadata\n\n2. `get_random_gif`\n\n   - Get a random GIF from Giphy, optionally filtered by tag\n   - Inputs:\n     - `tag` (optional string): Tag to limit random results\n     - `rating` (optional string): Content rating (g, pg, pg-13, r)\n   - Returns: Random GIF object with metadata\n\n3. `get_trending_gifs`\n   - Get currently trending GIFs on Giphy\n   - Inputs:\n     - `limit` (optional number): Maximum number of objects to return (default: 10, max: 50)\n     - `offset` (optional number): Results offset (default: 0)\n     - `rating` (optional string): Content rating (g, pg, pg-13, r)\n   - Returns: Array of trending GIF objects with metadata\n\n## Response Format\n\nEach GIF in the response includes:\n\n- `id`: Unique Giphy identifier\n- `title`: GIF title\n- `url`: URL to the GIF on Giphy website\n- `images`: Object containing various image formats, each with:\n  - `url`: Direct URL to the image file\n  - `width`: Image width\n  - `height`: Image height\n- Additional metadata when available\n\n## Setup\n\n### Giphy API Key\n\n[Create a Giphy API Key](https://developers.giphy.com/dashboard/?create=true):\n\n- Sign up for a Giphy Developer account\n- Create an app to get an API key\n- Choose between the free tier or paid options based on your needs\n\n### Environment Configuration\n\nCreate a `.env` file with your API key:\n\n```\nGIPHY_API_KEY=your_api_key_here\n```\n\n### Usage with Claude Desktop\n\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"giphy\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-giphy\"],\n      \"env\": {\n        \"GIPHY_API_KEY\": \"<YOUR_API_KEY>\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n\n# Run in development mode with hot reloading\nnpm run dev\n\n# Run tests\nnpm test\n\n# Use with MCP Inspector\nnpm run inspector\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gifs",
        "mcp",
        "magarcia",
        "trending gifs",
        "utilize gifs",
        "server giphy"
      ],
      "category": "digital-marketing"
    },
    "martianbandit--trendFinder": {
      "owner": "martianbandit",
      "name": "trendFinder",
      "url": "https://github.com/martianbandit/trendFinder",
      "imageUrl": "/freedevtools/mcp/pfp/martianbandit.webp",
      "description": "Collects and analyzes social media posts from key influencers to identify trending topics and sends notifications via Slack or Discord when new trends emerge.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-28T19:14:02Z",
      "readme_content": "# Trend Finder üî¶\n\n**Stay on top of trending topics on social media ‚Äî all in one place.**\n\nTrend Finder collects and analyzes posts from key influencers, then sends a Slack or Discord notification when it detects new trends or product launches. This has been a complete game-changer for the Firecrawl marketing team by:\n\n- **Saving time** normally spent manually searching social channels\n- **Keeping you informed** of relevant, real-time conversations\n- **Enabling rapid response** to new opportunities or emerging industry shifts\n\n_Spend less time hunting for trends and more time creating impactful campaigns._\n\n## Watch the Demo & Tutorial video\n\n[![Thumbnail](https://i.ytimg.com/vi/puimQSun92g/hqdefault.jpg)](https://www.youtube.com/watch?v=puimQSun92g)\n\nLearn how to set up Trend Finder and start monitoring trends in this video!\n\n## How it Works\n\n1. **Data Collection** üì•\n   - Monitors selected influencers' posts on Twitter/X using the X API (Warning: the X API free plan is rate limited to only monitor 1 X account every 15 min)\n   - Monitors websites for new releases and news with Firecrawl's /extract\n   - Runs on a scheduled basis using cron jobs\n\n2. **AI Analysis** üß†\n   - Processes collected content through Together AI\n   - Identifies emerging trends, releases, and news.\n   - Analyzes sentiment and relevance\n\n3. **Notification System** üì¢\n   - When significant trends are detected, sends Slack or Discord notifications based on cron job setup\n   - Provides context about the trend and its sources\n   - Enables quick response to emerging opportunities\n\n## Features\n\n- ü§ñ AI-powered trend analysis using Together AI\n- üì± Social media monitoring (Twitter/X integration)\n- üîç Website monitoring with Firecrawl\n- üí¨ Instant Slack or Discord notifications\n- ‚è±Ô∏è Scheduled monitoring using cron jobs\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- npm or yarn\n- Docker\n- Docker Compose\n- Slack workspace with webhook permissions\n- API keys for required services\n\n## Environment Variables\n\nCopy `.env.example` to `.env` and configure the following variables:\n\n```\n# Optional: API key from Together AI for trend analysis (https://www.together.ai/)\nTOGETHER_API_KEY=your_together_api_key_here\n\n# Optional: API key from DeepSeek for trend analysis (https://deepseek.com/)\nDEEPSEEK_API_KEY=\n\n# Optional: API key from OpenAI for trend analysis (https://openai.com/)\nOPENAI_API_KEY=\n\n# Required if monitoring web pages (https://www.firecrawl.dev/)\nFIRECRAWL_API_KEY=your_firecrawl_api_key_here\n\n# Required if monitoring Twitter/X trends (https://developer.x.com/)\nX_API_BEARER_TOKEN=your_twitter_api_bearer_token_here\n\n# Notification driver. Supported drivers: \"slack\", \"discord\"\nNOTIFICATION_DRIVER=discord\n\n# Required (if NOTIFICATION_DRIVER is \"slack\"): Incoming Webhook URL from Slack for notifications\nSLACK_WEBHOOK_URL=https://hooks.slack.com/services/YOUR/WEBHOOK/URL\n\n# Required (if NOTIFICATION_DRIVER is \"discord\"): Incoming Webhook URL from Discord for notifications\nDISCORD_WEBHOOK_URL=https://discord.com/api/webhooks/WEBHOOK/URL\n```\n\n## Getting Started\n\n1. **Clone the repository:**\n   ```bash\n   git clone [repository-url]\n   cd trend-finder\n   ```\n\n2. **Install dependencies:**\n   ```bash\n   npm install\n   ```\n\n3. **Configure environment variables:**\n   ```bash\n   cp .env.example .env\n   # Edit .env with your configuration\n   ```\n\n4. **Run the application:**\n   ```bash\n   # Development mode with hot reloading\n   npm run start\n\n   # Build for production\n   npm run build\n   ```\n\n## Using Docker\n\n1. **Build the Docker image:**\n   ```bash\n   docker build -t trend-finder .\n   ```\n\n2. **Run the Docker container:**\n   ```bash\n   docker run -d -p 3000:3000 --env-file .env trend-finder\n   ```\n\n## Using Docker Compose\n\n1. **Start the application with Docker Compose:**\n   ```bash\n   docker-compose up --build -d\n   ```\n\n2. **Stop the application with Docker Compose:**\n   ```bash\n   docker-compose down\n   ```\n\n## Project Structure\n\n```\ntrend-finder/\n‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îú‚îÄ‚îÄ controllers/    # Request handlers\n‚îÇ   ‚îú‚îÄ‚îÄ services/       # Business logic\n‚îÇ   ‚îî‚îÄ‚îÄ index.ts        # Application entry point\n‚îú‚îÄ‚îÄ .env.example        # Environment variables template\n‚îú‚îÄ‚îÄ package.json        # Dependencies and scripts\n‚îî‚îÄ‚îÄ tsconfig.json       # TypeScript configuration\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "trending",
        "trendfinder",
        "trends",
        "martianbandit trendfinder",
        "identify trending",
        "trending topics"
      ],
      "category": "digital-marketing"
    },
    "mondweep--youtube-music-mcp-server": {
      "owner": "mondweep",
      "name": "youtube-music-mcp-server",
      "url": "https://github.com/mondweep/youtube-music-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/mondweep.webp",
      "description": "Control YouTube Music playback by searching for and playing songs via voice commands or text input in Google Chrome. The server enables interaction between AI models and YouTube Music to manage music playback effectively.",
      "stars": 14,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T04:22:42Z",
      "readme_content": "# YouTube Music MCP Server\n\n## Overview\nThis project implements a Model Context Protocol (MCP) server that enables AI models to control YouTube Music playback through Google Chrome. It bridges the gap between AI assistants and music playback, allowing AI to search for and play songs based on song names and artist names.\n\n## What is MCP?\nThe Model Context Protocol (MCP) is a standardized way for AI models to interact with external tools and services. It provides a structured communication protocol that allows AI assistants to:\n- Discover available tools\n- Understand tool capabilities\n- Execute actions through these tools\n- Handle responses and errors consistently\n\nLearn more about MCP:\n- [MCP Documentation](https://github.com/modelcontextprotocol/protocol)\n- [MCP SDK](https://github.com/modelcontextprotocol/sdk)\n\n## Features\n- Search YouTube Music for songs\n- Play songs directly in Google Chrome\n- Support for song name and artist name search\n- Error handling and logging\n- Cross-platform support (focused on macOS for Chrome automation)\n\n## Architecture\n\n### High-Level Overview\n\n# youtube-music-server MCP Server\n\nA Model Context Protocol server\n\nThis is a TypeScript-based MCP server that implements a simple notes system. It demonstrates core MCP concepts by providing:\n\n- Resources representing text notes with URIs and metadata\n- Tools for creating new notes\n- Prompts for generating summaries of notes\n\n## Features\n\n### Resources\n- List and access notes via `note://` URIs\n- Each note has a title, content and metadata\n- Plain text mime type for simple content access\n\n### Tools\n- `create_note` - Create new text notes\n  - Takes title and content as required parameters\n  - Stores note in server state\n\n### Prompts\n- `summarize_notes` - Generate a summary of all stored notes\n  - Includes all note contents as embedded resources\n  - Returns structured prompt for LLM summarization\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"youtube-music-server\": {\n      \"command\": \"/path/to/youtube-music-server/build/index.js\"\n    }\n  }\n}\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "playback",
        "youtube",
        "mcp",
        "mondweep youtube",
        "youtube music",
        "control youtube"
      ],
      "category": "digital-marketing"
    },
    "monostate--100ms-SPL-Token-Sniper-MCP": {
      "owner": "monostate",
      "name": "100ms-SPL-Token-Sniper-MCP",
      "url": "https://github.com/monostate/100ms-SPL-Token-Sniper-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/monostate.webp",
      "description": "Utilizes natural language commands to snipe tokens on the Raydium DEX with rapid execution across multiple regions. Incorporates real-time monitoring of new pools and fast pool discovery through GraphQL integration.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-06-22T18:17:17Z",
      "readme_content": "# 100ms Raydium Sniper MCP\n\nA high-performance tool for token sniping on Raydium DEX with multi-region support and Claude AI integration.\n\n## Overview\n\nThe 100ms Raydium Sniper uses Model Context Protocol (MCP) to integrate with Claude AI, allowing natural language interaction for sniping tokens on the Raydium DEX on Solana. Key features include:\n\n- **Multi-region execution**: Deploy cloud functions across US, Asia, and Europe for the fastest possible execution\n- **WebSocket monitoring**: Real-time monitoring of new pool creation\n- **GraphQL integration**: Fast pool discovery via indexed data\n- **Claude AI integration**: Natural language instructions for token sniping\n- **Fast execution**: Optimized transaction submission with 100ms target response time\n- **Demo mode**: Test and showcase without real blockchain transactions\n\n## Requirements\n\n- Node.js 18+ (20+ recommended)\n- pnpm\n- Solana wallet with SOL\n- Claude Desktop App\n- Google Cloud account (for multi-region deployment)\n- API keys:\n  - Helius API key (https://helius.xyz)\n  - Shyft API key (https://shyft.to)\n\n## Quick Start\n\n### Basic Setup\n\n1. **Clone the repository**\n   ```bash\n   git clone https://github.com/yourname/100ms-sniper-mcp.git\n   cd 100ms-sniper-mcp\n   ```\n\n2. **Install dependencies**\n   ```bash\n   pnpm install\n   ```\n\n3. **Create environment file**\n   ```bash\n   cp .env.example .env\n   ```\n   Edit `.env` with your API keys and wallet private key.\n\n4. **Build the project**\n   ```bash\n   pnpm run build\n   ```\n\n5. **Launch with Claude Desktop**\n   ```bash\n   pnpm run launch-claude\n   ```\n\n### Demo Mode\n\nTo try the tool in demo mode without real transactions:\n\n```bash\npnpm run setup-demo\n```\n\nThis builds the project and launches Claude Desktop with a mock server that simulates responses without requiring API keys or SOL in your wallet.\n\n## Usage with Claude\n\nOnce Claude Desktop is launched with the MCP installed, you can use natural language to:\n\n- **Check status**:\n  \"Show me the status of the Raydium sniper\"\n\n- **Snipe a token**:\n  \"Snipe token DezXAZ8z7PnrnRJjz3wXBoRgixCa6xjnB7YaB1pPB263 with 1% slippage\"\n\n- **Configure parameters**:\n  \"Configure my sniper with 2% slippage and 0.1 SOL per transaction\"\n\n## Cloud Deployment\n\nFor multi-region deployment:\n\n1. **Set up cloud configuration**\n   ```bash\n   cp cloud/.env.cloud.example cloud/.env.cloud\n   ```\n   Edit `cloud/.env.cloud` with your API keys, project ID and wallet information.\n\n2. **Run cloud setup**\n   ```bash\n   pnpm run cloud:setup\n   ```\n\n3. **Build and deploy cloud functions**\n   ```bash\n   pnpm run cloud:build\n   pnpm run cloud:deploy\n   ```\n\n4. **Update your environment with function URLs**\n   After deployment, copy the deployed function URLs to your `.env` file.\n\nSee [DEPLOYMENT.md](./DEPLOYMENT.md) for detailed deployment instructions.\n\n## Architecture\n\nThe architecture consists of several components:\n\n- **MCP Server**: Communicates with Claude AI\n- **Cloud Functions**: Multi-region execution points that run on Google Cloud Functions\n- **Region Manager**: Manages connections to different geographical regions\n- **WebSocket Manager**: Handles real-time Solana program subscription\n- **AMM Manager**: Interacts with Raydium AMM protocol\n\n## Troubleshooting\n\n- **\"No pools found\" error**: Ensure the token mint address is correct and has liquidity on Raydium\n- **Slow performance**: Check that your API keys are valid and have sufficient rate limits\n- **Deployment failures**: See [DEPLOYMENT.md](./DEPLOYMENT.md) for specific deployment troubleshooting steps\n- **Claude integration issues**: Ensure Claude Desktop is properly installed and the MCP is correctly configured\n\n## License\n\nMIT License - See [LICENSE](./LICENSE) for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "spl",
        "tokens",
        "snipe",
        "snipe tokens",
        "spl token",
        "tokens raydium"
      ],
      "category": "digital-marketing"
    },
    "mtct--journaling-mcp": {
      "owner": "mtct",
      "name": "journaling-mcp",
      "url": "https://github.com/mtct/journaling-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mtct.webp",
      "description": "Manage interactive journaling sessions with features for emotional analysis and automatic saving. It supports reading recent entries and organizes journal content chronologically in Markdown format.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-20T18:39:18Z",
      "readme_content": "# MCP Journaling Server\n\nAn MCP (Message Control Protocol) server designed to handle interactive journaling sessions with support for emotional analysis and automatic conversation saving.\n\n<a href=\"https://glama.ai/mcp/servers/kiay3i2li7\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/kiay3i2li7/badge\" alt=\"Journaling Server MCP server\" /></a>\n\n## Features\n\n- Automatic journaling session management\n- Conversation saving in Markdown format\n- Temporal analysis of conversations with timestamps\n- Support for reading recent journal entries\n- Chronological organization of journal entries\n\n## Installation\n\nDepend from your MCP client, on Claude Desktop:\n\n```\n    \"mcpServers\": {\n        \"journaling\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                <REPOSITORY PATH>,\n                \"run\",\n                \"server.py\"\n            ]\n        }\n    }\n```\n\n## Configuration\n\nThe server can be configured using environment variables in .env file:\n\n- `JOURNAL_DIR`: Directory for saving journal files (default: ~/Documents/journal)\n- `FILENAME_PREFIX`: Prefix for file names (default: \"journal\")\n- `FILE_EXTENSION`: Journal file extension (default: \".md\")\n\nIf not specified, default values will be used.\n\n## File Structure\n\nJournal entries are saved with the following structure:\n```\n[JOURNAL_DIR]/\n‚îú‚îÄ‚îÄ journal_2025-01-27.md\n‚îú‚îÄ‚îÄ journal_2025-01-26.md\n‚îî‚îÄ‚îÄ ...\n```\n\n## Entry Format\n\nEach journal entry includes:\n\n1. Header with date\n2. Conversation transcript with timestamps\n3. Emotional analysis\n4. Reflections and recurring themes\n\n## API\n\n### Tools\n\n- `start_new_session()`: Start a new journaling session\n- `record_interaction(user_message, assistant_message)`: Record a message exchange\n- `generate_session_summary(summary)`: Generate and save session summary\n- `get_recent_journals()`: Retrieve 5 most recent entries\n\n### Resources\n\n- `journals://recent`: Endpoint to access recent journal entries\n\n### Prompts\n\n- `start_journaling`: Initial prompt\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "journaling",
        "journal",
        "mcp",
        "mtct journaling",
        "journaling mcp",
        "interactive journaling"
      ],
      "category": "digital-marketing"
    },
    "permanzh--app-seo-ai": {
      "owner": "permanzh",
      "name": "app-seo-ai",
      "url": "https://github.com/permanzh/app-seo-ai",
      "imageUrl": "/freedevtools/mcp/pfp/permanzh.webp",
      "description": "Automate SEO tasks and optimize content using AI insights, integrated with Google Ads Keyword Planner for keyword research and competitor analysis. Provides actionable recommendations and SERP analysis to enhance SEO strategies.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "",
      "updated_at": "2025-04-11T14:26:46Z",
      "readme_content": "# App SEO AI\n\nApplication for SEO automation and AI-powered optimization with Google Ads Keyword Planner integration.\n\n## Features\n\n- Keyword research using Google Ads API\n- SERP analysis\n- Competitor analysis\n- SEO recommendations\n- MCP (Model Context Protocol) integration for AI assistants\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- npm or yarn\n- Google Ads account with API access\n- Google Cloud Platform project with Google Ads API enabled\n\n## Setup\n\n### 1. Clone the repository\n\n```bash\ngit clone https://github.com/ccnn2509/app-seo-ai.git\ncd app-seo-ai\n```\n\n### 2. Install dependencies\n\n```bash\nnpm install\n```\n\n### 3. Configure environment variables\n\nCopy the example environment file:\n\n```bash\ncp .env.example .env\n```\n\nEdit the `.env` file and fill in your Google Ads API credentials:\n\n```\n# Server Configuration\nPORT=3000\nNODE_ENV=development\n\n# Google Ads API Configuration\nGOOGLE_ADS_DEVELOPER_TOKEN=your_developer_token\nGOOGLE_ADS_CLIENT_ID=your_client_id\nGOOGLE_ADS_CLIENT_SECRET=your_client_secret\nGOOGLE_ADS_REFRESH_TOKEN=your_refresh_token\nGOOGLE_ADS_LOGIN_CUSTOMER_ID=your_customer_id_without_dashes\n\n# SERP API Configuration (optional)\nSERP_API_KEY=your_serp_api_key\n```\n\n### 4. Get Google Ads API refresh token\n\nRun the following command to get a refresh token:\n\n```bash\nnpm run get-token\n```\n\nThis will open your browser and guide you through the OAuth2 authentication process. The refresh token will be automatically saved to your `.env` file.\n\n### 5. Start the server\n\nFor development:\n\n```bash\nnpm run dev\n```\n\nFor production:\n\n```bash\nnpm start\n```\n\nThe server will start on the port specified in your `.env` file (default: 3000).\n\n## API Documentation\n\nAPI documentation is available at `/api-docs` when the server is running:\n\n```\nhttp://localhost:3000/api-docs\n```\n\n## MCP Integration\n\nThis project includes MCP (Model Context Protocol) integration, allowing AI assistants to use the API. The MCP configuration is in the `mcp.json` file.\n\nTo use this with Smithery:\n\n1. Go to [Smithery](https://smithery.ai/)\n2. Create a new MCP server\n3. Select the `app-seo-ai` repository\n4. Configure the server settings\n5. Deploy the server\n\n## Available MCP Tools\n\n- `research_keywords` - Research keywords related to a given topic or seed keyword\n- `analyze_serp` - Analyze a SERP (Search Engine Results Page) for a given query\n- `analyze_competitors` - Analyze competitors for a given keyword or domain\n- `_health` - Health check endpoint\n\n## Example Usage\n\n### Research Keywords\n\n```javascript\n// Example request to research keywords\nfetch('http://localhost:3000/api/keywords/ideas?keyword=seo%20tools&language=en')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n### Analyze SERP\n\n```javascript\n// Example request to analyze SERP\nfetch('http://localhost:3000/api/serp/analyze?query=best%20seo%20tools&location=United%20States')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n### Analyze Competitors\n\n```javascript\n// Example request to analyze competitors\nfetch('http://localhost:3000/api/competitors/analyze?domain=example.com')\n  .then(response => response.json())\n  .then(data => console.log(data));\n```\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "seo",
        "google",
        "marketing",
        "seo ai",
        "app seo",
        "automate seo"
      ],
      "category": "digital-marketing"
    },
    "sparfenyuk--mcp-youtube": {
      "owner": "sparfenyuk",
      "name": "mcp-youtube",
      "url": "https://github.com/sparfenyuk/mcp-youtube",
      "imageUrl": "/freedevtools/mcp/pfp/sparfenyuk.webp",
      "description": "Bridges AI assistants with the YouTube API to download closed captions and create video summaries from YouTube content.",
      "stars": 14,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T01:17:23Z",
      "readme_content": "# Youtube MCP server\n\n- [Youtube MCP server](#youtube-mcp-server)\n  - [About](#about)\n  - [What is MCP?](#what-is-mcp)\n  - [What does this server do?](#what-does-this-server-do)\n  - [Practical use cases](#practical-use-cases)\n  - [Prerequisites](#prerequisites)\n  - [Installation](#installation)\n  - [Configuration](#configuration)\n    - [Claude Desktop Configuration](#claude-desktop-configuration)\n  - [Development](#development)\n    - [Getting started](#getting-started)\n    - [Debugging the server in the Inspector](#debugging-the-server-in-the-inspector)\n  - [Troubleshooting](#troubleshooting)\n    - [Message 'Could not connect to MCP server mcp-youtube'](#message-could-not-connect-to-mcp-server-mcp-youtube)\n\n## About\n\nThe server is a bridge between the Youtube API and the AI assistants and is based on the [Model Context Protocol](https://modelcontextprotocol.io).\n\n<a href=\"https://glama.ai/mcp/servers/gzrh7914k6\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/gzrh7914k6/badge\" alt=\"Youtube Server MCP server\" />\n</a>\n\n## What is MCP?\n\nThe Model Context Protocol (MCP) is a system that lets AI apps, like Claude Desktop, connect to external tools and data sources. It gives a clear and safe way for AI assistants to work with local services and APIs while keeping the user in control.\n\n## What does this server do?\n\n- [x] Download closed captions for the given video\n\n## Practical use cases\n\n- [x] Create a summary of the video\n\n## Prerequisites\n\n- [`uv` tool](https://docs.astral.sh/uv/getting-started/installation/)\n\n## Installation\n\n```bash\nuv tool install git+https://github.com/sparfenyuk/mcp-youtube\n```\n\n> [!NOTE]\n> If you have already installed the server, you can update it using `uv tool upgrade --reinstall` command.\n\n> [!NOTE]\n> If you want to delete the server, use the `uv tool uninstall mcp-youtube` command.\n\n## Configuration\n\n### Claude Desktop Configuration\n\nConfigure Claude Desktop to recognize the Youtube MCP server.\n\n1. Open the Claude Desktop configuration file:\n   - in MacOS, the configuration file is located at `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - in Windows, the configuration file is located at `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n   > __Note:__\n   > You can also find claude_desktop_config.json inside the settings of Claude Desktop app\n\n2. Add the server configuration\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"mcp-youtube\": {\n            \"command\": \"mcp-youtube\",\n          }\n        }\n      }\n    }\n    ```\n\n## Development\n\n### Getting started\n\n1. Clone the repository\n2. Install the dependencies\n\n   ```bash\n   uv sync\n   ```\n\n3. Run the server\n\n   ```bash\n   uv run mcp-youtube --help\n   ```\n\nTools can be added to the `src/mcp_youtube/tools.py` file.\n\nHow to add a new tool:\n\n1. Create a new class that inherits from ToolArgs\n\n   ```python\n   class NewTool(ToolArgs):\n       \"\"\"Description of the new tool.\"\"\"\n       pass\n   ```\n\n   Attributes of the class will be used as arguments for the tool.\n   The class docstring will be used as the tool description.\n\n2. Implement the tool_runner function for the new class\n\n   ```python\n   @tool_runner.register\n   async def new_tool(args: NewTool) -> t.Sequence[TextContent | ImageContent | EmbeddedResource]:\n       pass\n   ```\n\n   The function should return a sequence of TextContent, ImageContent or EmbeddedResource.\n   The function should be async and accept a single argument of the new class.\n\n3. Done! Restart the client and the new tool should be available.\n\nValidation can accomplished either through Claude Desktop or by running the tool directly.\n\n### Debugging the server in the Inspector\n\nThe MCP inspector is a tool that helps to debug the server using fancy UI. To run it, use the following command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv run mcp-youtube\n```\n\n## Troubleshooting\n\n### Message 'Could not connect to MCP server mcp-youtube'\n\nIf you see the message 'Could not connect to MCP server mcp-youtube' in Claude Desktop, it means that the server configuration is incorrect.\n\nTry the following:\n\n- Use the full path to the `mcp-youtube` binary in the configuration file",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "youtube",
        "ai",
        "captions",
        "mcp youtube",
        "assistants youtube",
        "youtube bridges"
      ],
      "category": "digital-marketing"
    },
    "superseoworld--mcp-spotify": {
      "owner": "superseoworld",
      "name": "mcp-spotify",
      "url": "https://github.com/superseoworld/mcp-spotify",
      "imageUrl": "/freedevtools/mcp/pfp/superseoworld.webp",
      "description": "Access Spotify's music catalog to search for tracks, albums, and artists, along with retrieving artist-specific information such as top tracks and related artists.",
      "stars": 14,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-19T21:27:31Z",
      "readme_content": "# ArtistLens\n\n[![smithery badge](https://smithery.ai/badge/@superseoworld/artistlens)](https://smithery.ai/server/@superseoworld/artistlens)\n[![npm version](https://img.shields.io/npm/v/@thomaswawra/artistlens.svg)](https://www.npmjs.com/package/@thomaswawra/artistlens)\n\nA powerful Model Context Protocol (MCP) server that provides access to the Spotify Web API. ArtistLens enables seamless interaction with Spotify's music catalog, including searching for tracks, albums, and artists, as well as accessing artist-specific information like top tracks and related artists.\n\n**Current Version:** 0.4.12\n\n<a href=\"https://glama.ai/mcp/servers/mmrvuig6tp\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/mmrvuig6tp/badge\" alt=\"ArtistLens MCP server\" /></a>\n\n## Installation\n\n### Installing via Smithery\n\nTo install ArtistLens for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@superseoworld/artistlens):\n\n```bash\nnpx -y @smithery/cli install @superseoworld/artistlens --client claude\n```\n\n### Manual Installation\n\nYou can install the package globally:\n\n```bash\nnpm install -g @thomaswawra/artistlens\n```\n\nOr run it directly with npx:\n\n```bash\nnpx -y @thomaswawra/artistlens\n```\n\n## Configuration\n\nAdd to your MCP settings file (e.g., `claude_desktop_config.json` or `cline_mcp_settings.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"spotify\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@thomaswawra/artistlens\"],\n      \"env\": {\n        \"SPOTIFY_CLIENT_ID\": \"your_client_id\",\n        \"SPOTIFY_CLIENT_SECRET\": \"your_client_secret\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nYou'll need to provide your Spotify API credentials:\n1. Go to [Spotify Developer Dashboard](https://developer.spotify.com/dashboard)\n2. Create a new application\n3. Get your Client ID and Client Secret\n4. Add them to the configuration as shown above\n\n## Features\n\n- Search for tracks, albums, artists, and playlists\n- Get artist information including top tracks and related artists\n- Get album information and tracks\n- Access new releases and recommendations\n- Get audiobook information with market-specific content and chapters\n- Note: Audiobook endpoints may require additional authentication or market-specific access\n- Get and modify playlist information (name, description, public/private status)\n- Access playlist tracks and items with pagination support\n- Support for both Spotify IDs and URIs\n- Automatic token management with client credentials flow\n- Comprehensive test suite for all functionality\n- Well-organized code with separation of concerns\n\n## Available Tools\n\n- `get_access_token`: Get a valid Spotify access token\n- `search`: Search for tracks, albums, artists, or playlists\n- `get_artist`: Get artist information\n- `get_artist_top_tracks`: Get an artist's top tracks\n- `get_artist_related_artists`: Get artists similar to a given artist\n- `get_artist_albums`: Get an artist's albums\n- `get_album`: Get album information\n- `get_album_tracks`: Get an album's tracks\n- `get_track`: Get track information\n- `get_available_genres`: Get a list of available genres for recommendations\n- `get_new_releases`: Get new album releases\n- `get_recommendations`: Get track recommendations based on seed tracks, artists, or genres\n- `get_audiobook`: Get audiobook information with optional market parameter\n- `get_multiple_audiobooks`: Get information for multiple audiobooks (max 50)\n- `get_audiobook_chapters`: Get chapters of an audiobook with pagination support (1-50 chapters per request)\n- `get_playlist`: Get a playlist owned by a Spotify user\n- `get_playlist_tracks`: Get full details of the tracks of a playlist (1-100 tracks per request)\n- `get_playlist_items`: Get full details of the items of a playlist (1-100 items per request)\n- `modify_playlist`: Change playlist details (name, description, public/private state, collaborative status)\n- `add_tracks_to_playlist`: Add one or more tracks to a playlist with optional position\n- `remove_tracks_from_playlist`: Remove one or more tracks from a playlist with optional positions and snapshot ID\n- `get_current_user_playlists`: Get a list of the playlists owned or followed by the current Spotify user (1-50 playlists per request)\n- `get_featured_playlists`: Get a list of Spotify featured playlists with optional locale and pagination support\n- `get_category_playlists`: Get a list of Spotify playlists tagged with a particular category\n\n## Updating\n\nTo update to the latest version:\n\n```bash\n# If installed globally\nnpm update -g @thomaswawra/artistlens\n\n# If using npx, it will automatically use the latest version\nnpx -y @thomaswawra/artistlens\n```\n\n## Development\n\nThis project is open source and available on GitHub at [https://github.com/superseoworld/artistlens](https://github.com/superseoworld/artistlens).\n\n### Project Structure\n\nThe codebase is organized into the following directories:\n- `src/handlers/`: Contains handler classes for different Spotify API endpoints\n- `src/types/`: TypeScript interfaces for request and response objects\n- `src/utils/`: Utility functions and classes for API communication\n- `src/__tests__/`: Jest test files for all functionality\n\n### Testing\n\nThe project uses Jest for testing. To run the tests:\n\n```bash\nnpm test\n```\n\nTo run tests in watch mode during development:\n\n```bash\nnpm run test:watch\n```\n\n### Contributing\n\nTo contribute:\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Add tests for your changes\n4. Commit your changes (`git commit -m 'Add some amazing feature'`)\n5. Push to the branch (`git push origin feature/amazing-feature`)\n6. Open a Pull Request\n\n## License\n\nMIT License\n\n[![smithery badge](https://smithery.ai/badge/@superseoworld/artistlens)](https://smithery.ai/server/@superseoworld/artistlens)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "spotify",
        "tracks",
        "mcp",
        "mcp spotify",
        "spotify music",
        "spotify access"
      ],
      "category": "digital-marketing"
    },
    "uehaj--mcp-notifier": {
      "owner": "uehaj",
      "name": "mcp-notifier",
      "url": "https://github.com/uehaj/mcp-notifier",
      "imageUrl": "/freedevtools/mcp/pfp/uehaj.webp",
      "description": "Send customizable desktop notifications with various types such as info, success, warning, and error. This MCP server enhances applications by providing both simple and advanced notification capabilities across multiple platforms.",
      "stars": 1,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-29T11:32:00Z",
      "readme_content": "# MCP Notifier\n[![npm downloads](https://img.shields.io/npm/dw/@uehaj/mcp-notifier)](https://www.npmjs.com/package/@uehaj/mcp-notifier)\n[![smithery badge](https://smithery.ai/badge/@uehaj/mcp-notifier)](https://smithery.ai/server/@uehaj/mcp-notifier)\n\n\nA Model Context Protocol (MCP) server that provides desktop notification capabilities using node-notifier.\n\n## Features\n\n- Simple notification tool\n- Advanced notification tool with additional options\n- Support for different notification types (info, success, warning, error)\n- Customizable notification settings\n\n## Platform Support\n\nThis MCP server uses [node-notifier](https://www.npmjs.com/package/node-notifier) and works across multiple platforms:\n- **macOS**: Uses macOS Notification Center\n- **Windows**: Uses Windows Toast Notifications (Windows 8+) or taskbar balloons (< Windows 8)\n- **Linux**: Uses notify-send command for Gnome/Ubuntu notifications\n\nFor more details on platform-specific behavior, visit the [node-notifier documentation](https://www.npmjs.com/package/node-notifier).\n\n## Usage Options\n\nYou can use MCP Notifier in two ways:\n\n### Option 1: Run Directly with npx\n\nThe simplest way to use MCP Notifier is with npx:\n\n```bash\n# Run directly with npx\nnpx @uehaj/mcp-notifier\n```\n\nThis will download and execute the package with a single command.\n\n### Option 2: Clone and Build from Source\n\n```bash\n# Clone repository\ngit clone https://github.com/uehaj/mcp-notifier.git\ncd mcp-notifier\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n\n# Run the server\nnode build/index.js\n```\n\n## Integration with Claude Desktop\n\n1. Edit your Claude Desktop configuration file:\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Choose one of the following configuration methods:\n\n### For npx method (recommended):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notifier\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@uehaj/mcp-notifier\"\n      ]\n    }\n  }\n}\n```\n\n### For local git clone method:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-notifier\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/absolute/path/to/cloned/mcp-notifier/build/index.js\"\n      ]\n    }\n  }\n}\n```\n\n3. Restart Claude Desktop\n\n## Smithery Integration\n\nThis MCP server is available on [Smithery](https://smithery.ai/server/@uehaj/mcp-notifier). Since it requires desktop access to function properly, it must be installed locally rather than used as a hosted service.\n\n### Run via Smithery CLI:\n```bash\n# Run using Smithery CLI\nnpx @smithery/cli run @uehaj/mcp-notifier\n```\n\n### Manual setup from repository:\nFollow the \"Clone and Build from Source\" instructions above.\n\n## Available Tools\n\n### notify\n\nBasic notification tool with the following parameters:\n\n- `title`: The notification title (required)\n- `message`: The notification message (required)\n- `icon`: Optional path to an icon file\n- `sound`: Whether to play a sound (optional boolean)\n- `wait`: Whether to wait for the notification to close (optional boolean)\n\n### notify-advanced\n\nAdvanced notification tool with more options:\n\n- `title`: The notification title (required)\n- `message`: The notification message (required)\n- `type`: Notification type - \"info\", \"success\", \"warning\", or \"error\" (optional)\n- `timeout`: Auto-close timeout in milliseconds (optional)\n- `closeLabel`: Text for close button (macOS only, optional)\n- `actions`: Array of action button labels (macOS only, optional)\n\n## Testing\n\nRun tests:\n\n```bash\n# For npx method\nnpx @modelcontextprotocol/inspector npx @uehaj/mcp-notifier\n\n# For git clone method\ncd mcp-notifier\nnpx @modelcontextprotocol/inspector node build/index.js\n```\n\n## Development\n\n### Publishing to npm\n\nThe package includes several npm scripts to help with publishing:\n\n```bash\n# Publish the current version\nnpm run release\n\n# Increment patch version (1.0.0 -> 1.0.1) and publish\nnpm run release:patch\n\n# Increment minor version (1.0.0 -> 1.1.0) and publish\nnpm run release:minor\n\n# Increment major version (1.0.0 -> 2.0.0) and publish\nnpm run release:major\n```\n\nThese commands will:\n1. Automatically run the build process\n2. Update the version number as needed\n3. Publish the package to npm with public access\n\nYou need to be logged in to npm (`npm login`) before running these commands.\n\n## Requirements\n\n- Node.js 18 or higher\n- npm 6 or higher\n- Desktop environment (Windows, macOS, or Linux)\n- Access permissions to notification system\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "notifier",
        "mcp",
        "notifications",
        "mcp notifier",
        "mcp server",
        "uehaj mcp"
      ],
      "category": "digital-marketing"
    },
    "yuhuacheng--tidal-mcp": {
      "owner": "yuhuacheng",
      "name": "tidal-mcp",
      "url": "https://github.com/yuhuacheng/tidal-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/yuhuacheng.webp",
      "description": "Provides personalized music recommendations and playlist management based on user listening history and custom criteria. Enables natural language commands for creating, viewing, and managing TIDAL playlists while discovering context-aware tracks.",
      "stars": 26,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T07:48:25Z",
      "readme_content": "# TIDAL MCP: My Custom Picks üåüüéß\n\n\n\nMost music platforms offer recommendations ‚Äî Daily Discovery, Top Artists, New Arrivals, etc. ‚Äî but even with the state-of-the-art system, they often feel too \"aggregated\". I wanted something more custom and context-aware.\n\nWith TIDAL MCP, you can ask for things like:\n> *\"Based on my last 10 favorites, find similar tracks ‚Äî but only ones from recent years.\"*\n>\n> *\"Find me tracks like those in this playlist, but slower and more acoustic.\"*\n\nThe LLM filters and curates results using your input, finds similar tracks via TIDAL‚Äôs API, and builds new playlists directly in your account.\n\n<a href=\"https://glama.ai/mcp/servers/@yuhuacheng/tidal-mcp\">\n  <img width=\"400\" height=\"200\" src=\"https://glama.ai/mcp/servers/@yuhuacheng/tidal-mcp/badge\" alt=\"TIDAL: My Custom Picks MCP server\" />\n</a>\n\n## Features\n\n- üåü **Music Recommendations**: Get personalized track recommendations based on your listening history **plus your custom criteria**.\n- ·Åä·Åä||·Åä **Playlist Management**: Create, view, and manage your TIDAL playlists\n\n## Quick Start\n\n### Prerequisites\n\n- Python 3.10+\n- [uv](https://github.com/astral-sh/uv) (Python package manager)\n- TIDAL subscription\n\n### Installation\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/yuhuacheng/tidal-mcp.git\n   cd tidal-mcp\n   ```\n\n2. Create a virtual environment and install dependencies using uv:\n   ```bash\n   uv venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n   ```\n\n3. Install the package with all dependencies from the pyproject.toml file:\n   ```bash\n   uv pip install --editable .\n   ```\n\n   This will install all dependencies defined in the pyproject.toml file and set up the project in development mode.\n\n\n## MCP Client Configuration\n\n### Claude Desktop Configuration\n\nTo add this MCP server to Claude Desktop, you need to update the MCP configuration file. Here's an example configuration:\n(you can specify the port by adding an optional `env` section with the `TIDAL_MCP_PORT` environment variable)\n\n```json\n{\n  \"mcpServers\": {\n    \"TIDAL Integration\": {\n      \"command\": \"/path/to/your/uv\",\n      \"env\": {\n        \"TIDAL_MCP_PORT\": \"5100\"\n      },\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"requests\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"flask\",\n        \"--with\",\n        \"tidalapi\",\n        \"mcp\",\n        \"run\",\n        \"/path/to/your/project/tidal-mcp/mcp_server/server.py\"\n      ]\n    }\n  }\n}\n```\n\nExample scrrenshot of the MCP configuration in Claude Desktop:\n\n\n### Steps to Install MCP Configuration\n\n1. Open Claude Desktop\n2. Go to Settings > Developer\n3. Click on \"Edit Config\"\n4. Paste the modified JSON configuration\n5. Save the configuration\n6. Restart Claude Desktop\n\n## Suggested Prompt Starters\nOnce configured, you can interact with your TIDAL account through a LLM by asking questions like:\n\n- *‚ÄúRecommend songs like those in this playlist, but slower and more acoustic.‚Äù*\n- *‚ÄúCreate a playlist based on my top tracks, but focused on chill, late-night vibes.‚Äù*\n- *‚ÄúFind songs like these in playlist XYZ but in languages other than English.‚Äù*\n\n*üí° You can also ask the model to:*\n- Use more tracks as seeds to broaden the inspiration.\n- Return more recommendations if you want a longer playlist.\n- Or delete a playlist if you‚Äôre not into it ‚Äî no pressure!\n\n## Available Tools\n\nThe TIDAL MCP integration provides the following tools:\n\n- `tidal_login`: Authenticate with TIDAL through browser login flow\n- `get_favorite_tracks`: Retrieve your favorite tracks from TIDAL\n- `recommend_tracks`: Get personalized music recommendations\n- `create_tidal_playlist`: Create a new playlist in your TIDAL account\n- `get_user_playlists`: List all your playlists on TIDAL\n- `get_playlist_tracks`: Retrieve all tracks from a specific playlist\n- `delete_tidal_playlist`: Delete a playlist from your TIDAL account\n\n## License\n\n[MIT License](LICENSE)\n\n## Acknowledgements\n\n- [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/python-sdk)\n- [TIDAL Python API](https://github.com/tamland/python-tidal)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tidal",
        "playlists",
        "playlist",
        "tidal playlists",
        "tidal mcp",
        "playlist management"
      ],
      "category": "digital-marketing"
    }
  }
}