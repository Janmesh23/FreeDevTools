{
  "category": "data-labeling-and-annotation",
  "categoryDisplay": "Data Labeling and Annotation",
  "description": "",
  "totalRepositories": 3,
  "repositories": {
    "7gugu--zip-mcp": {
      "owner": "7gugu",
      "name": "zip-mcp",
      "url": "https://github.com/7gugu/zip-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/7gugu.webp",
      "description": "The ZIP Compression Server allows users to easily compress and decompress files, manage multiple files at once, and query information about ZIP files, making file management more efficient and secure.",
      "stars": 11,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-26T13:00:37Z",
      "readme_content": "# ZIP MCP Server\n\n[中文](README_CN.md) | English\n\n## Project Introduction\n\n<a href=\"https://glama.ai/mcp/servers/@7gugu/zip-mcp\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@7gugu/zip-mcp/badge\" />\n</a>\n\nZIP MCP Server is a compression server based on fastMCP and zip.js, implementing the Model Context Protocol (MCP). This project provides fully parameter-controlled ZIP compression, decompression, and query compression package information functions.\n\n## Features\n\n- Supports compression and decompression of files and data\n- Supports multi-file packaging compression\n- Provides compression level control (0-9)\n- Supports password protection and encryption strength settings\n- Provides query function for compressed package metadata\n\n## Project Structure\n\n```bash\nzip-mcp\n├── src\n│   ├── index.ts               # Application entry point\n│   ├── utils\n│   │   └── compression.ts     # Compression and decompression implementation\n├── tsconfig.json              # TypeScript configuration file\n├── package.json               # npm configuration file\n└── README.md                  # Project documentation\n```\n\n## Installation\n\nYou can install ZIP MCP Server globally using npm:\n\n```bash\nnpm install -g zip-mcp\n```\n\n## MCP Configuration\n\nAfter installation, you can configure ZIP MCP in your MCP JSON configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"zip-mcp\": {\n      \"command\": \"zip-mcp\",\n      \"args\": []\n    }\n  }\n}\n```\n\n## Configure the MCP JSON in the AI Client\n\n- Claude Client: [https://modelcontextprotocol.io/quickstart/user](https://modelcontextprotocol.io/quickstart/user)\n- Raycast: requires installing the MCP plugin\n- Cursor: [https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers](https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers)\n\n## MCP Tool Description\n\nZIP MCP Server provides the following tools, which can be called through the MCP protocol:\n\n### Compression Tool (compress)\n\nCompress local files or directories into a ZIP file.\n\n**Parameters:**\n\n- `input`: Path of the file or directory to be compressed (string or string array)\n- `output`: Path of the output ZIP file\n- `options`: Compression options (optional)\n  - `level`: Compression level (0-9, default is 5)\n  - `password`: Password protection\n  - `encryptionStrength`: Encryption strength (1-3)\n  - `overwrite`: Whether to overwrite existing files (boolean)\n\n**Returns:**\n\n- Success: Text content containing success information\n- Failure: Text content containing error information\n\n### Decompression Tool (decompress)\n\nDecompress local ZIP files to the specified directory.\n\n**Parameters:**\n\n- `input`: Path of the ZIP file\n- `output`: Path of the output directory\n- `options`: Decompression options (optional)\n  - `password`: Decompression password\n  - `overwrite`: Whether to overwrite existing files (boolean)\n  - `createDirectories`: Whether to create non-existent directories (boolean)\n\n**Returns:**\n\n- Success: Text content containing decompression result information\n- Failure: Text content containing error information\n\n### ZIP Info Tool (getZipInfo)\n\nGet metadata information of local ZIP files.\n\n**Parameters:**\n\n- `input`: Path of the ZIP file\n- `options`: Options (optional)\n  - `password`: Decompression password\n\n**Returns:**\n\n- Success: Text content containing detailed information of the ZIP file, including:\n  - Total number of files\n  - Total size\n  - Compressed size\n  - Compression ratio\n  - Detailed information of each file\n- Failure: Text content containing error information\n\n### Test Tool (echo)\n\nReturns the input message to test if the service is running normally.\n\n**Parameters:**\n\n- `message`: Message to be returned\n\n**Returns:**\n\n- Text content containing the input message and current timestamp\n\n## Examples\n\nExamples of calling tools using the MCP client:\n\n```javascript\n// Compress files\nawait client.executeTool(\"compress\", {\n  input: \"/path/to/files/or/directory\",\n  output: \"/path/to/output.zip\",\n  options: {\n    level: 9,\n    comment: \"Test compression\",\n    password: \"secret\",\n    overwrite: true,\n  },\n});\n\n// Decompress files\nawait client.executeTool(\"decompress\", {\n  input: \"/path/to/archive.zip\",\n  output: \"/path/to/extract/directory\",\n  options: {\n    password: \"secret\",\n    overwrite: true,\n    createDirectories: true,\n  },\n});\n\n// Get ZIP info\nawait client.executeTool(\"getZipInfo\", {\n  input: \"/path/to/archive.zip\",\n  options: {\n    password: \"secret\",\n  },\n});\n\n// Test service\nawait client.executeTool(\"echo\", {\n  message: \"Hello, ZIP MCP Server!\",\n});\n```\n\n## Contact\n\n- Email: [gz7gugu@qq.com](mailto:gz7gugu@qq.com)\n- Blog: [https://7gugu.com](https://7gugu.com)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zip",
        "compression",
        "compress",
        "zip compression",
        "zip files",
        "zip mcp"
      ],
      "category": "data-labeling-and-annotation"
    },
    "algorithm07-ai--TextGuardAI": {
      "owner": "algorithm07-ai",
      "name": "TextGuardAI",
      "url": "https://github.com/algorithm07-ai/TextGuardAI",
      "imageUrl": "/freedevtools/mcp/pfp/algorithm07-ai.webp",
      "description": "Classifies and detects spam in text content using advanced AI models. Offers a simple REST API for both single and batch text analysis with tiered access options and detailed confidence scoring.",
      "stars": 2,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-07T08:22:25Z",
      "readme_content": "# TextGuard AI\n\nTextGuard AI is a powerful text classification and spam detection API that uses advanced AI models to analyze and classify text content. It provides a simple REST API interface for both single text analysis and batch processing.\n\n## Features\n\n- Text classification and spam detection\n- Batch processing support\n- Tiered API access (Free, Basic, Premium)\n- Rate limiting and usage tracking\n- Detailed analysis with confidence scores\n- Easy integration with existing applications\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/textguard-ai.git\ncd textguard-ai\n```\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Set up environment variables:\nCreate a `.env` file in the root directory with the following variables:\n```\nDEEPSEEK_API_KEY=your_deepseek_api_key_here\nFREE_API_KEY=free_key\nBASIC_API_KEY=basic_key\nPREMIUM_API_KEY=premium_key\n```\n\n## Usage\n\n1. Start the server:\n```bash\npython -m src.api.main\n```\n\n2. The API will be available at `http://localhost:8000`\n\n### API Endpoints\n\n- `GET /`: Root endpoint with API information\n- `GET /health`: Health check endpoint\n- `GET /tools`: List available tools and their parameters\n- `POST /classify`: Classify a single text\n- `POST /batch_classify`: Classify multiple texts\n- `GET /usage`: Get usage statistics\n\n### Example Requests\n\n1. Single Text Classification:\n```bash\ncurl -X POST \"http://localhost:8000/classify\" \\\n     -H \"X-API-Key: your_api_key\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"text\": \"Your text here\", \"analysis_type\": \"spam\"}'\n```\n\n2. Batch Classification:\n```bash\ncurl -X POST \"http://localhost:8000/batch_classify\" \\\n     -H \"X-API-Key: your_api_key\" \\\n     -H \"Content-Type: application/json\" \\\n     -d '{\"texts\": [\"Text 1\", \"Text 2\"], \"analysis_type\": \"spam\"}'\n```\n\n## API Tiers\n\n### Free Tier\n- 100 requests per day\n- Maximum batch size: 10 texts\n- Basic analysis\n\n### Basic Tier\n- 1,000 requests per day\n- Maximum batch size: 50 texts\n- Detailed analysis\n\n### Premium Tier\n- 10,000 requests per day\n- Maximum batch size: 100 texts\n- Advanced analysis with priority processing\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details. ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "textguardai",
        "annotation",
        "api",
        "ai textguardai",
        "spam text",
        "textguardai classifies"
      ],
      "category": "data-labeling-and-annotation"
    },
    "cyanheads--obsidian-mcp-server": {
      "owner": "cyanheads",
      "name": "obsidian-mcp-server",
      "url": "https://github.com/cyanheads/obsidian-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cyanheads.webp",
      "description": "Integrate LLMs with Obsidian vaults to manage knowledge bases through secure API communication and efficient file operations. Features comprehensive search capabilities for enhanced knowledge management.",
      "stars": 223,
      "forks": 36,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:42:55Z",
      "readme_content": "# Obsidian MCP Server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-^5.8.3-blue.svg)](https://www.typescriptlang.org/)\n[![Model Context Protocol](https://img.shields.io/badge/MCP%20SDK-^1.13.0-green.svg)](https://modelcontextprotocol.io/)\n[![Version](https://img.shields.io/badge/Version-2.0.7-blue.svg)](./CHANGELOG.md)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Production-brightgreen.svg)](https://github.com/cyanheads/obsidian-mcp-server/issues)\n[![GitHub](https://img.shields.io/github/stars/cyanheads/obsidian-mcp-server?style=social)](https://github.com/cyanheads/obsidian-mcp-server)\n\n**Empower your AI agents and development tools with seamless Obsidian integration!**\n\nAn MCP (Model Context Protocol) server providing comprehensive access to your Obsidian vault. Enables LLMs and AI agents to read, write, search, and manage your notes and files through the [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api).\n\nBuilt on the [`cyanheads/mcp-ts-template`](https://github.com/cyanheads/mcp-ts-template), this server follows a modular architecture with robust error handling, logging, and security features.\n\n## 🚀 Core Capabilities: Obsidian Tools 🛠️\n\nThis server equips your AI with specialized tools to interact with your Obsidian vault:\n\n| Tool Name                                                                              | Description                                                     | Key Features                                                                                                                                           |\n| :------------------------------------------------------------------------------------- | :-------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [`obsidian_read_note`](./src/mcp-server/tools/obsidianReadNoteTool/)                   | Retrieves the content and metadata of a specified note.         | - Read in `markdown` or `json` format.<br/>- Case-insensitive path fallback.<br/>- Includes file stats (creation/modification time).                   |\n| [`obsidian_update_note`](./src/mcp-server/tools/obsidianUpdateNoteTool/)               | Modifies notes using whole-file operations.                     | - `append`, `prepend`, or `overwrite` content.<br/>- Can create files if they don't exist.<br/>- Targets files by path, active note, or periodic note. |\n| [`obsidian_search_replace`](./src/mcp-server/tools/obsidianSearchReplaceTool/)         | Performs search-and-replace operations within a target note.    | - Supports string or regex search.<br/>- Options for case sensitivity, whole word, and replacing all occurrences.                                      |\n| [`obsidian_global_search`](./src/mcp-server/tools/obsidianGlobalSearchTool/)           | Performs a search across the entire vault.                      | - Text or regex search.<br/>- Filter by path and modification date.<br/>- Paginated results.                                                           |\n| [`obsidian_list_notes`](./src/mcp-server/tools/obsidianListNotesTool/)                 | Lists notes and subdirectories within a specified vault folder. | - Filter by file extension or name regex.<br/>- Provides a formatted tree view of the directory.                                                       |\n| [`obsidian_manage_frontmatter`](./src/mcp-server/tools/obsidianManageFrontmatterTool/) | Atomically manages a note's YAML frontmatter.                   | - `get`, `set`, or `delete` frontmatter keys.<br/>- Avoids rewriting the entire file for metadata changes.                                             |\n| [`obsidian_manage_tags`](./src/mcp-server/tools/obsidianManageTagsTool/)               | Adds, removes, or lists tags for a note.                        | - Manages tags in both YAML frontmatter and inline content.                                                                                            |\n| [`obsidian_delete_note`](./src/mcp-server/tools/obsidianDeleteNoteTool/)               | Permanently deletes a specified note from the vault.            | - Case-insensitive path fallback for safety.                                                                                                           |\n\n---\n\n## Table of Contents\n\n| [Overview](#overview) | [Features](#features) | [Configuration](#configuration) |\n| [Project Structure](#project-structure) | [Vault Cache Service](#vault-cache-service) |\n| [Tools](#tools) | [Resources](#resources) | [Development](#development) | [License](#license) |\n\n## Overview\n\nThe Obsidian MCP Server acts as a bridge, allowing applications (MCP Clients) that understand the Model Context Protocol (MCP) – like advanced AI assistants (LLMs), IDE extensions, or custom scripts – to interact directly and safely with your Obsidian vault.\n\nInstead of complex scripting or manual interaction, your tools can leverage this server to:\n\n- **Automate vault management**: Read notes, update content, manage frontmatter and tags, search across files, list directories, and delete files programmatically.\n- **Integrate Obsidian into AI workflows**: Enable LLMs to access and modify your knowledge base as part of their research, writing, or coding tasks.\n- **Build custom Obsidian tools**: Create external applications that interact with your vault data in novel ways.\n\nBuilt on the robust `mcp-ts-template`, this server provides a standardized, secure, and efficient way to expose Obsidian functionality via the MCP standard. It achieves this by communicating with the powerful [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) running inside your vault.\n\n> **Developer Note**: This repository includes a [.clinerules](.clinerules) file that serves as a developer cheat sheet for your LLM coding agent with quick reference for the codebase patterns, file locations, and code snippets.\n\n## Features\n\n### Core Utilities\n\nLeverages the robust utilities provided by `cyanheads/mcp-ts-template`:\n\n- **Logging**: Structured, configurable logging (file rotation, console, MCP notifications) with sensitive data redaction.\n- **Error Handling**: Centralized error processing, standardized error types (`McpError`), and automatic logging.\n- **Configuration**: Environment variable loading (`dotenv`) with comprehensive validation.\n- **Input Validation/Sanitization**: Uses `zod` for schema validation and custom sanitization logic.\n- **Request Context**: Tracking and correlation of operations via unique request IDs.\n- **Type Safety**: Strong typing enforced by TypeScript and Zod schemas.\n- **HTTP Transport Option**: Built-in Hono server with SSE, session management, CORS support, and pluggable authentication strategies (JWT and OAuth 2.1).\n\n### Obsidian Integration\n\n- **Obsidian Local REST API Integration**: Communicates directly with the Obsidian Local REST API plugin via HTTP requests managed by the `ObsidianRestApiService`.\n- **Comprehensive Command Coverage**: Exposes key vault operations as MCP tools (see [Tools](#tools) section).\n- **Vault Interaction**: Supports reading, updating (append, prepend, overwrite), searching (global text/regex, search/replace), listing, deleting, and managing frontmatter and tags.\n- **Targeting Flexibility**: Tools can target files by path, the currently active file in Obsidian, or periodic notes (daily, weekly, etc.).\n- **Vault Cache Service**: An intelligent in-memory cache that improves performance and resilience. It caches vault content, provides a fallback for the global search tool if the live API fails, and periodically refreshes to stay in sync.\n- **Safety Features**: Case-insensitive path fallbacks for file operations, clear distinction between modification types (append, overwrite, etc.).\n\n## Installation\n\n### Prerequisites\n\n1.  **Obsidian**: You need Obsidian installed.\n2.  **Obsidian Local REST API Plugin**: Install and enable the [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) within your Obsidian vault.\n3.  **API Key**: Configure an API key within the Local REST API plugin settings in Obsidian. You will need this key to configure the server.\n4.  **Node.js & npm**: Ensure you have Node.js (v18 or later recommended) and npm installed.\n\n## Configuration\n\n### MCP Client Settings\n\nAdd the following to your MCP client's configuration file (e.g., `cline_mcp_settings.json`). This configuration uses `npx` to run the server, which will automatically download & install the package if not already present:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"obsidian-mcp-server\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n        \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\",\n        \"OBSIDIAN_VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_ENABLE_CACHE\": \"true\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n**Note**: Verify SSL is set to false here because the Obsidian Local REST API plugin uses a self-signed certificate by default. If you are deploying this in a production environment, consider using the encrypted HTTPS endpoint and set `OBSIDIAN_VERIFY_SSL` to `true` after configuring your server to trust the self-signed certificate.\n\nIf you installed from source, change `command` and `args` to point to your local build:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/your/obsidian-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"YOUR_OBSIDIAN_API_KEY\",\n        \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\",\n        \"OBSIDIAN_VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_ENABLE_CACHE\": \"true\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\nConfigure the server using environment variables. These environmental variables are set within your MCP client config/settings (e.g. `cline_mcp_settings.json` for Cline, `claude_desktop_config.json` for Claude Desktop).\n\n| Variable                              | Description                                                              | Required             | Default                  |\n| :------------------------------------ | :----------------------------------------------------------------------- | :------------------- | :----------------------- |\n| **`OBSIDIAN_API_KEY`**                | API Key from the Obsidian Local REST API plugin.                         | **Yes**              | `undefined`              |\n| **`OBSIDIAN_BASE_URL`**               | Base URL of your Obsidian Local REST API.                                | **Yes**              | `http://127.0.0.1:27123` |\n| `MCP_TRANSPORT_TYPE`                  | Server transport: `stdio` or `http`.                                     | No                   | `stdio`                  |\n| `MCP_HTTP_PORT`                       | Port for the HTTP server.                                                | No                   | `3010`                   |\n| `MCP_HTTP_HOST`                       | Host for the HTTP server.                                                | No                   | `127.0.0.1`              |\n| `MCP_ALLOWED_ORIGINS`                 | Comma-separated origins for CORS. **Set for production.**                | No                   | (none)                   |\n| `MCP_AUTH_MODE`                       | Authentication strategy: `jwt` or `oauth`.                               | No                   | (none)                   |\n| **`MCP_AUTH_SECRET_KEY`**             | 32+ char secret for JWT. **Required for `jwt` mode.**                    | **Yes (if `jwt`)**   | `undefined`              |\n| `OAUTH_ISSUER_URL`                    | URL of the OAuth 2.1 issuer.                                             | **Yes (if `oauth`)** | `undefined`              |\n| `OAUTH_AUDIENCE`                      | Audience claim for OAuth tokens.                                         | **Yes (if `oauth`)** | `undefined`              |\n| `OAUTH_JWKS_URI`                      | URI for the JSON Web Key Set (optional, derived from issuer if omitted). | No                   | (derived)                |\n| `MCP_LOG_LEVEL`                       | Logging level (`debug`, `info`, `error`, etc.).                          | No                   | `info`                   |\n| `OBSIDIAN_VERIFY_SSL`                 | Set to `false` to disable SSL verification.                              | No                   | `true`                   |\n| `OBSIDIAN_ENABLE_CACHE`               | Set to `true` to enable the in-memory vault cache.                       | No                   | `true`                   |\n| `OBSIDIAN_CACHE_REFRESH_INTERVAL_MIN` | Refresh interval for the vault cache in minutes.                         | No                   | `10`                     |\n\n### Connecting to the Obsidian API\n\nTo connect the MCP server to your Obsidian vault, you need to configure the base URL (`OBSIDIAN_BASE_URL`) and API key (`OBSIDIAN_API_KEY`). The Obsidian Local REST API plugin offers two ways to connect:\n\n1.  **Encrypted (HTTPS) - Default**:\n\n    - The plugin provides a secure `https://` endpoint (e.g., `https://127.0.0.1:27124`).\n    - This uses a self-signed certificate, which will cause connection errors by default.\n    - **To fix this**, you must set the `OBSIDIAN_VERIFY_SSL` environment variable to `\"false\"`. This tells the server to trust the self-signed certificate.\n\n2.  **Non-encrypted (HTTP) - Recommended for Simplicity**:\n    - In the plugin's settings within Obsidian, you can enable the \"Non-encrypted (HTTP) Server\".\n    - This provides a simpler `http://` endpoint (e.g., `http://127.0.0.1:27123`).\n    - When using this URL, you do not need to worry about SSL verification.\n\n**Example `env` configuration for your MCP client:**\n\n_Using the non-encrypted HTTP URL (recommended):_\n\n```json\n\"env\": {\n  \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n  \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\"\n}\n```\n\n_Using the encrypted HTTPS URL:_\n\n```json\n\"env\": {\n  \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n  \"OBSIDIAN_BASE_URL\": \"https://127.0.0.1:27124\",\n  \"OBSIDIAN_VERIFY_SSL\": \"false\"\n}\n```\n\n## Project Structure\n\nThe codebase follows a modular structure within the `src/` directory:\n\n```\nsrc/\n├── index.ts           # Entry point: Initializes and starts the server\n├── config/            # Configuration loading (env vars, package info)\n│   └── index.ts\n├── mcp-server/        # Core MCP server logic and capability registration\n│   ├── server.ts      # Server setup, transport handling, tool/resource registration\n│   ├── resources/     # MCP Resource implementations (currently none)\n│   ├── tools/         # MCP Tool implementations (subdirs per tool)\n│   └── transports/    # Stdio and HTTP transport logic\n│       └── auth/      # Authentication strategies (JWT, OAuth)\n├── services/          # Abstractions for external APIs or internal caching\n│   └── obsidianRestAPI/ # Typed client for Obsidian Local REST API\n├── types-global/      # Shared TypeScript type definitions (errors, etc.)\n└── utils/             # Common utility functions (logger, error handler, security, etc.)\n```\n\nFor a detailed file tree, run `npm run tree` or see [docs/tree.md](docs/tree.md).\n\n## Vault Cache Service\n\nThis server includes an intelligent **in-memory cache** designed to enhance performance and resilience when interacting with your vault.\n\n### Purpose and Benefits\n\n- **Performance**: By caching file content and metadata, the server can perform search operations much faster, especially in large vaults. This reduces the number of direct requests to the Obsidian Local REST API, resulting in a snappier experience.\n- **Resilience**: The cache acts as a fallback for the `obsidian_global_search` tool. If the live API search fails or times out, the server seamlessly uses the cache to provide results, ensuring that search functionality remains available even if the Obsidian API is temporarily unresponsive.\n- **Efficiency**: The cache is designed to be efficient. It performs an initial build on startup and then periodically refreshes in the background by checking for file modifications, ensuring it stays reasonably up-to-date without constant, heavy API polling.\n\n### How It Works\n\n1.  **Initialization**: When enabled, the `VaultCacheService` builds an in-memory map of all `.md` files in your vault, storing their content and modification times.\n2.  **Periodic Refresh**: The cache automatically refreshes at a configurable interval (defaulting to 10 minutes). During a refresh, it only fetches content for files that are new or have been modified since the last check.\n3.  **Proactive Updates**: After a file is modified through a tool like `obsidian_update_file`, the service proactively updates the cache for that specific file, ensuring immediate consistency.\n4.  **Search Fallback**: The `obsidian_global_search` tool first attempts a live API search. If this fails, it automatically falls back to searching the in-memory cache.\n\n### Configuration\n\nThe cache is enabled by default but can be configured via environment variables:\n\n- **`OBSIDIAN_ENABLE_CACHE`**: Set to `true` (default) or `false` to enable or disable the cache service.\n- **`OBSIDIAN_CACHE_REFRESH_INTERVAL_MIN`**: Defines the interval in minutes for the periodic background refresh. Defaults to `10`.\n\n## Tools\n\nThe Obsidian MCP Server provides a suite of tools for interacting with your vault, callable via the Model Context Protocol.\n\n| Tool Name                     | Description                                               | Key Arguments                                                 |\n| :---------------------------- | :-------------------------------------------------------- | :------------------------------------------------------------ |\n| `obsidian_read_note`          | Retrieves the content and metadata of a note.             | `filePath`, `format?`, `includeStat?`                         |\n| `obsidian_update_note`        | Modifies a file by appending, prepending, or overwriting. | `targetType`, `content`, `targetIdentifier?`, `wholeFileMode` |\n| `obsidian_search_replace`     | Performs search-and-replace operations in a note.         | `targetType`, `replacements`, `useRegex?`, `replaceAll?`      |\n| `obsidian_global_search`      | Searches the entire vault for content.                    | `query`, `searchInPath?`, `useRegex?`, `page?`, `pageSize?`   |\n| `obsidian_list_notes`         | Lists notes and subdirectories in a folder.               | `dirPath`, `fileExtensionFilter?`, `nameRegexFilter?`         |\n| `obsidian_manage_frontmatter` | Gets, sets, or deletes keys in a note's frontmatter.      | `filePath`, `operation`, `key`, `value?`                      |\n| `obsidian_manage_tags`        | Adds, removes, or lists tags in a note.                   | `filePath`, `operation`, `tags`                               |\n| `obsidian_delete_note`        | Permanently deletes a note from the vault.                | `filePath`                                                    |\n\n_Note: All tools support comprehensive error handling and return structured JSON responses._\n\n## Resources\n\n**MCP Resources are not implemented in this version.**\n\nThis server currently focuses on providing interactive tools for vault manipulation. Future development may introduce resource capabilities (e.g., exposing notes or search results as readable resources).\n\n## Development\n\n### Build and Test\n\nTo get started with development, clone the repository, install dependencies, and use the following scripts:\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project (compile TS to JS in dist/ and make executable)\nnpm run rebuild\n\n# Start the server locally using stdio transport\nnpm start:stdio\n\n# Start the server using http transport\nnpm run start:http\n\n# Format code using Prettier\nnpm run format\n\n# Inspect the server's capabilities using the MCP Inspector tool\nnpm run inspect:stdio\n# or for the http transport:\nnpm run inspect:http\n```\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\nBuilt with the <a href=\"https://modelcontextprotocol.io/\">Model Context Protocol</a>\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "llms",
        "obsidian",
        "vaults",
        "llms obsidian",
        "obsidian vaults",
        "knowledge management"
      ],
      "category": "data-labeling-and-annotation"
    }
  }
}