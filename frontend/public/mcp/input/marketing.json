{
  "category": "marketing",
  "categoryDisplay": "Marketing",
  "description": "Tools for creating and editing marketing content, working with web meta data, product positioning, and editing guides.",
  "totalRepositories": 7,
  "repositories": {
    "gomarble-ai--facebook-ads-mcp-server": {
      "owner": "gomarble-ai",
      "name": "facebook-ads-mcp-server",
      "url": "https://github.com/gomarble-ai/facebook-ads-mcp-server",
      "imageUrl": "",
      "description": "MCP server acting as an interface to the Facebook Ads, enabling programmatic access to Facebook Ads data and management features.",
      "stars": 159,
      "forks": 42,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T09:13:15Z",
      "readme_content": "# Facebook/Meta Ads MCP Server\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/gomarble-ai/facebook-ads-mcp-server)](https://archestra.ai/mcp-catalog/gomarble-ai__facebook-ads-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@gomarble-ai/facebook-ads-mcp-server)](https://smithery.ai/server/@gomarble-ai/facebook-ads-mcp-server)\n\nThis project provides an MCP server acting as an interface to the Meta Ads, enabling programmatic access to Meta Ads data and management features.\n\n<video controls width=\"1920\" height=\"512\" src=\"https://github.com/user-attachments/assets/c4a76dcf-cf5d-4a1d-b976-08165e880fe4\">Your browser does not support the video tag.</video>\n\n## Easy One-Click Setup\n\nFor a simpler setup experience, we offer ready-to-use installers:\n\n👉 **Download installer -** [https://gomarble.ai/mcp](https://gomarble.ai/mcp)\n\n## Join our community for help and updates\n\n👉 **Slack Community -** [AI in Ads](https://join.slack.com/t/ai-in-ads/shared_invite/zt-36hntbyf8-FSFixmwLb9mtEzVZhsToJQ)\n\n## Try Google ads mcp server also\n\n👉 **Google Ads MCP -** [Google Ads MCP](https://github.com/gomarble-ai/google-ads-mcp-server)\n\n### What It Does\n\n- Installs and configures the MCP server locally\n- Automatically handles environment setup\n- Prompts for Meta token authentication during the process which is optional\n- If Meta access token is not provided then connect to GoMarble's server to create the token on your behalf\n\n### Important Disclaimer\n\nThis setup **does not require** you to manually obtain a Meta Developer Access Token.\n\nInstead, it connects securely to **GoMarble's server to create the token on your behalf**.\nGoMarble **does not store** your token — it is saved locally on your machine for use with the MCP server.\n\n---\n\n## Setup\n\n### Prerequisites\n\n*   Python 3.10+\n*   Dependencies listed in `requirements.txt`\n\n\n\n1.  **(Optional but Recommended) Create and Activate a Virtual Environment:**\n    ```bash\n    python3 -m venv venv\n    source venv/bin/activate  # On Windows use `venv\\Scripts\\activate`\n    ```\n\n    Using a virtual environment helps manage project dependencies cleanly[[Source]](https://docs.python.org/3/tutorial/venv.html).\n2.  **Install Dependencies:**\n    ```bash\n    pip install -r requirements.txt\n    ```\n3.  **Obtain Meta Access Token:** Secure a Meta User Access Token with the necessary permissions (e.g., `ads_read`). You can generate this through the Meta Developer portal. Follow [this link](https://elfsight.com/blog/how-to-get-facebook-access-token/).\n\n### Usage with MCP Clients (e.g., Cursor, Claude Desktop)\n\nTo integrate this server with an MCP-compatible client, add a configuration([Claude](https://modelcontextprotocol.io/quickstart/user#2-add-the-filesystem-mcp-server)) similar to the following. Replace `YOUR_META_ACCESS_TOKEN` with your actual token and adjust the path to `server.py` if necessary.\n\n```json\n{\n  \"mcpServers\": {\n    \"fb-ads-mcp-server\": {\n      \"command\": \"python\",\n      \"args\": [\n        \"/path/to/your/fb-ads-mcp-server/server.py\",\n        \"--fb-token\",\n        \"YOUR_META_ACCESS_TOKEN\"\n      ]\n      // If using a virtual environment, you might need to specify the python executable within the venv:\n      // \"command\": \"/path/to/your/fb-ads-mcp-server/venv/bin/python\",\n      // \"args\": [\n      //   \"/path/to/your/fb-ads-mcp-server/server.py\",\n      //   \"--fb-token\",\n      //   \"YOUR_META_ACCESS_TOKEN\"\n      // ]\n    }\n  }\n}\n```\nRestart the MCP Client app after making the update in the configuration.\n\n*(Note: On Windows, you might need to adjust the command structure or use `cmd /k` depending on your setup.)*\n\n### Debugging the Server\n\nExecute `server.py`, providing the access token via the `--fb-token` argument.\n\n```bash\npython server.py --fb-token YOUR_META_ACCESS_TOKEN\n```\n\n### Available MCP Tools\n\nThis MCP server provides tools for interacting with META Ads objects and data:\n\n| Tool Name                       | Description                                              |\n| ------------------------------- | -------------------------------------------------------- |\n| **Account & Object Read**       |                                                          |\n| `list_ad_accounts`              | Lists ad accounts linked to the token.                   |\n| `get_details_of_ad_account`     | Retrieves details for a specific ad account.             |\n| `get_campaign_by_id`            | Retrieves details for a specific campaign.               |\n| `get_adset_by_id`               | Retrieves details for a specific ad set.                 |\n| `get_ad_by_id`                  | Retrieves details for a specific ad.                     |\n| `get_ad_creative_by_id`         | Retrieves details for a specific ad creative.            |\n| `get_adsets_by_ids`             | Retrieves details for multiple ad sets by their IDs.     |\n| **Fetching Collections**        |                                                          |\n| `get_campaigns_by_adaccount`    | Retrieves campaigns within an ad account.                |\n| `get_adsets_by_adaccount`       | Retrieves ad sets within an ad account.                  |\n| `get_ads_by_adaccount`          | Retrieves ads within an ad account.                      |\n| `get_adsets_by_campaign`        | Retrieves ad sets within a campaign.                     |\n| `get_ads_by_campaign`           | Retrieves ads within a campaign.                         |\n| `get_ads_by_adset`              | Retrieves ads within an ad set.                          |\n| `get_ad_creatives_by_ad_id`     | Retrieves creatives associated with an ad.               |\n| **Insights & Performance Data** |                                                          |\n| `get_adaccount_insights`        | Retrieves performance insights for an ad account.        |\n| `get_campaign_insights`         | Retrieves performance insights for a campaign.           |\n| `get_adset_insights`            | Retrieves performance insights for an ad set.            |\n| `get_ad_insights`               | Retrieves performance insights for an ad.                |\n| `fetch_pagination_url`          | Fetches data from a pagination URL (e.g., from insights).|\n| **Activity/Change History**     |                                                          |\n| `get_activities_by_adaccount`   | Retrieves change history for an ad account.              |\n| `get_activities_by_adset`       | Retrieves change history for an ad set.                  |\n\n*(Note: Most tools support additional parameters like `fields`, `filtering`, `limit`, pagination, date ranges, etc. Refer to the detailed docstrings within `server.py` for the full list and description of arguments for each tool.)*\n\n*(Note: If your Meta access token expires, you'll need to generate a new one and update the configuration file of the MCP Client with new token to continue using the tools.)*\n\n### Dependencies\n\n*   [mcp](https://pypi.org/project/mcp/) (>=1.6.0)\n*   [requests](https://pypi.org/project/requests/) (>=2.32.3)\n\n### License\nThis project is licensed under the MIT License.\n\n---\n\n## Installing via Smithery\n\nTo install Facebook Ads Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@gomarble-ai/facebook-ads-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @gomarble-ai/facebook-ads-mcp-server --client claude\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "ads",
        "facebook",
        "marketing tools",
        "ads mcp",
        "mcp server"
      ],
      "category": "marketing"
    },
    "gomarble-ai--google-ads-mcp-server": {
      "owner": "gomarble-ai",
      "name": "google-ads-mcp-server",
      "url": "https://github.com/gomarble-ai/google-ads-mcp-server",
      "imageUrl": "",
      "description": "MCP server acting as an interface to the Google Ads, enabling programmatic access to Google Ads data and management features.",
      "stars": 62,
      "forks": 19,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T15:39:51Z",
      "readme_content": "# Google Ads MCP Server 🚀\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python 3.10+](https://img.shields.io/badge/python-3.10+-blue.svg)](https://www.python.org/downloads/)\n[![FastMCP](https://img.shields.io/badge/FastMCP-v2.8.0-green.svg)](https://github.com/jlowin/fastmcp)\n\n**A FastMCP-powered Model Context Protocol server for Google Ads API integration with automatic OAuth 2.0 authentication**\n\nConnect Google Ads API directly to Claude Desktop and other MCP clients with seamless OAuth 2.0 authentication, automatic token refresh, GAQL querying, and keyword research capabilities.\n\n<video controls width=\"1920\" height=\"512\" src=\"https://github.com/user-attachments/assets/1dc62f47-ace4-4dcf-8009-593ef7194b43\">Your browser does not support the video tag.</video>\n\n## Easy One-Click Setup\n\nFor a simpler setup experience, we offer ready-to-use installers:\n\n👉 **Download installer -** [https://gomarble.ai/mcp](https://gomarble.ai/mcp)\n\n## Join our community for help and updates\n\n👉 **Slack Community -** [AI in Ads](https://join.slack.com/t/ai-in-ads/shared_invite/zt-36hntbyf8-FSFixmwLb9mtEzVZhsToJQ)\n\n## Try Facebook ads mcp server also\n\n👉 **Facebook Ads MCP -** [Facebook Ads MCP](https://github.com/gomarble-ai/facebook-ads-mcp-server)\n\n## ✨ Features\n\n- 🔐 **Automatic OAuth 2.0** - One-time browser authentication with auto-refresh\n- 🔄 **Smart Token Management** - Handles expired tokens automatically\n- 📊 **GAQL Query Execution** - Run any Google Ads Query Language queries\n- 🏢 **Account Management** - List and manage Google Ads accounts\n- 🔍 **Keyword Research** - Generate keyword ideas with search volume data\n- 🚀 **FastMCP Framework** - Built on the modern MCP standard\n- 🖥️ **Claude Desktop Ready** - Direct integration with Claude Desktop\n- 🛡️ **Secure Local Storage** - Tokens stored locally, never exposed\n\n## 📋 Available Tools\n\n| Tool | Description | Parameters | Example Usage |\n|------|-------------|------------|---------------|\n| `list_accounts` | List all accessible Google Ads accounts | None | \"List all my Google Ads accounts\" |\n| `run_gaql` | Execute GAQL queries with custom formatting | `customer_id`, `query`, `manager_id` (optional) | \"Show me campaign performance for account 1234567890\" |\n| `run_keyword_planner` | Generate keyword ideas with metrics | `customer_id`, `keywords`, `manager_id`, `page_url`, date range options | \"Generate keyword ideas for 'digital marketing'\" |\n\n**Note:** All tools automatically handle authentication - no token parameters required!\n\n## 🚀 Quick Start\n\n### Prerequisites\n\nBefore setting up the MCP server, you'll need:\n- Python 3.10+ installed\n- A Google Cloud Platform account\n- A Google Ads account with API access\n\n## 🔧 Step 1: Google Cloud Platform Setup\n\n### 1.1 Create Google Cloud Project\n\n1. **Go to [Google Cloud Console](https://console.cloud.google.com/)**\n2. **Create a new project:**\n   - Click \"Select a project\" → \"New Project\"\n   - Enter project name (e.g., \"Google Ads MCP\")\n   - Click \"Create\"\n\n### 1.2 Enable Google Ads API\n\n1. **In your Google Cloud Console:**\n   - Go to \"APIs & Services\" → \"Library\"\n   - Search for \"Google Ads API\"\n   - Click on it and press \"Enable\"\n\n### 1.3 Create OAuth 2.0 Credentials\n\n1. **Go to \"APIs & Services\" → \"Credentials\"**\n2. **Click \"+ CREATE CREDENTIALS\" → \"OAuth 2.0 Client ID\"**\n3. **Configure consent screen (if first time):**\n   - Click \"Configure Consent Screen\"\n   - Choose \"External\" (unless you have Google Workspace)\n   - Fill required fields:\n     - App name: \"Google Ads MCP\"\n     - User support email: Your email\n     - Developer contact: Your email\n   - Click \"Save and Continue\" through all steps\n4. **Create OAuth Client:**\n   - Application type: **\"Desktop application\"**\n   - Name: \"Google Ads MCP Client\"\n   - Click \"Create\"\n5. **Download credentials:**\n   - Click \"Download JSON\" button\n   - Save file as `client_secret_[long-string].json` in your project directory\n\n## 🔧 Step 2: Google Ads API Setup\n\n### 2.1 Get Developer Token\n\n1. **Sign in to [Google Ads](https://ads.google.com)**\n2. **Go to Tools & Settings** (wrench icon in top navigation)\n3. **Under \"Setup\", click \"API Center\"**\n4. **Accept Terms of Service** if prompted\n5. **Click \"Apply for token\"**\n6. **Fill out application form:**\n   - Describe your use case (e.g., \"MCP integration for campaign analysis\")\n   - Provide technical details about your implementation\n7. **Submit and wait for approval** (usually 1-3 business days)\n\n**Note:** You'll initially get a test token with limited functionality. After testing, you can apply for production access.\n\n### 2.2 Find Your Developer Token\n\nOnce approved:\n1. **Return to API Center in Google Ads**\n2. **Copy your Developer Token** (format: `XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX`)\n\n## 🔧 Step 3: Installation & Setup\n\n### 3.1 Clone and Install\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/google-ads-mcp-server.git\ncd google-ads-mcp-server\n\n# Create virtual environment (recommended)\npython3 -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\npip install -r requirements.txt\n```\n\n### 3.2 Environment Configuration\n\nCreate a `.env` file in your project directory:\n\n```bash\n# Copy the example file\ncp .env.example .env\n```\n\nEdit `.env` with your credentials:\n\n```bash\n# Required: Google Ads API Developer Token\nGOOGLE_ADS_DEVELOPER_TOKEN=your_developer_token_here\n\n# Required: Path to OAuth credentials JSON file (downloaded from Google Cloud)\nGOOGLE_ADS_OAUTH_CONFIG_PATH=/full/path/to/your/client_secret_file.json\n```\n\n**Example `.env` file:**\n```bash\nGOOGLE_ADS_DEVELOPER_TOKEN=ABCDEFG1234567890\nGOOGLE_ADS_OAUTH_CONFIG_PATH=/Users/john/google-ads-mcp/client_secret_138737274875-abc123.apps.googleusercontent.com.json\n```\n\n## 🖥️ Step 4: Claude Desktop Integration\n\n### 4.1 Locate Claude Configuration\n\nFind your Claude Desktop configuration file:\n\n**macOS:**\n```bash\n~/Library/Application Support/Claude/claude_desktop_config.json\n```\n\n**Windows:**\n```bash\n%APPDATA%\\Claude\\claude_desktop_config.json\n```\n\n### 4.2 Add MCP Server Configuration\n\nEdit the configuration file and add your Google Ads MCP server:\n\n```json\n{\n  \"mcpServers\": {\n    \"google-ads\": {\n      \"command\": \"/full/path/to/your/project/.venv/bin/python\",\n      \"args\": [\n        \"/full/path/to/your/project/server.py\"\n      ]\n    }\n  }\n}\n```\n\n**Real Example:**\n```json\n{\n  \"mcpServers\": {\n    \"google-ads\": {\n      \"command\": \"/Users/marble-dev-01/workspace/google_ads_with_fastmcp/.venv/bin/python\",\n      \"args\": [\n        \"/Users/marble-dev-01/workspace/google_ads_with_fastmcp/server.py\"\n      ]\n    }\n  }\n}\n```\n\n**Important:** \n- Use **absolute paths** for all file locations\n- On Windows, use forward slashes `/` or double backslashes `\\\\` in paths\n- Replace `your_developer_token_here` with your actual developer token\n\n### 4.3 Restart Claude Desktop\n\nClose and restart Claude Desktop to load the new configuration.\n\n## 🔐 Step 5: First-Time Authentication\n\n### 5.1 Trigger OAuth Flow\n\n1. **Open Claude Desktop**\n2. **Try any Google Ads command**, for example:\n   ```\n   \"List all my Google Ads accounts\"\n   ```\n\n### 5.2 Complete Authentication\n\n1. **Browser opens automatically** to Google OAuth page\n2. **Sign in** with your Google account (the one with Google Ads access)\n3. **Grant permissions** by clicking \"Allow\"\n4. **Browser shows success page**\n5. **Return to Claude** - your command will complete automatically!\n\n### 5.3 Verify Setup\n\nAfter authentication, you should see:\n- A `google_ads_token.json` file created in your project directory\n- Your Google Ads accounts listed in Claude's response\n\n## 📖 Usage Examples\n\n### Basic Account Operations\n\n```\n\"List all my Google Ads accounts\"\n\n\"Show me the account details and which ones have active campaigns\"\n```\n\n### Campaign Analysis\n\n```\n\"Show me campaign performance for account 1234567890 in the last 30 days\"\n\n\"Get conversion data for all campaigns in the last week\"\n\n\"Which campaigns have the highest cost per conversion?\"\n```\n\n### Keyword Research\n\n```\n\"Generate keyword ideas for 'digital marketing' using account 1234567890\"\n\n\"Find keyword opportunities for 'AI automation' with search volume data\"\n\n\"Research keywords for the page https://example.com/services\"\n```\n\n### Custom GAQL Queries\n\n```\n\"Run this GAQL query for account 1234567890:\nSELECT campaign.name, metrics.clicks, metrics.cost_micros \nFROM campaign \nWHERE segments.date DURING LAST_7_DAYS\"\n\n\"Get keyword performance data:\nSELECT ad_group_criterion.keyword.text, metrics.ctr, metrics.average_cpc\nFROM keyword_view \nWHERE metrics.impressions > 100\"\n```\n\n## 🔍 Advanced GAQL Examples\n\n### Campaign Performance with Revenue\n```sql\nSELECT \n  campaign.id,\n  campaign.name, \n  metrics.clicks, \n  metrics.impressions,\n  metrics.cost_micros,\n  metrics.conversions,\n  metrics.conversions_value\nFROM campaign \nWHERE segments.date DURING LAST_30_DAYS\nORDER BY metrics.cost_micros DESC\n```\n\n### Keyword Performance Analysis\n```sql\nSELECT \n  campaign.name,\n  ad_group_criterion.keyword.text, \n  ad_group_criterion.keyword.match_type,\n  metrics.ctr,\n  metrics.average_cpc,\n  metrics.quality_score\nFROM keyword_view \nWHERE segments.date DURING LAST_7_DAYS\n  AND metrics.impressions > 100\nORDER BY metrics.conversions DESC\n```\n\n### Device Performance Breakdown\n```sql\nSELECT \n  campaign.name,\n  segments.device,\n  metrics.clicks,\n  metrics.cost_micros,\n  metrics.conversions\nFROM campaign\nWHERE segments.date DURING LAST_30_DAYS\n  AND campaign.status = 'ENABLED'\n```\n\n## 📁 Project Structure\n\n```\ngoogle-ads-mcp-server/\n├── server.py                           # Main MCP server\n├── oauth/\n│   ├── __init__.py                     # Package initialization\n│   └── google_auth.py                  # OAuth authentication logic\n├── google_ads_token.json               # Auto-generated token storage (gitignored)\n├── client_secret_[long-string].json    # Your OAuth credentials (gitignored)\n├── .env                                # Environment variables (gitignored)\n├── .env.example                        # Environment template\n├── .gitignore                          # Git ignore file\n├── requirements.txt                    # Python dependencies\n├── LICENSE                             # MIT License\n└── README.md                           # This file\n```\n\n## 🔒 Security & Best Practices\n\n### File Security\n- ✅ **Credential files are gitignored** - Never committed to version control\n- ✅ **Local token storage** - Tokens stored in `google_ads_token.json` locally\n- ✅ **Environment variables** - Sensitive data in `.env` file\n- ✅ **Automatic refresh** - Minimal token exposure time\n\n### Recommended File Permissions\n```bash\n# Set secure permissions for sensitive files\nchmod 600 .env\nchmod 600 google_ads_token.json\nchmod 600 client_secret_*.json\n```\n\n### Production Considerations\n1. **Use environment variables** instead of `.env` files in production\n2. **Implement rate limiting** to respect API quotas\n3. **Monitor API usage** in Google Cloud Console\n4. **Secure token storage** with proper access controls\n5. **Regular token rotation** for enhanced security\n\n## 🛠️ Troubleshooting\n\n### Authentication Issues\n\n| Issue | Symptoms | Solution |\n|-------|----------|----------|\n| **No tokens found** | \"Starting OAuth flow\" message | ✅ Normal for first-time setup - complete browser authentication |\n| **Token refresh failed** | \"Refreshing token failed\" error | ✅ Delete `google_ads_token.json` and re-authenticate |\n| **OAuth flow failed** | Browser error or no response | Check credentials file path and internet connection |\n| **Permission denied** | \"Access denied\" in browser | Ensure Google account has Google Ads access |\n\n### Configuration Issues\n\n| Issue | Symptoms | Solution |\n|-------|----------|----------|\n| **Environment variables missing** | \"Environment variable not set\" | Check `.env` file and Claude config `env` section |\n| **File not found** | \"FileNotFoundError\" | Verify absolute paths in configuration |\n| **Module import errors** | \"ModuleNotFoundError\" | Run `pip install -r requirements.txt` |\n| **Python path issues** | \"Command not found\" | Use absolute path to Python executable |\n\n### Claude Desktop Issues\n\n| Issue | Symptoms | Solution |\n|-------|----------|----------|\n| **Server not connecting** | No Google Ads tools available | Restart Claude Desktop, check config file syntax |\n| **Invalid JSON config** | Claude startup errors | Validate JSON syntax in config file |\n| **Permission errors** | \"Permission denied\" on startup | Check file permissions and paths |\n\n### API Issues\n\n| Issue | Symptoms | Solution |\n|-------|----------|----------|\n| **Invalid customer ID** | \"Customer not found\" | Use 10-digit format without dashes: `1234567890` |\n| **API quota exceeded** | \"Quota exceeded\" error | Wait for quota reset or request increase |\n| **Invalid developer token** | \"Authentication failed\" | Verify token in Google Ads API Center |\n| **GAQL syntax errors** | \"Invalid query\" | Check GAQL syntax and field names |\n\n### Debug Mode\n\nEnable detailed logging for troubleshooting:\n\n```python\n# Add to server.py for debugging\nimport logging\nlogging.basicConfig(level=logging.DEBUG)\n```\n\n### Getting Help\n\nIf you encounter issues:\n\n1. **Check the error message carefully** - it usually indicates the exact problem\n2. **Verify all file paths** are absolute and correct\n3. **Ensure environment variables** are properly set\n4. **Check Google Cloud Console** for API quotas and billing\n5. **Restart Claude Desktop** after any configuration changes\n\n## 🚀 Advanced Configuration\n\n### HTTP Transport Mode\n\nFor web deployment or remote access:\n\n```bash\n# Start server in HTTP mode\npython3 server.py --http\n```\n\n**Claude Desktop config for HTTP:**\n```json\n{\n  \"mcpServers\": {\n    \"google-ads\": {\n      \"url\": \"http://127.0.0.1:8000/mcp\"\n    }\n  }\n}\n```\n\n### Custom Token Storage\n\nModify token storage location in `oauth/google_auth.py`:\n\n```python\n# Custom token file location\ndef get_token_path():\n    return \"/custom/secure/path/google_ads_token.json\"\n```\n\n### Manager Account Configuration\n\nFor managing multiple accounts under an MCC:\n\n```bash\n# Add to .env file\nGOOGLE_ADS_LOGIN_CUSTOMER_ID=123-456-7890\n```\n\n## 🤝 Contributing\n\nWe welcome contributions! Here's how to get started:\n\n### Development Setup\n\n```bash\n# Fork and clone the repository\ngit clone https://github.com/yourusername/google-ads-mcp-server.git\ncd google-ads-mcp-server\n\n# Create development environment\npython3 -m venv .venv\nsource .venv/bin/activate\n\n# Install dependencies\npip install -r requirements.txt\n\n# Set up development environment\ncp .env.example .env\n# Add your development credentials to .env\n```\n\n### Making Changes\n\n1. **Create a feature branch:** `git checkout -b feature/amazing-feature`\n2. **Make your changes** with appropriate tests\n3. **Test thoroughly** with different account configurations\n4. **Update documentation** as needed\n5. **Commit changes:** `git commit -m 'Add amazing feature'`\n6. **Push to branch:** `git push origin feature/amazing-feature`\n7. **Open a Pull Request** with detailed description\n\n### Testing Your Changes\n\n```bash\n# Test authentication flow\npython3 server.py --test-auth\n\n# Test API connectivity\npython3 -c \"\nfrom oauth.google_auth import get_oauth_credentials\ncreds = get_oauth_credentials()\nprint('✅ Authentication successful!')\n\"\n\n# Test with Claude Desktop\n# Add your server to Claude config and test various commands\n```\n\n## 📊 API Limits and Quotas\n\n### Google Ads API Quotas\n\n- **Basic access:** 15,000 operations per day\n- **Standard access:** 40,000 operations per day\n- **Request rate:** 1,600 requests per minute per developer token\n\n### Best Practices for API Usage\n\n1. **Cache results** when possible to reduce API calls\n2. **Use date ranges** to limit data volume\n3. **Batch requests** when supported\n4. **Monitor usage** in Google Cloud Console\n5. **Implement retry logic** for rate limit errors\n\n### Quota Management\n\n```bash\n# Monitor usage in Google Cloud Console\n# Go to APIs & Services → Quotas\n# Search for \"Google Ads API\" to see current usage\n```\n\n## 📄 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n---\n\n### MIT License\n\n```\nCopyright (c) 2025 Google Ads MCP Server Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n```\n\n## 📈 Roadmap\n\n### Upcoming Features\n- 🔄 **Enhanced keyword research** with competitor analysis\n- 📊 **Built-in data visualization** with charts and graphs\n- 🤖 **AI-powered optimization suggestions**\n- 📝 **Campaign creation and management tools**\n- 🔍 **Advanced reporting capabilities**\n- 🌐 **Multi-language support**\n\n---\n\n**Made with ❤️ for the MCP community**\n\n*Connect your Google Ads data directly to AI assistants and unlock powerful advertising insights through natural language conversations.*\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "google",
        "ads",
        "marketing tools",
        "ads mcp",
        "mcp server"
      ],
      "category": "marketing"
    },
    "marketplaceadpros--amazon-ads-mcp-server": {
      "owner": "marketplaceadpros",
      "name": "amazon-ads-mcp-server",
      "url": "https://github.com/MarketplaceAdPros/amazon-ads-mcp-server",
      "imageUrl": "",
      "description": "Enables tools to interact with Amazon Advertising, analyzing campaign metrics and configurations.",
      "stars": 14,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-26T20:32:31Z",
      "readme_content": "# amazon-ads-mcp-server\n\nConnect to your Amazon Advertising Data by integrating your account with [MarketplaceAdPros](https://marketplaceadpros.com).\n\nProvides access to:\n\n- Advertising Resources in Sponsored Products, Sponsored Brands and Sponsored Display, like Campaigns, Ad Groups, Keywords, Product Ads, Targeting\n- Reports and ability to query them with plain english.\n- Marketplace Ad Pros Recommendations, Experiments and more with purchased subscription plan\n\nAlso available as a Streamable HTTP MCP Server by connecting to `https://app.marketplaceadpros.com/mcp`\n\n## Installation\n\nTo add the amazon-ads-mcp-server to your MCP client of choice, add the following to the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n### Env Vars\n\n- `BEARER_TOKEN`: The Bearer token you got from MarketplaceAdPros.com\n\n\n### Configuration\n\nYou can use it via `npx` in your Claude Desktop configuration like this:\n\n```json\n{\n  \"mcpServers\": {\n    \"marketplaceadpros\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"@marketplaceadpros/amazon-ads-mcp-server\"\n      ],\n      \"env\": {\n        \"BEARER_TOKEN\": \"abcdefghijklmnop\"\n      }\n    }\n  }\n}\n```\n\n\nOr, if you clone the repo, you can build and use in your Claude Desktop configuration like this:\n\n\n```json\n\n{\n  \"mcpServers\": {\n    \"marketplaceadpros\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/amazon-ads-mcp-server/build/index.js\"\n      ],\n      \"env\": {\n        \"BEARER_TOKEN\": \"abcdefghijklmnop\"\n      }\n    }\n  }\n}\n```\n\n\nOr, if your client supports the Streamable HTTP MCP Servers, you can just point to the MCP endpoint at `https://app.marketplaceadpros.com/mcp`. \n\n\n```json\n\n{\n  \"mcpServers\": {\n    \"marketplaceadpros\": {\n      \"type\": \"streamable-http\",\n      \"url\": \"https://app.marketplaceadpros.com/mcp\"\n    }\n  }\n}\n```\n\n\nOr, configure in [LibreChat](https://www.librechat.ai/) like:\n```yaml\n  MAP:\n    type: streamable-http\n    url: https://app.marketplaceadpros.com/mcp\n    headers:\n      Authorization: \"Bearer abcdefghijklmnop\"\n````\n\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\n\n\nThe Inspector will provide a URL to access debugging tools in your browser.\n\n### Acknowledgements\n\n- Obviously the modelcontextprotocol and Anthropic teams for the MCP Specification. [https://modelcontextprotocol.io/introduction](https://modelcontextprotocol.io/introduction)\n- [MarketplaceAdPros](https://marketplaceadpros.com?ref=github-amazon-ads-mcp-server) for enabling and sponsoring this project.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "marketplaceadpros",
        "marketing",
        "ads",
        "marketplaceadpros amazon",
        "marketing tools",
        "guides marketplaceadpros"
      ],
      "category": "marketing"
    },
    "open-strategy-partners--osp_marketing_tools": {
      "owner": "open-strategy-partners",
      "name": "osp_marketing_tools",
      "url": "https://github.com/open-strategy-partners/osp_marketing_tools",
      "imageUrl": "",
      "description": "A suite of marketing tools from Open Strategy Partners including writing style, editing codes, and product marketing value map creation.",
      "stars": 238,
      "forks": 37,
      "license": "Creative Commons Attribution Share Alike 4.0 International",
      "language": "Python",
      "updated_at": "2025-10-01T17:21:23Z",
      "readme_content": "# Open Strategy Partners (OSP) Marketing Tools for LLMs\n\n![](https://badge.mcpx.dev?type=server 'MCP Server') \n\nA comprehensive suite of tools for technical marketing content creation, optimization, and product positioning based on [Open Strategy Partners](https://openstrategypartners.com)' proven methodologies. \n\nThis software is based on the [Model Context Protocol (MCP)](https://openstrategypartners.com/blog/the-model-context-protocol-unify-your-marketing-stack-with-ai/) and is can be used by any LLM client that supports the MCP. \n\nAs of early February 2025, the LLM clients that support MCP include:\n- [Claude desktop app](https://claude.ai/download) is the easiest to use for the less technical among us (and it is made by the inventors of the MCP).\n- [Cursor IDE](https://www.cursor.com/) is very popular with our developer friends.\n- [LibreChat](https://www.librechat.ai/) is an excellent open source AI/LLM interface app.\n\nRead our vision paper on how [Agentic AI will benefit marketing](https://openstrategypartners.com/blog/mastering-llm-interaction-preparing-marketing-teams-for-agentic-ai-success-with-mcp/).\n\n## Features\n\n### 1. OSP Product Value Map Generator\nGenerate structured [OSP product value maps](https://openstrategypartners.com/the-osp-value-map/) that effectively communicate your product's worth and positioning:\n- Tagline creation and refinement\n- Position statements across market, technical, UX, and business dimensions\n- Persona development with roles, challenges, and needs\n- Value case documentation\n- Feature categorization and organization\n- Hierarchical structure for features, areas, and categories\n- Validation system for completeness and consistency\n\n### 2. OSP Meta Information Generator\nCreate optimized metadata for web content:\n- Article titles (H1) with proper keyword placement\n- Meta titles optimized for search (50-60 characters)\n- Meta descriptions with clear value propositions (155-160 characters)\n- SEO-friendly URL slugs\n- Search intent analysis\n- Mobile display optimization\n- Click-through rate enhancement suggestions\n\n### 3. OSP Content Editing Codes\nApply [OSP's semantic editing codes](https://openstrategypartners.com/resources/the-osp-editing-codes/) for comprehensive content review:\n- Scope and narrative structure analysis\n- Flow and readability enhancement\n- Style and phrasing optimization\n- Word choice and grammar verification\n- Technical accuracy validation\n- Inclusive language guidance\n- Constructive feedback generation with before/after examples\n\n### 4. OSP Technical Writing Guide\nSystematic approach to creating high-quality technical content:\n- Narrative structure development\n- Flow optimization\n- Style guidelines\n- Technical accuracy verification\n- Content type-specific guidance (tutorials, reference docs, API documentation)\n- Accessibility considerations\n- Internationalization best practices\n- Quality assurance checklists\n\n### 5. OSP On-Page SEO Guide\nComprehensive system for optimizing web content for search engines and user experience:\n- Meta content optimization (titles, descriptions with character limits and keyword placement)\n- Content depth enhancement (subtopics, data integration, multi-format optimization)\n- Search intent alignment (5 types: informational, navigational, transactional, commercial, local)\n- Technical SEO implementation (keyword research, integration protocols, internal linking rules)\n- Structured data deployment (FAQ, How-To, Product schemas)\n- Content promotion strategies (social media, advertising approaches)\n- Quality validation protocol (constructive feedback, diff-based revision system)\n- Performance measurement methods (CTR, bounce rate, time on page metrics)\n\n\n## Usage Examples\n\nIn all of these examples, it is assumed that you will provide the texts that you wish to improve, or the technical documentation that describes the product you are marketing. \n\n### Value Map Generation\n\n```plaintext\nPrompt: \"Generate an OSP value map for [Product Name] focusing on [target audience] with the following key features: [list features]\"\n\nExample:\n\"Generate an OSP value map for CloudDeploy, focusing on DevOps engineers with these key features:\n- Automated deployment pipeline\n- Infrastructure as code support\n- Real-time monitoring\n- Multi-cloud compatibility\n- [the rest of your features or text]\"\n```\n\n### Meta Information Creation\n\n```plaintext\nPrompt: \"Use the OSP meta tool to generate metadata for an article about [topic]. Primary keyword: [keyword], audience: [target audience], content type: [type]\"\n\nExample:\n\"Use the OSP meta tool to generate metadata for an article about containerization best practices. Primary keyword: 'Docker containers', audience: system administrators, content type: technical guide\"\n```\n\n### Content Editing\n\n```plaintext\nPrompt: \"Review this technical content using OSP editing codes: [paste content]\"\n\nExample:\n\"Review this technical content using OSP editing codes:\nKubernetes helps you manage containers. It's really good at what it does. You can use it to deploy your apps and make them run better.\"\n```\n\n### Technical Writing\n\n```plaintext\nPrompt: \"Apply the OSP writing guide to create a [document type] about [topic] for [audience]\"\n\nExample:\n\"Apply the OSP writing guide to create a tutorial about setting up a CI/CD pipeline for junior developers\"\n```\n## Installation\n\n### Prerequisites\n\n#### Windows\n1. Install Claude Desktop (or another MCP-enabled AI tool)\n   - Download [Claude for Desktop](https://claude.ai/download) \n   - Follow the current installation instructions: [Installing Claude Desktop](https://support.anthropic.com/en/articles/10065433-installing-claude-for-desktop)\n     \n2. Install Python 3.10 or higher:\n   - Download the latest Python installer from [python.org](https://python.org)\n   - Run the installer, checking \"Add Python to PATH\"\n   - Open Command Prompt and verify installation with `python --version`\n\n3. Install uv:\n   - Open Command Prompt as Administrator\n   - Run `pip install --user uv`\n   - Verify installation with `uv --version`\n\n#### macOS\n1. Install Claude Desktop (or another MCP-enabled AI tool)\n   - Download [Claude for Desktop](https://claude.ai/download) \n   - Follow the current installation instructions: [Installing Claude Desktop](https://support.anthropic.com/en/articles/10065433-installing-claude-for-desktop)\n     \n2. Install Python 3.10 or higher:\n   - Using Homebrew: `brew install python`\n   - Verify installation with `python3 --version`\n\n3. Install uv:\n   - Using Homebrew: `brew install uv`\n   - Alternatively: `pip3 install --user uv`\n   - Verify installation with `uv --version`\n\n## Configuration\n\nAdd the following to your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"osp_marketing_tools\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"--from\",\n                \"git+https://github.com/open-strategy-partners/osp_marketing_tools@main\",\n                \"osp_marketing_tools\"\n            ]\n        }\n    }\n}\n```\n## Attribution\n\nThis software package implements the content creation and optimization methodologies developed by [Open Strategy Partners](https://openstrategypartners.com). It is based on their LLM-enabled marketing tools and professional content creation frameworks.\n\nFor more information and original resources, visit:\n1. [The OSP Writing and Editing Guide](https://openstrategypartners.com/osp-writing-editing-guide/)\n2. [Editing Codes Quickstart Guide](https://openstrategypartners.com/blog/osp-editing-codes-quick-start-guide/)\n3. [OSP Free Resources](https://openstrategypartners.com/resources/)\n\n## License\n\nThis software is licensed under the Attribution-ShareAlike 4.0 International license from Creative Commons Corporation (\"Creative Commons\"). \n\nThis means you are free to:\n- Share: Copy and redistribute the material in any medium or format\n- Adapt: Remix, transform, and build upon the material for any purpose, even commercially\n\nUnder the following terms:\n- Attribution: You must give appropriate credit to Open Strategy Partners, provide a link to the license, and indicate if changes were made\n- ShareAlike: If you remix, transform, or build upon the material, you must distribute your contributions under the same license as the original\n\nFor the full license text, visit: [Creative Commons Attribution-ShareAlike 4.0 International License](https://creativecommons.org/licenses/by-sa/4.0/)\n\n## Contributing\n\nWe welcome contributions to improve these tools. Please submit issues and pull requests through our repository.\n\n## Support\n\nFor questions and support:\n1. Check our documentation\n2. Submit an issue in our repository\n3. Contact Open Strategy Partners for [professional consulting](https://openstrategypartners.com/contact/)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "osp_marketing_tools",
        "tools",
        "marketing",
        "osp_marketing_tools suite",
        "marketing tools",
        "partners osp_marketing_tools"
      ],
      "category": "marketing"
    },
    "pipeboard-co--meta-ads-mcp": {
      "owner": "pipeboard-co",
      "name": "meta-ads-mcp",
      "url": "https://github.com/pipeboard-co/meta-ads-mcp",
      "imageUrl": "",
      "description": "Meta Ads automation that just works. Trusted by 10,000+ businesses to analyze performance, test creatives, optimize spend, and scale results — simply and reliably.",
      "stars": 286,
      "forks": 74,
      "license": "Other",
      "language": "Python",
      "updated_at": "2025-10-04T09:13:30Z",
      "readme_content": "# Meta Ads MCP\n\nA [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server for interacting with Meta Ads. Analyze, manage and optimize Meta advertising campaigns through an AI interface. Use an LLM to retrieve performance data, visualize ad creatives, and provide strategic insights for your ads on Facebook, Instagram, and other Meta platforms.\n\n> **DISCLAIMER:** This is an unofficial third-party tool and is not associated with, endorsed by, or affiliated with Meta in any way. This project is maintained independently and uses Meta's public APIs according to their terms of service. Meta, Facebook, Instagram, and other Meta brand names are trademarks of their respective owners.\n\n[![Meta Ads MCP Server Demo](https://github.com/user-attachments/assets/3e605cee-d289-414b-814c-6299e7f3383e)](https://github.com/user-attachments/assets/3e605cee-d289-414b-814c-6299e7f3383e)\n\n[![MCP Badge](https://lobehub.com/badge/mcp/nictuku-meta-ads-mcp)](https://lobehub.com/mcp/nictuku-meta-ads-mcp)\n\nmcp-name: co.pipeboard/meta-ads-mcp\n\n## Community & Support\n\n- [Discord](https://discord.gg/YzMwQ8zrjr). Join the community.\n- [Email Support](mailto:info@pipeboard.co). Email us for support.\n\n## Table of Contents\n\n- [🚀 Getting started with Remote MCP (Recommended for Marketers)](#getting-started-with-remote-mcp-recommended)\n- [Local Installation (Technical Users Only)](#local-installation-technical-users-only)\n- [Features](#features)\n- [Configuration](#configuration)\n- [Available MCP Tools](#available-mcp-tools)\n- [Licensing](#licensing)\n- [Privacy and Security](#privacy-and-security)\n- [Testing](#testing)\n- [Troubleshooting](#troubleshooting)\n\n## Getting started with Remote MCP (Recommended)\n\nThe fastest and most reliable way to get started is to **[🚀 Get started with our Meta Ads Remote MCP](https://pipeboard.co)**. Our cloud service uses streamable HTTP transport for reliable, scalable access to Meta Ads data. No technical setup required - just connect and start analyzing your ad campaigns with AI!\n\n### For Claude Pro/Max Users\n\n1. Go to [claude.ai/settings/integrations](https://claude.ai/settings/integrations) (requires Claude Pro or Max)\n2. Click \"Add Integration\" and enter:\n   - **Name**: \"Pipeboard Meta Ads\" (or any name you prefer)\n   - **Integration URL**: `https://mcp.pipeboard.co/meta-ads-mcp`\n3. Click \"Connect\" next to the integration and follow the prompts to:\n   - Login to Pipeboard\n   - Connect your Facebook Ads account\n\nThat's it! You can now ask Claude to analyze your Meta ad campaigns, get performance insights, and manage your advertising.\n\n### For Cursor Users\n\nAdd the following to your `~/.cursor/mcp.json`. Once you enable the remote MCP, click on \"Needs login\" to finish the login process.\n\n\n```json\n{\n  \"mcpServers\": {\n    \"meta-ads-remote\": {\n      \"url\": \"https://mcp.pipeboard.co/meta-ads-mcp\"\n    }\n  }\n}\n```\n\n### For Other MCP Clients\n\nUse the Remote MCP URL: `https://mcp.pipeboard.co/meta-ads-mcp`\n\n**[📖 Get detailed setup instructions for your AI client here](https://pipeboard.co)**\n\n## Local Installation (Technical Users Only)\n\nIf you're a developer or need to customize the installation, you can run Meta Ads MCP locally. **Most marketers should use the Remote MCP above instead!** For complete technical setup instructions, see our **[Local Installation Guide](LOCAL_INSTALLATION.md)**.\n\nMeta Ads MCP also supports **streamable HTTP transport**, allowing you to run it as a standalone HTTP API for web applications and custom integrations. See **[Streamable HTTP Setup Guide](STREAMABLE_HTTP_SETUP.md)** for complete instructions.\n\n### Quick Local Setup\n\n```bash\n# Install via uvx (recommended)\nuvx meta-ads-mcp\n\n# Set your Pipeboard token\nexport PIPEBOARD_API_TOKEN=your_pipeboard_token\n\n# Add to your MCP client configuration\n```\n\nFor detailed step-by-step instructions, authentication setup, debugging, and troubleshooting, visit **[LOCAL_INSTALLATION.md](LOCAL_INSTALLATION.md)**.\n\n## Features\n\n- **AI-Powered Campaign Analysis**: Let your favorite LLM analyze your campaigns and provide actionable insights on performance\n- **Strategic Recommendations**: Receive data-backed suggestions for optimizing ad spend, targeting, and creative content\n- **Automated Monitoring**: Ask any MCP-compatible LLM to track performance metrics and alert you about significant changes\n- **Budget Optimization**: Get recommendations for reallocating budget to better-performing ad sets\n- **Creative Improvement**: Receive feedback on ad copy, imagery, and calls-to-action\n- **Dynamic Creative Testing**: Easy API for both simple ads (single headline/description) and advanced A/B testing (multiple headlines/descriptions)\n- **Campaign Management**: Request changes to campaigns, ad sets, and ads (all changes require explicit confirmation)\n- **Cross-Platform Integration**: Works with Facebook, Instagram, and all Meta ad platforms\n- **Universal LLM Support**: Compatible with any MCP client including Claude Desktop, Cursor, Cherry Studio, and more\n- **Enhanced Search**: Generic search function includes page searching when queries mention \"page\" or \"pages\"\n- **Simple Authentication**: Easy setup with secure OAuth authentication\n- **Cross-Platform Support**: Works on Windows, macOS, and Linux\n\n## Configuration\n\n### Remote MCP (Recommended)\n\n**[✨ Get started with Remote MCP here](https://pipeboard.co)** - no technical setup required! Just connect your Facebook Ads account and start asking AI to analyze your campaigns.\n\n### Local Installation (Technical Users)\n\nFor local installation configuration, authentication options, and advanced technical setup, see our **[Local Installation Guide](LOCAL_INSTALLATION.md)**.\n\n### Available MCP Tools\n\n1. `mcp_meta_ads_get_ad_accounts`\n   - Get ad accounts accessible by a user\n   - Inputs:\n     - `access_token` (optional): Meta API access token (will use cached token if not provided)\n     - `user_id`: Meta user ID or \"me\" for the current user\n     - `limit`: Maximum number of accounts to return (default: 200)\n   - Returns: List of accessible ad accounts with their details\n\n2. `mcp_meta_ads_get_account_info`\n   - Get detailed information about a specific ad account\n   - Inputs:\n     - `access_token` (optional): Meta API access token (will use cached token if not provided)\n     - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n   - Returns: Detailed information about the specified account\n\n3. `mcp_meta_ads_get_account_pages`\n   - Get pages associated with a Meta Ads account\n   - Inputs:\n     - `access_token` (optional): Meta API access token (will use cached token if not provided)\n     - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX) or \"me\" for the current user's pages\n   - Returns: List of pages associated with the account, useful for ad creation and management\n\n4. `mcp_meta_ads_get_campaigns`\n   - Get campaigns for a Meta Ads account with optional filtering\n   - Inputs:\n     - `access_token` (optional): Meta API access token (will use cached token if not provided)\n     - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n     - `limit`: Maximum number of campaigns to return (default: 10)\n     - `status_filter`: Filter by status (empty for all, or 'ACTIVE', 'PAUSED', etc.)\n   - Returns: List of campaigns matching the criteria\n\n5. `mcp_meta_ads_get_campaign_details`\n   - Get detailed information about a specific campaign\n   - Inputs:\n     - `access_token` (optional): Meta API access token (will use cached token if not provided)\n     - `campaign_id`: Meta Ads campaign ID\n   - Returns: Detailed information about the specified campaign\n\n6. `mcp_meta_ads_create_campaign`\n   - Create a new campaign in a Meta Ads account\n   - Inputs:\n     - `access_token` (optional): Meta API access token (will use cached token if not provided)\n     - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n     - `name`: Campaign name\n     - `objective`: Campaign objective (ODAX, outcome-based). Must be one of:\n       - `OUTCOME_AWARENESS`\n       - `OUTCOME_TRAFFIC`\n       - `OUTCOME_ENGAGEMENT`\n       - `OUTCOME_LEADS`\n       - `OUTCOME_SALES`\n       - `OUTCOME_APP_PROMOTION`\n       \n       Note: Legacy objectives such as `BRAND_AWARENESS`, `LINK_CLICKS`, `CONVERSIONS`, `APP_INSTALLS`, etc. are no longer valid for new campaigns and will cause a 400 error. Use the outcome-based values above. Common mappings:\n       - `BRAND_AWARENESS` → `OUTCOME_AWARENESS`\n       - `REACH` → `OUTCOME_AWARENESS`\n       - `LINK_CLICKS`, `TRAFFIC` → `OUTCOME_TRAFFIC`\n       - `POST_ENGAGEMENT`, `PAGE_LIKES`, `EVENT_RESPONSES`, `VIDEO_VIEWS` → `OUTCOME_ENGAGEMENT`\n       - `LEAD_GENERATION` → `OUTCOME_LEADS`\n       - `CONVERSIONS`, `CATALOG_SALES`, `MESSAGES` (sales-focused flows) → `OUTCOME_SALES`\n       - `APP_INSTALLS` → `OUTCOME_APP_PROMOTION`\n     - `status`: Initial campaign status (default: PAUSED)\n     - `special_ad_categories`: List of special ad categories if applicable\n     - `daily_budget`: Daily budget in account currency (in cents)\n     - `lifetime_budget`: Lifetime budget in account currency (in cents)\n     - `bid_strategy`: Bid strategy. Must be one of: `LOWEST_COST_WITHOUT_CAP`, `LOWEST_COST_WITH_BID_CAP`, `COST_CAP`, `LOWEST_COST_WITH_MIN_ROAS`.\n   - Returns: Confirmation with new campaign details\n\n   - Example:\n     ```json\n     {\n       \"name\": \"2025 - Bedroom Furniture - Awareness\",\n       \"account_id\": \"act_123456789012345\",\n       \"objective\": \"OUTCOME_AWARENESS\",\n       \"special_ad_categories\": [],\n       \"status\": \"PAUSED\",\n       \"buying_type\": \"AUCTION\",\n       \"bid_strategy\": \"LOWEST_COST_WITHOUT_CAP\",\n       \"daily_budget\": 10000\n     }\n     ```\n\n7. `mcp_meta_ads_get_adsets`\n   - Get ad sets for a Meta Ads account with optional filtering by campaign\n   - Inputs:\n     - `access_token` (optional): Meta API access token (will use cached token if not provided)\n     - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n     - `limit`: Maximum number of ad sets to return (default: 10)\n     - `campaign_id`: Optional campaign ID to filter by\n   - Returns: List of ad sets matching the criteria\n\n8. `mcp_meta_ads_get_adset_details`\n   - Get detailed information about a specific ad set\n   - Inputs:\n     - `access_token` (optional): Meta API access token (will use cached token if not provided)\n     - `adset_id`: Meta Ads ad set ID\n   - Returns: Detailed information about the specified ad set\n\n9. `mcp_meta_ads_create_adset`\n   - Create a new ad set in a Meta Ads account\n   - Inputs:\n     - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n     - `campaign_id`: Meta Ads campaign ID this ad set belongs to\n     - `name`: Ad set name\n     - `status`: Initial ad set status (default: PAUSED)\n     - `daily_budget`: Daily budget in account currency (in cents) as a string\n     - `lifetime_budget`: Lifetime budget in account currency (in cents) as a string\n     - `targeting`: Targeting specifications (e.g., age, location, interests)\n     - `optimization_goal`: Conversion optimization goal (e.g., 'LINK_CLICKS')\n     - `billing_event`: How you're charged (e.g., 'IMPRESSIONS')\n     - `bid_amount`: Bid amount in account currency (in cents)\n     - `bid_strategy`: Bid strategy (e.g., 'LOWEST_COST')\n     - `start_time`, `end_time`: Optional start/end times (ISO 8601)\n     - `access_token` (optional): Meta API access token\n   - Returns: Confirmation with new ad set details\n\n10. `mcp_meta_ads_get_ads`\n    - Get ads for a Meta Ads account with optional filtering\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n      - `limit`: Maximum number of ads to return (default: 10)\n      - `campaign_id`: Optional campaign ID to filter by\n      - `adset_id`: Optional ad set ID to filter by\n    - Returns: List of ads matching the criteria\n\n11. `mcp_meta_ads_create_ad`\n    - Create a new ad with an existing creative\n    - Inputs:\n      - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n      - `name`: Ad name\n      - `adset_id`: Ad set ID where this ad will be placed\n      - `creative_id`: ID of an existing creative to use\n      - `status`: Initial ad status (default: PAUSED)\n      - `bid_amount`: Optional bid amount (in cents)\n      - `tracking_specs`: Optional tracking specifications\n      - `access_token` (optional): Meta API access token\n    - Returns: Confirmation with new ad details\n\n12. `mcp_meta_ads_get_ad_details`\n    - Get detailed information about a specific ad\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `ad_id`: Meta Ads ad ID\n    - Returns: Detailed information about the specified ad\n\n13. `mcp_meta_ads_get_ad_creatives`\n    - Get creative details for a specific ad\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `ad_id`: Meta Ads ad ID\n    - Returns: Creative details including text, images, and URLs\n\n14. `mcp_meta_ads_create_ad_creative`\n    - Create a new ad creative using an uploaded image hash\n    - Inputs:\n      - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n      - `name`: Creative name\n      - `image_hash`: Hash of the uploaded image\n      - `page_id`: Facebook Page ID for the ad\n      - `link_url`: Destination URL\n      - `message`: Ad copy/text\n      - `headline`: Single headline for simple ads (cannot be used with headlines)\n      - `headlines`: List of headlines for dynamic creative testing (cannot be used with headline)\n      - `description`: Single description for simple ads (cannot be used with descriptions)\n      - `descriptions`: List of descriptions for dynamic creative testing (cannot be used with description)\n      - `dynamic_creative_spec`: Dynamic creative optimization settings\n      - `call_to_action_type`: CTA button type (e.g., 'LEARN_MORE')\n      - `instagram_actor_id`: Optional Instagram account ID\n      - `access_token` (optional): Meta API access token\n    - Returns: Confirmation with new creative details\n\n15. `mcp_meta_ads_update_ad_creative`\n    - Update an existing ad creative with new content or settings\n    - Inputs:\n      - `creative_id`: Meta Ads creative ID to update\n      - `name`: New creative name\n      - `message`: New ad copy/text\n      - `headline`: Single headline for simple ads (cannot be used with headlines)\n      - `headlines`: New list of headlines for dynamic creative testing (cannot be used with headline)\n      - `description`: Single description for simple ads (cannot be used with descriptions)\n      - `descriptions`: New list of descriptions for dynamic creative testing (cannot be used with description)\n      - `dynamic_creative_spec`: New dynamic creative optimization settings\n      - `call_to_action_type`: New call to action button type\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n    - Returns: Confirmation with updated creative details\n\n16. `mcp_meta_ads_upload_ad_image`\n    - Upload an image to use in Meta Ads creatives\n    - Inputs:\n      - `account_id`: Meta Ads account ID (format: act_XXXXXXXXX)\n      - `image_path`: Path to the image file to upload\n      - `name`: Optional name for the image\n      - `access_token` (optional): Meta API access token\n    - Returns: JSON response with image details including hash\n\n17. `mcp_meta_ads_get_ad_image`\n    - Get, download, and visualize a Meta ad image in one step\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `ad_id`: Meta Ads ad ID\n    - Returns: The ad image ready for direct visual analysis\n\n18. `mcp_meta_ads_update_ad`\n    - Update an ad with new settings\n    - Inputs:\n      - `ad_id`: Meta Ads ad ID\n      - `status`: Update ad status (ACTIVE, PAUSED, etc.)\n      - `bid_amount`: Bid amount in account currency (in cents for USD)\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n    - Returns: Confirmation with updated ad details and a confirmation link\n\n19. `mcp_meta_ads_update_adset`\n    - Update an ad set with new settings including frequency caps\n    - Inputs:\n      - `adset_id`: Meta Ads ad set ID\n      - `frequency_control_specs`: List of frequency control specifications\n      - `bid_strategy`: Bid strategy (e.g., 'LOWEST_COST_WITH_BID_CAP')\n      - `bid_amount`: Bid amount in account currency (in cents for USD)\n      - `status`: Update ad set status (ACTIVE, PAUSED, etc.)\n      - `targeting`: Targeting specifications including targeting_automation\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n    - Returns: Confirmation with updated ad set details and a confirmation link\n\n20. `mcp_meta_ads_get_insights`\n    - Get performance insights for a campaign, ad set, ad or account\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `object_id`: ID of the campaign, ad set, ad or account\n      - `time_range`: Time range for insights (default: maximum)\n      - `breakdown`: Optional breakdown dimension (e.g., age, gender, country)\n      - `level`: Level of aggregation (ad, adset, campaign, account)\n    - Returns: Performance metrics for the specified object\n\n21. `mcp_meta_ads_get_login_link`\n    - Get a clickable login link for Meta Ads authentication\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n    - Returns: A clickable resource link for Meta authentication\n\n22. `mcp_meta_ads_create_budget_schedule`\n    - Create a budget schedule for a Meta Ads campaign\n    - Inputs:\n      - `campaign_id`: Meta Ads campaign ID\n      - `budget_value`: Amount of budget increase\n      - `budget_value_type`: Type of budget value (\"ABSOLUTE\" or \"MULTIPLIER\")\n      - `time_start`: Unix timestamp for when the high demand period should start\n      - `time_end`: Unix timestamp for when the high demand period should end\n      - `access_token` (optional): Meta API access token\n    - Returns: JSON string with the ID of the created budget schedule or an error message\n\n23. `mcp_meta_ads_search_interests`\n    - Search for interest targeting options by keyword\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `query`: Search term for interests (e.g., \"baseball\", \"cooking\", \"travel\")\n      - `limit`: Maximum number of results to return (default: 25)\n    - Returns: Interest data with id, name, audience_size, and path fields\n\n24. `mcp_meta_ads_get_interest_suggestions`\n    - Get interest suggestions based on existing interests\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `interest_list`: List of interest names to get suggestions for (e.g., [\"Basketball\", \"Soccer\"])\n      - `limit`: Maximum number of suggestions to return (default: 25)\n    - Returns: Suggested interests with id, name, audience_size, and description fields\n\n25. `mcp_meta_ads_validate_interests`\n    - Validate interest names or IDs for targeting\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `interest_list`: List of interest names to validate (e.g., [\"Japan\", \"Basketball\"])\n      - `interest_fbid_list`: List of interest IDs to validate (e.g., [\"6003700426513\"])\n    - Returns: Validation results showing valid status and audience_size for each interest\n\n26. `mcp_meta_ads_search_behaviors`\n    - Get all available behavior targeting options\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `limit`: Maximum number of results to return (default: 50)\n    - Returns: Behavior targeting options with id, name, audience_size bounds, path, and description\n\n27. `mcp_meta_ads_search_demographics`\n    - Get demographic targeting options\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `demographic_class`: Type of demographics ('demographics', 'life_events', 'industries', 'income', 'family_statuses', 'user_device', 'user_os')\n      - `limit`: Maximum number of results to return (default: 50)\n    - Returns: Demographic targeting options with id, name, audience_size bounds, path, and description\n\n28. `mcp_meta_ads_search_geo_locations`\n    - Search for geographic targeting locations\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `query`: Search term for locations (e.g., \"New York\", \"California\", \"Japan\")\n      - `location_types`: Types of locations to search (['country', 'region', 'city', 'zip', 'geo_market', 'electoral_district'])\n      - `limit`: Maximum number of results to return (default: 25)\n    - Returns: Location data with key, name, type, and geographic hierarchy information\n\n29. `mcp_meta_ads_search` (Enhanced)\n    - Generic search across accounts, campaigns, ads, and pages\n    - Automatically includes page searching when query mentions \"page\" or \"pages\"\n    - Inputs:\n      - `access_token` (optional): Meta API access token (will use cached token if not provided)\n      - `query`: Search query string (e.g., \"Injury Payouts pages\", \"active campaigns\")\n    - Returns: List of matching record IDs in ChatGPT-compatible format\n\n## Licensing\n\nMeta Ads MCP is licensed under the [Business Source License 1.1](LICENSE), which means:\n\n- ✅ **Free to use** for individual and business purposes\n- ✅ **Modify and customize** as needed\n- ✅ **Redistribute** to others\n- ✅ **Becomes fully open source** (Apache 2.0) on January 1, 2029\n\nThe only restriction is that you cannot offer this as a competing hosted service. For questions about commercial licensing, please contact us.\n\n## Privacy and Security\n\nMeta Ads MCP follows security best practices with secure token management and automatic authentication handling. \n\n- **Remote MCP**: All authentication is handled securely in the cloud - no local token storage required\n- **Local Installation**: Tokens are cached securely on your local machine - see [Local Installation Guide](LOCAL_INSTALLATION.md) for details\n\n## Testing\n\n### Basic Testing\n\nTest your Meta Ads MCP connection with any MCP client:\n\n1. **Verify Account Access**: Ask your LLM to use `mcp_meta_ads_get_ad_accounts`\n2. **Check Account Details**: Use `mcp_meta_ads_get_account_info` with your account ID\n3. **List Campaigns**: Try `mcp_meta_ads_get_campaigns` to see your ad campaigns\n\nFor detailed local installation testing, see [Local Installation Guide](LOCAL_INSTALLATION.md).\n\n## Troubleshooting\n\n### 💡 Quick Fix: Skip the Technical Setup!\n\nThe easiest way to avoid any setup issues is to **[🎯 use our Remote MCP instead](https://pipeboard.co)**. No downloads, no configuration - just connect your ads account and start getting AI insights on your campaigns immediately!\n\n### Local Installation Issues\n\nFor comprehensive troubleshooting, debugging, and local installation issues, see our **[Local Installation Guide](LOCAL_INSTALLATION.md)** which includes:\n\n- Authentication troubleshooting\n- Installation issues and solutions\n- API error resolution\n- Debug logs and diagnostic commands\n- Performance optimization tips\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ads",
        "tools",
        "marketing",
        "marketing tools",
        "ads automation",
        "meta ads"
      ],
      "category": "marketing"
    },
    "stape-io--google-tag-manager-mcp-server": {
      "owner": "stape-io",
      "name": "google-tag-manager-mcp-server",
      "url": "https://github.com/stape-io/google-tag-manager-mcp-server",
      "imageUrl": "",
      "description": "in Google OAuth, and provide an interface to the Google Tag Manager API.",
      "stars": 55,
      "forks": 24,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:32Z",
      "readme_content": "# MCP Server for Google Tag Manager\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/stape-io/google-tag-manager-mcp-server)](https://archestra.ai/mcp-catalog/stape-io__google-tag-manager-mcp-server)\n\nThis is a server that supports remote MCP connections, with Google OAuth built-in and provides an interface to the Google Tag Manager API.\n\n\n## Access the remote MCP server from Claude Desktop\n\nOpen Claude Desktop and navigate to Settings -> Developer -> Edit Config. This opens the configuration file that controls which MCP servers Claude can access.\n\nReplace the content with the following configuration. Once you restart Claude Desktop, a browser window will open showing your OAuth login page. Complete the authentication flow to grant Claude access to your MCP server. After you grant access, the tools will become available for you to use.\n\n```json\n{\n  \"mcpServers\": {\n    \"gtm-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://gtm-mcp.stape.ai/sse\"\n      ]\n    }\n  }\n}\n```\n\n### Troubleshooting\n\n**MCP Server Name Length Limit**\n\nSome MCP clients (like Cursor AI) have a 60-character limit for the combined MCP server name + tool name length. If you use a longer server name in your configuration (e.g., `gtm-mcp-server-your-additional-long-name`), some tools may be filtered out.\n\nTo avoid this issue:\n- Use shorter server names in your MCP configuration (e.g., `gtm-mcp-server`)\n\n**Clearing MCP Cache**\n\n[mcp-remote](https://github.com/geelen/mcp-remote#readme) stores all the credential information inside ~/.mcp-auth (or wherever your MCP_REMOTE_CONFIG_DIR points to). If you're having persistent issues, try running:\nYou can run rm -rf ~/.mcp-auth to clear any locally stored state and tokens.\n```\nrm -rf ~/.mcp-auth\n```\nThen restarting your MCP client.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "google",
        "api",
        "tools",
        "marketing tools",
        "tag manager",
        "io google"
      ],
      "category": "marketing"
    },
    "stape-io--stape-mcp-server": {
      "owner": "stape-io",
      "name": "stape-mcp-server",
      "url": "https://github.com/stape-io/stape-mcp-server",
      "imageUrl": "",
      "description": "powered IDEs like Cursor.",
      "stars": 1,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T22:32:32Z",
      "readme_content": "# Stape MCP Server\n\nThis project implements an **MCP (Model Context Protocol) server** for the **Stape** platform.\n\n## Prerequisites\n- Node.js (v18 or higher)\n\n## Access the remote MCP server from Claude Desktop\n\nOpen Claude Desktop and navigate to Settings -> Developer -> Edit Config. This opens the configuration file that controls which MCP servers Claude can access.\n\nReplace the content with the following configuration (make sure npx is installed on your machine). Get Stape API key from your Stape account and set it in the configuration file instead of ${your_stape_api_key}. Once you restart Claude Desktop.\n\n```json\n{\n  \"mcpServers\": {\n    \"stape-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://mcp.stape.ai/sse\",\n        \"--header\",\n        \"Authorization: ${your_stape_api_key}\"\n      ]\n    }\n  }\n}\n```\n\n### Troubleshooting\n\n**MCP Server Name Length Limit**\n\nSome MCP clients (like Cursor AI) have a 60-character limit for the combined MCP server name + tool name length. If you use a longer server name in your configuration (e.g., `stape-mcp-server-your-additional-long-name`), some tools may be filtered out.\n\nTo avoid this issue:\n- Use shorter server names in your MCP configuration (e.g., `stape-mcp-server`)\n\n**Clearing MCP Cache**\n\n[mcp-remote](https://github.com/geelen/mcp-remote#readme) stores all the credential information inside ~/.mcp-auth (or wherever your MCP_REMOTE_CONFIG_DIR points to). If you're having persistent issues, try running:\nYou can run rm -rf ~/.mcp-auth to clear any locally stored state and tokens.\n```\nrm -rf ~/.mcp-auth\n```\nThen restarting your MCP client.\n\n## Open Source\n\nThe **Stape MCP Server** is developed and maintained by [Stape Team](https://stape.io/) under the Apache 2.0 license.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tools",
        "stape",
        "marketing",
        "marketing tools",
        "editing marketing",
        "marketing content"
      ],
      "category": "marketing"
    }
  }
}