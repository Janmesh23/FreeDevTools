name: Build and Deploy

on:
  push:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  build-and-deploy:
    # Prod
    # runs-on: ubuntu-latest
    # Self hosted
    runs-on: self-hosted
    environment: production # This tells GitHub to use the production environment secrets

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          # fetch-depth: 0 is recommended for a more reliable diff across multiple commits in a push
          fetch-depth: 0

      - name: Detect changed sections
        id: detect-changes
        run: |
          echo "üîç Detecting changes based on custom build rules..."

          # Use a more robust diff command that covers all commits in a push
          all_changed=$(git diff --name-only ${{ github.event.before }} ${{ github.event.after }} || git diff --name-only HEAD~1 HEAD)

          if [ -z "$all_changed" ]; then
            echo "‚ùå No changes detected. Skipping build and deploy."
            echo "should_deploy=false" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "üìÅ All changed files:"
          echo "$all_changed" | sed 's/^/ - /'

          changed_dirs=""
          requires_full_rebuild=false

          # Helper function to add a directory to the list if it's not already there
          add_dir() {
            if [[ ! "$changed_dirs" =~ (^|[[:space:]])$1($|[[:space:]]) ]]; then
              changed_dirs="$changed_dirs $1"
            fi
          }

          for file in $all_changed; do
            case "$file" in
              frontend/src/pages/t/*)
                add_dir "t"
                ;;
              frontend/src/pages/markdown_pages/tldr/*|frontend/src/pages/tldr/*)
                add_dir "markdown_pages"
                add_dir "tldr"
                ;;
              frontend/src/pages/html_pages/cheatsheets/*|frontend/src/pages/c/*)
                add_dir "html_pages"
                add_dir "c"
                ;;
              frontend/src/pages/svg_icons/*)
                add_dir "svg_icons"
                ;;
              frontend/src/pages/png_icons/*)
                # If png_icons changes, we build both png_icons and svg_icons
                add_dir "png_icons"
                add_dir "svg_icons"
                ;;
              frontend/src/pages/emojies/*)
                add_dir "emojies"
                ;;
              frontend/src/pages/cars/*)
                add_dir "cars"
                ;;
              frontend/src/pages/mcp/*)
                add_dir "mcp"
                ;;
              frontend/public/mcp/*)
                add_dir "mcp"
                ;;
              frontend/src/pages/index.astro)
                # Index page changes only need to rebuild the index page
                add_dir "index_only"
                ;;
              frontend/public/*)
                # Public assets are served directly, just sync without rebuild
                add_dir "public_assets_only"
                ;;
              frontend/src/*)
                # Other src changes (components, layouts, styles, etc.) need full rebuild
                requires_full_rebuild=true
                ;;
              *)
                # You can add a default case here if needed, for example, to build everything
                # echo "Change detected in unhandled path: $file"
                ;;
            esac
          done

          # Clean up leading/trailing whitespace
          changed_dirs=$(echo "$changed_dirs" | xargs)

          # Determine final build strategy
          if [ "$requires_full_rebuild" = true ]; then
            echo "üîß Components/layouts/styles changed - requires full rebuild"
            echo "üì¶ Build strategy: full_rebuild"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "changed_sections=full_rebuild" >> $GITHUB_OUTPUT
          elif [ -n "$changed_dirs" ]; then
            echo "üì¶ Changed sections to build: $changed_dirs"
            echo "should_deploy=true" >> $GITHUB_OUTPUT
            echo "changed_sections=$changed_dirs" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No changes matched the build rules. Skipping deployment."
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: Setup Node.js
        if: steps.detect-changes.outputs.should_deploy == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: "22.17.0"

      - name: Exclude unchanged sections from build
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          echo "üîß Excluding unchanged sections from build..."
          cd frontend/src/pages

          changed_sections="${{ steps.detect-changes.outputs.changed_sections }}"
          echo "Building strategy: $changed_sections"

          # Only exclude sections if we're doing selective page builds
          if [[ "$changed_sections" != "full_rebuild" && "$changed_sections" != "public_assets_only" && "$changed_sections" != "index_only" ]]; then
            echo "üéØ Selective build mode"
            for dir in */; do
              if [ -d "$dir" ]; then
                dir_name=${dir%/}
                if [[ "$changed_sections" =~ (^|[[:space:]])$dir_name($|[[:space:]]) ]] || [[ "$dir_name" == _* ]]; then
                  echo "‚úÖ Including: $dir_name"
                else
                  echo "‚ùå Excluding: $dir_name -> _$dir_name"
                  mv "$dir" "_$dir"
                fi
              fi
            done
          elif [[ "$changed_sections" == "full_rebuild" ]]; then
            echo "üîß Full rebuild mode - building all sections"
            for dir in */; do
              if [ -d "$dir" ]; then
                dir_name=${dir%/}
                echo "‚úÖ Including: $dir_name"
              fi
            done
          elif [[ "$changed_sections" == "index_only" ]]; then
            echo "üè† Index page only mode - excluding all other pages"
            for dir in */; do
              if [ -d "$dir" ]; then
                dir_name=${dir%/}
                if [[ "$dir_name" == _* ]]; then
                  echo "‚úÖ Keeping excluded: $dir_name"
                else
                  echo "‚ùå Excluding: $dir_name -> _$dir_name"
                  mv "$dir" "_$dir"
                fi
              fi
            done
          else
            echo "üîß Public assets only mode - no page exclusions needed"
          fi

      - name: Install dependencies
        if: steps.detect-changes.outputs.should_deploy == 'true' && steps.detect-changes.outputs.changed_sections != 'public_assets_only'
        run: |
          echo "üì¶ Installing dependencies..."
          cd frontend
          npm install

      - name: Build project
        if: steps.detect-changes.outputs.should_deploy == 'true' && steps.detect-changes.outputs.changed_sections != 'public_assets_only'
        run: |
          echo "üî® Building project..."
          cd frontend
          npx astro build
        env:
          NODE_OPTIONS: "--max-old-space-size=16384"
          UV_THREADPOOL_SIZE: "16"
          PUBLIC_GA_ID: ${{ secrets.PUBLIC_GA_ID }}
          MEILISEARCH_API_KEY: ${{ secrets.MEILISEARCH_API_KEY }}

      - name: Restore original folder structure
        if: always() && steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          echo "üîÑ Restoring original folder structure..."
          cd frontend/src/pages

          for dir in _*/; do
            if [ -d "$dir" ]; then
              original_name=${dir#_}
              original_name=${original_name%/}
              echo "Restoring _$original_name to $original_name"
              mv "$dir" "$original_name/"
            fi
          done

      - name: Setup SSH
        if: steps.detect-changes.outputs.should_deploy == 'true'
        uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add server to known hosts
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to server
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          echo "üöÄ Deploying to server..."
          echo "Deployed sections: ${{ steps.detect-changes.outputs.changed_sections }}"

          changed_sections="${{ steps.detect-changes.outputs.changed_sections }}"

          if [[ "$changed_sections" == "public_assets_only" ]]; then
            echo "üìÅ Only public assets changed - syncing files only"
            rsync -rvz --no-perms --no-owner --no-group --no-times --progress ./frontend/public/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/tools/
          else
            echo "üì¶ Full deployment"
            rsync -rvz --no-perms --no-owner --no-group --no-times --progress ./frontend/dist/ ${{ secrets.SSH_USERNAME }}@${{ secrets.SSH_HOST }}:/tools/
          fi

      - name: Install awscurl
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          pip install awscurl

      - name: Invalidate CloudFront cache via awscurl
        if: steps.detect-changes.outputs.should_deploy == 'true'
        run: |
          XML_PAYLOAD=$(cat <<EOF
          <InvalidationBatch xmlns="http://cloudfront.amazonaws.com/doc/2020-05-31/">
            <Paths>
              <Quantity>1</Quantity>
              <Items>
                <Path>/*</Path>
              </Items>
            </Paths>
            <CallerReference>$(date +%s)</CallerReference>
          </InvalidationBatch>
          EOF
          )

          echo "Creating CloudFront invalidation..."
          RESPONSE=$(awscurl --service cloudfront \
            --region us-east-1 \
            --access_key ${{ secrets.AWS_ACCESS_KEY_ID_CLOUDFRONT_INVALIDATE }} \
            --secret_key ${{ secrets.AWS_SECRET_ACCESS_KEY_CLOUDFRONT_INVALIDATE }} \
            --header "Content-Type: text/xml" \
            --data "$XML_PAYLOAD" \
            --request POST \
            https://cloudfront.amazonaws.com/2020-05-31/distribution/${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}/invalidation)

          echo "Response:"
          echo "$RESPONSE"

      - name: Generate search index data and deploy to server
        run: |
          echo "üîç Generating search index data..."
          cd search-index
          make sync-search-index
          echo "‚úÖ Search index generation completed"

      - name: Skip deployment message
        if: steps.detect-changes.outputs.should_deploy == 'false'
        run: |
          echo "‚è≠Ô∏è Skipping deployment - no changes matched the build rules."
