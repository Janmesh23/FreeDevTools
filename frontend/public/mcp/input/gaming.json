{
  "category": "gaming",
  "categoryDisplay": "Gaming",
  "description": "Integration with gaming related data, game engines, and services",
  "totalRepositories": 12,
  "repositories": {
    "CoderGamester--mcp-unity": {
      "owner": "CoderGamester",
      "name": "mcp-unity",
      "url": "https://github.com/CoderGamester/mcp-unity",
      "imageUrl": "",
      "description": "MCP Server for Unity3d Game Engine integration for game development",
      "stars": 1004,
      "forks": 122,
      "license": "MIT License",
      "language": "C#",
      "updated_at": "2025-10-04T07:27:09Z",
      "readme_content": "# MCP Unity Editor (Game Engine)\n\n[![](https://badge.mcpx.dev?status=on 'MCP Enabled')](https://modelcontextprotocol.io/introduction)\n[![](https://img.shields.io/badge/Unity-000000?style=flat&logo=unity&logoColor=white 'Unity')](https://unity.com/releases/editor/archive)\n[![](https://img.shields.io/badge/Node.js-339933?style=flat&logo=nodedotjs&logoColor=white 'Node.js')](https://nodejs.org/en/download/)\n[![](https://img.shields.io/github/stars/CoderGamester/mcp-unity 'Stars')](https://github.com/CoderGamester/mcp-unity/stargazers)\n[![](https://img.shields.io/github/last-commit/CoderGamester/mcp-unity 'Last Commit')](https://github.com/CoderGamester/mcp-unity/commits/main)\n[![](https://img.shields.io/badge/License-MIT-red.svg 'MIT License')](https://opensource.org/licenses/MIT)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/CoderGamester/mcp-unity)](https://archestra.ai/mcp-catalog/codergamester__mcp-unity)\n\n| [🇺🇸English](README.md) | [🇨🇳简体中文](README_zh-CN.md) | [🇯🇵日本語](README-ja.md) |\n|----------------------|---------------------------------|----------------------|\n\n```        \n                              ,/(/.   *(/,                                  \n                          */(((((/.   *((((((*.                             \n                     .*((((((((((/.   *((((((((((/.                         \n                 ./((((((((((((((/    *((((((((((((((/,                     \n             ,/(((((((((((((/*.           */(((((((((((((/*.                \n            ,%%#((/((((((*                    ,/(((((/(#&@@(                \n            ,%%##%%##((((((/*.             ,/((((/(#&@@@@@@(                \n            ,%%######%%##((/(((/*.    .*/(((//(%@@@@@@@@@@@(                \n            ,%%####%#(%%#%%##((/((((((((//#&@@@@@@&@@@@@@@@(                \n            ,%%####%(    /#%#%%%##(//(#@@@@@@@%,   #@@@@@@@(                \n            ,%%####%(        *#%###%@@@@@@(        #@@@@@@@(                \n            ,%%####%(           #%#%@@@@,          #@@@@@@@(                \n            ,%%##%%%(           #%#%@@@@,          #@@@@@@@(                \n            ,%%%#*              #%#%@@@@,             *%@@@(                \n            .,      ,/##*.      #%#%@@@@,     ./&@#*      *`                \n                ,/#%#####%%#/,  #%#%@@@@, ,/&@@@@@@@@@&\\.                    \n                 `*#########%%%%###%@@@@@@@@@@@@@@@@@@&*´                   \n                    `*%%###########%@@@@@@@@@@@@@@&*´                        \n                        `*%%%######%@@@@@@@@@@&*´                            \n                            `*#%%##%@@@@@&*´                                 \n                               `*%#%@&*´                                     \n                                                       \n     ███╗   ███╗ ██████╗██████╗         ██╗   ██╗███╗   ██╗██╗████████╗██╗   ██╗\n     ████╗ ████║██╔════╝██╔══██╗        ██║   ██║████╗  ██║██║╚══██╔══╝╚██╗ ██╔╝\n     ██╔████╔██║██║     ██████╔╝        ██║   ██║██╔██╗ ██║██║   ██║    ╚████╔╝ \n     ██║╚██╔╝██║██║     ██╔═══╝         ██║   ██║██║╚██╗██║██║   ██║     ╚██╔╝  \n     ██║ ╚═╝ ██║╚██████╗██║             ╚██████╔╝██║ ╚████║██║   ██║      ██║   \n     ╚═╝     ╚═╝ ╚═════╝╚═╝              ╚═════╝ ╚═╝  ╚═══╝╚═╝   ╚═╝      ╚═╝   \n```       \n\nMCP Unity is an implementation of the Model Context Protocol for Unity Editor, allowing AI assistants to interact with your Unity projects. This package provides a bridge between Unity and a Node.js server that implements the MCP protocol, enabling AI agents like Claude, Windsurf, and Cursor to execute operations within the Unity Editor.\n\n<a href=\"https://glama.ai/mcp/servers/@CoderGamester/mcp-unity\">\n  <img width=\"400\" height=\"200\" src=\"https://glama.ai/mcp/servers/@CoderGamester/mcp-unity/badge\" alt=\"Unity MCP server\" />\n</a>\n\n## Features\n\n### IDE Integration - Package Cache Access\n\nMCP Unity provides automatic integration with VSCode-like IDEs (Visual Studio Code, Cursor, Windsurf) by adding the Unity `Library/PackedCache` folder to your workspace. This feature:\n\n- Improves code intelligence for Unity packages\n- Enables better autocompletion and type information for Unity packages\n- Helps AI coding assistants understand your project's dependencies\n\n### MCP Server Tools\n\nThe following tools are available for manipulating and querying Unity scenes and GameObjects via MCP:\n\n- `execute_menu_item`: Executes Unity menu items (functions tagged with the MenuItem attribute)\n  > **Example prompt:** \"Execute the menu item 'GameObject/Create Empty' to create a new empty GameObject\"\n\n- `select_gameobject`: Selects game objects in the Unity hierarchy by path or instance ID\n  > **Example prompt:** \"Select the Main Camera object in my scene\"\n\n- `update_gameobject`: Updates a GameObject's core properties (name, tag, layer, active/static state), or creates the GameObject if it does not exist\n  > **Example prompt:** \"Set the Player object's tag to 'Enemy' and make it inactive\"\n\n- `update_component`: Updates component fields on a GameObject or adds it to the GameObject if it does not contain the component\n  > **Example prompt:** \"Add a Rigidbody component to the Player object and set its mass to 5\"\n\n- `add_package`: Installs new packages in the Unity Package Manager\n  > **Example prompt:** \"Add the TextMeshPro package to my project\"\n\n- `run_tests`: Runs tests using the Unity Test Runner\n  > **Example prompt:** \"Run all the EditMode tests in my project\"\n\n- `send_console_log`: Send a console log to Unity\n  > **Example prompt:** \"Send a console log to Unity Editor\"\n\n- `add_asset_to_scene`: Adds an asset from the AssetDatabase to the Unity scene\n  > **Example prompt:** \"Add the Player prefab from my project to the current scene\"\n\n- `create_prefab`: Creates a prefab with optional MonoBehaviour script and serialized field values\n  > **Example prompt:** \"Create a prefab named 'Player' from the 'PlayerController' script\"\n\n### MCP Server Resources\n\n- `unity://menu-items`: Retrieves a list of all available menu items in the Unity Editor to facilitate `execute_menu_item` tool\n  > **Example prompt:** \"Show me all available menu items related to GameObject creation\"\n\n- `unity://scenes-hierarchy`: Retrieves a list of all game objects in the current Unity scene hierarchy\n  > **Example prompt:** \"Show me the current scenes hierarchy structure\"\n\n- `unity://gameobject/{id}`: Retrieves detailed information about a specific GameObject by instance ID or object path in the scene hierarchy, including all GameObject components with it's serialized properties and fields\n  > **Example prompt:** \"Get me detailed information about the Player GameObject\"\n\n- `unity://logs`: Retrieves a list of all logs from the Unity console\n  > **Example prompt:** \"Show me the recent error messages from the Unity console\"\n\n- `unity://packages`: Retrieves information about installed and available packages from the Unity Package Manager\n  > **Example prompt:** \"List all the packages currently installed in my Unity project\"\n\n- `unity://assets`: Retrieves information about assets in the Unity Asset Database\n  > **Example prompt:** \"Find all texture assets in my project\"\n\n- `unity://tests/{testMode}`: Retrieves information about tests in the Unity Test Runner\n  > **Example prompt:** \"List all available tests in my Unity project\"\n\n## Requirements\n- Unity 2022.3 or later - to [install the server](#install-server)\n- Node.js 18 or later - to [start the server](#start-server)\n- npm 9 or later - to [debug the server](#debug-server)\n\n> [!IMPORTANT]\n> **Project Path Cannot Contain Spaces**\n>\n> It is crucial that the file path to your Unity project **does not contain any spaces**.\n> If your project path includes spaces, the MCP Client (e.g., Cursor, Claude, Windsurf) will fail to connect to the MCP Unity server.\n>\n> **Examples:**\n> -   ✅ **Works:** `C:\\Users\\YourUser\\Documents\\UnityProjects\\MyAwesomeGame`\n> -   ❌ **Fails:** `C:\\Users\\Your User\\Documents\\Unity Projects\\My Awesome Game`\n>\n> Please ensure your project is located in a path without spaces before proceeding with the installation.\n\n## <a name=\"install-server\"></a>Installation\n\nInstalling this MCP Unity Server is a multi-step process:\n\n### Step 1: Install Node.js \n> To run MCP Unity server, you'll need to have Node.js 18 or later installed on your computer:\n\n\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Windows</span></summary>\n\n1. Visit the [Node.js download page](https://nodejs.org/en/download/)\n2. Download the Windows Installer (.msi) for the LTS version (recommended)\n3. Run the installer and follow the installation wizard\n4. Verify the installation by opening PowerShell and running:\n   ```bash\n   node --version\n   ```\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">macOS</span></summary>\n\n1. Visit the [Node.js download page](https://nodejs.org/en/download/)\n2. Download the macOS Installer (.pkg) for the LTS version (recommended)\n3. Run the installer and follow the installation wizard\n4. Alternatively, if you have Homebrew installed, you can run:\n   ```bash\n   brew install node@18\n   ```\n5. Verify the installation by opening Terminal and running:\n   ```bash\n   node --version\n   ```\n</details>\n\n### Step 2: Install Unity MCP Server package via Unity Package Manager\n1. Open the Unity Package Manager (Window > Package Manager)\n2. Click the \"+\" button in the top-left corner\n3. Select \"Add package from git URL...\"\n4. Enter: `https://github.com/CoderGamester/mcp-unity.git`\n5. Click \"Add\"\n\n![package manager](https://github.com/user-attachments/assets/a72bfca4-ae52-48e7-a876-e99c701b0497)\n\n### Step 3: Configure AI LLM Client\n\n<details open>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Option 1: Configure using Unity Editor</span></summary>\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Click on the \"Configure\" button for your AI LLM client as shown in the image below\n\n\n\n4. Confirm the configuration installation with the given popup\n\n![image](https://github.com/user-attachments/assets/b1f05d33-3694-4256-a57b-8556005021ba)\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Option 2: Configure Manually</span></summary>\n\nOpen the MCP configuration file of your AI client (e.g. claude_desktop_config.json in Claude Desktop) and copy the following text:\n\n> Replace `ABSOLUTE/PATH/TO` with the absolute path to your MCP Unity installation or just copy the text from the Unity Editor MCP Server window (Tools > MCP Unity > Server Window).\n\n```json\n{\n   \"mcpServers\": {\n       \"mcp-unity\": {\n          \"command\": \"node\",\n          \"args\": [\n             \"ABSOLUTE/PATH/TO/mcp-unity/Server~/build/index.js\"\n          ]\n       }\n   }\n}\n```\n\n</details>\n\n## <a name=\"start-server\"></a>Start Unity Editor MCP Server\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Click \"Start Server\" to start the WebSocket server\n4. Open Claude Desktop or your AI Coding IDE (e.g. Cursor IDE, Windsurf IDE, etc.) and start executing Unity tools\n   \n![connect](https://github.com/user-attachments/assets/2e266a8b-8ba3-4902-b585-b220b11ab9a2)\n\n> When the AI client connects to the WebSocket server, it will automatically show in the green box in the window\n\n## Optional: Set WebSocket Port\nBy default, the WebSocket server runs on port '8090'. You can change this port in two ways:\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Change the \"WebSocket Port\" value to your desired port number\n4. Unity will setup the system environment variable UNITY_PORT to the new port number\n5. Restart the Node.js server\n6. Click again on \"Start Server\" to reconnect the Unity Editor web socket to the Node.js MCP Server\n\n## Optional: Set Timeout\n\nBy default, the timeout between the MCP server and the WebSocket is 10 seconds.\nYou can change depending on the OS you are using:\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Change the \"Request Timeout (seconds)\" value to your desired timeout seconds\n4. Unity will setup the system environment variable UNITY_REQUEST_TIMEOUT to the new timeout value\n5. Restart the Node.js server\n6. Click again on \"Start Server\" to reconnect the Unity Editor web socket to the Node.js MCP Server\n\n> [!TIP]  \n> The timeout between your AI Coding IDE (e.g., Claude Desktop, Cursor IDE, Windsurf IDE) and the MCP Server depends on the IDE.\n\n## Optional: Allow Remote MCP Bridge Connections\n\nBy default, the WebSocket server binds to 'localhost'. To allow MCP bridge connections from other machines:\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Enable the \"Allow Remote Connections\" checkbox\n4. Unity will bind the WebSocket server to '0.0.0.0' (all interfaces)\n5. Restart the Node.js server to apply the new host configuration\n6. Set the environment variable UNITY_HOST to your Unity machine's IP address when running the MCP bridge remotely: `UNITY_HOST=192.168.1.100 node server.js`\n\n## <a name=\"debug-server\"></a>Debugging the Server\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Building the Node.js Server</span></summary>\n\nThe MCP Unity server is built using Node.js . It requires to compile the TypeScript code to JavaScript in the `build` directory.\nIn case of issues, you can force install it in by:\n\n1. Open the Unity Editor\n2. Navigate to Tools > MCP Unity > Server Window\n3. Click on \"Force Install Server\" button\n\n\n\nIf you want to build it manually, you can follow these steps:\n\n1. Open a terminal/PowerShell/Command Prompt\n\n2. Navigate to the Server directory:\n   ```bash\n   cd ABSOLUTE/PATH/TO/mcp-unity/Server~\n   ```\n\n3. Install dependencies:\n   ```bash\n   npm install\n   ```\n\n4. Build the server:\n   ```bash\n   npm run build\n   ```\n\n5. Run the server:\n   ```bash\n   node build/index.js\n   ```\n\n</details>\n   \n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Debugging with MCP Inspector</span></summary>\n\nDebug the server with [@modelcontextprotocol/inspector](https://github.com/modelcontextprotocol/inspector):\n   - Powershell\n   ```powershell\n   npx @modelcontextprotocol/inspector node Server~/build/index.js\n   ```\n   - Command Prompt/Terminal\n   ```cmd\n   npx @modelcontextprotocol/inspector node Server~/build/index.js\n   ```\n\nDon't forget to shutdown the server with `Ctrl + C` before closing the terminal or debugging it with the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Enable Console Logs</span></summary>\n\n1. Enable logging on your terminal or into a log.txt file:\n   - Powershell\n   ```powershell\n   $env:LOGGING = \"true\"\n   $env:LOGGING_FILE = \"true\"\n   ```\n   - Command Prompt/Terminal\n   ```cmd\n   set LOGGING=true\n   set LOGGING_FILE=true\n   ```\n\n</details>\n\n## Frequently Asked Questions\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">What is MCP Unity?</span></summary>\n\nMCP Unity is a powerful bridge that connects your Unity Editor environment to AI assistants LLM tools using the Model Context Protocol (MCP).\n\nIn essence, MCP Unity:\n-   Exposes Unity Editor functionalities (like creating objects, modifying components, running tests, etc.) as \"tools\" and \"resources\" that an AI can understand and use.\n-   Runs a WebSocket server inside Unity and a Node.js server (acting as a WebSocket client to Unity) that implements the MCP. This allows AI assistants to send commands to Unity and receive information back.\n-   Enables you to use natural language prompts with your AI assistant to perform complex tasks within your Unity project, significantly speeding up development workflows.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Why use MCP Unity?</span></summary>\n\nMCP Unity offers several compelling advantages for developers, artists, and project managers:\n\n-   **Accelerated Development:** Automate repetitive tasks, generate boilerplate code, and manage assets using AI prompts. This frees up your time to focus on creative and complex problem-solving.\n-   **Enhanced Productivity:** Interact with Unity Editor features without needing to manually click through menus or write scripts for simple operations. Your AI assistant becomes a direct extension of your capabilities within Unity.\n-   **Improved Accessibility:** Allows users who are less familiar with the deep intricacies of the Unity Editor or C# scripting to still make meaningful contributions and modifications to a project through AI guidance.\n-   **Seamless Integration:** Designed to work with various AI assistants and IDEs that support MCP, providing a consistent way to leverage AI across your development toolkit.\n-   **Extensibility:** The protocol and the toolset can be expanded. You can define new tools and resources to expose more of your project-specific or Unity's functionality to AI.\n-   **Collaborative Potential:** Facilitates a new way of collaborating where AI can assist in tasks traditionally done by team members, or help in onboarding new developers by guiding them through project structures and operations.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">How does MCP Unity compare with the upcoming Unity 6.2 AI features?</span></summary>\n\nUnity 6.2 is set to introduce new built-in AI tools, including the previous Unity Muse (for generative AI capabilities like texture and animation generation) and Unity Sentis (for running neural networks in Unity runtime). As Unity 6.2 is not yet fully released, this comparison is based on publicly available information and anticipated functionalities:\n\n-   **Focus:**\n    -   **MCP Unity:** Primarily focuses on **Editor automation and interaction**. It allows external AI (like LLM-based coding assistants) to *control and query the Unity Editor itself* to manipulate scenes, assets, and project settings. It's about augmenting the *developer's workflow* within the Editor.\n    -   **Unity 6.2 AI:**\n        -   Aims at in-Editor content creation (generating textures, sprites, animations, behaviors, scripts) and AI-powered assistance for common tasks, directly integrated into the Unity Editor interface.\n        -   A fine-tuned model to ask any question about Unity's documentation and API structure, with customized examples more accurate to Unity's environment.\n        -   Adds the functionality to run AI model inference, allowing developers to deploy and run pre-trained neural networks *within your game or application* for features like NPC behavior, image recognition, etc.\n\n-   **Use Cases:**\n    -   **MCP Unity:** \"Create a new 3D object, name it 'Player', add a Rigidbody, and set its mass to 10.\" \"Run all Play Mode tests.\" \"Ask to fix the error on the console log.\" \"Execute the custom menu item 'Prepare build for iOS' and fix any errors that may occur.\"\n    -   **Unity 6.2 AI:** \"Generate a sci-fi texture for this material.\" \"Update all trees position in the scene to be placed inside of terrain zones tagged with 'forest'.\" \"Create a walking animation for this character.\" \"Generate 2D sprites to complete the character.\" \"Ask details about the error on the console log.\"\n\n-   **Complementary, Not Mutually Exclusive:**\n    MCP Unity and Unity's native AI tools can be seen as complementary. You might use MCP Unity with your AI coding assistant to set up a scene or batch-modify assets, and then use Unity AI tools to generate a specific texture, or to create animations, or 2D sprites for one of those assets. MCP Unity provides a flexible, protocol-based way to interact with the Editor, which can be powerful for developers who want to integrate with a broader range of external AI services or build custom automation workflows.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">What MCP hosts and IDEs currently support MCP Unity?</span></summary>\n\nMCP Unity is designed to work with any AI assistant or development environment that can act as an MCP client. The ecosystem is growing, but current known integrations or compatible platforms include:\n-  Windsurf\n-  Cursor\n-  GitHub Copilot\n-  Claude Desktop\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Can I extend MCP Unity with custom tools for my project?</span></summary>\n\nYes, absolutely! One of the significant benefits of the MCP Unity architecture is its extensibility.\n-   **In Unity (C#):** You can create new C# classes that inherit from `McpToolBase` (or a similar base for resources) to expose custom Unity Editor functionality. These tools would then be registered in `McpUnityServer.cs`. For example, you could write a tool to automate a specific asset import pipeline unique to your project.\n-   **In Node.js Server (TypeScript):** You would then define the corresponding TypeScript tool handler in the `Server/src/tools/` directory, including its Zod schema for inputs/outputs, and register it in `Server/src/index.ts`. This Node.js part will forward the request to your new C# tool in Unity.\n\nThis allows you to tailor the AI's capabilities to the specific needs and workflows of your game or application.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Is MCP Unity free to use?</span></summary>\n\nYes, MCP Unity is an open-source project distributed under the MIT License. You are free to use, modify, and distribute it according to the license terms.\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Why am I unable to connect to MCP Unity?</span></summary>\n\n- Ensure the WebSocket server is running (check the Server Window in Unity)\n- Send a console log message from MCP client to force a reconnection between MCP client and Unity server\n- Change the port number in the Unity Editor MCP Server window. (Tools > MCP Unity > Server Window)\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Why won't the MCP Unity server start?</span></summary>\n\n- Check the Unity Console for error messages\n- Ensure Node.js is properly installed and accessible in your PATH\n- Verify that all dependencies are installed in the Server directory\n\n</details>\n\n<details>\n<summary><span style=\"font-size: 1.1em; font-weight: bold;\">Why do I get a connection failed error when running Play Mode tests?</span></summary>\n\nThe `run_tests` tool returns the following response:\n```\nError:\nConnection failed: Unknown error\n```\n\nThis error occurs because the bridge connection is lost when the domain reloads upon switching to Play Mode.  The workaround is to turn off **Reload Domain** in **Edit > Project Settings > Editor > \"Enter Play Mode Settings\"**.\n\n</details>\n\n## Troubleshooting: WSL2 (Windows 11) networking\n\nWhen running the MCP (Node.js) server inside WSL2 while Unity runs on Windows 11, connecting to `ws://localhost:8090/McpUnity` may fail with `ECONNREFUSED`.\n\nCause: WSL2 and Windows have separate network namespaces — `localhost` inside WSL2 does not point to the Windows host. By default, Unity listens on `localhost:8090`.\n\n### Solution 1 — Enable WSL2 Mirrored mode networking (preferred)\n- Windows 11: Settings → System → For developers → WSL → Enable “Mirrored mode networking”.\n- Or via `.wslconfig` (then run `wsl --shutdown` and reopen WSL):\n\n```ini\n[wsl2]\nnetworkingMode=mirrored\n```\n\nAfter enabling, `localhost` is shared between Windows and WSL2, so the default config (`localhost:8090`) works.\n\n### Solution 2 — Point the Node client to the Windows host\nSet in your WSL shell before starting the MCP client:\n\n```bash\n# Use the Windows host IP detected from resolv.conf\nexport UNITY_HOST=$(grep -m1 nameserver /etc/resolv.conf | awk '{print $2}')\n```\n\nWith this, `Server~/src/unity/mcpUnity.ts` will connect to `ws://$UNITY_HOST:8090/McpUnity` instead of `localhost` (it reads `UNITY_HOST`, and may also honor a `Host` in `ProjectSettings/McpUnitySettings.json` if present).\n\n### Solution 3 — Allow remote connections from Unity\n- Unity: Tools → MCP Unity → Server Window → enable “Allow Remote Connections” (Unity binds to `0.0.0.0`).\n- Ensure Windows Firewall allows inbound TCP on your configured port (default 8090).\n- From WSL2, connect to the Windows host IP (see Solution 2) or to `localhost` if mirrored mode is enabled.\n\n> [!NOTE]\n> Default port is `8090`. You can change it in the Unity Server Window (Tools → MCP Unity → Server Window). The value maps to `McpUnitySettings` and is persisted in `ProjectSettings/McpUnitySettings.json`.\n\n#### Validate connectivity\n\n```bash\nnpm i -g wscat\n# After enabling mirrored networking\nwscat -c ws://localhost:8090/McpUnity\n# Or using the Windows host IP\nwscat -c ws://$UNITY_HOST:8090/McpUnity\n```\n\n## Support & Feedback\n\nIf you have any questions or need support, please open an [issue](https://github.com/CoderGamester/mcp-unity/issues) on this repository or alternative you can reach out on:\n- Linkedin: [![](https://img.shields.io/badge/LinkedIn-0077B5?style=flat&logo=linkedin&logoColor=white 'LinkedIn')](https://www.linkedin.com/in/miguel-tomas/)\n- Discord: gamester7178\n- Email: game.gamester@gmail.com\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request or open an Issue with your request.\n\n**Commit your changes** following the [Conventional Commits](https://www.conventionalcommits.org/en/v1.0.0/) format.\n\n## License\n\nThis project is under [MIT License](LICENSE.md)\n\n## Acknowledgements\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [Unity Technologies](https://unity.com)\n- [Node.js](https://nodejs.org)\n- [WebSocket-Sharp](https://github.com/sta/websocket-sharp)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gaming",
        "unity3d",
        "unity",
        "gaming integration",
        "integration gaming",
        "server unity3d"
      ],
      "category": "gaming"
    },
    "Coding-Solo--godot-mcp": {
      "owner": "Coding-Solo",
      "name": "godot-mcp",
      "url": "https://github.com/Coding-Solo/godot-mcp",
      "imageUrl": "",
      "description": "A MCP server for interacting with the Godot game engine, providing tools for editing, running, debugging, and managing scenes in Godot projects.",
      "stars": 946,
      "forks": 99,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-04T12:38:22Z",
      "readme_content": "\n# Godot MCP\n\n[![Github-sponsors](https://img.shields.io/badge/sponsor-30363D?style=for-the-badge&logo=GitHub-Sponsors&logoColor=#EA4AAA)](https://github.com/sponsors/Coding-Solo)\n\n[![](https://badge.mcpx.dev?type=server 'MCP Server')](https://modelcontextprotocol.io/introduction)\n[![Made with Godot](https://img.shields.io/badge/Made%20with-Godot-478CBF?style=flat&logo=godot%20engine&logoColor=white)](https://godotengine.org)\n[![](https://img.shields.io/badge/Node.js-339933?style=flat&logo=nodedotjs&logoColor=white 'Node.js')](https://nodejs.org/en/download/)\n[![](https://img.shields.io/badge/TypeScript-3178C6?style=flat&logo=typescript&logoColor=white 'TypeScript')](https://www.typescriptlang.org/)\n\n[![](https://img.shields.io/github/last-commit/Coding-Solo/godot-mcp 'Last Commit')](https://github.com/Coding-Solo/godot-mcp/commits/main)\n[![](https://img.shields.io/github/stars/Coding-Solo/godot-mcp 'Stars')](https://github.com/Coding-Solo/godot-mcp/stargazers)\n[![](https://img.shields.io/github/forks/Coding-Solo/godot-mcp 'Forks')](https://github.com/Coding-Solo/godot-mcp/network/members)\n[![](https://img.shields.io/badge/License-MIT-red.svg 'MIT License')](https://opensource.org/licenses/MIT)\n\n```text\n                           (((((((             (((((((                          \n                        (((((((((((           (((((((((((                      \n                        (((((((((((((       (((((((((((((                       \n                        (((((((((((((((((((((((((((((((((                       \n                        (((((((((((((((((((((((((((((((((                       \n         (((((      (((((((((((((((((((((((((((((((((((((((((      (((((        \n       (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((      \n     ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((    \n    ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((    \n      (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((     \n        (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((       \n         (((((((((((@@@@@@@(((((((((((((((((((((((((((@@@@@@@(((((((((((        \n         (((((((((@@@@,,,,,@@@(((((((((((((((((((((@@@,,,,,@@@@(((((((((        \n         ((((((((@@@,,,,,,,,,@@(((((((@@@@@(((((((@@,,,,,,,,,@@@((((((((        \n         ((((((((@@@,,,,,,,,,@@(((((((@@@@@(((((((@@,,,,,,,,,@@@((((((((        \n         (((((((((@@@,,,,,,,@@((((((((@@@@@((((((((@@,,,,,,,@@@(((((((((        \n         ((((((((((((@@@@@@(((((((((((@@@@@(((((((((((@@@@@@((((((((((((        \n         (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((        \n         (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((        \n         @@@@@@@@@@@@@((((((((((((@@@@@@@@@@@@@((((((((((((@@@@@@@@@@@@@        \n         ((((((((( @@@(((((((((((@@(((((((((((@@(((((((((((@@@ (((((((((        \n         (((((((((( @@((((((((((@@@(((((((((((@@@((((((((((@@ ((((((((((        \n          (((((((((((@@@@@@@@@@@@@@(((((((((((@@@@@@@@@@@@@@(((((((((((         \n           (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((          \n              (((((((((((((((((((((((((((((((((((((((((((((((((((((             \n                 (((((((((((((((((((((((((((((((((((((((((((((((                \n                        (((((((((((((((((((((((((((((((((                       \n                                                                                \n\n                          /$$      /$$  /$$$$$$  /$$$$$$$ \n                         | $$$    /$$$ /$$__  $$| $$__  $$\n                         | $$$$  /$$$$| $$  \\__/| $$  \\ $$\n                         | $$ $$/$$ $$| $$      | $$$$$$$/\n                         | $$  $$$| $$| $$      | $$____/ \n                         | $$\\  $ | $$| $$    $$| $$      \n                         | $$ \\/  | $$|  $$$$$$/| $$      \n                         |__/     |__/ \\______/ |__/       \n```\n\nA Model Context Protocol (MCP) server for interacting with the Godot game engine.\n\n## Introduction\n\nGodot MCP enables AI assistants to launch the Godot editor, run projects, capture debug output, and control project execution - all through a standardized interface.\n\nThis direct feedback loop helps AI assistants like Claude understand what works and what doesn't in real Godot projects, leading to better code generation and debugging assistance.\n\n## Features\n\n- **Launch Godot Editor**: Open the Godot editor for a specific project\n- **Run Godot Projects**: Execute Godot projects in debug mode\n- **Capture Debug Output**: Retrieve console output and error messages\n- **Control Execution**: Start and stop Godot projects programmatically\n- **Get Godot Version**: Retrieve the installed Godot version\n- **List Godot Projects**: Find Godot projects in a specified directory\n- **Project Analysis**: Get detailed information about project structure\n- **Scene Management**:\n  - Create new scenes with specified root node types\n  - Add nodes to existing scenes with customizable properties\n  - Load sprites and textures into Sprite2D nodes\n  - Export 3D scenes as MeshLibrary resources for GridMap\n  - Save scenes with options for creating variants\n- **UID Management** (for Godot 4.4+):\n  - Get UID for specific files\n  - Update UID references by resaving resources\n\n## Requirements\n\n- [Godot Engine](https://godotengine.org/download) installed on your system\n- Node.js and npm\n- An AI assistant that supports MCP (Cline, Cursor, etc.)\n\n## Installation and Configuration\n\n### Step 1: Install and Build\n\nFirst, clone the repository and build the MCP server:\n\n```bash\ngit clone https://github.com/Coding-Solo/godot-mcp.git\ncd godot-mcp\nnpm install\nnpm run build\n```\n\n### Step 2: Configure with Your AI Assistant\n\n#### Option A: Configure with Cline\n\nAdd to your Cline MCP settings file (`~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`):\n\n```json\n{\n  \"mcpServers\": {\n    \"godot\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/godot-mcp/build/index.js\"],\n      \"env\": {\n        \"DEBUG\": \"true\"                  // Optional: Enable detailed logging\n      },\n      \"disabled\": false,\n      \"autoApprove\": [\n        \"launch_editor\",\n        \"run_project\",\n        \"get_debug_output\",\n        \"stop_project\",\n        \"get_godot_version\",\n        \"list_projects\",\n        \"get_project_info\",\n        \"create_scene\",\n        \"add_node\",\n        \"load_sprite\",\n        \"export_mesh_library\",\n        \"save_scene\",\n        \"get_uid\",\n        \"update_project_uids\"\n      ]\n    }\n  }\n}\n```\n\n#### Option B: Configure with Cursor\n\n**Using the Cursor UI:**\n\n1. Go to **Cursor Settings** > **Features** > **MCP**\n2. Click on the **+ Add New MCP Server** button\n3. Fill out the form:\n   - Name: `godot` (or any name you prefer)\n   - Type: `command`\n   - Command: `node /absolute/path/to/godot-mcp/build/index.js`\n4. Click \"Add\"\n5. You may need to press the refresh button in the top right corner of the MCP server card to populate the tool list\n\n**Using Project-Specific Configuration:**\n\nCreate a file at `.cursor/mcp.json` in your project directory with the following content:\n\n```json\n{\n  \"mcpServers\": {\n    \"godot\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/godot-mcp/build/index.js\"],\n      \"env\": {\n        \"DEBUG\": \"true\"                  // Enable detailed logging\n      }\n    }\n  }\n}\n```\n\n### Step 3: Optional Environment Variables\n\nYou can customize the server behavior with these environment variables:\n\n- `GODOT_PATH`: Path to the Godot executable (overrides automatic detection)\n- `DEBUG`: Set to \"true\" to enable detailed server-side debug logging\n\n## Example Prompts\n\nOnce configured, your AI assistant will automatically run the MCP server when needed. You can use prompts like:\n\n```text\n\"Launch the Godot editor for my project at /path/to/project\"\n\n\"Run my Godot project and show me any errors\"\n\n\"Get information about my Godot project structure\"\n\n\"Analyze my Godot project structure and suggest improvements\"\n\n\"Help me debug this error in my Godot project: [paste error]\"\n\n\"Write a GDScript for a character controller with double jump and wall sliding\"\n\n\"Create a new scene with a Player node in my Godot project\"\n\n\"Add a Sprite2D node to my player scene and load the character texture\"\n\n\"Export my 3D models as a MeshLibrary for use with GridMap\"\n\n\"Create a UI scene with buttons and labels for my game's main menu\"\n\n\"Get the UID for a specific script file in my Godot 4.4 project\"\n\n\"Update UID references in my Godot project after upgrading to 4.4\"\n```\n\n## Implementation Details\n\n### Architecture\n\nThe Godot MCP server uses a bundled GDScript approach for complex operations:\n\n1. **Direct Commands**: Simple operations like launching the editor or getting project info use Godot's built-in CLI commands directly.\n2. **Bundled Operations Script**: Complex operations like creating scenes or adding nodes use a single, comprehensive GDScript file (`godot_operations.gd`) that handles all operations.\n\nThis architecture provides several benefits:\n\n- **No Temporary Files**: Eliminates the need for temporary script files, keeping your system clean\n- **Simplified Codebase**: Centralizes all Godot operations in one (somewhat) organized file\n- **Better Maintainability**: Makes it easier to add new operations or modify existing ones\n- **Improved Error Handling**: Provides consistent error reporting across all operations\n- **Reduced Overhead**: Minimizes file I/O operations for better performance\n\nThe bundled script accepts operation type and parameters as JSON, allowing for flexible and dynamic operation execution without generating temporary files for each operation.\n\n## Troubleshooting\n\n- **Godot Not Found**: Set the GODOT_PATH environment variable to your Godot executable\n- **Connection Issues**: Ensure the server is running and restart your AI assistant\n- **Invalid Project Path**: Ensure the path points to a directory containing a project.godot file\n- **Build Issues**: Make sure all dependencies are installed by running `npm install`\n- **For Cursor Specifically**:\n-   Ensure the MCP server shows up and is enabled in Cursor settings (Settings > MCP)\n-   MCP tools can only be run using the Agent chat profile (Cursor Pro or Business subscription)\n-   Use \"Yolo Mode\" to automatically run MCP tool requests\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/coding-solo-godot-mcp-badge.png)](https://mseep.ai/app/coding-solo-godot-mcp)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "godot",
        "gaming",
        "godot mcp",
        "godot game",
        "mcp server"
      ],
      "category": "gaming"
    },
    "IvanMurzak--Unity-MCP": {
      "owner": "IvanMurzak",
      "name": "Unity-MCP",
      "url": "https://github.com/IvanMurzak/Unity-MCP",
      "imageUrl": "",
      "description": "MCP Server for Unity Editor and for a game made with Unity",
      "stars": 440,
      "forks": 47,
      "license": "Apache License 2.0",
      "language": "C#",
      "updated_at": "2025-10-04T08:34:16Z",
      "readme_content": "<div align=\"center\" width=\"100%\">\n  <h1>✨ AI Game Developer — <i>Unity MCP</i></h1>\n\n[![MCP](https://badge.mcpx.dev?type=server 'MCP Server')](https://modelcontextprotocol.io/introduction)\n[![OpenUPM](https://img.shields.io/npm/v/com.ivanmurzak.unity.mcp?label=OpenUPM&registry_uri=https://package.openupm.com&labelColor=333A41 'OpenUPM package')](https://openupm.com/packages/com.ivanmurzak.unity.mcp/)\n[![Docker Image](https://img.shields.io/docker/image-size/ivanmurzakdev/unity-mcp-server/latest?label=Docker%20Image&logo=docker&labelColor=333A41 'Docker Image')](https://hub.docker.com/r/ivanmurzakdev/unity-mcp-server)\n[![Unity Editor](https://img.shields.io/badge/Editor-X?style=flat&logo=unity&labelColor=333A41&color=49BC5C 'Unity Editor supported')](https://unity.com/releases/editor/archive)\n[![Unity Runtime](https://img.shields.io/badge/Runtime-X?style=flat&logo=unity&labelColor=333A41&color=49BC5C 'Unity Runtime supported')](https://unity.com/releases/editor/archive)\n[![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg 'Tests Passed')](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml)</br>\n[![Discord](https://img.shields.io/badge/Discord-Join-7289da?logo=discord&logoColor=white&labelColor=333A41 'Join')](https://discord.gg/cfbdMZX99G)\n[![Stars](https://img.shields.io/github/stars/IvanMurzak/Unity-MCP 'Stars')](https://github.com/IvanMurzak/Unity-MCP/stargazers)\n[![License](https://img.shields.io/github/license/IvanMurzak/Unity-MCP?label=License&labelColor=333A41)](https://github.com/IvanMurzak/Unity-MCP/blob/main/LICENSE)\n[![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://stand-with-ukraine.pp.ua)\n\n  <img src=\"https://github.com/IvanMurzak/Unity-MCP/raw/main/docs/img/level-building.gif\" alt=\"AI work\" title=\"Level building\" width=\"100%\">\n\n  <b>[中文](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/README.zh-CN.md) | [日本語](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/README.ja.md) | [Español](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/README.es.md)</b>\n\n</div>\n\n`Unity MCP` is an AI-powered game development assistant that serves as a bridge between `MCP Client` and `Unity`. Simply type a message in chat and get work done using any advanced LLM model of your choice. Have an issue to fix? Ask the AI to fix it. **[Watch demo videos](https://www.youtube.com/watch?v=kQUOCQ-c0-M&list=PLyueiUu0xU70uzNoOaanGQD2hiyJmqHtK)**.\n\n> **[💬 Join our Discord Server](https://discord.gg/cfbdMZX99G)** - Ask questions, showcase your work, and connect with other developers!\n\n## Features\n\n- ✔️ **Natural conversation** - Chat with AI like you would with a human\n- ✔️ **Code assistance** - Ask AI to write code and run tests\n- ✔️ **Debug support** - Ask AI to get logs and fix errors\n- ✔️ **Multiple LLM providers** - Use agents from Anthropic, OpenAI, Microsoft, or any other provider with no limits\n- ✔️ **Flexible deployment** - Works locally (stdio) and remotely (http) by configuration\n- ✔️ **Rich toolset** - Wide range of default [MCP Tools](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/default-mcp-tools.md)\n- ✔️ **Extensible** - Create [custom MCP Tools in your project code](#add-custom-mcp-tool)\n\n### Stability status\n\n| Unity Version | Editmode                                                                                                                                                                               | Playmode                                                                                                                                                                               | Standalone                                                                                                                                                                               |\n| ------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| 2022.3.61f1   | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2022-3-61f1-editmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2022-3-61f1-playmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2022-3-61f1-standalone)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) |\n| 2023.2.20f1   | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2023-2-20f1-editmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2023-2-20f1-playmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-2023-2-20f1-standalone)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml) |\n| 6000.2.3f1    | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-6000-2-3f1-editmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml)  | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-6000-2-3f1-playmode)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml)  | [![r](https://github.com/IvanMurzak/Unity-MCP/workflows/release/badge.svg?job=test-unity-6000-2-3f1-standalone)](https://github.com/IvanMurzak/Unity-MCP/actions/workflows/release.yml)  |\n\n## Content\n\n- [Installation](#installation)\n  - [Step 1: Install `Unity MCP Plugin`](#step-1-install-unity-mcp-plugin)\n    - [Option 1 - Installer](#option-1---installer)\n    - [Option 2 - OpenUPM-CLI](#option-2---openupm-cli)\n  - [Step 2: Install `MCP Client`](#step-2-install-mcp-client)\n  - [Step 3: Configure `MCP Client`](#step-3-configure-mcp-client)\n    - [Automatic configuration](#automatic-configuration)\n    - [Manual configuration](#manual-configuration)\n- [Use AI](#use-ai)\n  - [Advanced Features for LLM](#advanced-features-for-llm)\n    - [Core Capabilities](#core-capabilities)\n    - [Reflection-Powered Features](#reflection-powered-features)\n- [Customize MCP](#customize-mcp)\n  - [Add custom `MCP Tool`](#add-custom-mcp-tool)\n  - [Add custom runtime (in-game) `MCP Tool`](#add-custom-runtime-in-game-mcp-tool)\n  - [Add custom `MCP Prompt`](#add-custom-mcp-prompt)\n- [Unity `MCP Server` setup](#unity-mcp-server-setup)\n  - [Variables](#variables)\n  - [Docker 📦](#docker-)\n    - [`HTTP` Transport](#http-transport)\n    - [`STDIO` Transport](#stdio-transport)\n    - [Custom `port`](#custom-port)\n  - [Binary executable](#binary-executable)\n- [How it works](#how-it-works)\n  - [What is `MCP`](#what-is-mcp)\n  - [What is `MCP Client`](#what-is-mcp-client)\n  - [What is `MCP Server`](#what-is-mcp-server)\n  - [What is `MCP Tool`](#what-is-mcp-tool)\n    - [When to use `MCP Tool`](#when-to-use-mcp-tool)\n  - [What is `MCP Resource`](#what-is-mcp-resource)\n    - [When to use `MCP Resource`](#when-to-use-mcp-resource)\n  - [What is `MCP Prompt`](#what-is-mcp-prompt)\n    - [When to use `MCP Prompt`](#when-to-use-mcp-prompt)\n- [Contribution 💙💛](#contribution-)\n\n# Installation\n\n## Step 1: Install `Unity MCP Plugin`\n\n<details>\n  <summary><b>⚠️ Requirements (click)</b></summary>\n\n> [!IMPORTANT]\n> **Project path cannot contain spaces**\n>\n> - ✅ `C:/MyProjects/Project`\n> - ❌ `C:/My Projects/Project`\n\n</details>\n\n### Option 1 - Installer\n\n- **[⬇️ Download Installer](https://github.com/IvanMurzak/Unity-MCP/releases/download/0.18.1/AI-Game-Dev-Installer.unitypackage)**\n- **📂 Import installer into Unity project**\n  > - You can double-click on the file - Unity will open it automatically\n  > - OR: Open Unity Editor first, then click on `Assets/Import Package/Custom Package`, and choose the file\n\n### Option 2 - OpenUPM-CLI\n\n- [⬇️ Install OpenUPM-CLI](https://github.com/openupm/openupm-cli#installation)\n- 📟 Open the command line in your Unity project folder\n\n```bash\nopenupm add com.ivanmurzak.unity.mcp\n```\n\n## Step 2: Install `MCP Client`\n\nChoose a single `MCP Client` you prefer - you don't need to install all of them. This will be your main chat window to communicate with the LLM.\n\n- [Claude Code](https://github.com/anthropics/claude-code) (highly recommended)\n- [Claude Desktop](https://claude.ai/download)\n- [GitHub Copilot in VS Code](https://code.visualstudio.com/docs/copilot/overview)\n- [Cursor](https://www.cursor.com/)\n- [Windsurf](https://windsurf.com)\n- Any other supported\n\n> The MCP protocol is quite universal, which is why you may use any MCP client you prefer - it will work as smoothly as any other. The only important requirement is that the MCP client must support dynamic MCP Tool updates.\n\n## Step 3: Configure `MCP Client`\n\n### Automatic configuration\n\n- Open Unity project\n- Open `Window/AI Game Developer (Unity-MCP)`\n- Click `Configure` at your MCP client\n\n![Unity_AI](https://github.com/IvanMurzak/Unity-MCP/raw/main/docs/img/ai-connector-window.gif)\n\n> If your MCP client is not in the list, use the raw JSON shown in the window to inject it into your MCP client. Read the instructions for your specific MCP client on how to do this.\n\n### Manual configuration\n\nIf automatic configuration doesn't work for you for any reason, use the JSON from the `AI Game Developer (Unity-MCP)` window to configure any `MCP Client` manually.\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>Windows</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/win-x64/unity-mcp-server.exe\" client-transport=stdio\n  ```\n\n</details>\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>MacOS Apple-Silicon</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/osx-arm64/unity-mcp-server\" client-transport=stdio\n  ```\n\n</details>\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>MacOS Apple-Intel</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/osx-x64/unity-mcp-server\" client-transport=stdio\n  ```\n\n</details>\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>Linux x64</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/linux-x64/unity-mcp-server\" client-transport=stdio\n  ```\n\n</details>\n\n<details>\n  <summary>Configure <b><code>Claude Code</code></b> for <b>Linux arm64</b></summary>\n\n  Replace `unityProjectPath` with your real project path\n\n  ```bash\n  claude mcp add Unity-MCP \"<unityProjectPath>/Library/mcp-server/linux-arm64/unity-mcp-server\" client-transport=stdio\n  ```\n\n</details>\n\n---\n\n# Use AI\n\nCommunicate with the AI (LLM) in your `MCP Client`. Ask it to do anything you want. The better you describe your task or idea, the better it will perform the job.\n\nSome `MCP Clients` allow you to choose different LLM models. Pay attention to this feature, as some models may work much better than others.\n\n**Example commands:**\n\n```text\nExplain my scene hierarchy\n```\n\n```text\nCreate 3 cubes in a circle with radius 2\n```\n\n```text\nCreate metallic golden material and attach it to a sphere gameObject\n```\n\n> Make sure `Agent` mode is turned on in your MCP client\n\n## Advanced Features for LLM\n\nUnity MCP provides advanced tools that enable the LLM to work faster and more effectively, avoiding mistakes and self-correcting when errors occur. Everything is designed to achieve your goals efficiently.\n\n### Core Capabilities\n\n- ✔️ **Agent-ready tools** - Find anything you need in 1-2 steps\n- ✔️ **Instant compilation** - C# code compilation & execution using `Roslyn` for faster iteration\n- ✔️ **Full asset access** - Read/write access to assets and C# scripts\n- ✔️ **Intelligent feedback** - Well-described positive and negative feedback for proper issue understanding\n\n### Reflection-Powered Features\n\n- ✔️ **Object references** - Provide references to existing objects for instant C# code\n- ✔️ **Project data access** - Get full access to entire project data in a readable format\n- ✔️ **Granular modifications** - Populate & modify any piece of data in the project\n- ✔️ **Method discovery** - Find any method in the entire codebase, including compiled DLL files\n- ✔️ **Method execution** - Call any method in the entire codebase\n- ✔️ **Advanced parameters** - Provide any property for method calls, even references to existing objects in memory\n- ✔️ **Live Unity API** - Unity API instantly available - even when Unity changes, you get the fresh API\n- ✔️ **Self-documenting** - Access human-readable descriptions of any `class`, `method`, `field`, or `property` via `Description` attributes\n\n---\n\n# Customize MCP\n\n**[Unity MCP](https://github.com/IvanMurzak/Unity-MCP)** supports custom `MCP Tool`, `MCP Resource`, and `MCP Prompt` development by project owners. The MCP server takes data from the `Unity MCP Plugin` and exposes it to a client. Anyone in the MCP communication chain will receive information about new MCP features, which the LLM may decide to use at some point.\n\n## Add custom `MCP Tool`\n\nTo add a custom `MCP Tool`, you need:\n\n1. A class with the `McpPluginToolType` attribute\n2. A method in the class with the `McpPluginTool` attribute\n3. *Optional:* Add a `Description` attribute to each method argument to help the LLM understand it\n4. *Optional:* Use `string? optional = null` properties with `?` and default values to mark them as `optional` for the LLM\n\n> Note that the line `MainThread.Instance.Run(() =>` allows you to run code on the main thread, which is required for interacting with Unity's API. If you don't need this and running the tool in a background thread is acceptable, avoid using the main thread for efficiency purposes.\n\n```csharp\n[McpPluginToolType]\npublic class Tool_GameObject\n{\n    [McpPluginTool\n    (\n        \"MyCustomTask\",\n        Title = \"Create a new GameObject\"\n    )]\n    [Description(\"Explain here to LLM what is this, when it should be called.\")]\n    public string CustomTask\n    (\n        [Description(\"Explain to LLM what is this.\")]\n        string inputData\n    )\n    {\n        // do anything in background thread\n\n        return MainThread.Instance.Run(() =>\n        {\n            // do something in main thread if needed\n\n            return $\"[Success] Operation completed.\";\n        });\n    }\n}\n```\n\n## Add custom runtime (in-game) `MCP Tool`\n\n> ⚠️ Not yet supported. The work is in progress\n\n## Add custom `MCP Prompt`\n\n`MCP Prompt` allows you to inject custom prompts into the conversation with the LLM. It supports two sender roles: User and Assistant. This is a quick way to instruct the LLM to perform specific tasks. You can generate prompts using custom data, providing lists or any other relevant information.\n\n```csharp\n[McpPluginPromptType]\npublic static class Prompt_ScriptingCode\n{\n    [McpPluginPrompt(Name = \"add-event-system\", Role = Role.User)]\n    [Description(\"Implement UnityEvent-based communication system between GameObjects.\")]\n    public string AddEventSystem()\n    {\n        return \"Create event system using UnityEvents, UnityActions, or custom event delegates for decoupled communication between game systems and components.\";\n    }\n}\n```\n\n---\n\n# Unity `MCP Server` setup\n\n**[Unity MCP](https://github.com/IvanMurzak/Unity-MCP)** Server supports many different launch options and Docker deployment. Both transport protocols are supported: `http` and `stdio`. If you need to customize or deploy Unity MCP Server to a cloud, this section is for you. [Read more...](https://github.com/IvanMurzak/Unity-MCP/blob/main/docs/mcp-server.md)\n\n## Variables\n\nDoesn't matter what launch option you choose, all of them support custom configuration using both Environment Variables and Command Line Arguments. It would work with default values, if you just need to launch it, don't waste your time for the variables. Just make sure Unity Plugin also has default values, especially the `--port`, they should be equal.\n\n| Environment Variable        | Command Line Args     | Description                                                                 |\n|-----------------------------|-----------------------|-----------------------------------------------------------------------------|\n| `UNITY_MCP_PORT`            | `--port`              | **Client** -> **Server** <- **Plugin** connection port (default: 8080)      |\n| `UNITY_MCP_PLUGIN_TIMEOUT`  | `--plugin-timeout`    | **Plugin** -> **Server** connection timeout (ms) (default: 10000)           |\n| `UNITY_MCP_CLIENT_TRANSPORT`| `--client-transport`  | **Client** -> **Server** transport type: `stdio` or `http` (default: `http`) |\n\n> Command line args support also the option with a single `-` prefix (`-port`) and an option without prefix at all (`port`).\n\n## Docker 📦\n\n[![Docker Image](https://img.shields.io/docker/image-size/ivanmurzakdev/unity-mcp-server/latest?label=Docker%20Image&logo=docker&labelColor=333A41 'Docker Image')](https://hub.docker.com/r/ivanmurzakdev/unity-mcp-server)\n\nMake sure Docker is installed. And please make sure Docker Desktop is launched if you are at Windows operation system.\n\n### `HTTP` Transport\n\n```bash\ndocker run -p 8080:8080 ivanmurzakdev/unity-mcp-server\n```\n\n<details>\n  <summary><code>MCP Client</code> config:</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"Unity-MCP\": {\n      \"url\": \"http://localhost:8080\"\n    }\n  }\n}\n```\n\n> Replace `url` with your real endpoint if it is hosted in cloud\n\n</details>\n\n### `STDIO` Transport\n\nFor using this variant, `MCP Client` should launch the `MCP Server` in the docker. It is achievable through the modified `MCP Client` configuration.\n\n```bash\ndocker run -t -e UNITY_MCP_CLIENT_TRANSPORT=stdio -p 8080:8080 ivanmurzakdev/unity-mcp-server\n```\n\n<details>\n  <summary><code>MCP Client</code> config:</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"Unity-MCP\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-t\",\n        \"-e\",\n        \"UNITY_MCP_CLIENT_TRANSPORT=stdio\",\n        \"-p\",\n        \"8080:8080\",\n        \"ivanmurzakdev/unity-mcp-server\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n### Custom `port`\n\n```bash\ndocker run -e UNITY_MCP_PORT=123 -p 123:123 ivanmurzakdev/unity-mcp-server\n```\n\n<details>\n  <summary><code>MCP Client</code> config:</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"Unity-MCP\": {\n      \"url\": \"http://localhost:123\"\n    }\n  }\n}\n```\n\n> Replace `url` with your real endpoint if it is hosted in cloud\n</details>\n\n## Binary executable\n\nYou may launch Unity `MCP Server` directly from a binary file. You would need to have a binary compiled specifically for your CPU architecture. Check [GitHub Release Page](https://github.com/IvanMurzak/Unity-MCP/releases), it contains pre-compiled binaries for all CPU architectures.\n\n```bash\n./unity-mcp-server --port 8080 --plugin-timeout 10000 --client-transport stdio\n```\n\n<details>\n  <summary><code>MCP Client</code> config:</summary>\n\n> Replace `<project>` with your Unity project path.\n\n```json\n{\n  \"mcpServers\": {\n    \"Unity-MCP\": {\n      \"command\": \"<project>/Library/mcp-server/win-x64/unity-mcp-server.exe\",\n      \"args\": [\n        \"--port=8080\",\n        \"--plugin-timeout=10000\",\n        \"--client-transport=stdio\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n---\n\n# How it works\n\n**[Unity MCP](https://github.com/IvanMurzak/Unity-MCP)** serves as a bridge between LLMs and Unity. It exposes and explains Unity's tools to the LLM, which then understands the interface and utilizes the tools according to user requests.\n\nConnect **[Unity MCP](https://github.com/IvanMurzak/Unity-MCP)** to LLM clients such as [Claude](https://claude.ai/download) or [Cursor](https://www.cursor.com/) using the integrated `AI Connector` window. Custom clients are also supported.\n\nThe system is highly extensible - you can define custom `MCP Tools`, `MCP Resource` or `MCP Prompt` directly in your Unity project codebase, exposing new capabilities to AI or automation clients. This makes Unity MCP a flexible foundation for building advanced workflows, rapid prototyping, and integrating AI-driven features into your development process.\n\n## What is `MCP`\n\nMCP - Model Context Protocol. In a few words, that is `USB Type-C` for AI, specifically for LLM (Large Language Model). It teaches LLM how to use external features. Such as Unity Engine in this case, or even your custom C# method in your code. [Official documentation](https://modelcontextprotocol.io/).\n\n## What is `MCP Client`\n\nIt is an application with a chat window. It may have smart agents to operate better, it may have embedded advanced MCP Tools. In general well done MCP Client is 50% of the AI success of executing a task. That is why it is very important to choose the best one for usage.\n\n## What is `MCP Server`\n\nIt is a bridge between `MCP Client` and \"something else\", in this particular case it is Unity Engine. This project includes `MCP Server`.\n\n## What is `MCP Tool`\n\n`MCP Tool` is a function or method that the LLM can call to interact with Unity. These tools act as the bridge between natural language requests and actual Unity operations. When you ask the AI to \"create a cube\" or \"change material color,\" it uses MCP Tools to execute these actions.\n\n**Key characteristics:**\n\n- **Executable functions** that perform specific operations\n- **Typed parameters** with descriptions to help the LLM understand what data to provide\n- **Return values** that give feedback about the operation's success or failure\n- **Thread-aware** - can run on main thread for Unity API calls or background thread for heavy processing\n\n### When to use `MCP Tool`\n\n- **Automate repetitive tasks** - Create tools for common operations you do frequently\n- **Complex operations** - Bundle multiple Unity API calls into a single, easy-to-use tool\n- **Project-specific workflows** - Build tools that understand your project's specific structure and conventions\n- **Error-prone tasks** - Create tools that include validation and error handling\n- **Custom game logic** - Expose your game's systems to AI for dynamic content creation\n\n**Examples:**\n\n- Creating and configuring GameObjects with specific components\n- Batch processing assets (textures, materials, prefabs)\n- Setting up lighting and post-processing effects\n- Generating level geometry or placing objects procedurally\n- Configuring physics settings or collision layers\n\n## What is `MCP Resource`\n\n`MCP Resource` provides read-only access to data within your Unity project. Unlike MCP Tools that perform actions, Resources allow the LLM to inspect and understand your project's current state, assets, and configuration. Think of them as \"sensors\" that give the AI context about your project.\n\n**Key characteristics:**\n\n- **Read-only access** to project data and Unity objects\n- **Structured information** presented in a format the LLM can understand\n- **Real-time data** that reflects the current state of your project\n- **Contextual awareness** helping the AI make informed decisions\n\n### When to use `MCP Resource`\n\n- **Project analysis** - Let AI understand your project structure, assets, and organization\n- **Debugging assistance** - Provide current state information for troubleshooting\n- **Intelligent suggestions** - Give AI context to make better recommendations\n- **Documentation generation** - Automatically create documentation based on project state\n- **Asset management** - Help AI understand what assets are available and their properties\n\n**Examples:**\n\n- Exposing scene hierarchy and GameObject properties\n- Listing available materials, textures, and their settings\n- Showing script dependencies and component relationships\n- Displaying current lighting setup and render pipeline configuration\n- Providing information about audio sources, animations, and particle systems\n\n## What is `MCP Prompt`\n\n`MCP Prompt` allows you to inject pre-defined prompts into the conversation with the LLM. These are smart templates that can provide context, instructions, or knowledge to guide the AI's behavior. Prompts can be static text or dynamically generated based on your project's current state.\n\n**Key characteristics:**\n\n- **Contextual guidance** that influences how the AI responds\n- **Role-based** - can simulate different personas (User requests or Assistant knowledge)\n- **Dynamic content** - can include real-time project data\n- **Reusable templates** for common scenarios and workflows\n\n### When to use `MCP Prompt`\n\n- **Provide domain knowledge** - Share best practices and coding standards specific to your project\n- **Set coding conventions** - Establish naming conventions, architecture patterns, and code style\n- **Give context about project structure** - Explain how your project is organized and why\n- **Share workflow instructions** - Provide step-by-step procedures for common tasks\n- **Inject specialized knowledge** - Add information about specific Unity features, third-party assets, or custom systems\n\n**Examples:**\n\n- \"Always use PascalCase for public methods and camelCase for private fields\"\n- \"This project uses a custom event system located in Scripts/Events/\"\n- \"When creating UI elements, always add them to the Canvas in Scene/UI/MainCanvas\"\n- \"Performance is critical - prefer object pooling for frequently instantiated objects\"\n- \"This project follows SOLID principles - explain any architecture decisions\"\n\n---\n\n# Contribution 💙💛\n\nContributions are highly appreciated. Bring your ideas and let's make game development simpler than ever before! Do you have an idea for a new `MCP Tool` or feature, or did you spot a bug and know how to fix it?\n\n1. 👉 [Fork the project](https://github.com/IvanMurzak/Unity-MCP/fork)\n2. Clone the fork and open the `./Unity-MCP-Plugin` folder in Unity\n3. Implement new things in the project, commit, push it to GitHub\n4. Create Pull Request targeting original [Unity-MCP](https://github.com/IvanMurzak/Unity-MCP) repository, `main` branch.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "unity",
        "gaming",
        "mcp",
        "gaming integration",
        "unity mcp",
        "integration gaming"
      ],
      "category": "gaming"
    },
    "ddsky--gamebrain-api-clients": {
      "owner": "ddsky",
      "name": "gamebrain-api-clients",
      "url": "https://github.com/ddsky/gamebrain-api-clients",
      "imageUrl": "",
      "description": "Search and discover hundreds of thousands of video games on any platform through the [GameBrain API](https://gamebrain.co/api).",
      "stars": 2,
      "forks": 2,
      "license": "Apache License 2.0",
      "language": "Java",
      "updated_at": "2025-09-13T19:09:14Z",
      "readme_content": "# MCP Setup\n\nRead more about setting up the [GameBrain MCP server](https://gamebrain.co/api/docs/mcp-setup). Simply get your free API key and copy this config into your MCP client:\n\n```json\n{\n  \"mcpServers\": {\n    \"gamebrain\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-remote\",\n        \"https://api.gamebrain.co/v1/mcp?api-key=YOUR_KEY\"\n      ]\n    }\n  }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gamebrain",
        "gaming",
        "games",
        "gamebrain api",
        "ddsky gamebrain",
        "gaming integration"
      ],
      "category": "gaming"
    },
    "jiayao--mcp-chess": {
      "owner": "jiayao",
      "name": "mcp-chess",
      "url": "https://github.com/jiayao/mcp-chess",
      "imageUrl": "",
      "description": "A MCP server playing chess against LLMs.",
      "stars": 13,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-10-03T19:06:05Z",
      "readme_content": "# MCP Chess Server\n\nThis MCP let's you play chess against any LLM.\n\n## Installation\n\nTo use this chess server, add the following configuration to your MCP config:\n\n```json\n{\n  \"mcpServers\": {\n    \"chess\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-chess\"\n      ]\n    }\n  }\n}\n```\n\n## Usage\n\nPlay a game:\n\n\n\n\nFind a position in a PGN for game analysis:\n\n\n\n## Available Tools\n\nThe server provides the following tools:\n\n*   `get_board_visualization()`: Provides the current state of the chessboard as an image. The board orientation automatically flips based on the user's assigned color.\n*   `get_turn()`: Indicates whose turn it is ('white' or 'black').\n*   `get_valid_moves()`: Lists all legal moves for the current player in UCI notation (e.g., 'e2e4', 'g1f3'). Returns an empty list if the game is over.\n*   `make_move(move_san: str)`: Makes a move on the board using Standard Algebraic Notation (SAN) (e.g., 'e4', 'Nf3', 'Bxe5'). Returns the move in SAN and UCI, the new board FEN, and game status.\n*   `new_game(user_plays_white: bool = True)`: Starts a new game, resetting the board. By default, the user plays white. Sets the user's color for board orientation. Returns a confirmation message.\n*   `find_position_in_pgn(pgn_string: str, condition: str)`: Finds the first board position in a PGN string matching a condition (e.g., \"bishop on a3\") and returns an image of that board state. The condition format is \"piece_type on square_name\". Valid piece types are \"pawn\", \"knight\", \"bishop\", \"rook\", \"queen\", \"king\".",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gaming",
        "chess",
        "llms",
        "mcp chess",
        "chess mcp",
        "integration gaming"
      ],
      "category": "gaming"
    },
    "kkjdaniel--bgg-mcp": {
      "owner": "kkjdaniel",
      "name": "bgg-mcp",
      "url": "https://github.com/kkjdaniel/bgg-mcp",
      "imageUrl": "",
      "description": "An MCP server that enables interaction with board game related data via the BoardGameGeek API (XML API2).",
      "stars": 16,
      "forks": 4,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-09-29T03:40:04Z",
      "readme_content": "<p align=\"center\">\n  \n</p>\n<h1 align=\"center\">BGG MCP: BoardGameGeek MCP Server</h1>\n\n<p align=\"center\">\n  <a href=\"https://smithery.ai/server/@kkjdaniel/bgg-mcp\"><img src=\"https://smithery.ai/badge/@kkjdaniel/bgg-mcp\" alt=\"smithery badge\"></a>\n  <a href=\"https://archestra.ai/mcp-catalog/kkjdaniel__bgg-mcp\"><img src=\"https://archestra.ai/mcp-catalog/api/badge/quality/kkjdaniel/bgg-mcp\" alt=\"trust score badge\"></a>\n  <a href=\"https://github.com/modelcontextprotocol/registry\"><img src=\"https://img.shields.io/badge/MCP_Registry-BGG_MCP-green\" alt=\"MCP Registry\"></a>\n  <br>\n  <a href=\"https://github.com/kkjdaniel/bgg-mcp/actions/workflows/publish-mcp.yml\"><img src=\"https://github.com/kkjdaniel/bgg-mcp/actions/workflows/publish-mcp.yml/badge.svg\" alt=\"Publish to MCP Registry\"></a>\n  <a href=\"https://go.dev/\"><img src=\"https://img.shields.io/github/go-mod/go-version/kkjdaniel/bgg-mcp\" alt=\"Go Version\"></a>\n  <a href=\"LICENSE\"><img src=\"https://img.shields.io/github/license/kkjdaniel/bgg-mcp\" alt=\"License\"></a>\n  <a href=\"https://modelcontextprotocol.io\"><img src=\"https://img.shields.io/badge/MCP-Protocol-blue\" alt=\"MCP Protocol\"></a>\n</p>\n\nBGG MCP provides access to the BoardGameGeek API through the [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol), enabling retrieval and filtering of board game data, user collections, and profiles. The server is implemented in Go, using the [GoGeek](https://github.com/kkjdaniel/gogeek) library, which helps ensure robust API interactions.\n\nPrice data is provided by [BoardGamePrices.co.uk](https://boardgameprices.co.uk), offering real-time pricing from multiple retailers.\n\nGame recommendations are powered by [Recommend.Games](https://recommend.games/), which provides algorithmic similarity recommendations based on BoardGameGeek data.\n\n<a href=\"https://boardgamegeek.com/\">\n  \n</a>\n\n## Demo\n\n<div align=\"center\">\n  \n  [![Rules Tool Demo Video](https://img.youtube.com/vi/cNX4WwVbFko/maxresdefault.jpg)](https://youtu.be/cNX4WwVbFko)\n  \n  **[▶️ Watch the Rules Tool Demo Video](https://youtu.be/cNX4WwVbFko)**\n  \n</div>\n\n## Tools\n\n### Core Tools\n\n| Tool                 | Description                                                                 |\n| -------------------- | --------------------------------------------------------------------------- |\n| `bgg-search`         | Search for board games with type filtering (base games, expansions, or all) |\n| `bgg-details`        | Get detailed information about a specific board game                        |\n| `bgg-collection`     | Query and filter a user's game collection with extensive filtering options  |\n| `bgg-hot`            | Get the current BGG hotness list                                            |\n| `bgg-user`           | Get user profile information                                                |\n| `bgg-price`          | Get current prices from multiple retailers using BGG IDs                    |\n| `bgg-trade-finder`   | Find trading opportunities between two BGG users                            |\n| `bgg-recommender`    | Get game recommendations based on similarity to a specific game             |\n| `bgg-thread-details` | Get the full content of a specific BGG forum thread including all posts     |\n\n### 🧪 Experimental Tools\n\n| Tool        | Description                                                                                |\n| ----------- | ------------------------------------------------------------------------------------------ |\n| `bgg-rules` | Answer rules questions by searching BGG forums for relevant discussions and clarifications |\n\n## Prompts\n\n- **Trade Sales Post** - Generate a formatted sales post for your BGG 'for trade' collection with discounted market prices\n- **Game Recommendations** - Get personalized game recommendations based on your BGG collection and preferences\n\n## Example Prompts\n\nHere are some example prompts you can use to interact with the BGG MCP tools:\n\n### 🔍 Search\n\n```\n\"Search for Wingspan on BGG\"\n\"How many expansions does Grand Austria Hotel have?\"\n\"Search for Wingspan expansions only\"\n```\n\n### 📊 Game Details\n\n```\n\"Get details for Azul\"\n\"Show me information about game ID 224517\"\n\"What's the BGG rating for Gloomhaven?\"\n```\n\n### 📚 Collection\n\n```\n\"Show me ZeeGarcia's game collection\"\n\"Show games rated 9+ in kkjdaniel's collection\"\n\"List unplayed games in rahdo's collection\"\n\"Find games for 6 players in kkjdaniel's collection\"\n\"Show me all the games rated 3 and below in my collection\"\n\"What games in my collection does rahdo want?\"\n\"What games does kkjdaniel have that I want?\"\n```\n\n### 🔥 Hotness\n\n```\n\"Show me the current BGG hotness list\"\n\"What's trending on BGG?\"\n```\n\n### 👤 User Profile\n\n```\n\"Show me details about BGG user rahdo\"\n\"When did user ZeeGarcia join BGG?\"\n\"How many buddies do I have on bgg?\"\n```\n\n### 💰 Prices\n\n```\n\"Get the best price for Wingspan in GBP\"\n\"Show me the best UK price for Ark Nova\"\n\"Compare prices for: Wingspan & Ark Nova\"\n```\n\n### 🎯 Recommendations\n\n```\n\"Recommend games similar to Wingspan\"\n\"What games are like Azul but with at least 1000 ratings?\"\n\"Find 5 games similar to Troyes\"\n```\n\n### 📖 Rules (Experimental)\n\n```\n\"[Your rules question about any board game] - use bgg-rules\"\n\"How does [game mechanic] work in [game name]? use bgg-rules\"\n\"Can I [specific action] in [game name]? use bgg-rules\"\n\"What happens when [situation] in [game name]? use bgg-rules\"\n```\n\nNote: Include \"use bgg-rules\" in your question to ensure the AI searches BGG forums for answers.\n\n## Installation\n\nYou have multiple options for installing BGG MCP:\n\n### A) Installing via Smithery (Recommended)\n\nGet started in under a minute with [Smithery](https://smithery.ai/server/@kkjdaniel/bgg-mcp):\n\n1. **Sign up** at Smithery and select your client (e.g., Claude Desktop)\n2. **Follow the quick setup** - Smithery handles all configuration automatically\n3. **Start using BGG tools** immediately - no manual setup required\n\n#### Or via Connectors for Claude users (Preferred)\n\nAdd BGG MCP as a custom connector:\n\n1. Go to **Settings → Connectors → Add custom connector**\n2. Enter this URL:\n   ```\n   https://server.smithery.ai/@kkjdaniel/bgg-mcp/mcp\n   ```\n3. Click **Connect** to authorise\n\nThat's it! The server uses the latest Streamable HTTP transport.\n\n**Tip:** Connectors added on Claude Desktop will also appear and work on mobile!\n\n### B) MCP Registry\n\nInstall via the MCP Registry:\n\n```bash\nmcp install io.github.kkjdaniel/bgg-mcp\n```\n\n### C) Manual Setup\n\n#### 1. Install Go\n\nYou will need to have Go installed on your system to build binary. This can be easily [downloaded and setup here](https://go.dev/doc/install), or you can use the package manager that you prefer such as Brew.\n\n#### 2. Build\n\nThe project includes a Makefile to simplify building and managing the binary.\n\n```bash\n# Build the application (output goes to build/bgg-mcp)\nmake build\n\n# Clean build artifacts\nmake clean\n\n# Both clean and build\nmake all\n```\n\nOr you can simply build it directly with Go...\n\n```bash\ngo build -o build/bgg-mcp\n```\n\n#### 3. Add MCP Config\n\nIn the `settings.json` (VS Code / Cursor) or `claude_desktop_config.json` add the following to your list of servers, pointing it to the binary you created earlier, once you load up your AI tool you should see the tools provided by the server connected:\n\n```json\n\"bgg\": {\n    \"command\": \"path/to/build/bgg-mcp\",\n    \"args\": [\"-mode\", \"stdio\"]\n}\n```\n\nMore details for configuring Claude can be [found here](https://modelcontextprotocol.io/quickstart/user).\n\n## Optional Configuration\n\n### Username Configuration (Optional)\n\nYou can optionally set the `BGG_USERNAME` environment variable to enable \"me\" and \"my\" references in queries:\n\n```json\n\"bgg\": {\n    ...\n    \"env\": {\n        \"BGG_USERNAME\": \"your_bgg_username\"\n    }\n}\n```\n\nThis enables:\n\n- **Collection queries**: \"Show my collection\" instead of specifying your username\n- **User queries**: \"Show my BGG profile\"\n- **AI assistance**: The AI can automatically use your username for comparisons and analysis\n\n**Note**: When you use self-references (me, my, I) without setting BGG_USERNAME, you'll get a clear error message.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "boardgamegeek",
        "gaming",
        "mcp",
        "boardgamegeek api",
        "gaming integration",
        "data boardgamegeek"
      ],
      "category": "gaming"
    },
    "opgginc--opgg-mcp": {
      "owner": "opgginc",
      "name": "opgg-mcp",
      "url": "https://github.com/opgginc/opgg-mcp",
      "imageUrl": "",
      "description": "Access real-time gaming data across popular titles like League of Legends, TFT, and Valorant, offering champion analytics, esports schedules, meta compositions, and character statistics.",
      "stars": 39,
      "forks": 11,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T21:26:25Z",
      "readme_content": "# OP.GG MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@opgginc/opgg-mcp)](https://smithery.ai/server/@opgginc/opgg-mcp)\n\nThe OP.GG MCP Server is a Model Context Protocol implementation that seamlessly connects OP.GG data with AI agents and platforms. This server enables AI agents to retrieve various OP.GG data via function calling.\n\n![opgg-mcp-lol-leaderboard](https://github.com/user-attachments/assets/e89a77e7-0b83-4e20-a660-b16aa2d03fe2)\n![opgg-mcp-esports](https://github.com/user-attachments/assets/4e134577-57b6-4369-bb71-b72f1bebcdd8)\n\n## Overview\n\nThis MCP server provides AI agents with access to OP.GG data through a standardized interface. It offers a simple way to connect to our remote server (https://mcp-api.op.gg/mcp), allowing for easy installation and immediate access to OP.GG data in a format that's easily consumable by AI models and agent frameworks.\n\n## Features\n\nThe OP.GG MCP Server currently supports the following tools:\n\n### League of Legends\n- **lol-champion-leader-board**: Get ranking board data for League of Legends champions.\n- **lol-champion-analysis**: Provides analysis data for League of Legends champions (counter and ban/pick data available in the \"weakCounters\" field).\n- **lol-champion-meta-data**: Retrieves meta data for a specific champion, including statistics and performance metrics.\n- **lol-champion-skin-sale**: Retrieves information about champion skins that are currently on sale.\n- **lol-summoner-search**: Search for League of Legends summoner information and stats.\n- **lol-champion-positions-data**: Retrieves position statistics data for League of Legends champions, including win rates and pick rates by position.\n- **lol-summoner-game-history**: Retrieve recent game history for a League of Legends summoner.\n- **lol-summoner-renewal**: Refresh and update League of Legends summoner match history and stats.\n\n### Esports (League of Legends)\n- **esports-lol-schedules**: Get upcoming LoL match schedules.\n- **esports-lol-team-standings**: Get team standings for a LoL league.\n\n### Teamfight Tactics (TFT)\n- **tft-meta-trend-deck-list**: TFT deck list tool for retrieving current meta decks.\n- **tft-meta-item-combinations**: TFT tool for retrieving information about item combinations and recipes.\n- **tft-champion-item-build**: TFT tool for retrieving champion item build information.\n- **tft-recommend-champion-for-item**: TFT tool for retrieving champion recommendations for a specific item.\n- **tft-play-style-comment**: This tool provides comments on the playstyle of TFT champions.\n\n### Valorant\n- **valorant-meta-maps**: Valorant map meta data.\n- **valorant-meta-characters**: Valorant character meta data.\n- **valorant-leaderboard**: Fetch Valorant leaderboard by region.\n- **valorant-agents-composition-with-map**: Retrieve agent composition data for a Valorant map.\n- **valorant-characters-statistics**: Retrieve character statistics data for Valorant, optionally filtered by map.\n- **valorant-player-match-history**: Retrieve match history for a Valorant player using their game name and tag line.\n\n## Usage\n\nThe OP.GG MCP Server can be used with any MCP-compatible client. The following content explains installation methods using Claude Desktop as an example.\n\n### Direct Connection via StreamableHttp\n\nIf you want to connect directly to our StreamableHttp endpoint, you can use the `supergateway` package. This provides a simple way to connect to our remote server without having to install the full OP.GG MCP Server.\n\nAdd the following to your `claude_desktop_config.json` file:\n\n#### Mac/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"supergateway\",\n        \"--streamableHttp\",\n        \"https://mcp-api.op.gg/mcp\"\n      ]\n    }\n  }\n}\n```\n\n#### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"supergateway\",\n        \"--streamableHttp\",\n        \"https://mcp-api.op.gg/mcp\"\n      ]\n    }\n  }\n}\n```\n\nThis configuration will use the `supergateway` package to establish a direct connection to our StreamableHttp endpoint, providing you with immediate access to all OP.GG data tools.\n\n### Installing via Smithery\n\nTo install OP.GG MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@opgginc/opgg-mcp):\n\n```bash\n$ npx -y @smithery/cli@latest install @opgginc/opgg-mcp --client claude --key {SMITHERY_API_KEY}\n```\n\n### Adding to MCP Configuration\n\nTo add this server to your Claude Desktop MCP configuration, add the following entry to your `claude_desktop_config.json` file:\n\n#### Mac/Linux\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@opgginc/opgg-mcp\",\n        \"--key\",\n        \"{SMITHERY_API_KEY}\"\n      ]\n    }\n  }\n}\n```\n\n#### Windows\n\n```json\n{\n  \"mcpServers\": {\n    \"opgg-mcp\": {\n      \"command\": \"cmd\",\n      \"args\": [\n        \"/c\",\n        \"npx\",\n        \"-y\",\n        \"@smithery/cli@latest\",\n        \"run\",\n        \"@opgginc/opgg-mcp\",\n        \"--key\",\n        \"{SMITHERY_API_KEY}\"\n      ]\n    }\n  }\n}\n```\n\nAfter adding the configuration, restart Claude Desktop for the changes to take effect.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Related Links\n\n- [Model Context Protocol](https://modelcontextprotocol.io)\n- [OP.GG](https://op.gg)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "opgg",
        "gaming",
        "opgginc",
        "gaming integration",
        "integration gaming",
        "gaming data"
      ],
      "category": "gaming"
    },
    "pab1ito--chess-mcp": {
      "owner": "pab1ito",
      "name": "chess-mcp",
      "url": "https://github.com/pab1it0/chess-mcp",
      "imageUrl": "",
      "description": "Access Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "chess",
        "gaming",
        "pab1ito",
        "access chess",
        "gaming integration",
        "chess information"
      ],
      "category": "gaming"
    },
    "rishijatia--fantasy-pl-mcp": {
      "owner": "rishijatia",
      "name": "fantasy-pl-mcp",
      "url": "https://github.com/rishijatia/fantasy-pl-mcp/",
      "imageUrl": "",
      "description": "An MCP server for real-time Fantasy Premier League data and analysis tools.",
      "stars": 59,
      "forks": 17,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T09:37:37Z",
      "readme_content": "# Fantasy Premier League MCP Server\n\n[![PyPI version](https://badge.fury.io/py/fpl-mcp.svg)](https://badge.fury.io/py/fpl-mcp)\n[![Package Check](https://github.com/rishijatia/fantasy-pl-mcp/actions/workflows/package-check.yml/badge.svg)](https://github.com/rishijatia/fantasy-pl-mcp/actions/workflows/package-check.yml)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/fpl-mcp)](https://pypi.org/project/fpl-mcp/)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Downloads](https://static.pepy.tech/badge/fpl-mcp)](https://pepy.tech/project/fpl-mcp)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/rishijatia/fantasy-pl-mcp)](https://archestra.ai/mcp-catalog/rishijatia__fantasy-pl-mcp)\n<a href=\"https://glama.ai/mcp/servers/2zxsxuxuj9\">\n  <img alt=\"badge\" width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/2zxsxuxuj9/badge\" />\n\nA Model Context Protocol (MCP) server that provides access to Fantasy Premier League (FPL) data and tools. This server allows you to interact with FPL data in Claude for Desktop and other MCP-compatible clients.\n\n*Demo of the Fantasy Premier League MCP Server in action*\n\n[![Fantasy Premier League MCP Demo](https://img.youtube.com/vi/QfOOOQ_jeMA/0.jpg)](https://youtu.be/QfOOOQ_jeMA)\n\n\n## Supported Platforms\n\n- Claude Desktop\n- Cursor\n- Windsurf\n- Other MCP Compatible Desktop LLMs\n\nMobile is currently not supported.\n\n## Features\n\n- **Rich Player Data**: Access comprehensive player statistics from the FPL API\n- **Team Information**: Get details about Premier League teams\n- **Gameweek Data**: View current and past gameweek information\n- **Player Search**: Find players by name or team\n- **Player Comparison**: Compare detailed statistics between any two players\n\n## Requirements\n\n- Python 3.10 or higher\n- Claude Desktop (for AI integration)\n\n## Installation\n\n### Option 1: Install from PyPI (Recommended)\n\n```bash\npip install fpl-mcp\n```\n\n### Option 1b: Install with Development Dependencies\n\n```bash\npip install \"fpl-mcp[dev]\"\n```\n\n### Option 2: Install from GitHub\n\n```bash\npip install git+https://github.com/rishijatia/fantasy-pl-mcp.git\n```\n\n### Option 3: Clone and Install Locally\n\n```bash\ngit clone https://github.com/rishijatia/fantasy-pl-mcp.git\ncd fantasy-pl-mcp\npip install -e .\n```\n\n## Running the Server\n\nAfter installation, you have several options to run the server:\n\n### 1. Using the CLI command\n\n```bash\nfpl-mcp\n```\n\n### 2. Using the Python module\n\n```bash\npython -m fpl_mcp\n```\n\n### 3. Using with Claude Desktop\n\nConfigure Claude Desktop to use the installed package by editing your `claude_desktop_config.json` file:\n\n**Method 1: Using the Python module directly (most reliable)**\n\n```json\n{\n  \"mcpServers\": {\n    \"fantasy-pl\": {\n      \"command\": \"python\",\n      \"args\": [\"-m\", \"fpl_mcp\"]\n    }\n  }\n}\n```\n\n**Method 2: Using the installed command with full path (if installed with pip)**\n\n```json\n{\n  \"mcpServers\": {\n    \"fantasy-pl\": {\n      \"command\": \"/full/path/to/your/venv/bin/fpl-mcp\"\n    }\n  }\n}\n```\n\nReplace `/full/path/to/your/venv/bin/fpl-mcp` with the actual path to the executable. You can find this by running `which fpl-mcp` in your terminal after activating your virtual environment.\n\n> **Note:** Using just `\"command\": \"fpl-mcp\"` may result in a `spawn fpl-mcp ENOENT` error since Claude Desktop might not have access to your virtual environment's PATH. Using the full path or the Python module approach helps avoid this issue.\n\n## Usage\n\n### In Claude for Desktop\n\n1. Start Claude for Desktop\n2. You should see FPL tools available via the hammer icon\n3. Example queries:\n   - \"Compare Mohamed Salah and Erling Haaland over the last 5 gameweeks\"\n   - \"Find all Arsenal midfielders\"\n   - \"What's the current gameweek status?\"\n   - \"Show me the top 5 forwards by points\"\n\n#### Fantasy-PL MCP Usage Instructions\n\n#### Basic Commands:\n- Compare players: \"Compare [Player1] and [Player2]\"\n- Find players: \"Find players from [Team]\" or \"Search for [Player Name]\"\n- Fixture difficulty: \"Show upcoming fixtures for [Team]\"\n- Captain advice: \"Who should I captain between [Player1] and [Player2]?\"\n\n#### Advanced Features:\n- Statistical analysis: \"Compare underlying stats for [Player1] and [Player2]\"\n- Form check: \"Show me players in form right now\"\n- Differential picks: \"Suggest differentials under 10% ownership\"\n- Team optimization: \"Rate my team and suggest transfers\"\n\n#### Tips:\n- Be specific with player names for accurate results\n- Include positions when searching (FWD, MID, DEF, GK)\n- For best captain advice, ask about form, fixtures, and underlying stats\n- Request comparison of specific metrics (xG, shots in box, etc.   \n\n### MCP Inspector for Development\n\nFor development and testing:\n\n```bash\n# If you have mcp[cli] installed\nmcp dev -m fpl_mcp\n\n# Or use npx\nnpx @modelcontextprotocol/inspector python -m fpl_mcp\n```\n\n## Available Resources\n- `fpl://static/players` - All player data with comprehensive statistics\n- `fpl://static/players/{name}` - Player data by name search\n- `fpl://static/teams` - All Premier League teams\n- `fpl://static/teams/{name}` - Team data by name search\n- `fpl://gameweeks/current` - Current gameweek data\n- `fpl://gameweeks/all` - All gameweeks data\n- `fpl://fixtures` - All fixtures for the current season\n- `fpl://fixtures/gameweek/{gameweek_id}` - Fixtures for a specific gameweek\n- `fpl://fixtures/team/{team_name}` - Fixtures for a specific team\n- `fpl://players/{player_name}/fixtures` - Upcoming fixtures for a specific player\n- `fpl://gameweeks/blank` - Information about upcoming blank gameweeks\n- `fpl://gameweeks/double` - Information about upcoming double gameweeks\n\n## Available Tools\n- `get_gameweek_status` - Get precise information about current, previous, and next gameweeks\n- `analyze_player_fixtures` - Analyze upcoming fixtures for a player with difficulty ratings\n- `get_blank_gameweeks` - Get information about upcoming blank gameweeks\n- `get_double_gameweeks` - Get information about upcoming double gameweeks\n- `analyze_players` - Filter and analyze FPL players based on multiple criteria\n- `analyze_fixtures` - Analyze upcoming fixtures for players, teams, or positions\n- `compare_players` - Compare multiple players across various metrics\n- `check_fpl_authentication` - Check if FPL authentication is working correctly\n- `get_my_team` - View your authenticated team (requires authentication)\n- `get_team` - View any team with a specific ID (requires authentication)\n- `get_manager_info` - Get manager details (requires authentication)\n\n## Prompt Templates\n- `player_analysis_prompt` - Create a prompt for analyzing an FPL player in depth\n- `transfer_advice_prompt` - Get advice on player transfers based on budget and position\n- `team_rating_prompt` - Create a prompt for rating and analyzing an FPL team\n- `differential_players_prompt` - Create a prompt for finding differential players with low ownership\n- `chip_strategy_prompt` - Create a prompt for chip strategy advice\n\n## Development\n\n### Adding Features\n\nTo add new features:\n\n1. Add resource handlers in the appropriate file within `fpl_mcp/fpl/resources/`\n2. Add tool handlers in the appropriate file within `fpl_mcp/fpl/tools/`\n3. Update the `__main__.py` file to register new resources and tools\n4. Test using the MCP Inspector before deploying to Claude for Desktop\n\n## Authentication\n\nTo use features requiring authentication (like accessing your team or private leagues), you need to set up your FPL credentials:\n\n```bash\n# Run the credential setup tool\nfpl-mcp-config setup\n```\n\nThis interactive tool will:\n1. Prompt for your FPL email, password, and team ID\n2. Let you choose between storing in config.json or .env file\n3. Save credentials securely to ~/.fpl-mcp/\n\nYou can test your authentication with:\n```bash\nfpl-mcp-config test\n```\n\nAlternatively, you can manually configure authentication:\n1. Create `~/.fpl-mcp/.env` file with:\n   ```\n   FPL_EMAIL=your_email@example.com\n   FPL_PASSWORD=your_password\n   FPL_TEAM_ID=your_team_id\n   ```\n   \n2. Or create `~/.fpl-mcp/config.json`:\n   ```json\n   {\n     \"email\": \"your_email@example.com\",\n     \"password\": \"your_password\",\n     \"team_id\": \"your_team_id\"\n   }\n   ```\n\n3. Or set environment variables:\n   ```bash\n   export FPL_EMAIL=your_email@example.com\n   export FPL_PASSWORD=your_password\n   export FPL_TEAM_ID=your_team_id\n   ```\n\n## Limitations\n\n- The FPL API is not officially documented and may change without notice\n- Only read operations are currently supported\n\n## Troubleshooting\n\n### Common Issues\n\n#### 1. \"spawn fpl-mcp ENOENT\" error in Claude Desktop\n\nThis occurs because Claude Desktop cannot find the `fpl-mcp` executable in its PATH.\n\n**Solution:** Use one of these approaches:\n\n- Use the full path to the executable in your config file\n  ```json\n  {\n    \"mcpServers\": {\n      \"fantasy-pl\": {\n        \"command\": \"/full/path/to/your/venv/bin/fpl-mcp\"\n      }\n    }\n  }\n  ```\n\n- Use Python to run the module directly (preferred method)\n  ```json\n  {\n    \"mcpServers\": {\n      \"fantasy-pl\": {\n        \"command\": \"python\",\n        \"args\": [\"-m\", \"fpl_mcp\"]\n      }\n    }\n  }\n  ```\n\n#### 2. Server disconnects immediately\n\nIf the server starts but immediately disconnects:\n\n- Check logs at `~/Library/Logs/Claude/mcp*.log` (macOS) or `%APPDATA%\\Claude\\logs\\mcp*.log` (Windows)\n- Ensure all dependencies are installed\n- Try running the server manually with `python -m fpl_mcp` to see any errors\n\n#### 3. Server not showing in Claude Desktop\n\nIf the hammer icon doesn't appear:\n\n- Restart Claude Desktop completely\n- Verify your `claude_desktop_config.json` has correct JSON syntax\n- Ensure the path to Python or the executable is absolute, not relative\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\nFor more details, please refer to the [CONTRIBUTING.md](CONTRIBUTING.md) file.\n\n## Acknowledgments\n\n- [Fantasy Premier League API](https://fantasy.premierleague.com/api/) for providing the data\n- [Model Context Protocol](https://modelcontextprotocol.io/) for the connectivity standard\n- [Claude](https://claude.ai/) for the AI assistant capabilities\n\n## Citation\n\nIf you use this package in your research or project, please consider citing it:\n\n```bibtex\n@software{fpl_mcp,\n  author = {Jatia, Rishi and Fantasy PL MCP Contributors},\n  title = {Fantasy Premier League MCP Server},\n  url = {https://github.com/rishijatia/fantasy-pl-mcp},\n  version = {0.1.0},\n  year = {2025},\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "fantasy",
        "league",
        "gaming integration",
        "league data",
        "integration gaming"
      ],
      "category": "gaming"
    },
    "sonirico--mpc-stockfish": {
      "owner": "sonirico",
      "name": "mpc-stockfish",
      "url": "https://github.com/sonirico/mcp-stockfish",
      "imageUrl": "",
      "description": "🏎️ 🏠 🍎 🪟 🐧️ MCP server connecting AI systems to Stockfish chess engine.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gaming",
        "stockfish",
        "chess",
        "gaming integration",
        "integration gaming",
        "chess engine"
      ],
      "category": "gaming"
    },
    "stefan-xyz--mcp-server-runescape": {
      "owner": "stefan-xyz",
      "name": "mcp-server-runescape",
      "url": "https://github.com/stefan-xyz/mcp-server-runescape",
      "imageUrl": "",
      "description": "An MCP server with tools for interacting with RuneScape (RS) and Old School RuneScape (OSRS) data, including item prices, player hiscores, and more.",
      "stars": 5,
      "forks": 3,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-08-17T23:30:11Z",
      "readme_content": "# mcp-server-runescape\n[![npm version](https://badge.fury.io/js/mcp-server-runescape.svg)](https://badge.fury.io/js/mcp-server-runescape)\n[![smithery badge](https://smithery.ai/badge/@stefan-xyz/mcp-server-runescape)](https://smithery.ai/server/@stefan-xyz/mcp-server-runescape)\n\nThis is an MCP server with tools for interacting with RuneScape (RS) and Old School RuneScape (OSRS) data, including item prices, player hiscores, and more.\n\nhttps://github.com/user-attachments/assets/7c141575-443b-4b76-8b33-6d48ec82fbe7\n\n## Features\n\nThe MCP server provides several tools which are used to answer your questions during gaming with data from accurate sources.\n\n### 1. Item Details (`get_item_details`)\n\nRetrieve comprehensive information about tradeable items, including:\n\n- Current price in the Grand Exchange\n- Price trends (24h, 30, 90, and 180 days)\n- Name\n- Category\n- Description (examine text)\n- Image\n- Members\n- ID\n\nhttps://runescape.wiki/w/Application_programming_interface#detail\n\n### 2. Item Price History (`get_item_price_history`)\n\nAccess the price history of an item over the last 180 days, including:\n\n- Price on a given day (timestamp)\n- Average price on a given day (timestamp)\n\nhttps://runescape.wiki/w/Application_programming_interface#Graph\n\n### 3. Player Hiscore (`get_player_hiscore`)\n\nFetch rankings and experience for skills and activities of any player, including:\n\n- Player rank\n- Skill level\n- Experience points\n- Activity scores\n\nhttps://runescape.wiki/w/Application_programming_interface#Hiscores_Lite_2\n\n### 4. Top Rankings (`get_top_rankings`)\n\nView the top (max 50) players for a specific skill or activity, including:\n\n- Name\n- Score (used for both skill and activity)\n- Rank\n\nhttps://runescape.wiki/w/Application_programming_interface#ranking\n\n### 5. Player Count (`get_player_count`)\n\nGets the number of players currently online in RuneScape and Old School RuneScape, including:\n\n- Real-time player counts\n\nhttps://runescape.wiki/w/Application_programming_interface#player_count\n\n### 6. Account Totals (`get_rsuser_total`)\n\nGets the current amount of accounts created that can access any form of RuneScape. This includes accounts made on FunOrb or a particular version of RuneScape, including:\n\n- Historical accounts creation data\n\nhttps://runescape.wiki/w/Application_programming_interface#rsusertotal\n\n#### Note\n\nFor consistency I tried to only use API endpoints which support both RS and OSRS data.\n\n## Example Use Cases\n\nThe goal is for you to have an easy way to fetch more accurate data right from the source while scaping.\n\nHere are some example queries you can ask the AI when using this MCP server:\n\n### Item Details\n\n```\n\"What is the price of a dragon scimitar in the Grand Exchange?\"\n\"Torva full helm price\"\n\"Current price of a dragon pickaxe\"\n\"How much percentage has the price of a dragon pickaxe changed in the past 30 days?\"\n\"How much percentage has the price of a dragon pickaxe changed in the past 90 days?\"\n\"How much percentage has the price of a dragon pickaxe changed in the past 180 days?\"\n\"Give me the description of an armadyl godsword\"\n\"Give me the icon of a dragon scimitar\"\n\"What is the id of an abbyssal whip?\"\n```\n\n### Item Price History\n\n```\n\"Give me the price history of a dragon scimitar\"\n\"Rune scimitar price on 1 april 2025?\"\n```\n\n### Player Hiscore\n\n```\n\"What rank is Zezima?\"\n\"What rank is Zezima on runescape?\"\n\"How much experience does Lynx Titan have overall?\"\n\"Iron Hyger ironman rank?\"\n```\n\n### Top Rankings\n\n```\n\"Top 10 players overall?\"\n\"Give me the top 50 attack rankings\"\n\"Number one agility on runescape?\"\n\"Most zulrah kills?\"\n\"Give me the top 5 jad rankings\"\n```\n\n## Getting Started\n\n[Introduction to MCP servers](https://modelcontextprotocol.io/introduction)\n\nYou can use the MCP server in many clients, for example:\n\n- Claude desktop\n- Cursor\n\n### 1. Add the MCP server in your config (NPM Package)\n\nPaste this snippet in your mcp config that your client is using\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server-runescape\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-runescape\"]\n    }\n  }\n}\n```\n\nYou can find the config file in (mac):\n\n- Claude desktop:\n\n`~/Library/Application Support/Claude/claude_desktop_config.json`\n\n- Cursor:\n\n`/Users/name/.cursor/mcp.json`\n\n### 2. From Source\n\n**Required** [Node.js](https://nodejs.org/en) installed on your system\n\n1. Clone this repository\n2. Install dependencies:\n   ```bash   \n   yarn\n   ```\n   or\n   ```bash   \n   npm install\n   ```\n3. Then update your Claude desktop or Cursor with:\n   ```json\n   {\n     \"mcpServers\": {\n       \"mcp-server-runescape\": {\n         \"command\": \"node\",\n         \"args\": [\"/Users/path/to/mcp-server-runescape/src/server.js\"]\n       }\n     }\n   }\n   ```\n4. **Optional**: Run the debugger/inspector\n   ```bash\n   yarn dev\n   ```\n   or\n   ```bash   \n   npm run build\n   ```\n\nMake sure to:\n\n- Replace `/path/to/mcp-server-runescape` with the actual path to your installation.\n\nAfter updating the configuration, restart Claude desktop or Cursor for the changes to take effect.\n\n#### Personal preference\n\nYou can use any client you want, my personal preference goes to Cursor at the moment in combination with deepseek-v3.1 which is performing really well.\n\n[List of clients](https://modelcontextprotocol.io/clients)\n\n## API Documentation\n\nFor detailed information about the Runescape API endpoints used by this MCP server, visit:\n[RS/Wiki API](https://runescape.wiki/w/Application_programming_interface)\n\n## Thank you\n\nI built this over the weekend, to learn a bit more about MCP servers. Runescape was the perfect subject to try it out on.\n\n- Shout out to the rs/wiki team for the docs and API.\n\nIf this helps you out in anyway when scaping and you would like to support me, feel free to\n\n[![\"Buy Me A Coffee\"](https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png)](https://buymeacoffee.com/stefanxyz)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "runescape",
        "osrs",
        "server",
        "server runescape",
        "runescape mcp",
        "runescape osrs"
      ],
      "category": "gaming"
    },
    "tomholford--mcp-tic-tac-toe": {
      "owner": "tomholford",
      "name": "mcp-tic-tac-toe",
      "url": "https://github.com/tomholford/mcp-tic-tac-toe",
      "imageUrl": "",
      "description": "Play Tic Tac Toe against an AI opponent using this MCP server.",
      "stars": 2,
      "forks": 1,
      "license": "No License",
      "language": "Go",
      "updated_at": "2025-09-08T08:37:22Z",
      "readme_content": "# MCP Tic-Tac-Toe\n\nA Model Context Protocol (MCP) server that enables AI assistants to play tic-tac-toe through standardized tool interfaces. Perfect for demonstrating AI-human collaboration and MCP integration.\n\n\n\n## Overview\n\nThis project implements a complete tic-tac-toe game as an MCP server, allowing AI assistants like Claude to:\n- Create and manage multiple game sessions\n- Make strategic moves and analyze positions  \n- Provide game commentary and suggestions\n- Play against humans or other AIs\n\n## Quick Start\n\n### Prerequisites\n- Go 1.19+ installed\n- Claude Code or other MCP-compatible client\n\n### Installation\n```bash\ngit clone https://github.com/tomholford/mcp-tic-tac-toe\ncd mcp-tic-tac-toe\ngo mod tidy\ngo build -o bin/server cmd/server.go\n```\n\n### Basic Usage\n```bash\n# Start MCP server (stdio transport)\n./bin/server\n\n# Or specify transport method\n./bin/server -transport=sse -addr=:8080\n```\n\n## MCP Configuration\n\n### Claude Code Setup\n\n1. **Build the server:**\n   ```bash\n   go build -o bin/server cmd/server.go\n   ```\n\n2. **Add to your MCP configuration:**\n   \n   Create or edit your MCP configuration file:\n   ```bash\n   # For macOS/Linux\n   ~/.config/claude-code/mcp_servers.json\n   \n   # For Windows  \n   %APPDATA%\\claude-code\\mcp_servers.json\n   ```\n\n3. **Add the server configuration:**\n   ```json\n   {\n     \"mcpServers\": {\n       \"tic-tac-toe\": {\n         \"command\": \"/full/path/to/mcp-tic-tac-toe/bin/server\",\n         \"args\": [\"-transport=stdio\"],\n         \"env\": {}\n       }\n     }\n   }\n   ```\n\n4. **Restart Claude Code** and the tic-tac-toe tools will be available.\nc\n### Claude Desktop\n\n```json\n\"tic-tac-toe\": {\n  \"command\": \"/full/path/to/mcp-tic-tac-toe/bin/server\",\n  \"args\": [\"\"]\n}\n```\n\n## Available MCP Tools\n\nThe server exposes 8 tools for complete game management:\n\n### Game Management\n- **`new_game`** - Create a new tic-tac-toe game\n  - Optional: `game_id` (string) - Custom game identifier\n  - Returns: Game ID, starting player, initial board\n\n- **`list_games`** - Show all active game sessions  \n  - Returns: List of active game IDs\n\n- **`reset_game`** - Reset a game to initial state\n  - Required: `game_id` (string)\n  - Returns: Confirmation and fresh board\n\n### Gameplay  \n- **`make_move`** - Execute a move on the board\n  - Required: `game_id` (string), `position` (A1-C3), `player` (X/O)\n  - Returns: Updated board, game status, next player\n\n- **`get_board`** - Get current board state\n  - Required: `game_id` (string)  \n  - Returns: Board display, current player, move count\n\n- **`get_available_moves`** - List all valid moves\n  - Required: `game_id` (string)\n  - Returns: Available positions for current player\n\n### Analysis\n- **`get_status`** - Check game status and winner\n  - Required: `game_id` (string)\n  - Returns: Game status (ongoing/won/draw), winner if applicable\n\n- **`analyze_position`** - Get strategic analysis  \n  - Required: `game_id` (string)\n  - Returns: Position analysis and board state\n\n## Usage Examples\n\n### Start a New Game\n```\nAI: Use the new_game tool\n→ New game created with ID: game-a1b2c3d4\n  Starting player: X\n  Initial board:\n    A B C\n  1 · · ·\n  2 · · ·  \n  3 · · ·\n```\n\n### Make Strategic Moves\n```\nHuman: I'll take the center\nAI: Use make_move tool with {\"game_id\": \"game-a1b2c3d4\", \"position\": \"B2\", \"player\": \"X\"}\n\nAI: Let me analyze the position first\nAI: Use analyze_position tool → Shows current state and opportunities\n\nAI: I'll take a corner for strategic advantage  \nAI: Use make_move tool with {\"game_id\": \"game-a1b2c3d4\", \"position\": \"A1\", \"player\": \"O\"}\n```\n\n### Get Game Status\n```\nAI: Use get_status tool → Game Status: Ongoing, Current player: X, Move count: 2\nAI: Use get_available_moves tool → Available moves (7): A2, A3, B1, B3, C1, C2, C3\n```\n\n## Transport Options\n\nThe server supports three transport methods:\n\n### 1. Stdio (Default)\nBest for local MCP clients like Claude Code:\n```bash\n./bin/server -transport=stdio\n```\n\n### 2. Server-Sent Events (SSE)  \nFor web applications and real-time updates:\n```bash\n./bin/server -transport=sse -addr=:8080\n```\n\n### 3. Streamable HTTP\nFor traditional HTTP integrations:\n```bash  \n./bin/server -transport=http -addr=:8080\n```\n\n## Development\n\n### Project Structure\n```\nmcp-tic-tac-toe/\n├── cmd/\n│   ├── server.go          # MCP server main entry point\n│   └── demo.go            # Game logic demonstration  \n├── game/                  # Core tic-tac-toe logic\n│   ├── types.go           # Game data structures\n│   ├── engine.go          # Game rules and validation\n│   └── engine_test.go     # Game logic tests\n├── server/                # MCP server implementation  \n│   ├── server.go          # MCP server setup and tools\n│   ├── handlers.go        # Tool request handlers\n│   └── server_test.go     # MCP integration tests\n└── bin/                   # Built executables\n```\n\n### Running Tests\n```bash\n# Test all packages\ngo test ./game ./server -v\n\n# Test specific functionality\ngo test ./game -run TestWinConditions\ngo test ./server -run TestMakeMoveTool\n```\n\n### Building from Source\n```bash\n# Build server\ngo build -o bin/server cmd/server.go\n\n# Build demo\ngo build -o bin/demo cmd/demo.go\n\n# Run demo (no MCP required)\n./bin/demo\n```\n\n## Resources\n\n- [MCP Specification](https://modelcontextprotocol.io/) - Official MCP documentation\n- [mcp-go Library](https://github.com/mark3labs/mcp-go) - Go MCP implementation used in this project",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gaming",
        "tic",
        "mcp",
        "integration gaming",
        "gaming integration",
        "mcp tic"
      ],
      "category": "gaming"
    }
  }
}