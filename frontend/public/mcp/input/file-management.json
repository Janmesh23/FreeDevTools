{
  "category": "file-management",
  "categoryDisplay": "File Management",
  "description": "",
  "totalRepositories": 164,
  "repositories": {
    "302ai--302_file_parser_mcp": {
      "owner": "302ai",
      "name": "302_file_parser_mcp",
      "url": "https://github.com/302ai/302_file_parser_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/302ai.webp",
      "description": "The File Parser MCP Server helps you read, modify, and manage files easily. It simplifies the process of file handling, allowing developers to focus on building their applications without getting bogged down in the complexities of dealing with different file types.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-15T13:44:27Z",
      "readme_content": "# 302AI File Parser MCP Server\n\n## Development\n\nInstall dependencies:\n\n```bash\nnpm install\n```\n\nBuild the server:\n\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n\n```bash\nnpm run watch\n```\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"302ai-file-parser-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@302ai/file-parser-mcp\"],\n      \"env\": {\n        \"302AI_API_KEY\": \"YOUR_API_KEY_HERE\"\n      }\n    }\n  }\n}\n```\n\nFind Your 302AI_API_KEY [here](https://dash.302.ai/apis/list)\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. We recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector), which is available as a package script:\n\n```bash\nnpm run inspector\n```\n\nThe Inspector will provide a URL to access debugging tools in your browser.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "302_file_parser_mcp",
        "files",
        "file",
        "302ai 302_file_parser_mcp",
        "302_file_parser_mcp file",
        "file handling"
      ],
      "category": "file-management"
    },
    "54yyyu--school-mcp": {
      "owner": "54yyyu",
      "name": "school-mcp",
      "url": "https://github.com/54yyyu/school-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/54yyyu.webp",
      "description": "School MCP is a server designed to help students manage their academic tasks more efficiently. It connects to platforms like Canvas and Gradescope to fetch assignment deadlines, download course materials, and integrate with your calendar for reminders.",
      "stars": 4,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-26T09:54:01Z",
      "readme_content": "# School MCP\n\n[![smithery badge](https://smithery.ai/badge/@54yyyu/school-mcp)](https://smithery.ai/server/@54yyyu/school-mcp)\n\nA Model Context Protocol (MCP) server for academic tools, integrating with Canvas and Gradescope platforms.\n\n## Features\n\n- **Assignment Deadlines**: Fetch and display upcoming deadlines from Canvas and Gradescope\n- **Calendar Integration**: Add deadlines to macOS Calendar or Reminders using AppleScript\n- **File Management**: Download course materials from Canvas\n\n## Quickstart\n\n### Installation\n\n#### Installing via Smithery\n\nTo install School MCP for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@54yyyu/school-mcp):\n\n```bash\nnpx -y @smithery/cli install @54yyyu/school-mcp --client claude\n```\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/school-mcp.git\ncd school-mcp\n```\n\n2. Install the package:\n```bash\npip install -e .\n```\n\n3. Set up your environment variables by either:\n   - Using the included setup helper (recommended)\n   - Creating a `.env` file manually\n\n### Using the Setup Helper\n\nRun the setup helper to configure Claude Desktop automatically:\n\n```bash\npython setup_helper.py\n```\n\nThe setup helper will:\n- Find your Claude Desktop configuration file\n- Create a `.env` file if needed\n- Configure the MCP server with proper paths\n- Add your environment variables to the Claude Desktop configuration\n\n### Manual Setup\n\nIf you prefer to set up manually:\n\n1. Copy the environment template:\n```bash\ncp .env.template .env\n# Edit .env with your credentials\n```\n\n2. Configure Claude Desktop by following the [Claude Desktop Integration Guide](docs/claude_desktop.md).\n\n### Running the server\n\nRun directly:\n```bash\npython -m school_mcp\n```\n\nOr use the convenience script:\n```bash\n./run_server.py\n```\n\n## Tools\n\n- `get_deadlines`: Fetch upcoming assignment deadlines from Canvas and Gradescope\n- `add_to_reminders`: Add assignments to macOS Reminders\n- `list_courses`: List all available Canvas courses\n- `download_course_files`: Download files from a Canvas course\n- `set_download_path`: Configure where downloaded files are saved\n- `get_download_path_info`: Check the current download location\n\n## Configuration\n\nThe server tries to find configuration in this order:\n1. Environment variables\n2. `.env` file in the current directory\n3. Existing `config.json` file in the home directory\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "management",
        "students",
        "mcp school",
        "mcp server",
        "school mcp"
      ],
      "category": "file-management"
    },
    "7gugu--zip-mcp": {
      "owner": "7gugu",
      "name": "zip-mcp",
      "url": "https://github.com/7gugu/zip-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/7gugu.webp",
      "description": "The ZIP Compression Server allows users to easily compress and decompress files, manage multiple files at once, and query information about ZIP files, making file management more efficient and secure.",
      "stars": 11,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-26T13:00:37Z",
      "readme_content": "# ZIP MCP Server\n\n[中文](README_CN.md) | English\n\n## Project Introduction\n\n<a href=\"https://glama.ai/mcp/servers/@7gugu/zip-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@7gugu/zip-mcp/badge\" />\n</a>\n\nZIP MCP Server is a compression server based on fastMCP and zip.js, implementing the Model Context Protocol (MCP). This project provides fully parameter-controlled ZIP compression, decompression, and query compression package information functions.\n\n## Features\n\n- Supports compression and decompression of files and data\n- Supports multi-file packaging compression\n- Provides compression level control (0-9)\n- Supports password protection and encryption strength settings\n- Provides query function for compressed package metadata\n\n## Project Structure\n\n```bash\nzip-mcp\n├── src\n│   ├── index.ts               # Application entry point\n│   ├── utils\n│   │   └── compression.ts     # Compression and decompression implementation\n├── tsconfig.json              # TypeScript configuration file\n├── package.json               # npm configuration file\n└── README.md                  # Project documentation\n```\n\n## Installation\n\nYou can install ZIP MCP Server globally using npm:\n\n```bash\nnpm install -g zip-mcp\n```\n\n## MCP Configuration\n\nAfter installation, you can configure ZIP MCP in your MCP JSON configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"zip-mcp\": {\n      \"command\": \"zip-mcp\",\n      \"args\": []\n    }\n  }\n}\n```\n\n## Configure the MCP JSON in the AI Client\n\n- Claude Client: [https://modelcontextprotocol.io/quickstart/user](https://modelcontextprotocol.io/quickstart/user)\n- Raycast: requires installing the MCP plugin\n- Cursor: [https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers](https://docs.cursor.com/context/model-context-protocol#configuring-mcp-servers)\n\n## MCP Tool Description\n\nZIP MCP Server provides the following tools, which can be called through the MCP protocol:\n\n### Compression Tool (compress)\n\nCompress local files or directories into a ZIP file.\n\n**Parameters:**\n\n- `input`: Path of the file or directory to be compressed (string or string array)\n- `output`: Path of the output ZIP file\n- `options`: Compression options (optional)\n  - `level`: Compression level (0-9, default is 5)\n  - `password`: Password protection\n  - `encryptionStrength`: Encryption strength (1-3)\n  - `overwrite`: Whether to overwrite existing files (boolean)\n\n**Returns:**\n\n- Success: Text content containing success information\n- Failure: Text content containing error information\n\n### Decompression Tool (decompress)\n\nDecompress local ZIP files to the specified directory.\n\n**Parameters:**\n\n- `input`: Path of the ZIP file\n- `output`: Path of the output directory\n- `options`: Decompression options (optional)\n  - `password`: Decompression password\n  - `overwrite`: Whether to overwrite existing files (boolean)\n  - `createDirectories`: Whether to create non-existent directories (boolean)\n\n**Returns:**\n\n- Success: Text content containing decompression result information\n- Failure: Text content containing error information\n\n### ZIP Info Tool (getZipInfo)\n\nGet metadata information of local ZIP files.\n\n**Parameters:**\n\n- `input`: Path of the ZIP file\n- `options`: Options (optional)\n  - `password`: Decompression password\n\n**Returns:**\n\n- Success: Text content containing detailed information of the ZIP file, including:\n  - Total number of files\n  - Total size\n  - Compressed size\n  - Compression ratio\n  - Detailed information of each file\n- Failure: Text content containing error information\n\n### Test Tool (echo)\n\nReturns the input message to test if the service is running normally.\n\n**Parameters:**\n\n- `message`: Message to be returned\n\n**Returns:**\n\n- Text content containing the input message and current timestamp\n\n## Examples\n\nExamples of calling tools using the MCP client:\n\n```javascript\n// Compress files\nawait client.executeTool(\"compress\", {\n  input: \"/path/to/files/or/directory\",\n  output: \"/path/to/output.zip\",\n  options: {\n    level: 9,\n    comment: \"Test compression\",\n    password: \"secret\",\n    overwrite: true,\n  },\n});\n\n// Decompress files\nawait client.executeTool(\"decompress\", {\n  input: \"/path/to/archive.zip\",\n  output: \"/path/to/extract/directory\",\n  options: {\n    password: \"secret\",\n    overwrite: true,\n    createDirectories: true,\n  },\n});\n\n// Get ZIP info\nawait client.executeTool(\"getZipInfo\", {\n  input: \"/path/to/archive.zip\",\n  options: {\n    password: \"secret\",\n  },\n});\n\n// Test service\nawait client.executeTool(\"echo\", {\n  message: \"Hello, ZIP MCP Server!\",\n});\n```\n\n## Contact\n\n- Email: [gz7gugu@qq.com](mailto:gz7gugu@qq.com)\n- Blog: [https://7gugu.com](https://7gugu.com)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zip",
        "compression",
        "compress",
        "zip compression",
        "zip files",
        "compression server"
      ],
      "category": "file-management"
    },
    "Albiemark--dbx-mcp-server": {
      "owner": "Albiemark",
      "name": "dbx-mcp-server",
      "url": "https://github.com/Albiemark/dbx-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Albiemark.webp",
      "description": "Integrates Dropbox with applications to manage files, folders, and account information through MCP-compatible clients, utilizing Dropbox's public API for seamless interaction.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-03-24T00:51:41Z",
      "readme_content": "# dbx-mcp-server\n\nA Model Context Protocol (MCP) server that provides integration with Dropbox, allowing MCP-compatible clients to interact with Dropbox through a set of powerful tools.\n\n**Important Disclaimer:** This project is not affiliated with, endorsed by, or sponsored by Dropbox. It is an independent integration that works with Dropbox's public API.\n\n## Table of Contents\n\n- [Quick Start](#quick-start)\n- [Installation](#installation)\n- [Authentication](#authentication)\n- [Available Tools](#available-tools)\n- [Configuration](#configuration)\n- [Usage Examples](#usage-examples)\n- [Testing](#testing)\n- [Development](#development)\n- [License](#license)\n\n## Quick Start\n\n1. Clone the repository\n2. Run `npm install` to install dependencies\n3. Run `npm run build` to build the project\n4. Register a Dropbox app at [Dropbox App Console](https://www.dropbox.com/developers/apps):\n   - Choose \"Scoped access\" API\n   - Choose the access type your app needs\n   - Name your app and click \"Create app\"\n   - Under \"Permissions\", select the required permissions:\n     - `files.metadata.read`\n     - `files.content.read`\n     - `files.content.write`\n     - `sharing.write`\n     - `account_info.read`\n   - Add `http://localhost:3000/callback` as your redirect URI\n   - Note your App key and App secret\n5. Run the setup script:\n   ```bash\n   npm run setup\n   ```\n6. Configure your MCP client to use the server\n\n## Installation\n\n1. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/your-username/dbx-mcp-server.git\n   cd dbx-mcp-server\n   ```\n\n2. **Install dependencies and build**\n\n   ```bash\n   npm install\n   npm run build\n   ```\n\n3. **Run the setup script**\n\n   ```bash\n   npm run setup\n   ```\n\n4. **Add to MCP settings**\n\n   Add the following to your MCP settings file:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"dbx\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/dbx-mcp-server/build/index.js\"]\n       }\n     }\n   }\n   ```\n\n## Authentication\n\nThe server uses OAuth 2.0 with PKCE for secure authentication with Dropbox.\n\n### Environment Variables\n\nRequired:\n\n- `DROPBOX_APP_KEY`: Your Dropbox app's key\n- `DROPBOX_APP_SECRET`: Your Dropbox app's secret\n- `DROPBOX_REDIRECT_URI`: OAuth redirect URI\n- `TOKEN_ENCRYPTION_KEY`: 32+ character key for token encryption\n\nOptional:\n\n- `TOKEN_REFRESH_THRESHOLD_MINUTES`: Minutes before expiration to refresh token (default: 5)\n- `MAX_TOKEN_REFRESH_RETRIES`: Maximum number of refresh attempts (default: 3)\n- `TOKEN_REFRESH_RETRY_DELAY_MS`: Delay between refresh attempts in ms (default: 1000)\n\n## Available Tools\n\n### File Operations\n\n- `list_files`: List files in a directory\n- `upload_file`: Upload a file\n- `download_file`: Download a file\n- `safe_delete_item`: Safely delete with recycle bin support\n- `create_folder`: Create a new folder\n- `copy_item`: Copy a file or folder\n- `move_item`: Move or rename a file/folder\n\n### Metadata and Search\n\n- `get_file_metadata`: Get file/folder metadata\n- `search_file_db`: Search files and folders\n- `get_sharing_link`: Create sharing links\n- `get_file_content`: Get file contents\n\n### Account Operations\n\n- `get_account_info`: Get account information\n\n## Usage Examples\n\n```typescript\n// List files in root directory\nawait mcp.useTool(\"dbx-mcp-server\", \"list_files\", { path: \"\" });\n\n// Upload a file\nawait mcp.useTool(\"dbx-mcp-server\", \"upload_file\", {\n  path: \"/test.txt\",\n  content: Buffer.from(\"Hello World\").toString(\"base64\"),\n});\n\n// Search for files\nawait mcp.useTool(\"dbx-mcp-server\", \"search_file_db\", {\n  query: \"report\",\n  path: \"/Documents\",\n  max_results: 10,\n});\n```\n\n## Testing\n\nRun the test suite:\n\n```bash\nnpm test\n```\n\nTests verify all operations including authentication, file operations, and error handling.\n\n### Test Structure\n\nThe test suite is organized into several modules:\n\n- **Dropbox Operations**: Tests for basic file operations (upload, download, list, etc.)\n- **Account Operations**: Tests for accessing account information\n- **Search and Delete**: Tests for search functionality and safe deletion with recycle bin support\n- **Resource System**: Tests for the MCP resource system integration\n\n### Handling Test Data\n\nThe tests use dynamically generated file and folder names based on timestamps to avoid conflicts. Test data is automatically cleaned up after test execution.\n\n### Running Specific Tests\n\nTo run a specific test file or test group:\n\n```bash\nnpm test -- tests/dropbox/search-delete.test.ts  # Run specific test file\nnpm test -- -t \"should search for files\"        # Run tests matching description\n```\n\n### Troubleshooting Tests\n\nIf tests fail with timing or authentication issues:\n\n1. Check that the mock implementations in `tests/setup.ts` match your test expectations\n2. Ensure test helpers are correctly configured\n3. For Jest scope errors, avoid referencing imported variables in mock factory functions\n\n## Development\n\nBuilt with:\n\n- TypeScript\n- Model Context Protocol SDK\n- Dropbox SDK v10.34.0\n- Dropbox API v2\n\n## License\n\nMIT License\n\nCopyright (c) 2025 MCP Server Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n[![smithery badge](https://smithery.ai/badge/@Albiemark/dbx-mcp-server)](https://smithery.ai/server/@Albiemark/dbx-mcp-server)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dropbox",
        "dbx",
        "files",
        "utilizing dropbox",
        "dropbox applications",
        "integrates dropbox"
      ],
      "category": "file-management"
    },
    "AlexanderVTr--cursor-mcp-file-organizer": {
      "owner": "AlexanderVTr",
      "name": "cursor-mcp-file-organizer",
      "url": "https://github.com/AlexanderVTr/cursor-mcp-file-organizer",
      "imageUrl": "/freedevtools/mcp/pfp/AlexanderVTr.webp",
      "description": "Automatically organizes files in the Downloads folder by type, enhancing productivity through configured organization rules and real-time file system monitoring. Supports multiple file categories, including images, documents, archives, code files, media files, design files, databases, and fonts.",
      "stars": 4,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-17T03:24:58Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/alexandervtr-cursor-mcp-file-organizer-badge.png)](https://mseep.ai/app/alexandervtr-cursor-mcp-file-organizer)\n\n# Cursor MCP File Organizer\n\nA Model Context Protocol (MCP) server for organizing files in your Downloads folder using Cursor IDE.\n\n## Features\n\n- Automatically organizes files in Downloads folder by type\n- Supports multiple file categories:\n  - Images (jpg, jpeg, png, gif, webp, svg, etc.)\n  - Documents (pdf, doc, docx, txt, etc.)\n  - Archives (zip, rar, 7z, tar, etc.)\n  - Code files (js, ts, py, java, etc.)\n  - Media files (mp4, mp3, wav, etc.)\n  - Design files (psd, ai, sketch, etc.)\n  - Databases (sql, sqlite, etc.)\n  - Fonts (ttf, otf, woff, etc.)\n- Configurable organization rules\n- Real-time file system monitoring\n- SSE (Server-Sent Events) support for live updates\n\n## Prerequisites\n\n- Node.js (v14 or higher)\n- TypeScript\n- Cursor IDE\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/AlexanderVTr/cursor-mcp-file-organizer.git\ncd cursor-mcp-file-organizer\n```\n\n2. Install dependencies:\n\n```bash\nnpm install\n```\n\n3. Build the project:\n\n```bash\nnpm run build\n```\n\n## Configuration\n\n1. Configure Cursor IDE MCP settings:\n\n```json\n{\n  \"mcpServers\": {\n    \"file-organizer\": {\n      \"url\": \"http://localhost:3001\",\n      \"port\": 3001,\n      \"enabled\": true,\n      \"description\": \"File organization MCP server\"\n    }\n  }\n}\n```\n\n2. Customize organization rules in `mcp-config.json`:\n\n```json\n{\n  \"version\": \"1.0\",\n  \"rules\": {\n    \"downloads\": {\n      \"path\": \"~/Downloads\",\n      \"organizeBy\": {\n        \"images\": {\n          \"extensions\": [\".jpg\", \".jpeg\", \".png\", \".gif\", \".webp\", \".svg\"],\n          \"destination\": \"~/Downloads/Pictures\"\n        }\n        // ... other categories\n      }\n    }\n  }\n}\n```\n\n## Usage\n\n1. Start the server:\n\n```bash\nnpm start\n```\n\n2. Use Cursor IDE to send commands:\n\n```typescript\n// Example command to organize files\n{\n  command: \"organizeFiles\",\n  args: {\n    path: \"~/Downloads\"\n  }\n}\n```\n\n## Available Commands\n\n- `listDir`: List directory contents\n- `readFile`: Read file contents\n- `writeFile`: Write content to file\n- `moveFile`: Move file to new location\n- `createDir`: Create directory\n- `organizeFiles`: Organize files by type\n\n## Development\n\n```bash\n# Run in development mode with hot reload\nnpm run dev\n\n# Build the project\nnpm run build\n\n# Start the server\nnpm start\n```\n\n## Project Structure\n\n```\ncursor-mcp-file-organizer/\n├── src/\n│   ├── server.ts      # Main server implementation\n│   └── organizer.ts   # File organization logic\n├── dist/             # Compiled JavaScript\n├── package.json      # Dependencies and scripts\n├── tsconfig.json     # TypeScript configuration\n└── mcp-config.json   # Organization rules\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Cursor IDE team for the MCP protocol\n- Node.js community for the excellent tools and libraries\n\nCertified by MCP Review https://mcpreview.com/mcp-servers/alexandervtr/cursor-mcp-file-organizer\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "file",
        "organizer",
        "file organizer",
        "file management",
        "organizes files"
      ],
      "category": "file-management"
    },
    "DMontgomery40--meta-mcp-server": {
      "owner": "DMontgomery40",
      "name": "meta-mcp-server",
      "url": "https://github.com/DMontgomery40/meta-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/DMontgomery40.webp",
      "description": "Facilitates the creation and management of multiple customized MCP servers by automating file management and integrating various MCP tools. Provides robust error handling and debugging support for development environments.",
      "stars": 19,
      "forks": 5,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-16T13:10:49Z",
      "readme_content": "# Meta MCP Server\n\n\"Meta\" because it's an MCP Server that Creates MCP Servers. And also because \"suck it, Zuck, I got it first\" (seriously though I made that connection after the fact).\n\n## Features \n\nAI (poorly) Created Content:\n\n- **Dynamic Server Generation**: Allows for the creation of customized MCP servers by specifying directories and files to be created.\n- **Automated File Management**: Handles the creation of necessary directories and files for new servers automatically.\n- **MCP Tool Integration**: Utilizes the Model Context Protocol SDK to manage tools and resources efficiently.\n- **Error Handling**: Robust error management to ensure stability even when facing invalid inputs or system errors.\n- **Debugging Support**: Detailed logging and system prompts to aid in debugging and operational transparency.\n\n\n### Configure in Claude Desktop\n\n``` \n  },\n    \"meta-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"meta-mcp-server\"]\n    }\n  }\n```\n\nSecurity\nThis server does not implement advanced security measures and is intended for development purposes only. Ensure that it is operated in a secure environment, and consider implementing additional authentication and validation mechanisms for production use.\n\n## Support\nFor support, feature requests, or to report bugs, please open an issue on the GitHub repository page.\n\n## License\nMIT License\n\nCopyright (c) 2024 David Montgomery\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "server",
        "servers",
        "mcp server",
        "mcp servers",
        "mcp tools"
      ],
      "category": "file-management"
    },
    "EyevinnOSC--mcp-server": {
      "owner": "EyevinnOSC",
      "name": "mcp-server",
      "url": "https://github.com/EyevinnOSC/mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/EyevinnOSC.webp",
      "description": "Enables integration with Eyevinn Open Source Cloud API for tasks like file uploads to a MinIO storage bucket. Supports architecting and building solutions with the remote MCP endpoint.",
      "stars": 7,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-29T07:29:43Z",
      "readme_content": "# Eyevinn Open Source Cloud MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@osaas/mcp-server)](https://smithery.ai/server/@osaas/mcp-server)\n\nThis MCP server provides MCP tools for [Eyevinn Open Source Cloud](www.osaas.io) that requires local computer access, for example to upload a file to a storage bucket in OSC. MCP tools for architecting and building solutions with OSC is provided by the remote MCP endpoint that can be accessed using the [OSC remote MCP client](https://www.npmjs.com/package/@osaas/client-mcp).\n\n<a href=\"https://glama.ai/mcp/servers/ku9s6ow21e\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/ku9s6ow21e/badge\" alt=\"Eyevinn Open Source Cloud Server MCP server\" /></a>\n\n### Features provided by the local MCP server\n\n- Create a MinIO storage bucket in OSC.\n- Upload a file to a MinIO storage bucket in OSC.\n- List files on a MinIo storage bucket in OSC.\n\n## Setup\n\n### Installing via Smithery\n\nTo install Eyevinn Open Source Cloud MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@osaas/mcp-server):\n\n```bash\nnpx -y @smithery/cli install @osaas/mcp-server --client claude\n```\n\n### Personal Access Token\n\n- If you have not already done so, sign up for an [Eyevinn OSC account](https://app.osaas.io).\n- In the Eyevinn OSC web console go to [API settings](https://app.osaas.io/dashboard/settings/api) (in Settings > API settings)\n- Copy the Personal Access Token\n\n### Usage with Claude Desktop\n\nTo use this with Claude Desktop, add the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"local-mcp-osc\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@osaas/mcp-server\"],\n      \"env\": {\n        \"OSC_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"remote-mcp-osc\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@osaas/client-mcp\"],\n      \"env\": {\n        \"OSC_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n## Development\n\n```\nnpx @modelcontextprotocol/inspector \\\n  -e OSC_ACCESS_TOKEN=<osc-access-token> \\\n  npx tsx src/index.ts\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "eyevinnosc",
        "eyevinn",
        "cloud",
        "eyevinnosc mcp",
        "mcp server",
        "remote mcp"
      ],
      "category": "file-management"
    },
    "FutureUnreal--mcp-pdf2md": {
      "owner": "FutureUnreal",
      "name": "mcp-pdf2md",
      "url": "https://github.com/FutureUnreal/mcp-pdf2md",
      "imageUrl": "/freedevtools/mcp/pfp/FutureUnreal.webp",
      "description": "Converts PDF files to structured Markdown format while preserving the original layout. Supports batch processing of local files and URLs for efficient handling of multiple documents.",
      "stars": 17,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-09T05:32:40Z",
      "readme_content": "# MCP-PDF2MD\n\n[![smithery badge](https://smithery.ai/badge/@FutureUnreal/mcp-pdf2md)](https://smithery.ai/server/@FutureUnreal/mcp-pdf2md)\n[English](#pdf2md-service) | [中文](README_CN.md)\n\n# MCP-PDF2MD Service\n\nAn MCP-based high-performance PDF to Markdown conversion service powered by MinerU API, supporting batch processing for local files and URL links with structured output.\n\n## Key Features\n\n- Format Conversion: Convert PDF files to structured Markdown format.\n- Multi-source Support: Process both local PDF files and URL links.\n- Intelligent Processing: Automatically select the best processing method.\n- Batch Processing: Support multi-file batch conversion for efficient handling of large volumes of PDF files.\n- MCP Integration: Seamless integration with LLM clients like Claude Desktop.\n- Structure Preservation: Maintain the original document structure, including headings, paragraphs, lists, etc.\n- Smart Layout: Output text in human-readable order, suitable for single-column, multi-column, and complex layouts.\n- Formula Conversion: Automatically recognize and convert formulas in the document to LaTeX format.\n- Table Extraction: Automatically recognize and convert tables in the document to structured format.\n- Cleanup Optimization: Remove headers, footers, footnotes, page numbers, etc., to ensure semantic coherence.\n- High-Quality Extraction: High-quality extraction of text, images, and layout information from PDF documents.\n\n## System Requirements\n\n- Software: Python 3.10+\n\n## Quick Start\n\n1. Clone the repository and enter the directory:\n   ```bash\n   git clone https://github.com/FutureUnreal/mcp-pdf2md.git\n   cd mcp-pdf2md\n   ```\n\n2. Create a virtual environment and install dependencies:\n   \n   **Linux/macOS**:\n   ```bash\n   uv venv\n   source .venv/bin/activate\n   uv pip install -e .\n   ```\n   \n   **Windows**:\n   ```bash\n   uv venv\n   .venv\\Scripts\\activate\n   uv pip install -e .\n   ```\n\n3. Configure environment variables:\n\n   Create a `.env` file in the project root directory and set the following environment variables:\n   ```\n   MINERU_API_BASE=https://mineru.net/api/v4/extract/task\n   MINERU_BATCH_API=https://mineru.net/api/v4/extract/task/batch\n   MINERU_BATCH_RESULTS_API=https://mineru.net/api/v4/extract-results/batch\n   MINERU_API_KEY=your_api_key_here\n   ```\n\n4. Start the service:\n   ```bash\n   uv run pdf2md\n   ```\n\n## Command Line Arguments\n\nThe server supports the following command line arguments:\n\n## Claude Desktop Configuration\n\nAdd the following configuration in Claude Desktop:\n\n**Windows**:\n```json\n{\n    \"mcpServers\": {\n        \"pdf2md\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"C:\\\\path\\\\to\\\\mcp-pdf2md\",\n                \"run\",\n                \"pdf2md\",\n                \"--output-dir\",\n                \"C:\\\\path\\\\to\\\\output\"\n            ],\n            \"env\": {\n                \"MINERU_API_KEY\": \"your_api_key_here\"\n            }\n        }\n    }\n}\n```\n\n**Linux/macOS**:\n```json\n{\n    \"mcpServers\": {\n        \"pdf2md\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/mcp-pdf2md\",\n                \"run\",\n                \"pdf2md\",\n                \"--output-dir\",\n                \"/path/to/output\"\n            ],\n            \"env\": {\n                \"MINERU_API_KEY\": \"your_api_key_here\"\n            }\n        }\n    }\n}\n```\n\n**Note about API Key Configuration:**\nYou can set the API key in two ways:\n1. In the `.env` file within the project directory (recommended for development)\n2. In the Claude Desktop configuration as shown above (recommended for regular use)\n\nIf you set the API key in both places, the one in the Claude Desktop configuration will take precedence.\n\n## MCP Tools\n\nThe server provides the following MCP tools:\n\n- **convert_pdf_url**: Convert PDF URL to Markdown\n- **convert_pdf_file**: Convert local PDF file to Markdown\n\n## Getting MinerU API Key\n\nThis project relies on the MinerU API for PDF content extraction. To obtain an API key:\n\n1. Visit [MinerU official website](https://mineru.net/) and register for an account\n2. After logging in, apply for API testing qualification at [this link](https://mineru.net/apiManage/docs?openApplyModal=true)\n3. Once your application is approved, you can access the [API Management](https://mineru.net/apiManage/token) page\n4. Generate your API key following the instructions provided\n5. Copy the generated API key\n6. Use this string as the value for `MINERU_API_KEY`\n\nNote that access to the MinerU API is currently in testing phase and requires approval from the MinerU team. The approval process may take some time, so plan accordingly.\n\n## Demo\n\n### Input PDF\n\n\n### Output Markdown\n\n\n## License\n\nMIT License - see the LICENSE file for details.\n\n## Credits\n\nThis project is based on the API from [MinerU](https://github.com/opendatalab/MinerU/tree/master).",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pdf2md",
        "pdf",
        "markdown",
        "pdf files",
        "mcp pdf2md",
        "pdf2md converts"
      ],
      "category": "file-management"
    },
    "Gertje823--Vinted-Scraper": {
      "owner": "Gertje823",
      "name": "Vinted-Scraper",
      "url": "https://github.com/Gertje823/Vinted-Scraper",
      "imageUrl": "/freedevtools/mcp/pfp/Gertje823.webp",
      "description": "Scrapes data and downloads images from Vinted and Depop, storing the information in a SQLite database. Provides a command-line interface for easy data collection from user accounts on these platforms.",
      "stars": 111,
      "forks": 26,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-10-02T19:58:16Z",
      "readme_content": "# Vinted-Scraper\nThis is a tool to download images and scrape data from Vinted & Depop and store it in a SQLite database.\n\n-- *Currently working on [version 2.0](https://github.com/Gertje823/Vinted-Scraper/tree/v2)* (WIP) -- \n\n## How to use\n1. Download/clone this repo\n2. Download the dependencies using `pip install -r requirements.txt`\n3. run the script `python scraper.py`\n   \n### Vinted\nPut the user IDs of the accounts in the users.txt and run the script.\nThe script will download all the images and put it in the downloads folder.\nThe data will be stored in the SQLite database.\n\n### Depop\nPut the usernames of the accounts in the users.txt and run the script with `-d`.\nThe script will download all the images and videos and put it in the downloads folder.\nThe data will be stored in the SQLite database.\n\n## Arguments\n`-p` [Vinted] Scrape all images from your private messages. (requires `-s` to login and `-u` to set your userid)  \n`-s \"your_vinted_fr_session\"` [Vinted] to login to your account. [how to get sessionid?](https://github.com/Gertje823/Vinted-Scraper/wiki/How-to-get-Vinted-sessionID%3F)   \n`-u` [Vinted] Set your userid  \n`-i` [Vinted] Define the maximum number of images to download. Minimum 1 image. (example: `-i 1` will download only the first image of the product)  \n`-n` [Depop] Disable file download (Only scrape product info)  \n`-g` [Depop] Also download sold items  \n`-b` [Depop] Start from a specific item. (example: `python3 scraper.py -d -n -b \"coose-navy-lee-sweatshirt-amazing-lee\"`)\n\n\n\n### Example:  \nDownload all images from private messages from your Vinted account  \n`python scraper.py -p -u 123456789 -s \"RS9KcmE1THMxV3NlclRsbEVRdU52ZVp4UG.......ASFe26\"`\n\n## Data that will be scraped\nAll the images of the products of the users will be downloaded. The avatar of the user will also be downloaded.\n\nAll the info will be stored in the sqlite db in the following tables:\n\n### Vinted Users\n `Username`  \n `User_id`     \n `Gender`  \n `Given_item_count`  \n `Taken_item_count`  \n `Followers_count`  \n `Following_count`  \n `Positive_feedback_count`  \n `Negative_feedback_count`  \n `Feedback_reputation`  \n `Avatar`  \n `Created_at`  \n `Last_loged_on_ts`  \n `City_id`  \n `City`  \n `Country_title`  \n `Verification_email`   \n `Verification_facebook`  \n `Verification_google`  \n `Verification_phone`   \n\n### Vinted Products\n `ID`  \n `User_id`    \n `Url`\n `Favourite`\n `Gender`  \n `Category`           \n `Size`         \n `State`  \n `Brand`  \n `Colors`  \n `Price`  \n `Images`  \n `Description`  \n `Title`  \n `Platform`  \n \n ### Depop Users\n `Username`  \n `User_id`     \n `Bio`  \n `first_name`  \n `followers`  \n `following`  \n `initials`  \n `items_sold`  \n `last_name`  \n `last_seen`  \n `Avatar`  \n `reviews_rating`  \n `reviews_total`  \n `verified`  \n `website`  \n ### Depop Products\n `ID`  \n `Sold`    \n `User_id`    \n `Gender`  \n `Category`           \n `Size`         \n `State`  \n `Brand`  \n `Colors`  \n `Price`  \n `Image`  \n `Description`  \n `Title`  \n `Platform`  \n `Address`  \n `discountedPriceAmount`  \n `dateUpdated`  \n \n If you have any feature requests don't hesitate to open an issue :)\n\n## Disclaimer\n*This script is designed for educational purposes only. It is intended to demonstrate web scraping techniques and should not be used for any commercial or personal gain. Please note that using this software may violate the terms of service of Vinted and Depop websites, and you assume all responsibility for any consequences that may arise from its use. The creator of this script will not be held responsible for any damages, injuries, or losses that occur while using the software. Use at your own risk.*\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "scraper",
        "sqlite",
        "file",
        "data downloads",
        "vinted scraper",
        "file management"
      ],
      "category": "file-management"
    },
    "GobinFan--python-mcp-server-client": {
      "owner": "GobinFan",
      "name": "python-mcp-server-client",
      "url": "https://github.com/GobinFan/python-mcp-server-client",
      "imageUrl": "/freedevtools/mcp/pfp/GobinFan.webp",
      "description": "Connects AI models to external data sources and APIs via a standardized interface, providing a unified protocol for function calls and tool management to enhance AI application capabilities.",
      "stars": 139,
      "forks": 30,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-29T14:33:17Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/gobinfan-python-mcp-server-client-badge.png)](https://mseep.ai/app/gobinfan-python-mcp-server-client)\n\n# Python 从0到1构建MCP Server & Client\n\n中文 | [English](README_EN.md)\n\n## 简介\n\nMCP Server 是实现模型上下文协议（MCP）的服务器，旨在为 AI 模型提供一个标准化接口，连接外部数据源和工具，例如文件系统、数据库或 API。\n\n![image](https://github.com/user-attachments/assets/7d91b2db-14dd-47c1-93ec-91dbcd3d6797)\n\n\n### MCP 的优势\n\n在 MCP 出现前，AI 调用工具基本通过 Function Call 完成，存在以下问题：\n\n1. 不同的大模型厂商 Function Call 格式不一致\n2. 大量 API 工具的输入和输出格式不一致，封装管理繁琐\n\n![image](https://github.com/user-attachments/assets/01b931a3-7406-426f-8d1e-31f50d21c9e4)\n\n\nMCP 相当于一个统一的 USB-C，不仅统一了不同大模型厂商的 Function Call 格式，也对相关工具的封装进行了统一。\n\n## MCP 传输协议\n\n目前 MCP 支持两种主要的传输协议：\n\n1. **Stdio 传输协议**\n   - 针对本地使用\n   - 需要在用户本地安装命令行工具\n   - 对运行环境有特定要求\n\n2. **SSE（Server-Sent Events）传输协议**\n   - 针对云服务部署\n   - 基于 HTTP 长连接实现\n\n## 项目结构\n\n### MCP Server\n- Stdio 传输协议（本地）\n- SSE 传输协议（远程）\n\n### MCP Client（客户端）\n- 自建客户端（Python）\n- Cursor\n- Cline\n\n## 环境配置\n\n### 1. 安装 UV 包\n\n**MacOS/Linux:**\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n**Windows:**\n```powershell\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n### 2. 初始化项目\n\n```bash\n# 创建项目目录\nuv init mcp-server\ncd mcp-server\n\n# 创建并激活虚拟环境\nuv venv\nsource .venv/bin/activate  # Windows: .venv\\Scripts\\activate\n\n# 安装依赖\nuv add \"mcp[cli]\" httpx\n\n# 创建服务器实现文件\ntouch main.py\n```\n\n## 构建工具函数\n![image](https://github.com/user-attachments/assets/b49e6ac8-9c5d-432d-8a52-48eaa159aaea)\n\n\n为了让大模型能访问市面上主流框架的技术文档，我们主要通过用户输入的 query，结合指定 site 特定域名的谷歌搜索进行搜索相关网页，并对相关网页进行解析提取网页文本并返回。\n\n### 1. 构建相关文档映射字典\n\n```python\ndocs_urls = {\n    \"langchain\": \"python.langchain.com/docs\",\n    \"llama-index\": \"docs.llamaindex.ai/en/stable\",\n    \"autogen\": \"microsoft.github.io/autogen/stable\",\n    \"agno\": \"docs.agno.com\",\n    \"openai-agents-sdk\": \"openai.github.io/openai-agents-python\",\n    \"mcp-doc\": \"modelcontextprotocol.io\",\n    \"camel-ai\": \"docs.camel-ai.org\",\n    \"crew-ai\": \"docs.crewai.com\"\n}\n```\n\n### 2. 构建 MCP 工具\n\n```python\nimport json\nimport os\nimport httpx\nfrom bs4 import BeautifulSoup\nfrom mcp import tool\n\nasync def search_web(query: str) -> dict | None:\n    payload = json.dumps({\"q\": query, \"num\": 3})\n\n    headers = {\n        \"X-API-KEY\": os.getenv(\"SERPER_API_KEY\"),\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.post(\n                SERPER_URL, headers=headers, data=payload, timeout=30.0\n            )\n            response.raise_for_status()\n            return response.json()\n        except httpx.TimeoutException:\n            return {\"organic\": []}\n\nasync def fetch_url(url: str):\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(url, timeout=30.0)\n            soup = BeautifulSoup(response.text, \"html.parser\")\n            text = soup.get_text()\n            return text\n        except httpx.TimeoutException:\n            return \"Timeout error\"\n\n@tool()\nasync def get_docs(query: str, library: str):\n    \"\"\"\n    搜索给定查询和库的最新文档。\n    支持 langchain、llama-index、autogen、agno、openai-agents-sdk、mcp-doc、camel-ai 和 crew-ai。\n\n    参数:\n    query: 要搜索的查询 (例如 \"React Agent\")\n    library: 要搜索的库 (例如 \"agno\")\n\n    返回:\n    文档中的文本\n    \"\"\"\n    if library not in docs_urls:\n        raise ValueError(f\"Library {library} not supported by this tool\")\n\n    query = f\"site:{docs_urls[library]} {query}\"\n    results = await search_web(query)\n    if len(results[\"organic\"]) == 0:\n        return \"No results found\"\n\n    text = \"\"\n    for result in results[\"organic\"]:\n        text += await fetch_url(result[\"link\"])\n\n    return text\n```\n\n## 封装 MCP Server (基于 Stdio 协议)\n\n### 1. MCP Server (Stdio)\n\n```python\n# main.py\nfrom mcp.server.fastmcp import FastMCP\nfrom dotenv import load_dotenv\nimport httpx\nimport json\nimport os\nfrom bs4 import BeautifulSoup\nfrom typing import Any\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\nfrom starlette.applications import Starlette\nfrom mcp.server.sse import SseServerTransport\nfrom starlette.requests import Request\nfrom starlette.routing import Mount, Route\nfrom mcp.server import Server\nimport uvicorn\n\nload_dotenv()\n\nmcp = FastMCP(\"Agentdocs\")\n\nUSER_AGENT = \"Agentdocs-app/1.0\"\nSERPER_URL = \"https://google.serper.dev/search\"\n\ndocs_urls = {\n    \"langchain\": \"python.langchain.com/docs\",\n    \"llama-index\": \"docs.llamaindex.ai/en/stable\",\n    \"autogen\": \"microsoft.github.io/autogen/stable\",\n    \"agno\": \"docs.agno.com\",\n    \"openai-agents-sdk\": \"openai.github.io/openai-agents-python\",\n    \"mcp-doc\": \"modelcontextprotocol.io\",\n    \"camel-ai\": \"docs.camel-ai.org\",\n    \"crew-ai\": \"docs.crewai.com\"\n}\n\nasync def search_web(query: str) -> dict | None:\n    payload = json.dumps({\"q\": query, \"num\": 2})\n\n    headers = {\n        \"X-API-KEY\": os.getenv(\"SERPER_API_KEY\"),\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.post(\n                SERPER_URL, headers=headers, data=payload, timeout=30.0\n            )\n            response.raise_for_status()\n            return response.json()\n        except httpx.TimeoutException:\n            return {\"organic\": []}\n\nasync def fetch_url(url: str):\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(url, timeout=30.0)\n            soup = BeautifulSoup(response.text, \"html.parser\")\n            text = soup.get_text()\n            return text\n        except httpx.TimeoutException:\n            return \"Timeout error\"\n\n@mcp.tool()\nasync def get_docs(query: str, library: str):\n    \"\"\"\n    搜索给定查询和库的最新文档。\n    支持 langchain、llama-index、autogen、agno、openai-agents-sdk、mcp-doc、camel-ai 和 crew-ai。\n\n    参数:\n    query: 要搜索的查询 (例如 \"React Agent\")\n    library: 要搜索的库 (例如 \"agno\")\n\n    返回:\n    文档中的文本\n    \"\"\"\n    if library not in docs_urls:\n        raise ValueError(f\"Library {library} not supported by this tool\")\n\n    query = f\"site:{docs_urls[library]} {query}\"\n    results = await search_web(query)\n    if len(results[\"organic\"]) == 0:\n        return \"No results found\"\n\n    text = \"\"\n    for result in results[\"organic\"]:\n        text += await fetch_url(result[\"link\"])\n\n    return text\n\nif __name__ == \"__main__\":\n    mcp.run(transport=\"stdio\")\n```\n\n启动命令：\n```bash\nuv run main.py\n```\n\n### 2. 客户端配置\n\n#### 2.1 基于 Cline\n\n首先在 Visual Studio Code 安装 Cline 插件，然后进行配置 MCP\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<你的项目路径>\",\n        \"run\",\n        \"main.py\"\n      ]\n    }\n  }\n}\n```\n\n成功绑定如图（左侧绿灯）：\n![image](https://github.com/user-attachments/assets/6b166508-5eea-48b9-b31b-40330ee0b3ca)\n\n\n\n#### 2.2 基于 Cursor\n\n项目根目录创建 .cursor 文件夹，并创建 mcp.json 文件，如：\n![image](https://github.com/user-attachments/assets/fe47e9a9-fd05-4c60-85e1-dc0807af3eee)\n\n\n然后粘贴以下内容到 mcp.json\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"<你的项目路径>\",\n        \"run\",\n        \"main.py\"\n      ]\n    }\n  }\n}\n```\n\n成功配置如图：\n![image](https://github.com/user-attachments/assets/c42b4564-bb92-4550-9bb0-d510e7645834)\n\n\n在 Features 开启 MCP 服务\n![image](https://github.com/user-attachments/assets/386282c2-7ff5-4797-a478-b4cca65984ba)\n\n\n通过对话它便通过 MCP 获取相关文档信息进行回答：\n![image](https://github.com/user-attachments/assets/283c4702-cd40-4150-8efa-e23d515b13af)\n\n\n## 构建 SSE MCP Server (基于 SSE 协议)\n\n### 1. 封装 MCP Server\n\n```python\nfrom mcp.server.fastmcp import FastMCP\nfrom dotenv import load_dotenv\nimport httpx\nimport json\nimport os\nfrom bs4 import BeautifulSoup\nfrom typing import Any\nimport httpx\nfrom mcp.server.fastmcp import FastMCP\nfrom starlette.applications import Starlette\nfrom mcp.server.sse import SseServerTransport\nfrom starlette.requests import Request\nfrom starlette.routing import Mount, Route\nfrom mcp.server import Server\nimport uvicorn\n\nload_dotenv()\n\nmcp = FastMCP(\"docs\")\n\nUSER_AGENT = \"docs-app/1.0\"\nSERPER_URL = \"https://google.serper.dev/search\"\n\ndocs_urls = {\n    \"langchain\": \"python.langchain.com/docs\",\n    \"llama-index\": \"docs.llamaindex.ai/en/stable\",\n    \"autogen\": \"microsoft.github.io/autogen/stable\",\n    \"agno\": \"docs.agno.com\",\n    \"openai-agents-sdk\": \"openai.github.io/openai-agents-python\",\n    \"mcp-doc\": \"modelcontextprotocol.io\",\n    \"camel-ai\": \"docs.camel-ai.org\",\n    \"crew-ai\": \"docs.crewai.com\"\n}\n\nasync def search_web(query: str) -> dict | None:\n    payload = json.dumps({\"q\": query, \"num\": 2})\n\n    headers = {\n        \"X-API-KEY\": os.getenv(\"SERPER_API_KEY\"),\n        \"Content-Type\": \"application/json\",\n    }\n\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.post(\n                SERPER_URL, headers=headers, data=payload, timeout=30.0\n            )\n            response.raise_for_status()\n            return response.json()\n        except httpx.TimeoutException:\n            return {\"organic\": []}\n\nasync def fetch_url(url: str):\n    async with httpx.AsyncClient() as client:\n        try:\n            response = await client.get(url, timeout=30.0)\n            soup = BeautifulSoup(response.text, \"html.parser\")\n            text = soup.get_text()\n            return text\n        except httpx.TimeoutException:\n            return \"Timeout error\"\n\n@mcp.tool()\nasync def get_docs(query: str, library: str):\n    \"\"\"\n    搜索给定查询和库的最新文档。\n    支持 langchain、llama-index、autogen、agno、openai-agents-sdk、mcp-doc、camel-ai 和 crew-ai。\n\n    参数:\n    query: 要搜索的查询 (例如 \"React Agent\")\n    library: 要搜索的库 (例如 \"agno\")\n\n    返回:\n    文档中的文本\n    \"\"\"\n    if library not in docs_urls:\n        raise ValueError(f\"Library {library} not supported by this tool\")\n\n    query = f\"site:{docs_urls[library]} {query}\"\n    results = await search_web(query)\n    if len(results[\"organic\"]) == 0:\n        return \"No results found\"\n\n    text = \"\"\n    for result in results[\"organic\"]:\n        text += await fetch_url(result[\"link\"])\n\n    return text\n\n## sse传输\ndef create_starlette_app(mcp_server: Server, *, debug: bool = False) -> Starlette:\n    \"\"\"Create a Starlette application that can serve the provided mcp server with SSE.\"\"\"\n    sse = SseServerTransport(\"/messages/\")\n\n    async def handle_sse(request: Request) -> None:\n        async with sse.connect_sse(\n                request.scope,\n                request.receive,\n                request._send,  # noqa: SLF001\n        ) as (read_stream, write_stream):\n            await mcp_server.run(\n                read_stream,\n                write_stream,\n                mcp_server.create_initialization_options(),\n            )\n\n    return Starlette(\n        debug=debug,\n        routes=[\n            Route(\"/sse\", endpoint=handle_sse),\n            Mount(\"/messages/\", app=sse.handle_post_message),\n        ],\n    )\n\nif __name__ == \"__main__\":\n    mcp_server = mcp._mcp_server\n\n    import argparse\n\n    parser = argparse.ArgumentParser(description='Run MCP SSE-based server')\n    parser.add_argument('--host', default='0.0.0.0', help='Host to bind to')\n    parser.add_argument('--port', type=int, default=8020, help='Port to listen on')\n    args = parser.parse_args()\n\n    # Bind SSE request handling to MCP server\n    starlette_app = create_starlette_app(mcp_server, debug=True)\n\n    uvicorn.run(starlette_app, host=args.host, port=args.port)\n```\n\n启动命令：\n```bash\nuv run main.py --host 0.0.0.0 --port 8020\n```\n\n以上 MCP server 代码直接在你的云服务器跑即可。\n\n### 2. 构建 MCP Client\n\n```python\nimport asyncio\nimport json\nimport os\nfrom typing import Optional\nfrom contextlib import AsyncExitStack\nimport time\nfrom mcp import ClientSession\nfrom mcp.client.sse import sse_client\n\nfrom openai import AsyncOpenAI\nfrom dotenv import load_dotenv\n\nload_dotenv()  # load environment variables from .env\n\nclass MCPClient:\n    def __init__(self):\n        # Initialize session and client objects\n        self.session: Optional[ClientSession] = None\n        self.exit_stack = AsyncExitStack()\n        self.openai = AsyncOpenAI(api_key=os.getenv(\"OPENAI_API_KEY\"), base_url=os.getenv(\"OPENAI_BASE_URL\"))\n\n    async def connect_to_sse_server(self, server_url: str):\n        \"\"\"Connect to an MCP server running with SSE transport\"\"\"\n        # Store the context managers so they stay alive\n        self._streams_context = sse_client(url=server_url)\n        streams = await self._streams_context.__aenter__()\n\n        self._session_context = ClientSession(*streams)\n        self.session: ClientSession = await self._session_context.__aenter__()\n\n        # Initialize\n        await self.session.initialize()\n\n        # List available tools to verify connection\n        print(\"Initialized SSE client...\")\n        print(\"Listing tools...\")\n        response = await self.session.list_tools()\n        tools = response.tools\n        print(\"\\nConnected to server with tools:\", [tool.name for tool in tools])\n\n    async def cleanup(self):\n        \"\"\"Properly clean up the session and streams\"\"\"\n        if self._session_context:\n            await self._session_context.__aexit__(None, None, None)\n        if self._streams_context:\n            await self._streams_context.__aexit__(None, None, None)\n\n    async def process_query(self, query: str) -> str:\n        \"\"\"Process a query using OpenAI API and available tools\"\"\"\n        messages = [\n            {\n                \"role\": \"user\",\n                \"content\": query\n            }\n        ]\n\n        response = await self.session.list_tools()\n        available_tools = [{ \n            \"type\": \"function\",\n            \"function\": {\n                \"name\": tool.name,\n                \"description\": tool.description,\n                \"parameters\": tool.inputSchema\n            }\n        } for tool in response.tools]\n\n        # Initial OpenAI API call\n        completion = await self.openai.chat.completions.create(\n            model=os.getenv(\"OPENAI_MODEL\"),\n            max_tokens=1000,\n            messages=messages,\n            tools=available_tools\n        )\n\n        # Process response and handle tool calls\n        tool_results = []\n        final_text = []\n        \n        assistant_message = completion.choices[0].message\n        \n        if assistant_message.tool_calls:\n            for tool_call in assistant_message.tool_calls:\n                tool_name = tool_call.function.name\n                tool_args = json.loads(tool_call.function.arguments)\n\n                # Execute tool call\n                result = await self.session.call_tool(tool_name, tool_args)\n                tool_results.append({\"call\": tool_name, \"result\": result})\n                final_text.append(f\"[Calling tool {tool_name} with args {tool_args}]\")\n\n                # Continue conversation with tool results\n                messages.extend([\n                    {\n                        \"role\": \"assistant\",\n                        \"content\": None,\n                        \"tool_calls\": [tool_call]\n                    },\n                    {\n                        \"role\": \"tool\",\n                        \"tool_call_id\": tool_call.id,\n                        \"content\": result.content[0].text\n                    }\n                ])\n\n                print(f\"Tool {tool_name} returned: {result.content[0].text}\")\n                print(\"messages\", messages)\n                # Get next response from OpenAI\n                completion = await self.openai.chat.completions.create(\n                    model=os.getenv(\"OPENAI_MODEL\"),\n                    max_tokens=1000,\n                    messages=messages,\n                )  \n                if isinstance(completion.choices[0].message.content, (dict, list)):\n                    final_text.append(str(completion.choices[0].message.content))\n                else:\n                    final_text.append(completion.choices[0].message.content)\n        else: \n            if isinstance(assistant_message.content, (dict, list)):\n                final_text.append(str(assistant_message.content))\n            else:\n                final_text.append(assistant_message.content)\n\n        return \"\\n\".join(final_text)\n\n    async def chat_loop(self):\n        \"\"\"Run an interactive chat loop\"\"\"\n        print(\"\\nMCP Client Started!\")\n        print(\"Type your queries or 'quit' to exit.\")\n        \n        while True:\n            try:\n                query = input(\"\\nQuery: \").strip()\n                \n                if query.lower() == 'quit':\n                    break\n                    \n                response = await self.process_query(query)\n                print(\"\\n\" + response)\n                    \n            except Exception as e:\n                print(f\"\\nError: {str(e)}\")\n\nasync def main():\n    if len(sys.argv) < 2:\n        print(\"Usage: uv run client.py <URL of SSE MCP server (i.e. http://localhost:8080/sse)>\")\n        sys.exit(1)\n\n    client = MCPClient()\n    try:\n        await client.connect_to_sse_server(server_url=sys.argv[1])\n        await client.chat_loop()\n    finally:\n        await client.cleanup()\n\nif __name__ == \"__main__\":\n    import sys\n    asyncio.run(main())\n```\n\n启动命令：\n```bash\nuv run client.py http://0.0.0.0:8020/sse\n```\n\nClient 日志：\n![image](https://github.com/user-attachments/assets/c4999d81-8a80-49a3-93c1-62571d4bed22)\n\n\nServer 日志：\n![image](https://github.com/user-attachments/assets/2f45ac47-31db-442d-ad0a-87d3b3bef8b5)\n\n\n以上便是 Python 从 0 到 1 搭建 MCP Server 以及 MCP Client 的完整教程。有不对的地方请多多指教。\n\n参考相关资料：\n- https://www.youtube.com/watch?v=Ek8JHgZtmcI\n- https://serper.dev/\n- https://modelcontextprotocol.io/quickstart/server\n- https://modelcontextprotocol.io/quickstart/client\n- https://docs.cursor.com/context/model-context-protocol\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "python",
        "apis",
        "gobinfan",
        "gobinfan python",
        "connects ai",
        "python mcp"
      ],
      "category": "file-management"
    },
    "GonTwVn--GonMCPtool": {
      "owner": "GonTwVn",
      "name": "GonMCPtool",
      "url": "https://github.com/GonTwVn/GonMCPtool",
      "imageUrl": "/freedevtools/mcp/pfp/GonTwVn.webp",
      "description": "A collection of tools for development and maintenance tasks, including file operations, task management, and code editing functionalities. Supports basic calculations and npm commands for project building and dependency management.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-29T20:34:36Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/gontwvn-gonmcptool)\n\n# MCP 伺服器工具集\n\n[![smithery badge](https://smithery.ai/badge/@GonTwVn/GonMCPtool)](https://smithery.ai/server/@GonTwVn/GonMCPtool)\n\n這是一個基於 Model Context Protocol 的伺服器工具集，提供多種功能來輔助開發和維護工作。\n\n<a href=\"https://glama.ai/mcp/servers/@GonTwVn/GonMCPtool\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@GonTwVn/GonMCPtool/badge\" alt=\"GonMCPtool MCP server\" />\n</a>\n\n## 功能概覽\n\n### 基本工具\n- **add** - 簡單的加法計算工具\n- **npmBuild** - 執行 npm build 命令構建專案\n- **npmInstall** - 執行 npm install 命令安裝依賴\n\n### 檔案操作工具\n- **codeFileRead** - 讀取程式碼檔案並顯示行號\n- **codeLineInsert** - 在程式碼檔案指定行插入內容\n- **codeLineDelete** - 刪除程式碼檔案指定範圍的行\n- **fileWrite** - 檔案寫入功能，提供建立、編輯與寫入功能\n- **fileRead** - 讀取檔案內容，支援純文本和JSON格式\n- **edit_file** - 對檔案進行精確的編輯，可以替換特定文字內容\n- **insert_to_file** - 在檔案的特定位置插入新內容\n- **delete_from_file** - 從檔案中刪除特定內容\n\n### 搜尋工具\n- **find_files** - 在允許的目錄中找尋符合檔名模式的檔案\n- **search_code** - 在允許的目錄中搜尋包含特定文字的程式碼\n\n### 本地化工具\n- **localizationGetByKey** - 根據Key查詢特定翻譯項目\n- **localizationSearch** - 搜尋包含特定文字的翻譯項目\n- **localizationAdd** - 新增一個完整的翻譯項目\n- **localizationUpdate** - 更新現有翻譯項目的內容\n- **localizationDelete** - 刪除指定Key的翻譯項目\n- **localizationExportJson** - 將特定語言的翻譯導出為JSON格式\n- **localizationFindMissing** - 查找有Key值但缺少特定語言翻譯的項目\n- **localizationFindLongValues** - 查找超過特定字數的翻譯項目\n\n### 任務管理器工具\n- **taskCreate** - 創建新的任務，可以包含多個步驟\n- **taskGetAll** - 獲取所有任務列表\n- **taskGetById** - 根據ID獲取特定任務\n- **taskUpdate** - 更新現有任務信息\n- **taskDelete** - 刪除指定ID的任務\n- **taskStepUpdate** - 更新任務的特定步驟\n- **taskStepAdd** - 為任務添加新步驟\n- **taskStepDelete** - 刪除任務的特定步驟\n- **taskSearch** - 根據條件搜索任務\n- **taskAnalyze** - 獲取任務狀態分析報告\n- **taskSetAllSteps** - 設定某個任務所有步驟的完成狀態\n- **taskGenerateReport** - 生成任務進度Markdown報告\n- **taskGuidanceRead** - 讀取AI任務指導文件\n- **taskGuidanceWrite** - 寫入AI任務指導文件\n- **taskStart** - 開始一個任務\n- **taskComplete** - 完成一個任務\n\n\n## 檔案操作工具詳細說明\n\n### fileWrite\n提供檔案寫入功能，可以創建新檔案或修改現有檔案。\n\n```javascript\nfileWrite({\n  filePath: \"path/to/file.txt\",\n  content: \"This is the content\",\n  mode: \"write\", // 可選值: write, append, json\n  createDirs: true, // 可選，是否自動創建目錄\n  prettify: true // 可選，僅對json模式有效，是否美化JSON輸出\n})\n```\n\n### fileRead\n讀取檔案內容，支援純文本和JSON格式。\n\n```javascript\nfileRead({\n  filePath: \"path/to/file.txt\",\n  mode: \"text\", // 可選值: text, json\n  encoding: \"utf8\" // 可選，指定編碼方式\n})\n```\n\n### edit_file\n對檔案進行精確的編輯，可以替換特定文字內容。\n\n```javascript\nedit_file({\n  path: \"path/to/file.txt\",\n  edits: [\n    {\n      oldText: \"要替換的文字\",\n      newText: \"替換後的文字\"\n    }\n  ],\n  dryRun: false // 可選，預覽變更而不實際修改檔案\n})\n```\n\n### insert_to_file\n在檔案的特定位置插入新內容。\n\n```javascript\ninsert_to_file({\n  path: \"path/to/file.txt\",\n  position: 10, // 行號 (從1開始)，或標記文字\n  content: \"要插入的內容\",\n  dryRun: false // 可選，預覽變更而不實際修改檔案\n})\n```\n\n### delete_from_file\n從檔案中刪除特定內容。\n\n```javascript\ndelete_from_file({\n  path: \"path/to/file.txt\",\n  selector: \"要刪除的文字\", // 或 {startLine: 5, endLine: 10} 或 {start: \"開始標記\", end: \"結束標記\"}\n  dryRun: false // 可選，預覽變更而不實際修改檔案\n})\n```\n\n## 使用範例\n\n### 建立和編輯檔案\n\n```javascript\n// 創建一個新的 TypeScript 檔案\nfileWrite({\n  filePath: \"src/utils/helper.ts\",\n  content: `export function add(a: number, b: number): number {\n  return a + b;\n}`,\n  mode: \"write\"\n});\n\n// 讀取檔案內容\nfileRead({\n  filePath: \"src/utils/helper.ts\",\n  mode: \"text\"\n});\n\n// 編輯檔案中的特定文字\nedit_file({\n  path: \"src/utils/helper.ts\",\n  edits: [\n    {\n      oldText: \"export function add\",\n      newText: \"export function sum\"\n    }\n  ]\n});\n\n// 在檔案中插入新內容\ninsert_to_file({\n  path: \"src/utils/helper.ts\",\n  position: 1, // 在第一行插入\n  content: \"// Math utility functions\\n\"\n});\n\n// 刪除檔案中的特定內容\ndelete_from_file({\n  path: \"src/utils/helper.ts\",\n  selector: \"// Math utility functions\\n\"\n});\n```\n\n### 使用 JSON 模式\n\n```javascript\n// 創建 JSON 配置檔案\nfileWrite({\n  filePath: \"config.json\",\n  content: '{\"version\": \"1.0.0\", \"debug\": false}',\n  mode: \"json\",\n  prettify: true\n});\n\n// 讀取 JSON 檔案\nfileRead({\n  filePath: \"config.json\",\n  mode: \"json\"\n});\n```\n\n## 註意事項\n\n1. `codeFileRead`、`codeLineInsert` 和 `codeLineDelete` 工具主要用於程式碼編輯，而新的檔案工具（`fileWrite`、`fileRead` 等）更為通用，可用於任何類型的文本檔案。\n\n2. 使用 `edit_file`、`insert_to_file` 和 `delete_from_file` 工具時，建議先啟用 `dryRun` 模式來預覽變更，確保操作不會造成意外的修改。\n\n3. 檔案路徑可以是相對路徑或絕對路徑。\n\n4. 進行批次操作時，建議使用 `edit_file` 工具，可以在一次調用中進行多個編輯操作。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gonmcptool",
        "commands",
        "tools",
        "gontwvn gonmcptool",
        "gonmcptool collection",
        "file management"
      ],
      "category": "file-management"
    },
    "GongRzhe--terminal-controller-mcp": {
      "owner": "GongRzhe",
      "name": "terminal-controller-mcp",
      "url": "https://github.com/GongRzhe/terminal-controller-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/GongRzhe.webp",
      "description": "Execute terminal commands securely, manage file systems, and navigate directories through a standardized interface with built-in safeguards and command history tracking.",
      "stars": 86,
      "forks": 17,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T02:40:57Z",
      "readme_content": "# Terminal Controller for MCP\n\nA Model Context Protocol (MCP) server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.\n\n![](https://badge.mcpx.dev?type=server 'MCP Server')\n[![smithery badge](https://smithery.ai/badge/@GongRzhe/terminal-controller-mcp)](https://smithery.ai/server/@GongRzhe/terminal-controller-mcp)\n\n## Features\n\n- **Command Execution**: Run terminal commands with timeout controls and comprehensive output capture\n- **Directory Management**: Navigate and list directory contents with intuitive formatting\n- **Security Measures**: Built-in safeguards against dangerous commands and operations\n- **Command History**: Track and display recent command executions\n- **Cross-Platform Support**: Works on both Windows and UNIX-based systems\n- **File Operations**: Read, write, update, insert, and delete file content with row-level precision\n\n## Installation\n\n### Installing via Smithery\n\nTo install Terminal Controller for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GongRzhe/terminal-controller-mcp):\n\n```bash\nnpx -y @smithery/cli install @GongRzhe/terminal-controller-mcp --client claude\n```\n\n### Prerequisites\n\n- Python 3.11+\n- An MCP-compatible client (such as Claude Desktop)\n- UV/UVX installed (optional, for UVX method)\n\n### Method 1: PyPI Installation (Recommended)\n\nInstall the package directly from PyPI:\n\n```bash\npip install terminal-controller\n```\n\nOr if you prefer to use UV:\n\n```bash\nuv pip install terminal-controller\n```\n\n### Method 2: From Source\n\nIf you prefer to install from source:\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/GongRzhe/terminal-controller-mcp.git\n   cd terminal-controller-mcp\n   ```\n\n2. Run the setup script:\n   ```bash\n   python setup_mcp.py\n   ```\n\n## Client Configuration\n\n### Claude Desktop\n\nThere are two ways to configure Claude Desktop to use Terminal Controller:\n\n#### Option 1: Using UVX (Recommended)\n\nAdd this to your Claude Desktop configuration file:\n\n```json\n\"terminal-controller\": {\n  \"command\": \"uvx\",\n  \"args\": [\"terminal_controller\"]\n}\n```\n\n#### Option 2: Using Python Directly\n\n```json\n\"terminal-controller\": {\n  \"command\": \"python\",\n  \"args\": [\"-m\", \"terminal_controller\"]\n}\n```\n\nThe configuration path varies by operating system:\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n### Cursor\n\nFor Cursor, use similar configuration settings as Claude Desktop.\n\n### Other MCP Clients\n\nFor other clients, refer to their documentation on how to configure external MCP servers.\n\n## Usage\n\nOnce configured, you can use natural language to interact with your terminal through your MCP client:\n\n- \"Run the command `ls -la` in the current directory\"\n- \"Navigate to my Documents folder\"\n- \"Show me the contents of my Downloads directory\"\n- \"Show me my recent command history\"\n- \"Read the content of config.json\"\n- \"Update line 5 in my script.py file with 'print(\\\"Hello World\\\")'\"\n- \"Delete lines 10-15 from the log file\"\n- \"Insert a new line at the beginning of my text file\"\n\n## API Reference\n\nTerminal Controller exposes the following MCP tools:\n\n### `execute_command`\n\nExecute a terminal command and return its results.\n\n**Parameters:**\n- `command`: The command line command to execute\n- `timeout`: Command timeout in seconds (default: 30)\n\n**Returns:**\n- Output of the command execution, including stdout, stderr, and execution status\n\n### `get_command_history`\n\nGet recent command execution history.\n\n**Parameters:**\n- `count`: Number of recent commands to return (default: 10)\n\n**Returns:**\n- Formatted command history record\n\n### `get_current_directory`\n\nGet the current working directory.\n\n**Returns:**\n- Path of current working directory\n\n### `change_directory`\n\nChange the current working directory.\n\n**Parameters:**\n- `path`: Directory path to switch to\n\n**Returns:**\n- Operation result information\n\n### `list_directory`\n\nList files and subdirectories in the specified directory.\n\n**Parameters:**\n- `path`: Directory path to list contents (default: current directory)\n\n**Returns:**\n- List of directory contents, formatted with icons for directories and files\n\n### `write_file`\n\nWrite content to a file with overwrite or append options.\n\n**Parameters:**\n- `path`: Path to the file\n- `content`: Content to write\n- `mode`: Write mode ('overwrite' or 'append', default: 'overwrite')\n\n**Returns:**\n- Operation result information including verification of successful write\n\n### `read_file`\n\nRead content from a file with optional row selection.\n\n**Parameters:**\n- `path`: Path to the file\n- `start_row`: Starting row to read from (0-based, optional)\n- `end_row`: Ending row to read to (0-based, inclusive, optional)\n\n**Returns:**\n- File content or selected lines\n\n### `insert_file_content`\n\nInsert content at specific row(s) in a file.\n\n**Parameters:**\n- `path`: Path to the file\n- `content`: Content to insert\n- `row`: Row number to insert at (0-based, optional)\n- `rows`: List of row numbers to insert at (0-based, optional)\n\n**Returns:**\n- Operation result information\n\n### `delete_file_content`\n\nDelete content at specific row(s) from a file.\n\n**Parameters:**\n- `path`: Path to the file\n- `row`: Row number to delete (0-based, optional)\n- `rows`: List of row numbers to delete (0-based, optional)\n\n**Returns:**\n- Operation result information\n\n### `update_file_content`\n\nUpdate content at specific row(s) in a file.\n\n**Parameters:**\n- `path`: Path to the file\n- `content`: New content to place at the specified row(s)\n- `row`: Row number to update (0-based, optional)\n- `rows`: List of row numbers to update (0-based, optional)\n\n**Returns:**\n- Operation result information\n\n## Security Considerations\n\nTerminal Controller implements several security measures:\n\n- Timeout controls to prevent long-running commands\n- Blacklisting of dangerous commands (rm -rf /, format, mkfs)\n- Proper error handling and isolation of command execution\n- Access only to the commands and directories specifically granted\n\n## Limitations\n\n- Only commands that complete within the timeout period will return results\n- By default, the server has access to the same file system permissions as the user running it\n- Some interactive commands may not work as expected due to the non-interactive nature of the terminal interface\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check that your Python version is 3.11 or higher\n2. Verify that your Claude Desktop configuration is correct\n3. Try running the terminal controller directly to check for errors:\n   ```bash\n   python -m terminal_controller\n   ```\n4. For UVX-related issues, try:\n   ```bash\n   uvx terminal_controller\n   ```\n5. Review your MCP client's logs for connection errors\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "terminal",
        "commands",
        "command",
        "terminal commands",
        "command history",
        "commands securely"
      ],
      "category": "file-management"
    },
    "GrandMasterK414--mcp-servers": {
      "owner": "GrandMasterK414",
      "name": "mcp-servers",
      "url": "https://github.com/GrandMasterK414/mcp-servers",
      "imageUrl": "/freedevtools/mcp/pfp/GrandMasterK414.webp",
      "description": "Provides controlled access to the file system for AI tools, enabling secure interaction with files while ensuring strict access controls. Facilitates simplified file operations within applications integrated with MCP.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-16T20:43:28Z",
      "readme_content": "# Model Context Protocol (MCP) Servers\n smithery/config-ywl5\n[![smithery badge](https://smithery.ai/badge/@GrandMasterK414/mcp-servers)](https://smithery.ai/server/@GrandMasterK414/mcp-servers)\n\nA collection of Model Context Protocol (MCP) servers configured for optimal integration with Cursor IDE.\nThis repository contains a collection of Model Context Protocol (MCP) servers configured for integration with Cursor IDE.\nmain\n\n## What are MCP Servers?\n\nMCP (Model Context Protocol) servers allow AI coding assistants in Cursor IDE to interact with external tools and services. They extend the capabilities of the AI by providing access to additional context, data, and functionality.\n\n## Available Servers\n\nThis repository includes the following MCP servers:\n\n### FileSystem Server\n\nProvides access to the local file system, allowing AI assistants to read, write, and manage files and directories.\n\nsmithery/config-ywl5\n### Installing via Smithery\n\nTo install MCP Servers for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@GrandMasterK414/mcp-servers):\n\n```bash\nnpx -y @smithery/cli install @GrandMasterK414/mcp-servers --client claude\n```\n\n### Local Development\n\n### Memory Server\nmain\n\nEnables persistent memory storage across coding sessions, allowing the AI to remember context and preferences.\n\n### Brave Search Server\n\nIntegrates with Brave Search API to enable web search capabilities for the AI assistant.\n\n### Fetch Server\n\nAllows the AI assistant to fetch data from external APIs and websites.\n\n### Task Manager Server\n\nProvides task management with contextual code awareness and progress tracking, helping developers maintain focus and context across coding sessions.\n\n## Local Development\n\nTo develop and run these servers locally:\n\n1. Clone this repository\n2. Navigate to the specific server directory\n3. Install dependencies: `npm install`\n4. Start the server: `npm start`\n\nEach server directory contains its own README with specific setup instructions.\n\n## Deployment on Smithery\n\nThese servers can be easily deployed using Smithery. See [SMITHERY_SETUP.md](SMITHERY_SETUP.md) for detailed instructions.\n\n## Integration with Cursor IDE\n\nTo use these servers with Cursor IDE:\n\n1. Open Cursor IDE\n2. Go to Settings > Extensions > MCP\n3. Add the server configuration (examples provided in each server's README)\n4. Save and restart Cursor\n\nSee [DIRECT_SETUP.md](DIRECT_SETUP.md) for quick setup instructions.\n\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check the server logs\n2. Verify your server is running and accessible\n3. Ensure your Cursor configuration is correct\n4. Restart Cursor IDE\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nsmithery/config-ywl5\nMIT\nThis project is licensed under the MIT License - see the LICENSE file for details.\nmain\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "mcp",
        "file",
        "file management",
        "file ai",
        "mcp servers"
      ],
      "category": "file-management"
    },
    "IA-Programming--mcp-images": {
      "owner": "IA-Programming",
      "name": "mcp-images",
      "url": "https://github.com/IA-Programming/mcp-images",
      "imageUrl": "/freedevtools/mcp/pfp/IA-Programming.webp",
      "description": "Fetch and process images from URLs and local file paths, handling automatic compression and MIME type retrieval. Images are returned as base64-encoded strings to facilitate integration and support parallel processing with robust error handling.",
      "stars": 13,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-24T05:36:12Z",
      "readme_content": "# MCP Server - Image\nA Model Context Protocol (MCP) server that provides tools for fetching and processing images from URLs, local file paths, and numpy arrays. The server includes a tool called fetch_images that returns images as base64-encoded strings along with their MIME types.\n\n## Support Us\n\nIf you find this project helpful and would like to support future projects, consider buying us a coffee! Your support helps us continue building innovative AI solutions.\n\n<a href=\"https://www.buymeacoffee.com/blazzmocompany\"><img src=\"https://img.buymeacoffee.com/button-api/?text=Buy me a coffee&emoji=&slug=blazzmocompany&button_colour=40DCA5&font_colour=ffffff&font_family=Cookie&outline_colour=000000&coffee_colour=FFDD00\"></a>\n\nYour contributions go a long way in fueling our passion for creating intelligent and user-friendly applications.\n\n## Table of Contents\n- [Features](#features)\n- [Prerequisites](#prerequisites)\n- [Installation](#installation)\n- [Running the Server](#running-the-server)\n  - [Direct Method](#1-direct-method)\n  - [Configure for Windsurf/Cursor](#2-configure-for-windsurfcursor)\n- [Available Tools](#available-tools)\n  - [Usage Examples](#usage-examples)\n- [Debugging](#debugging)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Features\n- Fetch images from URLs (http/https)\n- Load images from local file paths\n- Specialized handling for large local images\n- Automatic image compression for large images (>1MB)\n- Parallel processing of multiple images\n- Proper MIME type mapping for different file extensions\n- Comprehensive error handling and logging\n## Prerequisites\n- Python 3.10+\n- uv package manager (recommended)\n## Installation\n1. Clone this repository\n2. Create and activate a virtual environment using uv:\n```bash\nuv venv\n# On Windows:\n.venv\\Scripts\\activate\n# On Unix/MacOS:\nsource .venv/bin/activate\n```\n3. Install dependencies using uv:\n```bash\nuv pip install -r requirements.txt\n```\n## Running the Server\nThere are two ways to run the MCP server:\n\n### 1. Direct Method\nTo start the MCP server directly:\n\n```bash\nuv run python mcp_image.py\n```\n### 2. Configure for Windsurf/Cursor\n#### Windsurf\nTo add this MCP server to Windsurf:\n\n1. Edit the configuration file at ~/.codeium/windsurf/mcp_config.json\n2. Add the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"image\": {\n      \"command\": \"uv\",\n        \"args\": [\"--directory\", \"/path/to/mcp-image\", \"run\", \"mcp_image.py\"]\n    }\n  }\n}\n```\n#### Cursor\nTo add this MCP server to Cursor:\n\n1. Open Cursor and go to *Settings* (Navbar → Cursor Settings)\n2. Navigate to *Features* → *MCP Servers*\n3. Click on + Add New MCP Server\n4. Enter the following configuration:\n```json\n{\n  \"mcpServers\": {\n    \"image\": {\n      \"command\": \"uv\",\n      \"args\": [\"--directory\", \"/path/to/mcp-image\", \"run\", \"mcp_image.py\"]\n    }\n  }\n}\n```\n\n## Available Tools\nThe server provides the following tools:\n\n[fetch_images](mcp_image.py#L318): Fetch and process images from URLs or local file paths\nParameters:\nimage_sources: List of URLs or file paths to images\nReturns:\nList of processed images with base64 encoding and MIME types\n\n### Usage Examples\nYou can now use commands like:\n\n- \"Fetch these images: [list of URLs or file paths]\"\n- \"Load and process this local image: [file_path]\"\n\n#### Examples\n```\n# URL-only test\n[\n  \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Chocolate_%28blue_background%29.jpg/400px-Chocolate_%28blue_background%29.jpg\",\n  \"https://imgs.search.brave.com/Sz7BdlhBoOmU4wZjnUkvgestdwmzOzrfc3GsiMr27Ik/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9pbWdj/ZG4uc3RhYmxlZGlm/ZnVzaW9ud2ViLmNv/bS8yMDI0LzEwLzE4/LzJmOTY3NTViLTM0/YmQtNDczNi1iNDRh/LWJlMTVmNGM5MDBm/My5qcGc\",\n  \"https://shigacare.fukushi.shiga.jp/mumeixxx/img/main.png\"\n]\n\n# Mixed URL and local file test\n[\n  \"https://upload.wikimedia.org/wikipedia/commons/thumb/7/70/Chocolate_%28blue_background%29.jpg/400px-Chocolate_%28blue_background%29.jpg\",\n  \"C:\\\\Users\\\\username\\\\Pictures\\\\image1.jpg\",\n  \"https://imgs.search.brave.com/Sz7BdlhBoOmU4wZjnUkvgestdwmzOzrfc3GsiMr27Ik/rs:fit:860:0:0:0/g:ce/aHR0cHM6Ly9pbWdj/ZG4uc3RhYmxlZGlm/ZnVzaW9ud2ViLmNv/bS8yMDI0LzEwLzE4/LzJmOTY3NTViLTM0/YmQtNDczNi1iNDRh/LWJlMTVmNGM5MDBm/My5qcGc\",\n  \"C:\\\\Users\\\\username\\\\Pictures\\\\image2.jpg\"\n]\n```\n\n## Debugging\nIf you encounter any issues:\n\n1. Check that all dependencies are installed correctly\n2. Verify that the server is running and listening for connections\n3. For local image loading issues, ensure the file paths are correct and accessible\n4. For \"Unsupported image type\" errors, verify the content type handling\n5. Look for any error messages in the server output\n## Contributing\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "base64",
        "images",
        "mcp",
        "mcp images",
        "process images",
        "file management"
      ],
      "category": "file-management"
    },
    "InhiblabCore--mcp-image-compression": {
      "owner": "InhiblabCore",
      "name": "mcp-image-compression",
      "url": "https://github.com/InhiblabCore/mcp-image-compression",
      "imageUrl": "/freedevtools/mcp/pfp/InhiblabCore.webp",
      "description": "Optimizes images by compressing various formats for faster loading and improved user experience, while offering features like offline usage and batch processing. Supports smart compression to balance file size and visual quality based on image content.",
      "stars": 26,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-22T03:13:54Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/inhiblabcore-mcp-image-compression-badge.png)](https://mseep.ai/app/inhiblabcore-mcp-image-compression)\n\n# mcp-image-compression\n\n## Project Overview\n\nmcp-image-compression is a high-performance image compression microservice based on MCP (Modal Context Protocol) architecture. This service focuses on providing fast and high-quality image compression capabilities to help developers optimize image resources for websites and applications, improving loading speed and user experience.\n\n## Features\n\n- **Multi-format support**: Compress mainstream image formats including JPEG, PNG, WebP, AVIF\n- **Offline Usage**: No need to connect to the internet to use\n- **Smart compression**: Automatically select optimal compression parameters based on image content\n- **Batch processing**: Support parallel compression of multiple images for improved efficiency\n- **Quality control**: Customizable compression quality to balance file size and visual quality\n\n## TOOLS\n\n1. `image_compression`\n   - Image compression\n   - Inputs:\n     - `urls` (strings): URLs of images to compress\n     - `quality` (int): Quality of compression (0-100)\n     - `format` (string): Format of compressed image (e.g. \"jpeg\", \"png\", \"webp\", \"avif\")\n   - Returns: Compressed images url\n\n## Setup\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"Image compression\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@inhiblab-core/mcp-image-compression\"\n      ],\n      \"env\": {\n        \"IMAGE_COMPRESSION_DOWNLOAD_DIR\": \"<YOUR_DIR>\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## Build\n\n```bash\ndocker build -t mcp-image-compression .\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "compression",
        "mcp",
        "compressing",
        "image compression",
        "images compressing",
        "inhiblabcore mcp"
      ],
      "category": "file-management"
    },
    "JoshuaRileyDev--mac-apps-launcher": {
      "owner": "JoshuaRileyDev",
      "name": "mac-apps-launcher",
      "url": "https://github.com/JoshuaRileyDev/mac-apps-launcher",
      "imageUrl": "/freedevtools/mcp/pfp/JoshuaRileyDev.webp",
      "description": "MCP server for launching and managing applications on macOS, capable of listing applications installed in the `/Applications` folder and launching them by name or opening specific files with designated applications.",
      "stars": 16,
      "forks": 8,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-10-02T03:03:22Z",
      "readme_content": "# Mac Apps Launcher MCP Server\n\nA Model Context Protocol (MCP) server for launching and managing macOS applications.\n\n## Features\n\n- List all applications installed in the `/Applications` folder\n- Launch applications by name\n- Open files with specific applications\n\n## Installation\nAdd the following to your Claude Config JSON file\n```\n{\n  \"mcpServers\": {\n    \"simulator\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"y\",\n        \"@joshuarileydev/mac-apps-launcher-mcp-server\"\n      ]\n    }\n  }\n}\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "macos",
        "mac",
        "applications",
        "applications macos",
        "mac apps",
        "launcher mcp"
      ],
      "category": "file-management"
    },
    "Kush36Agrawal--Video_Editor_MCP": {
      "owner": "Kush36Agrawal",
      "name": "Video_Editor_MCP",
      "url": "https://github.com/Kush36Agrawal/Video_Editor_MCP",
      "imageUrl": "/freedevtools/mcp/pfp/Kush36Agrawal.webp",
      "description": "Leverage FFmpeg for video editing through natural language commands, enabling operations like trimming, merging, format conversion, and applying filters. The server provides real-time progress tracking and error handling for various video editing tasks.",
      "stars": 37,
      "forks": 12,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-18T23:10:26Z",
      "readme_content": "# Video Editor MCP Server\n\nA powerful video editing MCP server that leverages FFmpeg to perform video editing operations through natural language commands.\n\n## Components\n\n### Tools\n\nThe server implements one main tool:\n\n* `execute_ffmpeg`: Executes FFmpeg commands with progress tracking\n  * Takes a command string as input\n  * Validates and executes FFmpeg operations\n  * Reports real-time progress during processing\n  * Handles errors and provides detailed feedback\n  * Supports all FFmpeg operations including:\n    - Trimming/cutting\n    - Merging videos\n    - Converting formats\n    - Adjusting speed\n    - Adding audio tracks\n    - Extracting audio\n    - Adding subtitles\n    - Basic filters (brightness, contrast, etc.)\n\n## Configuration\n\n### Prerequisites\n\n1. FFmpeg must be installed and accessible in your system PATH\n2. Python 3.9 or higher\n3. Required Python packages:\n   ```\n   mcp\n   httpx\n   ```\n\n### Installation\n\n1. Install FFmpeg if not already installed:\n   ```bash\n   # On macOS with Homebrew\n   brew install ffmpeg\n\n   # On Windows with Chocolatey\n   choco install ffmpeg\n\n   # On Ubuntu/Debian\n   sudo apt install ffmpeg\n   ```\n\n2. Install the video editor package:\n   ```bash\n   uv add video-editor\n   ```\n\n### Claude Desktop Integration\n\nConfigure in your Claude Desktop config file:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"video-editor\": {\n      \"command\": \"uv\",\n      \"args\": [\"run\", \"video-editor\"]\n    }\n  }\n}\n```\n\n## Development\n\n### Building and Publishing\n\n1. Sync dependencies:\n   ```bash\n   uv sync\n   ```\n\n2. Build package:\n   ```bash\n   uv build\n   ```\n\n3. Publish to PyPI:\n   ```bash\n   uv publish\n   ```\n\nNote: Set PyPI credentials via:\n* Token: `--token` or `UV_PUBLISH_TOKEN`\n* Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nFor the best debugging experience, use the MCP Inspector:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /path/to/video_editor run video-editor\n```\n\n### Example Usage\n\nOnce connected to Claude Desktop, you can make natural language requests like:\n\n1. \"Trim video.mp4 from 1:30 to 2:45\"\n2. \"Convert input.mp4 to WebM format\"\n3. \"Speed up video.mp4 by 2x\"\n4. \"Merge video1.mp4 and video2.mp4\"\n5. \"Extract audio from video.mp4\"\n6. \"Add subtitles.srt to video.mp4\"\n\nThe server will:\n1. Parse your request\n2. Generate the appropriate FFmpeg command\n3. Execute it with progress tracking\n4. Provide feedback on completion\n\n## Error Handling\n\nThe server includes robust error handling for:\n- Invalid input files\n- Malformed FFmpeg commands\n- Runtime execution errors\n- Progress tracking issues\n\nAll errors are reported back to the client with detailed messages for debugging.\n\n## Security Considerations\n\n- Only processes files in explicitly allowed directories\n- Validates FFmpeg commands before execution\n- Sanitizes all input parameters\n- Reports detailed error messages for security-related issues\n\n## Contributing\n\nContributions are welcome! Please follow these steps:\n1. Fork the repository\n2. Create your feature branch\n3. Make your changes\n4. Submit a pull request\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ffmpeg",
        "video_editor_mcp",
        "kush36agrawal",
        "kush36agrawal video_editor_mcp",
        "video_editor_mcp leverage",
        "ffmpeg video"
      ],
      "category": "file-management"
    },
    "LaubPlusCo--mcp-webdav-server": {
      "owner": "LaubPlusCo",
      "name": "mcp-webdav-server",
      "url": "https://github.com/LaubPlusCo/mcp-webdav-server",
      "imageUrl": "/freedevtools/mcp/pfp/LaubPlusCo.webp",
      "description": "Enable natural language interaction with WebDAV file systems to perform CRUD operations on files and directories through a secure and configurable MCP server. Supports connections with optional authentication and efficient management of file operations via multiple transport methods.",
      "stars": 9,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-22T11:13:16Z",
      "readme_content": "# WebDAV MCP Server\n\nA Model Context Protocol (MCP) server that enables CRUD operations on a WebDAV endpoint with basic authentication. This server enables Claude Desktop and other MCP clients to interact with WebDAV file systems through natural language commands.\n\n## Features\n\n- Connect to any WebDAV server with optional authentication\n- Perform CRUD operations on files and directories\n- Expose file operations as MCP resources and tools\n- Run via stdio transport (for Claude Desktop integration) or HTTP/SSE transport\n- Secure access with optional basic authentication\n- Support for bcrypt-encrypted passwords for MCP server authentication (WebDAV passwords must be plain text due to protocol limitations)\n- Connection pooling for better performance with WebDAV servers\n- Configuration validation using Zod\n- Structured logging for better troubleshooting\n\n## Prerequisites\n\n- Node.js 18 or later\n- npm or yarn\n- WebDAV server (for actual file operations)\n\n## Installation\n\n### Option 1: Install from npm package\n\n```bash\n# Global installation\nnpm install -g webdav-mcp-server\n\n# Or with npx\nnpx webdav-mcp-server\n```\n\n### Option 2: Clone and build from source\n\n```bash\n# Clone repository\ngit clone https://github.com/yourusername/webdav-mcp-server.git\ncd webdav-mcp-server\n\n# Install dependencies\nnpm install\n\n# Build the application\nnpm run build\n```\n\n### Option 3: Docker\n\n```bash\n# Build the Docker image\ndocker build -t webdav-mcp-server .\n\n# Run the container without authentication\ndocker run -p 3000:3000 \\\n  -e WEBDAV_ROOT_URL=http://your-webdav-server \\\n  -e WEBDAV_ROOT_PATH=/webdav \\\n  webdav-mcp-server\n  \n# Run the container with authentication for both WebDAV and MCP server\ndocker run -p 3000:3000 \\\n  -e WEBDAV_ROOT_URL=http://your-webdav-server \\\n  -e WEBDAV_ROOT_PATH=/webdav \\\n  -e WEBDAV_AUTH_ENABLED=true \\\n  -e WEBDAV_USERNAME=admin \\\n  -e WEBDAV_PASSWORD=password \\\n  -e AUTH_ENABLED=true \\\n  -e AUTH_USERNAME=user \\\n  -e AUTH_PASSWORD=pass \\\n  webdav-mcp-server\n```\n\n## Configuration\n\nCreate a `.env` file in the root directory with the following variables:\n\n```env\n# WebDAV configuration\nWEBDAV_ROOT_URL=http://localhost:4080\nWEBDAV_ROOT_PATH=/webdav\n\n# WebDAV authentication (optional)\nWEBDAV_AUTH_ENABLED=true\nWEBDAV_USERNAME=admin\n\n# WebDAV password must be plain text (required when auth enabled)\n# The WebDAV protocol requires sending the actual password to the server\nWEBDAV_PASSWORD=password\n\n# Server configuration (for HTTP mode)\nSERVER_PORT=3000\n\n# Authentication configuration for MCP server (optional)\nAUTH_ENABLED=true\nAUTH_USERNAME=user\nAUTH_PASSWORD=pass\nAUTH_REALM=MCP WebDAV Server\n\n# Auth password for MCP server can be a bcrypt hash (unlike WebDAV passwords)\n# AUTH_PASSWORD={bcrypt}$2y$10$CyLKnUwn9fqqKQFEbxpZFuE9mzWR/x8t6TE7.CgAN0oT8I/5jKJBy\n```\n\n### Encrypted Passwords for MCP Server Authentication\n\nFor enhanced security of the MCP server (not WebDAV connections), you can use bcrypt-encrypted passwords instead of storing them in plain text:\n\n1. Generate a bcrypt hash:\n   ```bash\n   # Using the built-in utility\n   npm run generate-hash -- yourpassword\n   \n   # Or with npx\n   npx webdav-mcp-generate-hash yourpassword\n   ```\n\n2. Add the hash to your .env file with the {bcrypt} prefix:\n   ```\n   AUTH_PASSWORD={bcrypt}$2y$10$CyLKnUwn9fqqKQFEbxpZFuE9mzWR/x8t6TE7.CgAN0oT8I/5jKJBy\n   ```\n\nThis way, your MCP server password is stored securely. Note that WebDAV passwords must always be in plain text due to protocol requirements.\n\n## Usage\n\n### Running with stdio transport\n\nThis mode is ideal for direct integration with Claude Desktop.\n\n```bash\n# If installed globally\nwebdav-mcp-server\n\n# If using npx\nnpx webdav-mcp-server\n\n# If built from source\nnode dist/index.js\n```\n\n### Running with HTTP/SSE transport\n\nThis mode enables the server to be accessed over HTTP with Server-Sent Events for real-time communication.\n\n```bash\n# If installed globally\nwebdav-mcp-server --http\n\n# If using npx\nnpx webdav-mcp-server --http\n\n# If built from source\nnode dist/index.js --http\n```\n\n## Quick Start with Docker Compose\n\nThe easiest way to get started with both the WebDAV server and the MCP server is to use Docker Compose:\n\n```bash\n# Start both WebDAV and MCP servers\ncd docker\ndocker-compose up -d\n\n# This will start:\n# - hacdias/webdav server on port 4080 (username: admin, password: admin)\n# - MCP server on port 3000 (username: user, password: pass)\n```\n\nThis setup uses [hacdias/webdav](https://github.com/hacdias/webdav), a simple and standalone WebDAV server written in Go. The configuration for the WebDAV server is stored in `webdav_config.yml`, which you can modify to adjust permissions, add users, or change other settings.\n\nThe WebDAV server stores all files in a Docker volume called `webdav_data`, which persists across container restarts.\n\n## WebDAV Server Configuration\n\nThe `webdav_config.yml` file configures the hacdias/webdav server used in the Docker Compose setup. Here's what you can customize:\n\n```yaml\n# Server address and port\naddress: 0.0.0.0\nport: 6060\n\n# Root data directory\ndirectory: /data\n\n# Enable/disable CORS\ncors:\n  enabled: true\n  # Additional CORS settings...\n\n# Default permissions (C=Create, R=Read, U=Update, D=Delete)\npermissions: CRUD\n\n# User definitions\nusers:\n  - username: admin\n    password: admin      # Plain text password\n    permissions: CRUD    # Full permissions\n  \n  - username: reader\n    password: reader\n    permissions: R       # Read-only permissions\n    \n  # You can also use bcrypt-encrypted passwords\n  - username: secure\n    password: \"{bcrypt}$2y$10$zEP6oofmXFeHaeMfBNLnP.DO8m.H.Mwhd24/TOX2MWLxAExXi4qgi\"\n```\n\nFor more advanced configuration options, refer to the [hacdias/webdav documentation](https://github.com/hacdias/webdav).\n\n## Testing\n\nTo run the tests:\n\n```bash\nnpm test\n```\n\n## Integrating with Claude Desktop\n\n1. Ensure the MCP feature is enabled in Claude Desktop\n\n<details>\n<summary>Using npx</summary>\n2. Open Claude Desktop settings and click edit config (`claude_desktop_config.json`)\n3. Add\n```json\n{\n    \"mcpServers\": {\n        \"webdav\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"-y\",\n                \"webdav-mcp-server\"\n            ],\n            \"env\": {\n                \"WEBDAV_ROOT_URL\": \"<WEBDAV_ROOT_URL>\",\n                \"WEBDAV_ROOT_PATH\": \"<WEBDAV_ROOT_PATH>\",\n                \"WEBDAV_USERNAME\": \"<WEBDAV_USERNAME>\",\n                \"WEBDAV_PASSWORD\": \"<WEBDAV_PASSWORD>\",\n                \"WEBDAV_AUTH_ENABLED\": \"true|false\"\n            }\n        }\n    }\n}\n```\n</details>\n<details>\n<summary>Using node and local build</summary>\n2. Clone this repository and run `setup.sh` on mac/linux or `setup.bat` on windows\n3. Open Claude Desktop settings and click edit config (`claude_desktop_config.json`)\n4. Add\n```json\n{\n    \"mcpServers\": {\n        \"webdav\": {\n            \"command\": \"node\",\n            \"args\": [\n                \"<path to repository>/dist/index.js\"\n            ],\n            \"env\": {\n                \"WEBDAV_ROOT_URL\": \"<WEBDAV_ROOT_URL>\",\n                \"WEBDAV_ROOT_PATH\": \"<WEBDAV_ROOT_PATH>\",\n                \"WEBDAV_USERNAME\": \"<WEBDAV_USERNAME>\",\n                \"WEBDAV_PASSWORD\": \"<WEBDAV_PASSWORD>\",\n                \"WEBDAV_AUTH_ENABLED\": \"true|false\"\n            }\n        }\n    }\n}\n```\n</details>\n\n## Available MCP Resources\n\n- `webdav://{path}/list` - List files in a directory\n- `webdav://{path}/content` - Get file content\n- `webdav://{path}/info` - Get file or directory information\n\n## Available MCP Tools\n\n- `webdav_create_remote_file` - Create a new file on a remote WebDAV server\n- `webdav_get_remote_file` - Retrieve content from a file stored on a remote WebDAV server\n- `webdav_update_remote_file` - Update an existing file on a remote WebDAV server\n- `webdav_delete_remote_item` - Delete a file or directory from a remote WebDAV server\n- `webdav_create_remote_directory` - Create a new directory on a remote WebDAV server\n- `webdav_move_remote_item` - Move or rename a file/directory on a remote WebDAV server\n- `webdav_copy_remote_item` - Copy a file/directory to a new location on a remote WebDAV server\n- `webdav_list_remote_directory` - List files and directories on a remote WebDAV server\n\n## Available MCP Prompts\n\n- `webdav_create_remote_file` - Prompt to create a new file on a remote WebDAV server\n- `webdav_get_remote_file` - Prompt to retrieve content from a remote WebDAV file\n- `webdav_update_remote_file` - Prompt to update a file on a remote WebDAV server\n- `webdav_delete_remote_item` - Prompt to delete a file/directory from a remote WebDAV server\n- `webdav_list_remote_directory` - Prompt to list directory contents on a remote WebDAV server\n- `webdav_create_remote_directory` - Prompt to create a directory on a remote WebDAV server\n- `webdav_move_remote_item` - Prompt to move/rename a file/directory on a remote WebDAV server\n- `webdav_copy_remote_item` - Prompt to copy a file/directory on a remote WebDAV server\n\n## Example Queries in Claude\n\nHere are some example queries you can use in Claude Desktop once the WebDAV MCP server is connected:\n\n- \"List files on my remote WebDAV server\"\n- \"Create a new text file called notes.txt on my remote WebDAV server with the following content: Hello World\"\n- \"Get the content of document.txt from my remote WebDAV server\"\n- \"Update config.json on my remote WebDAV server with this new configuration\"\n- \"Create a directory called projects on my remote WebDAV server\"\n- \"Copy report.docx to a backup location on my remote WebDAV server\"\n- \"Move the file old_name.txt to new_name.txt on my remote WebDAV server\"\n- \"Delete temp.txt from my remote WebDAV server\"\n\n## Programmatic Usage\n\nYou can also use this package programmatically in your own projects:\n\n```javascript\nimport { startWebDAVServer } from 'webdav-mcp-server';\n\n// For stdio transport without authentication\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: false\n  },\n  useHttp: false\n});\n\n// For stdio transport with WebDAV authentication (password must be plain text)\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: true,\n    username: 'admin',\n    password: 'password'\n  },\n  useHttp: false\n});\n\n// With bcrypt hash for MCP server password (HTTP auth only)\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: true,\n    username: 'admin',\n    password: 'password' // WebDAV password must be plain text\n  },\n  useHttp: true,\n  httpConfig: {\n    port: 3000,\n    auth: {\n      enabled: true,\n      username: 'user',\n      password: '{bcrypt}$2y$10$CyLKnUwn9fqqKQFEbxpZFuE9mzWR/x8t6TE7.CgAN0oT8I/5jKJBy'\n    }\n  }\n});\n\n// For HTTP transport with MCP authentication\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: true,\n    username: 'admin',\n    password: 'password'\n  },\n  useHttp: true,\n  httpConfig: {\n    port: 3000,\n    auth: {\n      enabled: true,\n      username: 'user',\n      password: 'pass',\n      realm: 'MCP WebDAV Server'\n    }\n  }\n});\n\n// For HTTP transport without authentication\nawait startWebDAVServer({\n  webdavConfig: {\n    rootUrl: 'http://your-webdav-server',\n    rootPath: '/webdav',\n    authEnabled: false\n  },\n  useHttp: true,\n  httpConfig: {\n    port: 3000,\n    auth: {\n      enabled: false\n    }\n  }\n});\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "webdav",
        "files",
        "file",
        "mcp webdav",
        "webdav server",
        "webdav file"
      ],
      "category": "file-management"
    },
    "Legaltime--filesystem": {
      "owner": "Legaltime",
      "name": "filesystem",
      "url": "https://github.com/Legaltime/filesystem",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Manage files and directories, enabling operations such as reading, writing, and editing files, as well as creating, listing, and deleting directories. Perform searches for files and retrieve file metadata within specified directories.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "filesystem",
        "directories",
        "file management",
        "filesystem manage",
        "legaltime filesystem"
      ],
      "category": "file-management"
    },
    "Leghis--smart-e2b": {
      "owner": "Leghis",
      "name": "smart-e2b",
      "url": "https://github.com/Leghis/smart-e2b",
      "imageUrl": "/freedevtools/mcp/pfp/Leghis.webp",
      "description": "Execute JavaScript and Python code securely in cloud environments with integrated file management, session reuse for performance optimization, and automatic handling of timeouts and errors. Seamlessly compatible with Claude AI Desktop for enhanced functionality.",
      "stars": 0,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-06T13:43:54Z",
      "readme_content": "# SMART-E2B\n[![smithery badge](https://smithery.ai/badge/@Leghis/smart-e2b)](https://smithery.ai/server/@Leghis/smart-e2b)\n\nUn serveur MCP (Model Context Protocol) qui intègre E2B pour exécuter du code dans des environnements sandbox sécurisés dans le cloud, spécialement conçu pour fonctionner avec Claude AI Desktop.\n\n## Caractéristiques\n\n- Exécution sécurisée de code JavaScript et Python dans le cloud\n- Gestion de fichiers intégrée (upload, lecture, liste)\n- Réutilisation intelligente des sessions sandbox pour optimiser les performances\n- Gestion automatique des timeouts et des erreurs\n- Compatible avec Claude AI Desktop via MCP\n\n## Prérequis\n\n- Node.js (v16 ou supérieur)\n- Clé API E2B (obtenue sur [e2b.dev](https://e2b.dev))\n- Claude AI Desktop\n\n## Installation\n\n### Installing via Smithery\n\nTo install smart-e2b for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Leghis/smart-e2b):\n\n```bash\nnpx -y @smithery/cli install @Leghis/smart-e2b --client claude\n```\n\n### Installing Manually\n```bash\n# Installation globale depuis NPM\nnpm install -g smart-e2b\n\n# OU installation directe depuis GitHub\nnpm install -g git+https://github.com/Leghis/smart-e2b.git\n```\n\n## Configuration avec Claude AI Desktop\n\n1. Ouvrez Claude AI Desktop\n2. Allez dans les paramètres > onglet Développeur > Modifier la configuration\n3. Ajoutez la configuration suivante au fichier `claude_desktop_config.json` :\n\n```json\n{\n  \"mcpServers\": {\n    \"smart-e2b\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"smart-e2b\"],\n      \"env\": {\n        \"E2B_API_KEY\": \"\"\n      }\n    }\n  }\n}\n```\n\n4. Redémarrez Claude AI Desktop\n\n## Utilisation\n\nUne fois configuré, vous pourrez accéder aux outils SMART-E2B directement depuis les conversations avec Claude AI Desktop.\n\n### Outils disponibles\n\n- **executeJavaScript** : Exécute du code JavaScript dans un sandbox cloud\n- **executePython** : Exécute du code Python dans un sandbox cloud\n- **uploadFile** : Téléverse un fichier dans le sandbox\n- **listFiles** : Liste les fichiers dans un répertoire du sandbox\n- **readFile** : Lit le contenu d'un fichier dans le sandbox\n\n### Exemples\n\nVoici quelques exemples d'utilisation avec Claude AI Desktop :\n\n#### Exécution de code JavaScript\n\n```\nJe voudrais tester ce code JavaScript :\n\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n-1) + fibonacci(n-2);\n}\n\nconsole.log(fibonacci(10));\n```\n\n#### Exécution de code Python\n\n```\nPourrais-tu exécuter ce code Python pour analyser des données ?\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n# Générer des données aléatoires\ndata = np.random.normal(0, 1, 1000)\n\n# Calculer les statistiques\nmean = np.mean(data)\nstd = np.std(data)\n\nprint(f\"Moyenne: {mean:.4f}\")\nprint(f\"Écart-type: {std:.4f}\")\n\n# Créer un histogramme\nplt.hist(data, bins=30)\nplt.title('Distribution normale')\nplt.savefig('histogram.png')\n```\n\n## Développement\n\nPour contribuer ou modifier le projet :\n\n```bash\n# Cloner le dépôt\ngit clone https://github.com/Leghis/smart-e2b.git\ncd smart-e2b\n\n# Installer les dépendances\nnpm install\n\n# Compiler\nnpm run build\n\n# Tester localement\nnpm start\n```\n\n## Licence\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "e2b",
        "cloud",
        "file",
        "smart e2b",
        "file management",
        "securely cloud"
      ],
      "category": "file-management"
    },
    "MaheshDoiphode--mcp-cline-project-content-server": {
      "owner": "MaheshDoiphode",
      "name": "mcp-cline-project-content-server",
      "url": "https://github.com/MaheshDoiphode/mcp-cline-project-content-server",
      "imageUrl": "/freedevtools/mcp/pfp/MaheshDoiphode.webp",
      "description": "Access project files and their contents from a specified directory, retrieving the latest data for projects stored in that location.",
      "stars": 6,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-03T22:33:57Z",
      "readme_content": "# Project Content Server\n\nAn MCP server that provides access to project files and their contents.\n\n<a href=\"https://glama.ai/mcp/servers/qmqbqlz2c4\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/qmqbqlz2c4/badge\" alt=\"Project Content Server MCP server\" /></a>\n\n## Installation\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   npm install\n   ```\n3. Build the project:\n   ```bash\n   npm run build\n   ```\n\n## Usage\n\nStart the server:\n```bash\nnode build/index.js\n```\n\n### API\n\n#### latest_project_data\n\nGet all files and their contents from a project directory.\n\n**Parameters:**\n- `projectPath` (string): Path to the project directory\n\n**Example Request:**\n```json\n{\n  \"name\": \"latest_project_data\",\n  \"arguments\": {\n    \"projectPath\": \"/path/to/project\"\n  }\n}\n```\n\n**Example Response:**\n```json\n{\n  \"file1.txt\": \"Contents of file1\",\n  \"subdir/file2.js\": \"Contents of file2\"\n}\n```\n\n## Configuration\n\nThe server can be configured using environment variables:\n\n- `PORT`: Port to run the server on (default: stdio)\n\n## Error Handling\n\nThe server returns errors in the following format:\n```json\n{\n  \"content\": [{\n    \"type\": \"text\",\n    \"text\": \"Error message\"\n  }],\n  \"isError\": true\n}\n```\n\nCommon errors include:\n- Invalid project path\n- Permission denied errors\n- File system errors\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "mcp",
        "directory",
        "projects stored",
        "mcp cline",
        "project files"
      ],
      "category": "file-management"
    },
    "MartinSchlott--BetterMCPFileServer": {
      "owner": "MartinSchlott",
      "name": "BetterMCPFileServer",
      "url": "https://github.com/MartinSchlott/BetterMCPFileServer",
      "imageUrl": "/freedevtools/mcp/pfp/MartinSchlott.webp",
      "description": "A privacy-preserving server that simplifies AI model interactions with filesystems through an intuitive API, ensuring sensitive paths remain concealed while providing efficient file operations. Supports streamlined directory listings and complex file searches with minimized functions.",
      "stars": 1,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-12T22:19:02Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/martinschlott-bettermcpfileserver)\n\n# BetterMCPFileServer\n\n> A reimagined Model Context Protocol (MCP) server for filesystem access with privacy-preserving path aliases and an optimized LLM-friendly API.\n\n## Why BetterMCPFileServer?\n\nThe original MCP file server was functional but not optimized for how LLMs actually interact with filesystems. This project delivers a complete redesign focused on simplicity, privacy, and efficiency.\n\n\n### Key Innovations\n\n- **Path Aliasing System** - Protects privacy by hiding full system paths\n- **LLM-Optimized Interface** - Reduced from 11 to 6 functions while maintaining full capability\n- **Smarter Search** - One unified tool for directory listings and complex file searches\n- **Privacy-First Design** - No more exposing usernames or system paths to AI models\n\n## Quick Start\n\n```bash\n# Install from source (npm package coming soon)\ngit clone https://github.com/martinschlott/BetterMCPFileServer.git\ncd BetterMCPFileServer\nnpm install\nnpm run build\n\n# Run with aliases\nBetterMCPFileServer code:~/projects docs:~/documents\n```\n\nThat's it! Now Claude can access your files through privacy-preserving aliases like `code/src/main.js` instead of `/Users/yourusername/projects/src/main.js`.\n\n## Path Aliasing System\n\nTraditional file servers expose full system paths:\n```\n/home/martin/Documents/PrivateProject/financial-data.txt\n```\n\nOur aliasing system keeps your privacy intact:\n```\nprojects/financial-data.txt\n```\n\nBenefits:\n- **Privacy Protection**: No usernames or sensitive directory names exposed\n- **Simplification**: LLMs work with clean, logical paths\n- **Security**: Strict boundaries for filesystem access\n\n## API Design Rationale\n\n### Redesigning the MCP File Server Interface\n\nThis project represents a significant redesign of the standard MCP file server interface. While the original implementation provided a functional foundation, we identified several areas for improvement to create a more intuitive, efficient, and LLM-friendly interface.\n\n### Key Improvements\n\n#### 1. Intuitive Function Naming\n\nThe original interface used snake_case naming with basic verbs like `read_file` and `write_file`. We've adopted more idiomatic camelCase naming with clearer, more specific function names:\n\n- `read_file` → `readFileContent`\n- `write_file` → `writeFile`\n- `list_directory` → `searchFilesAndFolders` (with pattern=\"*\")\n\nThese names explicitly communicate their purpose and follow standard programming conventions, making them more intuitive for both AI models and human developers.\n\n#### 2. Grouped Functionality for Reduced Complexity\n\nInstead of having separate functions for each individual file or directory operation, we've consolidated related operations:\n\n- `manageFile` with an `action` parameter replaces separate `move_file`, `copy_file`, and `delete_file` functions\n- `manageFolder` handles folder creation, renaming, and deletion in one function\n\nThis approach reduces API surface area while increasing flexibility, making it easier for LLMs to understand the complete range of available operations.\n\n#### 3. Concise, Purposeful Descriptions\n\nThe original interface included lengthy descriptions with redundant information, such as repeatedly stating \"Only works within allowed directories\" for each function. Our redesigned API features concise descriptions that:\n\n- Focus on what the function does\n- Avoid stating the obvious\n- Highlight distinctive capabilities\n- Eliminate marketing-style language that doesn't provide technical value\n\n#### 4. Path Aliasing System\n\nOne of the most significant improvements is our path aliasing system. The original approach required:\n- Specifying full allowed directories at startup\n- LLMs to use complete, absolute paths in every request\n- Exposing potentially sensitive information in directory paths (like usernames)\n\nOur new approach maps aliases to real paths:\n\n```\n~/Documents/MyProjects → projects\n~/Documents/Letters → letters\n```\n\nBenefits include:\n- LLMs work with simple, logical paths (`projects/backend` instead of `/home/username/Documents/MyProjects/backend`)\n- Privacy is enhanced by hiding actual paths containing usernames or sensitive directory structures\n- System configuration can change without impacting how LLMs interact with the server\n\n#### 5. More Efficient Combined Operations\n\nWe've added strategic combined operations to reduce round-trips and simplify common tasks:\n\n- `searchFilesAndFolders` with improved description and `includeMetadata` option completely replaces the need for a separate `readFolderContent` function\n- `editFile` retains the useful targeted text replacement functionality from the original implementation but with a clearer parameter structure\n\nA key achievement of this redesign is reducing the number of tools from 11 to 6 while maintaining full functionality. This simplification:\n- Makes the API easier to learn and remember\n- Reduces the cognitive load for LLMs when choosing appropriate tools\n- Minimizes redundancy between operations\n\n### Design Philosophy\n\nThis redesign follows several core principles:\n\n1. **AI-First Interface**: Optimized for LLM consumption and usage patterns\n2. **Minimal Cognitive Load**: Reduced number of functions with consistent naming and behavior\n3. **Information Hiding**: Abstracted implementation details that don't benefit the consumer\n4. **Progressive Disclosure**: Simple operations are simple, advanced features are available when needed\n\n## Optimized Search Functionality\n\nOur redesigned search function is both powerful and easy to use:\n\n```\nsearchFilesAndFolders({\n  pattern: \"**/*.js\",                   // Find all JavaScript files\n  includeMetadata: true,                // Include file sizes and dates (use sparingly)\n  ignore: [\"node_modules\", \"*.min.js\"]  // Skip unwanted matches\n})\n```\n\nKey patterns:\n- `\"*\"` - List top-level items (like a simple directory listing)\n- `\"projects/*.js\"` - All JavaScript files in the projects directory\n- `\"**/*.md\"` - All markdown files recursively across all directories\n\n⚠️ **Pro Tip:** Only set `includeMetadata: true` when you specifically need file sizes or dates to keep responses efficient.\n\n## API Reference\n\nThe BetterMCPFileServer exposes just 6 powerful functions that handle all filesystem operations:\n\n### 1. `writeFile`\nCreate or update a file with the given content.\n```javascript\nwriteFile({\n  filePath: \"projects/README.md\",\n  content: \"# My Project\\n\\nThis is a readme file.\"\n})\n```\n\n### 2. `readFileContent`\nRead the contents of a file.\n```javascript\nreadFileContent({\n  filePath: \"projects/README.md\"\n})\n```\n\n### 3. `editFile`\nMake targeted changes to specific portions of a file.\n```javascript\neditFile({\n  filePath: \"projects/README.md\",\n  edits: [\n    {\n      oldText: \"# My Project\",\n      newText: \"# Awesome Project\"\n    }\n  ],\n  dryRun: false\n})\n```\n\n### 4. `manageFile`\nPerform actions like move, rename, copy, or delete a file.\n```javascript\nmanageFile({\n  action: \"move\",\n  filePath: \"projects/old.js\",\n  newFilePath: \"projects/new.js\"\n})\n```\n\n### 5. `manageFolder`\nCreate, rename, or delete a folder.\n```javascript\nmanageFolder({\n  action: \"create\",\n  folderPath: \"projects/new-directory\"\n})\n```\n\n### 6. `searchFilesAndFolders`\nSearch for files and folders using glob patterns.\n```javascript\nsearchFilesAndFolders({\n  pattern: \"projects/**/*.ts\",\n  includeMetadata: false\n})\n```\n\n## Usage Examples\n\n### Working with the Virtual Root\n\n```javascript\n// List all available aliases\nsearchFilesAndFolders({ pattern: \"*\" })\n\n// Result:\n[\n  { path: \"projects\", type: \"directory\" },\n  { path: \"docs\", type: \"directory\" }\n]\n```\n\n### Basic File Operations\n\n```javascript\n// Read a file\nconst content = await readFileContent({ filePath: \"projects/README.md\" });\n\n// Write a file\nawait writeFile({\n  filePath: \"projects/notes.txt\",\n  content: \"Important meeting notes.\"\n});\n\n// Edit a file\nawait editFile({\n  filePath: \"projects/config.json\",\n  edits: [\n    {\n      oldText: '\"version\": \"1.0.0\"',\n      newText: '\"version\": \"1.0.1\"'\n    }\n  ]\n});\n```\n\n### Directory Operations\n\n```javascript\n// Create a new directory\nawait manageFolder({\n  action: \"create\",\n  folderPath: \"projects/new-feature\"\n});\n\n// List directory contents\nconst files = await searchFilesAndFolders({\n  pattern: \"projects/src/*\"\n});\n```\n\n## Installation\n\n```bash\n# From npm (coming soon)\nnpm install -g BetterMCPFileServer  # Not yet available\n\n# From source (current method)\ngit clone https://github.com/martinschlott/BetterMCPFileServer.git\ncd BetterMCPFileServer\nnpm install\nnpm run build\nnpm link  # Optional, makes command available globally\n```\n\n## Usage\n\nStart the server with at least one alias:directory pair:\n\n```bash\nBetterMCPFileServer alias:directory [alias2:directory2 ...]\n```\n\nExamples:\n\n```bash\n# Single directory\nBetterMCPFileServer code:~/projects\n\n# Multiple directories\nBetterMCPFileServer code:~/Development docs:~/Documents/Technical notes:~/Notes\n```\n\n## Advanced Configuration\n\nCreate a simple shell script for consistent configuration:\n\n```bash\n#!/bin/bash\n# start-server.sh\nBetterMCPFileServer \\\n  code:~/Development/MyProjects \\\n  docs:~/Documents/Technical \\\n  data:~/Data/Samples \\\n  config:~/Configuration\n```\n\n## Troubleshooting\n\n- **Error: Invalid alias:path format**: Ensure each parameter uses the format `alias:directory`\n- **Error: Directory doesn't exist**: The specified directory must exist\n- **Access denied error**: Attempted access outside allowed directories\n- **Unknown alias**: The referenced alias wasn't defined at server startup\n\n## Credits\n\nThis project was a collaboration between Martin Schlott (concept and design) and AI assistants:\n- Claude 3.7 Sonnet (API design consultation and documentation)\n- Cursor AI (implementation)\n\n*README crafted by Claude 3.7 Sonnet*\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystems",
        "bettermcpfileserver",
        "privacy",
        "file management",
        "bettermcpfileserver privacy",
        "martinschlott bettermcpfileserver"
      ],
      "category": "file-management"
    },
    "Momo707577045--tinypng-script-with-cache": {
      "owner": "Momo707577045",
      "name": "tinypng-script-with-cache",
      "url": "https://github.com/Momo707577045/tinypng-script-with-cache",
      "imageUrl": "/freedevtools/mcp/pfp/Momo707577045.webp",
      "description": "Compress images without dependencies, automatically skip already compressed images, and replace source files, while maintaining quality. The server utilizes multiple API keys for compression and generates compression reports while ensuring no redundant files are created during the process.",
      "stars": 23,
      "forks": 8,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-24T13:15:05Z",
      "readme_content": "# 无依赖的 tinypng node 脚本\n## 特点\n- 【无依赖，纯脚本】\n  - 下载脚本代码，直接使用 node 命令即可运行。\n  - 将使用门槛降到最低。\n- 【过滤重复压缩】\n  - 自动记录已被压缩过的图片，跳过压缩，加快进度。\n  - 记录图片压缩后的 md5 值，再次运行压缩脚本时，跳过压缩。\n  - 通过 md5 值比较文件变更，即使「文件迁移」也能自动过滤。\n  - 通过 md5 值比较文件变更，即使「使用同名文件替换」也能自动识别，并压缩，没有漏网之鱼。\n- 【替换源文件】\n  - 压缩成功，直接替换源文件，不生成冗余文件，不需要复制粘贴，移动图片。\n  - 静默压缩，对项目无感知，无任何影响。\n- 【自动切换 api key】\n  - tinypng 申请的 [api key](https://tinypng.com/developers) 每月只有 500 次免费压缩额度。\n  - 可设置多个 api key，当某 key 超过使用次数时，自动切换下一个 key 进行压缩。\n- 【压缩报告】\n  - 记录每个图片的压缩数据，并生成汇总信息。\n- 【压缩安全边界】\n  - 压缩安全线，当压缩比例低于该百分比值时，保持源文件，避免过分压缩，损伤图片质量。\n- 【源码携带详细备注，自带测试图片】\n  - 降低源码阅读门槛，降低测试门槛，减低使用门槛。\n  - 推荐阅读源码，打破恐惧，便于定制个性化需求。\n\n\n## 专为小型项目定制\n- 纯脚本，不依赖 gulp，不依赖 webpack，无需搭建脚手架环境\n- 小型项目，或者只有几个静态页面，搭建脚手架的成本过高。本脚解决的即是脚手架依赖的问题。\n- 当然，中大型项目也可以用，只是其「无依赖」的特点在里面没那么突出。中大型项目推荐使用其 [gulp 版本](https://segmentfault.com/a/1190000023895556)，实现更灵活的配置。\n\n\n## 单文件使用方式\n- 第一步，点击[下载源码](http://upyun.luckly-mjw.cn/lib/mtp.js)\n- 第二步，在脚本文件头部添加 tinypng 的 [api key](https://tinypng.com/developers)\n  ```\n  global.tinypngConf = {\n    apiKeyList: [\n      // 'XgNgkoyWbdIZd8OizINMjX2TpxAd_Gp3', // 无效 key\n      // 'IAl6s3ekmONUVMEqWZdIp1nV2ItJL1PC', // 无效 key\n      'IAl6s3ekmONUVMEqWZdIp1nV2ItJLyPC', // 有效 key\n    ]\n  }\n  ```\n  ![配置图](http://upyun.luckly-mjw.cn/Assets/tinypng/004.png)\n- 第三步，赋予脚本文件「可执行」权限，```chmod +x ./mtp.js```\n- 第四步，将脚本文件放置到项目所在目录\n  ![运行效果](http://upyun.luckly-mjw.cn/Assets/tinypng/007.jpeg)\n- 第五步，在项目所在目录运行脚本```node ./mtp.js```\n  ![运行效果](http://upyun.luckly-mjw.cn/Assets/tinypng/006.jpeg)\n- 后续使用，仅需最后两步「第四步」「第五步」\n\n\n## 全局配置使用方式\n- 第一步，全局安装```npm install -g tinypng-script-with-cache```\n- 第二步，全局配置 api key\n  ```mtp setKey XgNgkoyWbdIZd8OizINMjX2TpxAd_Gp3,IAl6s3ekmONUVMEqWZdIp1nV2ItJLyPC```\n- 第三步，在项目所在目录运行脚本```mtp```\n- 后续使用，无需配置，直接在目标目录运行```mtp```\n\n  ![运行效果](http://upyun.luckly-mjw.cn/Assets/tinypng/008.png)\n\n## 参数传递方式\n#### 默认配置\n- 默认压缩「运行命令所在文件夹」下的图片\n- 「命令传参」优先级高于「修改源文件设置」\n\n\n#### 修改源文件设置\n- 在源文件头部，写入全局参数，程序运行时自动获取\n- 全部参考配置如下\n  ```\n  global.tinypngConf = {\n     basePath: '/Users/mjw/Desktop/git/tinypng-script-with-cache/test-img', // 压缩路径\n     createMd5FormOrigin: false, // 不进行压缩操作，只生成现有图片的 md5 信息，并作为缓存。用于「初次项目接入」及手动清理冗余的「图片md5信息」\n     apiKeyList: [ // tiny png 的 api key 数组，当其中一个不可用或超过使用次数时，自动切换下一个 key 调用\n       'IAl6s3ekmONUVMEqWZdIp1nV2ItJLyPC', // 有效 key\n     ]\n   }\n  ```\n  ![配置图](http://upyun.luckly-mjw.cn/Assets/tinypng/004.png)\n\n#### 命令传参\n- 参数通过空格区分\n- 参数一：压缩路径\n- 参数二：是否不进行压缩操作，只生成现有图片的 md5 信息。除空字符串```''```外，其余值均为 true\n- 参数三：apiKeyList，以逗号区分```,```\n- 传参参考\n  ```\n  node ./mtp.js /Users/mjw/Desktop/git/tinypng-script-with-cache/test-img '' IAl6s3ekmONUVMEqWZdIp1nV2ItJLyPC\n  ```\n  ![运行效果](http://upyun.luckly-mjw.cn/Assets/tinypng/005.jpeg)\n\n#### 配置合并优先级源码\n```\nconst vfs = require('vinyl-fs');\nlet tinypng = require('./tinypng-with-cache')\n\nlet apiKeyList = [] // 接口 key 默认为空\nlet basePath = process.cwd() // 默认运行脚本所在目录\nlet createMd5FormOrigin = false // 不进行压缩操作，只生成现有图片的 md5 信息，并作为缓存。用于「初次项目接入」及手动清理冗余的「图片md5信息」\n\n// 如果有全局传值\nif (global.tinypngConf) {\n  basePath = tinypngConf.basePath || basePath\n  apiKeyList = tinypngConf.apiKeyList || apiKeyList\n  createMd5FormOrigin = tinypngConf.createMd5FormOrigin || createMd5FormOrigin\n}\n\n// 动态参数传值\nbasePath = process.argv[2] || basePath\ncreateMd5FormOrigin = process.argv[3] || createMd5FormOrigin\napiKeyList = process.argv[4] ? process.argv[4].split(',') : apiKeyList\n\nlet fileFilter = tinypngConf.fileFilter || [\n  basePath + '/**/*.png',\n  basePath + '/**/*.jpg',\n  basePath + '/**/*.jpeg',\n  `!${basePath}/**/node_modules/**`, // 忽略无需遍历的文件，路径匹配语法参考：https://www.gulpjs.com.cn/docs/getting-started/explaining-globs/\n  `!${basePath}/**/dist/**`,\n]\n\nconsole.log({\n  basePath,\n  apiKeyList,\n  fileFilter,\n  createMd5FormOrigin,\n})\n\nif (!apiKeyList.length) {\n  return console.error('tinypng-script-with-cache', 'tinypny key 列表不能为空!')\n}\n\nvfs.src(fileFilter, {\n  base: './', // 对文件使用相路径，为了后面覆盖源文件\n  nodir: true, // 忽略文件夹\n})\n.pipe(tinypng({\n  apiKeyList,\n  reportFilePath: basePath + '/tinypngReport.json', // 不设置，则不进行日志记录\n  md5RecordFilePath: basePath + '/tinypngMd5Record.json', // 不设置，则不进行缓存过滤\n  minCompressPercentLimit: 10, // 默认值为零，最小压缩百分比限制，为保证图片质量，当压缩比例低于该值时，保持源文件，避免过分压缩，损伤图片质量\n  createMd5FormOrigin, // 不进行压缩操作，只生成现有图片的 md5 信息，并作为缓存。用于「初次项目接入」及手动清理冗余的「图片md5信息」\n}))\n.pipe(vfs.dest('./', { overwrite: true })) // 覆写原文件\n```\n\n## [项目地址](https://github.com/Momo707577045/tinypng-script-with-cache)\n\n## 二次开发，生成自定义脚本\n- git clone 下载项目\n- npm install 安装依赖\n- 修改「tinypng-mjw.js」与「tinypng-with-cache.js」源文件\n- 执行```npx webpack --config webpack.config.js```命令，进行打包\n- 生成目标文件```dist/mtp.js```\n\n\n## 测试资源\n- test-img：图片压缩测试目录\n- test-img-origin：测试图片备份目录，用于恢复测试\n\n\n## 运行效果\n![运行效果](http://upyun.luckly-mjw.cn/Assets/tinypng/006.jpeg)\n\n## 压缩报告\n![压缩报告](http://upyun.luckly-mjw.cn/Assets/tinypng/002.png)\n\n## md5 记录\n![md5 记录](http://upyun.luckly-mjw.cn/Assets/tinypng/003.png)\n\n## gulp 版本请参考[这里](https://segmentfault.com/a/1190000023895556)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tinypng",
        "compression",
        "compressed",
        "tinypng script",
        "momo707577045 tinypng",
        "compress images"
      ],
      "category": "file-management"
    },
    "MrGNSS--ClaudeDesktopCommander": {
      "owner": "MrGNSS",
      "name": "ClaudeDesktopCommander",
      "url": "https://github.com/MrGNSS/ClaudeDesktopCommander",
      "imageUrl": "/freedevtools/mcp/pfp/MrGNSS.webp",
      "description": "Execute terminal commands and manage processes while offering file editing capabilities with real-time command output streaming.",
      "stars": 6,
      "forks": 2,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-10-01T14:24:25Z",
      "readme_content": "# Desktop Commander MCP\n\n\n[![npm downloads](https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander)](https://www.npmjs.com/package/@wonderwhy-er/desktop-commander)\n[![smithery badge](https://smithery.ai/badge/@wonderwhy-er/desktop-commander)](https://smithery.ai/server/@wonderwhy-er/desktop-commander)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://www.buymeacoffee.com/wonderwhyer)\n[![Discord](https://img.shields.io/badge/Discord-Join%20Server-7289DA.svg)](https://discord.gg/7cbccwRp)\n\nShort version. Two key things. Terminal commands and diff based file editing.\n\n<a href=\"https://glama.ai/mcp/servers/zempur9oh4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zempur9oh4/badge\" alt=\"Claude Desktop Commander MCP server\" />\n</a>\n\n## Table of Contents\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Handling Long-Running Commands](#handling-long-running-commands)\n- [Work in Progress and TODOs](#work-in-progress-and-todos)\n- [Media links](#media)\n- [Testimonials](#testimonials)\n- [Contributing](#contributing)\n- [License](#license)\n\nThis is server that allows Claude desktop app to execute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP) + Built on top of [MCP Filesystem Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to provide additional search and replace file editing capabilities .\n\n## Features\n\n- Execute terminal commands with output streaming\n- Command timeout and background execution support\n- Process management (list and kill processes)\n- Session management for long-running commands\n- Full filesystem operations:\n  - Read/write files\n  - Create/list directories\n  - Move files/directories\n  - Search files\n  - Get file metadata\n  - Code editing capabilities:\n  - Surgical text replacements for small changes\n  - Full file rewrites for major changes\n  - Multiple file support\n  - Pattern-based replacements\n\n## Installation\nFirst, ensure you've downloaded and installed the [Claude Desktop app](https://claude.ai/download) and you have [npm installed](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).\n\n### Option 1: Installing via Smithery\n\nTo install Desktop Commander for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@wonderwhy-er/desktop-commander):\n\n```bash\nnpx -y @smithery/cli install @wonderwhy-er/desktop-commander --client claude\n```\n\n### Option 2: Install trough npx\nJust run this in terminal\n```\nnpx @wonderwhy-er/desktop-commander setup\n```\nRestart Claude if running\n\n### Option 3: Add to claude_desktop_config by hand\nAdd this entry to your claude_desktop_config.json (on Mac, found at ~/Library/Application\\ Support/Claude/claude_desktop_config.json):\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander\"\n      ]\n    }\n  }\n}\n```\nRestart Claude if running\n\n### Option 4: Checkout locally\n1. Clone and build:\n```bash\ngit clone https://github.com/wonderwhy-er/ClaudeComputerCommander.git\ncd ClaudeComputerCommander\nnpm run setup\n```\nRestart Claude if running\n\nThe setup command will:\n- Install dependencies\n- Build the server\n- Configure Claude's desktop app\n- Add MCP servers to Claude's config if needed\n\n## Usage\n\nThe server provides these tool categories:\n\n### Terminal Tools\n- `execute_command`: Run commands with configurable timeout\n- `read_output`: Get output from long-running commands\n- `force_terminate`: Stop running command sessions\n- `list_sessions`: View active command sessions\n- `list_processes`: View system processes\n- `kill_process`: Terminate processes by PID\n- `block_command`/`unblock_command`: Manage command blacklist\n\n### Filesystem Tools\n- `read_file`/`write_file`: File operations\n- `create_directory`/`list_directory`: Directory management  \n- `move_file`: Move/rename files\n- `search_files`: Pattern-based file search\n- `get_file_info`: File metadata\n\n### Edit Tools\n- `edit_block`: Apply surgical text replacements (best for changes <20% of file size)\n- `write_file`: Complete file rewrites (best for large changes >20% or when edit_block fails)\n\nSearch/Replace Block Format:\n```\nfilepath.ext\n<<<<<<< SEARCH\nexisting code to replace\n=======\nnew code to insert\n>>>>>>> REPLACE\n```\n\nExample:\n```\nsrc/main.js\n<<<<<<< SEARCH\nconsole.log(\"old message\");\n=======\nconsole.log(\"new message\");\n>>>>>>> REPLACE\n```\n\n## Handling Long-Running Commands\n\nFor commands that may take a while:\n\n1. `execute_command` returns after timeout with initial output\n2. Command continues in background\n3. Use `read_output` with PID to get new output\n4. Use `force_terminate` to stop if needed\n\n## Model Context Protocol Integration\n\nThis project extends the MCP Filesystem Server to enable:\n- Local server support in Claude Desktop\n- Full system command execution\n- Process management\n- File operations\n- Code editing with search/replace blocks\n\nCreated as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us\n\n## Work in Progress and TODOs\n\nThe following features are currently being developed or planned:\n\n- **Better code search** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/17)) - Enhanced code exploration with context-aware results\n- **Better configurations** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/16)) - Improved settings for allowed paths, commands and shell environment\n- **Windows environment fixes** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/13)) - Resolving issues specific to Windows platforms\n- **Linux improvements** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/12)) - Enhancing compatibility with various Linux distributions\n- **Support for WSL** - Windows Subsystem for Linux integration\n- **Support for SSH** - Remote server command execution\n- **Installation troubleshooting guide** - Comprehensive help for setup issues\n\n## Media\nLearn more about this project through these resources:\n\n### Article\n[Claude with MCPs replaced Cursor & Windsurf. How did that happen?](https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96) - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.\n\n### Video\n[Claude Desktop Commander Video Tutorial](https://www.youtube.com/watch?v=ly3bed99Dy8) - Watch how to set up and use the Commander effectively.\n\n### Community\nJoin our [Discord server](https://discord.gg/7cbccwRp) to get help, share feedback, and connect with other users.\n\n## Testimonials\n\n[ https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n)\n\n[\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg\n)\n\n[![Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes loosing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost.\nAlso this is much more than code editing it is much more thank you for great video!](testemonials/img_2.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg)\n\n[\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg)\n\n[![You sir are my hero. You've pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven't looked back since.\nClaude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I'm not lol.\n33\n1](testemonials/img_4.png)\nhttps://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e](https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e)\n\n## Contributing\n\nIf you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.\n\nWe welcome contributions from the community! Whether you've found a bug, have a feature request, or want to contribute code, here's how you can help:\n\n- **Found a bug?** Open an issue at [github.com/wonderwhy-er/ClaudeComputerCommander/issues](https://github.com/wonderwhy-er/ClaudeComputerCommander/issues)\n- **Have a feature idea?** Submit a feature request in the issues section\n- **Want to contribute code?** Fork the repository, create a branch, and submit a pull request\n- **Questions or discussions?** Start a discussion in the GitHub Discussions tab\n\nAll contributions, big or small, are greatly appreciated!\n\nIf you find this tool valuable for your workflow, please consider [supporting the project](https://www.buymeacoffee.com/wonderwhyer).\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "commands",
        "command",
        "file",
        "file management",
        "commands manage",
        "file editing"
      ],
      "category": "file-management"
    },
    "OpenWorkspace-o1--aws-ow-s3-mcp": {
      "owner": "OpenWorkspace-o1",
      "name": "aws-ow-s3-mcp",
      "url": "https://github.com/OpenWorkspace-o1/aws-ow-s3-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/OpenWorkspace-o1.webp",
      "description": "Access and manage S3 buckets securely using pre-signed URLs for listing, uploading, downloading, and deleting objects. Simplifies interactions with AWS S3 services for efficient cloud storage management.",
      "stars": 2,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-04-09T03:03:24Z",
      "readme_content": "# AWS S3 MCP Server\n\nMCP Server for AWS S3 operations, providing secure access to S3 buckets through pre-signed URLs.\n\n## Tools\n\n1. `list_objects`\n   - List objects in an S3 bucket\n   - Input:\n     - `prefix` (string, optional): Prefix filter for object keys\n   - Returns: Array of objects with keys, sizes, and last modified dates\n\n2. `get_object`\n   - Generate a pre-signed URL for accessing an object\n   - Inputs:\n     - `key` (string, required): Object key to retrieve\n     - `expiry` (number, optional): URL expiration time in seconds (default: 3600)\n   - Returns: `object_url` containing the pre-signed URL\n\n3. `put_object`\n   - Generate a pre-signed URL for uploading an object\n   - Inputs:\n     - `key` (string, required): Object key to upload\n     - `expiry` (number, optional): URL expiration time in seconds (default: 3600)\n   - Returns: `upload_url` containing the pre-signed URL\n\n4. `delete_object`\n   - Delete an object from the bucket\n   - Input:\n     - `key` (string, required): Object key to delete\n   - Returns: `success` boolean indicating deletion status\n\n## Setup\n\n### Environment Variables\n\nThe server requires the following environment variables:\n\n- `BUCKET_NAME`: The name of your S3 bucket (required)\n- `REGION`: AWS region (default: \"ap-southeast-1\")\n\nAWS credentials should be configured using standard AWS credential configuration methods (environment variables, IAM roles, or AWS credentials file).\n\n### Usage with Claude Desktop\n\nAdd the following to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"aws-ow-s3-mcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"BUCKET_NAME\",\n        \"-e\",\n        \"REGION\",\n        \"-e\",\n        \"AWS_ACCESS_KEY_ID\",\n        \"-e\",\n        \"AWS_SECRET_ACCESS_KEY\",\n        \"mcp/aws-ow-s3-mcp\"\n      ],\n      \"env\": {\n        \"BUCKET_NAME\": \"<YOUR_BUCKET_NAME>\",\n        \"REGION\": \"<AWS_REGION>\",\n        \"AWS_ACCESS_KEY_ID\": \"<YOUR_ACCESS_KEY>\",\n        \"AWS_SECRET_ACCESS_KEY\": \"<YOUR_SECRET_KEY>\"\n      }\n    }\n  }\n}\n```\n\n#### NPX Command\n\n```json\n{\n  \"mcpServers\": {\n    \"aws-ow-s3-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-aws-ow-s3-mcp\"\n      ],\n      \"env\": {\n        \"BUCKET_NAME\": \"<YOUR_BUCKET_NAME>\",\n        \"REGION\": \"<AWS_REGION>\",\n        \"AWS_ACCESS_KEY_ID\": \"<YOUR_ACCESS_KEY>\",\n        \"AWS_SECRET_ACCESS_KEY\": \"<YOUR_SECRET_KEY>\"\n      }\n    }\n  }\n}\n```\n\n## Build\n\nDocker build:\n\n```bash\ndocker build -t mcp/aws-ow-s3-mcp-server .\n```\n\n## Development\n\nThe server is built using:\n\n- Node.js\n- TypeScript\n- @modelcontextprotocol/sdk\n- @aws-sdk/client-s3\n- @aws-sdk/s3-request-presigner\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "aws",
        "s3",
        "cloud",
        "manage s3",
        "aws s3",
        "s3 buckets"
      ],
      "category": "file-management"
    },
    "Sachin-Bhat--stela-mcp": {
      "owner": "Sachin-Bhat",
      "name": "stela-mcp",
      "url": "https://github.com/Sachin-Bhat/stela-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Sachin-Bhat.webp",
      "description": "Provides secure access to local system operations through a standardized API interface, enabling command execution, file management, and directory visualization.",
      "stars": 1,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-04-17T07:34:42Z",
      "readme_content": "# STeLA MCP\n\n[![smithery badge](https://smithery.ai/badge/@Sachin-Bhat/stela-mcp)](https://smithery.ai/server/@Sachin-Bhat/stela-mcp)\n\n> A Python implementation of a Model Context Protocol server that provides secure access to local system operations via a standardized API interface.\n\nSTeLA (Simple Terminal Language Assistant) MCP is a lightweight server that provides secure access to local machine commands and file operations via a standardized API interface. It acts as a bridge between applications and your local system, implementing the Model Context Protocol (MCP) architecture.\n\n## Overview\n\nSTeLA MCP implements the Model Context Protocol (MCP) architecture to provide a secure, standardized way for applications to execute commands and perform file operations on a local machine. It serves as an intermediary layer that accepts requests through a well-defined API, executes operations in a controlled environment, and returns formatted results.\n\n## Features\n\n* **Command Execution**: Run shell commands on the local system with proper error handling\n* **File Operations**: Read, write, and manage files on the local system\n* **Directory Visualization**: Generate recursive tree views of file systems\n* **Working Directory Support**: Execute commands in specific directories\n* **Robust Error Handling**: Detailed error messages and validation\n* **Comprehensive Output**: Capture and return both stdout and stderr\n* **Simple Integration**: Standard I/O interface for easy integration with various clients\n* **Multi-Directory Support**: Configure multiple allowed directories for file operations\n* **Security-First Design**: Strict path validation and command execution controls\n* **File Search**: Search for files matching a pattern\n* **File Edit**: Make selective edits to a file\n* **Type Safety**: Strong type checking with Pydantic models for all tool inputs\n* **Path Validation**: Enhanced symlink and parent directory validation\n\n## Installation\n\n### Installing via Smithery\n\nTo install STeLA for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@Sachin-Bhat/stela-mcp):\n\n```bash\nnpx -y @smithery/cli install @Sachin-Bhat/stela-mcp --client claude\n```\n\n### Prerequisites\n\n* Python 3.10 - 3.12\n* pip or uv package manager\n* Pydantic v2.x\n\n### Installation Steps\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd stela-mcp\n```\n\n2. Create and activate a virtual environment:\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -e .\n```\n\n### Creating a Binary Distribution\n\nTo create a self-contained binary:\n\n1. Install PyInstaller:\n```bash\npip install pyinstaller\n```\n\n2. Create the binary:\n```bash\npyinstaller --onefile src/stella_mcp//server.py --name stela-mcp\n```\n\nThe binary will be created in the `dist` directory.\n\n## Configuration\n\nSTeLA MCP can be configured using environment variables:\n\n### Directory Access Control\n\n* `ALLOWED_DIRS` (Required): Comma-separated list of directories where file operations are allowed\n  * Example: `/home/user/project,/home/user/docs`\n  * Default: Current working directory if not specified\n  * Note: All paths must be absolute\n\n* `ALLOWED_DIR` (Optional): Primary directory for command execution context\n  * Example: `/home/user/project`\n  * Default: First directory from `ALLOWED_DIRS` or current working directory\n  * Note: This is separate from `ALLOWED_DIRS` and controls command execution context\n\n### Command Execution Security\n\n* `ALLOWED_COMMANDS` (Optional): Comma-separated list of allowed shell commands\n  * Example: `ls,cat,pwd,echo`\n  * Default: `ls,cat,pwd,echo`\n  * Special value: `all` to allow any command (not recommended)\n\n* `ALLOWED_FLAGS` (Optional): Comma-separated list of allowed command flags\n  * Example: `-l,-a,-h,--help`\n  * Default: `-l,-a,-h,--help`\n  * Special value: `all` to allow any flag (not recommended)\n\n* `MAX_COMMAND_LENGTH` (Optional): Maximum length of command strings\n  * Example: `1024`\n  * Default: `1024`\n  * Note: Prevents command injection via overly long strings\n\n* `COMMAND_TIMEOUT` (Optional): Maximum execution time for commands in seconds\n  * Example: `60`\n  * Default: `60`\n  * Note: Prevents hanging commands\n\n### Example Configuration\n\n```bash\n# Directory access\nexport ALLOWED_DIRS=\"/home/user/project,/home/user/docs\"\nexport ALLOWED_DIR=\"/home/user/project\"\n\n# Command execution\nexport ALLOWED_COMMANDS=\"ls,cat,pwd,echo\"\nexport ALLOWED_FLAGS=\"-l,-a,-h,--help\"\nexport MAX_COMMAND_LENGTH=1024\nexport COMMAND_TIMEOUT=60\n```\n\n## Project Structure\n\n```\nstela-mcp/\n├── src/\n│   ├── stela_mcp/\n│   │   ├── __init__.py\n│   │   ├── shell.py        # Shell command execution\n│   │   ├── filesystem.py   # File system operations\n│   │   └── security.py     # Security configuration\n│   └── server.py           # Main server implementation\n├── pyproject.toml          # Project configuration\n└── README.md\n```\n\n## Usage\n\n### Starting the Server\n\nRun the server using:\n```bash\nuv run python -m src.stella_mcp.server\n```\n\nThe server will start and listen for connections through standard I/O.\n\n### Using with Claude Desktop\n\nTo use STeLA MCP with Claude Desktop:\n\n1. Option 1: Using Python directly\n   - Start the server using:\n     ```bash\n     uv run python -m src.stela_mcp.server\n     ```\n   - In Claude Desktop:\n     - Go to Settings\n     - Under \"Tools\", click \"Add Tool\"\n     - Select \"MCP Server\"\n     - Enter the following configuration:\n       - **Name**: STeLA MCP\n       - **Path**: The absolute path to your Python executable (e.g., `/home/username/.venv/bin/python`)\n       - **Arguments**: `-m src.stela_mcp.server`\n       - **Working Directory**: The path to your STeLA MCP project directory\n\n2. Option 2: Using the binary\n   - Copy the binary from `dist/stela-mcp` to a location in your PATH\n   - In Claude Desktop:\n     - Go to Settings\n     - Under \"Tools\", click \"Add Tool\"\n     - Select \"MCP Server\"\n     - Enter the following configuration:\n       - **Name**: STeLA MCP\n       - **Path**: The absolute path to the binary (e.g., `/usr/local/bin/stela-mcp`)\n       - **Arguments**: (leave empty)\n       - **Working Directory**: (leave empty)\n\n3. Once configured, you can use STeLA MCP tools in your conversations with Claude. For example:\n   - \"Show me the contents of my home directory\"\n   - \"Create a new file called 'test.txt' with some content\"\n   - \"Run the command 'ls -la' in my current directory\"\n\n4. Claude will automatically use the appropriate tools based on your requests and display the results in the conversation.\n\n### Available Tools\n\n#### Command Tools\n\n##### execute_command\nExecutes shell commands on the local system.\n\n**Parameters:**\n* `command` (string, required): The shell command to execute\n* `working_dir` (string, optional): Directory where the command should be executed\n\n**Returns:**\n* On success: Command output (stdout)\n* On failure: Error message and any command output (stderr)\n\n##### change_directory\nChanges the current working directory.\n\n**Parameters:**\n* `path` (string, required): Path to change to\n\n**Returns:**\n* On success: Success message with new path\n* On failure: Error message\n\n#### File System Tools\n\n##### read_file\nReads the contents of a file.\n\n**Parameters:**\n* `path` (string, required): Path to the file to read\n\n**Returns:**\n* On success: File contents\n* On failure: Error message\n\n##### read_multiple_files\nReads multiple files simultaneously.\n\n**Parameters:**\n* `paths` (array, required): List of file paths to read\n\n**Returns:**\n* On success: Combined contents of all files\n* On failure: Error message and partial results\n\n##### write_file\nWrites content to a file.\n\n**Parameters:**\n* `path` (string, required): Path where the file will be written\n* `content` (string, required): Content to write to the file\n\n**Returns:**\n* On success: Success message\n* On failure: Error message\n\n##### edit_file\nMakes selective edits to a file.\n\n**Parameters:**\n* `path` (string, required): Path to the file to edit\n* `edits` (array, required): List of edit operations\n  * Each edit contains `oldText` and `newText`\n* `dryRun` (boolean, optional): Preview changes without applying\n\n**Returns:**\n* On success: Git-style diff of changes\n* On failure: Error message\n\n##### list_directory\nLists contents of a directory.\n\n**Parameters:**\n* `path` (string, required): Path for the directory to list\n\n**Returns:**\n* On success: List of files and directories\n* On failure: Error message\n\n##### create_directory\nCreates a new directory.\n\n**Parameters:**\n* `path` (string, required): Path for the directory to create\n\n**Returns:**\n* On success: Success message\n* On failure: Error message\n\n##### move_file\nMoves or renames files and directories.\n\n**Parameters:**\n* `source` (string, required): Source path of the file or directory to move\n* `destination` (string, required): Destination path where the file or directory will be moved to\n\n**Returns:**\n* On success: Success message\n* On failure: Error message\n\n##### search_files\nSearches for files matching a pattern.\n\n**Parameters:**\n* `path` (string, required): Starting path for the search\n* `pattern` (string, required): Search pattern to match file and directory names\n* `excludePatterns` (array, optional): List of glob patterns to exclude\n\n**Returns:**\n* On success: List of matching files\n* On failure: Error message\n\n##### directory_tree\nGenerates a recursive tree view of files and directories.\n\n**Parameters:**\n* `path` (string, required): Path for the directory to generate tree from\n\n**Returns:**\n* On success: JSON structure representing the directory tree\n* On failure: Error message\n\n##### get_file_info\nRetrieves detailed metadata about a file or directory.\n\n**Parameters:**\n* `path` (string, required): Path to the file or directory\n\n**Returns:**\n* On success: File/directory metadata\n* On failure: Error message\n\n##### list_allowed_directories\nLists all directories the server is allowed to access.\n\n**Parameters:**\n* None\n\n**Returns:**\n* On success: List of allowed directories\n* On failure: Error message\n\n##### show_security_rules\nShows current security configuration.\n\n**Parameters:**\n* None\n\n**Returns:**\n* On success: Security configuration details\n* On failure: Error message\n\n## Security Considerations\n\nSTeLA MCP provides direct access to execute commands and file operations on the local system. Consider the following security practices:\n\n* Run with appropriate permissions (avoid running as root/administrator)\n* Use in trusted environments only\n* Consider implementing additional authorization mechanisms for production use\n* Be cautious about which directories you allow command execution and file operations in\n* Implement path validation to prevent unauthorized access to system files\n* Use the most restrictive configuration possible for your use case\n* Regularly review and update allowed commands and directories\n* Validate symlinks to prevent access outside allowed directories\n* Ensure parent directory checks for file creation operations\n\n### Platform-Specific Security Notes\n\n#### Linux/macOS\n* Run with a dedicated user with limited permissions\n* Consider using a chroot environment to restrict file system access\n* Use `chmod` to restrict executable permissions\n* Consider using SELinux/AppArmor for additional security\n\n#### Windows\n* Run as a standard user, not an administrator\n* Consider using Windows Security features to restrict access\n* Use folder/file permissions to limit access to sensitive directories\n* Consider using Windows Defender Application Control\n\n## Development\n\n### Adding New Tools\n\nTo extend STeLA MCP with additional functionality, follow this pattern:\n\n1. Define a Pydantic model for the tool's input parameters in `server.py`\n2. Add a new method to the appropriate class in `shell.py` or `filesystem.py`\n3. Register the tool in `server.py` using the `@server.call_tool()` decorator\n4. Implement the tool handler with proper error handling and return types\n\nExample:\n```python\nfrom pydantic import BaseModel, Field\n\nclass MyToolInput(BaseModel):\n    param1: str = Field(description=\"Description of param1\")\n    param2: int = Field(description=\"Description of param2\")\n\n@server.call_tool()\nasync def my_tool(request: Request[MyToolInput, str], arguments: MyToolInput) -> Dict[str, Any]:\n    \"\"\"Description of the tool.\"\"\"\n    try:\n        # Tool implementation\n        result = await do_something(arguments.param1, arguments.param2)\n        return {\"success\": True, \"result\": result}\n    except Exception as e:\n        return {\"error\": str(e)}\n```\n\n## License\n\nApache-2.0 License\n\n## Acknowledgements\n\n* Built with the MCP Python SDK\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "stela",
        "mcp",
        "file",
        "file management",
        "mcp provides",
        "stela mcp"
      ],
      "category": "file-management"
    },
    "Siddhant-K-code--memory-journal-mcp-server": {
      "owner": "Siddhant-K-code",
      "name": "memory-journal-mcp-server",
      "url": "https://github.com/Siddhant-K-code/memory-journal-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Siddhant-K-code.webp",
      "description": "Search and analyze photos in a library using various intuitive tools, including location-based searches to easily find images taken in specific places.",
      "stars": 21,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-28T18:59:40Z",
      "readme_content": "# 📸 Smart Photo Journal MCP Server\n\n**Smart Photo Journal** is an MCP server designed to help you search and analyze your photo library with powerful, intuitive tools. Whether you're reminiscing about family moments or looking for a specific photo with friends, this server has got you covered! 🎉\n\n> **Inspired by:** [burningion/video-editing-mcp](https://github.com/burningion/video-editing-mcp)\n> A huge shoutout to [@burningion](https://x.com/burningion) for the innovative idea of using MCP for creative media management!\n\n<a href=\"https://glama.ai/mcp/servers/51jiworg5k\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/51jiworg5k/badge\" alt=\"Smart Photo Journal Server MCP server\" /></a>\n\n## 🎯 Features\n\n- **Location Search:** Find photos from specific places with ease. 🌍\n- **Label Search:** Search photos by keywords or labels like \"Birthday,\" \"Beach,\" or \"Vacation.\" 🎉\n- **People Search:** Quickly locate photos featuring specific people. 👥\n- **Photo Analysis:** Discover fun insights like the most popular times and days for your photo shoots. 🕰️\n- **Fuzzy Matching:** Not sure of the exact name? Don't worry! The server supports fuzzy matching for flexibility. 🔍\n\n## 🚀 Getting started\n\n### Prerequisites\n\n1. Ensure you have macOS with a Photos library.\n2. Install [uv](https://docs.astral.sh/uv/) to manage dependencies and run the server.\n\n### Installation\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/Siddhant-K-code/memory-journal-mcp-server.git\n   cd memory-journal-mcp-server\n   ```\n\n2. Install dependencies using `uv`:\n\n   ```bash\n   uv sync\n   ```\n\n3. Configure the MCP server. Update your `claude_desktop_config.json` with the following configuration:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"smart-photo-journal\": {\n         \"command\": \"/Users/<YOUR_DEVICE_USERNAME>/.local/bin/uv\",\n         \"args\": [\n           \"--directory\",\n           \"/Users/<PATH_TO_CLONED_DIR>/memory-journal-mcp-server\",\n           \"run\",\n           \"server.py\"\n         ]\n       }\n     }\n   }\n   ```\n\n4. Start the server with following command or just open Claude Desktop:\n   ```bash\n   uv run server.py\n   ```\n\n> **Note:** Replace `<YOUR_DEVICE_USERNAME>` and `<PATH_TO_CLONED_DIR>` with your actual device username and the path to the cloned directory.\n> You will get a popup to authorize the server to access your photos. It will be in local only, and no data will be shared with anyone except Claude services.\n\n### MCP Server Initialization\n\nWhen the server starts, you'll see:\n\n```\nStarting Smart Photo Journal MCP server.\n```\n\nIt's now ready to process your photo queries! 🎉\n\n---\n\n## 🛠️ Usage\n\n### Available Tools\n\n1. **Location Search**\n\n   - Description: Find photos taken in a specific location.\n   - Input Example:\n     ```json\n     {\n       \"location\": \"Udaipur\"\n     }\n     ```\n   - Expected Output:\n     ```\n     Found 5 photos from Udaipur:\n     📷 IMG_1234.jpg\n     ...\n     ```\n\n2. **Label Search**\n\n   - Description: Search for photos by labels or keywords.\n   - Input Example:\n     ```json\n     {\n       \"label\": \"Birthday\"\n     }\n     ```\n   - Expected Output:\n     ```\n     Photos labeled as 'Birthday' (3 found):\n     📷 IMG_5678.jpg\n     ...\n     ```\n\n3. **People Search**\n\n   - Description: Find photos containing specific people.\n   - Input Example:\n     ```json\n     {\n       \"person\": \"Maa\"\n     }\n     ```\n   - Expected Output:\n     ```\n     Photos with Maa (10 found):\n     📷 IMG_9101.jpg\n     ...\n     ```\n\n4. **Photo Analysis**\n   - Description: Analyze patterns in your photo library, such as the most common times or days for photo shoots.\n   - Input Example:\n     ```json\n     {}\n     ```\n   - Expected Output:\n     ```\n     📸 Photo Taking Patterns:\n     Total Photos: 200\n     ...\n     ```\n\n---\n\n## 📚 Example Use-Cases\n\n### 1. **Family & Friends Album Organizer**\n\nWant to gather all your family moments in one place? Use the `people-search` tool with names like \"Papa\" or \"Mom\" or \"Any Friend\" to find photos with specific people.\n\n### 2. **Vacation Highlights**\n\nSearch for photos from your vacation destination using the `location-search` tool.\n\n### 3. **Throwback Fun**\n\nCurious about your past birthday photos? Use `label-search` with \"Birthday\" and relive the fun!\n\n### 4. **Understand Your Photography Habits**\n\nUse the `photo-analysis` tool to understand when and where you take most of your photos. Plan your next shoot accordingly!\n\n---\n\n## ⚡ Tips for Best Results\n\n- Ensure your Photos library is loaded in macOS.\n- Be as specific as possible with search queries for more accurate results.\n- Use fuzzy matching for flexibility when you're unsure of the exact name.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "photos",
        "searches",
        "images",
        "photos library",
        "analyze photos",
        "file management"
      ],
      "category": "file-management"
    },
    "Simon-Kansara--ableton-live-mcp-server": {
      "owner": "Simon-Kansara",
      "name": "ableton-live-mcp-server",
      "url": "https://github.com/Simon-Kansara/ableton-live-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/Simon-Kansara.webp",
      "description": "Facilitates communication between AI models and Ableton Live through OSC messages, enabling music production automation and workflow enhancement. Maps OSC addresses to available tools for MCP clients.",
      "stars": 328,
      "forks": 45,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-29T16:09:04Z",
      "readme_content": "# Ableton Live MCP Server\n\n## 📌 Overview\n\nThe **Ableton Live MCP Server** is a server implementing the\n[Model Context Protocol (MCP)](https://modelcontextprotocol.io) to facilitate\ncommunication between LLMs and **Ableton Live**. It uses **OSC (Open Sound\nControl)** to send and receive messages to/from Ableton Live. It is based on\n[AbletonOSC](https://github.com/ideoforms/AbletonOSC) implementation and\nexhaustively maps available OSC adresses to\n[**tools**](https://modelcontextprotocol.io/docs/concepts/tools) accessible to\nMCP clients.\n\n[![Control Ableton Live with LLMs](https://img.youtube.com/vi/12MzsQ3V7cs/hqdefault.jpg)](https://www.youtube.com/watch?v=12MzsQ3V7cs)\n\nThis project consists of two main components:\n\n- `mcp_ableton_server.py`: The MCP server handling the communication between\n  clients and the OSC daemon.\n- `osc_daemon.py`: The OSC daemon responsible for relaying commands to Ableton\n  Live and processing responses.\n\n## ✨ Features\n\n- Provides an MCP-compatible API for controlling Ableton Live from MCP clients.\n- Uses **python-osc** for sending and receiving OSC messages.\n- Based on the OSC implementation from\n  [AbletonOSC](https://github.com/ideoforms/AbletonOSC).\n- Implements request-response handling for Ableton Live commands.\n\n## ⚡ Installation\n\n### Requirements\n\n- Python 3.8+\n- `python-osc` (for OSC communication)\n- `fastmcp` (for MCP support)\n- `uv` (recommended Python package installer)\n- [AbletonOSC](https://github.com/ideoforms/AbletonOSC) as a control surface\n\n### Installation Steps\n\n1. Install `uv` (https://docs.astral.sh/uv/getting-started/installation):\n\n   ```bash\n   curl -LsSf https://astral.sh/uv/install.sh | sh\n   ```\n\n2. Clone the repository:\n\n   ```bash\n   git clone https://github.com/your-username/mcp_ableton_server.git\n   cd mcp_ableton_server\n   ```\n\n3. Install the project and its dependencies:\n\n   ```bash\n   uv sync\n   ```\n\n4. Install AbletonOSC Follow the instructions at\n   [AbletonOSC](https://github.com/ideoforms/AbletonOSC)\n\n## 🚀 Usage\n\n### Running the OSC Daemon\n\nThe OSC daemon will handle OSC communication between the MCP server and Ableton\nLive:\n\n```bash\nuv run osc_daemon.py\n```\n\nThis will:\n\n- Listen for MCP client connections on port **65432**.\n- Forward messages to Ableton Live via OSC on port **11000**.\n- Receive OSC responses from Ableton on port **11001**.\n\n### Example Usage\n\nIn Claude desktop, ask Claude:\n\n- _Prepare a set to record a rock band_\n- _Set the input routing channel of all tracks that have \"voice\" in their name\n  to Ext. In 2_\n\n## ⚙️ Configuration\n\nBy default, the server and daemon run on **localhost (127.0.0.1)** with the\nfollowing ports:\n\n- **MCP Server Socket:** 65432\n- **Ableton Live OSC Port (Send):** 11000\n- **Ableton Live OSC Port (Receive):** 11001\n\nTo modify these, edit the `AbletonOSCDaemon` class in `osc_daemon.py`:\n\n```python\nself.socket_host = '127.0.0.1'\nself.socket_port = 65432\nself.ableton_host = '127.0.0.1'\nself.ableton_port = 11000\nself.receive_port = 11001\n```\n\n### Claude Desktop Configuration\n\nTo use this server with Claude Desktop, you need to configure it in your Claude\nDesktop settings. The configuration file location varies by operating system:\n\n- macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration to your `mcpServers` section:\n\n```json\n{\n  \"mcpServers\": {\n    \"Ableton Live Controller\": {\n      \"command\": \"/path/to/your/project/.venv/bin/python\",\n      \"args\": [\"/path/to/your/project/mcp_ableton_server.py\"]\n    }\n  }\n```\n\nThis configuration ensures that:\n\n- The server runs with all dependencies properly managed\n- The project remains portable and reproducible\n\n## Contributing\n\nFeel free to submit issues, feature requests, or pull requests to improve this\nproject.\n\n## License\n\nThis project is licensed under the **MIT License**. See the `LICENSE` file for\ndetails.\n\n## Acknowledgments\n\n- [Model Context Protocol (MCP)](https://modelcontextprotocol.io)\n- [python-osc](https://github.com/attwad/python-osc) for OSC handling\n- Daniel John Jones for OSC implementation with\n  [AbletonOSC](https://github.com/ideoforms/AbletonOSC)\n- Ableton Third Party Remote Scripts\n- Julien Bayle @[Structure Void](https://structure-void.com/) for endless\n  inspirations and resources.\n\n## TODO\n\n- Explore _resources_ and _prompts_ primitives opportunities.\n- Build a standalone Ableton Live MCP client.\n\n---\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ableton",
        "osc",
        "mcp",
        "ableton live",
        "mcp server",
        "live mcp"
      ],
      "category": "file-management"
    },
    "StepanCooleague--file-finder-mcp": {
      "owner": "StepanCooleague",
      "name": "file-finder-mcp",
      "url": "https://github.com/StepanCooleague/file-finder-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/StepanCooleague.webp",
      "description": "Search for files in the filesystem based on a specified path fragment. Retrieve file metadata such as name, full path, size, and creation date for the located files.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-02-28T07:23:22Z",
      "readme_content": "# file-finder-mcp MCP Server\n\nA MCP server for searching files in the filesystem based on a path fragment.\n\n## Components\n\n### Resources\n\nThe server implements a file search system:\n\n- Each file resource includes:\n  - File name\n  - Full path\n  - File size\n  - Creation date\n\n### Tools\n\nThe server provides one tool:\n\n- `search-files`: Searches for files matching a given path fragment.\n  - Takes `query` as a required string argument.\n  - Takes `directory` as an optional string argument to specify the base directory for the search. If not provided, the search runs in the root directory.\n  - Returns a list of matching files with their metadata.\n\n## Quickstart\n\n### Install\n\nReplace the contents of the `cline_mcp_settings.json` file with the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"file-finder-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/stleubaev/Desktop/ClineTest/file-finder-mcp\",\n        \"run\",\n        \"file-finder-mcp\"\n      ]\n    }\n  }\n}\n```\n\n## Testing\n\nThe testing was conducted using the Gemini model with the following prompt:\n\n```\nhi can you find files called file_to_find on my desktop using my mcp server\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "file",
        "metadata",
        "file metadata",
        "file finder",
        "stepancooleague file"
      ],
      "category": "file-management"
    },
    "Tencent--cos-mcp": {
      "owner": "Tencent",
      "name": "cos-mcp",
      "url": "https://github.com/Tencent/cos-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/Tencent.webp",
      "description": "Integrate large language models with Tencent Cloud Object Storage (COS) and Data Insight (CI), enabling file management, automated cloud data handling, and various image and video processing tasks. Supports natural language-based metadata search and efficient backup workflows.",
      "stars": 15,
      "forks": 6,
      "license": "Other",
      "language": "TypeScript",
      "updated_at": "2025-10-02T12:48:08Z",
      "readme_content": "中文 | [English](README.en.md)\n\n# 腾讯云 COS MCP Server 🚀🚀🚀\n ![](https://badge.mcpx.dev?type=server 'MCP Server') [![npm Version](https://img.shields.io/npm/v/cos-mcp)](https://www.npmjs.com/package/cos-mcp) [![license](http://img.shields.io/badge/license-BSD3-brightgreen.svg?style=flat)](License.txt)\n\n<p align=\"center\">\n  <img alt=\"logo\" src=\"https://raw.githubusercontent.com/Tencent/cos-mcp/master/src/img/logo.png\"/>\n</p>\n\n基于 MCP 协议的腾讯云 COS MCP Server，无需编码即可让大模型快速接入腾讯云存储 (COS) 和数据万象 (CI) 能力。\n\n---\n\n## ✨ 核心功能\n\n### 云端存储能力\n- ⬆️ 文件上传到云端\n- ⬇️ 文件从云端下载\n- 📋 获取云端文件列表\n\n### 云端处理能力\n- 🖼️ 获取图片信息\n- 🔍 图片超分辨率\n- ✂️ 图片裁剪\n- 📲 二维码识别\n- 🏆 图片质量评估\n- 🅰️ 文字水印\n- 🎬 元数据/自然语言检索 (MateInsight)\n- 📄 文档转 PDF\n- 🎥 视频封面\n\n---\n\n## 💡 典型应用场景\n\n- 使用其他 MCP 能力获取的文本/图片/视频/音频等数据，可直接上传到 COS 云端存储。\n- 本地数据快速通过大模型转存到 COS 云端存储/备份。\n- 通过大模型实现自动化：将网页里的视频/图片/音频/文本等数据批量转存到 COS 云端存储。\n- 自动化将视频/图片/音频/文本等数据在云端处理，并转存到 COS 云端存储。\n\n---\n\n## 🌟 功能示例\n\n1. 上传文件到 COS  \n   ![eg1](https://raw.githubusercontent.com/Tencent/cos-mcp/master/src/img/eg1.png)\n2. 图片质量评估  \n   ![eg3](https://raw.githubusercontent.com/Tencent/cos-mcp/master/src/img/eg3.png)\n3. 自然语言检索图片  \n   ![eg2](https://raw.githubusercontent.com/Tencent/cos-mcp/master/src/img/eg2.png)\n4. 视频截帧  \n   ![eg15](https://raw.githubusercontent.com/Tencent/cos-mcp/master/src/img/eg15.png)\n\n---\n\n# 🔧 安装使用\n\n## 参数说明\n\n为了保护您的数据私密性，请准备以下参数：\n\n### 1. **SecretId / SecretKey**\n- **说明**: 腾讯云 COS 的密钥，用于身份认证，请妥善保管，切勿泄露。\n- **获取方式**: \n  1. 访问 [腾讯云密钥管理](https://console.cloud.tencent.com/cam/capi)。\n  2. 新建密钥并复制生成的 **SecretId** 和 **SecretKey**。\n\n### 2. **Bucket**\n- **示例**: `mybucket-123456`\n- **说明**: 存储桶名称，用于存放数据，相当于您的个人存储空间。\n- **获取方式**: \n  1. 访问 [存储桶列表](https://console.cloud.tencent.com/cos/bucket)。\n  2. 复制存储桶名称。如果没有存储桶，可点击“创建存储桶”，一般选择默认配置即可快速完成创建。\n\n### 3. **Region**\n- **示例**: `ap-beijing`\n- **说明**: 存储桶所在的地域。\n- **获取方式**: \n  1. 在 [存储桶列表](https://console.cloud.tencent.com/cos/bucket) 中找到存储桶。\n  2. 在存储桶名称一行查看所属地域并复制，例如：`ap-beijing`。\n\n### 4. **DatasetName**\n- **说明**: 非必填参数，数据智能检索操作需要此参数。\n- **获取方式**: \n  1. 访问 [数据集管理](https://console.cloud.tencent.com/cos/metaInsight/dataManage)。\n  2. 创建数据集并等待索引建立完成后，复制数据集名称。\n\n### 5. **connectType**\n- **说明**: 非必填参数，指定连接方式，可选值为 `stdio`（本地）或 `sse`（远程）。\n- **默认值**: `stdio`\n\n### 6. **port**\n- **说明**: 非必填参数，当连接方式为 `sse` 时，可自由设置端口。\n- **默认值**: `3001`\n\n---\n\n## 从 npx 启动\n\n在大模型内使用时（例如: cursor），需要在 `mcp.json` 中配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"cos-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"cos-mcp\",\n        \"--Region=yourRegion\",\n        \"--Bucket=yourBucket\",\n        \"--SecretId=yourSecretId\",\n        \"--SecretKey=yourSecretKey\",\n        \"--DatasetName=yourDatasetname\"\n      ]\n    }\n  }\n}\n```\n\n也可以通过 JSON 配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"cos-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"cos-mcp\",\n        \"--cos-config='{\\\"Region\\\":\\\"yourRegion\\\",\\\"Bucket\\\":\\\"yourBucket\\\",\\\"SecretId\\\":\\\"yourSecretId\\\",\\\"SecretKey\\\":\\\"yourSecretKey\\\",\\\"DatasetName\\\":\\\"yourDatasetname\\\"}'\"\n      ]\n    }\n  }\n}\n```\n\n---\n\n## 使用 npm 安装\n\n```bash\n# 安装\nnpm install -g cos-mcp@latest\n\n# 运行开启 SSE 模式\ncos-mcp --Region=yourRegion --Bucket=yourBucket --SecretId=yourSecretId --SecretKey=yourSecretKey --DatasetName=yourDatasetname --port=3001 --connectType=sse\n\n# 或通过 JSON 配置\ncos-mcp --cos-config='{\"Region\":\"yourRegion\",\"Bucket\":\"BucketName-APPID\",\"SecretId\":\"yourSecretId\",\"SecretKey\":\"yourSecretKey\",\"DatasetName\":\"datasetName\"}' --port=3001 --connectType=sse\n```\n\n在大模型内使用 SSE 模式时（例如: cursor），需要在 `mcp.json` 中配置：\n\n```json\n{\n  \"mcpServers\": {\n    \"cos-mcp\": {\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\n---\n\n## 使用源码安装\n\n### 步骤 1: 克隆项目代码\n\n```bash\ngit clone https://github.com/Tencent/cos-mcp.git\ncd cos-mcp\n```\n\n### 步骤 2: 安装依赖\n\n```bash\nnpm install\n```\n\n### 步骤 3: 启动服务\n\n#### 3.1 配置本地环境变量\n\n创建 `.env` 文件，并配置以下环境变量：\n\n```env\nRegion='yourRegion'\nBucket='yourBucket'\nSecretId='yourSecretId'\nSecretKey='yourSecretKey'\nDatasetName=\"yourDatasetName\"\n```\n\n#### 3.2 本地 SSE 模式启动（方式一）\n\n```bash\nnpm run start:sse\n```\n\n#### 3.3 本地构建后使用 STDIO 模式（方式二）\n\n```bash\nnpm run build\n```\n\n构建产物位于 `dist/index.js`。\n\n---\n\n### 步骤 4: 在大模型内使用\n\n#### SSE 模式配置\n\n```json\n{\n  \"mcpServers\": {\n    \"cos-mcp\": {\n      \"url\": \"http://localhost:3001/sse\"\n    }\n  }\n}\n```\n\n#### STDIO 模式配置\n\n```json\n{\n  \"mcpServers\": {\n    \"cos-mcp\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"${your work space}/dist/index.js\"\n      ]\n    }\n  }\n}\n```\n\n完成以上步骤后，即可通过源码运行 COS MCP Server。\n\n---\n\n## ⚠️ 注意事项\n\n1. 如果安装了旧版本的包，可以将上述内容内 `cos-mcp` 改为 `cos-mcp@latest` 安装最新版包。\n2. 如果全局安装后直接使用 `cos-mcp` 不行，可能是全局变量有问题，可以使用拆分变量或 `npx` 的方式启动：\n   ```bash\n   npm install -g cos-mcp@latest\n   cos-mcp --cos-config=xxx --port=3001 --connectType=sse\n   ```\n   上述命令效果等同于：\n   ```bash\n   npx cos-mcp@latest --cos-config=xxx --port=3001 --connectType=sse\n   ```\n3. 如果出现解析问题，可能是终端对双引号敏感，可以将配置参数改为以下格式再尝试：\n   ```bash\n   --cos-config='{\\\"Region\\\":\\\"yourRegion\\\",\\\"Bucket\\\":\\\"BucketName-APPID\\\",\\\"SecretId\\\":\\\"yourSecretId\\\",\\\"SecretKey\\\":\\\"yourSecretKey\\\",\\\"DatasetName\\\":\\\"datasetName\\\"}' --port=3001 --connectType=sse\n   ```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cloud",
        "storage",
        "metadata",
        "storage cos",
        "file management",
        "tencent cloud"
      ],
      "category": "file-management"
    },
    "VadimNastoyashchy--json-mcp": {
      "owner": "VadimNastoyashchy",
      "name": "json-mcp",
      "url": "https://github.com/VadimNastoyashchy/json-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/VadimNastoyashchy.webp",
      "description": "Efficiently interacts with JSON files by splitting, merging, and validating data based on specified conditions. Designed for seamless integration with language models to automate JSON data manipulation within development environments.",
      "stars": 11,
      "forks": 2,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-04T07:49:29Z",
      "readme_content": "# JSON MCP\n\n[![Smithery Badge](https://smithery.ai/badge/@VadimNastoyashchy/json-mcp)](https://smithery.ai/server/@VadimNastoyashchy/json-mcp)\n\nThe **Model Context Protocol (MCP)** server empowers **LLMs** to efficiently interact with JSON files. With JSON MCP, you can **split**, **merge**, and **find specific data**, **validate** within JSON files based on defined conditions.\n\n---\n\n<a href=\"https://glama.ai/mcp/servers/@VadimNastoyashchy/json-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@VadimNastoyashchy/json-mcp/badge\" />\n</a>\n\n---\n\n## 🌟 Key Features\n\n✅ **Fast and lightweight**  \n✅ **LLM-friendly functionality**\n\n---\n\n## 🎥 Demo\n\nBelow is a demo showcasing the `split` functionality:\n\n\n\n---\n\n## 🔧 Use Cases (Tools)\n\n### 1. **`split`**\n\nSplit a JSON file into a specified number of objects.\n\n> **Note:** The file path must be provided.\n\n**Prompt Example:**\n\n```plaintext\nSplit JSON file from /Users/json-mcp/tests/merged.json\n5 objects per file\n```\n\n### 2. **`merge`**\n\nMerge JSON files into a one JSON file\n\n> **Note:** The folder path should be provided\n\n**Prompt Example:**\n\n```plaintext\nMerge json files from /Users/json-mcp/tests\n```\n\n---\n\n### ⚙️ Configuration\n\n[<img src=\"https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF\" alt=\"Install in VS Code\">](https://insiders.vscode.dev/redirect?url=vscode:mcp/install?%7B%22name%22%3A%22%40VadimNastoyashchy%2Fjson-mcp%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22%40smithery%2Fcli%40latest%22%2C%22run%22%2C%22%40VadimNastoyashchy%2Fjson-mcp%22%2C%22--key%22%2C%2292357446-baf5-439c-b7c1-b5263e221b57%22%5D%7D)\n\n#### VS Code Manual Configuration\n\nTo configure the JSON MCP server manually in VS Code, update the **User Settings (JSON)** file:\n\n```json\n{\n  \"mcp\": {\n    \"servers\": {\n      \"json-mcp-server\": {\n        \"command\": \"npx\",\n        \"args\": [\"json-mcp-server@latest\"]\n      }\n    }\n  }\n}\n```\n\n#### Installation in VS Code\n\nYou can install the JSON MCP server using the VS Code CLI:\n\n```bash\n# For VS Code\ncode --add-mcp '{\"name\":\"json-mcp-server\",\"command\":\"npx\",\"args\": [\"json-mcp-server@latest\"]}'\n```\n\nAfter installation, the JSON MCP server will be available for use with your GitHub Copilot agent in VS Code.\n\n#### Claude Desktop\n\nTo install json-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@VadimNastoyashchy/json-mcp):\n\n```bash\nnpx -y @smithery/cli install @VadimNastoyashchy/json-mcp --client claude\n```\n\n---\n\n### ⚙️ Installation Server\n\n#### Install globally\n\n```bash\nnpm install -g json-mcp-server@latest\n```\n\n#### Run after global installation\n\n```bash\njson-mcp-server\n```\n\n#### Using npx with latest version (recommended)\n\n```bash\nnpx json-mcp-server@latest\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "json",
        "files",
        "file",
        "json files",
        "automate json",
        "vadimnastoyashchy json"
      ],
      "category": "file-management"
    },
    "Wayazi--mcp_file_system": {
      "owner": "Wayazi",
      "name": "mcp_file_system",
      "url": "https://github.com/Wayazi/mcp_file_system",
      "imageUrl": "/freedevtools/mcp/pfp/Wayazi.webp",
      "description": "Facilitates secure access to filesystem operations, enabling users to manipulate files and directories, retrieve metadata, and perform searches through a standardized interface.",
      "stars": 3,
      "forks": 0,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-04-06T18:46:23Z",
      "readme_content": "# MCP File System\n\nA Model Context Protocol (MCP) server that provides filesystem operations through a standardized interface.\n\n## Features\n\n- File operations (read/write)\n- Directory management (create/list/delete)\n- File movement and renaming\n- File metadata retrieval\n- File search capabilities\n- Access control through allowed directories\n\n## Getting Started\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the project:\n```bash\nnpm run build\n```\n\n3. Run the server with allowed directories:\n```bash\nnpm start /path/to/allowed/directory [/path/to/another/directory ...]\n```\n\n## Documentation\n\n- [Server Implementation Details](docs/server-implementation-fix.md) - Learn about the server implementation and recent fixes\n- See the [MCP SDK Documentation](https://modelcontextprotocol.org/docs) for more details about the protocol\n\n## Development\n\nThe server is built using:\n- TypeScript\n- MCP SDK (high-level API)\n- Node.js filesystem APIs\n\n## Security\n\nThe server implements path validation to ensure operations only occur within allowed directories specified at startup.\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_file_system",
        "filesystem",
        "files",
        "mcp_file_system facilitates",
        "wayazi mcp_file_system",
        "file management"
      ],
      "category": "file-management"
    },
    "Wildebeest--mcp_pdf_forms": {
      "owner": "Wildebeest",
      "name": "mcp_pdf_forms",
      "url": "https://github.com/Wildebeest/mcp_pdf_forms",
      "imageUrl": "/freedevtools/mcp/pfp/Wildebeest.webp",
      "description": "Manipulate and visualize PDF forms by extracting field information and highlighting form fields for analysis. Streamline PDF workflows using a toolkit built with MCP and PyMuPDF.",
      "stars": 7,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-03T03:15:44Z",
      "readme_content": "# MCP PDF Forms\n\nA PDF form manipulation toolkit built with [MCP](https://github.com/llama-index-ai/mcp) and PyMuPDF.\n\n## Features\n\n- Find PDF files across multiple directories\n- Extract form field information from PDF files\n- Visualize form fields in PDF documents\n\n## Installation\n\n```bash\n# Install package from PyPI\npip install mcp_pdf_forms\n\n# Or install from source\ngit clone https://github.com/Wildebeest/mcp_pdf_forms.git\ncd mcp_pdf_forms\npip install -e .\n```\n\n## Command Line Tool\n\nAfter installation, you can use the `mcp-pdf-forms` command to start the server:\n\n```bash\n# Start the server with one or more directories to scan for PDFs\nmcp-pdf-forms examples\n```\n\nYou can also add it to Claude Code as an MCP:\n\n```bash\nclaude mcp add pdf-forms mcp-pdf-forms .\n```\n## Usage\n\nOnce installed, you can use the package to work with PDF forms. The package provides tools through the MCP interface.\n\n### PDF Discovery Tool\n\nThe PDF Discovery tool helps you find PDF files across specified directories.\n\n- **Input**: Directory paths to search for PDFs\n- **Output**: List of PDF files found in the specified directories\n- **Usage**: Use this to quickly locate all PDF files in your project or specified folders\n\n### Form Field Extraction Tool\n\nThe Form Field Extraction tool extracts information about all form fields in a PDF document.\n\n- **Input**: Path to a PDF file\n- **Output**: Detailed information about each form field including field name, type, position, and other properties\n- **Usage**: Use this to analyze form structure and understand the fields available for filling\n\n### Field Highlight Visualization Tool\n\nThe Field Highlight tool creates a visual representation of form fields in the PDF.\n\n- **Input**: Path to a PDF file\n- **Output**: Modified PDF with all form fields highlighted for easy identification\n- **Usage**: Use this to visually inspect the layout and position of form fields in your document\n\n## Libraries Used\n\n- [MCP](https://github.com/llama-index-ai/mcp) - Machine Conversation Protocol framework\n- [PyMuPDF](https://github.com/pymupdf/PyMuPDF) - Python bindings for MuPDF, a high-performance PDF library\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_pdf_forms",
        "pdf",
        "forms",
        "pdf forms",
        "pdf workflows",
        "mcp_pdf_forms manipulate"
      ],
      "category": "file-management"
    },
    "Xuanwo--mcp-server-opendal": {
      "owner": "Xuanwo",
      "name": "mcp-server-opendal",
      "url": "https://github.com/Xuanwo/mcp-server-opendal",
      "imageUrl": "/freedevtools/mcp/pfp/Xuanwo.webp",
      "description": "Provides access to multiple cloud storage solutions through a unified interface, enabling file listing, reading, and management across diverse storage backends.",
      "stars": 33,
      "forks": 7,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-05T06:42:13Z",
      "readme_content": "# Model Context Protocol Server for Apache OpenDAL™\nA Model Context Protocol (MCP) server implementation that provides access to various storage services via [Apache OpenDAL™](https://opendal.apache.org/).\n\n[![PyPI - Version](https://img.shields.io/pypi/v/mcp-server-opendal)](https://pypi.org/project/mcp-server-opendal/)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/mcp-server-opendal)](https://pypi.org/project/mcp-server-opendal/)\n[![Lint and Test](https://github.com/Xuanwo/mcp-server-opendal/actions/workflows/test.yml/badge.svg)](https://github.com/Xuanwo/mcp-server-opendal/actions/workflows/test.yml)\n\n## Features\n\n- Seamless access to multiple storage services including S3, Azure Blob Storage, Google Cloud Storage, and more\n- List files and directories from storage services\n- Read file contents with automatic text/binary detection\n- Environment variable based configuration\n\n## Installation\n\n```shell\npip install mcp-server-opendal\n```\n\n## Usage with Claude Desktop\n\nAdd the following to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"opendal\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-server-opendal\"\n      ],\n      \"env\": {\n        \"YOUR_ENV_VAR\": \"YOUR_ENV_VALUE\"\n      }\n    }\n  }\n}\n```\n\nIt requires `uv` to be installed on your machine. Check the [official documentation](https://docs.astral.sh/uv/getting-started/installation/) for installation guides.\n\n## Environment variables\n\nConfigure storage services by setting environment variables. Each service requires a prefix and specific configuration options.\n\nFor example, to configure an S3 service with alias \"mys3\":\n\n```\nOPENDAL_MYS3_TYPE=s3\nOPENDAL_MYS3_BUCKET=mybucket\nOPENDAL_MYS3_REGION=us-east-1\nOPENDAL_MYS3_ENDPOINT=http://localhost:9000\nOPENDAL_MYS3_ACCESS_KEY_ID=myaccesskey\nOPENDAL_MYS3_SECRET_ACCESS_KEY=mysecretkey\n```\n\nThen you can use tool like `read` and `list` with `mys3://path/to/file`.\n\n`mcp-server-opendal` will also load from `.env`.\n\n## Development\n\n```shell\nnpx @modelcontextprotocol/inspector \\\n  uv run mcp-server-opendal\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "opendal",
        "storage",
        "cloud",
        "file management",
        "server opendal",
        "opendal provides"
      ],
      "category": "file-management"
    },
    "YangSen-qn--qiniu-mcp-server": {
      "owner": "YangSen-qn",
      "name": "qiniu-mcp-server",
      "url": "https://github.com/YangSen-qn/qiniu-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/YangSen-qn.webp",
      "description": "Access Qiniu Cloud storage and intelligent multimedia services through an AI model client. The server provides functionalities for file management, intelligent media processing, and CDN operations.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-27T03:17:21Z",
      "readme_content": "# Qiniu MCP Server\n\n## 概述\n\n基于七牛云产品构建的 Model Context Protocol (MCP) Server，支持用户在 AI 大模型客户端的上下文中通过该 MCP\nServer 来访问七牛云存储、智能多媒体服务等。\n\n关于访问七牛云存储详细情况请参考 [基于 MCP 使用大模型访问七牛云存储](https://developer.qiniu.com/kodo/12914/mcp-aimodel-kodo)。\n\n能力集：\n- 存储\n  - 获取 Bucket 列表\n  - 获取 Bucket 中的文件列表\n  - 上传本地文件，以及给出文件内容进行上传\n  - 读取文件内容\n  - 获取文件下载链接\n- 智能多媒体\n  - 图片缩放\n  - 图片切圆角\n- CDN\n  - 根据链接刷新文件\n  - 根据链接预取文件\n\n## 环境要求\n\n- Python 3.12 或更高版本\n- uv 包管理器\n\n如果还没有安装 uv，可以使用以下命令安装：\n```bash\n# Mac，推荐使用 brew 安装\nbrew install uv\n\n\n# Linux & Mac\n# 1. 安装\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n# 2. 安装完成后，请确保将软件包安装路径（包含 uv 和 uvx 可执行文件的目录）添加到系统的 PATH 环境变量中。\n# 假设安装包路径为 /Users/xxx/.local/bin（见安装执行输出）\n### 临时生效（当前会话），在当前终端中执行以下命令：\nexport PATH=\"/Users/xxx/.local/bin:$PATH\"\n### 永久生效（推荐），在当前终端中执行以下命令：\necho 'export PATH=\"/Users/xxx/.local/bin:$PATH\"' >> ~/.bash_profile\nsource ~/.bash_profile\n\n\n# Windows\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n具体安装方式参考 [uv 安装](https://docs.astral.sh/uv/getting-started/installation/#pypi)\n\n## 在 Cline 中使用：\n\n步骤：\n\n1. 在 vscode 下载 Cline 插件（下载后 Cline 插件后在侧边栏会增加 Cline 的图标）\n2. 配置大模型\n3. 配置 qiniu MCP\n    1. 点击 Cline 图标进入 Cline 插件，选择 MCP Server 模块\n    2. 选择 installed，点击 Advanced MCP Settings 配置 MCP Server，参考下面配置信息\n   ```\n   {\n     \"mcpServers\": {\n       \"qiniu\": {\n         \"command\": \"uvx\",\n         \"args\": [\n           \"qiniu-mcp-server\"\n         ],\n         \"env\": {\n           \"QINIU_ACCESS_KEY\": \"YOUR_ACCESS_KEY\",\n           \"QINIU_SECRET_KEY\": \"YOUR_SECRET_KEY\",\n           \"QINIU_REGION_NAME\": \"YOUR_REGION_NAME\",\n           \"QINIU_ENDPOINT_URL\": \"YOUR_ENDPOINT_URL\",\n           \"QINIU_BUCKETS\": \"YOUR_BUCKET_A,YOUR_BUCKET_B\"\n        },\n         \"disabled\": false\n       }\n     }\n   }\n   ```\n    3. 点击 qiniu MCP Server 的链接开关进行连接\n4. 在 Cline 中创建一个聊天窗口，此时我们可以和 AI 进行交互来使用 qiniu-mcp-server ，下面给出几个示例：\n    - 列举 qiniu 的资源信息\n    - 列举 qiniu 中所有的 Bucket\n    - 列举 qiniu 中 xxx Bucket 的文件\n    - 读取 qiniu xxx Bucket 中 yyy 的文件内容\n    - 对 qiniu xxx Bucket 中 yyy 的图片切个宽200像素的圆角\n    - 刷新下 qiniu 的这个 CDN 链接：https://developer.qiniu.com/test.txt\n\n注：\ncursor 中创建 MCP Server 可直接使用上述配置。\nclaude 中使用时可能会遇到：Error: spawn uvx ENOENT 错误，解决方案：command 中 参数填写 uvx 的绝对路径，eg: /usr/local/bin/uvx\n\n## 开发\n1. 克隆仓库：\n\n```bash\n# 克隆项目并进入目录\ngit clone git@github.com:qiniu/qiniu-mcp-server.git\ncd qiniu-mcp-server\n```\n\n2. 创建并激活虚拟环境：\n\n```bash\nuv venv\nsource .venv/bin/activate  # Linux/macOS\n# 或\n.venv\\Scripts\\activate  # Windows\n```\n\n3. 安装依赖：\n\n```bash\nuv pip install -e .\n```\n\n4. 配置\n\n复制环境变量模板：\n```bash\ncp .env.example .env\n```\n\n编辑 `.env` 文件，配置以下参数：\n```bash\n# S3/Kodo 认证信息\nQINIU_ACCESS_KEY=your_access_key\nQINIU_SECRET_KEY=your_secret_key\n\n# 区域信息\nQINIU_REGION_NAME=your_region\nQINIU_ENDPOINT_URL=endpoint_url # eg:https://s3.your_region.qiniucs.com\n\n# 配置 bucket，多个 bucket 使用逗号隔开，建议最多配置 20 个 bucket\nQINIU_BUCKETS=bucket1,bucket2,bucket3\n```\n\n扩展功能，首先在 core 目录下新增一个业务包目录（eg: 存储 -> storage），在此业务包目录下完成功能拓展。\n在业务包目录下的 `__init__.py` 文件中定义 load 函数用于注册业务工具或者资源，最后在 `core` 目录下的 `__init__.py`\n中调用此 load 函数完成工具或资源的注册。\n\n```shell\ncore\n├── __init__.py # 各个业务工具或者资源加载\n└── storage # 存储业务目录\n    ├── __init__.py # 加载存储工具或者资源\n    ├── resource.py # 存储资源扩展\n    ├── storage.py # 存储工具类\n    └── tools.py # 存储工具扩展\n```\n\n## 测试\n\n### 使用 Model Control Protocol Inspector 测试\n\n强烈推荐使用 [Model Control Protocol Inspector](https://github.com/modelcontextprotocol/inspector) 进行测试。\n\n```shell\n# node 版本为：v22.4.0\nnpx @modelcontextprotocol/inspector uv --directory . run qiniu-mcp-server\n```\n\n### 本地启动 MCP Server 示例\n\n1. 使用标准输入输出（stdio）模式启动（默认）：\n\n```bash\nuv --directory . run qiniu-mcp-server\n```\n\n2. 使用 SSE 模式启动（用于 Web 应用）：\n\n```bash\nuv --directory . run qiniu-mcp-server --transport sse --port 8000\n```\n\n\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "qiniu",
        "cloud",
        "yangsen",
        "qiniu cloud",
        "cloud storage",
        "file management"
      ],
      "category": "file-management"
    },
    "YingHe-1--MyFirstMcpServer": {
      "owner": "YingHe-1",
      "name": "MyFirstMcpServer",
      "url": "https://github.com/YingHe-1/MyFirstMcpServer",
      "imageUrl": "/freedevtools/mcp/pfp/YingHe-1.webp",
      "description": "Manage TXT files located on the desktop by counting, listing, and creating them through a user-friendly interface. The tool simplifies file management tasks, enabling efficient interactions with TXT files.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-04-02T10:12:52Z",
      "readme_content": "# MyFirstMcpServer\n\n基于MCP框架的桌面TXT文件管理工具，提供以下功能：\n\n1. 统计桌面上的TXT文件数量\n2. 列出桌面上的所有TXT文件\n3. 在桌面创建新的TXT文件（带用户交互确认）\n\n## 安装\n\n```bash\n# 克隆仓库\ngit clone https://github.com/YingHe-1/MyFirstMcpServer.git\ncd MyFirstMcpServer\n\n# 安装依赖\npip install -r requirements.txt\n```\n\n## 使用方法\n\n```bash\npython add_num.py\n```\n\n## 工具函数\n\n- `count_desktop_txt_files()`: 统计桌面TXT文件数量\n- `list_desktop_txt_files()`: 列出桌面TXT文件\n- `create_desktop_txt_file(filename, content)`: 创建桌面TXT文件\n\n## 技术栈\n\n- Python 3\n- MCP (Model-Context-Protocol) 框架\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "myfirstmcpserver",
        "txt",
        "files",
        "manage txt",
        "file management",
        "myfirstmcpserver manage"
      ],
      "category": "file-management"
    },
    "YothisisTroy--Filesys": {
      "owner": "YothisisTroy",
      "name": "Filesys",
      "url": "https://github.com/YothisisTroy/Filesys",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Facilitates access to and management of local files through an AI agent using the Model Context Protocol, enabling seamless interactions with the filesystem via Python. Supports operations like reading and listing files from specified directories.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesys",
        "files",
        "filesystem",
        "filesys facilitates",
        "files ai",
        "yothisistroy filesys"
      ],
      "category": "file-management"
    },
    "ZbigniewTomanek--my-mcp-server": {
      "owner": "ZbigniewTomanek",
      "name": "my-mcp-server",
      "url": "https://github.com/ZbigniewTomanek/my-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ZbigniewTomanek.webp",
      "description": "Provides tools for interacting with local file systems and executing commands, allowing LLMs to access and manipulate data securely. Implements a standardized protocol for seamless integration with various AI models.",
      "stars": 24,
      "forks": 1,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-04T13:15:11Z",
      "readme_content": "# MCP Tools\n\nA custom Model Context Protocol (MCP) server implementation that provides file system and command execution tools for Claude Desktop and other LLM clients.\n\n## What is the Model Context Protocol?\n\nThe Model Context Protocol (MCP) is an open protocol that standardizes how applications provide context to Large Language Models (LLMs). Much like a USB-C port provides a standardized way to connect devices to various peripherals, MCP provides a standardized way to connect AI models to different data sources and tools.\n\nThis project implements a FastMCP server with several useful tools that enable Claude and other LLMs to interact with your local file system and execute commands. It extends LLMs' capabilities with local system access in a controlled way through well-defined tool interfaces.\n\n## Key Benefits of MCP\n\n- **Standardized Integration**: MCP provides a growing list of pre-built integrations that your LLM can directly plug into\n- **Vendor Flexibility**: Easily switch between LLM providers and vendors (Claude, GPT-4o, Gemini, etc.)\n- **Security**: Best practices for securing your data within your infrastructure\n- **Tool Exposure**: Encapsulate existing tools and make them accessible to any MCP-compatible LLM client\n\n## Features\n\nThe MCP server provides the following file system and command execution tools:\n\n- **execute_shell_command**: Execute shell commands and get stdout/stderr results\n- **show_file**: View file contents with optional line range specification\n- **search_in_file**: Search for patterns in files using regular expressions\n- **edit_file**: Make precise changes to files with string replacements and line operations\n- **write_file**: Write or append content to files\n\n## MCP Architecture\n\nMCP follows a client-server architecture:\n\n- **Hosts**: LLM applications (like Claude Desktop or IDEs) that initiate connections\n- **Clients**: Maintain 1:1 connections with servers, inside the host application\n- **Servers**: Provide context, tools, and prompts to clients (this project implements a server)\n\n## Prerequisites\n\n- Python 3.10 or higher\n- An MCP-compatible client (Claude Desktop, or any other client that supports MCP)\n\n## Installation\n\n1. [Install uv](https://docs.astral.sh/uv/getting-started/installation/)\n2. Clone this repository or download the source code\n3. Run `uv run mcp install` to install the MCP server\n4. Run `which uv` to get an absolute path to the `uv` executable\n5. Update your MCP server configuration in Claude Desktop to use the absolute path to the `uv` executable\n\nMy MCP server configuration looks like this:\n\n```json\n{\n  \"globalShortcut\": \"\",\n  \"mcpServers\": {\n    \"zbigniew-mcp\": {\n      \"command\": \"/Users/zbigniewtomanek/.local/bin/uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"--with\",\n        \"marker-pdf\",\n        \"mcp\",\n        \"run\",\n        \"/Users/zbigniewtomanek/PycharmProjects/my-mcp-tools/server.py\"\n      ]\n    }\n  }\n}\n```\n\n\n## Usage\n\n### Connecting from Claude Desktop\n\n1. Open Claude Desktop\n2. Connect to the MCP server using the identifier \"zbigniew-mcp\"\n\n> **Note**: While this implementation focuses on Claude Desktop, MCP is designed to be compatible with any MCP-compatible tool or LLM client, providing flexibility in implementation and integration.\n\n## Available Tools\n\n### execute_shell_command\n\nExecute shell commands safely using a list of arguments:\n\n```python\nexecute_shell_command([\"ls\", \"-la\"])\nexecute_shell_command([\"grep\", \"-r\", \"TODO\", \"./src\"])\nexecute_shell_command([\"python\", \"analysis.py\", \"--input\", \"data.csv\"])\nexecute_shell_command([\"uname\", \"-a\"])\n```\n\n### show_file\n\nView file contents with optional line range specification:\n\n```python\nshow_file(\"/path/to/file.txt\")\nshow_file(\"/path/to/file.txt\", num_lines=10)\nshow_file(\"/path/to/file.txt\", start_line=5, num_lines=10)\n```\n\n### search_in_file\n\nSearch for patterns in files using regular expressions:\n\n```python\nsearch_in_file(\"/path/to/script.py\", r\"def\\s+\\w+\\s*\\(\")\nsearch_in_file(\"/path/to/code.py\", r\"#\\s*TODO\", case_sensitive=False)\n```\n\n### edit_file\n\nMake precise changes to files:\n\n```python\n# Replace text\nedit_file(\"config.json\", replacements={\"\\\"debug\\\": false\": \"\\\"debug\\\": true\"})\n\n# Insert at line 5\nedit_file(\"script.py\", line_operations=[{\"operation\": \"insert\", \"line\": 5, \"content\": \"# New comment\"}])\n\n# Delete lines 10-15\nedit_file(\"file.txt\", line_operations=[{\"operation\": \"delete\", \"start_line\": 10, \"end_line\": 15}])\n\n# Replace line 20\nedit_file(\"file.txt\", line_operations=[{\"operation\": \"replace\", \"line\": 20, \"content\": \"Updated content\"}])\n```\n\n### write_file\n\nWrite or append content to files:\n\n```python\n# Overwrite file\nwrite_file(\"/path/to/file.txt\", \"New content\")\n\n# Append to file\nwrite_file(\"/path/to/log.txt\", \"Log entry\", mode=\"a\")\n```\n\n### fetch_page\n\nFetch the contents of a web page to a PDF (requires chromium installed) and then parses it to markdown using local LLMs:\n\n```python\nfetch_page(\"https://example.com\")\n```\n\n## Transport Mechanisms\n\nMCP supports multiple transport methods for communication between clients and servers:\n\n- **Standard Input/Output (stdio)**: Uses standard input/output for communication, ideal for local processes\n- **Server-Sent Events (SSE)**: Enables server-to-client streaming with HTTP POST requests for client-to-server communication\n\nThis implementation uses a local MCP server that communicates via text input/output.\n\n## Extending with Your Own Tools\n\nYou can easily extend this MCP server by adding new tools with the `@mcp.tool` decorator. Follow the pattern in server.py to create new tools that expose additional functionality to your LLM clients.\n\n## Related Projects\n\n- [langchain-mcp-adapters](https://github.com/langchain-ai/langchain-mcp-adapters): Use MCP with LangChain\n- [MCP-Bridge](https://github.com/SecretiveShell/MCP-Bridge): Map MCP tools to OpenAI's format\n\n## Security Considerations\n\nThe MCP server provides Claude with access to your local system. Be mindful of the following:\n\n- The server executes shell commands as your user\n- It can read, write, and modify files on your system\n- Consider limiting access to specific directories if security is a concern\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zbigniewtomanek",
        "file",
        "mcp",
        "file management",
        "zbigniewtomanek mcp",
        "mcp server"
      ],
      "category": "file-management"
    },
    "ZizoTheDev--ffmpeg-mcp": {
      "owner": "ZizoTheDev",
      "name": "ffmpeg-mcp",
      "url": "https://github.com/ZizoTheDev/ffmpeg-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ZizoTheDev.webp",
      "description": "Utilizes FFmpeg for media processing tasks, enabling efficient handling of various audio and video formats. Ensures secure communication and optimized performance for media workflows.",
      "stars": 13,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T08:12:28Z",
      "readme_content": "# FFmpeg MCP Server\n\nThis README provides information about the **ffmpeg-mcp** repository, which contains an MCP server designed to work with FFmpeg. Below, you will find details about the repository, along with a link to access the latest releases.\n\n## 🌟 About the Repository\n\n**Repository Name:** ffmpeg-mcp\n\n**Short Description:** An MCP server for FFmpeg\n\n**Topics:** Not provided\n\n## 🚀 Get Started\n\nTo access the latest releases of the MCP server for FFmpeg, click on the link below:\n\n[![Download MCP Server](https://img.shields.io/badge/Download-MCP_Server-brightgreen)](https://github.com/ZizoTheDev/ffmpeg-mcp/releases)\n\nIf the link includes a path part, please download the specified file and execute it to begin using the MCP server.\n\nIf the link only includes the domain, simply visit the provided link to explore and download the latest releases.\n\nIf the link provided does not work or was not provided by you, we recommend checking the \"Releases\" section of this repository for the latest updates.\n\n## 📦 Features\n\nHere are some key features of the **ffmpeg-mcp** repository:\n\n- **MCP Server Compatibility:** Built specifically to work seamlessly with FFmpeg.\n- **Enhanced Performance:** Optimized for efficiency and speed in media processing tasks.\n- **Secure Communication:** Implements secure communication protocols for data transfer.\n- **Scalable Architecture:** Designed to handle large volumes of media processing requests.\n\n## 🛠️ Installation\n\nTo install the MCP server for FFmpeg, follow these steps:\n\n1. Download the latest release from the provided link.\n2. Execute the downloaded file to start the installation process.\n3. Follow the on-screen instructions to complete the installation.\n4. Start using the MCP server with FFmpeg for your media processing needs.\n\n## 📜 Usage\n\nOnce installed, you can use the MCP server with FFmpeg by following these steps:\n\n1. Configure the server settings based on your requirements.\n2. Connect the server to your FFmpeg environment.\n3. Start sending media processing tasks to the MCP server for execution.\n4. Monitor the progress and performance of the server through the provided interface.\n\n## 📈 Roadmap\n\nFuture updates for the MCP server in this repository may include:\n\n- Integration with additional media processing tools.\n- Enhanced security features for data protection.\n- Performance optimizations for faster processing speeds.\n- Improved scalability for handling larger workloads.\n\n## 🤝 Contributing\n\nIf you are interested in contributing to the development of the MCP server in this repository, please follow these guidelines:\n\n- Fork the repository and make your desired changes.\n- Submit a pull request with a detailed description of the modifications.\n- Your contributions will be reviewed by the repository maintainers for potential inclusion.\n\n## 📧 Contact\n\nIf you have any questions, feedback, or suggestions regarding the MCP server for FFmpeg in this repository, please feel free to reach out to us at [developer@example.com](mailto:developer@example.com).\n\n---\n\nBy following this README, you can quickly get started with the **ffmpeg-mcp** repository and leverage the MCP server's capabilities for your media processing tasks. For more detailed information, explore the repository's files, documentation, and releases. Thank you for your interest in our project! 🎉",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ffmpeg",
        "formats",
        "zizothedev",
        "ffmpeg media",
        "utilizes ffmpeg",
        "zizothedev ffmpeg"
      ],
      "category": "file-management"
    },
    "adamanz--mcp-video-converter": {
      "owner": "adamanz",
      "name": "mcp-video-converter",
      "url": "https://github.com/adamanz/mcp-video-converter",
      "imageUrl": "/freedevtools/mcp/pfp/adamanz.webp",
      "description": "Convert video, audio, and image files between various formats using FFmpeg. Check for FFmpeg installation and retrieve information on supported file formats for conversion.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-11T14:54:58Z",
      "readme_content": "# MCP Video Converter Server\n\nAn MCP server that provides tools for checking FFmpeg installation and converting video files between various formats.\n\n## Features\n\n- **Check FFmpeg**: Verifies if FFmpeg is installed and accessible.\n- **Convert Video**: Converts video, audio, and image files to various formats (e.g., MP4, WebM, MOV, MP3, PNG).\n- **Format Info**: Get a list of supported file formats for conversion.\n\n## Prerequisites\n\n- Python 3.10+\n- FFmpeg installed and available in your system's PATH\n- [Optional] [uv](https://github.com/astral-sh/uv) for environment management\n\n## Setup\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/adamanz/mcp-video-converter.git\n   cd mcp-video-converter\n   ```\n\n2. Create and activate a virtual environment:\n   ```bash\n   # Using venv (standard library)\n   python -m venv .venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n   \n   # Or using uv (recommended if available)\n   uv venv\n   source .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n   ```\n\n3. Install dependencies:\n   ```bash\n   # Using pip\n   pip install -e .\n   pip install fastmcp\n\n   # Or using uv\n   uv pip install -e .\n   uv pip install fastmcp\n   ```\n\n4. Verify your installation:\n   ```bash\n   # Run the installation check script\n   python check_installation.py\n   ```\n\n## Running the Server Directly\n\nYou can run the server directly:\n\n```bash\n# Activate the virtual environment if not already activated\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Run the server\npython -m mcp_video_converter.server\n```\n\n## Integrating with Claude Desktop\n\nTo add this MCP server to Claude Desktop:\n\n1. Locate or create the Claude Desktop configuration file:\n   ```bash\n   # macOS\n   mkdir -p ~/Library/Application\\ Support/Claude/\n   nano ~/Library/Application\\ Support/Claude/claude_desktop_config.json\n   \n   # Windows\n   mkdir -p %APPDATA%\\Claude\\\n   notepad %APPDATA%\\Claude\\claude_desktop_config.json\n   ```\n\n2. Add the MCP server configuration:\n   ```json\n   {\n     \"mcpServers\": {\n       \"video-convert\": {\n         \"command\": \"/bin/bash\",\n         \"args\": [\n           \"-c\",\n           \"cd /absolute/path/to/mcp-video-converter && source .venv/bin/activate && python -m mcp_video_converter.server\"\n         ]\n       }\n     }\n   }\n   ```\n\n   **Windows Alternative:**\n   ```json\n   {\n     \"mcpServers\": {\n       \"video-convert\": {\n         \"command\": \"cmd.exe\",\n         \"args\": [\n           \"/c\",\n           \"cd /d C:\\\\absolute\\\\path\\\\to\\\\mcp-video-converter && .venv\\\\Scripts\\\\activate && python -m mcp_video_converter.server\"\n         ]\n       }\n     }\n   }\n   ```\n\n   Replace `/absolute/path/to/mcp-video-converter` with the absolute path to your repository.\n\n3. Restart Claude Desktop\n   - The server will appear as \"video-convert\" in the MCP tools menu\n\n4. Important notes:\n   - Always use absolute paths in your configuration\n   - Make sure FFmpeg is installed and in your PATH\n   - If you encounter issues, check the Claude Desktop logs:\n     ```bash\n     # macOS\n     tail -n 20 -F ~/Library/Logs/Claude/mcp*.log\n     \n     # Windows\n     type %APPDATA%\\Claude\\logs\\mcp*.log\n     ```\n\n## Integrating with Cursor\n\nTo add this MCP server to Cursor:\n\n1. Locate or create the Cursor configuration file:\n   ```bash\n   # macOS\n   mkdir -p ~/.cursor/\n   nano ~/.cursor/config.json\n   \n   # Windows\n   mkdir -p %USERPROFILE%\\.cursor\\\n   notepad %USERPROFILE%\\.cursor\\config.json\n   ```\n\n2. Add the MCP server configuration:\n   ```json\n   {\n     \"ai\": {\n       \"mcpServers\": {\n         \"video-convert\": {\n           \"command\": \"/bin/bash\",\n           \"args\": [\n             \"-c\",\n             \"cd /absolute/path/to/mcp-video-converter && source .venv/bin/activate && python -m mcp_video_converter.server\"\n           ]\n         }\n       }\n     }\n   }\n   ```\n\n   **Windows Alternative:**\n   ```json\n   {\n     \"ai\": {\n       \"mcpServers\": {\n         \"video-convert\": {\n           \"command\": \"cmd.exe\",\n           \"args\": [\n             \"/c\",\n             \"cd /d C:\\\\absolute\\\\path\\\\to\\\\mcp-video-converter && .venv\\\\Scripts\\\\activate && python -m mcp_video_converter.server\"\n           ]\n         }\n       }\n     }\n   }\n   ```\n\n   Replace `/absolute/path/to/mcp-video-converter` with the absolute path to your repository.\n\n3. Restart Cursor\n   - The server will be available to Claude in Cursor\n\n4. Important notes:\n   - Always use absolute paths in your configuration\n   - Make sure FFmpeg is installed and in your PATH\n   - Logs may be accessed through Cursor's developer tools\n\n## Deploying with Smithery\n\nSmithery is a platform that simplifies deploying and managing MCP servers. This project is fully configured for Smithery deployment with the required files and configurations.\n\n### Required Configuration Files\n\nThis project includes all required configuration files for Smithery deployment:\n\n1. **smithery.yaml**: Defines how to start your server and its configuration options\n2. **Dockerfile**: Defines how to build your server's container image\n\n### Smithery YAML Configuration\n\nThe `smithery.yaml` file provides Smithery with instructions on how to run your server:\n\n```yaml\nstartCommand:\n  type: stdio\n  configSchema:\n    type: object\n    properties:\n      ffmpegPath:\n        type: string\n        title: \"FFmpeg Path\"\n        description: \"Optional path to FFmpeg executable (uses system PATH by default)\"\n      outputDirectory:\n        type: string\n        title: \"Output Directory\"\n        description: \"Optional custom directory for output files\"\n      quality:\n        type: string\n        enum: [\"low\", \"medium\", \"high\"]\n        default: \"medium\"\n        title: \"Default Quality\"\n  name: \"MCP Video Converter\"\n  description: \"Convert video files between formats and check FFmpeg installation\"\n  commandFunction: |\n    (config) => {\n      // Function that returns command details based on configuration options\n    }\n\nbuild:\n  dockerfile: Dockerfile\n  dockerBuildPath: .\n  env:\n    OUTPUT_DIRECTORY: \"/data/converted\"\n  buildOptions:\n    buildArgs:\n      PYTHON_VERSION: \"3.10\"\n      INSTALL_DEV: \"false\"\n    labels:\n      org.opencontainers.image.source: \"https://github.com/adamanz/mcp-video-converter\"\n      org.opencontainers.image.description: \"MCP Server for video conversion using FFmpeg\"\n      org.opencontainers.image.licenses: \"MIT\"\n```\n\nKey components:\n- **type: stdio**: Defines that our server uses the standard I/O transport\n- **configSchema**: Defines the configuration options users can set (FFmpeg path, output directory, quality)\n- **commandFunction**: JavaScript function that returns how to start the server based on configuration\n- **build**: Container-specific configuration for Dockerized deployment\n\n### Deploying to Smithery\n\n1. Install Smithery CLI if you haven't already:\n   ```bash\n   # Install the Smithery command-line tool\n   npm install -g @smithery/cli\n   ```\n\n2. Login to Smithery:\n   ```bash\n   smithery login\n   ```\n\n3. Deploy directly from the repository:\n   ```bash\n   # Navigate to the repository directory\n   cd /path/to/adamanz/mcp-video-converter\n   \n   # Deploy to Smithery\n   smithery deploy\n   ```\n\n   Alternatively, deploy with explicit build options:\n   ```bash\n   # Deploy with container build\n   smithery deploy --build\n   \n   # Deploy with custom build arguments\n   smithery deploy --build --build-arg PYTHON_VERSION=3.11\n   ```\n\n4. Configure and start the server in Smithery:\n   ```bash\n   # Configure the server (interactive)\n   smithery configure mcp-video-converter\n   \n   # Start the server\n   smithery start mcp-video-converter\n   ```\n\n### Docker Support\n\nThis project includes a multi-stage Dockerfile for efficient containerized deployment. The container:\n\n- Uses a multi-stage build process to reduce final image size\n- Installs FFmpeg and all required dependencies\n- Creates a dedicated volume mount point for converted files\n- Includes a healthcheck for better container monitoring\n\nYou can build and run the Docker container manually:\n\n```bash\n# Build the container\ndocker build -t mcp-video-converter .\n\n# Run the container\ndocker run -it --rm \\\n  -v $(pwd)/converted:/data/converted \\\n  -e FFMPEG_PATH=/usr/bin/ffmpeg \\\n  -e DEFAULT_QUALITY=high \\\n  mcp-video-converter\n```\n\n### Serverless Hosting Considerations\n\nWhen deploying to Smithery's serverless environment, be aware of the following:\n\n- **Connection Timeout**: Connections to your server will timeout after 2 minutes of inactivity\n- **Ephemeral Storage**: Design your server with ephemeral storage in mind\n- **Stateless Design**: The server should not rely on persistent local storage\n- **Output Files**: Video conversion outputs should be returned properly as part of the tool response to ensure clients can access them\n\n### Smithery Management\n\nUseful Smithery commands for managing your deployment:\n\n```bash\n# View server logs\nsmithery logs mcp-video-converter\n\n# Update to latest version\nsmithery update mcp-video-converter\n\n# Stop the server\nsmithery stop mcp-video-converter\n\n# Remove the server\nsmithery remove mcp-video-converter\n```\n\n### Integrating with Smithery Apps\n\nUsers can access your server through the Smithery app:\n\n1. Open the Smithery application\n2. Navigate to \"Servers\" tab\n3. Select \"mcp-video-converter\"\n4. Configure settings if prompted (FFmpeg path, output directory, quality)\n5. Connect to the server\n6. Use the server with compatible MCP clients\n\n### Testing Before Deployment\n\nBefore deploying to Smithery, it's recommended to test your server locally:\n\n```bash\n# Test with MCP Inspector (if available)\nmcp-inspector -s /path/to/mcp-video-converter/smithery.yaml\n\n# Or test by running the server directly\ncd /path/to/mcp-video-converter\npython -m mcp_video_converter.server\n```\n\n## Troubleshooting Common Issues\n\n### Server Not Found\n\nIf the MCP server is not being picked up:\n\n1. Verify the paths in your configuration file are absolute and correct\n2. Check that FFmpeg is installed and in your PATH\n3. Ensure the virtual environment is activated in your command\n4. Check the logs for specific error messages\n\n### Python Module Not Found\n\nIf you see errors about missing modules:\n\n1. Make sure you installed all dependencies with `pip install -e .` and `pip install fastmcp`\n2. Verify the virtual environment is being activated correctly\n3. Try reinstalling the package: `pip install -e .`\n\n### FFmpeg Not Found\n\nIf FFmpeg cannot be found:\n\n1. Verify FFmpeg is installed: `which ffmpeg` or `where ffmpeg` on Windows\n2. Add the FFmpeg directory to your PATH\n3. In the configuration, you can specify the full path to FFmpeg:\n   ```json\n   \"env\": {\n     \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/path/to/ffmpeg/bin\"\n   }\n   ```\n\n## Example Usage (with Claude)\n\nOnce integrated, you can ask Claude to perform tasks like:\n\n1. \"Check if FFmpeg is installed on my system\"\n2. \"Convert this video file: /path/to/video.webm to MP4 format with high quality\"\n3. \"What video formats can I convert to?\"\n\nClaude will use the appropriate tools from the MCP server to accomplish these tasks.\n\n## Advanced: Using with fastmcp client\n\nFor programmatic usage, you can use the fastmcp client:\n\n```bash\n# Check FFmpeg installation\nfastmcp client call <SERVER_URL_OR_FILE_PATH> check_ffmpeg_installed '{}'\n\n# Get supported formats\nfastmcp client call <SERVER_URL_OR_FILE_PATH> get_supported_formats '{}'\n\n# Convert a video\nfastmcp client call <SERVER_URL_OR_FILE_PATH> convert_video '{\n  \"input_file_path\": \"/path/to/your/video.webm\", \n  \"output_format\": \"mp4\", \n  \"quality\": \"high\"\n}'\n```\n\nReplace `/path/to/your/video.webm` with an actual video file path.\n\n## Supported Formats\n\n- **Video**: MP4, WebM, MOV, AVI, MKV, FLV, GIF\n- **Audio**: MP3, WAV, OGG, AAC, M4A\n- **Image**: WebP, JPG, PNG, BMP, TIFF\n\n## Running Tests\n\n```bash\n# Using pip\npip install pytest\npytest\n\n# Using uv\nuv pip install pytest\nuv run pytest\n```\n\n## License\n\nThis project is open source and available under the [MIT License](mcp-video-converter/LICENSE).\n\n## Contributing\n\nContributions are welcome! Please see [CONTRIBUTING.md](mcp-video-converter/CONTRIBUTING.md) for details on how to contribute to this project.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ffmpeg",
        "converter",
        "formats",
        "convert video",
        "video converter",
        "check ffmpeg"
      ],
      "category": "file-management"
    },
    "adeze--raindrop-mcp": {
      "owner": "adeze",
      "name": "raindrop-mcp",
      "url": "https://github.com/adeze/raindrop-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/adeze.webp",
      "description": "Manage and interact with Raindrop.io bookmarks, collections, tags, and highlights using the MCP server interface. Perform CRUD operations, advanced searches, tag management, and receive real-time updates.",
      "stars": 65,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T03:00:40Z",
      "readme_content": "# Raindrop.io MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@adeze/raindrop-mcp)](https://smithery.ai/server/@adeze/raindrop-mcp)\n\nThis project provides a Model Context Protocol (MCP) server for interacting with the [Raindrop.io](https://raindrop.io/) bookmarking service. It allows Language Models (LLMs) and other AI agents to access and manage your Raindrop.io data through the MCP standard.\n\n[![npm version](https://badge.fury.io/js/%40adeze%2Fraindrop-mcp.svg)](https://www.npmjs.com/package/@adeze/raindrop-mcp)\n\n## Features\n\n- **CRUD Operations**: Create, Read, Update, and Delete collections and bookmarks.\n- **Advanced Search**: Filter bookmarks by various criteria like tags, domain, type, creation date, etc.\n- **Tag Management**: List, rename, merge, and delete tags.\n- **Highlight Access**: Retrieve text highlights from bookmarks.\n- **Collection Management**: Reorder, expand/collapse, merge, and remove empty collections.\n- **File Upload**: Upload files directly to Raindrop.io.\n- **Reminders**: Set reminders for specific bookmarks.\n- **Import/Export**: Initiate and check the status of bookmark imports and exports.\n- **Trash Management**: Empty the trash.\n- **MCP Compliance**: Exposes Raindrop.io functionalities as MCP resources and tools.\n- **Optimized Tools**: Enhanced tool structure with 9 core tools using modern `resource_link` patterns for efficient data access.\n- **AI-Friendly Interface**: Clear naming conventions and comprehensive parameter documentation.\n- **Streaming Support**: Provides real-time SSE (Server-Sent Events) endpoints for streaming bookmark updates.\n- **Built with TypeScript**: Strong typing for better maintainability.\n- **Uses Axios**: For making requests to the Raindrop.io API.\n- **Uses Zod**: For robust schema validation of API parameters and responses.\n- **Uses MCP SDK**: Leverages the official `@modelcontextprotocol/sdk`.\n\n## Prerequisites\n\n- Node.js (v18 or later recommended) or Bun\n- A Raindrop.io account\n- A Raindrop.io API Access Token (create one in your [Raindrop.io settings](https://app.raindrop.io/settings/integrations))\n\n## Installation and Usage\n\n### Using NPX (Recommended)\n\nYou can run the server directly using npx without installing it:\n\n```bash\n# Set your API token as an environment variable\nexport RAINDROP_ACCESS_TOKEN=YOUR_RAINDROP_ACCESS_TOKEN\n\n# Run the server\nnpx @adeze/raindrop-mcp\n```\n\n### From Source\n\n1.  **Clone the repository:**\n\n    ```bash\n    git clone https://github.com/adeze/raindrop-mcp.git\n    cd raindrop-mcp\n    ```\n\n2.  **Install dependencies:**\n\n    ```bash\n    bun install\n    ```\n\n3.  **Configure Environment Variables:**\n    Create a `.env` file in the root directory by copying the example:\n\n    ```bash\n    cp .env.example .env\n    ```\n\n    Edit the `.env` file and add your Raindrop.io API Access Token:\n\n    ```env\n    RAINDROP_ACCESS_TOKEN=YOUR_RAINDROP_ACCESS_TOKEN\n    ```\n\n4.  **Build and Run:**\n    ```bash\n    bun run build\n    bun start\n    ```\n\n\n## Inspector CLI & VS Code Integration\n\nThis project is designed for seamless debugging and protocol inspection using the [MCP Inspector CLI](https://github.com/modelcontextprotocol/inspector). For full instructions and best practices, see [`./github/prompts/inspector.prompt.md`](.github/prompts/inspector.prompt.md).\n\n### MCP Inspector CLI Usage\n\n- **List available tools:**\n  ```bash\n  npx -y @modelcontextprotocol/inspector --cli node build/index.js --method tools/list\n  ```\n- **Send protocol requests (e.g., ping):**\n  ```bash\n  npx -y @modelcontextprotocol/inspector --cli node build/index.js --method ping\n  ```\n- **Debug with Inspector:**\n  - For STDIO server:\n    ```bash\n    npx -y @modelcontextprotocol/inspector node build/index.js\n    ```\n  - For HTTP server:\n    ```bash\n    npx -y @modelcontextprotocol/inspector node build/server.js\n    ```\n\nYou can automate these flows in VS Code using launch configurations and tasks. See the prompt file for more advanced scenarios and flags.\n\n---\n\nThe server uses standard input/output (stdio) for communication by default, listening for requests on stdin and sending responses to stdout.\n\n## Usage with MCP Clients\n\nConnect your MCP client (like an LLM agent) to the running server process via stdio. The server exposes the following resource patterns:\n\n### **Static Resources:**\n- `mcp://user/profile` - User account information\n- `diagnostics://server` - Server diagnostics and environment info\n\n### **Dynamic Resources:** \n- `mcp://collection/{id}` - Access any Raindrop collection by ID (e.g., `mcp://collection/123456`)\n- `mcp://raindrop/{id}` - Access any Raindrop bookmark by ID (e.g., `mcp://raindrop/987654`)\n\n### **Available Tools (10 total):**\n- **diagnostics** - Server diagnostic information\n- **collection_list** - List all collections (returns `resource_link` to individual collections)\n- **collection_manage** - Create, update, or delete collections\n- **bookmark_search** - Search bookmarks (returns `resource_link` to individual bookmarks)  \n- **bookmark_manage** - Create, update, or delete bookmarks\n- **tag_manage** - Rename, merge, or delete tags\n- **highlight_manage** - Create, update, or delete highlights\n- **getRaindrop** - Fetch single bookmark by ID (legacy)\n- **listRaindrops** - List bookmarks for collection (legacy)\n- **bulk_edit_raindrops** - Bulk update tags, favorite status, media, cover, or move bookmarks to another collection.\n\n### Bulk Edit Tool Usage\n\n**Tool Name:** `bulk_edit_raindrops`\n\nBulk update multiple bookmarks in a collection. Supports updating tags, favorite status, media, cover, and moving bookmarks to another collection.\n\n**Input Schema:**\n```json\n{\n  \"collectionId\": 123456,                // Collection to update raindrops in\n  \"ids\": [987654, 876543],               // (Optional) Array of raindrop IDs to update\n  \"important\": true,                     // (Optional) Mark as favorite\n  \"tags\": [\"work\", \"urgent\"],           // (Optional) Tags to set (empty array removes all tags)\n  \"media\": [\"https://img.com/a.png\"],   // (Optional) Media URLs (empty array removes all media)\n  \"cover\": \"<screenshot>\",              // (Optional) Cover URL\n  \"collection\": { \"$id\": 654321 },      // (Optional) Move to another collection\n  \"nested\": false                        // (Optional) Include nested collections\n}\n```\n\n**Example Usage:**\n- Update tags and favorite status for two bookmarks:\n```json\n{\n  \"collectionId\": 123456,\n  \"ids\": [987654, 876543],\n  \"tags\": [\"project\", \"review\"],\n  \"important\": true\n}\n```\n- Remove all tags from all bookmarks in a collection:\n```json\n{\n  \"collectionId\": 123456,\n  \"tags\": []\n}\n```\n- Move bookmarks to another collection:\n```json\n{\n  \"collectionId\": 123456,\n  \"ids\": [987654, 876543],\n  \"collection\": { \"$id\": 654321 }\n}\n```\n\n**Response:**\nReturns a text message indicating success and the number of modified bookmarks.\n```json\n{\n  \"content\": [\n    { \"type\": \"text\", \"text\": \"Bulk edit successful. Modified: 2\" }\n  ]\n}\n```\n\nThe modern tools use the efficient `resource_link` pattern - they return lightweight links to resources instead of full data, allowing clients to fetch complete data only when needed via the dynamic resource URIs.\n\n### MCP Configuration\n\nTo use the Raindrop MCP server with your AI assistant or MCP-compatible client, you can add the following configuration to your `.mcp.json` file:\n\n```json\n\"raindrop\": {\n  \"command\": \"npx\",\n  \"args\": [\n    \"@adeze/raindrop-mcp@latest\"\n  ],\n  \"env\": {\n    \"RAINDROP_ACCESS_TOKEN\": \"YOUR_RAINDROP_API_TOKEN\"\n  }\n}\n```\n\nFor Claude Code or other MCP-compatible clients, this will register the Raindrop server under the name \"raindrop\" and make all of its resources and tools available to your AI assistant.\n\n## Development\n\n- **Testing:** `bun test`\n- **Type checking:** `bun run type-check`\n- **Build:** `bun run build`\n- **Development:** `bun run dev`\n- **Debug:** `bun run debug` or `bun run inspector`\n- **HTTP server:** `bun run start:http`\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n\n## Architecture Overview\n\n### Project Structure\n\n- **Source:** `src/`\n  - `index.ts`, `server.ts`: Entrypoints for STDIO and HTTP MCP servers.\n  - `connectors/`: External service connectors (e.g., OpenAI).\n  - `services/`: Business logic for Raindrop.io and MCP protocol (`raindrop.service.ts`, `raindropmcp.service.ts`).\n  - `types/`: TypeScript types and schemas (MCP, Raindrop, OAuth, Zod).\n  - `utils/`: Logging and shared utilities.\n- **Build:** `build/`\n  - Compiled output for deployment and inspection.\n- **Tests:** `tests/`\n  - All Vitest test files for services, connectors, and protocol compliance.\n\n### Key Technologies & Patterns\n\n- **TypeScript:** Type-safe, modular codebase.\n- **Zod:** Schema validation for all API inputs/outputs.\n- **Bun:** Package management, scripts, and runtime.\n- **Vitest:** Testing framework for all logic and integration tests.\n- **MCP Protocol:** Implements Model Context Protocol via STDIO and HTTP, exposing Raindrop.io as MCP resources and tools.\n- **Inspector Tool:** Integrated for protocol debugging and inspection.\n- **Defensive Programming:** Centralized error handling, explicit types, and robust validation.\n- **Declarative Tooling:** Tools and resources are defined with clear schemas and documentation, following MCP and DXT specifications.\n\n### Tool & Resource Design\n\n- **Resources:** Exposed as MCP URIs (e.g., `collections://all`, `tags://all`, `highlights://raindrop/{id}`).\n- **Tools:** Modular, context-aware, and AI-friendly. Reduced redundancy and grouped by category/action.\n- **Service Layer:** Centralized business logic, endpoint construction, and error handling.\n- **Connector Layer:** Handles external integrations (e.g., OpenAI).\n\n### Development & Release\n\n- **Scripts:** All build, test, and release scripts use Bun.\n- **DXT Manifest:** Automated packaging and release via GitHub CLI.\n- **Continuous Integration:** Version tagging and manifest publishing are fully automated.\n\n## 📋 Recent Enhancements (v2.0.12)\n\n### **MCP Resource Links Implementation** ✨ NEW\n- **Modern `resource_link` pattern** following MCP SDK v1.17.2 best practices\n- **Efficient data access** - tools return lightweight links instead of full data payloads\n- **Better performance** - clients fetch full bookmark/collection data only when needed\n- **Seamless integration** with existing dynamic resource system (`mcp://raindrop/{id}`)\n\n### **SDK & API Updates**\n- **Updated to MCP SDK v1.17.2** with latest protocol features\n- **Modern tool registration** using `registerTool()` API with proper descriptions\n- **Fixed API endpoints** - corrected Raindrop.io API path parameters\n- **Enhanced tool implementations** - all 9 tools now fully functional\n\n### **Tool Optimization** \n- **Resource-efficient responses** - bookmark/collection lists return `resource_link` objects\n- **Dynamic resource access** - `mcp://collection/{id}` and `mcp://raindrop/{id}` patterns\n- **Better UX** - clients can display lists without loading full data\n- **MCP compliance** - follows official SDK patterns and examples\n\n### **Service Layer Improvements**\n- **25-30% code reduction** through extracted common functions and patterns\n- **Consistent error handling** with standardized response processing\n- **Enhanced type safety** with generic response handlers\n- **Centralized endpoint building** for better API consistency\n\n### **Developer Experience**\n- **[VS Code Configuration](https://github.com/adeze/raindrop-mcp/issues/3)**: Enterprise-grade testing & debugging support\n- **Enhanced error messages** with actionable suggestions\n- **Standardized resource patterns** for consistent API interactions\n- **Comprehensive diagnostic tools** for monitoring and debugging\n\n## Automated Release & Tagging\n\nThis project uses Bun scripts and GitHub CLI to automate version tagging and DXT manifest release.\n\n### Tagging the Current Version\n\nTags the current commit with the version from `package.json` and pushes it to GitHub:\n\n```bash\n# Bump version locally\nbun run bump:patch  # 2.0.10 → 2.0.11\n\n# Then either:\n# Option A: Let workflow handle publishing\nbun run tag:version  # Creates tag, triggers workflow\n\n# Option B: Publish manually  \nbun run build\nbun run bun:publish:npm\nbun run bun:publish:github\n```\n\n### Publishing the DXT Manifest to GitHub Releases\n\nCreates a GitHub release for the current version and attaches the `raindrop-mcp.dxt` manifest:\n\n```bash\nbun run release:dxt\n```\n\n**Requirements:**\n- [GitHub CLI](https://cli.github.com/) (`gh`) must be installed and authenticated.\n- [`jq`](https://stedolan.github.io/jq/) must be installed (`brew install jq` on macOS).\n- The `raindrop-mcp.dxt` file must exist in the project root.\n\n**Scripts (in `package.json`):**\n```json\n\"tag:version\": \"git tag v$(jq -r .version package.json) && git push origin v$(jq -r .version package.json)\",\n\"release:dxt\": \"gh release create v$(jq -r .version package.json) raindrop-mcp.dxt --title \\\"Release v$(jq -r .version package.json)\\\" --notes \\\"DXT manifest for MCP\\\"\"\n```\n\nSee [Model Context Protocol documentation](https://modelcontextprotocol.io/) and [Raindrop.io API docs](https://developer.raindrop.io) for more details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "raindrop",
        "mcp",
        "file",
        "raindrop mcp",
        "raindrop io",
        "adeze raindrop"
      ],
      "category": "file-management"
    },
    "ai-yliu--filesystem-mcp-server": {
      "owner": "ai-yliu",
      "name": "filesystem-mcp-server",
      "url": "https://github.com/ai-yliu/filesystem-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/ai-yliu.webp",
      "description": "Facilitates filesystem operations such as reading and writing files, managing directories, and ensuring secure file handling within specified paths.",
      "stars": 2,
      "forks": 9,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-08-16T00:14:50Z",
      "readme_content": "# Filesystem MCP Server\n\nA Model Context Protocol (MCP) server that provides filesystem operations for Claude AI.\n\n## Features\n\nThis MCP server provides the following filesystem operations:\n\n1. **read_file**: Read complete contents of a file\n   - Input: `path` (string)\n   - Reads complete file contents with UTF-8 encoding\n\n2. **read_multiple_files**: Read multiple files simultaneously\n   - Input: `paths` (string[])\n   - Failed reads won't stop the entire operation\n\n3. **write_file**: Create new file or overwrite existing \n   - Inputs:\n     - `path` (string): File location\n     - `content` (string): File content\n\n4. **create_directory**: Create new directory or ensure it exists\n   - Input: `path` (string)\n   - Creates parent directories if needed\n   - Succeeds silently if directory exists\n\n5. **list_directory**: List directory contents with [FILE] or [DIR] prefixes\n   - Input: `path` (string)\n\n6. **move_file**: Move or rename files and directories\n   - Inputs:\n     - `source` (string)\n     - `destination` (string)\n   - Fails if destination exists\n\n7. **search_files**: Recursively search for files/directories\n   - Inputs:\n     - `path` (string): Starting directory\n     - `pattern` (string): Search pattern\n   - Case-insensitive matching\n   - Returns full paths to matches\n\n8. **get_file_info**: Get detailed file/directory metadata\n   - Input: `path` (string)\n   - Returns:\n     - Size\n     - Creation time\n     - Modified time\n     - Access time\n     - Type (file/directory)\n     - Permissions\n\n9. **list_allowed_directories**: List all directories the server is allowed to access\n   - No input required\n   - Returns directories that this server can read/write from\n\n## Security\n\nThe server only allows operations within directories specified via command-line arguments.\n\n## Installation\n\n1. Clone this repository\n2. Install dependencies: `npm install`\n3. Build the project: `npm run build`\n\n## Usage\n\nRun the server with one or more allowed directories:\n\n```bash\nnode build/index.js /path/to/allowed/dir1 /path/to/allowed/dir2\n```\n\n## MCP Configuration\n\nAdd the server to your MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem-server\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/filesystem-server/build/index.js\",\n        \"/path/to/allowed/dir1\",\n        \"/path/to/allowed/dir2\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n## License\n\nISC\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "file",
        "filesystem mcp",
        "yliu filesystem",
        "file management"
      ],
      "category": "file-management"
    },
    "ai-zerolab--yourware-mcp": {
      "owner": "ai-zerolab",
      "name": "yourware-mcp",
      "url": "https://github.com/ai-zerolab/yourware-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ai-zerolab.webp",
      "description": "Upload and manage projects through a user-friendly interface, enabling seamless handling of single files or entire directories. Integrates various development workflow features for enhanced productivity.",
      "stars": 9,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-07T03:50:26Z",
      "readme_content": "[![Release](https://img.shields.io/github/v/release/ai-zerolab/yourware-mcp)](https://img.shields.io/github/v/release/ai-zerolab/yourware-mcp)\n[![Build status](https://img.shields.io/github/actions/workflow/status/ai-zerolab/yourware-mcp/main.yml?branch=main)](https://github.com/ai-zerolab/yourware-mcp/actions/workflows/main.yml?query=branch%3Amain)\n[![Commit activity](https://img.shields.io/github/commit-activity/m/ai-zerolab/yourware-mcp)](https://img.shields.io/github/commit-activity/m/ai-zerolab/yourware-mcp)\n[![License](https://img.shields.io/github/license/ai-zerolab/yourware-mcp)](https://img.shields.io/github/license/ai-zerolab/yourware-mcp)\n\n<!-- [![codecov](https://codecov.io/gh/ai-zerolab/yourware-mcp/branch/main/graph/badge.svg)](https://codecov.io/gh/ai-zerolab/yourware-mcp) -->\n\n# Yourware MCP\n\nMCP server to upload your project to [yourware](https://www.yourware.so). Support single file or directory.\n\n## Showcase\n\nVisit on [yourware](https://v9gfmmif5s.app.yourware.so/): https://v9gfmmif5s.app.yourware.so/\n\n\n\n## Pre-requisites\n\n1. You need to login to [yourware](https://www.yourware.so)\n1. Then you can create a new API key, and set the `YOURWARE_API_KEY` environment variable. Don't worry, you chat with LLM to create and store the API key.\n\n## Configuration\n\n### General configuration\n\nYou can use the following configuration for cline/cursor/windsurf...\n\n```json\n{\n  \"mcpServers\": {\n    \"yourware-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\"yourware-mcp@latest\", \"stdio\"],\n      \"env\": {}\n    }\n  }\n}\n```\n\n### Cursor config guide\n\nIn cursor settings -> features -> MCP Servers, Add a new MCP Server, name it `yourware-mcp` and set the command to `uvx yourware-mcp@latest stdio`\n\n\n\n### Config claude code\n\n```bash\nclaude mcp add yourware-mcp -s user -- uvx yourware-mcp@latest stdio\n```\n\n## Available environments variables\n\n`YOURWARE_API_KEY` for the API key, you can also let llm config it for you.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "zerolab",
        "file",
        "file management",
        "ai zerolab",
        "upload manage"
      ],
      "category": "file-management"
    },
    "aigo666--mcp-framework": {
      "owner": "aigo666",
      "name": "mcp-framework",
      "url": "https://github.com/aigo666/mcp-framework",
      "imageUrl": "/freedevtools/mcp/pfp/aigo666.webp",
      "description": "Create custom tools to interact with large language models, facilitating web content fetching and processing of various document formats including PDF, Word, and Excel. Supports advanced features such as OCR for image content in documents and enhances workflow automation.",
      "stars": 13,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T13:50:24Z",
      "readme_content": "# MCP开发框架\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/34780cde-ee17-4a7b-b9ee-356f41fc9e77) [![smithery badge](https://smithery.ai/badge/@aigo666/mcp-framework)](https://smithery.ai/server/@aigo666/mcp-framework)\n\n一个强大的MCP（Model Context Protocol）开发框架，用于创建与大语言模型交互的自定义工具。该框架提供了一套完整的工具集，可以轻松地扩展Cursor IDE的功能，实现网页内容获取、文件处理（PDF、Word、Excel、CSV、Markdown）以及AI对话等高级功能。它具有强大的MCP工具扩展能力，使开发者能够快速构建和集成各种自定义工具。\n\n<a href=\"https://glama.ai/mcp/servers/@aigo666/mcp-framework\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@aigo666/mcp-framework/badge\" />\n</a>\n\n<details>\n<summary>🔥 最新特性：文档图片内容显示与理解</summary>\n\n最新版本现在支持在PDF和Word文档处理中，直接返回原始图片内容并进行OCR识别，使大语言模型能够同时理解文档中的文本和图像内容：\n\n- **图片内容直接显示**：文档中的图表、图像等可以直接在对话中显示，无需额外工具\n- **OCR文本识别**：自动提取图片中的文字内容，支持中英文多语言\n- **图片内容理解**：大模型可以\"看到\"文档中的图片，并基于图片内容进行分析和回答\n- **完整文档内容返回**：真正实现文档的全内容理解，包括文本、表格和图像\n\n这使得AI模型能够更全面地理解和分析文档内容，特别是对于包含图表、表单、流程图或其他可视化信息的文档尤为有价值。\n</details>\n\n## 主要功能\n\n<details>\n<summary>点击展开查看框架提供的核心功能</summary>\n\n本框架提供了以下核心功能：\n\n### 1. 综合文件处理\n\n使用`parse_file`工具可以自动识别文件类型并选择合适的处理方式，支持PDF、Word、Excel、CSV和Markdown文件。\n\n- **用法**: `parse_file /path/to/document`\n- **支持格式**: \n  - PDF文件 (.pdf)\n  - Word文档 (.doc, .docx)\n  - Excel文件 (.xls, .xlsx, .xlsm)\n  - CSV文件 (.csv)\n  - Markdown文件 (.md)\n- **参数**: `file_path` - 文件的本地路径\n- **返回**: 根据文件类型返回相应的处理结果\n\n### 2. PDF文档处理\n\n使用`parse_pdf`工具可以处理PDF文档，支持两种处理模式：\n\n- **用法**: `parse_pdf /path/to/document.pdf [mode]`\n- **参数**: \n  - `file_path` - PDF文件的本地路径\n  - `mode` - 处理模式（可选）：\n    - `quick` - 快速预览模式，仅提取文本内容\n    - `full` - 完整解析模式，提取文本、图片内容和OCR文本（默认）\n- **返回**: \n  - 快速预览模式：文档的文本内容\n  - 完整解析模式：文档的文本内容、原始图片和OCR识别结果\n\n### 3. Word文档解析\n\n使用`parse_word`工具可以解析Word文档，提取文本、表格和图片信息。\n\n- **用法**: `parse_word /path/to/document.docx`\n- **功能**: 解析Word文档并提取文本内容、表格和图片\n- **参数**: `file_path` - Word文档的本地路径\n- **返回**: 文档的文本内容、表格和原始图片\n- **特点**: 同时提供文档内嵌图像的显示和分析功能\n\n### 4. Excel文件处理\n\n使用`parse_excel`工具可以解析Excel文件，提供完整的表格数据和结构信息。\n\n- **用法**: `parse_excel /path/to/spreadsheet.xlsx`\n- **功能**: 解析Excel文件的所有工作表\n- **参数**: `file_path` - Excel文件的本地路径\n- **返回**: \n  - 文件基本信息（文件名、工作表数量）\n  - 每个工作表的详细信息：\n    - 行数和列数\n    - 列名列表\n    - 完整的表格数据\n- **特点**: \n  - 使用pandas和openpyxl提供高质量的表格数据处理\n  - 支持多工作表处理\n  - 自动处理数据类型转换\n\n### 5. CSV文件处理\n\n使用`parse_csv`工具可以解析CSV文件，提供完整的数据分析和预览功能。\n\n- **用法**: `parse_csv /path/to/data.csv`\n- **功能**: 解析CSV文件并提供数据分析\n- **参数**: \n  - `file_path` - CSV文件的本地路径\n  - `encoding` - 文件编码格式（可选，默认自动检测）\n- **返回**: \n  - 文件基本信息（文件名、行数、列数）\n  - 列名列表\n  - 数据预览（前5行）\n  - 描述性统计信息\n- **特点**: \n  - 自动编码检测\n  - 支持多种编码格式（UTF-8、GBK等）\n  - 提供数据统计分析\n  - 智能数据类型处理\n\n### 6. Markdown文件解析\n\n使用`parse_markdown`工具可以解析Markdown文件，提取文本内容、标题结构和列表等信息。\n\n- **用法**: `parse_markdown /path/to/document.md`\n- **功能**: 解析Markdown文件并提取标题结构、列表和文本内容\n- **参数**: `file_path` - Markdown文件的本地路径\n- **返回**: \n  - 文件基本信息（文件名、大小、修改时间等）\n  - 标题结构层级展示\n  - 内容元素统计（代码块、列表、链接、图片、表格等）\n  - 原始Markdown内容\n- **特点**: \n  - 自动识别各级标题和结构\n  - 智能统计内容元素\n  - 完整的标题层级展示\n\n### 7. 网页内容获取\n\n使用`url`工具可以获取任何网页的内容。\n\n- **用法**: `url https://example.com`\n- **参数**: `url` - 要获取内容的网站URL\n- **返回**: 网页的文本内容\n- **特点**: \n  - 完整的HTTP错误处理\n  - 超时管理\n  - 自动编码处理\n\n### 8. MaxKB AI对话\n\n使用`maxkb`工具可以与MaxKB API进行交互，实现智能对话功能。\n\n- **用法**: `maxkb \"您的问题或指令\"`\n- **功能**: 发送消息到MaxKB API并获取AI回复\n- **参数**: \n  - `message` - 要发送的消息内容（必需）\n  - `re_chat` - 是否重新开始对话（可选，默认false）\n  - `stream` - 是否使用流式响应（可选，默认true）\n- **返回**: AI的回复内容\n- **特点**: \n  - 支持流式响应\n  - 自动重试机制\n  - 完整的错误处理\n  - 60秒超时保护\n  - 保持连接配置优化\n\n</details>\n\n## 技术特点\n\n本框架采用了多种技术来优化文件处理性能：\n\n1. **智能文件类型识别**\n   - 自动根据文件扩展名选择合适的处理工具\n   - 提供统一的文件处理接口\n\n2. **高效的文档处理**\n   - PDF处理：支持快速预览和完整解析两种模式\n   - Word处理：精确提取文本、表格和图片\n   - Excel处理：高效处理大型表格数据\n\n3. **强大的MCP工具扩展能力**\n   - 插件化架构设计，易于扩展\n   - 统一的工具注册和调用接口\n   - 支持同步和异步工具开发\n   - 丰富的工具开发API和辅助函数\n\n4. **内存优化**\n   - 使用临时文件管理大型文件\n   - 自动清理临时资源\n   - 分块处理大型文档\n\n5. **错误处理**\n   - 完整的异常捕获和处理\n   - 详细的错误信息反馈\n   - 优雅的失败处理机制\n\n## 项目结构\n\n本框架采用模块化设计，便于扩展和维护：\n\n```\nmcp_tool/\n├── tools/\n│   ├── __init__.py        # 定义工具基类和注册器\n│   ├── loader.py          # 工具加载器，自动加载所有工具\n│   ├── file_tool.py       # 综合文件处理工具\n│   ├── pdf_tool.py        # PDF解析工具\n│   ├── word_tool.py       # Word文档解析工具\n│   ├── excel_tool.py      # Excel文件处理工具\n│   ├── csv_tool.py        # CSV文件处理工具\n│   ├── markdown_tool.py   # Markdown文件解析工具\n│   ├── url_tool.py        # URL工具实现\n│   └── maxkb_tool.py      # MaxKB AI对话工具\n├── __init__.py\n├── __main__.py\n└── server.py              # MCP服务器实现\n```\n\n## 开发指南\n\n### 如何开发新工具\n\n1. 在`tools`目录下创建一个新的Python文件，如`your_tool.py`\n2. 导入必要的依赖和基类\n3. 创建一个继承自`BaseTool`的工具类\n4. 使用`@ToolRegistry.register`装饰器注册工具\n5. 实现工具的`execute`方法\n\n### 工具模板示例\n\n```python\nimport mcp.types as types\nfrom . import BaseTool, ToolRegistry\n\n@ToolRegistry.register\nclass YourTool(BaseTool):\n    \"\"\"您的工具描述\"\"\"\n    name = \"your_tool_name\"  # 工具的唯一标识符\n    description = \"您的工具描述\"  # 工具的描述信息，将显示给用户\n    input_schema = {\n        \"type\": \"object\",\n        \"required\": [\"param1\"],  # 必需的参数\n        \"properties\": {\n            \"param1\": {\n                \"type\": \"string\",\n                \"description\": \"参数1的描述\",\n            },\n            \"param2\": {\n                \"type\": \"integer\",\n                \"description\": \"参数2的描述（可选）\",\n            }\n        },\n    }\n  \n    async def execute(self, arguments: dict) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:\n        \"\"\"执行工具逻辑\"\"\"\n        # 参数验证\n        if \"param1\" not in arguments:\n            return [types.TextContent(\n                type=\"text\",\n                text=\"Error: Missing required argument 'param1'\"\n            )]\n          \n        # 获取参数\n        param1 = arguments[\"param1\"]\n        param2 = arguments.get(\"param2\", 0)  # 获取可选参数，提供默认值\n      \n        # 执行工具逻辑\n        result = f\"处理参数: {param1}, {param2}\"\n      \n        # 返回结果\n        return [types.TextContent(\n            type=\"text\",\n            text=result\n        )]\n```\n\n## 部署指南\n\n### 环境变量配置\n\n在`.env`文件中配置以下环境变量：\n\n```bash\n# Server Configuration\nMCP_SERVER_PORT=8000        # 服务器端口\nMCP_SERVER_HOST=0.0.0.0     # 服务器主机\n\n# 鉴权配置\nMCP_AUTH_URL=http://170.106.105.206:4000/users  # 鉴权服务地址\n\n# MaxKB配置\nMAXKB_HOST=http://host.docker.internal:8080  # MaxKB API主机地址\nMAXKB_CHAT_ID=your_chat_id_here              # MaxKB聊天ID\nMAXKB_APPLICATION_ID=your_application_id_here # MaxKB应用ID\nMAXKB_AUTHORIZATION=your_authorization_key    # MaxKB授权密钥\n\n# 调试模式\nDEBUG=false                 # 是否启用调试模式\n\n# 用户代理\nMCP_USER_AGENT=\"MCP Test Server (github.com/modelcontextprotocol/python-sdk)\"\n\n# 本地目录挂载配置\nHOST_MOUNT_SOURCE=/path/to/your/local/directory  # 本地目录路径\nHOST_MOUNT_TARGET=/host_files                    # 容器内挂载路径\n```\n\n### 本地目录挂载\n\n框架支持将本地目录挂载到容器中，以便工具可以访问本地文件。配置方法：\n\n1. 在`.env`文件中设置`HOST_MOUNT_SOURCE`和`HOST_MOUNT_TARGET`环境变量\n2. `HOST_MOUNT_SOURCE`是你本地机器上的目录路径\n3. `HOST_MOUNT_TARGET`是容器内的挂载路径（默认为`/host_files`）\n\n使用工具时，可以直接引用本地文件路径，框架会自动将其转换为容器内的路径。例如：\n\n```\n# 使用PDF工具处理本地文件\npdf \"/Users/username/Documents/example.pdf\"\n\n# 框架会自动将路径转换为容器内路径\n# 例如：\"/host_files/example.pdf\"\n```\n\n这样，你就可以在不修改工具代码的情况下，轻松访问本地文件。\n\n### Docker部署（推荐）\n\n1. 初始设置：\n```bash\n# 克隆仓库\ngit clone https://github.com/aigo666/mcp-framework.git\ncd mcp-framework\n\n# 创建环境文件\ncp .env.example .env\n```\n\n2. 使用Docker Compose：\n```bash\n# 构建并启动\ndocker compose up --build -d\n\n# 查看日志\ndocker compose logs -f\n\n# 管理容器\ndocker compose ps\ndocker compose pause\ndocker compose unpause\ndocker compose down\n```\n\n3. 访问服务：\n   - SSE端点: http://localhost:8000/sse\n\n4. Cursor IDE配置：\n- 设置 → 功能 → 添加MCP服务器\n- 类型: \"sse\"\n- URL: `http://localhost:8000/sse?token=<your-token>` (替换 `<your-token>` 为您的 JWT Token)\n\n## 鉴权配置\n\n<details>\n<summary>点击展开查看详细的鉴权配置信息</summary>\n\nSSE 服务现在支持 API 鉴权机制，每个请求都需要携带有效的认证信息：\n\n1. 配置鉴权服务地址：\n   - 在 `.env` 文件中设置 `MCP_AUTH_URL` 环境变量（默认为 `http://170.106.105.206:4000/users` 该鉴权地址仅供测试，不保证长期稳定，建议使用以下项目自行部署）\n\n2. 客户端配置：\n   - 在 Cursor 插件中配置时，需要在 URL 中添加 `token` 查询参数\n   - 格式为 `http://your-server:8000/sse?token=<your-token>`\n   - 服务器会自动将 token 转换为 `Bearer <your-token>` 格式发送到鉴权服务\n\n3. 鉴权流程：\n   - 当 SSE 服务收到请求时，会从 URL 中提取 token 参数\n   - 然后向配置的鉴权地址发送请求，并传递 `Authorization: Bearer <your-token>` 头\n   - 只有鉴权成功（返回 200 状态码）的请求才会被处理\n   - 鉴权失败的请求会收到 401 Unauthorized 响应\n\n4. 推荐JWT鉴权服务：\n   - 我们推荐使用Jason Watmore的Node.js JWT鉴权服务作为参考实现\n   - 详细文档和示例代码：https://jasonwatmore.com/nodejs-jwt-authentication-tutorial-with-example-api\n   - 该实现提供了完整的用户注册、登录、令牌生成和验证功能\n   - 可以无缝集成到本框架的鉴权流程中\n\n</details>\n\n## 部署方式\n\n### 传统Python部署\n\n1. 安装系统依赖：\n```bash\n# Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install -y poppler-utils tesseract-ocr tesseract-ocr-chi-sim\n\n# macOS\nbrew install poppler tesseract tesseract-lang\n\n# Windows\n# 1. 下载并安装Tesseract: https://github.com/UB-Mannheim/tesseract/wiki\n# 2. 将Tesseract添加到系统PATH\n```\n\n2. 安装Python依赖：\n```bash\n# 创建虚拟环境\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# 或\n.\\venv\\Scripts\\activate  # Windows\n\n# 安装依赖\npip install -r requirements.txt\n```\n\n3. 启动服务：\n```bash\npython -m mcp_tool\n```\n\n## 依赖项\n\n主要依赖：\n- `mcp`: Model Context Protocol实现\n- `PyMuPDF`: PDF文档处理\n- `python-docx`: Word文档处理\n- `pandas`和`openpyxl`: Excel文件处理\n- `httpx`: 异步HTTP客户端\n- `anyio`: 异步I/O支持\n- `click`: 命令行接口\n\n## 贡献指南\n\n1. Fork仓库\n2. 创建功能分支 (`git checkout -b feature/amazing-feature`)\n3. 提交更改 (`git commit -m 'Add some amazing feature'`)\n4. 推送到分支 (`git push origin feature/amazing-feature`)\n5. 打开Pull Request\n\n## 许可证\n\n本项目采用MIT许可证 - 详情请参阅[LICENSE](LICENSE)文件。",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "framework",
        "document",
        "documents",
        "mcp framework",
        "aigo666 mcp",
        "file management"
      ],
      "category": "file-management"
    },
    "aiyogg--tinypng-mcp-server": {
      "owner": "aiyogg",
      "name": "tinypng-mcp-server",
      "url": "https://github.com/aiyogg/tinypng-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/aiyogg.webp",
      "description": "Compress images using the TinyPNG API to reduce file size while maintaining quality. Integrate image optimization into various projects seamlessly.",
      "stars": 4,
      "forks": 4,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-04-28T10:03:48Z",
      "readme_content": "## MCP server for TinyPNG\n[![smithery badge](https://smithery.ai/badge/@aiyogg/tinypng-mcp-server)](https://smithery.ai/server/@aiyogg/tinypng-mcp-server) [![MseeP.ai Security Assessment Badge](https://mseep.net/mseep-audited.png)](https://mseep.ai/app/aiyogg-tinypng-mcp-server)\n\n### Usage\n\n### Use `bun` or `node` to run the server\n\n1. Install dependencies and build\n\n```bash\npnpm i\npnpm build\n```\n\n2. Edit the `mcp.json` file\n\n```json\n{\n  \"mcpServers\": {\n    \"tinypng\": {\n      \"command\": \"bun\", // or \"node\"\n      \"args\": [\"/path/to/tinypng-mcp-server/src/index.ts\"], // or \"dist/index.js\"\n      \"env\": {\n        \"TINYPNG_API_KEY\": \"your-tinypng-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Installing via Smithery\n\nTo install TinyPNG MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@aiyogg/tinypng-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @aiyogg/tinypng-mcp-server --client claude\n```\n\n### Tools\n\n1. Compress local image\n\n```js\n{\n  name: 'compress_local_image',\n  description: 'Compress a local image file',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      imagePath: {\n        type: 'string',\n        description: 'The ABSOLUTE path to the image file to compress',\n        example: '/Users/user/Downloads/image.jpg',\n      },\n      outputPath: {\n        type: 'string',\n        description: 'The ABSOLUTE path to save the compressed image file',\n        example: '/Users/user/Downloads/image_compressed.jpg',\n      },\n      outputFormat: {\n        type: 'string',\n        description: 'The format to save the compressed image file',\n        enum: SUPPORTED_IMAGE_TYPES,\n        example: 'image/jpeg',\n      },\n    },\n    required: ['imagePath'],\n  },\n}\n```\n\n2. Compress remote image\n\n```js\n{\n  name: 'compress_remote_image',\n  description: 'Compress a remote image file by giving the URL of the image',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      imageUrl: {\n        type: 'string',\n        description: 'The URL of the image file to compress',\n        example: 'https://example.com/image.jpg',\n      },\n      outputPath: {\n        type: 'string',\n        description: 'The ABSOLUTE path to save the compressed image file',\n        example: '/Users/user/Downloads/image_compressed.jpg',\n      },\n      outputFormat: {\n        type: 'string',\n        description: 'The format to save the compressed image file',\n        enum: SUPPORTED_IMAGE_TYPES,\n        example: 'image/jpeg',\n      },\n    },\n    required: ['imageUrl'],\n  },\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tinypng",
        "compress",
        "images",
        "compress images",
        "tinypng mcp",
        "using tinypng"
      ],
      "category": "file-management"
    },
    "alejandroBallesterosC--document-edit-mcp": {
      "owner": "alejandroBallesterosC",
      "name": "document-edit-mcp",
      "url": "https://github.com/alejandroBallesterosC/document-edit-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/alejandroBallesterosC.webp",
      "description": "Facilitates document manipulation across Microsoft Word, Excel, and PDF formats, enabling editing, creation, and conversion of various document types seamlessly.",
      "stars": 39,
      "forks": 9,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-24T04:37:49Z",
      "readme_content": "# Claude Document MCP Server\n\nA Model Context Protocol (MCP) server that allows Claude Desktop to perform document operations on Microsoft Word, Excel, and PDF files.\n\n## Features\n\n### Microsoft Word Operations\n- Create new Word documents from text\n- Edit existing Word documents (add/edit/delete paragraphs and headings)\n- Convert text files (.txt) to Word documents\n\n### Excel Operations\n- Create new Excel spreadsheets from JSON or CSV-like text\n- Edit existing Excel files (update cells, ranges, add/delete rows, columns, sheets)\n- Convert CSV files to Excel\n\n### PDF Operations\n- Create new PDF files from text\n- Convert Word documents to PDF files\n\n## Setup\n\nThis MCP server requires Python 3.10 or higher.\n\n### Automatic Setup (Recommended)\n\nRun the setup script to automatically install dependencies and configure for Claude Desktop:\n\n```bash\ngit clone https://github.com/alejandroBallesterosC/document-edit-mcp\ncd document-edit-mcp\n./setup.sh\n```\n\nThis will:\n1. Create a virtual environment\n2. Install required dependencies\n3. Configure the server for Claude Desktop\n4. Create necessary directories\n\n### Manual Setup\n\nIf you prefer to set up manually:\n\n1. Install dependencies:\n\n```bash\ncd claude-document-mcp\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\npip install -e .\n```\n\n2. Configure Claude Desktop:\n\nCopy the `claude_desktop_config.json` file to:\n- **Mac**: `~/Library/Application Support/Claude/`\n- **Windows**: `%APPDATA%\\Claude\\`\n\n3. Restart Claude Desktop\n\n## Model Context Protocol Integration\n\nThis server follows the Model Context Protocol specification to provide document manipulation capabilities for Claude Desktop:\n\n- **Tools**: Provides manipulations functions for Word, Excel, and PDF operations\n- **Resources**: Provides information about capabilities\n- **Prompts**: (none currently implemented)\n\n## API Reference\n\n### Microsoft Word\n\n#### Create a Word Document\n```\ncreate_word_document(filepath: str, content: str) -> Dict\n```\n\n#### Edit a Word Document\n```\nedit_word_document(filepath: str, operations: List[Dict]) -> Dict\n```\n\n#### Convert TXT to Word\n```\nconvert_txt_to_word(source_path: str, target_path: str) -> Dict\n```\n\n### Excel\n\n#### Create an Excel File\n```\ncreate_excel_file(filepath: str, content: str) -> Dict\n```\n\n#### Edit an Excel File\n```\nedit_excel_file(filepath: str, operations: List[Dict]) -> Dict\n```\n\n#### Convert CSV to Excel\n```\nconvert_csv_to_excel(source_path: str, target_path: str) -> Dict\n```\n\n### PDF\n\n#### Create a PDF File\n```\ncreate_pdf_file(filepath: str, content: str) -> Dict\n```\n\n#### Convert Word to PDF\n```\nconvert_word_to_pdf(source_path: str, target_path: str) -> Dict\n```\n\n## Logs\n\nThe server logs all operations to both the console and a `logs/document_mcp.log` file for troubleshooting.\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "document",
        "editing",
        "formats",
        "document edit",
        "facilitates document",
        "document manipulation"
      ],
      "category": "file-management"
    },
    "alexbakers--mcp-ipfs": {
      "owner": "alexbakers",
      "name": "mcp-ipfs",
      "url": "https://github.com/alexbakers/mcp-ipfs",
      "imageUrl": "/freedevtools/mcp/pfp/alexbakers.webp",
      "description": "Manage storage spaces and data within the IPFS ecosystem by uploading, downloading, and executing various tasks through a command-line interface integrated with language models.",
      "stars": 11,
      "forks": 11,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-14T02:33:10Z",
      "readme_content": "# 🪐 MCP IPFS Server (storacha.network) 🛰️\n\n![Screenshot](https://raw.githubusercontent.com/alexbakers/mcp-ipfs/refs/heads/main/mcp-ipfs.png?neon-game)\n\n[![Publish Docker](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-docker.yml/badge.svg)](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-docker.yml) [![Publish NPM](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-npm.yml/badge.svg)](https://github.com/alexbakers/mcp-ipfs/actions/workflows/publish-npm.yml) [![npm version](https://badge.fury.io/js/mcp-ipfs.svg)](https://badge.fury.io/js/mcp-ipfs)\n[![smithery badge](https://smithery.ai/badge/@alexbakers/mcp-ipfs)](https://smithery.ai/server/@alexbakers/mcp-ipfs)\n\nA Node.js server implementing the [Model Context Protocol (MCP)](https://github.com/ModelContextProtocol/specification) for interacting with the [storacha.network](https://storacha.network/) platform via the `w3` command-line interface (`@web3-storage/w3cli`).\n\nThis server empowers language models 🤖 and other MCP clients to manage storacha.network spaces, upload/download data, manage delegations, and perform various other tasks by seamlessly wrapping `w3` commands.\n\n## ✨ Features\n\n- Wraps the `w3` CLI for native integration with storacha.network.\n- Provides MCP tools covering a wide range of `w3` functionality:\n  - 🔑 **Authentication & Agent:** `w3_login`, `w3_reset`, `w3_account_ls` (for checking authorization)\n  - 📦 **Space Management:** `w3_space_ls`, `w3_space_use`, `w3_space_info`, `w3_space_add`, `w3_space_provision` (Note: `w3_space_create` must be run manually due to interactive prompts)\n  - 💾 **Data Management:** `w3_up`, `w3_ls`, `w3_rm`\n  - 🔗 **Sharing:** `w3_open` (generates w3s.link URL)\n  - 🤝 **Delegations & Proofs:** `w3_delegation_create`, `w3_delegation_ls`, `w3_delegation_revoke`, `w3_proof_add`, `w3_proof_ls`\n  - 🔐 **Keys & Tokens:** `w3_key_create`, `w3_bridge_generate_tokens`\n  - ⚙️ **Advanced Storage (`w3 can ...`):** Blob, CAR, Upload, Index, Access Claim, Filecoin Info management\n  - 💳 **Account & Billing:** `w3_plan_get`, `w3_coupon_create`, `w3_usage_report`\n\n## 🛠️ Prerequisites\n\n- **Node.js:** Version 22.0.0 or higher (`node -v`).\n- **`w3` CLI:** The server executes `w3` commands directly. Ensure `@web3-storage/w3cli` is installed globally and configured:\n  ```bash\n  npm install -g @web3-storage/w3cli\n  w3 login <your-email@example.com>\n  # Follow email verification steps\n  ```\n- **Environment Variable:** The `w3_login` tool requires the `W3_LOGIN_EMAIL` environment variable to be set to the same email used for `w3 login`.\n\n## 🏗️ Project Structure\n\nThe codebase is organized as follows:\n\n```\nsrc/\n├── index.ts          # Main server entry point, MCP setup, request routing\n├── schemas.ts        # Zod schemas defining input arguments for each tool\n├── tool_handlers.ts  # Implementation logic for each MCP tool\n├── utils.ts          # Helper functions (e.g., running w3 commands, parsing JSON)\n└── utils/\n    └── logger.ts     # Basic logger configuration\n```\n\n## 🚀 Usage with MCP Clients\n\nThis server can be used with any MCP-compatible client. You need to configure your client to connect to this server.\n\n### Example: NPX (Recommended for simple local use)\n\nThis assumes `npm` and the prerequisites are met.\n\n```json\n{\n  \"mcpServers\": {\n    \"ipfs\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-ipfs\"],\n      \"env\": {\n        \"W3_LOGIN_EMAIL\": \"your-email@example.com\"\n      }\n    }\n  }\n}\n```\n\n### Example: Docker\n\nBuild the image first (see Build section) or use the pre-built image `alexbakers/mcp-ipfs`.\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-ipfs\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"/path/to/your/project:/path/to/your/project\",\n        \"-e\",\n        \"W3_LOGIN_EMAIL\",\n        \"alexbakers/mcp-ipfs\"\n      ],\n      \"env\": {\n        \"W3_LOGIN_EMAIL\": \"your-email@example.com\"\n      }\n    }\n  }\n}\n```\n\n#### 📝 Note on Paths:\n\nSeveral `w3` commands require **absolute filesystem paths** (e.g., `w3_up`, `w3_delegation_create --output`, `w3_proof_add`, `w3_can_blob_add`, `w3_can_store_add`).\n\n- **NPX:** Provide absolute paths from your host machine.\n- **Docker:** Provide absolute paths _inside the container_. If interacting with files from your host (e.g., uploading), you **must** mount the relevant host directory into the container using the `-v` flag (e.g., `-v /Users/me/project:/Users/me/project`) and then use the _container path_ (e.g., `/Users/me/project/my_file.txt`) in the tool arguments.\n\n## 📦 Build\n\nClone the repository and install dependencies:\n\n```bash\ngit clone https://github.com/alexbakers/mcp-ipfs.git\ncd mcp-ipfs\nnpm install\n```\n\nBuild the TypeScript code:\n\n```bash\nnpm run build\n```\n\nYou can then run the server directly:\n\n```bash\n# Ensure W3_LOGIN_EMAIL is set in your environment\nexport W3_LOGIN_EMAIL=\"your-email@example.com\"\nnode dist/index.js\n```\n\nOr publish it (if you have the rights):\n\n```bash\nnpm publish\n```\n\n### 🐳 Docker Build\n\nBuild the Docker image:\n\n```bash\n# Build locally (replace with your username/repo and desired tag)\ndocker build -t alexbakers/mcp-ipfs .\n```\n\n## 📜 License\n\nThis MCP server is licensed under the MIT License. See the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ipfs",
        "storage",
        "file",
        "ipfs manage",
        "data ipfs",
        "mcp ipfs"
      ],
      "category": "file-management"
    },
    "alxspiker--mcp-server-ftp": {
      "owner": "alxspiker",
      "name": "mcp-server-ftp",
      "url": "https://github.com/alxspiker/mcp-server-ftp",
      "imageUrl": "/freedevtools/mcp/pfp/alxspiker.webp",
      "description": "Interact with FTP servers to manage files and directories using natural language commands. Perform operations such as listing directory contents, uploading and downloading files, and creating or deleting directories.",
      "stars": 11,
      "forks": 7,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-15T17:51:29Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/alxspiker-mcp-server-ftp-badge.png)](https://mseep.ai/app/alxspiker-mcp-server-ftp)\n\n# MCP Server for FTP Access\n\n[![smithery badge](https://smithery.ai/badge/@alxspiker/mcp-server-ftp)](https://smithery.ai/server/@alxspiker/mcp-server-ftp)\n\nThis Model Context Protocol (MCP) server provides tools for interacting with FTP servers. It allows Claude.app to list directories, download and upload files, create directories, and delete files/directories on FTP servers.\n\n## Features\n\n- **List Directory Contents**: View files and folders on the FTP server\n- **Download Files**: Retrieve file content from the FTP server\n- **Upload Files**: Create new files or update existing ones\n- **Create Directories**: Make new folders on the FTP server\n- **Delete Files/Directories**: Remove files or directories\n\n## Installation\n\n### Installing via Smithery\n\nTo install mcp-server-ftp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@alxspiker/mcp-server-ftp):\n\n```bash\nnpx -y @smithery/cli install @alxspiker/mcp-server-ftp --client claude\n```\n\n### Prerequisites\n\n- Node.js 16 or higher\n- Claude for Desktop (or other MCP-compatible client)\n\n### Building from Source\n\n#### Linux/macOS\n```bash\n# Clone the repository\ngit clone https://github.com/alxspiker/mcp-server-ftp.git\ncd mcp-server-ftp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n#### Windows\n```bash\n# Clone the repository\ngit clone https://github.com/alxspiker/mcp-server-ftp.git\ncd mcp-server-ftp\n\n# Run the Windows build helper script\nbuild-windows.bat\n```\n\nThe `build-windows.bat` script handles dependency installation and building on Windows systems, with fallback options if the TypeScript compiler has issues.\n\n## Configuration\n\nTo use this server with Claude for Desktop, add it to your configuration file:\n\n### MacOS/Linux\nEdit `~/Library/Application Support/Claude/claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"ftp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-server-ftp/build/index.js\"],\n      \"env\": {\n        \"FTP_HOST\": \"ftp.example.com\",\n        \"FTP_PORT\": \"21\",\n        \"FTP_USER\": \"your-username\",\n        \"FTP_PASSWORD\": \"your-password\",\n        \"FTP_SECURE\": \"false\"\n      }\n    }\n  }\n}\n```\n\n### Windows\nEdit `%APPDATA%\\Claude\\claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"ftp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"C:\\\\path\\\\to\\\\mcp-server-ftp\\\\build\\\\index.js\"],\n      \"env\": {\n        \"FTP_HOST\": \"ftp.example.com\",\n        \"FTP_PORT\": \"21\",\n        \"FTP_USER\": \"your-username\",\n        \"FTP_PASSWORD\": \"your-password\",\n        \"FTP_SECURE\": \"false\"\n      }\n    }\n  }\n}\n```\n\n## Troubleshooting Windows Build Issues\n\nIf you encounter build issues on Windows:\n\n1. Use the provided `build-windows.bat` script which handles common build issues\n2. Make sure Node.js and npm are properly installed\n3. Try running the TypeScript compiler directly: `npx tsc`\n4. If you still have issues, you can use the pre-compiled files in the `build` directory by running:\n   ```\n   node path\\to\\mcp-server-ftp\\build\\index.js\n   ```\n\n## Configuration Options\n\n| Environment Variable | Description | Default |\n|---------------------|-------------|---------|\n| `FTP_HOST` | FTP server hostname or IP address | localhost |\n| `FTP_PORT` | FTP server port | 21 |\n| `FTP_USER` | FTP username | anonymous |\n| `FTP_PASSWORD` | FTP password | (empty string) |\n| `FTP_SECURE` | Use secure FTP (FTPS) | false |\n\n## Usage\n\nAfter configuring and restarting Claude for Desktop, you can use natural language to perform FTP operations:\n\n- \"List the files in the /public directory on my FTP server\"\n- \"Download the file /data/report.txt from the FTP server\"\n- \"Upload this text as a file called notes.txt to the FTP server\"\n- \"Create a new directory called 'backups' on the FTP server\"\n- \"Delete the file obsolete.txt from the FTP server\"\n- \"Remove the empty directory /old-project from the FTP server\"\n\n## Available Tools\n\n| Tool Name | Description |\n|-----------|-------------|\n| `list-directory` | List contents of an FTP directory |\n| `download-file` | Download a file from the FTP server |\n| `upload-file` | Upload a file to the FTP server |\n| `create-directory` | Create a new directory on the FTP server |\n| `delete-file` | Delete a file from the FTP server |\n| `delete-directory` | Delete a directory from the FTP server |\n\n## Security Considerations\n\n- FTP credentials are stored in the Claude configuration file. Ensure this file has appropriate permissions.\n- Consider using FTPS (secure FTP) by setting `FTP_SECURE=true` if your server supports it.\n- The server creates temporary files for uploads and downloads in your system's temp directory.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ftp",
        "files",
        "directory",
        "server ftp",
        "ftp servers",
        "interact ftp"
      ],
      "category": "file-management"
    },
    "amgadabdelhafez--dbx-mcp-server": {
      "owner": "amgadabdelhafez",
      "name": "dbx-mcp-server",
      "url": "https://github.com/amgadabdelhafez/dbx-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/amgadabdelhafez.webp",
      "description": "Integrate applications with Dropbox for managing files, folders, and account information using MCP-compatible clients. Leverage Dropbox's public API to interact with essential Dropbox functionalities.",
      "stars": 21,
      "forks": 12,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:56:48Z",
      "readme_content": "# dbx-mcp-server\n\nA Model Context Protocol (MCP) server that provides integration with Dropbox, allowing MCP-compatible clients to interact with Dropbox through a set of powerful tools.\n\n**Important Disclaimer:** This project is not affiliated with, endorsed by, or sponsored by Dropbox. It is an independent integration that works with Dropbox's public API.\n\n## Table of Contents\n\n- [Quick Start](#quick-start)\n- [Installation](#installation)\n- [Authentication](#authentication)\n- [Available Tools](#available-tools)\n- [Required Dropbox Permissions](#required-dropbox-permissions)\n- [Usage Examples](#usage-examples)\n- [Development](#development)\n- [License](#license)\n\n## Quick Start\n\n1. Clone the repository\n2. Run `npm install` to install dependencies\n3. Run `npm run build` to build the project\n4. Run `npm run setup`\n5. Configure your MCP client to use the server\n\n## Prerequisites\n\nRegister a Dropbox app at [Dropbox App Console](https://www.dropbox.com/developers/apps):\n\n- Choose \"Scoped access\" API\n- Choose the access type your app needs\n- Name your app and click \"Create app\"\n- Under \"Permissions\", select the desired permissions for the actions you will be using, for example:\n    - `files.metadata.read`\n    - `files.content.read`\n    - `files.content.write`\n    - `sharing.write`\n    - `account_info.read`\n- Add `http://localhost` as your redirect URI\n- Note your App key and App secret\n\n## Installation\n\n1. **Clone the repository**\n\n   ```bash\n   git clone https://github.com/your-username/dbx-mcp-server.git\n   cd dbx-mcp-server\n   ```\n\n2. **Install dependencies and build**\n\n   ```bash\n   npm install\n   npm run build\n   ```\n\n3. **Run the setup script**\n\n   ```bash\n   npm run setup\n   ```\n\n4. **Add to MCP settings**\n\n   Add the following to your MCP settings file:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"dbx\": {\n         \"command\": \"node\",\n         \"args\": [\"/path/to/dbx-mcp-server/build/index.js\"]\n       }\n     }\n   }\n   ```\n\n## Authentication\n\nThe server uses OAuth 2.0 with PKCE for secure authentication with Dropbox.\n\n### Environment Variables\n\nRequired:\n\n- `DROPBOX_APP_KEY`: Your Dropbox app's key\n- `DROPBOX_APP_SECRET`: Your Dropbox app's secret\n- `DROPBOX_REDIRECT_URI`: OAuth redirect URI\n- `TOKEN_ENCRYPTION_KEY`: 32+ character key for token encryption\n\nOptional:\n\n- `TOKEN_REFRESH_THRESHOLD_MINUTES`: Minutes before expiration to refresh token (default: 5)\n- `MAX_TOKEN_REFRESH_RETRIES`: Maximum number of refresh attempts (default: 3)\n- `TOKEN_REFRESH_RETRY_DELAY_MS`: Delay between refresh attempts in ms (default: 1000)\n\n## Available Tools\n\n### File Operations\n\n- `list_files`: List files in a directory\n- `upload_file`: Upload a file\n- `download_file`: Download a file\n- `safe_delete_item`: Safely delete with recycle bin support\n- `create_folder`: Create a new folder\n- `copy_item`: Copy a file or folder\n- `move_item`: Move or rename a file/folder\n\n### Metadata and Search\n\n- `get_file_metadata`: Get file/folder metadata\n- `search_file_db`: Search files and folders\n- `get_sharing_link`: Create sharing links\n- `get_file_content`: Get file contents\n\n### Account Operations\n\n- `get_account_info`: Get account information\n\n## Required Dropbox Permissions\n\nBelow is a mapping of server actions to the minimum Dropbox OAuth scopes (permissions) required:\n\n| Server Action         | Required Dropbox Scopes                        |\n|---------------------- |-----------------------------------------------|\n| list_files            | `files.metadata.read`                         |\n| upload_file           | `files.content.write`, `files.metadata.write` |\n| download_file         | `files.content.read`                          |\n| safe_delete_item      | `files.metadata.write`                        |\n| create_folder         | `files.metadata.write`                        |\n| copy_item             | `files.content.write`, `files.metadata.write` |\n| move_item             | `files.content.write`, `files.metadata.write` |\n| get_file_metadata     | `files.metadata.read`                         |\n| search_file_db        | `files.metadata.read`                         |\n| get_sharing_link      | `sharing.write`                               |\n| get_file_content      | `files.content.read`                          |\n| get_account_info      | `account_info.read`                           |\n\n**Additional Scopes (if needed):**\n\n- `sharing.read`: View sharing settings and collaborators\n- `file_requests.read` / `file_requests.write`: For file request features\n- `contacts.read` / `contacts.write`: For accessing Dropbox contacts\n\nFor more details on Dropbox scopes, see the [Dropbox Permissions Documentation](https://www.dropbox.com/developers/reference/oauth-guide#scopes).\n\n## Usage Examples\n\n```typescript\n// List files in root directory\nawait mcp.useTool(\"dbx-mcp-server\", \"list_files\", { path: \"\" });\n\n// Upload a file\nawait mcp.useTool(\"dbx-mcp-server\", \"upload_file\", {\n  path: \"/test.txt\",\n  content: Buffer.from(\"Hello World\").toString(\"base64\"),\n});\n\n// Search for files\nawait mcp.useTool(\"dbx-mcp-server\", \"search_file_db\", {\n  query: \"report\",\n  path: \"/Documents\",\n  max_results: 10,\n});\n```\n\n## Development\n\nBuilt with:\n\n- TypeScript\n- Model Context Protocol SDK\n- Dropbox SDK v10.34.0\n- Dropbox API v2\n\n## License\n\nMIT License\n\nCopyright (c) 2025 MCP Server Contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dropbox",
        "dbx",
        "files",
        "dropbox managing",
        "essential dropbox",
        "dropbox functionalities"
      ],
      "category": "file-management"
    },
    "andredezzy--deep-directory-tree-mcp": {
      "owner": "andredezzy",
      "name": "deep-directory-tree-mcp",
      "url": "https://github.com/andredezzy/deep-directory-tree-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/andredezzy.webp",
      "description": "Visualizes and analyzes directory structures with real-time updates, configurable depth, and smart exclusions. Enhances project navigation and organization insights for AI assistants.",
      "stars": 11,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-25T14:17:26Z",
      "readme_content": "# Deep Directory Tree MCP 🌳\n\n[![Smithery Tool Calls](https://smithery.ai/badge/deep-directory-tree-mcp)](https://smithery.ai/server/deep-directory-tree-mcp)\n[![NPM Version](https://img.shields.io/npm/v/%40andredezzy%2Fdeep-directory-tree-mcp.svg)](https://npmjs.org/package/@andredezzy/deep-directory-tree-mcp)\n[![NPM Downloads](https://img.shields.io/npm/dm/%40andredezzy%2Fdeep-directory-tree-mcp)](https://npmjs.org/package/@andredezzy/deep-directory-tree-mcp)\n\nA powerful Model Context Protocol (MCP) implementation for visualizing and analyzing directory structures. Why? Now you can let AI assistants understand and navigate your project structure efficiently, enabling smarter code navigation and project organization insights.\n\nBuilt with:\n\n- [Anthropic MCP](https://docs.anthropic.com/claude/docs/mcp-getting-started)\n- [Cursor](https://cursor.sh)\n\n## Features\n\n- Deep directory tree visualization\n- Configurable depth-based tree generation\n- Smart pattern-based file/directory exclusion\n- Clean and readable tree output format\n- Real-time directory structure updates\n- Targeted directory analysis\n\n**DEMO:**\n\n\n\n## Quick Start\n\n### Prerequisites\n\n- [Node.js](https://nodejs.org) (v18 or higher)\n\n### Smithery Installation\n\nThe easiest way to get started is using [Smithery](https://smithery.ai/server/deep-directory-tree-mcp):\n\n```bash\nnpx -y @smithery/cli install @andredezzy/deep-directory-tree-mcp --client cursor\n```\n\n### Manual Installation\n\n#### Cursor IDE Setup\n\n1. Open Cursor Settings → MCP → Add new MCP server\n2. Configure with these settings:\n\n   ```json\n   {\n     \"deep-directory-tree\": {\n       \"command\": \"npx\",\n       \"args\": [\"-y\", \"@andredezzy/deep-directory-tree-mcp\"]\n     }\n   }\n   ```\n\n#### Claude Desktop Setup\n\nAdd the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"deep-directory-tree\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@andredezzy/deep-directory-tree-mcp\"]\n    }\n  }\n}\n```\n\n## Usage\n\nCommon commands for AI assistants:\n\n- \"Show me the directory structure\"\n- \"Visualize project tree up to depth 4\"\n- \"Show files excluding test directories\"\n\n## Development\n\n### Prerequisites\n\n- [Bun Runtime](https://bun.sh) (required)\n\n```bash\n# Clone the repository\ngit clone https://github.com/andredezzy/deep-directory-tree-mcp.git\ncd deep-directory-tree-mcp\n\n# Install dependencies\nbun install\n\n# Build the project\nbun run build\n```\n\n### Development Manual Installation\n\n#### Cursor IDE Setup\n\n1. Open Cursor Settings → MCP → Add new MCP server\n2. Configure with these settings:\n\n   ```json\n   {\n     \"deep-directory-tree\": {\n       \"command\": \"node\",\n       \"args\": [\"ABSOLUTE_PATH_TO_MCP_SERVER/bin/deep-directory-tree.js\"]\n     }\n   }\n   ```\n\n#### Claude Desktop Setup\n\nAdd the following to your MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"deep-directory-tree\": {\n      \"command\": \"node\",\n      \"args\": [\"ABSOLUTE_PATH_TO_MCP_SERVER/bin/deep-directory-tree.js\"]\n    }\n  }\n}\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit changes (`git commit -m 'Add feature'`)\n4. Push to branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## Support\n\nNeed help? Try these resources:\n\n- [Open an issue](https://github.com/andredezzy/deep-directory-tree-mcp/issues)\n- [FAQ Wiki](https://github.com/andredezzy/deep-directory-tree-mcp/wiki/FAQ)\n- [Documentation](https://github.com/andredezzy/deep-directory-tree-mcp/wiki)\n\n## License\n\nMIT License - see [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "directory",
        "tree",
        "ai",
        "deep directory",
        "directory tree",
        "directory structures"
      ],
      "category": "file-management"
    },
    "arathald--mcp-editor": {
      "owner": "arathald",
      "name": "mcp-editor",
      "url": "https://github.com/arathald/mcp-editor",
      "imageUrl": "/freedevtools/mcp/pfp/arathald.webp",
      "description": "Edit files using a TypeScript MCP server, based on Anthropic's filesystem editing tools. It facilitates direct file manipulation while working with MCP protocols.",
      "stars": 7,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-28T21:04:00Z",
      "readme_content": "# mcp-editor\nThis is a direct port of [Anthropic's filesystem editing tools](https://github.com/anthropics/anthropic-quickstarts/blob/main/computer-use-demo/computer_use_demo/tools/edit.py) from their computer use demos to a TypeScript MCP server. It was written largely by Claude Sonnet 3.5 on Roo Cline (now Roo Code) with probably not quite enough direct supervision. I checked over the code and use this server every day, but there may be mistakes or AI weirdness.\n\nI recommend using this server along with [mcp-server-commands](https://github.com/g0t4/mcp-server-commands)\n\n<a href=\"https://glama.ai/mcp/servers/lnfcd9is5i\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/lnfcd9is5i/badge\" alt=\"mcp-editor MCP server\" /></a>\n\n### ***WARNING: This MCP server has NO access controls and relies entirely on your client's approval mechanisms. Use at your own risk. DO NOT automatically approve write operations, doing so basically gives the LLM permission to destroy your computer.***\n### ***WARNING: This MCP server is NOT actively maintained, and is provided for reference (for example creating your own MCP server with proper access controls). I may update it occasionally.***\n\n## Usage\nGet the files on your computer.\nRun:\n```\nnpm install\nnpm build\n```\n\nIf you're using the Claude desktop app, paste this into your config under \"mcpServers\", and edit the path to match where you put mcp-editor:\n```json\n{\n  \"mcpServers\":\n... your existing servers ...\n    \"mcp-editor\": {\n      \"command\": \"node\",\n      \"args\": [\"/absolute/path/to/mcp-editor/dist/server.js\"]\n    }\n  }\n}\n```\n\nIf you're using [MCP Installer](https://github.com/anaisbetts/mcp-installer), you just need to provide your LLM with the path on your disk to mcp-editor.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "editor",
        "mcp",
        "files",
        "mcp editor",
        "typescript mcp",
        "edit files"
      ],
      "category": "file-management"
    },
    "ashgw--s3-mcp": {
      "owner": "ashgw",
      "name": "s3-mcp",
      "url": "https://github.com/ashgw/s3-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/ashgw.webp",
      "description": "Manage S3 buckets and objects, handle lifecycle configurations, set and retrieve object tags, manage bucket policies, and configure CORS settings.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-08-26T03:42:53Z",
      "readme_content": "## Overview\n\nThis server enables you to:\n\n- Manage S3 buckets and objects\n- Handle lifecycle configurations\n- Set and retrieve object tags\n- Manage bucket policies\n- Configure CORS settings\n\n## Installation\n\nThere are multiple ways to use this server depending on your setup.\n\n### Cursor (recommended)\n\nAdd this to your Cursor MCP configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"s3-mcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-e\",\n        \"AWS_SECRET_ACCESS_KEY=your_access_key\",\n        \"-e\",\n        \"AWS_ACCESS_KEY_ID=your_access_key\",\n        \"-e\",\n        \"AWS_REGION=your_region\",\n        \"ashgw/s3-mcp:latest\"\n      ]\n    }\n  }\n}\n```\n\n> If you prefer pinning to a specific Docker image build (e.g., 20250413-165732), use that tag instead of `latest`. Browse available versions on [Docker Hub](https://hub.docker.com/r/ashgw/s3-mcp/tags).\n\nCursor will route that request through the MCP server automatically.\n\nMake sure it's green and all the tools are available.\n\n![image](https://github.com/user-attachments/assets/6b37044d-e6f3-447a-8809-4431822c0731)\n\n---\n\n### Docker (manual)\n\nYou can run the S3 MCP server manually via Docker:\n\n```bash\ndocker run --rm -it \\\n  -e AWS_ACCESS_KEY_ID=your_access_key \\\n  -e AWS_SECRET_ACCESS_KEY=your_secret_key \\\n  -e AWS_REGION=your_region \\\n  ashgw/s3-mcp\n```\n\nThis uses the pre-built image published at [ashgw/s3-mcp](https://hub.docker.com/repository/docker/ashgw/s3-mcp).\n\n---\n\n### Repo\n\nClone the repository and `cd` into it, then build with:\n\n```bash\ndocker build -t s3-mcp .\n```\n\nThen run with:\n\n```bash\ndocker run --rm -e AWS_ACCESS_KEY_ID=your_access_key -e AWS_SECRET_ACCESS_KEY=your_secret_key -e AWS_REGION=your_region s3-mcp\n```\n\n### Environment Variables\n\nSet the following environment variables for AWS credentials:\n\n```bash\nexport AWS_ACCESS_KEY_ID=your_access_key\nexport AWS_SECRET_ACCESS_KEY=your_secret_key\nexport AWS_REGION=your_region\n```\n\n## Features\n\n- **List Buckets**: Retrieve a list of all S3 buckets.\n- **Create Bucket**: Create a new S3 bucket with optional configurations.\n- **List Objects**: List all objects in a specified bucket.\n- **Get Object**: Retrieve the content of a specified object.\n- **Put Object**: Upload an object to a specified bucket.\n- **Delete Object**: Remove an object from a specified bucket.\n- **Generate Presigned URL**: Create a presigned URL for accessing or uploading an object.\n- **Set Bucket Policy**: Update or set a policy for a specified bucket.\n- **Get Bucket Policy**: Retrieve the current policy for a specified bucket.\n- **Delete Bucket Policy**: Remove the current policy for a specified bucket.\n- **Lifecycle Configuration**: Manage lifecycle rules for S3 buckets.\n- **Object Tagging**: Set and retrieve tags for S3 objects.\n- **CORS Configuration**: Get and set CORS rules for a bucket.\n- **Copy Object**: Copy an object from one location to another within S3.\n- **Download File to Local**: Download a file from a specified S3 bucket to a local path.\n- **Upload Local File**: Upload a local file to a specified S3 bucket.\n\n## Few Usage Examples\n\n### List Buckets\n\n```python\nresponse = await tool(\"list_buckets\")\nprint(response)\n```\n\n### Create a Bucket\n\n```python\nresponse = await tool(\"create_bucket\", {\n    \"bucket_name\": \"my-new-bucket\",\n    \"region\": \"us-west-1\",\n    \"config\": {\n        \"blockPublicAccess\": {\n            \"BlockPublicAcls\": True,\n            \"IgnorePublicAcls\": True,\n            \"BlockPublicPolicy\": True,\n            \"RestrictPublicBuckets\": True\n        },\n        \"versioning\": True,\n        \"encryption\": \"AES256\"\n    }\n})\nprint(response)\n```\n\n### Upload a File\n\n```python\nresponse = await tool(\"upload_local_file\", {\n    \"bucket_name\": \"my-new-bucket\",\n    \"local_path\": \"/path/to/local/file.txt\",\n    \"key\": \"file.txt\"\n})\nprint(response)\n```\n\n### Get Object Tags\n\n```python\nresponse = await tool(\"get_object_tagging\", {\n    \"bucket_name\": \"my-new-bucket\",\n    \"key\": \"file.txt\"\n})\nprint(response)\n```\n\n## License\n\n[MIT](/LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "s3",
        "mcp",
        "buckets",
        "manage s3",
        "s3 mcp",
        "s3 buckets"
      ],
      "category": "file-management"
    },
    "aws-samples--sample-mcp-server-s3": {
      "owner": "aws-samples",
      "name": "sample-mcp-server-s3",
      "url": "https://github.com/aws-samples/sample-mcp-server-s3",
      "imageUrl": "/freedevtools/mcp/pfp/aws-samples.webp",
      "description": "Retrieve and manage PDF documents stored in AWS S3. Offers access to S3 buckets and their objects, enabling data retrieval for integration with AI models.",
      "stars": 65,
      "forks": 16,
      "license": "MIT No Attribution",
      "language": "Python",
      "updated_at": "2025-09-30T20:18:22Z",
      "readme_content": "# Sample S3 Model Context Protocol Server\n\nAn MCP server implementation for retrieving  data such as PDF's from S3.\n\n## Features\n### Resources\nExpose AWS S3 Data through **Resources**. (think of these sort of like GET endpoints; they are used to load information into the LLM's context). Currently only **PDF** documents supported and limited to **1000** objects.\n\n\n### Tools\n- **ListBuckets**\n  - Returns a list of all buckets owned by the authenticated sender of the request\n- **ListObjectsV2**\n  - Returns some or all (up to 1,000) of the objects in a bucket with each request\n- **GetObject**\n  - Retrieves an object from Amazon S3. In the GetObject request, specify the full key name for the object. General purpose buckets - Both the virtual-hosted-style requests and the path-style requests are supported\n\n\n## Configuration\n\n### Setting up AWS Credentials\n1. Obtain AWS access key ID, secret access key, and region from the AWS Management Console and configure credentials files using **Default** profile as shown [**here**](https://docs.aws.amazon.com/cli/v1/userguide/cli-configure-files.html)\n2. Ensure these credentials have appropriate permission READ/WRITE  permissions for S3.\n\n### Usage with Claude Desktop\n\n#### Claude Desktop\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"s3-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/user/generative_ai/model_context_protocol/s3-mcp-server\",\n        \"run\",\n        \"s3-mcp-server\"\n      ]\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n  <summary>Published Servers Configuration</summary>\n\n```json\n{\n  \"mcpServers\": {\n    \"s3-mcp-server\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"s3-mcp-server\"\n      ]\n    }\n  }\n}\n  ```\n</details>\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n```bash\nnpx @modelcontextprotocol/inspector uv --directory /Users/user/generative_ai/model_context_protocol/s3-mcp-server run s3-mcp-server\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\n\n## Security\n\nSee [CONTRIBUTING](CONTRIBUTING.md#security-issue-notifications) for more information.\n\n## License\n\nThis library is licensed under the MIT-0 License. See the LICENSE file.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "s3",
        "aws",
        "documents",
        "s3 retrieve",
        "aws s3",
        "management aws"
      ],
      "category": "file-management"
    },
    "babelcloud--gbox": {
      "owner": "babelcloud",
      "name": "gbox",
      "url": "https://github.com/babelcloud/gbox",
      "imageUrl": "/freedevtools/mcp/pfp/babelcloud.webp",
      "description": "A self-hostable sandbox for executing commands, reading and writing files, and browsing the web across various platforms like iOS and Android. The server supports executing Linux commands and Python scripts, making it suitable for running complex analyses and generating documents like PDFs and diagrams.",
      "stars": 141,
      "forks": 43,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-10-03T22:32:23Z",
      "readme_content": "# GBOX\n\n![GBOX Animation](https://github.com/user-attachments/assets/50a6ebb4-d432-4364-b651-1738855a4b1f)\n\n**GBOX** provides environments for AI Agents to operate computer and mobile devices.\n\n![GBOX Introduction](https://github.com/user-attachments/assets/eded50bd-4498-4bca-85f8-fb3ec272e032)\n\n*Mobile Scenario:*\nYour agents can use GBOX to develop/test android apps, or run apps on the Android to complete various tasks(mobile automation).\n\n*Desktop Scenario:*\nYour agents can use GBOX to operate desktop apps such as browser, terminal, VSCode, etc(desktop automation).\n\n*MCP:* \nYou can also plug GBOX MCP to any Agent you like, such as Cursor, Claude Code. These agents will instantly get the ability to operate computer and mobile devices.\n\n## Installation\n\n### System Requirements\n\n- MacOS \n  - Version: 10.15 or later\n  - [Homebrew](https://brew.sh)\n\n> Note: Using gbox on other platforms, please check npm package [@gbox.ai/cli](https://www.npmjs.com/package/@gbox.ai/cli) for installation instructions. You can also login to [GBOX.AI](https://gbox.ai) to use web-based dashboard.\n\n### Installation Steps\n\n```bash\n# Install via Homebrew (on MacOS)\nbrew install gbox\n# Login to gbox.ai\ngbox login\n\n# Export MCP config and merge into Claude Code/Cursor\ngbox mcp export --merge-to claude-code\ngbox mcp export --merge-to cursor\n```\n\n### Command Line Usage\n\nCheck [GBOX CLI Reference](https://docs.gbox.ai/cli) for detailed usage.\n\n### SDK Usage\n\nCheck [GBOX SDK Reference](https://docs.gbox.ai/sdk) for detailed usage.\n\n## Use GBOX as a MCP Server(Login required)\n\nUsing GBOX CLI to configure MCP server to your Claude Code/Cursor:\n```bash\n# Export MCP config for Cursor\ngbox mcp export --merge-to cursor\n\n# Export MCP config for Claude Code\ngbox mcp export --merge-to claude-code --scope project\n\n```\n\nOr copy paste the following content into your Claude Code/Cursor MCP config:\n```json\n{\n  \"mcpServers\": {\n    \"gbox-android\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@gbox.ai/mcp-android-server@latest\"\n      ]\n    }\n  }\n}\n```\n> Note:\n> - Currently, GBOX MCP can only control Android environments.\n> - If you need Cursor/Claude Code to control your local Android device, please check [Register Local Device](https://docs.gbox.ai/cli/register-local-device)\n\n## Android MCP Use Cases\n\n| Use Case | Demo |\n|----------|------|\n| Claude Code Develop/Test Android App | [![Claude Code Develop/Test Android App](https://img.youtube.com/vi/IzlZFsqC4CY/maxresdefault.jpg)](https://www.youtube.com/watch?v=IzlZFsqC4CY) |\n| Claude Code Compare Prices on eCommerce Apps | [![Claude Code Compare Prices on eCommerce Apps](https://img.youtube.com/vi/Op3ZSVg-qg8/maxresdefault.jpg)](https://www.youtube.com/watch?v=Op3ZSVg-qg8) |\n\n\n## Environments\nCurrently, GBOX supports the following environments:\n- Android\n- Linux Desktop/Browser\n\n### Android Environment\nThere are three types of Android environments, you can choose based on your needs:\n\n**1. Cloud Virtual Device:** \n\nLogin to [GBOX.AI](https://gbox.ai) to get a cloud virtual device. Best for testing and development.\n\n**2. Cloud Physical Device:** \n\nLogin to [GBOX.AI](https://gbox.ai) to get a cloud physical device. Cloud physical device is a real Android phone that you can use for production scenarios.\n\n**3. Local Physical Device:** \n\nUse your own physical device [Register Local Device](https://docs.gbox.ai/cli/register-local-device). Your local device can be any Android device that have Developer Mode enabled. Best for production scenarios and personal use.\n\n### Linux Desktop/Browser Environment\n\nLogin to [GBOX.AI](https://gbox.ai) to get a Linux desktop/browser environment. Best for testing and development.\n\n## Develop gbox\n\n### Prerequisites\n\n- Go 1.21 or later\n- Make\n- pnpm (via corepack)\n- Node.js 16.13 or later\n\n### Build\n\n```bash\n# Build all components\nmake build\n\n# Create distribution package\nmake dist\n```\n\n### Running Services\n\n```bash\n# MCP Server\ncd packages/mcp-server && pnpm dev\n\n# MCP Inspector\ncd packages/mcp-server && pnpm inspect\n```\n\n### Contributing\n\nWe welcome contributions! Please feel free to submit a Pull Request. For major changes, please open an issue first to discuss what you would like to change.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b username/feature-name`)\n3. Commit your changes (`git commit -m 'Add some feature'`)\n4. Push to the branch (`git push origin username/feature-name`)\n5. Open a Pull Request\n\n### Things to Know about Dev and Debug Locally\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gbox",
        "babelcloud",
        "sandbox",
        "babelcloud gbox",
        "file management",
        "gbox self"
      ],
      "category": "file-management"
    },
    "beordle--tinypng-mcp-server": {
      "owner": "beordle",
      "name": "tinypng-mcp-server",
      "url": "https://github.com/beordle/tinypng-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/beordle.webp",
      "description": "Compress images efficiently using the TinyPNG API. Supports both local and remote image compression with minimal setup required.",
      "stars": 0,
      "forks": 0,
      "license": "Apache License 2.0",
      "language": "",
      "updated_at": "2025-03-31T16:01:05Z",
      "readme_content": "## MCP server for TinyPNG\n\n### Usage\n\n### Use `bun` or `node` to run the server\n\n1. Install dependencies and build\n\n```bash\npnpm i\npnpm build\n```\n\n2. Edit the `mcp.json` file\n\n```json\n{\n  \"mcpServers\": {\n    \"tinypng\": {\n      \"command\": \"bun\", // or \"node\"\n      \"args\": [\"/path/to/tinypng-mcp-server/src/index.ts\"], // or \"dist/index.js\"\n      \"env\": {\n        \"TINYPNG_API_KEY\": \"your-tinypng-api-key\"\n      }\n    }\n  }\n}\n```\n\n### Tools\n\n1. Compress local image\n\n```js\n{\n  name: 'compress_local_image',\n  description: 'Compress a local image file',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      imagePath: {\n        type: 'string',\n        description: 'The ABSOLUTE path to the image file to compress',\n        example: '/Users/user/Downloads/image.jpg',\n      },\n      outputPath: {\n        type: 'string',\n        description: 'The ABSOLUTE path to save the compressed image file',\n        example: '/Users/user/Downloads/image_compressed.jpg',\n      },\n      outputFormat: {\n        type: 'string',\n        description: 'The format to save the compressed image file',\n        enum: SUPPORTED_IMAGE_TYPES,\n        example: 'image/jpeg',\n      },\n    },\n    required: ['imagePath'],\n  },\n}\n```\n\n2. Compress remote image\n\n```js\n{\n  name: 'compress_remote_image',\n  description: 'Compress a remote image file by giving the URL of the image',\n  inputSchema: {\n    type: 'object',\n    properties: {\n      imageUrl: {\n        type: 'string',\n        description: 'The URL of the image file to compress',\n        example: 'https://example.com/image.jpg',\n      },\n      outputPath: {\n        type: 'string',\n        description: 'The ABSOLUTE path to save the compressed image file',\n        example: '/Users/user/Downloads/image_compressed.jpg',\n      },\n      outputFormat: {\n        type: 'string',\n        description: 'The format to save the compressed image file',\n        enum: SUPPORTED_IMAGE_TYPES,\n        example: 'image/jpeg',\n      },\n    },\n    required: ['imageUrl'],\n  },\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tinypng",
        "compression",
        "compress",
        "compress images",
        "tinypng mcp",
        "beordle tinypng"
      ],
      "category": "file-management"
    },
    "berlinbra--binary-reader-mcp": {
      "owner": "berlinbra",
      "name": "binary-reader-mcp",
      "url": "https://github.com/berlinbra/binary-reader-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/berlinbra.webp",
      "description": "Read and analyze binary files, extracting metadata and structure from various binary formats, including Unreal Engine assets. The server features an extensible architecture for adding support for new binary formats as needed.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-01-31T02:33:09Z",
      "readme_content": "# Binary Reader MCP\n\nA Model Context Protocol server for reading and analyzing binary files. This server provides tools for reading and analyzing various binary file formats, with initial support for Unreal Engine asset files (.uasset).\n\n## Features\n\n- Read and analyze Unreal Engine .uasset files\n- Extract binary file metadata and structure\n- Auto-detect file formats\n- Extensible architecture for adding new binary format support\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/berlinbra/binary-reader-mcp.git\ncd binary-reader-mcp\n```\n\n2. Create a virtual environment and activate it:\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n## Usage\n\nThe server provides several tools through the Model Context Protocol:\n\n### 1. Read Unreal Asset Files\n\n```python\n# Example usage through MCP\ntool: read-unreal-asset\narguments:\n    file_path: \"path/to/your/asset.uasset\"\n```\n\n### 2. Read Generic Binary Files\n\n```python\n# Example usage through MCP\ntool: read-binary-metadata\narguments:\n    file_path: \"path/to/your/file.bin\"\n    format: \"auto\"  # or \"unreal\", \"custom\"\n```\n\n## Development\n\n### Project Structure\n\n```\nbinary-reader-mcp/\n├── README.md\n├── requirements.txt\n├── main.py\n├── src/\n│   ├── __init__.py\n│   ├── binary_reader/\n│   │   ├── __init__.py\n│   │   ├── base_reader.py\n│   │   ├── unreal_reader.py\n│   │   └── utils.py\n│   ├── api/\n│   │   ├── __init__.py\n│   │   ├── routes.py\n│   │   └── schemas.py\n│   └── config.py\n└── tests/\n    ├── __init__.py\n    ├── test_binary_reader.py\n    └── test_api.py\n```\n\n### Adding New Binary Format Support\n\nTo add support for a new binary format:\n\n1. Create a new reader class that inherits from `BinaryReader`\n2. Implement the required methods (`read_header`, `read_metadata`)\n3. Add the new format to the format auto-detection logic\n4. Update the tools list to include the new format\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "binary",
        "formats",
        "binary files",
        "berlinbra binary",
        "binary formats"
      ],
      "category": "file-management"
    },
    "bhouston--mcp-server-text-editor": {
      "owner": "bhouston",
      "name": "mcp-server-text-editor",
      "url": "https://github.com/bhouston/mcp-server-text-editor",
      "imageUrl": "/freedevtools/mcp/pfp/bhouston.webp",
      "description": "Manage and manipulate text files through a standardized API, enabling operations like viewing, editing, and creating files in various directories.",
      "stars": 28,
      "forks": 6,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-01T08:23:56Z",
      "readme_content": "# Claude Text Editor MCP Server\n\n[![npm version](https://img.shields.io/npm/v/mcp-server-text-editor.svg)](https://www.npmjs.com/package/mcp-server-text-editor)\n[![CI Status](https://github.com/bhouston/mcp-server-text-editor/actions/workflows/tests.yml/badge.svg)](https://github.com/bhouston/mcp-server-text-editor/actions/workflows/tests.yml)\n[![Test Coverage](https://img.shields.io/badge/coverage-90%89-green)](https://github.com/bhouston/mcp-server-text-editor)\n\n<p align=\"center\">\n  <img src=\"https://mintlify.s3.us-west-1.amazonaws.com/mcp/logo/dark.svg\" alt=\"Model Context Protocol Logo\" width=\"200\"/>\n</p>\n\nAn open-source implementation of the Claude built-in text editor tool as a [Model Context Protocol](https://www.anthropic.com/news/model-context-protocol) (MCP) server. This package provides the same functionality as [Claude's built-in text editor tool](https://docs.anthropic.com/en/docs/build-with-claude/tool-use/text-editor-tool), allowing you to view, edit, and create text files through a standardized API.\n\n## Features\n\n- **Identical API to Claude's Text Editor**: Implements the exact same interface as Claude's built-in text editor tool\n- **MCP Server Implementation**: Follows the Model Context Protocol standard for AI tool integration\n- **File Operations**:\n  - View file contents with optional line range specification\n  - Create new files\n  - Replace text in existing files\n  - Insert text at specific line numbers\n  - Undo previous edits\n\n## Supported Claude Text Editor Versions\n\nThis package implements an equivalent tool to [the built-in Claude text editor tool](https://docs.anthropic.com/en/docs/build-with-claude/tool-use/text-editor-tool) versions:\n\n- `text_editor_20241022` (Claude 3.5 Sonnet)\n- `text_editor_20250124` (Claude 3.7 Sonnet)\n\nBut using the tool name 'text_editor' to avoid name conflicts with built-in Claude tools.\n\n## Installation\n\n```bash\n# Install from npm\nnpm install mcp-server-text-editor\n\n# Or with pnpm\npnpm add mcp-server-text-editor\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\n# Using npx\nnpx -y mcp-server-text-editor\n\n# Or if installed globally\nmcp-server-text-editor\n```\n\n### Configuring in Claude Desktop\n\n```json\n{\n  \"mcpServers\": {\n    \"textEditor\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"mcp-server-text-editor\"]\n    }\n  }\n}\n```\n\n### Tool Commands\n\n#### View\n\nView the contents of a file or directory.\n\n```json\n{\n  \"command\": \"view\",\n  \"path\": \"/path/to/file.js\",\n  \"view_range\": [1, 10] // Optional: Show lines 1-10 only\n}\n```\n\n#### Create\n\nCreate a new file with the specified content.\n\n```json\n{\n  \"command\": \"create\",\n  \"path\": \"/path/to/file.js\",\n  \"file_text\": \"console.log('Hello, world!');\"\n}\n```\n\n#### String Replace\n\nReplace text in a file.\n\n```json\n{\n  \"command\": \"str_replace\",\n  \"path\": \"/path/to/file.js\",\n  \"old_str\": \"console.log('Hello, world!');\",\n  \"new_str\": \"console.log('Hello, Claude!');\"\n}\n```\n\n#### Insert\n\nInsert text at a specific line.\n\n```json\n{\n  \"command\": \"insert\",\n  \"path\": \"/path/to/file.js\",\n  \"insert_line\": 5,\n  \"new_str\": \"// This line was inserted by Claude\"\n}\n```\n\n#### Undo Edit\n\nRevert the last edit made to a file.\n\n```json\n{\n  \"command\": \"undo_edit\",\n  \"path\": \"/path/to/file.js\"\n}\n```\n\n## Development\n\n### Prerequisites\n\n- Node.js 18+\n- pnpm\n\n### Setup\n\n```bash\n# Clone the repository\ngit clone https://github.com/bhouston/mcp-server-text-editor.git\ncd mcp-server-text-editor\n\n# Install dependencies\npnpm install\n\n# Build the project\npnpm build\n```\n\n### Scripts\n\n- `pnpm build`: Build the TypeScript project\n- `pnpm lint`: Run ESLint with auto-fixing\n- `pnpm format`: Format code with Prettier\n- `pnpm clean`: Remove build artifacts\n- `pnpm clean:all`: Remove build artifacts and node_modules\n- `pnpm test`: Run tests\n- `pnpm test:coverage`: Run tests with coverage report\n\n### Testing\n\nThis project uses Vitest for testing.\n\nTo run the tests:\n\n```bash\n# Run all tests\npnpm test\n\n# Run tests with coverage report\npnpm test:coverage\n```\n\nThe test coverage report will be generated in the `coverage` directory.\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "editor",
        "files",
        "file",
        "file management",
        "text editor",
        "text files"
      ],
      "category": "file-management"
    },
    "bitscorp-mcp--mcp-ffmpeg": {
      "owner": "bitscorp-mcp",
      "name": "mcp-ffmpeg",
      "url": "https://github.com/bitscorp-mcp/mcp-ffmpeg",
      "imageUrl": "/freedevtools/mcp/pfp/bitscorp-mcp.webp",
      "description": "Manipulate video files by resizing them to various resolutions and extracting audio in multiple formats. Interact with video processing capabilities using natural language requests via API calls.",
      "stars": 35,
      "forks": 13,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T04:42:34Z",
      "readme_content": "# MCP FFmpeg Video Processor\n[![smithery badge](https://smithery.ai/badge/@bitscorp-mcp/mcp-ffmpeg)](https://smithery.ai/server/@bitscorp-mcp/mcp-ffmpeg)\n\nA Node.js server that uses FFmpeg to manipulate video files. This server provides APIs to:\n\n- Resize videos to different resolutions (360p, 480p, 720p, 1080p)\n- Extract audio from videos in various formats (MP3, AAC, WAV, OGG)\n\n## Prerequisites\n\nBefore running this application, you need to have the following installed:\n\n1. **Node.js** (v14 or higher)\n2. **FFmpeg** - This is required for video processing\n\n### Installing FFmpeg\n\n#### On macOS:\n```bash\nbrew install ffmpeg\n```\n\n#### On Ubuntu/Debian:\n```bash\nsudo apt update\nsudo apt install ffmpeg\n```\n\n#### On Windows:\n1. Download FFmpeg from the [official website](https://ffmpeg.org/download.html)\n2. Extract the files to a folder (e.g., `C:\\ffmpeg`)\n3. Add the `bin` folder to your PATH environment variable\n\n## Installation\n\n1. Clone this repository:\n```bash\ngit clone https://github.com/bitscorp-mcp/mcp-ffmpeg.git\ncd mcp-ffmpeg\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n### Installing via Smithery\n\nTo install mcp-ffmpeg for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@bitscorp-mcp/mcp-ffmpeg):\n\n```bash\nnpx -y @smithery/cli install @bitscorp-mcp/mcp-ffmpeg --client claude\n```\n\n## Running the Server\n\nStart the server with:\n\n```bash\nnpm start\n```\n\nFor development with auto-restart on file changes:\n\n```bash\nnpm run dev\n```\n\n### Installing via Smithery\n\nTo install mcp-ffmpeg for Claude Desktop automatically via [Smithery](https://smithery.ai/server/bitscorp-mcp/mcp-ffmpeg):\n\n```bash\nnpx -y @smithery/cli install @bitscorp-mcp/mcp-ffmpeg --client claude\n```\n\nTo install mcp-ffmpeg for Cursor, go to Settings -> Cursor Settings -> Features -> MCP Servers -> + Add\n\nSelect Type: command and paste the below, using your API key from Adjust\n```\nnpx -y @smithery/cli@latest run @bitscorp/mcp-ffmpeg\n```\n\n## Using with Claude Desktop\n\nThis MCP FFmpeg server can be integrated with Claude Desktop to process videos through natural language requests.\n\n### Running with npx\n\nYou can run the server directly with npx:\n\n```bash\nnpx /path/to/mcp-ffmpeg\n```\n\nOr if you've published the package to npm:\n\n```bash\nnpx mcp-ffmpeg\n```\n\n### Configuring Claude Desktop\n\nTo add this server to Claude Desktop, update your Claude Desktop configuration file:\n\n1. Locate your Claude Desktop config file:\n   - macOS: `~/.config/claude-desktop/config.json` or `~/Library/Application Support/Claude Desktop/config.json`\n   - Windows: `%APPDATA%\\Claude Desktop\\config.json`\n   - Linux: `~/.config/claude-desktop/config.json`\n\n2. Add the FFmpeg MCP server to the `mcpServers` section:\n\n```json\n{\n    \"mcpServers\": {\n        \"ffmpeg\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"--yes\",\n                \"/absolute/path/to/mcp-ffmpeg\"\n            ]\n        }\n    }\n}\n```\n\nIf you've published the package to npm:\n\n```json\n{\n    \"mcpServers\": {\n        \"ffmpeg\": {\n            \"command\": \"npx\",\n            \"args\": [\n                \"--yes\",\n                \"mcp-ffmpeg\"\n            ]\n        }\n    }\n}\n```\n\n3. Restart Claude Desktop for the changes to take effect.\n\n### Example Prompts for Claude\n\nOnce configured, you can use prompts like:\n\n```\nUsing the ffmpeg MCP server, please resize the video at /path/to/video.mp4 to 720p resolution.\n```\n\n## Notes\n\n- Uploaded videos are stored temporarily in the `uploads` directory\n- Processed videos and audio files are stored in the `output` directory\n- The server has a file size limit of 500MB for uploads\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ffmpeg",
        "formats",
        "mcp",
        "mcp ffmpeg",
        "video files",
        "video processing"
      ],
      "category": "file-management"
    },
    "box-community--mcp-server-box": {
      "owner": "box-community",
      "name": "mcp-server-box",
      "url": "https://github.com/box-community/mcp-server-box",
      "imageUrl": "/freedevtools/mcp/pfp/box-community.webp",
      "description": "Integrate with the Box API to perform file operations, including file search, text extraction, and AI-based querying. Manage and process Box data efficiently with advanced AI capabilities.",
      "stars": 76,
      "forks": 27,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-01T22:21:03Z",
      "readme_content": "# Box MCP Server\n\n## Quick Start\n\n### Clone the repository:\n\n```sh\ngit clone https://github.com/box-community/mcp-server-box.git\ncd mcp-server-box\n```\n\n### Optional but recommended `uv` installation for virtual environment and dependency management:\n\n#### Homebrew (macOS)\n```sh\nbrew install uv\n```\n\n#### WinGet (Windows)\n```sh\nwinget install --id=astral-sh.uv  -e\n```\n\n#### On macOS and Linux\n```sh\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n#### On Windows\n```sh\npowershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n```\n\n### Set up the virtual environment and install dependencies:\n\n```sh\nuv sync\n```\n\n### Set environment variables:\nSet the following environment variables for Box authentication in a `.env` file or your system environment:\n\n#### Using OAuth2.0 with a Box App\n```\nBOX_CLIENT_ID = YOUR_CLIENT_ID\nBOX_CLIENT_SECRET = YOUR_CLIENT_SECRET\nBOX_REDIRECT_URL = http://localhost:8000/callback\n\nBOX_MCP_SERVER_AUTH_TOKEN = YOUR_BOX_MCP_SERVER_AUTH_TOKEN\n```\n\n#### Using CCG with a Box App\n```\nBOX_CLIENT_ID = YOUR_CLIENT_ID\nBOX_CLIENT_SECRET = YOUR_CLIENT_SECRET\nBOX_SUBJECT_TYPE = user_or_enterprise\nBOX_SUBJECT_ID = YOUR_USER_OR_ENTERPRISE_ID\n\nBOX_MCP_SERVER_AUTH_TOKEN = YOUR_BOX_MCP_SERVER_AUTH_TOKEN\n```\n\n> Note: The `BOX_MCP_SERVER_AUTH_TOKEN` is the token used to authenticate requests to the Box MCP server. You can generate this token.\n\n### Run the MCP server in STDIO mode:\n```sh\nuv run src/mcp_server_box.py\n```\n\n## Box Community MCP Server Tools\n\nBelow is a summary of the available tools:\n\n| Tools available          | Description                                      |\n|--------------------------|--------------------------------------------------|\n| [box_tools_ai](docs/box_tools_ai.md) | AI-powered file and hub queries                  |\n| [box_tools_collaboration](docs/box_tools_collaboration.md)  | Manage file/folder collaborations                |\n| [box_tools_docgen](docs/box_tools_docgen.md)         | Document generation and template management      |\n| [box_tools_files](docs/box_tools_files.md)          | File operations (read, upload, download)         |\n| [box_tools_folders](docs/box_tools_folders.md)        | Folder operations (list, create, delete, update) |\n| [box_tools_generic](docs/box_tools_generic.md)        | Generic Box API utilities                        |\n| [box_tools_groups](docs/box_tools_groups.md)         | Group management and queries                     |\n| [box_tools_metadata](docs/box_tools_metadata.md)       | Metadata template and instance management        |\n| [box_tools_search](docs/box_tools_search.md)         | Search files and folders                         |\n| [box_tools_shared_links](docs/box_tools_shared_links.md)   | Shared link management for files/folders/web-links|\n| [box_tools_users](docs/box_tools_users.md)          | User management and queries                      |\n| [box_tools_web_link](docs/box_tools_web_link.md)       | Web link creation and management                 |\n\n## Box Community MCP Server Operations Details\n\n### Command line interface parameters\nTo run the MCP server with specific configurations, you can use the following command line parameters:\n```sh\nuv run src/mcp_server_box.py --help\n```\n```\nusage: mcp_server_box.py [-h] [--transport {stdio,sse,streamable-http}] [--host HOST]\n                         [--port PORT] [--box-auth {oauth,ccg}] [--no-mcp-server-auth]\n\nBox Community MCP Server\n\noptions:\n  -h, --help            show this help message and exit\n  --transport {stdio,sse,streamable-http}\n                        Transport type (default: stdio)\n  --host HOST           Host for SSE/HTTP transport (default: 0.0.0.0)\n  --port PORT           Port for SSE/HTTP transport (default: 8000)\n  --box-auth {oauth,ccg}\n                        Authentication type for Box API (default: oauth)\n  --no-mcp-server-auth  Disable authentication (for development only)\n  ```\n\n### Claude Desktop Configuration\nEdit your `claude_desktop_config.json`:\n\n```code ~/Library/Application\\ Support/Claude/claude_desktop_config.json```\n\nAdd the configuration:\n```json\n{\n    \"mcpServers\": {\n        \"mcp-server-box\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/mcp-server-box\",\n                \"run\",\n                \"src/mcp_server_box.py\"\n            ]\n        }\n    }\n}\n```\n\nRestart Claude if it is running.\n\n### Cursor Configuration\n\nCursor supports MCP servers through its configuration file. Here's how to set it up:\n\nThe Cursor MCP configuration file is located at:\n- **macOS/Linux**: `~/.cursor/config.json` or `~/.config/cursor/config.json`\n- **Windows**: `%APPDATA%\\Cursor\\config.json`\n\n#### Add the MCP Server Configuration: STDIO Transport\n\nEdit your Cursor configuration file and add the following under the `mcpServers` section:\n```json\n{\n    \"mcpServers\": {\n        \"mcp-server-box\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/mcp-server-box\",\n                \"run\",\n                \"src/mcp_server_box.py\"\n            ],\n            \"env\": {\n                \"BOX_CLIENT_ID\": \"YOUR_CLIENT_ID\",\n                \"BOX_CLIENT_SECRET\": \"YOUR_CLIENT_SECRET\",\n                \"BOX_REDIRECT_URL\": \"http://localhost:8000/callback\"\n            }\n        }\n    }\n}",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "file",
        "box",
        "mcp server",
        "file management",
        "process box"
      ],
      "category": "file-management"
    },
    "bsmi021--mcp-file-context-server": {
      "owner": "bsmi021",
      "name": "mcp-file-context-server",
      "url": "https://github.com/bsmi021/mcp-file-context-server",
      "imageUrl": "/freedevtools/mcp/pfp/bsmi021.webp",
      "description": "Enables LLMs to read, search, and analyze code files while providing advanced caching and real-time file watching capabilities. Facilitates file operations and code analysis to improve development workflows and quality metrics.",
      "stars": 31,
      "forks": 6,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-01T21:30:20Z",
      "readme_content": "# File Context Server\n[![smithery badge](https://smithery.ai/badge/@bsmi021/mcp-file-context-server)](https://smithery.ai/server/@bsmi021/mcp-file-context-server)\n\nA Model Context Protocol (MCP) server that provides file system context to Large Language Models (LLMs). This server enables LLMs to read, search, and analyze code files with advanced caching and real-time file watching capabilities.\n\n## Features\n\n- **File Operations**\n  - Read file and directory contents\n  - List files with detailed metadata\n  - Real-time file watching and cache invalidation\n  - Support for multiple file encodings\n  - Recursive directory traversal\n  - File type filtering\n\n- **Code Analysis**\n  - Cyclomatic complexity calculation\n  - Dependency extraction\n  - Comment analysis\n  - Quality metrics:\n    - Duplicate lines detection\n    - Long lines detection (>100 characters)\n    - Complex function identification\n    - Line counts (total, non-empty, comments)\n\n- **Smart Caching**\n  - LRU (Least Recently Used) caching strategy\n  - Automatic cache invalidation on file changes\n  - Size-aware caching with configurable limits\n  - Cache statistics and performance metrics\n  - Last read result caching for efficient searches\n\n- **Advanced Search**\n  - Regex pattern matching\n  - Context-aware results with configurable surrounding lines\n  - File type filtering\n  - Multi-pattern search support\n  - Cached result searching\n  - Exclusion patterns\n\n## Installation\n\n### Installing via Smithery\n\nTo install File Context Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@bsmi021/mcp-file-context-server):\n\n```bash\nnpx -y @smithery/cli install @bsmi021/mcp-file-context-server --client claude\n```\n\n### Manual Installation\n```bash\nnpm install @modelcontextprotocol/file-context-server\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nnpx file-context-server\n```\n\n### Available Tools\n\n1. **list_context_files**\n   - Lists files in a directory with detailed metadata\n\n   ```json\n   {\n     \"path\": \"./src\",\n     \"recursive\": true,\n     \"includeHidden\": false\n   }\n   ```\n\n2. **read_context**\n   - Reads file or directory contents with metadata\n\n   ```json\n   {\n     \"path\": \"./src/index.ts\",\n     \"encoding\": \"utf8\",\n     \"maxSize\": 1000000,\n     \"recursive\": true,\n     \"fileTypes\": [\"ts\", \"js\"]\n   }\n   ```\n\n3. **search_context**\n   - Searches for patterns in files with context\n\n   ```json\n   {\n     \"pattern\": \"function.*\",\n     \"path\": \"./src\",\n     \"options\": {\n       \"recursive\": true,\n       \"contextLines\": 2,\n       \"fileTypes\": [\"ts\"]\n     }\n   }\n   ```\n\n4. **analyze_code**\n   - Analyzes code files for quality metrics\n\n   ```json\n   {\n     \"path\": \"./src\",\n     \"recursive\": true,\n     \"metrics\": [\"complexity\", \"dependencies\", \"quality\"]\n   }\n   ```\n\n5. **cache_stats**\n   - Gets cache statistics and performance metrics\n\n   ```json\n   {\n     \"detailed\": true\n   }\n   ```\n\n## Error Handling\n\nThe server provides detailed error messages with specific error codes:\n\n- `FILE_NOT_FOUND`: File or directory does not exist\n- `PERMISSION_DENIED`: Access permission issues\n- `INVALID_PATH`: Invalid file path format\n- `FILE_TOO_LARGE`: File exceeds size limit\n- `ENCODING_ERROR`: File encoding issues\n- `UNKNOWN_ERROR`: Unexpected errors\n\n## Configuration\n\nEnvironment variables for customization:\n\n- `MAX_CACHE_SIZE`: Maximum number of cached entries (default: 1000)\n- `CACHE_TTL`: Cache time-to-live in milliseconds (default: 1 hour)\n- `MAX_FILE_SIZE`: Maximum file size in bytes for reading\n\n## Development\n\n```bash\n# Install dependencies\nnpm install\n\n# Build\nnpm run build\n\n# Run tests\nnpm test\n\n# Start in development mode\nnpm run dev\n```\n\n## License\n\nMIT\n\n## Contributing\n\nContributions are welcome! Please read our [Contributing Guide](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.\n\n## Cross-Platform Path Compatibility\n\n**Note:** As of April 2025, all file and directory path handling in File Context Server has been updated for improved cross-platform compatibility (Windows, macOS, Linux):\n\n- All glob patterns use POSIX-style paths (forward slashes) internally, ensuring consistent file matching regardless of OS.\n- All file system operations (reading, writing, stat, etc.) use normalized absolute paths for reliability.\n- If you are developing or extending the server, use `path.posix.join` for glob patterns and `path.normalize` for file system access.\n- This change prevents issues with path separators and file matching on different operating systems.\n\nNo changes are required for end users, but developers should follow these conventions when contributing to the project.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "file",
        "bsmi021",
        "file management",
        "file context",
        "facilitates file"
      ],
      "category": "file-management"
    },
    "bsmi021--mcp-file-operations-server": {
      "owner": "bsmi021",
      "name": "mcp-file-operations-server",
      "url": "https://github.com/bsmi021/mcp-file-operations-server",
      "imageUrl": "/freedevtools/mcp/pfp/bsmi021.webp",
      "description": "Provides capabilities for basic and advanced file and directory manipulations, including monitoring for changes and tracking operation history. Supports streaming of large files and real-time updates for long-running tasks.",
      "stars": 18,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T06:21:46Z",
      "readme_content": "# File Operations MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@bsmi021/mcp-file-operations-server)](https://smithery.ai/server/@bsmi021/mcp-file-operations-server)\n\nA Model Context Protocol (MCP) server that provides enhanced file operation capabilities with streaming, patching, and change tracking support.\n\n<a href=\"https://glama.ai/mcp/servers/7b750si00d\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/7b750si00d/badge\" alt=\"File Operations Server MCP server\" />\n</a>\n\n## Features\n\n- **Basic File Operations**: Copy, read, write, move, and delete files\n- **Directory Operations**: Create, remove, and copy directories\n- **File Watching**: Monitor files and directories for changes\n- **Change Tracking**: Track and query file operation history\n- **Streaming Support**: Handle large files efficiently with streaming\n- **HTTP Interface**: Streamable HTTP interface with Server-Sent Events (SSE)\n- **Resource Support**: Access files and directories through MCP resources\n- **Progress Reporting**: Real-time progress updates for long operations\n- **Rate Limiting**: Protection against excessive requests\n- **Enhanced Security**: Path validation and input sanitization\n- **Robust Error Handling**: Comprehensive error handling and reporting\n- **Type Safety**: Full TypeScript support with strict type checking\n- **Docker Support**: Containerized deployment with volume mounting\n\n## Installation\n\n### Installing via Smithery\n\nTo install File Operations Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@bsmi021/mcp-file-operations-server):\n\n```bash\nnpx -y @smithery/cli install @bsmi021/mcp-file-operations-server --client claude\n```\n\n### Manual Installation\n```bash\nnpm install\n```\n\n### Docker Installation\n\nSee [DOCKER.md](./DOCKER.md) for comprehensive Docker setup instructions including local drive mounting for Windows and Linux.\n\n**Quick Docker Start:**\n```bash\n# Stdio transport (for MCP clients)\ndocker run -it --rm -v \"$(pwd):/workspace\" ghcr.io/bsmi021/mcp-file-operations-server\n\n# HTTP transport (for web/remote access)\ndocker run -it --rm -p 3001:3001 -v \"$(pwd):/workspace\" -e MCP_TRANSPORT=http ghcr.io/bsmi021/mcp-file-operations-server\n```\n\n## Usage\n\n### Transport Modes\n\nThe server supports two transport modes:\n\n#### 1. Stdio Transport (Default)\nFor direct integration with MCP clients like Claude Desktop:\n\n```bash\nnpm start\n```\n\n#### 2. HTTP Transport with SSE (New in v1.5)\nFor remote connections and web applications:\n\n```bash\nnpm run start:http\n```\n\nThe HTTP server provides:\n- **SSE Endpoint**: `GET http://localhost:3001/sse` - Establishes streaming connection\n- **Messages Endpoint**: `POST http://localhost:3001/messages` - Receives client messages  \n- **Health Check**: `GET http://localhost:3001/health` - Server status\n- **Sessions**: `GET http://localhost:3001/sessions` - Active connection info\n\n### Starting the Server\n\n#### Development Mode\n\n```bash\n# Stdio transport with auto-reload\nnpm run dev\n\n# HTTP transport with auto-reload\nnpm run dev:http\n```\n\n#### Production Mode\n\n```bash\n# Stdio transport\nnpm start\n\n# HTTP transport\nnpm run start:http\n\n# Custom port for HTTP\nnpm run start:http -- --port 8080\n```\n\n### Available Tools\n\n#### Basic File Operations\n\n- `copy_file`: Copy a file to a new location\n- `read_file`: Read content from a file\n- `write_file`: Write content to a file\n- `move_file`: Move/rename a file\n- `delete_file`: Delete a file\n- `append_file`: Append content to a file\n\n#### Directory Operations\n\n- `make_directory`: Create a directory\n- `remove_directory`: Remove a directory\n- `copy_directory`: Copy a directory recursively (with progress reporting)\n\n#### Watch Operations\n\n- `watch_directory`: Start watching a directory for changes\n- `unwatch_directory`: Stop watching a directory\n\n#### Change Tracking\n\n- `get_changes`: Get the list of recorded changes\n- `clear_changes`: Clear all recorded changes\n\n### Available Resources\n\n#### Static Resources\n\n- `file:///recent-changes`: List of recent file system changes\n\n#### Resource Templates\n\n- `file://{path}`: Access file contents\n- `metadata://{path}`: Access file metadata\n- `directory://{path}`: List directory contents\n\n### Example Usage\n\n#### Using Stdio Transport (MCP Clients)\n\n```typescript\n// Copy a file\nawait fileOperations.copyFile({\n    source: 'source.txt',\n    destination: 'destination.txt',\n    overwrite: false\n});\n\n// Watch a directory\nawait fileOperations.watchDirectory({\n    path: './watched-dir',\n    recursive: true\n});\n\n// Access file contents through resource\nconst resource = await mcp.readResource('file:///path/to/file.txt');\nconsole.log(resource.contents[0].text);\n\n// Copy directory with progress tracking\nconst result = await fileOperations.copyDirectory({\n    source: './source-dir',\n    destination: './dest-dir',\n    overwrite: false\n});\n// Progress token in result can be used to track progress\nconsole.log(result.progressToken);\n```\n\n#### Using HTTP Transport (Web/Remote)\n\n**Connecting via JavaScript:**\n\n```javascript\n// Establish SSE connection\nconst eventSource = new EventSource('http://localhost:3001/sse');\nlet sessionId = null;\n\neventSource.onopen = function() {\n    console.log('Connected to MCP server');\n};\n\neventSource.onmessage = function(event) {\n    const message = JSON.parse(event.data);\n    \n    // Extract session ID from first message\n    if (!sessionId && message.sessionId) {\n        sessionId = message.sessionId;\n    }\n    \n    console.log('Received:', message);\n};\n\n// Send a message to the server\nasync function sendMessage(method, params) {\n    const message = {\n        jsonrpc: '2.0',\n        id: Date.now(),\n        method: method,\n        params: params\n    };\n    \n    const response = await fetch('http://localhost:3001/messages', {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json',\n            'X-Session-ID': sessionId\n        },\n        body: JSON.stringify(message)\n    });\n    \n    return response.json();\n}\n\n// Example: List tools\nsendMessage('tools/list', {});\n\n// Example: Read a file\nsendMessage('tools/call', {\n    name: 'read_file',\n    arguments: { path: '/workspace/example.txt' }\n});\n```\n\n**Using curl for testing:**\n\n```bash\n# Start SSE connection in background\ncurl -N http://localhost:3001/sse &\n\n# Check server health\ncurl http://localhost:3001/health\n\n# List active sessions\ncurl http://localhost:3001/sessions\n```\n\n**Interactive Web Client:**\n\nA complete interactive example is available at [`examples/http-client.html`](./examples/http-client.html). Open this file in a web browser to test the HTTP interface with a user-friendly GUI.\n\n## What's New in v1.5\n\n### MCP SDK v1.5 Upgrade\n- **Streamable HTTP Interface**: New HTTP transport with Server-Sent Events (SSE)\n- **Enhanced API**: Upgraded to MCP SDK v1.5 with improved zod-based schemas\n- **Multiple Connections**: Support for simultaneous HTTP connections with session management\n- **Better Type Safety**: Improved TypeScript integration and error handling\n\n### Streaming Features\n- **Large File Support**: Efficient streaming for large file operations\n- **Real-time Progress**: Progress updates via SSE for long-running operations\n- **Session Management**: Multiple client connections with isolated sessions\n- **HTTP API**: RESTful endpoints alongside traditional MCP protocol\n\n## Docker Support\n\n### Quick Start with Docker\n\n```bash\n# Build the image\ndocker build -t mcp-file-operations-server .\n\n# Run with stdio (for MCP clients)\ndocker run -it --rm -v \"$(pwd):/workspace\" mcp-file-operations-server\n\n# Run with HTTP interface\ndocker run -it --rm -p 3001:3001 -v \"$(pwd):/workspace\" -e MCP_TRANSPORT=http mcp-file-operations-server\n```\n\n### Volume Mounting\n\n**Windows:**\n```cmd\ndocker run -it --rm -v \"C:\\MyProject:/workspace\" -p 3001:3001 -e MCP_TRANSPORT=http mcp-file-operations-server\n```\n\n**Linux/macOS:**\n```bash\ndocker run -it --rm -v \"/home/user/project:/workspace\" -p 3001:3001 -e MCP_TRANSPORT=http mcp-file-operations-server\n```\n\nFor comprehensive Docker setup instructions including local drive mounting for Windows and Linux, see [DOCKER.md](./DOCKER.md).\n\n## Rate Limits\n\nThe server implements rate limiting to prevent abuse:\n\n- **Tools**: 100 requests per minute\n- **Resources**: 200 requests per minute\n- **Watch Operations**: 20 operations per minute\n\nRate limit errors include a retry-after period in the error message.\n\n## Security Features\n\n### Path Validation\n\nAll file paths are validated to prevent directory traversal attacks:\n\n- No parent directory references (`../`)\n- Proper path normalization\n- Input sanitization\n\n### Resource Protection\n\n- Rate limiting on all operations\n- Proper error handling and logging\n- Input validation on all parameters\n- Safe resource cleanup\n\n## Progress Reporting\n\nLong-running operations like directory copying provide progress updates:\n\n```typescript\ninterface ProgressUpdate {\n    token: string | number;\n    message: string;\n    percentage: number;\n}\n```\n\nProgress can be tracked through the progress token returned in the operation result.\n\n## Development\n\n### Building\n\n```bash\nnpm run build\n```\n\n### Linting\n\n```bash\nnpm run lint\n```\n\n### Formatting\n\n```bash\nnpm run format\n```\n\n### Testing\n\n```bash\nnpm test\n```\n\n## Configuration\n\n### Environment Variables\n\n| Variable | Default | Description |\n|----------|---------|-------------|\n| `MCP_TRANSPORT` | `stdio` | Transport mode: `stdio` or `http` |\n| `MCP_HTTP_PORT` | `3001` | Port for HTTP transport |\n\n### Transport Selection\n\n- **Stdio**: Best for MCP clients like Claude Desktop, direct integration\n- **HTTP**: Best for web applications, remote access, development/testing\n\nThe server can be configured through various settings:\n\n- **Rate Limiting**: Configure request limits and windows\n- **Progress Reporting**: Control update frequency and detail level\n- **Resource Access**: Configure resource permissions and limits\n- **Security Settings**: Configure path validation rules\n- **Change Tracking**: Set retention periods and storage options\n- **Watch Settings**: Configure debounce times and recursive watching\n\n## Error Handling\n\nThe server provides detailed error information through the `FileOperationError` class and MCP error codes:\n\n### Standard MCP Error Codes\n\n- `InvalidRequest`: Invalid parameters or request format\n- `MethodNotFound`: Unknown tool or resource requested\n- `InvalidParams`: Invalid parameters (e.g., path validation failure)\n- `InternalError`: Server-side errors\n\n### Custom Error Types\n\n- File operation failures\n- Rate limit exceeded\n- Path validation errors\n- Resource access errors\n\nEach error includes:\n\n- Specific error code\n- Detailed error message\n- Relevant metadata (file paths, limits, etc.)\n- Stack traces in development mode\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bsmi021",
        "files",
        "file",
        "file management",
        "management bsmi021",
        "bsmi021 mcp"
      ],
      "category": "file-management"
    },
    "bsmi021--mcp-filesystem-server": {
      "owner": "bsmi021",
      "name": "mcp-filesystem-server",
      "url": "https://github.com/bsmi021/mcp-filesystem-server",
      "imageUrl": "/freedevtools/mcp/pfp/bsmi021.webp",
      "description": "Perform file system operations, analysis, and manipulation through a standardized tool interface for enhanced application capabilities.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-19T02:29:42Z",
      "readme_content": "# Filesystem MCP Server\n\nA Model Context Protocol (MCP) server implementation providing file system operations, analysis, and manipulation capabilities through a standardized tool interface.\n\n## Architecture\n\nThe server is built on the MCP SDK and organized into distinct layers:\n\n```mermaid\ngraph TD\n    A[MCP Server Layer] --> B[Tool Registry]\n    B --> C[Operations Layer]\n    C --> D[File System Operations]\n    C --> E[Analysis Operations]\n    C --> F[Stream Operations]\n```\n\n### Components\n- **Server Layer**: Handles MCP protocol communication and tool dispatch\n- **Tool Registry**: Manages tool registration and execution\n- **Operations Layer**: Implements core functionality\n- **File System Interface**: Provides safe file system access\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone <repository-url>\ncd filesystem-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the server:\n```bash\nnpm run build\n```\n\n4. Configure MCP settings (cline_mcp_settings.json):\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"node\",\n      \"args\": [\"path/to/filesystem-server/build/index.js\"]\n    }\n  }\n}\n```\n\n## Tool Reference\n\n### Directory Operations\n\n#### list_directory\nLists directory contents with metadata.\n\n```typescript\ninterface ListDirectoryParams {\n    path: string;       // Directory path\n    recursive?: boolean; // List recursively (default: false)\n}\n\ninterface ListDirectoryResult {\n    entries: {\n        name: string;\n        path: string;\n        isDirectory: boolean;\n        size: number;\n        created: string;\n        modified: string;\n        accessed: string;\n        mode: string;\n    }[];\n}\n```\n\n#### create_directory\nCreates a new directory.\n\n```typescript\ninterface CreateDirectoryParams {\n    path: string;       // Directory path\n    recursive?: boolean; // Create parent directories (default: true)\n}\n```\n\n### File Operations\n\n#### read_file\nReads file content with encoding support.\n\n```typescript\ninterface ReadFileParams {\n    path: string;     // File path\n    encoding?: string; // File encoding (default: 'utf8')\n}\n```\n\n#### write_file\nWrites content to a file.\n\n```typescript\ninterface WriteFileParams {\n    path: string;     // File path\n    content: string;  // Content to write\n    encoding?: string; // File encoding (default: 'utf8')\n}\n```\n\n#### append_file\nAppends content to a file.\n\n```typescript\ninterface AppendFileParams {\n    path: string;     // File path\n    content: string;  // Content to append\n    encoding?: string; // File encoding (default: 'utf8')\n}\n```\n\n### Analysis Operations\n\n#### analyze_text\nAnalyzes text file properties.\n\n```typescript\ninterface AnalyzeTextParams {\n    path: string; // File path\n}\n\ninterface AnalyzeTextResult {\n    lineCount: number;\n    wordCount: number;\n    charCount: number;\n    encoding: string;\n    mimeType: string;\n}\n```\n\n#### calculate_hash\nCalculates file hash using specified algorithm.\n\n```typescript\ninterface CalculateHashParams {\n    path: string;           // File path\n    algorithm?: 'md5' | 'sha1' | 'sha256' | 'sha512'; // Hash algorithm\n}\n\ninterface CalculateHashResult {\n    hash: string;\n    algorithm: string;\n}\n```\n\n#### find_duplicates\nIdentifies duplicate files in a directory.\n\n```typescript\ninterface FindDuplicatesParams {\n    path: string; // Directory path\n}\n\ninterface FindDuplicatesResult {\n    duplicates: {\n        hash: string;\n        size: number;\n        files: string[];\n    }[];\n}\n```\n\n### Compression Operations\n\n#### create_zip\nCreates a ZIP archive.\n\n```typescript\ninterface CreateZipParams {\n    files: string[];  // Files to include\n    output: string;   // Output ZIP path\n}\n```\n\n#### extract_zip\nExtracts a ZIP archive.\n\n```typescript\ninterface ExtractZipParams {\n    path: string;    // ZIP file path\n    output: string;  // Output directory\n}\n```\n\n## Error Handling\n\nThe server uses standard MCP error codes:\n\n```typescript\nenum ErrorCode {\n    ParseError = -32700,\n    InvalidRequest = -32600,\n    MethodNotFound = -32601,\n    InvalidParams = -32602,\n    InternalError = -32603\n}\n```\n\nError responses include:\n- Error code\n- Human-readable message\n- Additional context when available\n\nExample error:\n```json\n{\n    \"code\": -32602,\n    \"message\": \"File not found: /path/to/file.txt\"\n}\n```\n\n## Development\n\n### Project Structure\n```\nsrc/\n├── operations/     # Core operations implementation\n├── tools/         # MCP tool definitions and handlers\n├── __tests__/     # Test suites\n├── index.ts       # Entry point\n├── server.ts      # MCP server setup\n├── types.ts       # Type definitions\n└── utils.ts       # Utility functions\n```\n\n### Running Tests\n\nRun the test suite:\n```bash\nnpm test\n```\n\nRun with coverage:\n```bash\nnpm run test:coverage\n```\n\n### Development Mode\n\nRun in watch mode:\n```bash\nnpm run watch\n```\n\n### Code Quality\n\nLint the codebase:\n```bash\nnpm run lint\n```\n\nType check:\n```bash\nnpm run type-check\n```\n\n## Dependencies\n\nCore dependencies:\n- @modelcontextprotocol/sdk: MCP server implementation\n- file-type: File type detection\n- mime-types: MIME type lookup\n- crypto-js: File hashing\n- archiver: ZIP creation\n- extract-zip: ZIP extraction\n- iconv-lite: Text encoding\n- chardet: Encoding detection\n\nDevelopment dependencies:\n- typescript: Type system\n- jest: Testing\n- eslint: Linting\n- prettier: Formatting\n- ts-node: TypeScript execution\n- nodemon: Development server\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch\n3. Write tests for new features\n4. Ensure all tests pass\n5. Submit a pull request\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "bsmi021",
        "file",
        "mcp filesystem",
        "file management",
        "filesystem server"
      ],
      "category": "file-management"
    },
    "bunasQ--fs": {
      "owner": "bunasQ",
      "name": "fs",
      "url": "https://github.com/bunasQ/fs",
      "imageUrl": "/freedevtools/mcp/pfp/bunasQ.webp",
      "description": "Manage and interact with file systems by accessing, reading, and manipulating files. This server enhances application capabilities through streamlined file operations.",
      "stars": 13,
      "forks": 4,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-05T00:09:44Z",
      "readme_content": "# FS MCP\n\nA file system Model Context Protocol (MCP) server that enables file reading capabilities.\n\n## Installation\n\nYou can run this package directly using npx:\n\n```bash\nnpx -y @bunas/fs-mcp@latest\n```\n\n## Usage with API Key\n\nYou can provide an API key when running the package:\n\n```bash\nnpx -y @bunas/fs-mcp@latest --API_KEY=\"your_api_key_here\"\n```\n\nThe API key can also be provided as an environment variable:\n\n```bash\nAPI_KEY=\"your_api_key_here\" npx -y @bunas/fs-mcp@latest\n```\n\n## Features\n\n- Seamless file reading via MCP\n- Command-line API key configuration\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "bunasq",
        "fs",
        "file management",
        "file systems",
        "bunasq fs"
      ],
      "category": "file-management"
    },
    "burningion--video-editing-mcp": {
      "owner": "burningion",
      "name": "video-editing-mcp",
      "url": "https://github.com/burningion/video-editing-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/burningion.webp",
      "description": "Upload, edit, search, and generate videos using large language models and Video Jungle's tools. The server enables interaction with videos through a custom URI scheme for managing individual videos and projects.",
      "stars": 214,
      "forks": 29,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-25T07:41:40Z",
      "readme_content": "# Video Editor MCP server\n\n[](https://www.video-jungle.com)\n\nSee a demo here: [https://www.youtube.com/watch?v=KG6TMLD8GmA](https://www.youtube.com/watch?v=KG6TMLD8GmA)\n\nUpload, edit, search, and generate videos from everyone's favorite LLM and [Video Jungle](https://www.video-jungle.com/).\n\nYou'll need to sign up for an account at [Video Jungle](https://app.video-jungle.com/register) in order to use this tool, and add your API key.\n\n[![PyPI version](https://badge.fury.io/py/video-editor-mcp.svg)](https://badge.fury.io/py/video-editor-mcp)\n\n## Components\n\n### Resources\n\nThe server implements an interface to upload, generate, and edit videos with:\n- Custom vj:// URI scheme for accessing individual videos and projects\n- Each project resource has a name, description\n- Search results are returned with metadata about what is in the video, and when, allowing for edit generation directly\n\n### Prompts\n\nComing soon.\n\n### Tools\n\nThe server implements a few tools:\n- add-video\n  - Add a Video File for analysis from a URL. Returns an vj:// URI to reference the Video file\n- create-videojungle-project\n  - Creates a Video Jungle project to contain generative scripts, analyzed videos, and images for video edit generation\n- edit-locally\n  - Creates an OpenTimelineIO project and downloads it to your machine to open in a Davinci Resolve Studio instance (Resolve Studio _must_ already be running before calling this tool.) \n- generate-edit-from-videos\n  - Generates a rendered video edit from a set of video files\n- generate-edit-from-single-video\n  - Generate an edit from a single input video file\n- get-project-assets\n  - Get assets within a project for video edit generation.\n- search-videos\n  - Returns video matches based upon embeddings and keywords\n- update-video-edit\n  - Live update a video edit's information. If Video Jungle is open, edit will be updated in real time.\n\n### Using Tools in Practice\n\nIn order to use the tools, you'll need to sign up for Video Jungle and add your API key.\n\n**add-video**\n\nHere's an example prompt to invoke the `add-video` tool:\n\n```\ncan you download the video at https://www.youtube.com/shorts/RumgYaH5XYw and name it fly traps?\n```\n\nThis will download a video from a URL, add it to your library, and analyze it for retrieval later. Analysis is multi-modal, so both audio and visual components can be queried against.\n\n**search-videos**\n\nOnce you've got a video downloaded and analyzed, you can then do queries on it using the `search-videos` tool:\n\n```\ncan you search my videos for fly traps?\n```\n\nSearch results contain relevant metadata for generating a video edit according to details discovered in the initial analysis.\n\n**search-local-videos**\n\nYou must set the environment variable `LOAD_PHOTOS_DB=1` in order to use this tool, as it will make Claude prompt to access your files on your local machine.\n\nOnce that's done, you can search through your Photos app for videos that exist on your phone, using Apple's tags.\n\nIn my case, when I search for \"Skateboard\", I get 1903 video files.\n\n```\ncan you search my local video files for Skateboard?\n```\n\n**generate-edit-from-videos**\n\nFinally, you can use these search results to generate an edit:\n\n```\ncan you create an edit of all the times the video says \"fly trap\"?\n```\n\n(Currently), the video edits tool relies on the context within the current chat. \n\n**generate-edit-from-single-video**\n\nFinally, you can cut down an edit from a single, existing video:\n\n```\ncan you create an edit of all the times this video says the word \"fly trap\"?\n```\n\n## Configuration\n\nYou must login to [Video Jungle settings](https://app.video-jungle.com/profile/settings), and get your [API key](https://app.video-jungle.com/profile/settings). Then, use this to start Video Jungle MCP:\n\n```bash\n$ uv run video-editor-mcp YOURAPIKEY\n```\n\nTo allow this MCP server to search your Photos app on MacOS:\n\n```\n$ LOAD_PHOTOS_DB=1 uv run video-editor-mcp YOURAPIKEY\n```\n## Quickstart\n\n### Install\n\n#### Installing via Smithery\n\nTo install Video Editor for Claude Desktop automatically via [Smithery](https://smithery.ai/server/video-editor-mcp):\n\n```bash\nnpx -y @smithery/cli install video-editor-mcp --client claude\n```\n\n#### Claude Desktop\n\nYou'll need to adjust your `claude_desktop_config.json` manually:\n\nOn MacOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n<details>\n<details>\n  <summary>Published Server Configuration</summary>\n  \n ```json\n  \"mcpServers\": {\n    \"video-editor-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"video-editor-mcp\",\n        \"YOURAPIKEY\"\n      ]\n    }\n  }\n  ```\n</details>\n  <summary>Development/Unpublished Servers Configuration</summary>\n  \n ```json\n  \"mcpServers\": {\n    \"video-editor-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/YOURDIRECTORY/video-editor-mcp\",\n        \"run\",\n        \"video-editor-mcp\",\n        \"YOURAPIKEY\"\n      ]\n    }\n  }\n  ```\n\n  With local Photos app access enabled (search your Photos app):\n\n  ```json\n    \"video-jungle-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/<PATH_TO>/video-jungle-mcp\",\n        \"run\",\n        \"video-editor-mcp\",\n        \"<YOURAPIKEY>\"\n      ],\n     \"env\": {\n\t      \"LOAD_PHOTOS_DB\": \"1\"\n      }\n    },\n  ```\n\n</details>\n\nBe sure to replace the directories with the directories you've placed the repository in on **your** computer.\n\n## Development\n\n### Building and Publishing\n\nTo prepare the package for distribution:\n\n1. Sync dependencies and update lockfile:\n```bash\nuv sync\n```\n\n2. Build package distributions:\n```bash\nuv build\n```\n\nThis will create source and wheel distributions in the `dist/` directory.\n\n3. Publish to PyPI:\n```bash\nuv publish\n```\n\nNote: You'll need to set PyPI credentials via environment variables or command flags:\n- Token: `--token` or `UV_PUBLISH_TOKEN`\n- Or username/password: `--username`/`UV_PUBLISH_USERNAME` and `--password`/`UV_PUBLISH_PASSWORD`\n\n### MCP Server Registry\n\n```\nmcp-name: io.github.burningion/video-editing-mcp\n```\n\n### Debugging\n\nSince MCP servers run over stdio, debugging can be challenging. For the best debugging\nexperience, we strongly recommend using the [MCP Inspector](https://github.com/modelcontextprotocol/inspector).\n\n\nYou can launch the MCP Inspector via [`npm`](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm) with this command:\n\n(Be sure to replace `YOURDIRECTORY` and `YOURAPIKEY` with the directory this repo is in, and your Video Jungle API key, found in the settings page.)\n\n```bash\nnpx @modelcontextprotocol/inspector uv run --directory /Users/YOURDIRECTORY/video-editor-mcp video-editor-mcp YOURAPIKEY\n```\n\n\nUpon launching, the Inspector will display a URL that you can access in your browser to begin debugging.\n\nAdditionally, I've added logging to `app.log` in the project directory. You can add logging to diagnose API calls via a:\n\n```\nlogging.info(\"this is a test log\")\n```\n\nA reasonable way to follow along as you're workin on the project is to open a terminal session and do a:\n\n```bash\n$ tail -n 90 -f app.log\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "videos",
        "upload",
        "editing",
        "video editing",
        "videos using",
        "generate videos"
      ],
      "category": "file-management"
    },
    "cablate--mcp-doc-forge": {
      "owner": "cablate",
      "name": "mcp-doc-forge",
      "url": "https://github.com/cablate/mcp-doc-forge",
      "imageUrl": "/freedevtools/mcp/pfp/cablate.webp",
      "description": "Comprehensive document processing capabilities including reading various document formats and converting them to different formats. Provides features for PDF manipulation such as merging and splitting, alongside document conversion tools.",
      "stars": 15,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-04T08:28:39Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/cablate-mcp-doc-forge-badge.png)](https://mseep.ai/app/cablate-mcp-doc-forge)\n\n# Simple Document Processing MCP Server\n[![smithery badge](https://smithery.ai/badge/@cablate/mcp-doc-forge)](https://smithery.ai/server/@cablate/mcp-doc-forge)\n\nA powerful Model Context Protocol (MCP) server providing comprehensive document processing capabilities.\n\n<a href=\"https://glama.ai/mcp/servers/pb9df6lnel\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/pb9df6lnel/badge\" alt=\"Simple Document Processing Server MCP server\" /></a>\n\n## Features\n\n### Document Reader\n- Read DOCX, PDF, TXT, HTML, CSV\n\n### Document Conversion\n- DOCX to HTML/PDF conversion\n- HTML to TXT/Markdown conversion\n- PDF manipulation (merge, split)\n\n### Text Processing\n- Multi-encoding transfer support (UTF-8, Big5, GBK)\n- Text formatting and cleaning\n- Text comparison and diff generation\n- Text splitting by lines or delimiter\n\n### HTML Processing\n- HTML cleaning and formatting\n- Resource extraction (images, links, videos)\n- Structure-preserving conversion\n\n## Installation\n\n### Installing via Smithery\n\nTo install Document Processing Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@cablate/mcp-doc-forge):\n\n```bash\nnpx -y @smithery/cli install @cablate/mcp-doc-forge --client claude\n```\n\n### Manual Installation\n```bash\nnpm install -g @cablate/mcp-doc-forge\n```\n\n\n## Usage\n\n### Cli\n\n```bash\nmcp-doc-forge\n```\n\n### With [Dive Desktop](https://github.com/OpenAgentPlatform/Dive)\n\n1. Click \"+ Add MCP Server\" in Dive Desktop\n2. Copy and paste this configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"searxng\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@cablate/mcp-doc-forge\"\n      ],\n      \"enabled\": true\n    }\n  }\n}\n```\n\n3. Click \"Save\" to install the MCP server\n\n## License\n\nMIT\n\n## Contributing\n\nWelcome community participation and contributions! Here are ways to contribute:\n\n- ⭐️ Star the project if you find it helpful\n- 🐛 Submit Issues: Report problems or provide suggestions\n- 🔧 Create Pull Requests: Submit code improvements\n\n## Contact\n\nIf you have any questions or suggestions, feel free to reach out:\n\n- 📧 Email: [reahtuoo310109@gmail.com](mailto:reahtuoo310109@gmail.com)\n- 📧 GitHub: [CabLate](https://github.com/cablate/)\n- 🤝 Collaboration: Welcome to discuss project cooperation\n- 📚 Technical Guidance: Sincere welcome for suggestions and guidance\n\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "document",
        "formats",
        "forge",
        "document processing",
        "document conversion",
        "doc forge"
      ],
      "category": "file-management"
    },
    "calebmwelsh--file-system-mcp-server": {
      "owner": "calebmwelsh",
      "name": "file-system-mcp-server",
      "url": "https://github.com/calebmwelsh/file-system-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/calebmwelsh.webp",
      "description": "Manage files and directories through a structured API for automated operations and system integration. Supports extensive file system management tasks on Windows and basic operations on macOS/Linux.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-28T18:48:23Z",
      "readme_content": "# File System MCP Server\n\nA powerful file system management server built with FastMCP that provides a comprehensive set of tools for file and directory operations. This server allows you to perform various file system operations through a structured API, making it ideal for automation and integration with other systems.\n\n## Platform Support\n\nThe server is designed to work across different operating systems, but with varying levels of functionality:\n\n### Windows\n- Full feature support\n- Drive listing\n- Special folders access\n- Windows-specific path handling\n- Detailed system information\n\n### macOS/Linux\n- Basic file operations\n- Directory operations\n- File search and metadata\n- Basic system information\n- Note: Some Windows-specific features are not available\n\n## Future Implementation\n\n### Planned macOS Support\n- Native path handling for macOS\n- macOS-specific system information retrieval\n- Integration with macOS file system features\n- Support for macOS-specific file attributes\n- Implementation of macOS-specific utilities (similar to windows_utils.py)\n\n### Planned Linux Support\n- Native path handling for Linux\n- Linux-specific system information retrieval\n- Integration with Linux file system features\n- Support for Linux file permissions and attributes\n- Implementation of Linux-specific utilities\n\n### Cross-Platform Improvements\n- Unified path handling system\n- Platform-agnostic drive detection\n- Consistent system information API\n- Standardized file attributes across platforms\n- Cross-platform file system event monitoring\n- Universal file collection system\n\n### Timeline\n- Phase 1: Basic cross-platform compatibility improvements\n- Phase 2: Platform-specific feature implementations\n- Phase 3: Advanced cross-platform features\n- Phase 4: Performance optimizations and refinements\n\n## Features\n\n### File Operations\n- Copy files with backup support\n- Move files with backup support\n- Delete files with safety checks\n- Read file contents\n- Write file contents\n- Get file information (size, creation time, modification time)\n- Search files by name pattern\n- Create file collections for organizing related files\n\n### Directory Operations\n- List directory contents\n- Create directories\n- Delete directories\n- List directories recursively (tree-like structure)\n- Search directories by name pattern\n\n### System Information\n- Get system information (OS, CPU, memory, disk usage)\n- Get disk information (total space, used space, free space)\n- Get directory information (file count, total size)\n\n## Project Structure\n\n```\nfile-system-mcp-server/\n├── fs_server.py            # Main server implementation\n├── windows_utils.py        # Windows-specific utilities (Windows only)\n├── requirements.txt        # Project dependencies\n└── test_prompts_example.md # Example test prompts\n```\n\n### Collections Storage\n\nCollections can be stored in any directory specified by the user. If no storage location is specified, collections will be stored in a default location within the project's `data/collections` directory.\n\nExample usage:\n```python\n# Store in default location\ncreate_collection(\"my_collection\", [\"file1.txt\", \"file2.txt\"])\n\n# Store in custom location\ncreate_collection(\"my_collection\", [\"file1.txt\", \"file2.txt\"], storage_path=\"/path/to/store\")\n```\n\n## Dependencies\n\n### Required Dependencies\n- FastMCP\n- Pydantic\n- pywin32 (Windows only)\n- WMI (Windows only)\n\nTo install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n## Setup\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/calebmwelsh/file-system-mcp-server.git\ncd file-system-mcp-server\n```\n\n2. Create and activate a virtual environment:\n```bash\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n```\n\n3. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n## Usage\n\nFor detailed MCP configuration instructions across different development environments (Claude, Cursor, Windsurf), visit:\n[MCP Configuration Guide](https://calebmwelsh.github.io/Configure-MCP/)\n\n### Integration with Claude\n\nTo integrate the File System MCP server with Claude, add the following to your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"file-system\": {\n      \"command\": \"/absolute/path/to/python\",\n      \"args\": [\n        \"/absolute/path/to/file-system-mcp-server/fs_server.py\"\n      ]\n    }\n  }\n}\n```\n\n#### Finding Your Python Path\n\nTo find your Python executable path, use the following command:\n\n**Windows (PowerShell):**\n```powershell\n(Get-Command python).Source\n```\n\n**Windows (Command Prompt/Terminal):**\n```cmd\nwhere python\n```\n\n**Linux/macOS (Terminal):**\n```bash\nwhich python\n```\n\nReplace `/absolute/path/to/python` with the output from the appropriate command above.\n\n#### Example Configuration\n\nFor Windows, your configuration might look like this:\n```json\n{\n  \"mcpServers\": {\n    \"file-system\": {\n      \"command\": \"C:\\\\Users\\\\YourUsername\\\\AppData\\\\Local\\\\Programs\\\\Python\\\\Python39\\\\python.exe\",\n      \"args\": [\n        \"C:\\\\Users\\\\YourUsername\\\\Documents/file-system-mcp-server/fs_server.py\"\n      ]\n    }\n  }\n}\n```\n\nFor macOS/Linux:\n```json\n{\n  \"mcpServers\": {\n    \"file-system\": {\n      \"command\": \"/usr/local/bin/python3\",\n      \"args\": [\n        \"/Users/YourUsername/Documents/file-system-mcp-server/fs_server.py\"\n      ]\n    }\n  }\n}\n```\n\nAfter adding the configuration:\n1. Save the `claude_desktop_config.json` file\n2. Restart Claude\n3. You can now use the file system tools by asking Claude to perform file operations\n\n## Available Tools\n\n### File Operations\n- `copy_file`: Copy a file with optional backup\n- `move_file`: Move a file with optional backup\n- `delete_file`: Delete a file with safety checks\n- `read_file`: Read file contents\n- `write_file`: Write contents to a file\n- `get_file_info`: Get detailed file information\n- `search_files`: Search files by name pattern\n- `create_collection`: Create a collection of files\n\n### Directory Operations\n- `list_directory`: List directory contents\n- `create_directory`: Create a new directory\n- `delete_directory`: Delete a directory\n- `list_directory_recursively`: Show directory structure in tree format\n- `search_directories`: Search directories by name pattern\n\n### System Information\n- `get_system_info`: Get system information\n- `get_disk_info`: Get disk usage information\n- `get_directory_info`: Get directory statistics\n\n## Known Issues\n\nThe following features are currently experiencing issues and may not work as expected:\n\n1. **Delete File Function**\n   - The `delete_file` function may fail to properly delete files in some cases\n   - Users are advised to verify file deletion manually or use alternative methods when critical\n   - Issue is under investigation and will be fixed in a future update\n\n2. **List Drives Function**\n   - The `list_drives` function may not correctly detect or display all available drives\n   - Some drives may be missing from the list or show incorrect information\n   - This is a known limitation and will be addressed in future updates\n\n3. **Platform-Specific Limitations**\n   - Windows-specific features are not available on macOS/Linux\n   - Some path handling may differ between platforms\n   - System information retrieval varies by platform\n\n## Error Handling\n\nThe server includes comprehensive error handling for:\n- Invalid file paths\n- File/directory not found\n- Permission issues\n- Disk space limitations\n- Invalid operations\n- Platform-specific errors\n\n## Security\n\n- All file operations include path validation\n- Backup files are created before destructive operations\n- System information access is restricted to safe operations\n- File operations are performed with proper error handling\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Built with FastMCP\n- Uses Pydantic for data validation\n- Inspired by modern file system management tools\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "macos",
        "file",
        "file management",
        "manage files",
        "file mcp"
      ],
      "category": "file-management"
    },
    "coderjun--shaka-packager-mcp-server": {
      "owner": "coderjun",
      "name": "shaka-packager-mcp-server",
      "url": "https://github.com/coderjun/shaka-packager-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/coderjun.webp",
      "description": "Supports advanced video transcoding, packaging, and analysis using Shaka Packager. Facilitates format conversion, DRM application, and content preparation for streaming, featuring intelligent path handling and error management.",
      "stars": 3,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-19T18:32:59Z",
      "readme_content": "# Shaka Packager MCP Server\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![Python Version](https://img.shields.io/badge/python-3.10%2B-blue)](https://www.python.org/downloads/)\n[![Status: Alpha](https://img.shields.io/badge/Status-Alpha%20%7C%20Experimental-red)](https://github.com/coderjun/shaka-packager-mcp)\n\n> **⚠️ EXPERIMENTAL STATUS DISCLAIMER**\n> \n> This project is in early alpha stage and is highly experimental. It is not recommended for production use. It is also likely **MESSY!**\n> \n> **Current limitations:**\n> - You may run into inconsistent behavior\n> - Advanced features (packaging, conversion, etc.) are still under active development\n> - Path translation between Docker and host environments may require manual configuration\n> - Expect frequent breaking changes and potential instability\n>\n> Please report any issues you encounter to help improve the project.\n\nAn MCP (Model Context Protocol) server that integrates [Shaka Packager](https://shaka-project.github.io/shaka-packager/) with Claude AI applications for video transcoding, packaging, and analysis.\n\nThis server works with the [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to enable Claude Desktop to access and process video files on your computer, turning Claude into a powerful assistant for media processing tasks.\n\n## Features\n\n- **Video Analysis**: Analyze video files to extract detailed stream information, codecs, bitrates, and more\n- **Media Packaging**: Convert videos for streaming in HLS and DASH formats with support for VOD and live streaming\n- **Advanced Options**: \n  - Apply DRM encryption (Widevine, PlayReady, FairPlay)\n  - Configure ad insertion markers\n  - Convert between formats (MP4, TS, etc.)\n- **Intelligent Path Handling**: Automatically translates paths between Docker and host environments\n- **Robust Error Management**: Provides meaningful error analysis with suggestions for resolution\n- **Command Assistance**: Helps correctly format Shaka Packager commands for optimal results\n- **Interactive Documentation**: Built-in help and examples to guide users through complex operations\n- **Detailed Outputs**: Comprehensive summaries and execution details for all operations\n\n## Prerequisites\n\n- Python 3.10 or higher\n- Shaka Packager installed and available in your PATH\n  - [Download from GitHub](https://github.com/shaka-project/shaka-packager/releases)\n  - Or build from source following [these instructions](https://shaka-project.github.io/shaka-packager/html/build_instructions.html)\n- An MCP-compatible client (like Claude Desktop)\n\n## Installation\n\n### Using pip or uv (coming soon)\n\nInstall the package with pip:\n\n```bash\npip install shaka-packager-mcp\n```\n\nOr with uv:\n\n```bash\nuv pip install shaka-packager-mcp\n```\n\n### From source (recommended)\n\n```bash\ngit clone https://github.com/coderjun/shaka-packager-mcp.git\ncd shaka-packager-mcp\npip install -e .\n```\n\nOr with uv:\n\n```bash\ngit clone https://github.com/coderjun/shaka-packager-mcp.git\ncd shaka-packager-mcp\nuv pip install -e .\n```\n\n## Claude Desktop Integration\n\nSince Claude Desktop doesn't directly support uploading video files, we'll use a two-server approach:\n1. A simplified **filesystem MCP server** to access video files on your computer\n2. The **Shaka Packager MCP server** to analyze and process those videos\n\n### Step 1: Set Up the MCP Filesystem Server\n\nUse the official MCP filesystem server to allow Claude to access your video files:\n\n1. Install the official filesystem server with Docker:\n   ```bash\n   docker pull mcp/filesystem\n   ```\n\n2. Alternatively, you can build it from source following the instructions in the [Filesystem MCP Server repository](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem)\n\n### Step 2: Find the Configuration File\n\nLocate your Claude Desktop configuration file:\n\n- **macOS**: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- **Windows**: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\nIf the file doesn't exist, create it.\n\n### Step 3: Add Both Servers to the Configuration\n\nAdd the following configuration, making sure to use absolute paths:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--mount\", \"type=bind,src=/PATH/TO/VIDEOS/DIRECTORY,dst=/projects/video-drop\",\n        \"mcp/filesystem\",\n        \"/projects\"\n      ]\n    },\n    \"shaka-packager\": {\n      \"command\": \"/ABSOLUTE/PATH/TO/uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"/ABSOLUTE/PATH/TO/shaka_packager_mcp.py\"\n      ],\n      \"env\": {\n        \"VIDEO_PATH\": \"/PATH/TO/VIDEOS/DIRECTORY\",\n        \"SHAKA_PACKAGER_PATH\": \"/PATH/TO/PACKAGER\"\n      }\n    }\n  }\n}\n```\n\nReplace:\n- `/PATH/TO/VIDEOS/DIRECTORY` with the path to the directory containing your video files\n- `/ABSOLUTE/PATH/TO/uv` with the full path to your uv executable\n- `/ABSOLUTE/PATH/TO/shaka_packager_mcp.py` with the full path to the script file\n- `/PATH/TO/PACKAGER` with the full path to your Shaka Packager executable\n\nFor example:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--mount\", \"type=bind,src=/Users/username/Videos,dst=/projects/video-drop\",\n        \"mcp/filesystem\",\n        \"/projects\"\n      ]\n    },\n    \"shaka-packager\": {\n      \"command\": \"/Users/username/.local/bin/uv\",\n      \"args\": [\n        \"run\",\n        \"--with\",\n        \"mcp[cli]\",\n        \"/Users/username/Development/shaka-packager-mcp/shaka_packager_mcp.py\"\n      ],\n      \"env\": {\n        \"VIDEO_PATH\": \"/Users/username/Videos\",\n        \"SHAKA_PACKAGER_PATH\": \"/Users/username/.shaka/packager\"\n      }\n    }\n  }\n}\n```\n\n### Step 4: Restart Claude Desktop\n\nAfter editing the configuration file, restart Claude Desktop to apply the changes.\n\n### How to Use the Two-Server Approach\n\n1. First, browse your video files using the simplified filesystem server:\n   - Ask Claude to \"List the files in my video directory\"\n   - Navigate to the video file you want to analyze or process\n\n2. Once you've found your video file, use its path with the Shaka Packager tools:\n   - For analysis: \"Please analyze this video: /Users/username/Videos/example.mp4\"\n   - For processing: \"Please package this video for HLS: /Users/username/Videos/example.mp4\"\n\n### Troubleshooting\n\nIf you encounter any issues:\n\n1. Make sure both servers are properly configured with absolute paths\n2. Verify that Shaka Packager is installed and accessible\n3. Ensure the directory specified for the filesystem server exists and contains videos\n4. Check Claude Desktop logs for errors at:\n   - macOS: `~/Library/Logs/Claude/mcp*.log`\n   - Windows: `%APPDATA%\\Claude\\logs\\mcp*.log`\n\n## Usage\n\nOnce both the Filesystem MCP server and the Shaka Packager MCP server are running in Claude Desktop:\n\n1. **Access your video files**:\n   ```\n   Please show me the files in my Videos directory\n   ```\n\n2. **Navigate to your video file**:\n   ```\n   Please show me the files in the Movies subdirectory\n   ```\n\n3. **Copy the file:// URI path of the video** you want to process\n\n4. **Use the Shaka Packager tools with the file path**:\n   ```\n   Please analyze this video: file:///Users/username/Videos/my_video.mp4\n   ```\n   or\n   ```\n   Please package this video for HLS and DASH streaming: file:///Users/username/Videos/my_video.mp4\n   ```\n\n5. The server will execute the appropriate Shaka Packager command and provide a detailed summary of the results\n\nYou can also use direct file paths if you know the exact location of your video files:\n```\nPlease analyze this video: /Users/username/Videos/my_video.mp4\n```\n\n## Tools\n\nThe server provides these tools:\n\n1. **analyze_video**: Examines a video file and provides detailed stream information with intelligent error handling\n2. **run_shaka_packager**: Executes any Shaka Packager command with custom arguments and proper path handling\n3. **get_shaka_options**: Retrieves available command options and version information\n4. **get_shaka_documentation**: Provides comprehensive documentation and examples for using Shaka Packager\n\n## Prompts\n\nThe server includes these prompt templates:\n\n- MP4 to TS conversion\n- VOD packaging in HLS and DASH\n- Live streaming packaging\n- Content encryption\n- Ad insertion preparation\n- Video analysis\n- Command format reminder\n- Error interpretation guidance\n\n## Configuration\n\nThe server can be configured using environment variables:\n\n- `SHAKA_PACKAGER_PATH`: Path to the Shaka Packager executable (highly recommended for Claude Desktop)\n- `VIDEO_PATH`: Path to your local video directory (used for translating paths between Docker and host)\n- `DOCKER_PATH`: Docker container mount path (default: \"/projects/video-drop\")\n- `TEMP_DIR`: Custom temporary directory for file uploads\n- `LOG_LEVEL`: Logging level (DEBUG, INFO, WARNING, ERROR, CRITICAL)\n- `COMMAND_TIMEOUT`: Timeout in seconds for Shaka Packager commands (default: 300)\n\nYou can set these in:\n1. Your Claude Desktop configuration file (preferred for `SHAKA_PACKAGER_PATH` and `VIDEO_PATH`)\n2. Your environment variables\n3. A `.env` file in the same directory as the script\n\nExample `.env` file:\n```\nSHAKA_PACKAGER_PATH=/usr/local/bin/packager\nVIDEO_PATH=/Users/yourusername/Videos\nLOG_LEVEL=DEBUG\n```\n\n## Development\n\n### Setting up a development environment\n\n```bash\n# Clone the repository\ngit clone https://github.com/coderjun/shaka-packager-mcp.git\ncd shaka-packager-mcp\n\n# Install development dependencies with pip\npip install -e \".[dev]\"\n\n# Or with uv\nuv pip install -e \".[dev]\"\n```\n\n### Running tests\n\n```bash\npytest\n```\n\n### Code formatting\n\n```bash\nblack .\nisort .\n```\n\n### Understanding the Code Structure\n\nThe main components of the Shaka Packager MCP server are:\n\n- `shaka_packager_mcp.py`: Main server implementation with MCP tools and prompts\n- `tests/`: Test suite for verifying functionality\n\nThis server is designed to work with the official MCP filesystem server for accessing video files.\n\n### Key Features in the Implementation\n\n- **Robust path handling**: Automatically translates paths between Docker and host environments\n- **Smart error handling**: Provides meaningful error messages and suggestions\n- **Command syntax assistance**: Helps correctly format Shaka Packager commands\n- **Documentation integration**: Provides comprehensive documentation and examples\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## Getting Help\n\nFeel free to use an AI code copilot, the author does.\n\nIf you encounter any issues or have questions:\n\n1. Check the troubleshooting section in this README\n2. Review the [Shaka Packager documentation](https://shaka-project.github.io/shaka-packager/html/index.html)\n3. Use the `get_shaka_documentation` tool for interactive help within Claude\n4. [Open an issue](https://github.com/coderjun/shaka-packager-mcp/issues) on GitHub\n\n## Acknowledgements\n\n- [Shaka Packager](https://github.com/shaka-project/shaka-packager) for the powerful video processing capabilities\n- [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) for the communication framework\n- [Claude](https://claude.ai) for the AI assistant capabilities\n- [Anthropic](https://www.anthropic.com/) for developing Claude and the MCP standard",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "packager",
        "coderjun",
        "streaming",
        "shaka packager",
        "packager mcp",
        "coderjun shaka"
      ],
      "category": "file-management"
    },
    "codyde--mcp-file-tool": {
      "owner": "codyde",
      "name": "mcp-file-tool",
      "url": "https://github.com/codyde/mcp-file-tool",
      "imageUrl": "/freedevtools/mcp/pfp/codyde.webp",
      "description": "Provides file system operations through a standardized API, enabling functionalities such as creating, reading, and listing files. Includes performance monitoring and error tracking integration.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-02-26T07:37:07Z",
      "readme_content": "# MCP File Server\n\nA Model Context Protocol (MCP) server implementation providing file system operations through a standardized interface.\n\n## Overview\n\nThe MCP File Server enables AI models to perform file operations on the local file system through a standardized API. It's built using the [Model Context Protocol](https://github.com/ModelContextProtocol/mcp) SDK and provides tools for reading, creating, and listing files.\n\n## Features\n\n- **Create Files**: Create new files with specified content\n- **Read Files**: Read the contents of existing files\n- **List Directory Contents**: List files and directories with detailed information\n- **Performance Monitoring**: Built-in Sentry integration for error tracking and performance monitoring\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Usage\n\nStart the MCP File Server:\n\n```bash\nnode src/index.js\n```\n\nThe server communicates through stdin/stdout using the MCP protocol.\n\n## Available Tools\n\n### createfile\n\nCreates a new file at the specified path with the provided content.\n\n**Parameters:**\n- `filePath`: Path where the file should be created\n- `content`: Content to write to the file\n\n**Returns:**\n- Success message with file path and size information\n\n### readfile\n\nReads the content of a file at the specified path.\n\n**Parameters:**\n- `filePath`: Path to the file to read\n\n**Returns:**\n- The content of the file\n\n### listfiles\n\nLists files and directories at the specified path.\n\n**Parameters:**\n- `path`: Directory path to list contents from\n\n**Returns:**\n- A markdown table containing file names, sizes, and types\n\n## Environment Variables\n\n- `SENTRY_DSN`: Sentry Data Source Name for error tracking (optional)\n\n## Dependencies\n\n- `@modelcontextprotocol/sdk`: The MCP SDK package\n- `zod`: Schema validation\n- `@sentry/node`: Error tracking and performance monitoring\n\n## Examples\n\nExamples of how to call these tools through the MCP protocol:\n\n```json\n{\n  \"name\": \"createfile\",\n  \"params\": {\n    \"filePath\": \"example/test.txt\",\n    \"content\": \"Hello, world!\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"readfile\",\n  \"params\": {\n    \"filePath\": \"example/test.txt\"\n  }\n}\n```\n\n```json\n{\n  \"name\": \"listfiles\",\n  \"params\": {\n    \"path\": \"example\"\n  }\n}\n``` ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "file",
        "mcp",
        "file tool",
        "mcp file",
        "file management"
      ],
      "category": "file-management"
    },
    "convertguru--file-convert-mcp": {
      "owner": "convertguru",
      "name": "file-convert-mcp",
      "url": "https://github.com/convertguru/file-convert-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/convertguru.webp",
      "description": "Converts files between various formats including images, documents, audio, video, and data files to popular formats like PDF, JPG, MP4, and HTML. Utilizes AI and other detection methods for accurate file type recognition and conversion.",
      "stars": 3,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-27T10:50:50Z",
      "readme_content": "# File Convert MCP Server\n[![smithery badge](https://smithery.ai/badge/@convertguru/file-convert-mcp)](https://smithery.ai/server/@convertguru/file-convert-mcp)\n\nA Model Context Protocol (MCP) server for converting files between various formats.\n\nFile Convert is an MCP server designed to handle the conversion of a wide array of file formats, including images, office documents, audio, video, text, and data files. It aims to provide seamless transformation into popular formats such as PDF, JPG, MP4, and HTML, among others. This server offers a set of powerful tools to convert diverse file types into easily accessible and widely compatible formats like PDF, JPG, PNG, TXT.\n\n## ✨ Features\n\n- **Intelligent File Type Detection:** Employs a combination of AI, TrID, and magic bytes for accurate file type identification.\n- **Versatile File Conversion:** Supports conversion between numerous file types and the following popular formats:\n    - **Images:** Handles a vast range of formats, including many legacy ones. Converts to PDF, JPG, PNG.\n    - **Office Documents:** Converts to PDF, TXT, HTML.\n    - **Audio/Video:** Converts to MP3, MP4.\n    - **Databases:** Converts to CSV.\n    - **Various Files:** Offers conversion capabilities for other file types as well.\n\n## 🛠️ Requirements\n\n1. **Python:** Version 3.12 or higher is required.\n2. **uv Tool:** Install the [Python uv tool](https://docs.astral.sh/uv/getting-started/installation/) for efficient dependency management and easy execution of the MCP server.\n3. **API Key (Development):** As of May 2025, the MCP is in its testing phase, and **no API key is currently required** for development. For future production use, please [contact the Convert.Guru team](https://convert.guru/contact) to obtain an API key.\n\n## 🚀 Usage with Desktop App\n\nTo integrate this server with your desktop application, add the following configuration to your app's server settings. If necessary, adjust the absolute path to the `uv`/`uvx` executables (or `uv.exe`/`uvx.exe` on Windows).\n\n**Using `uvx` (recommended):**\n\n```json\n{\n  \"mcpServers\": {\n    \"file-convert\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--from\", \"git+https://github.com/convertguru/file-convert-mcp.git\", \"file-convert-mcp\"],\n      \"env\": {\n        \"CONVERT_GURU_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n**If you have cloned the repository locally (adjust paths as needed):**\n\n```json\n{\n  \"mcpServers\": {\n    \"file-convert\": {\n      \"command\": \"/home/User/.local/bin/uv\",\n      \"args\": [\"--directory\", \"/home/User/file-convert-mcp/src/file_convert_mcp\", \"run\", \"server.py\"],\n      \"env\": {\n        \"CONVERT_GURU_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n**Using local `uvx`:**\n\n```json\n{\n  \"mcpServers\": {\n    \"file-convert\": {\n      \"command\": \"uvx\",\n      \"args\": [\"--from\", \"/home/User/file-convert-mcp\", \"file-convert-mcp\"],\n      \"env\": {\n        \"CONVERT_GURU_API_KEY\": \"your_api_key_here\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\nThe MCP server supports the following environment variables:\n\n- **`CONVERT_GURU_API_KEY`**: Your Convert.Guru API key (optional for development)\n- **`TRANSPORT`**: Transport method for the MCP server\n  - `\"stdio\"` (default): Standard input/output transport\n  - `\"http\"`: HTTP transport (streamable) with REST API endpoints\n- **`PORT`**: Port number for HTTP transport (default: 8000, only used when `TRANSPORT=http`)\n\nWhen using HTTP transport, the server provides additional endpoints:\n- `GET /health` - Health check endpoint\n- `GET /tools` - List of available MCP tools\n\nAlso, see this guide on how to [set up MCP tools in Claude Desktop](https://modelcontextprotocol.io/quickstart/user#for-claude-desktop-users).\n\n### Installing via Smithery\n\nTo install file-convert-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@convertguru/file-convert-mcp):\n\n```bash\nnpx -y @smithery/cli install @convertguru/file-convert-mcp --client claude\n```\n\n## 🛠️ Development\n\nGet started with local development by following these steps:\n\n**1. Clone the repository:**\n\n```bash\ngit clone https://github.com/convertguru/file-convert-mcp.git\n```\n\n**2. Fetch and cache Python dependencies (optional, `uvx` handles this automatically):**\n\n```bash\ncd file-convert-mcp\nuv sync\ncd ..\n```\n\n**3. Create .env file with your (optional for now) API key:**\n\n```bash\necho \"CONVERT_GURU_API_KEY=your_api_key_here\" > file-convert-mcp/.env\n```\n\n**4. Run the MCP server locally using various `uv` commands:**\n\n```bash\n# Using uvx with .env file from the local directory\ncd file-convert-mcp\nUV_ENV_FILE=.env uvx --from ./file-convert-mcp file-convert-mcp\n\n# OR using uv directly to run the server script\nuv run file-convert-mcp/src/file_convert_mcp/server.py\n\n# OR specifying the directory for uv\nuv --directory file-convert-mcp/src/file_convert_mcp run server.py\n\n# OR navigating into the server directory\ncd file-convert-mcp/src/file_convert_mcp\nuv run server.py\n\n# OR using uvx to fetch the core from the GitHub repository + local .env file\nUV_ENV_FILE=.env uvx --from git+https://github.com/convertguru/file-convert-mcp.git file-convert-mcp\n\n# OR run with HTTP transport on custom port\nTRANSPORT=http PORT=9000 uv run file-convert-mcp/src/file_convert_mcp/server.py\n\n# OR run with stdio transport (default)\nTRANSPORT=stdio uv run file-convert-mcp/src/file_convert_mcp/server.py\n```\n\n**5. Create .env file with your configuration (optional for now):**\n\n```bash\n# Basic configuration\necho \"CONVERT_GURU_API_KEY=your_api_key_here\" > file-convert-mcp/.env\n\n# OR with transport configuration\necho \"CONVERT_GURU_API_KEY=your_api_key_here\" > file-convert-mcp/.env\necho \"TRANSPORT=http\" >> file-convert-mcp/.env\necho \"PORT=8000\" >> file-convert-mcp/.env\n```\n\n**6. Modify the server logic if needed:**\nEdit the main server file located at `src/file_convert_mcp/server.py.`\n\n**7. Clearing the `uv` Cache (if needed):**\nIf `uv` has cached an older version of the code in `~/.cache/uv`, you might need to clear the cache. Alternatively, use `uv` with the `-n` or `--no-cache` option to bypass it.\n\n## ⚙️ Available Tools\n\nThe MCP server provides the following tools:\n\n* `detect_file_type`: Analyzes the first 200 bytes of an uploaded file and uses the Convert.Guru API to determine its type.\n* `convert_file`: Converts a given file to a specified output format. The desired file extension should be passed as the `ext_out` parameter.\n\n## 📜 License\n\nVisit us [https://convert.guru](https://convert.guru/)\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for complete details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "formats",
        "convertguru",
        "files",
        "converts files",
        "file convert",
        "convertguru file"
      ],
      "category": "file-management"
    },
    "crawlab-team--crawlab-mcp": {
      "owner": "crawlab-team",
      "name": "crawlab-mcp",
      "url": "https://github.com/crawlab-team/crawlab-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/crawlab-team.webp",
      "description": "Interact with Crawlab's spider and task management features, perform file operations, and access resources through a standardized interface for seamless AI application integration.",
      "stars": 5,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-10T04:51:12Z",
      "readme_content": "# Crawlab MCP Server\n\nThis is a Model Context Protocol (MCP) server for Crawlab, allowing AI applications to interact with Crawlab's functionality.\n\n## Overview\n\nThe MCP server provides a standardized way for AI applications to access Crawlab's features, including:\n\n- Spider management (create, read, update, delete)\n- Task management (run, cancel, restart)\n- File management (read, write)\n- Resource access (spiders, tasks)\n\n## Architecture\n\nThe MCP Server/Client architecture facilitates communication between AI applications and Crawlab:\n\n```mermaid\ngraph TB\n    User[User] --> Client[MCP Client]\n    Client --> LLM[LLM Provider]\n    Client <--> Server[MCP Server]\n    Server <--> Crawlab[Crawlab API]\n\n    subgraph \"MCP System\"\n        Client\n        Server\n    end\n\n    subgraph \"Crawlab System\"\n        Crawlab\n        DB[(Database)]\n        Crawlab <--> DB\n    end\n\n    class User,LLM,Crawlab,DB external;\n    class Client,Server internal;\n\n    %% Flow annotations\n    LLM -.-> |Tool calls| Client\n    Client -.-> |Executes tool calls| Server\n    Server -.-> |API requests| Crawlab\n    Crawlab -.-> |API responses| Server\n    Server -.-> |Tool results| Client\n    Client -.-> |Human-readable response| User\n\n    classDef external fill:#f9f9f9,stroke:#333,stroke-width:1px;\n    classDef internal fill:#d9edf7,stroke:#31708f,stroke-width:1px;\n```\n\n### Communication Flow\n\n1. **User Query**: The user sends a natural language query to the MCP Client\n2. **LLM Processing**: The Client forwards the query to an LLM provider (e.g., Claude, OpenAI)\n3. **Tool Selection**: The LLM identifies necessary tools and generates tool calls\n4. **Tool Execution**: The Client sends tool calls to the MCP Server\n5. **API Interaction**: The Server executes the corresponding Crawlab API requests\n6. **Response Generation**: Results flow back through the Server to the Client to the LLM\n7. **User Response**: The Client delivers the final human-readable response to the user\n\n## Installation and Usage\n\n### Option 1: Install as a Python package\n\nYou can install the MCP server as a Python package, which provides a convenient CLI:\n\n```bash\n# Install from source\npip install -e .\n\n# Or install from GitHub (when available)\n# pip install git+https://github.com/crawlab-team/crawlab-mcp-server.git\n```\n\nAfter installation, you can use the CLI:\n\n```bash\n# Start the MCP server\ncrawlab_mcp-mcp server [--spec PATH_TO_SPEC] [--host HOST] [--port PORT]\n\n# Start the MCP client\ncrawlab_mcp-mcp client SERVER_URL\n```\n\n### Option 2: Running Locally\n\n### Prerequisites\n\n- Python 3.8+\n- Crawlab instance running and accessible\n- API token from Crawlab\n\n### Configuration\n\n1. Copy the `.env.example` file to `.env`:\n   ```\n   cp .env.example .env\n   ```\n\n2. Edit the `.env` file with your Crawlab API details:\n   ```\n   CRAWLAB_API_BASE_URL=http://your-crawlab-instance:8080/api\n   CRAWLAB_API_TOKEN=your_api_token_here\n   ```\n\n### Running Locally\n\n1. Install dependencies:\n   ```\n   pip install -r requirements.txt\n   ```\n\n2. Run the server:\n   ```\n   python server.py\n   ```\n\n### Running with Docker\n\n1. Build the Docker image:\n   ```\n   docker build -t crawlab-mcp-server .\n   ```\n\n2. Run the container:\n   ```\n   docker run -p 8000:8000 --env-file .env crawlab-mcp-server\n   ```\n\n## Integration with Docker Compose\n\nTo add the MCP server to your existing Crawlab Docker Compose setup, add the following service to your `docker-compose.yml`:\n\n```yaml\nservices:\n  # ... existing Crawlab services\n  \n  mcp-server:\n    build: ./backend/mcp-server\n    ports:\n      - \"8000:8000\"\n    environment:\n      - CRAWLAB_API_BASE_URL=http://backend:8000/api\n      - CRAWLAB_API_TOKEN=your_api_token_here\n    depends_on:\n      - backend\n```\n\n## Using with AI Applications\n\nThe MCP server enables AI applications to interact with Crawlab through natural language. Following the architecture diagram above, here's how to use the MCP system:\n\n### Setting Up the Connection\n\n1. **Start the MCP Server**: Make sure your MCP server is running and accessible\n2. **Configure the AI Client**: Connect your AI application to the MCP server \n\n### Example: Using with Claude Desktop\n\n1. Open Claude Desktop\n2. Go to Settings > MCP Servers\n3. Add a new server with the URL of your MCP server (e.g., `http://localhost:8000`)\n4. In a conversation with Claude, you can now use Crawlab functionality by describing what you want to do in natural language\n\n### Example Interactions\n\nBased on our architecture, here are example interactions with the system:\n\n**Create a Spider:**\n```\nUser: \"Create a new spider named 'Product Scraper' for the e-commerce project\"\n↓\nLLM identifies intent and calls the create_spider tool\n↓\nMCP Server executes the API call to Crawlab\n↓\nSpider is created and details are returned to the user\n```\n\n**Run a Task:**\n```\nUser: \"Run the 'Product Scraper' spider on all available nodes\"\n↓\nLLM calls the run_spider tool with appropriate parameters\n↓\nMCP Server sends the command to Crawlab API\n↓\nTask is started and confirmation is returned to the user\n```\n\n### Available Commands\n\nYou can interact with the system using natural language commands like:\n\n- \"List all my spiders\"\n- \"Create a new spider with these specifications...\"\n- \"Show me the code for the spider named X\"\n- \"Update the file main.py in spider X with this code...\"\n- \"Run spider X and notify me when it's complete\"\n- \"Show me the results of the last run of spider X\"\n\n## Available Resources and Tools\n\nThese are the underlying tools that power the natural language interactions:\n\n### Resources\n\n- `spiders`: List all spiders\n- `tasks`: List all tasks\n\n### Tools\n\n#### Spider Management\n- `get_spider`: Get details of a specific spider\n- `create_spider`: Create a new spider\n- `update_spider`: Update an existing spider\n- `delete_spider`: Delete a spider\n\n#### Task Management\n- `get_task`: Get details of a specific task\n- `run_spider`: Run a spider\n- `cancel_task`: Cancel a running task\n- `restart_task`: Restart a task\n- `get_task_logs`: Get logs for a task\n\n#### File Management\n- `get_spider_files`: List files for a spider\n- `get_spider_file`: Get content of a specific file\n- `save_spider_file`: Save content to a file",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "crawlab",
        "ai",
        "spider",
        "management crawlab",
        "interact crawlab",
        "crawlab mcp"
      ],
      "category": "file-management"
    },
    "cyanheads--filesystem-mcp-server": {
      "owner": "cyanheads",
      "name": "filesystem-mcp-server",
      "url": "https://github.com/cyanheads/filesystem-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cyanheads.webp",
      "description": "Provides capabilities for secure interaction with the local filesystem, enabling reading, writing, and management of files and directories. Supports advanced file operations and targeted updates to enhance AI workflows.",
      "stars": 21,
      "forks": 15,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-09-24T16:36:18Z",
      "readme_content": "# Filesystem MCP Server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-^5.8.3-blue.svg)](https://www.typescriptlang.org/)\n[![Model Context Protocol](https://img.shields.io/badge/MCP-^1.12.0-green.svg)](https://modelcontextprotocol.io/)\n[![Version](https://img.shields.io/badge/Version-1.0.4-blue.svg)]()\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Beta-orange.svg)]()\n[![GitHub](https://img.shields.io/github/stars/cyanheads/filesystem-mcp-server?style=social)](https://github.com/cyanheads/filesystem-mcp-server)\n\n**Empower your AI agents with robust, platform-agnostic file system capabilities, now with STDIO & Streamable HTTP transport options.**\n\nThis [Model Context Protocol (MCP)](https://modelcontextprotocol.io/) server provides a secure and reliable interface for AI agents to interact with the local filesystem. It enables reading, writing, updating, and managing files and directories, backed by a production-ready TypeScript foundation featuring comprehensive logging, error handling, security measures, and now supporting both **STDIO and HTTP transports**.\n\n## Table of Contents\n\n- [Overview](#overview)\n- [Features](#features)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Usage with MCP Clients](#usage-with-mcp-clients)\n- [Available Tools](#available-tools)\n- [Project Structure](#project-structure)\n- [Development](#development)\n- [License](#license)\n\n## Overview\n\nThe Model Context Protocol (MCP) is a standard framework allowing AI models to securely interact with external tools and data sources (resources). This server implements the MCP standard to expose essential filesystem operations as tools, enabling AI agents to:\n\n- Read and analyze file contents.\n- Create, modify, or overwrite files.\n- Manage directories and file paths.\n- Perform targeted updates within files.\n\nBuilt with TypeScript, the server emphasizes type safety, modularity, and robust error handling, making it suitable for reliable integration into AI workflows. It now supports both STDIO for direct process communication and HTTP for network-based interactions.\n\n### Architecture\n\nThe server employs a layered architecture for clarity and maintainability:\n\n```mermaid\nflowchart TB\n    subgraph TransportLayer[\"Transport Layer\"]\n        direction LR\n        STDIO[\"STDIO Transport\"]\n        HTTP[\"HTTP Transport (Express, JWT Auth)\"]\n    end\n\n    subgraph APILayer[\"API Layer\"]\n        direction LR\n        MCP[\"MCP Protocol Interface\"]\n        Val[\"Input Validation (Zod)\"]\n        PathSan[\"Path Sanitization\"]\n\n        MCP --> Val --> PathSan\n    end\n\n    subgraph CoreServices[\"Core Services\"]\n        direction LR\n        Config[\"Configuration (Zod-validated Env Vars)\"]\n        Logger[\"Logging (Winston, Context-aware)\"]\n        ErrorH[\"Error Handling (McpError, ErrorHandler)\"]\n        ServerLogic[\"MCP Server Logic\"]\n        State[\"Session State (Default Path)\"]\n\n        Config --> ServerLogic\n        Logger --> ServerLogic & ErrorH\n        ErrorH --> ServerLogic\n        State --> ServerLogic\n    end\n\n    subgraph ToolImpl[\"Tool Implementation\"]\n        direction LR\n        FSTools[\"Filesystem Tools\"]\n        Utils[\"Core Utilities (Internal, Security, Metrics, Parsing)\"]\n\n        FSTools --> ServerLogic\n        Utils -- Used by --> FSTools\n        Utils -- Used by --> CoreServices\n        Utils -- Used by --> APILayer\n    end\n\n    TransportLayer --> MCP\n    PathSan --> FSTools\n\n    classDef layer fill:#2d3748,stroke:#4299e1,stroke-width:3px,rx:5,color:#fff\n    classDef component fill:#1a202c,stroke:#a0aec0,stroke-width:2px,rx:3,color:#fff\n    class TransportLayer,APILayer,CoreServices,ToolImpl layer\n    class STDIO,HTTP,MCP,Val,PathSan,Config,Logger,ErrorH,ServerLogic,State,FSTools,Utils component\n```\n\n- **Transport Layer**: Handles communication via STDIO or HTTP (with Express.js and JWT authentication).\n- **API Layer**: Manages MCP communication, validates inputs using Zod, and sanitizes paths.\n- **Core Services**: Oversees configuration (Zod-validated environment variables), context-aware logging, standardized error reporting, session state (like the default working directory), and the main MCP server instance.\n- **Tool Implementation**: Contains the specific logic for each filesystem tool, leveraging a refactored set of shared utilities categorized into internal, security, metrics, and parsing modules.\n\n## Features\n\n- **Comprehensive File Operations**: Tools for reading, writing, listing, deleting, moving, and copying files and directories.\n- **Targeted Updates**: `update_file` tool allows precise search-and-replace operations within files, supporting plain text and regex.\n- **Session-Aware Path Management**: `set_filesystem_default` tool establishes a default working directory for resolving relative paths during a session.\n- **Dual Transport Support**:\n  - **STDIO**: For direct, efficient communication when run as a child process.\n  - **HTTP**: For network-based interaction, featuring RESTful endpoints, Server-Sent Events (SSE) for streaming, and JWT-based authentication.\n- **Security First**:\n  - Built-in path sanitization prevents directory traversal attacks.\n  - JWT authentication for HTTP transport.\n  - Input validation with Zod.\n- **Robust Foundation**: Includes production-grade utilities, now reorganized for better modularity:\n  - **Internal Utilities**: Context-aware logging (Winston), standardized error handling (`McpError`, `ErrorHandler`), request context management.\n  - **Security Utilities**: Input sanitization, rate limiting, UUID and prefixed ID generation.\n  - **Metrics Utilities**: Token counting.\n  - **Parsing Utilities**: Natural language date parsing, partial JSON parsing.\n- **Enhanced Configuration**: Zod-validated environment variables for type-safe and reliable setup.\n- **Type Safety**: Fully implemented in TypeScript for improved reliability and maintainability.\n\n## Installation\n\n### Steps\n\n1.  **Clone the repository:**\n    ```bash\n    git clone https://github.com/cyanheads/filesystem-mcp-server.git\n    cd filesystem-mcp-server\n    ```\n2.  **Install dependencies:**\n    ```bash\n    npm install\n    ```\n3.  **Build the project:**\n    ```bash\n    npm run build\n    ```\n    This compiles the TypeScript code to JavaScript in the `dist/` directory and makes the main script executable. The executable will be located at `dist/index.js`.\n\n## Configuration\n\nConfigure the server using environment variables (a `.env` file is supported):\n\n**Core Server Settings:**\n\n- **`MCP_LOG_LEVEL`** (Optional): Minimum logging level (e.g., `debug`, `info`, `warn`, `error`). Defaults to `debug`.\n- **`LOGS_DIR`** (Optional): Directory for log files. Defaults to `./logs` in the project root.\n- **`NODE_ENV`** (Optional): Runtime environment (e.g., `development`, `production`). Defaults to `development`.\n\n**Transport Settings:**\n\n- **`MCP_TRANSPORT_TYPE`** (Optional): Communication transport (`stdio` or `http`). Defaults to `stdio`.\n  - **If `http` is selected:**\n    - **`MCP_HTTP_PORT`** (Optional): Port for the HTTP server. Defaults to `3010`.\n    - **`MCP_HTTP_HOST`** (Optional): Host for the HTTP server. Defaults to `127.0.0.1`.\n    - **`MCP_ALLOWED_ORIGINS`** (Optional): Comma-separated list of allowed CORS origins (e.g., `http://localhost:3000,https://example.com`).\n    - **`MCP_AUTH_SECRET_KEY`** (Required for HTTP Auth): A secure secret key (at least 32 characters long) for JWT authentication. **CRITICAL for production.**\n\n**Filesystem Security:**\n\n- **`FS_BASE_DIRECTORY`** (Optional): Defines the root directory for all filesystem operations. This can be an **absolute path** or a **path relative to the project root** (e.g., `./data_sandbox`). If set, the server's tools will be restricted to accessing files and directories only within this specified (and resolved absolute) path and its subdirectories. This is a crucial security feature to prevent unintended access to other parts of the filesystem. If not set (which is not recommended for production environments), a warning will be logged, and operations will not be restricted.\n\n**LLM & API Integration (Optional):**\n\n- **`OPENROUTER_APP_URL`**: Your application's URL for OpenRouter.\n- **`OPENROUTER_APP_NAME`**: Your application's name for OpenRouter. Defaults to `MCP_SERVER_NAME`.\n- **`OPENROUTER_API_KEY`**: API key for OpenRouter services.\n- **`LLM_DEFAULT_MODEL`**: Default LLM model to use (e.g., `google/gemini-2.5-flash-preview-05-20`).\n- **`LLM_DEFAULT_TEMPERATURE`**, **`LLM_DEFAULT_TOP_P`**, **`LLM_DEFAULT_MAX_TOKENS`**, **`LLM_DEFAULT_TOP_K`**, **`LLM_DEFAULT_MIN_P`**: Default parameters for LLM calls.\n- **`GEMINI_API_KEY`**: API key for Google Gemini services.\n\n**OAuth Proxy Integration (Optional, for advanced scenarios):**\n\n- **`OAUTH_PROXY_AUTHORIZATION_URL`**, **`OAUTH_PROXY_TOKEN_URL`**, **`OAUTH_PROXY_REVOCATION_URL`**, **`OAUTH_PROXY_ISSUER_URL`**, **`OAUTH_PROXY_SERVICE_DOCUMENTATION_URL`**, **`OAUTH_PROXY_DEFAULT_CLIENT_REDIRECT_URIS`**: Configuration for an OAuth proxy.\n\nRefer to `src/config/index.ts` and the `.clinerules` file for the complete list and Zod schema definitions.\n\n## Usage with MCP Clients\n\nTo allow an MCP client (like an AI assistant) to use this server:\n\n1.  **Run the Server:** Start the server from your terminal:\n    ```bash\n    node dist/index.js\n    # Or if you are in the project root:\n    # npm start\n    ```\n2.  **Configure the Client:** Add the server to your MCP client's configuration. The exact method depends on the client.\n\n    **For STDIO Transport (Default):**\n    Typically involves specifying:\n\n    - **Command:** `node`\n    - **Arguments:** The absolute path to the built server executable (e.g., `/path/to/filesystem-mcp-server/dist/index.js`).\n    - **Environment Variables (Optional):** Set any required environment variables from the [Configuration](#configuration) section.\n\n    **Example MCP Settings for STDIO (Conceptual):**\n\n    ```json\n    {\n      \"mcpServers\": {\n        \"filesystem_stdio\": {\n          \"command\": \"node\",\n          \"args\": [\"/path/to/filesystem-mcp-server/dist/index.js\"],\n          \"env\": {\n            \"MCP_LOG_LEVEL\": \"debug\"\n            // Other relevant env vars\n          },\n          \"disabled\": false,\n          \"autoApprove\": []\n        }\n      }\n    }\n    ```\n\n    **For HTTP Transport:**\n    The client will need to know the server's URL (e.g., `http://localhost:3010`) and how to authenticate (e.g., providing a JWT Bearer token if `MCP_AUTH_SECRET_KEY` is set). Refer to your MCP client's documentation for HTTP server configuration.\n\nOnce configured and running, the client will detect the server and its available tools.\n\n## Available Tools\n\nThe server exposes the following tools for filesystem interaction:\n\n| Tool                         | Description                                                                                                                                                                                                                                                                                                        |\n| :--------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |\n| **`set_filesystem_default`** | Sets a default absolute path for the current session. Relative paths used in subsequent tool calls will be resolved against this default. Resets on server restart.                                                                                                                                                |\n| **`read_file`**              | Reads the entire content of a specified file as UTF-8 text. Accepts relative (resolved against default) or absolute paths.                                                                                                                                                                                         |\n| **`write_file`**             | Writes content to a specified file. Creates the file (and necessary parent directories) if it doesn't exist, or overwrites it if it does. Accepts relative or absolute paths.                                                                                                                                      |\n| **`update_file`**            | Performs targeted search-and-replace operations within an existing file using an array of `{search, replace}` blocks. Ideal for localized changes. Supports plain text or regex search (`useRegex: true`) and replacing all occurrences (`replaceAll: true`). Accepts relative or absolute paths. File must exist. |\n| **`list_files`**             | Lists files and directories within a specified path. Options include recursive listing (`includeNested: true`) and limiting the number of entries (`maxEntries`). Returns a formatted tree structure. Accepts relative or absolute paths.                                                                          |\n| **`delete_file`**            | Permanently removes a specific file. Accepts relative or absolute paths.                                                                                                                                                                                                                                           |\n| **`delete_directory`**       | Permanently removes a directory. Use `recursive: true` to remove non-empty directories and their contents (use with caution!). Accepts relative or absolute paths.                                                                                                                                                 |\n| **`create_directory`**       | Creates a new directory at the specified path. By default (`create_parents: true`), it also creates any necessary parent directories. Accepts relative or absolute paths.                                                                                                                                          |\n| **`move_path`**              | Moves or renames a file or directory from a source path to a destination path. Accepts relative or absolute paths for both.                                                                                                                                                                                        |\n| **`copy_path`**              | Copies a file or directory from a source path to a destination path. For directories, it copies recursively by default (`recursive: true`). Accepts relative or absolute paths.                                                                                                                                    |\n\n_Refer to the tool registration files (`src/mcp-server/tools/*/registration.ts`) for detailed input/output schemas (Zod/JSON Schema)._\n\n## Project Structure\n\nThe codebase is organized for clarity and maintainability:\n\n```\nfilesystem-mcp-server/\n├── dist/                 # Compiled JavaScript output (after npm run build)\n├── logs/                 # Log files (created at runtime)\n├── node_modules/         # Project dependencies\n├── src/                  # TypeScript source code\n│   ├── config/           # Configuration loading (index.ts)\n│   ├── mcp-server/       # Core MCP server logic\n│   │   ├── server.ts     # Server initialization, tool registration, transport handling\n│   │   ├── state.ts      # Session state management (e.g., default path)\n│   │   ├── tools/        # Individual tool implementations (one subdir per tool)\n│   │   │   ├── readFile/\n│   │   │   │   ├── index.ts\n│   │   │   │   ├── readFileLogic.ts\n│   │   │   │   └── registration.ts\n│   │   │   └── ...       # Other tools (writeFile, updateFile, etc.)\n│   │   └── transports/   # Communication transport implementations\n│   │       ├── authentication/ # Auth middleware for HTTP\n│   │       │   └── authMiddleware.ts\n│   │       ├── httpTransport.ts\n│   │       └── stdioTransport.ts\n│   ├── types-global/     # Shared TypeScript types and interfaces\n│   │   ├── errors.ts     # Custom error classes and codes (McpError, BaseErrorCode)\n│   │   ├── mcp.ts        # MCP related types\n│   │   └── tool.ts       # Tool definition types\n│   ├── utils/            # Reusable utility modules, categorized\n│   │   ├── internal/     # Core internal utilities (errorHandler, logger, requestContext)\n│   │   ├── metrics/      # Metrics-related utilities (tokenCounter)\n│   │   ├── parsing/      # Parsing utilities (dateParser, jsonParser)\n│   │   ├── security/     # Security-related utilities (idGenerator, rateLimiter, sanitization)\n│   │   └── index.ts      # Barrel export for all utilities\n│   └── index.ts          # Main application entry point\n├── .clinerules           # Cheatsheet for LLM assistants\n├── .dockerignore\n├── Dockerfile\n├── LICENSE\n├── mcp.json              # MCP server manifest (generated by SDK or manually)\n├── package.json\n├── package-lock.json\n├── README.md             # This file\n├── repomix.config.json\n├── smithery.yaml         # Smithery configuration (if used)\n└── tsconfig.json         # TypeScript compiler options\n```\n\nFor a live, detailed view of the current structure, run: `npm run tree` (This script might need to be updated if `src/scripts/tree.ts` was part of the changes).\n\n> **Developer Note:** This repository includes a [.clinerules](.clinerules) file. This cheat sheet provides your LLM coding assistant with essential context about codebase patterns, file locations, and usage examples. Keep it updated as the server evolves!\n\n## License\n\nThis project is licensed under the Apache License 2.0. See the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\nBuilt with ❤️ and the <a href=\"https://modelcontextprotocol.io/\">Model Context Protocol</a>\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "cyanheads",
        "files",
        "cyanheads filesystem",
        "filesystem mcp",
        "file management"
      ],
      "category": "file-management"
    },
    "cyanheads--obsidian-mcp-server": {
      "owner": "cyanheads",
      "name": "obsidian-mcp-server",
      "url": "https://github.com/cyanheads/obsidian-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/cyanheads.webp",
      "description": "Integrate LLMs with Obsidian vaults to manage knowledge bases through secure API communication and efficient file operations. Features comprehensive search capabilities for enhanced knowledge management.",
      "stars": 223,
      "forks": 36,
      "license": "Apache License 2.0",
      "language": "TypeScript",
      "updated_at": "2025-10-03T17:42:55Z",
      "readme_content": "# Obsidian MCP Server\n\n[![TypeScript](https://img.shields.io/badge/TypeScript-^5.8.3-blue.svg)](https://www.typescriptlang.org/)\n[![Model Context Protocol](https://img.shields.io/badge/MCP%20SDK-^1.13.0-green.svg)](https://modelcontextprotocol.io/)\n[![Version](https://img.shields.io/badge/Version-2.0.7-blue.svg)](./CHANGELOG.md)\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://opensource.org/licenses/Apache-2.0)\n[![Status](https://img.shields.io/badge/Status-Production-brightgreen.svg)](https://github.com/cyanheads/obsidian-mcp-server/issues)\n[![GitHub](https://img.shields.io/github/stars/cyanheads/obsidian-mcp-server?style=social)](https://github.com/cyanheads/obsidian-mcp-server)\n\n**Empower your AI agents and development tools with seamless Obsidian integration!**\n\nAn MCP (Model Context Protocol) server providing comprehensive access to your Obsidian vault. Enables LLMs and AI agents to read, write, search, and manage your notes and files through the [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api).\n\nBuilt on the [`cyanheads/mcp-ts-template`](https://github.com/cyanheads/mcp-ts-template), this server follows a modular architecture with robust error handling, logging, and security features.\n\n## 🚀 Core Capabilities: Obsidian Tools 🛠️\n\nThis server equips your AI with specialized tools to interact with your Obsidian vault:\n\n| Tool Name                                                                              | Description                                                     | Key Features                                                                                                                                           |\n| :------------------------------------------------------------------------------------- | :-------------------------------------------------------------- | :----------------------------------------------------------------------------------------------------------------------------------------------------- |\n| [`obsidian_read_note`](./src/mcp-server/tools/obsidianReadNoteTool/)                   | Retrieves the content and metadata of a specified note.         | - Read in `markdown` or `json` format.<br/>- Case-insensitive path fallback.<br/>- Includes file stats (creation/modification time).                   |\n| [`obsidian_update_note`](./src/mcp-server/tools/obsidianUpdateNoteTool/)               | Modifies notes using whole-file operations.                     | - `append`, `prepend`, or `overwrite` content.<br/>- Can create files if they don't exist.<br/>- Targets files by path, active note, or periodic note. |\n| [`obsidian_search_replace`](./src/mcp-server/tools/obsidianSearchReplaceTool/)         | Performs search-and-replace operations within a target note.    | - Supports string or regex search.<br/>- Options for case sensitivity, whole word, and replacing all occurrences.                                      |\n| [`obsidian_global_search`](./src/mcp-server/tools/obsidianGlobalSearchTool/)           | Performs a search across the entire vault.                      | - Text or regex search.<br/>- Filter by path and modification date.<br/>- Paginated results.                                                           |\n| [`obsidian_list_notes`](./src/mcp-server/tools/obsidianListNotesTool/)                 | Lists notes and subdirectories within a specified vault folder. | - Filter by file extension or name regex.<br/>- Provides a formatted tree view of the directory.                                                       |\n| [`obsidian_manage_frontmatter`](./src/mcp-server/tools/obsidianManageFrontmatterTool/) | Atomically manages a note's YAML frontmatter.                   | - `get`, `set`, or `delete` frontmatter keys.<br/>- Avoids rewriting the entire file for metadata changes.                                             |\n| [`obsidian_manage_tags`](./src/mcp-server/tools/obsidianManageTagsTool/)               | Adds, removes, or lists tags for a note.                        | - Manages tags in both YAML frontmatter and inline content.                                                                                            |\n| [`obsidian_delete_note`](./src/mcp-server/tools/obsidianDeleteNoteTool/)               | Permanently deletes a specified note from the vault.            | - Case-insensitive path fallback for safety.                                                                                                           |\n\n---\n\n## Table of Contents\n\n| [Overview](#overview) | [Features](#features) | [Configuration](#configuration) |\n| [Project Structure](#project-structure) | [Vault Cache Service](#vault-cache-service) |\n| [Tools](#tools) | [Resources](#resources) | [Development](#development) | [License](#license) |\n\n## Overview\n\nThe Obsidian MCP Server acts as a bridge, allowing applications (MCP Clients) that understand the Model Context Protocol (MCP) – like advanced AI assistants (LLMs), IDE extensions, or custom scripts – to interact directly and safely with your Obsidian vault.\n\nInstead of complex scripting or manual interaction, your tools can leverage this server to:\n\n- **Automate vault management**: Read notes, update content, manage frontmatter and tags, search across files, list directories, and delete files programmatically.\n- **Integrate Obsidian into AI workflows**: Enable LLMs to access and modify your knowledge base as part of their research, writing, or coding tasks.\n- **Build custom Obsidian tools**: Create external applications that interact with your vault data in novel ways.\n\nBuilt on the robust `mcp-ts-template`, this server provides a standardized, secure, and efficient way to expose Obsidian functionality via the MCP standard. It achieves this by communicating with the powerful [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) running inside your vault.\n\n> **Developer Note**: This repository includes a [.clinerules](.clinerules) file that serves as a developer cheat sheet for your LLM coding agent with quick reference for the codebase patterns, file locations, and code snippets.\n\n## Features\n\n### Core Utilities\n\nLeverages the robust utilities provided by `cyanheads/mcp-ts-template`:\n\n- **Logging**: Structured, configurable logging (file rotation, console, MCP notifications) with sensitive data redaction.\n- **Error Handling**: Centralized error processing, standardized error types (`McpError`), and automatic logging.\n- **Configuration**: Environment variable loading (`dotenv`) with comprehensive validation.\n- **Input Validation/Sanitization**: Uses `zod` for schema validation and custom sanitization logic.\n- **Request Context**: Tracking and correlation of operations via unique request IDs.\n- **Type Safety**: Strong typing enforced by TypeScript and Zod schemas.\n- **HTTP Transport Option**: Built-in Hono server with SSE, session management, CORS support, and pluggable authentication strategies (JWT and OAuth 2.1).\n\n### Obsidian Integration\n\n- **Obsidian Local REST API Integration**: Communicates directly with the Obsidian Local REST API plugin via HTTP requests managed by the `ObsidianRestApiService`.\n- **Comprehensive Command Coverage**: Exposes key vault operations as MCP tools (see [Tools](#tools) section).\n- **Vault Interaction**: Supports reading, updating (append, prepend, overwrite), searching (global text/regex, search/replace), listing, deleting, and managing frontmatter and tags.\n- **Targeting Flexibility**: Tools can target files by path, the currently active file in Obsidian, or periodic notes (daily, weekly, etc.).\n- **Vault Cache Service**: An intelligent in-memory cache that improves performance and resilience. It caches vault content, provides a fallback for the global search tool if the live API fails, and periodically refreshes to stay in sync.\n- **Safety Features**: Case-insensitive path fallbacks for file operations, clear distinction between modification types (append, overwrite, etc.).\n\n## Installation\n\n### Prerequisites\n\n1.  **Obsidian**: You need Obsidian installed.\n2.  **Obsidian Local REST API Plugin**: Install and enable the [Obsidian Local REST API plugin](https://github.com/coddingtonbear/obsidian-local-rest-api) within your Obsidian vault.\n3.  **API Key**: Configure an API key within the Local REST API plugin settings in Obsidian. You will need this key to configure the server.\n4.  **Node.js & npm**: Ensure you have Node.js (v18 or later recommended) and npm installed.\n\n## Configuration\n\n### MCP Client Settings\n\nAdd the following to your MCP client's configuration file (e.g., `cline_mcp_settings.json`). This configuration uses `npx` to run the server, which will automatically download & install the package if not already present:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"npx\",\n      \"args\": [\"obsidian-mcp-server\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n        \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\",\n        \"OBSIDIAN_VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_ENABLE_CACHE\": \"true\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n**Note**: Verify SSL is set to false here because the Obsidian Local REST API plugin uses a self-signed certificate by default. If you are deploying this in a production environment, consider using the encrypted HTTPS endpoint and set `OBSIDIAN_VERIFY_SSL` to `true` after configuring your server to trust the self-signed certificate.\n\nIf you installed from source, change `command` and `args` to point to your local build:\n\n```json\n{\n  \"mcpServers\": {\n    \"obsidian-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/your/obsidian-mcp-server/dist/index.js\"],\n      \"env\": {\n        \"OBSIDIAN_API_KEY\": \"YOUR_OBSIDIAN_API_KEY\",\n        \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\",\n        \"OBSIDIAN_VERIFY_SSL\": \"false\",\n        \"OBSIDIAN_ENABLE_CACHE\": \"true\"\n      }\n    }\n  }\n}\n```\n\n### Environment Variables\n\nConfigure the server using environment variables. These environmental variables are set within your MCP client config/settings (e.g. `cline_mcp_settings.json` for Cline, `claude_desktop_config.json` for Claude Desktop).\n\n| Variable                              | Description                                                              | Required             | Default                  |\n| :------------------------------------ | :----------------------------------------------------------------------- | :------------------- | :----------------------- |\n| **`OBSIDIAN_API_KEY`**                | API Key from the Obsidian Local REST API plugin.                         | **Yes**              | `undefined`              |\n| **`OBSIDIAN_BASE_URL`**               | Base URL of your Obsidian Local REST API.                                | **Yes**              | `http://127.0.0.1:27123` |\n| `MCP_TRANSPORT_TYPE`                  | Server transport: `stdio` or `http`.                                     | No                   | `stdio`                  |\n| `MCP_HTTP_PORT`                       | Port for the HTTP server.                                                | No                   | `3010`                   |\n| `MCP_HTTP_HOST`                       | Host for the HTTP server.                                                | No                   | `127.0.0.1`              |\n| `MCP_ALLOWED_ORIGINS`                 | Comma-separated origins for CORS. **Set for production.**                | No                   | (none)                   |\n| `MCP_AUTH_MODE`                       | Authentication strategy: `jwt` or `oauth`.                               | No                   | (none)                   |\n| **`MCP_AUTH_SECRET_KEY`**             | 32+ char secret for JWT. **Required for `jwt` mode.**                    | **Yes (if `jwt`)**   | `undefined`              |\n| `OAUTH_ISSUER_URL`                    | URL of the OAuth 2.1 issuer.                                             | **Yes (if `oauth`)** | `undefined`              |\n| `OAUTH_AUDIENCE`                      | Audience claim for OAuth tokens.                                         | **Yes (if `oauth`)** | `undefined`              |\n| `OAUTH_JWKS_URI`                      | URI for the JSON Web Key Set (optional, derived from issuer if omitted). | No                   | (derived)                |\n| `MCP_LOG_LEVEL`                       | Logging level (`debug`, `info`, `error`, etc.).                          | No                   | `info`                   |\n| `OBSIDIAN_VERIFY_SSL`                 | Set to `false` to disable SSL verification.                              | No                   | `true`                   |\n| `OBSIDIAN_ENABLE_CACHE`               | Set to `true` to enable the in-memory vault cache.                       | No                   | `true`                   |\n| `OBSIDIAN_CACHE_REFRESH_INTERVAL_MIN` | Refresh interval for the vault cache in minutes.                         | No                   | `10`                     |\n\n### Connecting to the Obsidian API\n\nTo connect the MCP server to your Obsidian vault, you need to configure the base URL (`OBSIDIAN_BASE_URL`) and API key (`OBSIDIAN_API_KEY`). The Obsidian Local REST API plugin offers two ways to connect:\n\n1.  **Encrypted (HTTPS) - Default**:\n\n    - The plugin provides a secure `https://` endpoint (e.g., `https://127.0.0.1:27124`).\n    - This uses a self-signed certificate, which will cause connection errors by default.\n    - **To fix this**, you must set the `OBSIDIAN_VERIFY_SSL` environment variable to `\"false\"`. This tells the server to trust the self-signed certificate.\n\n2.  **Non-encrypted (HTTP) - Recommended for Simplicity**:\n    - In the plugin's settings within Obsidian, you can enable the \"Non-encrypted (HTTP) Server\".\n    - This provides a simpler `http://` endpoint (e.g., `http://127.0.0.1:27123`).\n    - When using this URL, you do not need to worry about SSL verification.\n\n**Example `env` configuration for your MCP client:**\n\n_Using the non-encrypted HTTP URL (recommended):_\n\n```json\n\"env\": {\n  \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n  \"OBSIDIAN_BASE_URL\": \"http://127.0.0.1:27123\"\n}\n```\n\n_Using the encrypted HTTPS URL:_\n\n```json\n\"env\": {\n  \"OBSIDIAN_API_KEY\": \"YOUR_API_KEY_FROM_OBSIDIAN_PLUGIN\",\n  \"OBSIDIAN_BASE_URL\": \"https://127.0.0.1:27124\",\n  \"OBSIDIAN_VERIFY_SSL\": \"false\"\n}\n```\n\n## Project Structure\n\nThe codebase follows a modular structure within the `src/` directory:\n\n```\nsrc/\n├── index.ts           # Entry point: Initializes and starts the server\n├── config/            # Configuration loading (env vars, package info)\n│   └── index.ts\n├── mcp-server/        # Core MCP server logic and capability registration\n│   ├── server.ts      # Server setup, transport handling, tool/resource registration\n│   ├── resources/     # MCP Resource implementations (currently none)\n│   ├── tools/         # MCP Tool implementations (subdirs per tool)\n│   └── transports/    # Stdio and HTTP transport logic\n│       └── auth/      # Authentication strategies (JWT, OAuth)\n├── services/          # Abstractions for external APIs or internal caching\n│   └── obsidianRestAPI/ # Typed client for Obsidian Local REST API\n├── types-global/      # Shared TypeScript type definitions (errors, etc.)\n└── utils/             # Common utility functions (logger, error handler, security, etc.)\n```\n\nFor a detailed file tree, run `npm run tree` or see [docs/tree.md](docs/tree.md).\n\n## Vault Cache Service\n\nThis server includes an intelligent **in-memory cache** designed to enhance performance and resilience when interacting with your vault.\n\n### Purpose and Benefits\n\n- **Performance**: By caching file content and metadata, the server can perform search operations much faster, especially in large vaults. This reduces the number of direct requests to the Obsidian Local REST API, resulting in a snappier experience.\n- **Resilience**: The cache acts as a fallback for the `obsidian_global_search` tool. If the live API search fails or times out, the server seamlessly uses the cache to provide results, ensuring that search functionality remains available even if the Obsidian API is temporarily unresponsive.\n- **Efficiency**: The cache is designed to be efficient. It performs an initial build on startup and then periodically refreshes in the background by checking for file modifications, ensuring it stays reasonably up-to-date without constant, heavy API polling.\n\n### How It Works\n\n1.  **Initialization**: When enabled, the `VaultCacheService` builds an in-memory map of all `.md` files in your vault, storing their content and modification times.\n2.  **Periodic Refresh**: The cache automatically refreshes at a configurable interval (defaulting to 10 minutes). During a refresh, it only fetches content for files that are new or have been modified since the last check.\n3.  **Proactive Updates**: After a file is modified through a tool like `obsidian_update_file`, the service proactively updates the cache for that specific file, ensuring immediate consistency.\n4.  **Search Fallback**: The `obsidian_global_search` tool first attempts a live API search. If this fails, it automatically falls back to searching the in-memory cache.\n\n### Configuration\n\nThe cache is enabled by default but can be configured via environment variables:\n\n- **`OBSIDIAN_ENABLE_CACHE`**: Set to `true` (default) or `false` to enable or disable the cache service.\n- **`OBSIDIAN_CACHE_REFRESH_INTERVAL_MIN`**: Defines the interval in minutes for the periodic background refresh. Defaults to `10`.\n\n## Tools\n\nThe Obsidian MCP Server provides a suite of tools for interacting with your vault, callable via the Model Context Protocol.\n\n| Tool Name                     | Description                                               | Key Arguments                                                 |\n| :---------------------------- | :-------------------------------------------------------- | :------------------------------------------------------------ |\n| `obsidian_read_note`          | Retrieves the content and metadata of a note.             | `filePath`, `format?`, `includeStat?`                         |\n| `obsidian_update_note`        | Modifies a file by appending, prepending, or overwriting. | `targetType`, `content`, `targetIdentifier?`, `wholeFileMode` |\n| `obsidian_search_replace`     | Performs search-and-replace operations in a note.         | `targetType`, `replacements`, `useRegex?`, `replaceAll?`      |\n| `obsidian_global_search`      | Searches the entire vault for content.                    | `query`, `searchInPath?`, `useRegex?`, `page?`, `pageSize?`   |\n| `obsidian_list_notes`         | Lists notes and subdirectories in a folder.               | `dirPath`, `fileExtensionFilter?`, `nameRegexFilter?`         |\n| `obsidian_manage_frontmatter` | Gets, sets, or deletes keys in a note's frontmatter.      | `filePath`, `operation`, `key`, `value?`                      |\n| `obsidian_manage_tags`        | Adds, removes, or lists tags in a note.                   | `filePath`, `operation`, `tags`                               |\n| `obsidian_delete_note`        | Permanently deletes a note from the vault.                | `filePath`                                                    |\n\n_Note: All tools support comprehensive error handling and return structured JSON responses._\n\n## Resources\n\n**MCP Resources are not implemented in this version.**\n\nThis server currently focuses on providing interactive tools for vault manipulation. Future development may introduce resource capabilities (e.g., exposing notes or search results as readable resources).\n\n## Development\n\n### Build and Test\n\nTo get started with development, clone the repository, install dependencies, and use the following scripts:\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the project (compile TS to JS in dist/ and make executable)\nnpm run rebuild\n\n# Start the server locally using stdio transport\nnpm start:stdio\n\n# Start the server using http transport\nnpm run start:http\n\n# Format code using Prettier\nnpm run format\n\n# Inspect the server's capabilities using the MCP Inspector tool\nnpm run inspect:stdio\n# or for the http transport:\nnpm run inspect:http\n```\n\n## License\n\nThis project is licensed under the Apache License 2.0 - see the [LICENSE](LICENSE) file for details.\n\n---\n\n<div align=\"center\">\nBuilt with the <a href=\"https://modelcontextprotocol.io/\">Model Context Protocol</a>\n</div>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "llms",
        "vaults",
        "obsidian",
        "llms obsidian",
        "obsidian vaults",
        "file management"
      ],
      "category": "file-management"
    },
    "dandeliongold--mcp-decent-sampler-drums": {
      "owner": "dandeliongold",
      "name": "mcp-decent-sampler-drums",
      "url": "https://github.com/dandeliongold/mcp-decent-sampler-drums",
      "imageUrl": "/freedevtools/mcp/pfp/dandeliongold.webp",
      "description": "Generates DecentSampler drum kit configurations and presets, focusing on WAV file analysis and XML generation for preset creation.",
      "stars": 0,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-17T06:28:05Z",
      "readme_content": "# Decent Sampler Drums MCP Server\n\nA Model Context Protocol server for generating [Decent Sampler](https://www.decentsamples.com/product/decent-sampler-plugin/) drum kit configurations.\n\nThis TypeScript-based MCP server provides specialized tools and prompts for creating DecentSampler drum kit presets, including WAV file analysis and XML generation.\n\n<a href=\"https://glama.ai/mcp/servers/phypkuqwcn\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/phypkuqwcn/badge\" alt=\"Decent-Sampler Drums Server MCP server\" /></a>\n\n## Demo Video\n\n[![Watch a simple demo video on YouTube here!](http://i.ytimg.com/vi/cftEq62gfDE/hqdefault.jpg)](https://www.youtube.com/watch?v=cftEq62gfDE)\n\n**Warning:** Creating complex presets may end up exceeding Claude Desktop's maximum message length. We are still working on streamlining this tool to work around this limitation. If you are creating simple presets without a lot of mics or other variations, the xml file should be small enough for Claude to write to a file.\n\n## Features\n\n- [WAV file analysis and validation](docs/tools.md#analyze_wav_samples)\n- [Global pitch and envelope controls](docs/tools.md#configure_drum_controls)\n- [Multi-mic routing with MIDI controls](docs/tools.md#configure_mic_routing)\n- [Round robin sample playback](docs/tools.md#configure_round_robin)\n- [Flexible velocity layer handling](docs/schemas.md#generate_drum_groups)\n- [Muting group support](docs/schemas.md#generate_drum_groups)\n- [Auxiliary output routing](docs/tools.md#configure_mic_routing)\n\n## Documentation\n\n- [How do I use these tools?](docs/workflows.md) - Step-by-step workflows with real examples\n- [Tools Documentation](docs/tools.md) - Detailed information about each available tool\n- [Input Schemas](docs/schemas.md) - TypeScript interfaces and parameter descriptions\n\n## Installation\n\n### Prerequisites\n- Node.js (v14 or higher)\n- npm (usually comes with Node.js)\n- Claude Desktop app (for use with Claude)\n\n### Setup\n\n1. Install dependencies:\n```bash\nnpm install\n```\n\n2. Build the server:\n```bash\nnpm run build\n```\n\n3. Add to your Claude Desktop config:\n\n**Windows:** `%APPDATA%/Claude/claude_desktop_config.json`\n**MacOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"decent-sampler-drums\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@dandeliongold/mcp-decent-sampler-drums\"\n      ],\n      \"env\": {}\n    }\n  }\n}\n```\n\n## Development\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\nFor debugging, use the MCP Inspector:\n```bash\nnpm run inspector\n```\n\n## Usage Guidelines\n\nWhen using this MCP server to generate simple presets, you should always reference the `simple_preset_guidelines` prompt.\n\nFor more complex presets (including sections such as buses, effects, etc.), reference the `advanced_preset_guidelines` prompt. Note that creating complex presets with a large number of samples can still be unstable and may exceed Claude Desktop's maximum message length.\n\nBoth prompts will ask you to provide a samplesDirectory argument - this should be the absolute path to your drum samples folder (e.g., \"C:/Users/username/Documents/DrumSamples\"). The prompt will then automatically use this directory in all examples and configurations, making it easier to follow along with the correct paths for your system.\n\n## About Decent Sampler\n\nDecent Sampler is a FREE sampling plugin that allows you to play samples in the Decent Sampler format.\n\n### Useful Links\n\n- [Download Decent Sampler Plugin](https://www.decentsamples.com/product/decent-sampler-plugin/)\n- [Decent Sampler Developer Resources](https://www.decentsamples.com/decent-sampler-developer-resources/)\n\n### Sample Sources\n\nThe goal of this MCP server is to make it easier to set up your own presets, whether you're playing your kitchen utensils into your phone, or recording a full kit in a studio. To create your own drum kits, you'll also need samples.\n\nIf you don't already have samples ready to go, here are some resources to get started:\n\n#### Free and Low-Cost Sample Resources\n\n- **99sounds.org**\n  - [Drum Samples Collection](https://99sounds.org/drum-samples/) - Various drum kits and percussion samples\n  - [Dub & Reggae Sounds](https://99sounds.org/dub-reggae-sounds/) - Specialized collection of reggae drum sounds\n\n- **Archive.org:** [Sample Pack Collection](https://archive.org/search?query=subject%3A%22Sample+Pack%22+drums&sort=-downloads) - Community-contributed drum samples, sorted by popularity. Includes some cool stuff like vintage drum machines and CMI Fairlight samples.\n\n- **Sample Pack Nation:** [Oberheim DMX/DX Drumkits](https://samplepacknation.bandcamp.com/album/oberheim-dmx-dx-drumkits-50-sounds) - Classic drum machine sounds (Under 10 USD/EUR)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sampler",
        "drums",
        "drum",
        "decentsampler drum",
        "sampler drums",
        "decent sampler"
      ],
      "category": "file-management"
    },
    "danielpodrazka--editor-mcp": {
      "owner": "danielpodrazka",
      "name": "editor-mcp",
      "url": "https://github.com/danielpodrazka/editor-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/danielpodrazka.webp",
      "description": "Manage and edit text files through a standardized API with features for syntax checking, file management, and a two-step editing process to enhance data integrity. Supports operations on Python and JavaScript/React files for reading, locating functions, and editing with a diff preview.",
      "stars": 10,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:25Z",
      "readme_content": "# Editor MCP\n\nA Python-based text editor server built with FastMCP that provides powerful tools for file operations. This server enables reading, editing, and managing text files through a standardized API with a unique multi-step approach that significantly improves code editing accuracy and reliability for LLMs and AI assistants.\n\n[![Verified on MSeeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/b23694aa-c58a-469d-ba3c-fb54eb4d0d88)\n\n## Features\n\n- **File Selection**: Set a file to work with using absolute paths\n- **Read Operations**:\n  - Read entire files with line numbers using `skim`\n  - Read specific line ranges with prefixed line numbers using `read`\n  - Find specific text within files using `find_line`\n  - Find and extract function definitions in Python and JavaScript/JSX files using `find_function`\n- **Edit Operations**:\n  - Two-step editing process with diff preview\n  - Select and overwrite text with ID verification\n  - Clean editing workflow with select → overwrite → confirm/cancel pattern\n  - Syntax checking for Python (.py) and JavaScript/React (.js, .jsx) files\n  - Create new files with content\n- **File Management**:\n  - Create new files with proper initialization\n  - Delete files from the filesystem\n  - List directory contents with `listdir`\n- **Testing Support**:\n  - Run Python tests with `run_tests`\n  - Set Python paths for proper module resolution\n- **Safety Features**:\n  - Content ID verification to prevent conflicts\n  - Line count limits to prevent resource exhaustion\n  - Syntax checking to maintain code integrity\n  - Protected paths to restrict access to sensitive files\n\n## Security Risks\n\nThe editor-mcp includes powerful capabilities that come with certain security considerations:\n\n- **Jailbreak Risk**: The editor-mcp can potentially be jailbroken when reading a file that has harmful instructions embedded inside. Malicious content in files being edited could contain instructions that manipulate the AI assistant.\n- **Arbitrary Code Execution**: If running tests is enabled, there is a risk of arbitrary code execution through manipulated test files or malicious Python code.\n- **Data Exposure**: Access to file system operations could potentially expose sensitive information if proper path protections aren't configured.\n\nTo mitigate these risks:\n\n1. Use the `PROTECTED_PATHS` environment variable to restrict access to sensitive files and directories.\n2. Disable test running capabilities in production environments unless absolutely necessary.\n3. Carefully review files before opening them, especially if they come from untrusted sources.\n4. Consider running the editor in a sandboxed environment with limited permissions.\n\n## Key Advantages For LLMs\n\nThis text editor's unique design solves critical problems that typically affect LLM code editing:\n\n- **Prevents Loss of Context** - Traditional approaches often lead to LLMs losing overview of the codebase after a few edits. This implementation maintains context through the multi-step process.\n\n- **Avoids Resource-Intensive Rewrites** - LLMs typically default to replacing entire files when confused, which is costly, slow, and inefficient. This editor enforces selective edits.\n\n- **Provides Visual Feedback** - The diff preview system allows the LLM to actually see and verify changes before committing them, dramatically reducing errors.\n\n- **Enforces Syntax Checking** - Automatic validation for Python and JavaScript/React ensures that broken code isn't committed.\n\n- **Improves Edit Reasoning** - The multi-step approach gives the LLM time to reason between steps, reducing haphazard token production.\n\n## Resource Management\n\nThe editor implements several safeguards to ensure system stability and prevent resource exhaustion:\n\n- **Maximum Edit Lines**: By default, the editor enforces a 50-line limit for any single edit operation\n## Installation\n\nThis MCP was developed and tested with Claude Desktop. You can download Claude Desktop on any platform.\nFor Claude Desktop on Linux, you can use an unofficial installation script (uses the official file), recommended repository:\nhttps://github.com/emsi/claude-desktop/tree/main\n\nOnce you have Claude Desktop installed, follow the instructions below to install this specific MCP:\n\n### Easy Installation with UVX (Recommended)\n\nThe easiest way to install the Editor MCP is using the provided installation script:\n\n```bash\n# Clone the repository\ngit clone https://github.com/danielpodrazka/editor-mcp.git\ncd editor-mcp\n\n# Run the installation script\nchmod +x install.sh\n./install.sh\n```\n\nThis script will:\n1. Check if UVX is installed and install it if necessary\n2. Install the Editor MCP in development mode\n3. Make the `editor-mcp` command available in your PATH\n\n### Manual Installation\n\n#### Using UVX\n\n```bash\n# Install directly from GitHub\nuvx install git+https://github.com/danielpodrazka/mcp-text-editor.git\n\n# Or install from a local clone\ngit clone https://github.com/danielpodrazka/mcp-text-editor.git\ncd mcp-text-editor\nuvx install -e .\n```\n\n#### Using Traditional pip\n\n```bash\npip install git+https://github.com/danielpodrazka/mcp-text-editor.git\n\n# Or from a local clone\ngit clone https://github.com/danielpodrazka/mcp-text-editor.git\ncd mcp-text-editor\npip install -e .\n```\n\n#### Using Requirements (Legacy)\n\nInstall from the lock file:\n```bash\nuv pip install -r uv.lock\n```\n\n### Generating a locked requirements file:\n```bash\nuv pip compile requirements.in -o uv.lock\n```\n\n## Usage\n\n### Starting the Server\n\nAfter installation, you can start the Editor MCP server using one of these methods:\n\n```bash\n# Using the installed script\neditor-mcp\n\n# Or using the Python module\npython -m text_editor.server\n```\n\n### MCP Configuration\n\nYou can add the Editor MCP to your MCP configuration file:\n\n```json\n{\n  \"mcpServers\": {\n     \"text-editor\": {\n       \"command\": \"editor-mcp\",\n       \"env\": {\n         \"MAX_SELECT_LINES\": \"100\",\n         \"ENABLE_JS_SYNTAX_CHECK\": \"0\",\n         \"FAIL_ON_PYTHON_SYNTAX_ERROR\": \"1\",\n         \"FAIL_ON_JS_SYNTAX_ERROR\": \"0\",\n         \"PROTECTED_PATHS\": \"*.env,.env*,config*.json,*secret*,/etc/passwd,/home/user/.ssh/id_rsa\"\n       }\n     }\n  }\n}\n```\n\n### Environment Variable Configuration\n\nThe Editor MCP supports several environment variables to customize its behavior:\n\n- **MAX_SELECT_LINES**: \"100\" - Maximum number of lines that can be edited in a single operation (default is 50)\n\n- **ENABLE_JS_SYNTAX_CHECK**: \"0\" - Enable/disable JavaScript and JSX syntax checking (default is \"1\" - enabled)\n\n- **FAIL_ON_PYTHON_SYNTAX_ERROR**: \"1\" - When enabled, Python syntax errors will automatically cancel the overwrite operation (default is enabled)\n\n- **FAIL_ON_JS_SYNTAX_ERROR**: \"0\" - When enabled, JavaScript/JSX syntax errors will automatically cancel the overwrite operation (default is disabled)\n\n- **PROTECTED_PATHS**: Comma-separated list of file patterns or paths that cannot be accessed, supporting wildcards (e.g., \"*.env,.env*,/etc/passwd\")\n\n### Sample MCP Config When Building From Source\n\n```json\n{\n  \"mcpServers\": {\n     \"text-editor\": {\n       \"command\": \"/home/daniel/pp/venvs/editor-mcp/bin/python\",\n       \"args\": [\"/home/daniel/pp/editor-mcp/src/text_editor/server.py\"],\n        \"env\": {\n          \"MAX_SELECT_LINES\": \"100\",\n          \"ENABLE_JS_SYNTAX_CHECK\": \"0\",\n          \"FAIL_ON_PYTHON_SYNTAX_ERROR\": \"1\",\n          \"FAIL_ON_JS_SYNTAX_ERROR\": \"0\",\n          \"PROTECTED_PATHS\": \"*.env,.env*,config*.json,*secret*,/etc/passwd,/home/user/.ssh/id_rsa\"\n        }\n     }\n  }\n}\n```\n\n## Available Tools\nThe Editor MCP provides 13 powerful tools for file manipulation, editing, and testing:\n\n#### 1. `set_file`\nSets the current file to work with.\n\n**Parameters**:\n- `filepath` (str): Absolute path to the file\n\n**Returns**:\n- Confirmation message with the file path\n\n#### 2. `skim`\nReads full text from the current file. Each line is prefixed with its line number.\n\n**Returns**:\n- Dictionary containing lines with their line numbers, total number of lines, and the max edit lines setting\n\n**Example output**:\n```\n{\n  \"lines\": [\n    [1, \"def hello():\"],\n    [2, \"    print(\\\"Hello, world!\\\")\"],\n    [3, \"\"],\n    [4, \"hello()\"]\n  ],\n  \"total_lines\": 4,\n  \"max_select_lines\": 50\n}\n```\n\n#### 3. `read`\nReads text from the current file from start line to end line.\n\n**Parameters**:\n- `start` (int): Start line number (1-based indexing)\n- `end` (int): End line number (1-based indexing)\n\n**Returns**:\n- Dictionary containing lines with their line numbers as keys, along with start and end line information\n\n**Example output**:\n```\n{\n  \"lines\": [\n    [1, \"def hello():\"],\n    [2, \"    print(\\\"Hello, world!\\\")\"],\n    [3, \"\"],\n    [4, \"hello()\"]\n  ],\n  \"start_line\": 1,\n  \"end_line\": 4\n}\n```\n\n#### 4. `select`\nSelect a range of lines from the current file for subsequent overwrite operation.\n\n**Parameters**:\n- `start` (int): Start line number (1-based)\n- `end` (int): End line number (1-based)\n\n**Returns**:\n- Dictionary containing the selected lines, line range, and ID for verification\n\n**Note**:\n- This tool validates the selection against max_select_lines\n- The selection details are stored for use in the overwrite tool\n- This must be used before calling the overwrite tool\n\n#### 5. `overwrite`\nPrepare to overwrite a range of lines in the current file with new text.\n\n**Parameters**:\n- `new_lines` (list): List of new lines to overwrite the selected range\n\n**Returns**:\n- Diff preview showing the proposed changes\n\n**Note**:\n- This is the first step in a two-step process:\n  1. First call overwrite() to generate a diff preview\n  2. Then call confirm() to apply or cancel() to discard the pending changes\n- This tool allows replacing the previously selected lines with new content\n- The number of new lines can differ from the original selection\n- For Python files (.py extension), syntax checking is performed before writing\n- For JavaScript/React files (.js, .jsx extensions), syntax checking is optional and can be disabled via the `ENABLE_JS_SYNTAX_CHECK` environment variable\n\n#### 6. `confirm`\nApply pending changes from the overwrite operation.\n\n**Returns**:\n- Operation result with status and message\n\n**Note**:\n- This is one of the two possible actions in the second step of the editing process\n- The selection is removed upon successful application of changes\n\n#### 7. `cancel`\nDiscard pending changes from the overwrite operation.\n\n**Returns**:\n- Operation result with status and message\n\n**Note**:\n- This is one of the two possible actions in the second step of the editing process\n- The selection remains intact when changes are cancelled\n\n#### 8. `delete_file`\nDelete the currently set file.\n\n**Returns**:\n- Operation result with status and message\n\n#### 9. `new_file`\nCreates a new file and automatically sets it as the current file for subsequent operations.\n\n**Parameters**:\n- `filepath` (str): Path of the new file\n\n**Returns**:\n- Operation result with status, message, and selection info\n- The first line is automatically selected for editing\n\n**Behavior**:\n- Automatically creates parent directories if they don't exist\n- Sets the newly created file as the current working file\n- The first line is pre-selected, ready for immediate editing\n\n**Protected Files Note**:\n- Files matching certain patterns (like `*.env`) can be created normally\n- However, once you move to another file, these protected files cannot be reopened\n- This allows for a \"write-once, protect-after\" workflow for sensitive configuration files\n- Example: You can create `config.env`, populate it with example config, but cannot reopen it later\n\n**Note**:\n- This tool will fail if the current file exists and is not empty\n\n#### 10. `find_line`\nFind lines that match provided text in the current file.\n\n**Parameters**:\n- `search_text` (str): Text to search for in the file\n\n**Returns**:\n- Dictionary containing matching lines with their line numbers and total matches\n\n**Example output**:\n```\n{\n  \"status\": \"success\",\n  \"matches\": [\n    [2, \"    print(\\\"Hello, world!\\\")\"]\n  ],\n  \"total_matches\": 1\n}\n```\n\n**Note**:\n- Returns an error if no file path is set\n- Searches for exact text matches within each line\n- The id can be used for subsequent edit operations\n\n#### 11. `find_function`\nFind a function or method definition in the current Python or JavaScript/JSX file.\n\n**Parameters**:\n- `function_name` (str): Name of the function or method to find\n\n**Returns**:\n- Dictionary containing the function lines with their line numbers, start_line, and end_line\n\n**Example output**:\n```\n{\n  \"status\": \"success\",\n  \"lines\": [\n    [10, \"def hello():\"],\n    [11, \"    print(\\\"Hello, world!\\\")\"],\n    [12, \"    return True\"]\n  ],\n  \"start_line\": 10,\n  \"end_line\": 12\n}\n```\n\n**Note**:\n- For Python files, this tool uses Python's AST and tokenize modules to accurately identify function boundaries including decorators and docstrings\n- For JavaScript/JSX files, this tool uses a combination of approaches:\n  - Primary method: Babel AST parsing when available (requires Node.js and Babel packages)\n  - Fallback method: Regex pattern matching for function declarations when Babel is unavailable\n- Supports various JavaScript function types including standard functions, async functions, arrow functions, and React hooks\n- Returns an error if no file path is set or if the function is not found\n\n#### 12. `listdir`\nLists the contents of a directory.\n\n**Parameters**:\n- `dirpath` (str): Path to the directory to list\n\n**Returns**:\n- Dictionary containing list of filenames and the path queried\n\n#### 13. `run_tests` and `set_python_path`\nTools for running Python tests with pytest and configuring the Python environment.\n  - Set to \"0\", \"false\", or \"no\" to disable JavaScript syntax checking\n  - Useful if you don't have Babel and related dependencies installed\n- `FAIL_ON_PYTHON_SYNTAX_ERROR`: Controls whether Python syntax errors automatically cancel the overwrite operation (default: 1)\n  - When enabled, syntax errors in Python files will cause the overwrite action to be automatically cancelled\n  - The lines will remain selected so you can fix the error and try again\n- `FAIL_ON_JS_SYNTAX_ERROR`: Controls whether JavaScript/JSX syntax errors automatically cancel the overwrite operation (default: 0)\n  - When enabled, syntax errors in JavaScript/JSX files will cause the overwrite action to be automatically cancelled\n  - The lines will remain selected so you can fix the error and try again\n- `DUCKDB_USAGE_STATS`: Controls whether usage statistics are collected in a DuckDB database (default: 0)\n  - Set to \"1\", \"true\", or \"yes\" to enable collection of tool usage statistics\n  - When enabled, records information about each tool call including timestamps and arguments\n- `STATS_DB_PATH`: Path where the DuckDB database for statistics will be stored (default: \"text_editor_stats.duckdb\")\n  - Only used when `DUCKDB_USAGE_STATS` is enabled\n- `PROTECTED_PATHS`: Comma-separated list of file patterns or absolute paths that will be denied access\n  - Example: `*.env,.env*,config*.json,*secret*,/etc/passwd,/home/user/credentials.txt`\n  - Supports both exact file paths and flexible glob patterns with wildcards in any position:\n    - `*.env` - matches files ending with .env, like `.env`, `dev.env`, `prod.env`\n    - `.env*` - matches files starting with .env, like `.env`, `.env.local`, `.env.production`\n    - `*secret*` - matches any file containing 'secret' in the name\n  - Provides protection against accidentally exposing sensitive configuration files and credentials\n  - The lines will remain selected so you can fix the error and try again\n\n## Development\n\n### Prerequisites\n\nThe editor-mcp requires:\n- Python 3.7+\n- FastMCP package\n- black (for Python code formatting checks)\n- Babel (for JavaScript/JSX syntax checks if working with those files)\n\nInstall development dependencies:\n\n```bash\n# Using pip\npip install pytest pytest-asyncio pytest-cov\n\n# Using uv\nuv pip install pytest pytest-asyncio pytest-cov\n```\n\nFor JavaScript/JSX syntax validation, you need Node.js and Babel. The text editor uses `npx babel` to check JS/JSX syntax when editing these file types:\n\n```bash\n# Required for JavaScript/JSX syntax checking\nnpm install --save-dev @babel/core @babel/cli @babel/preset-env @babel/preset-react\n# You can also install these globally if you prefer\n# npm install -g @babel/core @babel/cli @babel/preset-env @babel/preset-react\n```\n\nThe editor requires:\n- `@babel/core` and `@babel/cli` - Core Babel packages for syntax checking\n- `@babel/preset-env` - For standard JavaScript (.js) files\n- `@babel/preset-react` - For React JSX (.jsx) files\n\n### Running Tests\n\n```bash\n# Run tests\npytest -v\n\n# Run tests with coverage\npytest -v --cov=text_editor\n```\n\n### Test Structure\n\nThe test suite covers:\n\n1. **set_file tool**\n   - Setting valid files\n   - Setting non-existent files\n   \n2. **read tool**\n   - File state validation\n   - Reading entire files\n   - Reading specific line ranges\n   - Edge cases like empty files\n   - Invalid range handling\n\n3. **select tool**\n   - Line range validation\n   - Selection validation against max_select_lines\n   - Selection storage for subsequent operations\n\n4. **overwrite tool**\n   - Verification of selected content using ID\n   - Content replacement validation\n   - Syntax checking for Python and JavaScript/React files\n   - Generation of diff preview for changes\n\n5. **confirm and cancel tools**\n   - Applying or canceling pending changes\n   - Two-step verification process\n   \n6. **delete_file tool**\n   - File deletion validation\n\n7. **new_file tool**\n   - File creation validation\n   - Handling existing files\n\n8. **find_line tool**\n   - Finding text matches in files\n   - Handling specific search terms\n   - Error handling for non-existent files\n   - Handling cases with no matches\n   - Handling existing files\n\n## How it Works\n\n### The Multi-Step Editing Approach\n\nUnlike traditional code editing approaches where LLMs simply search for lines to edit and make replacements (often leading to confusion after multiple edits), this editor implements a structured multi-step workflow that dramatically improves editing accuracy:\n\n1. **set_file** - First, the LLM sets which file it wants to edit\n2. **skim** - The LLM reads the entire file to gain a complete overview\n3. **read** - The LLM examines specific sections relevant to the task, with lines shown alongside numbers for better context\n4. **select** - When ready to edit, the LLM selects specific lines (limited to a configurable number, default 50)\n5. **overwrite** - The LLM proposes replacement content, resulting in a git diff-style preview that shows exactly what will change\n6. **confirm/cancel** - After reviewing the preview, the LLM can either apply or discard the changes\n\nThis structured workflow forces the LLM to reason carefully about each edit and prevents common errors like accidentally overwriting entire files. By seeing previews of changes before committing them, the LLM can verify its edits are correct.\n\n### ID Verification System\n\nThe server uses FastMCP to expose text editing capabilities through a well-defined API. The ID verification system ensures data integrity by verifying that the content hasn't changed between reading and modifying operations.\n\nThe ID mechanism uses SHA-256 to generate a unique identifier of the file content or selected line ranges. For line-specific operations, the ID includes a prefix indicating the line range (e.g., \"L10-15-[hash]\"). This helps ensure that edits are being applied to the expected content.\n\n## Implementation Details\n\nThe main `TextEditorServer` class:\n\n1. Initializes with a FastMCP instance named \"text-editor\"\n2. Sets a configurable `max_select_lines` limit (default: 50) from environment variables\n3. Maintains the current file path as state\n4. Registers thirteen primary tools through FastMCP:\n   - `set_file`: Validates and sets the current file path\n   - `skim`: Reads the entire content of a file, returning a dictionary of line numbers to line text\n   - `read`: Reads lines from specified line range, returning a structured dictionary of line content\n   - `select`: Selects lines for subsequent overwrite operation\n   - `overwrite`: Takes a list of new lines and prepares diff preview for changing content\n   - `confirm`: Applies pending changes from the overwrite operation\n   - `cancel`: Discards pending changes from the overwrite operation\n   - `delete_file`: Deletes the current file\n   - `new_file`: Creates a new file\n   - `find_line`: Finds lines containing specific text\n   - `find_function`: Finds function or method definitions in Python and JavaScript/JSX files\n   - `listdir`: Lists contents of a directory\n   - `run_tests` and `set_python_path`: Tools for running Python tests\n\nThe server runs using FastMCP's stdio transport by default, making it easy to integrate with various clients.\n\n## System Prompt for Best Results\n\nFor optimal results with AI assistants, it's recommended to use the system prompt (see [system_prompt.md](system_prompt.md)) that helps guide the AI in making manageable, safe edits.\n\nThis system prompt helps the AI assistant:\n\n1. **Make incremental changes** - Breaking down edits into smaller parts\n2. **Maintain code integrity** - Making changes that keep the code functional\n3. **Work within resource limits** - Avoiding operations that could overwhelm the system\n4. **Follow a verification workflow** - Doing final checks for errors after edits\n\nBy incorporating this system prompt when working with AI assistants, you'll get more reliable editing behavior and avoid common pitfalls in automated code editing.\n\n\n\n## Usage Statistics\n\nThe text editor MCP can collect usage statistics when enabled, providing insights into how the editing tools are being used:\n\n- **Data Collection**: Statistics are collected in a DuckDB database when `DUCKDB_USAGE_STATS` is enabled\n- **Tracked Information**: Records tool name, arguments, timestamp, current file path, tool response, and request/client IDs\n- **Storage Location**: Data is stored in a DuckDB file specified by `STATS_DB_PATH`\n- **Privacy**: Everything is stored locally on your machine\n\nThe collected statistics can help understand usage patterns, identify common workflows, and optimize the editor for most frequent operations.\n\nYou can query the database using standard SQL via any DuckDB client to analyze usage patterns.\n## Troubleshooting\n\nIf you encounter issues:\n\n1. Check file permissions\n2. Verify that the file paths are absolute\n3. Ensure the environment is using Python 3.7+\n\n\n## Inspiration\n\nInspired by a similar project: https://github.com/tumf/mcp-text-editor, which at first I forked, however I decided to rewrite the whole codebase from scratch so only the general idea stayed the same.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "editor",
        "editing",
        "files",
        "danielpodrazka editor",
        "editor mcp",
        "file management"
      ],
      "category": "file-management"
    },
    "danielsuguimoto--readonly-filesystem-mcp": {
      "owner": "danielsuguimoto",
      "name": "readonly-filesystem-mcp",
      "url": "https://github.com/danielsuguimoto/readonly-filesystem-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/danielsuguimoto.webp",
      "description": "Provides secure readonly access to filesystem operations, including reading files, listing directories, searching for files, and retrieving file metadata within specified allowed directories.",
      "stars": 2,
      "forks": 0,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-16T03:37:33Z",
      "readme_content": "# Readonly Filesystem MCP Server\n\nNode.js server implementing Model Context Protocol (MCP) for readonly filesystem operations. A clone from [modelcontextprotocol/server-filesystem](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem).\n\n## Features\n\n- Read files\n- List directories\n- Search files\n- Get file metadata\n\n**Note**: The server will only allow operations within directories specified via `args`.\n\n## API\n\n### Resources\n\n- `file://system`: File system operations interface\n\n### Tools\n\n- **read_file**\n  - Read complete contents of a file\n  - Inputs:\n    - `path` (string): File path to read\n    - `from` (number): Optional. Start line number for reading. Defaults to 0.\n    - `to` (number): Optional. End line number. If not set, reads to the end of the file.\n  - Reads file contents (full or partial) with UTF-8 encoding\n\n- **read_multiple_files**\n  - Read multiple files simultaneously\n  - Input: `paths` (string[])\n  - Failed reads won't stop the entire operation\n\n- **list_directory**\n  - List directory contents with [FILE] or [DIR] prefixes\n  - Input: `path` (string)\n\n- **search_files**\n  - Recursively search for files/directories\n  - Inputs:\n    - `path` (string): Starting directory\n    - `pattern` (string): Search pattern\n    - `excludePatterns` (string[]): Exclude any patterns. Glob formats are supported.\n  - Case-insensitive matching\n  - Returns full paths to matches\n\n- **get_file_info**\n  - Get detailed file/directory metadata\n  - Input: `path` (string)\n  - Returns:\n    - Size\n    - Creation time\n    - Modified time\n    - Access time\n    - Type (file/directory)\n    - Permissions\n\n- **list_allowed_directories**\n  - List all directories the server is allowed to access\n  - No input required\n  - Returns:\n    - Directories that this server can read/write from\n\n## Usage with Claude Desktop\nAdd this to your `claude_desktop_config.json`:\n\nNote: you can provide sandboxed directories to the server by mounting them to `/projects`. Adding the `ro` flag will make the directory readonly by the server.\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@danielsuguimoto/readonly-server-filesystem\",\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "mcp",
        "filesystem mcp",
        "readonly filesystem",
        "access filesystem"
      ],
      "category": "file-management"
    },
    "deathrashed--filesystem-structures": {
      "owner": "deathrashed",
      "name": "filesystem-structures",
      "url": "https://github.com/deathrashed/filesystem-structures",
      "imageUrl": "/freedevtools/mcp/pfp/deathrashed.webp",
      "description": "Provides ready-to-use filesystem organization structures tailored for various use cases, enabling users to set up and optimize their digital content management with adaptable templates. Supports productivity, development, media management, and personal knowledge organization through structured directory hierarchies.",
      "stars": 1,
      "forks": 1,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-08-16T07:17:32Z",
      "readme_content": "# Filesystem Structures\n\n<div align=\"center\">\n\n  [![License](https://img.shields.io/badge/License-MIT-blue?style=for-the-badge)](https://opensource.org/licenses/MIT)  [![Structures](https://img.shields.io/badge/Structures-11+-green?style=for-the-badge)](https://github.com/username/filesystem-structures) [![macOS](https://img.shields.io/badge/macOS-Compatible-black?style=for-the-badge&logo=apple)](https://www.apple.com/macos/)  [![Linux](https://img.shields.io/badge/Linux-Compatible-orange?style=for-the-badge&logo=linux)](https://www.linux.org/)  [![Windows](https://img.shields.io/badge/Windows-Compatible-blue?style=for-the-badge&logo=windows)](https://www.microsoft.com/windows)\n\n  **A comprehensive collection of filesystem organization structures for different use cases, complexity levels, and workflows.**\n</div>\n\n## 🎯 Purpose\n\nThis repository provides ready-to-use filesystem organization structures that you can adopt or customize for your own needs. Whether you're:\n\n- Setting up a new system\n- Reorganizing your files\n- Looking for better ways to manage your digital content\n- Implementing a productivity system\n- Setting up a development environment\n\nThese structures offer practical starting points that are easy to implement and adapt.\n\n## 📊 Structure Comparison\n\n<table>\n  <tr>\n    <th>Structure</th>\n    <th>Complexity</th>\n    <th>Best For</th>\n    <th>Key Feature</th>\n    <th>Learning Curve</th>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 1 - Basic\">1: Basic</a></td>\n    <td>Low</td>\n    <td>General users, beginners</td>\n    <td>Standard directory conventions</td>\n    <td>Minimal</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 2 - Intermediate\">2: Intermediate</a></td>\n    <td>Low-Medium</td>\n    <td>General users with more needs</td>\n    <td>Extended top-level organization</td>\n    <td>Low</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 3 - Advanced\">3: Advanced</a></td>\n    <td>High</td>\n    <td>Power users, professionals</td>\n    <td>Granular organization, symlinks</td>\n    <td>Steep</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 4 - Multimedia\">4: Multimedia</a></td>\n    <td>Medium</td>\n    <td>Artists, media producers</td>\n    <td>Media type specialization</td>\n    <td>Moderate</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 5 - PARA Method\">5: PARA Method</a></td>\n    <td>Medium</td>\n    <td>Knowledge workers</td>\n    <td>Actionability-based organization</td>\n    <td>Moderate</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 6 - Johnny.Decimal\">6: Johnny.Decimal</a></td>\n    <td>Medium-High</td>\n    <td>Detail-oriented organizers</td>\n    <td>Numeric classification system</td>\n    <td>Moderate</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 7 - Action Oriented (GTD)\">7: Action-Oriented (GTD)</a></td>\n    <td>Medium</td>\n    <td>Task-focused workers</td>\n    <td>Status-based organization</td>\n    <td>Moderate</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 8 - Time Based\">8: Time-Based</a></td>\n    <td>Low-Medium</td>\n    <td>Project managers, archivists</td>\n    <td>Chronological organization</td>\n    <td>Low</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 9 - Developer Focused\">9: Developer-Focused</a></td>\n    <td>High</td>\n    <td>Software developers</td>\n    <td>Code-specific organization</td>\n    <td>Moderate-Steep</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 10 - Deep Hierarchy\">10: Deep Hierarchy</a></td>\n    <td>Very High</td>\n    <td>Taxonomists, librarians</td>\n    <td>Multi-level categorization</td>\n    <td>Very Steep</td>\n  </tr>\n  <tr>\n    <td><a href=\"./Structure 11 - Linux Based\">11: Linux-Based</a></td>\n    <td>Medium-High</td>\n    <td>Linux users, sysadmins</td>\n    <td>FHS-inspired organization</td>\n    <td>Moderate</td>\n  </tr>\n</table>\n\n## 📂 Available Structures\n\n<table>\n  <tr>\n    <td width=\"50%\" valign=\"top\">\n      <h3>🌱 For Beginners</h3>\n      <ul>\n        <li><b><a href=\"./Structure 1 - Basic\">Structure 1: Basic</a></b> - A simple, clean organization system suitable for most users with standard conventions and clear second-level organization.</li>\n        <li><b><a href=\"./Structure 2 - Intermediate\">Structure 2: Intermediate</a></b> - Expands on the basic layout with additional top-level directories and more detailed organization.</li>\n      </ul>\n      <h3>🧰 Special Purpose</h3>\n      <ul>\n        <li><b><a href=\"./Structure 4 - Multimedia\">Structure 4: Multimedia</a></b> - Optimized for users who work heavily with media files - audio, video, images, and graphics.</li>\n        <li><b><a href=\"./Structure 9 - Developer Focused\">Structure 9: Developer-Focused</a></b> - Optimized for software developers, separating code environments from documents and using symlinks for efficiency.</li>\n        <li><b><a href=\"./Structure 11 - Linux Based\">Structure 11: Linux Based</a></b> - Follows Linux filesystem hierarchy standards with appropriate modifications for personal use.</li>\n      </ul>\n    </td>\n    <td width=\"50%\" valign=\"top\">\n      <h3>🧠 Methodology-Based</h3>\n      <ul>\n        <li><b><a href=\"./Structure 5 - PARA Method\">Structure 5: PARA Method</a></b> - Based on Tiago Forte's PARA method (Projects, Areas, Resources, Archives).</li>\n        <li><b><a href=\"./Structure 6 - Johnny.Decimal\">Structure 6: Johnny.Decimal</a></b> - Implements the Johnny.Decimal system with numeric identifiers for improved navigation.</li>\n        <li><b><a href=\"./Structure 7 - Action Oriented (GTD)\">Structure 7: Action-Oriented (GTD)</a></b> - Inspired by David Allen's \"Getting Things Done\" methodology.</li>\n      </ul>\n      <h3>⚙️ Advanced Approaches</h3>\n      <ul>\n        <li><b><a href=\"./Structure 3 - Advanced\">Structure 3: Advanced</a></b> - For power users who need granular organization and sophisticated linking between resources.</li>\n        <li><b><a href=\"./Structure 8 - Time Based\">Structure 8: Time-Based</a></b> - Organizes files primarily by time periods for archival purposes and chronological work.</li>\n        <li><b><a href=\"./Structure 10 - Deep Hierarchy\">Structure 10: Deep Hierarchy</a></b> - Uses deep nesting and categorization for extremely detailed organization.</li>\n      </ul>\n    </td>\n  </tr>\n</table>\n\n## 🎭 Real-World Use Cases\n\n<details>\n<summary><b>Professional Scenarios</b></summary>\n<ul>\n  <li><b>Freelance Designer</b> - <a href=\"./Structure 4 - Multimedia\">Multimedia Structure</a> for organizing client work, design assets, and project files</li>\n  <li><b>Software Engineer</b> - <a href=\"./Structure 9 - Developer Focused\">Developer-Focused Structure</a> for managing codebases, development environments, and documentation</li>\n  <li><b>Project Manager</b> - <a href=\"./Structure 8 - Time Based\">Time-Based Structure</a> combined with <a href=\"./Structure 7 - Action Oriented (GTD)\">GTD approach</a> for tracking deliverables and timelines</li>\n  <li><b>Content Creator</b> - <a href=\"./Structure 4 - Multimedia\">Multimedia Structure</a> for organizing production assets across multiple platforms</li>\n  <li><b>Researcher/Academic</b> - <a href=\"./Structure 10 - Deep Hierarchy\">Deep Hierarchy</a> or <a href=\"./Structure 5 - PARA Method\">PARA Method</a> for organizing papers, references, and research materials</li>\n  <li><b>System Administrator</b> - <a href=\"./Structure 11 - Linux Based\">Linux-Based Structure</a> for maintaining configs, scripts, and documentation</li>\n  <li><b>Knowledge Worker</b> - <a href=\"./Structure 5 - PARA Method\">PARA Method</a> or <a href=\"./Structure 6 - Johnny.Decimal\">Johnny.Decimal</a> for personal knowledge management</li>\n</ul>\n</details>\n\n<details>\n<summary><b>Personal Use Cases</b></summary>\n<ul>\n  <li><b>Family Computer</b> - <a href=\"./Structure 1 - Basic\">Basic Structure</a> with separate user folders for each family member</li>\n  <li><b>Personal Knowledge Base</b> - <a href=\"./Structure 6 - Johnny.Decimal\">Johnny.Decimal</a> for organizing notes, references, and learning materials</li>\n  <li><b>Media Collection</b> - <a href=\"./Structure 4 - Multimedia\">Multimedia Structure</a> for organizing music, movies, and photos</li>\n  <li><b>Home Project Management</b> - <a href=\"./Structure 7 - Action Oriented (GTD)\">GTD Structure</a> for organizing renovation projects, financial planning, etc.</li>\n  <li><b>Digital Archiving</b> - <a href=\"./Structure 8 - Time Based\">Time-Based Structure</a> for preserving family history, photos, and important documents</li>\n</ul>\n</details>\n\n<details>\n<summary><b>Hybrid Approaches</b></summary>\n<ul>\n  <li><b>PARA + Multimedia</b> - Combining actionability-based organization with specialized media directories</li>\n  <li><b>GTD + Developer</b> - Task-oriented structure with specialized code organization</li>\n  <li><b>Johnny.Decimal + Time-Based</b> - Using numeric classification within chronological organization</li>\n  <li><b>Basic + PARA</b> - Starting with a simple structure and gradually implementing PARA principles</li>\n</ul>\n</details>\n\n## 📋 Implementation\n\nEach structure includes:\n\n- A detailed `README.md` explaining its purpose, benefits, and implementation tips\n- A `structure_schema.txt` showing the complete directory hierarchy\n- The actual directory structure to explore and use as a template\n\n## 🤖 Automation Scripts\n\n<details>\n<summary><b>Bash (macOS/Linux)</b></summary>\n\n```bash\n#!/bin/bash\n# Script to create a basic file structure (Structure 1)\n\n# Create main directories\nmkdir -p ~/Documents/{Personal,Work,School,Financial}\nmkdir -p ~/Downloads/{Installers,Documents,Images,Archives}\nmkdir -p ~/Pictures/{Personal,Work,Wallpapers,Screenshots}\nmkdir -p ~/Music/{Albums,Playlists,Podcasts,Audiobooks}\nmkdir -p ~/Videos/{Movies,\"TV Shows\",Personal,Tutorials}\nmkdir -p ~/Desktop/{\"Current Projects\",\"To Sort\"}\n\necho \"Basic directory structure created successfully!\"\n```\n</details>\n\n<details>\n<summary><b>PowerShell (Windows)</b></summary>\n\n```powershell\n# PowerShell script to create a basic file structure (Structure 1)\n\n# Create main directories\n$directories = @(\n    \"$HOME\\Documents\\Personal\",\n    \"$HOME\\Documents\\Work\",\n    \"$HOME\\Documents\\School\",\n    \"$HOME\\Documents\\Financial\",\n    \"$HOME\\Downloads\\Installers\",\n    \"$HOME\\Downloads\\Documents\",\n    \"$HOME\\Downloads\\Images\",\n    \"$HOME\\Downloads\\Archives\",\n    \"$HOME\\Pictures\\Personal\",\n    \"$HOME\\Pictures\\Work\",\n    \"$HOME\\Pictures\\Wallpapers\",\n    \"$HOME\\Pictures\\Screenshots\",\n    \"$HOME\\Music\\Albums\",\n    \"$HOME\\Music\\Playlists\",\n    \"$HOME\\Music\\Podcasts\",\n    \"$HOME\\Music\\Audiobooks\",\n    \"$HOME\\Videos\\Movies\",\n    \"$HOME\\Videos\\TV Shows\",\n    \"$HOME\\Videos\\Personal\",\n    \"$HOME\\Videos\\Tutorials\",\n    \"$HOME\\Desktop\\Current Projects\",\n    \"$HOME\\Desktop\\To Sort\"\n)\n\nforeach ($dir in $directories) {\n    if (!(Test-Path -Path $dir)) {\n        New-Item -ItemType Directory -Path $dir -Force\n    }\n}\n\nWrite-Host \"Basic directory structure created successfully!\" -ForegroundColor Green\n```\n</details>\n\n<details>\n<summary><b>Python (Cross-Platform)</b></summary>\n\n```python\n#!/usr/bin/env python3\n# Script to create any filesystem structure based on input\n\nimport os\nimport sys\nimport json\nfrom pathlib import Path\n\ndef create_structure(base_path, structure):\n    \"\"\"Recursively create directory structure from dict\"\"\"\n    for name, contents in structure.items():\n        path = os.path.join(base_path, name)\n        os.makedirs(path, exist_ok=True)\n        print(f\"Created: {path}\")\n        \n        if isinstance(contents, dict):\n            create_structure(path, contents)\n\nif __name__ == \"__main__\":\n    # Example structure (can be loaded from JSON file)\n    basic_structure = {\n        \"Documents\": {\n            \"Personal\": {},\n            \"Work\": {},\n            \"School\": {},\n            \"Financial\": {}\n        },\n        \"Downloads\": {\n            \"Installers\": {},\n            \"Documents\": {},\n            \"Images\": {},\n            \"Archives\": {}\n        },\n        \"Pictures\": {\n            \"Personal\": {},\n            \"Work\": {},\n            \"Wallpapers\": {},\n            \"Screenshots\": {}\n        },\n        \"Music\": {\n            \"Albums\": {},\n            \"Playlists\": {},\n            \"Podcasts\": {},\n            \"Audiobooks\": {}\n        },\n        \"Videos\": {\n            \"Movies\": {},\n            \"TV Shows\": {},\n            \"Personal\": {},\n            \"Tutorials\": {}\n        },\n        \"Desktop\": {\n            \"Current Projects\": {},\n            \"To Sort\": {}\n        }\n    }\n    \n    home_dir = str(Path.home())\n    create_structure(home_dir, basic_structure)\n    print(f\"Structure created successfully in {home_dir}\")\n```\n</details>\n\n## 🚀 Using These Structures\n\n<details>\n<summary><b>Browse & Explore</b></summary>\n<p>\nNavigate through each structure directory to understand its organization principles and advantages for different use cases. Compare multiple structures to find elements that might work best for your needs.\n</p>\n</details>\n\n<details>\n<summary><b>Copy & Implement</b></summary>\n<p>\nYou can copy entire structures or portions that fit your needs:\n\n```bash\n# Clone the entire repository\ngit clone https://github.com/deathrashed/filesystem-structures.git\n\n# Copy a specific structure to your home directory\ncp -r filesystem-structures/Structure\\ 1\\ -\\ Basic/* ~/\n\n# For Windows users (using PowerShell)\nCopy-Item -Path \"filesystem-structures\\Structure 1 - Basic\\*\" -Destination $HOME -Recurse\n```\n</p>\n</details>\n\n<details>\n<summary><b>Customize & Adapt</b></summary>\n<p>\nThese structures are starting points. Modify them to better match your specific requirements:\n\n- Rename directories to match your terminology preferences\n- Add or remove subdirectories based on your actual usage patterns\n- Combine elements from multiple structures to create a hybrid system\n- Create symlinks to frequently accessed locations\n</p>\n</details>\n\n## 💡 Customization Examples\n\n<details>\n<summary><b>Photo Organization Hybrid</b></summary>\n<p>\nA photographer combined the <a href=\"./Structure 4 - Multimedia\">Multimedia Structure</a> with <a href=\"./Structure 8 - Time Based\">Time-Based</a> approach:\n\n```\nPhotos/\n├── Projects/                # Active photo projects\n│   ├── Client_Shoots/       # Client work organized by client name\n│   └── Personal_Projects/   # Personal creative projects\n├── Archive/                 # Completed work\n│   ├── 2021/               \n│   │   ├── Q1/             # Quarterly organization\n│   │   ├── Q2/\n│   │   └── ...\n│   ├── 2022/\n│   └── ...\n├── Portfolio/               # Best work for showcase\n│   ├── Landscapes/\n│   ├── Portraits/\n│   └── ...\n└── Resources/               # Reference materials\n    ├── Presets/\n    ├── Textures/\n    └── Educational/\n```\n</p>\n</details>\n\n<details>\n<summary><b>Developer Knowledge Base</b></summary>\n<p>\nA software developer combined <a href=\"./Structure 9 - Developer Focused\">Developer-Focused</a> with <a href=\"./Structure 6 - Johnny.Decimal\">Johnny.Decimal</a>:\n\n```\nKnowledgeBase/\n├── 10-19 Development/\n│   ├── 11 Languages/\n│   │   ├── 11.01 Python/\n│   │   ├── 11.02 JavaScript/\n│   │   └── ...\n│   ├── 12 Frameworks/\n│   │   ├── 12.01 React/\n│   │   ├── 12.02 Django/\n│   │   └── ...\n│   └── ...\n├── 20-29 Systems/\n│   ├── 21 DevOps/\n│   ├── 22 Databases/\n│   └── ...\n├── 30-39 Projects/\n│   ├── 31 Personal/\n│   ├── 32 Work/\n│   └── ...\n└── 90-99 Meta/\n    ├── 91 Templates/\n    ├── 92 Scripts/\n    └── ...\n```\n</p>\n</details>\n\n<details>\n<summary><b>Small Business Admin Structure</b></summary>\n<p>\nA small business owner combined <a href=\"./Structure 7 - Action Oriented (GTD)\">GTD</a> with <a href=\"./Structure 5 - PARA Method\">PARA</a>:\n\n```\nBusiness/\n├── Projects/                     # Current business initiatives\n│   ├── Website_Redesign/\n│   ├── Product_Launch_Spring23/\n│   └── ...\n├── Areas/                        # Ongoing business functions\n│   ├── Accounting/\n│   │   ├── A_Pending/            # Needs action\n│   │   ├── A_Complete/           # Archived by year\n│   │   └── A_Reference/          # Templates, etc.\n│   ├── HR/\n│   │   ├── H_Pending/\n│   │   ├── H_Complete/\n│   │   └── H_Reference/\n│   └── ...\n├── Resources/                    # Business knowledge\n│   ├── Marketing/\n│   ├── Industry_Research/\n│   └── ...\n└── Archives/                     # Completed projects and old items\n    ├── 2021/\n    ├── 2022/\n    └── ...\n```\n</p>\n</details>\n\n## 🛠️ Customization Tips\n\n- **Use Consistent Naming** - Decide on naming conventions (CamelCase, kebab-case, snake_case) and apply them consistently\n- **Consider Automation** - Tools like Hazel (macOS), File Juggler (Windows), or inotify scripts (Linux) can help maintain your structure\n- **Start Small** - Implement a structure for new files first, then gradually organize existing files\n- **Include Metadata** - Consider adding tagging, color-coding, or README files within directories to add context\n- **Review Periodically** - Schedule regular reviews to adjust your structure as your needs evolve\n\n## 🔄 Maintenance Recommendations\n\n1. **Regular Reviews** - Schedule monthly or quarterly reviews of your structure\n2. **Inbox Processing** - Maintain an inbox system for temporary files before proper filing\n3. **Archive Old Content** - Move inactive files to an archive to keep active directories lean\n4. **Backup Strategy** - Implement backups that respect your organizational structure\n5. **Documentation** - Keep notes on your customizations for future reference\n\n## 🤝 Contributing\n\nContributions are welcome! Feel free to:\n- Submit additional structure designs\n- Suggest improvements to existing structures\n- Share your experiences and customizations\n- Report issues or suggest clarifications\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n---\n\n<div align=\"center\">\n  <p>Created for the organizationally obsessed</p>\n  <p>\n    <a href=\"https://github.com/deathrashed\"><img src=\"https://img.shields.io/badge/GitHub-100000?style=for-the-badge&logo=github&logoColor=white\" alt=\"GitHub\"></a>\n  </p>\n</div>\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "directory",
        "hierarchies",
        "deathrashed filesystem",
        "filesystem organization",
        "filesystem structures"
      ],
      "category": "file-management"
    },
    "delorenj--super-win-cli-mcp-server": {
      "owner": "delorenj",
      "name": "super-win-cli-mcp-server",
      "url": "https://github.com/delorenj/super-win-cli-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/delorenj.webp",
      "description": "Provides full access to Windows CLI environments and unrestricted execution of system commands, enabling broad control over the operating system and file system.",
      "stars": 6,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-28T18:40:10Z",
      "readme_content": "# Super Windows CLI MCP Server\n\nAn enhanced fork of the Windows CLI MCP Server with unrestricted system access capabilities.\n\n## Enhancements\n\n- Full system access through SYSTEM service installation\n- Unrestricted command execution\n- Network-level access controls\n- Unlimited process capabilities\n- Auto-recovery and fault tolerance\n- PowerShell telemetry disabled\n\n## Security Notice\n\nThis version removes application-level restrictions in favor of network-level security. It is designed for use in trusted environments where full system access is required.\n\n## Features\n\n- Complete access to Windows shell environments (PowerShell, CMD, Git Bash)\n- No command or argument restrictions\n- Full file system access\n- SYSTEM-level service installation\n- Automatic service recovery\n- Network binding controls\n- Process reuse for performance\n- Extended timeouts for long-running operations\n\n## Installation\n\n1. Build the project:\n```bash\nnpm install\nnpm run build\n```\n\n2. Copy the built files to your Windows machine\n\n3. Run the installation script as administrator:\n```powershell\n.\\install-service.ps1\n```\n\n## Configuration\n\nThe server is configured for maximum capability with these key features:\n\n- No command restrictions\n- Full filesystem access\n- Disabled injection protection\n- Unlimited process resources\n- Network-level access control\n- SYSTEM-level privileges\n\nSee `config.json` for the complete configuration.\n\n## Service Management\n\n### Installation\n```powershell\n.\\install-service.ps1\n```\n\n### Removal\n```powershell\n.\\uninstall-service.ps1\n```\n\n## Network Security\n\nWhile application-level restrictions are removed, the following network-level protections are in place:\n\n- Localhost binding by default\n- Configurable allowed IP ranges\n- Local network restriction\n- Optional VPN integration\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\nBased on the original [win-cli-mcp-server](https://github.com/SimonB97/win-cli-mcp-server) by SimonB97.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "cli",
        "commands",
        "delorenj",
        "windows cli",
        "win cli",
        "cli mcp"
      ],
      "category": "file-management"
    },
    "diegofornalha--mcp-server-tess": {
      "owner": "diegofornalha",
      "name": "mcp-server-tess",
      "url": "https://github.com/diegofornalha/mcp-server-tess",
      "imageUrl": "/freedevtools/mcp/pfp/diegofornalha.webp",
      "description": "Integrate with the TESS API to manage and execute TESS agents, handle file associations, and customize messages for agent interactions. Provides an interface to streamline AI workflows with TESS functionalities.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-03-26T06:40:56Z",
      "readme_content": "# MCP-Server-TESS\n\nServidor MCP (Model Context Protocol) para integração com a API TESS.\n\n## Sobre\n\nEste projeto implementa um servidor que segue o protocolo MCP para interagir com a API TESS. O servidor expõe ferramentas que permitem:\n\n- Listar e gerenciar agentes\n- Executar agentes com mensagens personalizadas\n- Gerenciar arquivos e suas associações com agentes\n- E muito mais\n\n## Requisitos\n\n- Node.js 18+\n- Uma chave de API da plataforma TESS\n\n## Instalação\n\n### Via Smithery.ai (Recomendado)\n\nVocê pode usar este servidor diretamente no Smithery.ai:\n\n1. Acesse [https://smithery.ai/server/@diegofornalha/mcp-server-tess](https://smithery.ai/server/@diegofornalha/mcp-server-tess)\n2. Clique em \"Instalar\"\n3. Configure sua chave de API TESS quando solicitado\n4. Pronto! O servidor está disponível para uso com seu LLM favorito\n\n### Instalação Local\n\nClone o repositório e instale as dependências:\n\n```bash\ngit clone https://github.com/seu-usuario/mcp-server-tess.git\ncd mcp-server-tess\nnpm install\n```\n\n## Configuração\n\n1. Crie um arquivo `.env` baseado no `.env.example`\n2. Adicione sua chave de API da TESS:\n\n```\nTESS_API_KEY=sua_chave_api_aqui\nPORT=3000\n```\n\n## Compilação\n\n```bash\nnpm run build\n```\n\n## Execução\n\nPara iniciar o servidor em modo de produção:\n\n```bash\nnpm start\n```\n\nPara desenvolvimento com recarga automática:\n\n```bash\nnpm run dev\n```\n\n## Ferramentas disponíveis\n\nO servidor expõe as seguintes ferramentas via API HTTP:\n\n1. `listar_agentes_tess` - Lista todos os agentes disponíveis\n2. `obter_agente_tess` - Obtém detalhes de um agente específico\n3. `executar_agente_tess` - Executa um agente com mensagens personalizadas\n4. `listar_arquivos_agente_tess` - Lista arquivos associados a um agente\n5. `vincular_arquivo_agente_tess` - Vincula um arquivo a um agente\n6. `remover_arquivo_agente_tess` - Remove o vínculo de um arquivo com um agente\n7. `listar_arquivos_tess` - Lista todos os arquivos disponíveis\n8. `obter_arquivo_tess` - Obtém detalhes de um arquivo específico\n9. `enviar_arquivo_tess` - Envia um novo arquivo para a plataforma TESS\n10. `excluir_arquivo_tess` - Exclui um arquivo da plataforma TESS\n\n## Uso com Docker\n\nPara executar o servidor usando Docker:\n\n```bash\n# Construir a imagem\ndocker build -t mcp-server-tess .\n\n# Executar o container\ndocker run -p 3000:3000 -e TESS_API_KEY=sua_chave_api_aqui mcp-server-tess\n```\n\n## Endpoints da API\n\n- `GET /health` - Endpoint de verificação da saúde do servidor\n- `GET /capabilities` - Lista todas as ferramentas disponíveis com suas descrições e parâmetros\n- `POST /tools/:toolName` - Executa uma ferramenta específica (substitua `:toolName` pelo nome da ferramenta)\n\n## Exemplo de uso\n\n### Com Smithery.ai\n\nApós a instalação no Smithery.ai, você pode usar o servidor com qualquer LLM compatível com MCP:\n\n1. Selecione o servidor `@diegofornalha/mcp-server-tess` nas configurações do seu LLM\n2. As ferramentas da API TESS ficarão disponíveis automaticamente para seu modelo\n\n### Via API HTTP\n\nPara executar um agente:\n\n```bash\ncurl -X POST http://localhost:3000/tools/executar_agente_tess \\\n  -H \"Content-Type: application/json\" \\\n  -d '{\n    \"agent_id\": \"seu_agent_id\",\n    \"model\": \"tess-ai-light\",\n    \"messages\": [\n      {\"role\": \"user\", \"content\": \"Olá, como você está?\"}\n    ]\n  }'\n```\n\n## Licença\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "tess",
        "workflows",
        "agents",
        "workflows tess",
        "server tess",
        "tess api"
      ],
      "category": "file-management"
    },
    "dinghuazhou--sample-mcp-server-tos": {
      "owner": "dinghuazhou",
      "name": "sample-mcp-server-tos",
      "url": "https://github.com/dinghuazhou/sample-mcp-server-tos",
      "imageUrl": "/freedevtools/mcp/pfp/dinghuazhou.webp",
      "description": "Retrieve and manage data from volcengine TOS, including accessing PDF documents and interacting with storage buckets. Simplifies data retrieval processes through defined tools for listing buckets, listing objects, and retrieving specific objects.",
      "stars": 1,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-18T09:04:30Z",
      "readme_content": "# TOS MCP Server\nTOS 官方推出的 MCP Server 提供强大的查询能力，支持通过自然语言便捷地探索和检索 TOS 中存储的内容，提升了数据访问的直观性与效率。可以与火山引擎云产品\nMCP 组合，助力构建更智能的业务应用场景。\n\n| 版本 | v0.2.0                   | \n|----|--------------------------|\n| 描述 | 基于 MCP 管理 TOS 资源，智能化探索数据 |\n| 分类 | 存储                       |\n| 标签 | 搜索，视频，图片，文本              |\n\n## Tools\n\n本 MCP Server 产品提供以下 Tools (工具/能力):\n\n### Tool 1: list_buckets\n\n#### 类型\n\nSaaS\n\n#### 详细描述\n\n该工具允许您便捷查看火山引擎TOS的存储桶列表。\n\n#### 调试所需的输入参数:\n\n输入：\n\n```json \n{\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"required\": [],\n    \"properties\": {}\n  },\n  \"name\": \"list_buckets\",\n  \"description\": \"查询您账号下拥有的所有存储桶的列表。\"\n}\n```\n\n输出：\n\n- 返回您账号下拥有的存储桶列表，包含桶名、创建时间、桶位置信息、访问域名等信息。\n\n#### 最容易被唤起的 Prompt示例\n\n```\n列举火山引擎 TOS 的存储桶列表。\n```\n\n### Tool 2: list_objects\n\n#### 类型\n\nSaaS\n\n#### 详细描述\n\n该工具允许您便捷查看火山引擎TOS桶下的对象列表，每次请求都会返回存储桶中的部分或全部对象（最多 1000\n个）。您可以使用请求参数作为选择条件，返回存储桶中对象的子集。\n\n#### 调试所需的输入参数:\n\n输入：\n\n```json\n{\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"bucket\"\n    ],\n    \"properties\": {\n      \"bucket\": {\n        \"type\": \"string\",\n        \"description\": \"用户指定的存储桶名称\"\n      },\n      \"prefix\": {\n        \"type\": \"string\",\n        \"description\": \"可选的对象前缀\"\n      },\n      \"start_after\": {\n        \"type\": \"string\",\n        \"description\": \"列举对象的起始位置。您可以通过指定对象的起始位置分页列举对象\"\n      },\n      \"continuation_token\": {\n        \"type\": \"string\",\n        \"description\": \"指定列举操作从该 Token 开始，通常从上次请求返回的 NextContinuationToken 中获取此 Token\"\n      }\n    }\n  },\n  \"name\": \"list_objects\",\n  \"description\": \"查询您指定存储桶的对象列表\"\n}\n\n```\n\n输出：\n\n- 返回您指定存储下的对象列表，包含对象名、对象的最后修改时间、ETag、对象大小、存储类型等信息。\n\n#### 最容易被唤起的 Prompt示例\n\n```\n列举火山引擎 TOS 的 example 桶下的对象。\n```\n\n### Tool 3: get_object tool\n\n#### 类型\n\nSaaS\n\n#### 详细描述\n\n从 TOS 检索对象，需要指定桶名和对象的完整路径。对于文本内容的对象，比如文本文件、CSV\n文件等，该工具返回的是其内容。对于图片、视频等二进制对象，该工具返回的是Base64编码的内容。\n\n#### 调试所需的输入参数:\n\n输入：\n\n```json\n{\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"required\": [\n      \"bucket\",\n      \"key\"\n    ],\n    \"properties\": {\n      \"bucket\": {\n        \"type\": \"string\",\n        \"description\": \"用户指定的存储桶名称\"\n      },\n      \"key\": {\n        \"type\": \"string\",\n        \"description\": \"用户需要读取的对象名，需要指定完整的对象名\"\n      }\n    }\n  },\n  \"name\": \"get_object\",\n  \"description\": \"获取指定对象的内容，对于文本内容的对象，比如文本文件、CSV 文件等，该工具返回的是其内容。对于图片、视频等二进制对象，该工具返回的是Base64编码的内容。\"\n}\n```\n\n输出：\n\n- 返回具体的对象内容，对于文本内容的对象，比如文本文件、CSV 文件等，该工具返回的是内容。对于图片、视频等二进制对象，该工具返回的是Base64编码的内容。\n\n#### 最容易被唤起的 Prompt示例\n\n```\n读取火山引擎 TOS 桶example下对象名为example.txt的文件内容\n```\n\n## 可适配平台\n\n方舟，python，cursor\n\n## 服务开通链接 (整体产品)\n\n<https://console.volcengine.com/tos>\n\n## 鉴权方式\n\n火山引擎，从 volcengine 管理控制台获取 volcengine 访问密钥 ID、秘密访问密钥和区域，请在.env文件中设置相关环境变量\n\n### 环境变量\n\n以下环境变量可用于配置MCP服务器:\n\n| 环境变量             | 描述                     | 默认值 |\n|------------------|------------------------|-----|\n| `VOLCENGINE_ACCESS_KEY` | 火山引擎账号 ACCESS KEY      | -   |\n| `VOLCENGINE_SECRET_KEY` | 火山引擎账号 SECRET KEY      | -   |\n| `VOLCENGINE_REGION`         | 火山引擎 TOS region        | -   |\n| `TOS_ENDPOINT`   | 火山引擎 TOS Endpoint      | -   |\n| `SECURITY_TOKEN` | 火山引擎 Security Token，可选 | -   |\n| `TOS_BUCKETS`    | 指定访问的 TOS 桶，可选         | -   |\n\n## 安装部署\n\n### 系统依赖\n\n- 安装 Python 3.10 或者更高版本\n- 安装 uv\n    - 如果是linux系统\n  ```\n  curl -LsSf https://astral.sh/uv/install.sh | sh\n  ```\n    - 如果是window系统\n  ```\n  powershell -ExecutionPolicy ByPass -c \"irm https://astral.sh/uv/install.ps1 | iex\"\n  ```\n- 同步依赖项并更uv.lock:\n  ```bash\n  uv sync\n  ```\n- 构建mcp server:\n  ```bash\n  uv build\n  ```\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run *mcp-server-tos*.\n\n#### 本地配置\n\n添加以下配置到你的 mcp settings 文件中\n\n```json\n{\n  \"mcpServers\": {\n    \"tos-mcp-server\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/ABSOLUTE/PATH/TO/PARENT/FOLDER/src/mcp_server_tos\",\n        \"run\",\n        \"mcp-server-tos\"\n      ]\n    }\n  }\n}\n```\n\n## 在不同平台的配置\n\n### 方舟\n\n#### 体验中心\n\n[示例如下]\n\n1. 查看MCP Server 详情\n   在大模型生态广场，选择合适的MCP Server，并查看详情\n2. 选择MCP Server即将运行的平台\n   检查当前MCP Server 已适配的平台，并选择合适的平台\n3. 查看并对比可用的Tools\n   仔细查看可用的Tools的功能描述与所需的输入参数，并尝试运行对应的功能。\n4. 获取专属的URL或代码示例\n   检查账号登录状态与服务开通情况，生成唯一URL\n5. 去对应的Client的平台进行使用\n   点击快捷跳转按钮，前往方舟平台的体验中心进行对应MCP Server的体验\n\n## 产品截图/视频 - optional\n\n### Cursor\n\n## 部署\n\n[示例如下]\n\n### UVX\n\n```json\n{\n  \"mcpServers\": {\n    \"tos-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"--from\",\n        \"git+https://github.com/volcengine/mcp-server#subdirectory=server/mcp_server_tos\",\n        \"mcp-server-tos\"\n      ],\n      \"env\": {\n        \"VOLCENGINE_ACCESS_KEY\": \"your access-key-id\",\n        \"VOLCENGINE_SECRET_KEY\": \"your access-key-secret\",\n        \"VOLCENGINE_REGION\": \"tos region\",\n        \"TOS_ENDPOINT\": \"tos endpoint\",\n        \"SECURITY_TOKEN\": \"your security token\",\n        \"TOS_BUCKET\": \"your specific bucket\"\n      }\n    }\n  }\n}\n```\n\n## License\n\nvolcengine/mcp-server is licensed under the [MIT License](https://github.com/volcengine/mcp-server/blob/main/LICENSE).\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "documents",
        "storage",
        "retrieval",
        "file management",
        "mcp server",
        "data volcengine"
      ],
      "category": "file-management"
    },
    "dinh-ai-system-exe-com-vn--file-system-mcp-sse": {
      "owner": "dinh-ai-system-exe-com-vn",
      "name": "file-system-mcp-sse",
      "url": "https://github.com/dinh-ai-system-exe-com-vn/file-system-mcp-sse",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Facilitates secure and efficient filesystem operations, enabling tasks such as reading, writing, editing, and searching files and directories. Provides capabilities for managing file metadata, directory structures, and advanced search functionalities within specified paths.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "sse",
        "file management",
        "filesystem operations",
        "efficient filesystem"
      ],
      "category": "file-management"
    },
    "dvladimirov--MCP": {
      "owner": "dvladimirov",
      "name": "MCP",
      "url": "https://github.com/dvladimirov/MCP",
      "imageUrl": "/freedevtools/mcp/pfp/dvladimirov.webp",
      "description": "Integrates OpenAI services with Git repository analysis and local filesystem operations. Also supports Prometheus for monitoring and provides utilities for seamless development workflows.",
      "stars": 0,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "Python",
      "updated_at": "2025-04-24T21:09:05Z",
      "readme_content": "# MCP Server with OpenAI, Git, Filesystem, and Prometheus Integration\n\nThis repository contains a Model Control Plane (MCP) server implementation that supports OpenAI services, Git repository analysis, local filesystem operations, and Prometheus integration.\n\n## Project Structure\n\n```\nMCP/\n├── mcp/               # Core MCP library modules\n├── scripts/           # Utility scripts and test tools\n├── prometheus/        # Prometheus configuration\n├── docker-compose.yml # Docker configuration\n├── mcp_server.py      # Main server implementation\n├── mcp_run            # Main runner script (shortcut)\n└── README.md          # This file\n```\n\n## Requirements\n\n- Python 3.8+\n- FastAPI\n- Uvicorn\n- OpenAI SDK\n- GitPython\n- Requests\n- Docker and Docker Compose (for Prometheus features)\n\n## Installation\n\n1. Clone this repository\n2. Install the dependencies:\n\n```bash\npip install -r requirements.txt\n```\n\n## Environment Variables\n\nSet the following environment variables:\n\nFor Azure OpenAI:\n```bash\nexport AZURE_OPENAI_ENDPOINT=\"your-azure-endpoint\"\nexport AZURE_OPENAI_API_KEY=\"your-azure-api-key\"\nexport AZURE_OPENAI_API_VERSION=\"2023-05-15\"\nexport AZURE_DEPLOYMENT_NAME=\"your-deployment-name\"\n```\n\nFor Standard OpenAI:\n```bash\nexport OPENAI_API_KEY=\"your-openai-api-key\"\n# Optional: Specify which models to use\nexport OPENAI_CHAT_MODEL=\"gpt-4o-mini\"  # Default if not specified\nexport OPENAI_COMPLETION_MODEL=\"gpt-3.5-turbo-instruct\"  # Default if not specified\n```\n\nFor Prometheus:\n```bash\nexport PROMETHEUS_URL=\"http://localhost:9090\"  # Default if not specified\n```\n\n## Running the Server\n\nStart the MCP server:\n\n```bash\npython scripts/start_mcp_server.py\n```\n\nOr for more options:\n\n```bash\npython scripts/start_mcp_server.py --host 0.0.0.0 --port 8000 --debug\n```\n\nThe server will be available at http://localhost:8000.\n\n## Unified Testing Tool\n\nWe provide a unified testing script that gives you a user-friendly interface to all testing functionality:\n\n```bash\n./mcp_run\n```\n\nThis interactive script provides:\n- Filesystem tests\n- Git integration tests\n- Memory analysis tools\n- Prometheus tests & memory stress\n- MCP server management\n- Environment setup\n\n## Individual Tests\n\nYou can also run individual tests directly:\n\nTest the OpenAI integration:\n```bash\npython scripts/test_mcp_client.py\n```\n\nTest the Git integration (provide a Git repository URL):\n```bash\npython scripts/test_git_integration.py https://github.com/username/repository\n```\n\nTest the Git diff functionality (analyze requirements compatibility):\n```bash\npython scripts/test_git_diff.py https://github.com/username/repository [commit-sha]\n```\n\nTest the filesystem functionality:\n```bash\npython scripts/test_filesystem.py\n```\n\nTest the langflow integration with MCP:\n```bash\npython scripts/test_langflow_integration.py [OPTIONAL_REPO_URL]\n```\n\nTest the Prometheus integration:\n```bash\npython scripts/test_prometheus.py [prometheus_url]\n```\n\n## Advanced Git Analysis\n\nFor more advanced Git repository analysis with AI recommendations:\n\n```bash\npython scripts/langflow_git_analyzer.py https://github.com/username/repository\n```\n\nYou can also search for specific patterns in the repository:\n\n```bash\npython scripts/langflow_git_analyzer.py https://github.com/username/repository --search \"def main\"\n```\n\nOr analyze the last commit diff with AI insights:\n\n```bash\npython scripts/langflow_git_analyzer.py https://github.com/username/repository --diff\n```\n\n## Memory Analysis Tools\n\nMCP includes several tools for memory monitoring and analysis:\n\n```bash\n# Basic memory diagnostics with AI analysis\npython scripts/ai_memory_diagnostics.py\n\n# Interactive memory dashboard\npython scripts/mcp_memory_dashboard.py\n\n# Memory alerting system\npython scripts/mcp_memory_alerting.py\n```\n\nYou can also simulate memory pressure for testing:\n\n```bash\npython scripts/simulate_memory_pressure.py --target 85 --duration 300\n```\n\n## Prometheus Integration\n\n### Setup\n\n1. Start the Prometheus stack using Docker Compose:\n\n```bash\ndocker compose up -d\n```\n\nThis will start:\n- Prometheus server (accessible at http://localhost:9090)\n- Node Exporter (for host metrics)\n- cAdvisor (for container metrics)\n\n2. For stress testing, you can start the memory stress container:\n\n```bash\ndocker compose up -d --build memory-stress\n```\n\nOr use the container test script:\n```bash\n./scripts/container-memory-test.sh start\n```\n\n### Docker Configuration and Reset Scripts\n\nThis project includes multiple Docker configurations and reset scripts for reliable operation across different environments:\n\n#### Docker Configurations\n- **Standard Configuration** (`docker-compose.yml`): Uses custom Dockerfiles for Prometheus and Langflow to ensure consistent permissions across systems.\n- **Bridge Network Configuration** (`docker-compose.bridge.yml`): Alternative configuration that uses bridge networking for environments where host networking is problematic.\n\n#### Custom Dockerfiles for Solving Permission Issues\nThe project uses custom Dockerfiles for both Prometheus and Langflow to solve common permission issues:\n\n- **Dockerfile.prometheus**: Sets up the Prometheus configuration with proper permissions for the `nobody` user.\n- **Dockerfile.langflow**: Copies the components directory into the container without changing file ownership, allowing Langflow to access the components without permission errors.\n\nThis approach eliminates the need for volume mounts that can lead to permission conflicts across different machines and user configurations.\n\n#### Reset Scripts\n- **All Services Reset** (`reset-all.sh`): Reset all containers with a single command.\n  ```bash\n  # Basic reset (rebuilds containers with existing volumes)\n  ./reset-all.sh\n  \n  # Full reset (removes volumes and rebuilds containers)\n  ./reset-all.sh --clean\n  ```\n\n- **Individual Service Reset**:\n  ```bash\n  # Reset only Prometheus\n  ./reset-prometheus.sh\n  \n  # Reset only Langflow\n  ./reset-langflow.sh\n  ```\n\nThese scripts ensure that the containers are properly configured with correct permissions and the latest code changes.\n\n#### Troubleshooting\nIf you encounter permission issues:\n1. Use the reset scripts to rebuild the containers\n2. Check the logs with `docker compose logs <service_name>`\n3. Make sure any components added to Langflow are included in the Dockerfile.langflow\n\n#### Cross-Machine Deployment\nWhen deploying to a new machine:\n1. Clone the repository\n2. Make reset scripts executable: `chmod +x *.sh`\n3. Run the reset script: `./reset-all.sh`\n\nThe custom Dockerfiles automatically handle all permission issues that might occur across different systems.\n\n### Using Prometheus Client\n\nThe `MCPAIComponent` class includes Prometheus capabilities:\n\n```python\nfrom langflow import MCPAIComponent\n\n# Initialize the client\nmcp = MCPAIComponent(mcp_server_url=\"http://localhost:8000\")\n\n# Instant query (current metric values)\nresult = mcp.prometheus_query(\"up\")\n\n# Range query (metrics over time)\nresult = mcp.prometheus_query_range(\n    query=\"rate(node_cpu_seconds_total{mode='system'}[1m])\",\n    start=\"2023-03-01T00:00:00Z\",\n    end=\"2023-03-01T01:00:00Z\",\n    step=\"15s\"\n)\n\n# Get all labels\nlabels = mcp.prometheus_get_labels()\n\n# Get label values\nvalues = mcp.prometheus_get_label_values(\"job\")\n\n# Get targets\ntargets = mcp.prometheus_get_targets()\n\n# Get alerts\nalerts = mcp.prometheus_get_alerts()\n```\n\n### Useful PromQL Queries\n\n- CPU Usage: `rate(node_cpu_seconds_total{mode!=\"idle\"}[1m])`\n- Memory Usage: `node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes`\n- Disk Usage: `node_filesystem_avail_bytes{mountpoint=\"/\"} / node_filesystem_size_bytes{mountpoint=\"/\"}`\n- Container CPU Usage: `rate(container_cpu_usage_seconds_total[1m])`\n- Container Memory Usage: `container_memory_usage_bytes`\n\n## API Endpoints\n\n### OpenAI Endpoints\n- GET `/v1/models` - List all available models\n- GET `/v1/models/{model_id}` - Get information about a specific model\n- POST `/v1/models/azure-gpt-4/completion` - Generate text completion using Azure OpenAI\n- POST `/v1/models/azure-gpt-4/chat` - Generate chat response using Azure OpenAI\n- POST `/v1/models/openai-gpt-chat/chat` - Generate chat response using OpenAI chat model\n- POST `/v1/models/openai-gpt-completion/completion` - Generate text completion using OpenAI completion model\n\n### Git Integration Endpoints\n- POST `/v1/models/git-analyzer/analyze` - Analyze a Git repository\n- POST `/v1/models/git-analyzer/search` - Search a Git repository for files matching a pattern\n- POST `/v1/models/git-analyzer/diff` - Get the diff of the last commit in a repository\n\n### Filesystem Endpoints\n- POST `/v1/models/filesystem/list` - List contents of a directory\n- POST `/v1/models/filesystem/read` - Read a file's contents\n- POST `/v1/models/filesystem/read-multiple` - Read multiple files at once\n- POST `/v1/models/filesystem/write` - Write content to a file\n- POST `/v1/models/filesystem/edit` - Edit a file with multiple replacements\n- POST `/v1/models/filesystem/mkdir` - Create a directory\n- POST `/v1/models/filesystem/move` - Move a file or directory\n- POST `/v1/models/filesystem/search` - Search for files matching a pattern\n- POST `/v1/models/filesystem/info` - Get information about a file or directory\n\n### Prometheus Endpoints\n- POST `/v1/models/prometheus/query` - Execute an instant query\n- POST `/v1/models/prometheus/query_range` - Execute a range query\n- POST `/v1/models/prometheus/series` - Get series data\n- GET `/v1/models/prometheus/labels` - Get all available labels\n- POST `/v1/models/prometheus/label_values` - Get values for a specific label\n- GET `/v1/models/prometheus/targets` - Get all targets\n- GET `/v1/models/prometheus/rules` - Get all rules\n- GET `/v1/models/prometheus/alerts` - Get all alerts\n\n## Client Usage\n\nYou can use the `MCPAIComponent` in your LangFlow pipelines by providing the MCP server URL:\n\n```python\nfrom langflow import MCPAIComponent\n\nmcp = MCPAIComponent(mcp_server_url=\"http://localhost:8000\")\n\n# List available models\nmodels = mcp.list_models()\nprint(models)\n\n# Generate chat completion with OpenAI model\nchat_response = mcp.chat(\n    model_id=\"openai-gpt-chat\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Tell me a joke about programming.\"}\n    ],\n    max_tokens=100,\n    temperature=0.7\n)\nprint(chat_response)\n\n# Generate text completion with OpenAI model\ncompletion_response = mcp.completion(\n    model_id=\"openai-gpt-completion\",\n    prompt=\"Write a function in Python to calculate the factorial of a number:\",\n    max_tokens=150,\n    temperature=0.7\n)\nprint(completion_response)\n\n# Analyze a Git repository\nrepo_analysis = mcp.analyze_git_repo(\"https://github.com/username/repository\")\nprint(repo_analysis)\n\n# Search a Git repository\nsearch_results = mcp.search_git_repo(\"https://github.com/username/repository\", \"def main\")\nprint(search_results)\n\n# Get the diff of the last commit\ndiff_info = mcp.get_git_diff(\"https://github.com/username/repository\")\nprint(diff_info)\n\n# List files in the current directory\ndir_contents = mcp.list_directory()\nprint(dir_contents)\n\n# Read a file\nfile_content = mcp.read_file(\"path/to/file.txt\")\nprint(file_content)\n\n# Write to a file\nwrite_result = mcp.write_file(\"path/to/new_file.txt\", \"Hello, world!\")\nprint(write_result)\n\n# Search for files\nsearch_result = mcp.search_files(\"*.py\")\nprint(search_result)\n```\n\n## Using the GitCodeAnalyzer Class\n\nFor more structured Git analysis, you can use the `GitCodeAnalyzer` class:\n\n```python\nfrom langflow_git_analyzer import GitCodeAnalyzer\n\n# Initialize the analyzer\nanalyzer = GitCodeAnalyzer(mcp_server_url=\"http://localhost:8000\")\n\n# Analyze a repository\nanalyzer.analyze_repository(\"https://github.com/username/repository\")\n\n# Get a summary\nsummary = analyzer.get_repository_summary()\nprint(summary)\n\n# Get AI recommendations\nrecommendations = analyzer.get_repository_recommendations()\nprint(recommendations)\n\n# Analyze code patterns\npattern_analysis = analyzer.analyze_code_pattern(\"def process\")\nprint(pattern_analysis)\n\n# Get the last commit diff\ndiff_info = analyzer.get_last_commit_diff()\nprint(diff_info)\n\n# Get a formatted summary of the diff\ndiff_summary = analyzer.get_formatted_diff_summary()\nprint(diff_summary)\n\n# Get AI analysis of the commit changes\ndiff_analysis = analyzer.analyze_commit_diff()\nprint(diff_analysis)\n```\n\n## Troubleshooting\n\n### Prometheus Issues\n1. Verify Prometheus is running: `docker ps | grep prometheus`\n2. Check you can access the Prometheus UI: http://localhost:9090\n3. Verify the MCP server is running and accessible\n4. Check the MCP server logs for errors\n5. Try simple queries first to verify connectivity (e.g., `up` query)\n\n### OpenAI Issues\n1. Verify your API keys are set correctly\n2. Check for rate limiting or quota issues\n3. Verify you're using supported models for your API key\n\n### Git Issues\n1. Ensure the Git repository URL is accessible\n2. Check for authentication issues if using private repositories\n3. Ensure GitPython is installed correctly ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "openai",
        "repository",
        "services git",
        "file management",
        "openai services"
      ],
      "category": "file-management"
    },
    "edupoli--smileapi-mcp": {
      "owner": "edupoli",
      "name": "smileapi-mcp",
      "url": "https://github.com/edupoli/smileapi-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/edupoli.webp",
      "description": "Enables seamless integration of messaging capabilities into applications through the SmileAPI, facilitating the sending of text, images, videos, audio, and documents. Leverages pre-built tools to enhance communication workflows.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-05-03T02:03:30Z",
      "readme_content": "# Servidor MCP para SmileAPI\n\n[![smithery badge](https://smithery.ai/badge/@edupoli/smileapi-mcp)](https://smithery.ai/server/@edupoli/smileapi-mcp)\n\nEste é um servidor MCP (Model Context Protocol) para integração com a SmileAPI, permitindo o envio de mensagens de texto, imagens, vídeos, áudios e documentos através de ferramentas disponibilizadas para modelos de linguagem.\n\n## Requisitos\n\n- Node.js 14+ instalado\n- Conta na SmileAPI com credenciais de acesso\n\n## Instalação\n\n### Installing via Smithery\n\nTo install smileapi-mcp for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@edupoli/smileapi-mcp):\n\n```bash\nnpx -y @smithery/cli install @edupoli/smileapi-mcp --client claude\n```\n\n### Installing Manually\n\n1. Clone este repositório\n2. Instale as dependências:\n\n```bash\nnpm install\n```\n\n3. Configure as variáveis de ambiente:\n\n```bash\ncp .env.example .env\n```\n\n4. Edite o arquivo `.env` com suas credenciais da SmileAPI:\n\n```\nSMILE_API_USERNAME=seuusername\nSMILE_API_PHONE_NUMBER_ID=seuphoneID\nSMILE_API_TOKEN=seutoken\n```\n\n## Uso\n\n### Como servidor MCP\n\nPara iniciar o servidor MCP:\n\n```bash\nnpm start\n```\n\n### Chamada direta de ferramentas\n\nVocê também pode executar as ferramentas diretamente via linha de comando:\n\n```bash\n# Enviar texto\nnode index.js envia_texto '{\"to\":\"5543996611437\",\"text\":\"Olá, esta é uma mensagem de teste!\"}'\n\n# Enviar imagem\nnode index.js envia_imagem '{\"to\":\"5543996611437\",\"link\":\"https://exemplo.com/imagem.jpg\",\"caption\":\"Imagem de teste\"}'\n\n# Enviar vídeo\nnode index.js envia_video '{\"to\":\"5543996611437\",\"link\":\"https://exemplo.com/video.mp4\",\"caption\":\"Vídeo de teste\"}'\n\n# Enviar áudio\nnode index.js envia_audio '{\"to\":\"5543996611437\",\"link\":\"https://exemplo.com/audio.mp3\"}'\n\n# Enviar documento\nnode index.js envia_documento '{\"to\":\"5543996611437\",\"link\":\"https://exemplo.com/documento.pdf\",\"caption\":\"Documento de teste\",\"fileName\":\"documento.pdf\"}'\n```\n\n## Ferramentas disponíveis\n\n### envia_texto\n\nEnvia mensagem de texto.\n\nParâmetros:\n\n- `to`: Número do destinatário (ex: 5543996611437)\n- `delayMessage`: Atraso para enviar a mensagem em segundos (opcional, padrão: 0)\n- `delayTyping`: Atraso para simular digitação em segundos (opcional, padrão: 0)\n- `text`: Texto da mensagem\n\n### envia_imagem\n\nEnvia uma imagem.\n\nParâmetros:\n\n- `to`: Número do destinatário\n- `delayMessage`: Atraso para enviar em segundos (opcional, padrão: 0)\n- `link`: URL da imagem\n- `caption`: Legenda da imagem (opcional)\n- `viewOnce`: Define se a imagem será visualizada apenas uma vez (opcional, padrão: false)\n\n### envia_video\n\nEnvia um vídeo.\n\nParâmetros:\n\n- `to`: Número do destinatário\n- `delayMessage`: Atraso para enviar em segundos (opcional, padrão: 0)\n- `link`: URL do vídeo\n- `caption`: Legenda do vídeo (opcional)\n- `viewOnce`: Define se o vídeo será visualizado apenas uma vez (opcional, padrão: false)\n\n### envia_audio\n\nEnvia um áudio.\n\nParâmetros:\n\n- `to`: Número do destinatário\n- `delayMessage`: Atraso para enviar em segundos (opcional, padrão: 0)\n- `link`: URL do áudio\n\n### envia_documento\n\nEnvia um documento.\n\nParâmetros:\n\n- `to`: Número do destinatário\n- `delayMessage`: Atraso para enviar em segundos (opcional, padrão: 0)\n- `link`: URL do documento\n- `caption`: Legenda do documento (opcional)\n- `fileName`: Nome do arquivo do documento (opcional)\n\n## Integração com modelos de linguagem\n\nEste servidor foi projetado para ser utilizado com modelos de linguagem que suportam o protocolo MCP, permitindo que eles enviem mensagens através da SmileAPI.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "smileapi",
        "messaging",
        "file",
        "applications smileapi",
        "smileapi facilitating",
        "integration messaging"
      ],
      "category": "file-management"
    },
    "erikhoward--adls-mcp-server": {
      "owner": "erikhoward",
      "name": "adls-mcp-server",
      "url": "https://github.com/erikhoward/adls-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/erikhoward.webp",
      "description": "Standardized interface for interacting with Azure Data Lake Storage Gen2, facilitating file operations through MCP tools.",
      "stars": 4,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-05T06:47:58Z",
      "readme_content": "# ADLS2 MCP Server 🚀\n\nA Model Context Protocol (MCP) server implementation for Azure Data Lake Storage Gen2. This service provides a standardized interface for interacting with ADLS2 storage, enabling file operations through MCP tools.\n\n[![License](https://img.shields.io/github/license/erikhoward/adls-mcp-server)](https://opensource.org/licenses/MIT) [![Python Version](https://img.shields.io/badge/python-3.13%2B-blue.svg)](https://www.python.org/) [![uv](https://img.shields.io/badge/uv-package%20manager-blueviolet)](https://docs.astral.sh/uv/) [![MCP](https://img.shields.io/badge/MCP-compatible-green.svg)](https://github.com/modelcontextprotocol/spec)\n\n## Setup 🛠️\n\n### Installation 📦\n\nRequires Python 3.13 or higher.\n\nInstall the package using `uv`:\n\n```bash\nuv pip install adls2-mcp-server\n```\n\n### MCP Configuration ⚙️\n\n### Claude Desktop Configuration\n\n1 - Edit Claude Desktop Configuration:\n\nOpen `claude_desktop_config.json` and add the following configuration.\n\nOn MacOs, the file is located here:\n`~/Library/Application Support/Claude Desktop/claude_desktop_config.json`.\n\nOn Windows, the file is located here:\n`%APPDATA%\\Claude Desktop\\claude_desktop_config.json`.\n\n```json\n{\n    \"mcpServers\": {\n        \"adls2\": {\n            \"command\": \"adls2-mcp-server\",\n            \"env\": {\n                \"LOG_LEVEL\": \"DEBUG\",\n                \"UPLOAD_ROOT\": \"/path/to/store/uploads\",\n                \"DOWNLOAD_ROOT\": \"/path/to/store/downloads\",\n                \"AZURE_STORAGE_ACCOUNT_NAME\": \"your-azure-adls2-storage-account-name\",\n                \"READ_ONLY_MODE\": \"false\"\n            }\n        }\n    }\n}\n```\n\nThe following is a table of available environment configuration variables:\n\n| Variable | Description | Default |\n| --- | --- | --- |\n| `LOG_LEVEL` | Logging level | `INFO` |\n| `UPLOAD_ROOT` | Root directory for file uploads | `./uploads` |\n| `DOWNLOAD_ROOT` | Root directory for file downloads | `./downloads` |\n| `AZURE_STORAGE_ACCOUNT_NAME` | Azure ADLS2 storage account name | `None` |\n| `AZURE_STORAGE_ACCOUNT_KEY` | Azure ADLS2 storage account key (optional) | `None` |\n| `READ_ONLY_MODE` | Whether the server should operate in read-only mode | `true` |\n\n\nIf `AZURE_STORAGE_ACCOUNT_KEY` is not set, the server will attempt to authenticate using Azure CLI credentials. Ensure you have logged in with Azure CLI before running the server:\n\n```bash\naz login\n```\n\n2 - Restart Claude Desktop.\n\n### Available Tools 🔧\n\n#### Filesystem (container) Operations\n\n- `list_filesystems` - List all filesystems in the storage account\n- `create_filesystem` - Create a new filesystem\n- `delete_filesystem` - Delete an existing filesystem\n\n#### File Operations\n\n- `upload_file` - Upload a file to ADLS2\n- `download_file` - Download a file from ADLS2\n- `file_exists` - Check if a file exists\n- `rename_file` - Rename/move a file\n- `get_file_properties` - Get file properties\n- `get_file_metadata` - Get file metadata\n- `set_file_metadata` - Set file metadata\n- `set_file_metadata_json` - Set multiple metadata key-value pairs using JSON\n\n#### Directory Operations\n\n- `create_directory` - Create a new directory\n- `delete_directory` - Delete a directory\n- `rename_directory` - Rename/move a directory\n- `directory_exists` - Check if a directory exists\n- `directory_get_paths` - Get all paths under the specified directory\n\n## Development 💻\n\n### Local Development Setup\n\n1 - Clone the repository:\n\n```bash\ngit clone https://github.com/erikhoward/adls2-mcp-server.git\ncd adls2-mcp-server\n```\n\n2 - Create and activate virtual environment:\n\nLinux/macOS:\n\n```bash\npython -m venv .venv\nsource .venv/bin/activate\n```\n\nWindows:\n\n```bash\n.venv\\Scripts\\activate\n```\n\n3 - Install dependencies:\n\n```bash\npip install -e \".[dev]\"\n```\n\n4 - Copy and configure environment variables:\n\n```bash\ncp .env.example .env\n```\n\nEdit .env with your settings.\n\n```bash\nAZURE_STORAGE_ACCOUNT_NAME=your_azure_adls2_storage_account_name\nAZURE_STORAGE_ACCOUNT_KEY=your_azure_adls2_storage_key (optional)\nDOWNLOAD_ROOT=/path/to/download/folder\nUPLOAD_ROOT=/path/to/upload/folder\nREAD_ONLY_MODE=True\nLOG_LEVEL=INFO\n```\n\nIf `AZURE_STORAGE_ACCOUNT_KEY` is not set, the server will attempt to authenticate using Azure CLI credentials. Ensure you have logged in with Azure CLI before running the server:\n\n```bash\naz login\n```\n\n5 - Claude Desktop Configuration\n\nOpen `claude_desktop_config.json` and add the following configuration.\n\nOn MacOs, the file is located here:\n`~/Library/Application Support/Claude Desktop/claude_desktop_config.json`.\n\nOn Windows, the file is located here:\n`%APPDATA%\\Claude Desktop\\claude_desktop_config.json`.\n\n```json\n{\n    \"mcpServers\": {\n        \"adls2\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/adls2-mcp-server/repo\",\n                \"run\",\n                \"adls2-mcp-server\"\n            ],\n            \"env\": {\n                \"LOG_LEVEL\": \"DEBUG\",\n                \"UPLOAD_ROOT\": \"/path/to/store/uploads\",\n                \"DOWNLOAD_ROOT\": \"/path/to/store/downloads\",\n                \"AZURE_STORAGE_ACCOUNT_NAME\": \"your-azure-adls2-storage-account-name\",\n                \"READ_ONLY_MODE\": \"false\"\n            }\n        }\n    }\n}\n```\n\n6 - Restart Claude Desktop.\n\n## Contributions 🤝\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m '✨ Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License ⚖️\n\nLicensed under MIT - see [LICENSE.md](LICENSE) file.\n\n**This is not an official Microsoft product.**\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "azure",
        "storage",
        "adls",
        "storage gen2",
        "lake storage",
        "data lake"
      ],
      "category": "file-management"
    },
    "essenecrucix-netizen--jarvis": {
      "owner": "essenecrucix-netizen",
      "name": "jarvis",
      "url": "https://github.com/essenecrucix-netizen/jarvis",
      "imageUrl": "/freedevtools/mcp/pfp/essenecrucix-netizen.webp",
      "description": "An intelligent coding assistant that supports multiple AI models for code generation, modifications, and technical discussions. It can handle various file types for text extraction and data parsing to facilitate development tasks.",
      "stars": 1,
      "forks": 2,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-01-15T00:11:47Z",
      "readme_content": "# J.A.R.V.I.S. - AI Code Assistant\n\nJ.A.R.V.I.S. is an intelligent coding assistant that leverages multiple state-of-the-art language models to help you with code generation, modifications, and technical discussions.\n\n## Features\n\n- **Multi-Model Support**: Choose between different AI models for your coding needs:\n  - DeepSeek Coder V3\n  - Gemini 2.0 Flash Experimental\n  - Grok 2\n  - Qwen 2.5 Coder\n  - Llama 3.3 70B Instruct\n  - Claude 3.5 Sonnet\n  - GPT-4 Turbo\n  - GPT-4o\n  - o1 Preview\n\n- **File Attachment Support**:\n  - PDF files with text extraction\n  - Microsoft Word documents (.docx)\n  - Excel spreadsheets with sheet parsing\n  - Images with OCR capabilities\n  - Enhanced Markdown with GFM support\n  - All major programming languages\n  - Configuration files\n  - Text and documentation files\n  - File preview with syntax highlighting\n  - Multiple file upload support\n  - Progress indicators and file size display\n  - Type-specific icons and preview buttons\n\n- **Real-Time Updates**:\n  - WebSocket-based notifications\n  - Instant feedback for code changes\n  - Real-time workspace updates\n  - Automatic change notifications\n\n- **Workspace Management**:\n  - Create and manage multiple workspaces\n  - View workspace history\n  - Delete workspaces when no longer needed\n  - Rename workspaces\n  - Browse workspace file structure\n\n- **Code Generation & Modification**:\n  - Generate new code based on natural language prompts\n  - Modify existing code with AI assistance\n  - Preview changes before applying them\n  - View diffs of proposed changes\n\n- **Interactive Chat**:\n  - Discuss code and technical concepts\n  - Get explanations about existing code\n  - Context-aware responses based on workspace content\n  - Attach files for additional context\n\n## Technical Stack\n\n- **Backend**:\n  - Flask web framework\n  - Flask-SocketIO for WebSocket support\n  - Eventlet for async operations\n\n- **Frontend**:\n  - Pure JavaScript\n  - TailwindCSS for styling\n  - CodeMirror for code editing\n  - Socket.IO client for real-time notifications\n  - PDF.js for PDF processing\n  - Mammoth.js for Word documents\n  - XLSX.js for Excel files\n  - Tesseract.js for OCR\n  - Marked and Unified.js for Markdown\n\n## Installation\n\n1. Clone the repository\n2. Install dependencies:\n   ```bash\n   pip install -r requirements.txt\n   ```\n3. Set up your environment variables in `.env`:\n   ```\n   DEEPSEEK_API_KEY=your_deepseek_api_key\n   GROK_API_KEY=your_grok_api_key\n   GOOGLE_API_KEY=your_google_api_key\n   ANTHROPIC_API_KEY=your_anthropic_api_key\n   OPENAI_API_KEY=your_openai_api_key\n   ```\n\n## Usage\n\n1. Start the server:\n   ```bash\n   python app.py\n   ```\n2. Open your browser and navigate to `http://localhost:5000`\n3. Create a new workspace or select an existing one\n4. Choose your preferred AI model\n5. Start coding with AI assistance!\n\n## Model Capabilities\n\n- **DeepSeek Coder V3**: Specialized in code generation and modification\n- **Gemini 2.0 Pro**: Advanced code generation and natural language understanding\n- **Grok 2**: Advanced language model for code and natural language\n- **Qwen 2.5 Coder**: Specialized 32B model for code generation\n- **Llama 3.3 70B Instruct**: Large context window and strong code generation capabilities\n- **Claude 3.5 Sonnet**: Advanced reasoning and code understanding\n\n## Contributing\n\nContributions are welcome! Please feel free to submit pull requests.\n\n## Special Thanks\n\n- **Nikole Cardoso** for her invaluable contributions and support\n- **Guilherme Guirro** for his expertise and guidance\n- **Felipe Santos** for his dedication and insights\n\nTheir contributions have been instrumental in making J.A.R.V.I.S. better.\n\n## Platform Compatibility\n\nThis application has been tested and confirmed working on:\n- Linux (native)\n- Windows Subsystem for Linux (WSL 2)\n- Windows (native, no admin privileges required)\n\nThe application uses directory junctions on Windows to avoid requiring admin privileges, while maintaining symlink functionality on Unix-like systems.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "coding",
        "file",
        "coding assistant",
        "file management",
        "netizen jarvis"
      ],
      "category": "file-management"
    },
    "exoticknight--mcp-file-merger": {
      "owner": "exoticknight",
      "name": "mcp-file-merger",
      "url": "https://github.com/exoticknight/mcp-file-merger",
      "imageUrl": "/freedevtools/mcp/pfp/exoticknight.webp",
      "description": "Combine multiple files into a single file efficiently, providing detailed reports on file sizes and merge summaries. Access is restricted to user-defined directories for security.",
      "stars": 23,
      "forks": 11,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-09-11T06:14:36Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/exoticknight-mcp-file-merger-badge.png)](https://mseep.ai/app/exoticknight-mcp-file-merger)\n\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/exoticknight/mcp-file-merger)](https://archestra.ai/mcp-catalog/exoticknight__mcp-file-merger)\n\n# File Merger MCP Server\n\nSimple utility to combine multiple files into one. Fast, secure, and easy to use.\n\n<a href=\"https://glama.ai/mcp/servers/@exoticknight/mcp-file-merger\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@exoticknight/mcp-file-merger/badge\" alt=\"File Merger Server MCP server\" />\n</a>\n\n## Features\n\n- **Simple** - Merge any number of files with a single command\n- **Fast** - Efficiently combines files of any size\n- **Secure** - Only accesses directories you allow\n- **Detailed** - Reports file sizes and merge summary\n\n## API\n\n### Tools\n\n- **merge_files**\n  - Inputs:\n    - `inputPaths` (string[]): Files to merge\n    - `outputPath` (string): Output file location\n  - Returns:\n    - Success message with merge details\n\n- **list_allowed_directories**\n  - Lists directories the server can access\n\n## Usage with Claude Desktop\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"file-merger\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@exoticknight/mcp-file-merger\",\n        \"/path/to/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n## Installation\n\n```bash\n# Clone and install\ngit clone https://github.com/exoticknight/mcp-file-merger.git\ncd mcp-file-merger\nnpm install\nnpm run build\n```\n\n## License\n\nApache License 2.0",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "files",
        "merge",
        "file",
        "file merger",
        "file management",
        "mcp file"
      ],
      "category": "file-management"
    },
    "falahgs--mcp-3d-style-cartoon-gen-server": {
      "owner": "falahgs",
      "name": "mcp-3d-style-cartoon-gen-server",
      "url": "https://github.com/falahgs/mcp-3d-style-cartoon-gen-server",
      "imageUrl": "/freedevtools/mcp/pfp/falahgs.webp",
      "description": "Generates high-quality 3D-style cartoon images from text prompts using Google's Gemini AI, with child-friendly designs for engaging visuals. Offers secure file system operations for managing files, including reading and writing capabilities.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-11T21:40:56Z",
      "readme_content": "# MCP Combined Server: 3D Cartoon Generator & File System Tools\n\nA professional-grade server that provides two major capabilities: \n1. High-quality 3D-style cartoon image generation using Google's Gemini AI\n2. Secure file system operations for reading, writing, and managing files\n\n\n\n## 🌟 Features\n\n### Image Generation\n- **3D Cartoon Generation**: Creates high-quality 3D-style cartoon images\n- **Child-Friendly Design**: Focuses on colorful, playful, and engaging visuals\n- **Instant Preview**: Automatically opens generated images in your default browser\n- **Local Storage**: Saves images and previews in an organized output directory\n\n### File System Operations\n- **Secure File Access**: Path validation and security checks\n- **Read/Write Files**: Read and write text file contents\n- **Directory Operations**: List, create, and navigate directories\n- **File Search**: Find files matching patterns\n\n### System Features\n- **Professional Configuration**: Robust error handling and controlled logging\n- **Cross-Platform Support**: Intelligent file path handling for Windows, macOS, and Linux\n- **Smart OS Detection**: Automatically finds the best save location for each operating system\n- **Security Controls**: Restricted directory access through configuration\n\n## 🛠️ Technical Stack\n\n- **Core Framework**: Model Context Protocol (MCP) SDK\n- **AI Integration**: Google Generative AI (Gemini)\n- **Runtime**: Node.js v14+\n- **Language**: TypeScript\n- **Package Manager**: npm\n\n## 📋 Prerequisites\n\n- Node.js (v14 or higher)\n- Google Gemini API key\n- TypeScript\n\n## ⚙️ Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/falahgs/mcp-3d-style-cartoon-gen-server.git\ncd mcp-3d-style-cartoon-gen-server\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Configure environment:\nCreate a `.env` file in the root directory:\n```env\nGEMINI_API_KEY=your_api_key_here\nALLOWED_DIRECTORIES=/path/to/allowed/dir1,/path/to/allowed/dir2\n```\n\n4. Build the project:\n```bash\nnpm run build\n```\n\n## 🔧 Configuring Claude Desktop with MCP Server\n\nTo integrate this combined server with Claude Desktop:\n\n1. Locate the Configuration File:\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Linux: `~/.config/Claude/claude_desktop_config.json`\n\n2. Add the following configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-3d-cartoon-generator\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"path/to/your/build/index.js\"\n      ],\n      \"env\": {\n        \"GEMINI_API_KEY\": \"your_gemini_api_key_here\",\n        \"IS_REMOTE\": \"true\",\n        \"SAVE_TO_DESKTOP\": \"true\",\n        \"DETECT_OS_PATHS\": \"true\",\n        \"ALLOWED_DIRECTORIES\": \"C:\\\\Users\\\\YourUsername\\\\Desktop,C:\\\\Users\\\\YourUsername\\\\Documents\",\n        \"DEBUG\": \"false\"\n      }\n    }\n  }\n}\n```\n\n### Windows PowerShell Helper Script\n\nFor Windows users, you can use the included `fix_claude_config.ps1` script to automatically configure Claude Desktop:\n\n1. Edit the script to update the path to your server build and your Gemini API key\n2. Run the script in PowerShell:\n```powershell\npowershell -ExecutionPolicy Bypass -File .\\fix_claude_config.ps1\n```\n\nThis will create or update the configuration file with proper encoding and settings.\n\n## 🚀 Available Tools\n\n### 1. Image Generation Tool\n\n```json\n{\n  \"name\": \"generate_3d_cartoon\",\n  \"description\": \"Generates a 3D style cartoon image for kids based on the given prompt\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"prompt\": {\n        \"type\": \"string\",\n        \"description\": \"The prompt describing the 3D cartoon image to generate\"\n      },\n      \"fileName\": {\n        \"type\": \"string\",\n        \"description\": \"The name of the output file (without extension)\"\n      }\n    },\n    \"required\": [\"prompt\", \"fileName\"]\n  }\n}\n```\n\n### 2. File System Tools\n\n#### Read File\n```json\n{\n  \"name\": \"read_file\",\n  \"description\": \"Read the contents of a file\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Path to the file to read\"\n      }\n    },\n    \"required\": [\"path\"]\n  }\n}\n```\n\n#### Write File\n```json\n{\n  \"name\": \"write_file\",\n  \"description\": \"Write content to a file\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Path to the file to write\"\n      },\n      \"content\": {\n        \"type\": \"string\",\n        \"description\": \"Content to write to the file\"\n      }\n    },\n    \"required\": [\"path\", \"content\"]\n  }\n}\n```\n\n#### List Directory\n```json\n{\n  \"name\": \"list_directory\",\n  \"description\": \"List the contents of a directory\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Path to the directory to list\"\n      }\n    },\n    \"required\": [\"path\"]\n  }\n}\n```\n\n#### Create Directory\n```json\n{\n  \"name\": \"create_directory\",\n  \"description\": \"Create a new directory\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Path to the directory to create\"\n      }\n    },\n    \"required\": [\"path\"]\n  }\n}\n```\n\n#### Search Files\n```json\n{\n  \"name\": \"search_files\",\n  \"description\": \"Search for files matching a pattern\",\n  \"inputSchema\": {\n    \"type\": \"object\",\n    \"properties\": {\n      \"path\": {\n        \"type\": \"string\",\n        \"description\": \"Base directory to search from\"\n      },\n      \"pattern\": {\n        \"type\": \"string\",\n        \"description\": \"Search pattern (glob format)\"\n      },\n      \"excludePatterns\": {\n        \"type\": \"array\",\n        \"items\": {\n          \"type\": \"string\"\n        },\n        \"description\": \"Patterns to exclude from search (glob format)\"\n      }\n    },\n    \"required\": [\"path\", \"pattern\"]\n  }\n}\n```\n\n## 📄 Example Usage\n\n### Image Generation Examples\n\n```javascript\n// Generate a 3D cartoon\n{\n  \"name\": \"generate_3d_cartoon\",\n  \"arguments\": {\n    \"prompt\": \"A friendly robot playing with a cat\",\n    \"fileName\": \"robot_cat_play\"\n  }\n}\n```\n\n### File System Examples\n\n```javascript\n// Read a file\n{\n  \"name\": \"read_file\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents/example.txt\"\n  }\n}\n\n// Write a file\n{\n  \"name\": \"write_file\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents/new-file.txt\",\n    \"content\": \"This is the content of the file.\"\n  }\n}\n\n// List directory contents\n{\n  \"name\": \"list_directory\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents\"\n  }\n}\n\n// Create a directory\n{\n  \"name\": \"create_directory\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents/new-folder\"\n  }\n}\n\n// Search for files\n{\n  \"name\": \"search_files\",\n  \"arguments\": {\n    \"path\": \"C:/Users/YourUsername/Documents\",\n    \"pattern\": \"*.txt\",\n    \"excludePatterns\": [\"temp*\", \"*.tmp\"]\n  }\n}\n```\n\n## 🔒 Security Features\n\nThe server implements several security measures:\n\n1. **Path Validation**: All file paths are validated to ensure they are within allowed directories.\n2. **Allowed Directories**: Only directories explicitly set in the `ALLOWED_DIRECTORIES` environment variable can be accessed.\n3. **Symlink Protection**: Prevents access to directories outside the allowed scope via symlinks.\n4. **Controlled Logging**: Debug logs are disabled by default to prevent information leakage.\n\n## ⚙️ Configuration Options\n\n### Environment Variables\n\n| Variable | Description | Default |\n|----------|-------------|---------|\n| `GEMINI_API_KEY` | Google Gemini API key for image generation | (Required) |\n| `ALLOWED_DIRECTORIES` | Comma-separated list of allowed file system paths | User's home dir, current dir |\n| `IS_REMOTE` | Run in remote mode without browser opening | false |\n| `SAVE_TO_DESKTOP` | Force saving to desktop directory | false |\n| `DETECT_OS_PATHS` | Enable OS-specific path detection | true |\n| `DEBUG` | Enable verbose debug logging | false |\n\n## 🛠️ Troubleshooting\n\n### Common Issues:\n\n1. **JSON Parsing Errors in Claude**:\n   - Ensure `DEBUG` is set to \"false\" to prevent logs from interfering with JSON communication\n   - Check for proper JSON formatting in the Claude configuration\n\n2. **File Access Denied**:\n   - Verify that the paths you're trying to access are included in `ALLOWED_DIRECTORIES`\n   - Check file permissions on the target files/directories\n\n3. **Images Not Saving**:\n   - Set `SAVE_TO_DESKTOP` to \"true\" to ensure images save to the desktop\n   - Check desktop path detection in the server logs (enable DEBUG temporarily)\n\n## 📄 License\n\n[MIT License](LICENSE)\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "files",
        "file",
        "mcp 3d",
        "file management",
        "falahgs mcp"
      ],
      "category": "file-management"
    },
    "famano--mcp-server-office": {
      "owner": "famano",
      "name": "mcp-server-office",
      "url": "https://github.com/famano/mcp-server-office",
      "imageUrl": "/freedevtools/mcp/pfp/famano.webp",
      "description": "Read and write Microsoft Word (docx) files with capabilities to edit paragraphs and insert new text. Access complete document content, including tables and images, through a command-line interface.",
      "stars": 27,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-30T00:07:12Z",
      "readme_content": "# MCP Server Office\n\n[![smithery badge](https://smithery.ai/badge/@famano/mcp-server-office)](https://smithery.ai/server/@famano/mcp-server-office)\n\nA Model Context Protocol (MCP) server providing tools to read/write Microsoft Word (docx) files.\n\n### Installing via Smithery\n\nTo install Server Office for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@famano/mcp-server-office):\n\n```bash\nnpx -y @smithery/cli install @famano/mcp-server-office --client claude\n```\n\n## Usage\n\nInstall with pip:\n\n```bash\npip install mcp-server-office\n```\n\nThen, start the MCP server:\n\n```bash\nmcp-server-office\n```\n\nOr using uv, just:\n\n```bash\nuvx mcp-server-office\n```\n\n### Available Tools\n\n1. `read_docx`: Read complete contents of a docx file including tables and images.\n\n   - Input: `path` (string) - Absolute path to the target file\n   - Note: Images are converted to [Image] placeholders, and track changes are not shown\n2. `write_docx`: Create a new docx file with given content.\n\n   - Input:\n     - `path` (string) - Absolute path to target file\n     - `content` (string) - Content to write to the file\n   - Note: Use double line breaks for new paragraphs, and [Table] tag with | separators for tables\n3. `edit_docx_paragraph`: Make text replacements in specified paragraphs of a docx file.\n\n   - Input:\n     - `path` (string) - Absolute path to file to edit\n     - `edits` (array) - List of dictionaries containing search/replace text and paragraph index\n       - `paragraph_index` (number) - 0-based index of the paragraph to edit\n       - `search` (string) - Text to find within the specified paragraph\n       - `replace` (string) - Text to replace with\n   - Note: Each search string must match exactly once within the specified paragraph\n4. `edit_docx_insert`: Insert new paragraphs into a docx file.\n\n   - Input:\n     - `path` (string) - Absolute path to file to edit\n     - `inserts` (array) - List of dictionaries containing text and optional paragraph index\n       - `text` (string) - Text to insert as a new paragraph\n       - `paragraph_index` (number, optional) - 0-based index of the paragraph before which to insert. If not specified, insert at the end.\n\n## Requirements\n\n- Python >= 3.12\n- Dependencies:\n  - mcp[cli] >= 1.2.0\n  - python-docx >= 1.1.2\n\n---\n\n# MCP Server Office (日本語)\n\n[![smithery badge](https://smithery.ai/badge/@famano/mcp-server-office)](https://smithery.ai/server/@famano/mcp-server-office)\n\nMicrosoft Word (docx) ファイルの読み書きを提供するModel Context Protocol (MCP) サーバーです。\n\n### Smitheryによるインストール\n\n[Smithery](https://smithery.ai/server/@famano/mcp-server-office)経由でClaude DesktopにServer Officeを自動インストールするには:\n\n```bash\nnpx -y @smithery/cli install @famano/mcp-server-office --client claude\n```\n\n## 使用方法\n\npipを使用してインストール:\n\n```bash\npip install mcp-server-office\n```\n\nMCPサーバーの起動:\n\n```bash\nmcp-server-office\n```\n\nまたは、uvを使う場合:\n\n```bash\nuvx mcp-server-office\n```\n\n### 利用可能なツール\n\n1. `read_docx`: docxファイルの内容を表やイメージを含めて完全に読み取ります。\n\n   - 入力: `path` (文字列) - 対象ファイルの絶対パス\n   - 注意: 画像は[Image]というプレースホルダーに変換され、変更履歴は表示されません\n2. `write_docx`: 新しいdocxファイルを指定された内容で作成します。\n\n   - 入力:\n     - `path` (文字列) - 作成するファイルの絶対パス\n     - `content` (文字列) - ファイルに書き込む内容\n   - 注意: 段落は2つの改行で区切り、表は[Table]タグと|区切りを使用します\n3. `edit_docx_paragraph`: docxファイル内の指定された段落のテキストを置換します。\n\n   - 入力:\n     - `path` (文字列) - 編集するファイルの絶対パス\n     - `edits` (配列) - 検索/置換テキストと段落インデックスを含む辞書のリスト\n       - `paragraph_index` (数値) - 編集する段落の0ベースのインデックス\n       - `search` (文字列) - 指定された段落内で検索するテキスト\n       - `replace` (文字列) - 置換するテキスト\n   - 注意: 各検索文字列は指定された段落内で一度だけマッチする必要があります\n4. `edit_docx_insert`: docxファイルに新しい段落を挿入します。\n\n   - 入力:\n     - `path` (文字列) - 編集するファイルの絶対パス\n     - `inserts` (配列) - テキストとオプションの段落インデックスを含む辞書のリスト\n       - `text` (文字列) - 新しい段落として挿入するテキスト\n       - `paragraph_index` (数値, オプション) - 挿入する位置の段落の0ベースのインデックス。指定しない場合は末尾に挿入されます。\n\n## 動作要件\n\n- Python >= 3.12\n- 依存パッケージ:\n  - mcp[cli] >= 1.2.0\n  - python-docx >= 1.1.2\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "docx",
        "document",
        "file",
        "word docx",
        "docx files",
        "microsoft word"
      ],
      "category": "file-management"
    },
    "funchs--ifly-spark-agent-mcp": {
      "owner": "funchs",
      "name": "ifly-spark-agent-mcp",
      "url": "https://github.com/funchs/ifly-spark-agent-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/funchs.webp",
      "description": "Invokes the task chain of the iFlytek SparkAgent Platform through an MCP server interface, allowing users to upload files and interact with platform capabilities. Enables integration with AI models for automated workflows and task execution.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-20T13:44:44Z",
      "readme_content": "# ifly-spark-agent-mcp\n\nThis is a simple example of using MCP Server to invoke the task chain of the  iFlytek SparkAgent Platform.\n\n## Usage\n\n### Local debugging\n\nStart the server using either stdio (default) or SSE transport:\n\n```bash\n# Using stdio transport (default)\nuv run ifly-spark-agent-mcp\n\n# Using SSE transport on custom port\nuv run ifly-spark-agent-mcp --transport sse --port 8000\n```\n\nBy default, the server exposes a tool named \"upload_file\" that accepts one required argument:\n\n- `file`: The path of the uploaded file\n\n### MCP Client Example\n\nUsing the MCP client, you can use the tool like this using the STDIO transport:\n\n```python\nimport asyncio\nfrom mcp.client.session import ClientSession\nfrom mcp.client.stdio import StdioServerParameters, stdio_client\n\n\nasync def main():\n    async with stdio_client(\n        StdioServerParameters(command=\"uv\", args=[\"run\", \"ifly-spark-agent-mcp\"])\n    ) as (read, write):\n        async with ClientSession(read, write) as session:\n            await session.initialize()\n\n            # List available tools\n            tools = await session.list_tools()\n            print(tools)\n\n            # Call the upload_file tool\n            result = await session.call_tool(\"upload_file\", {\"file\": \"/path/to/file\"})\n            print(result)\n\n\nasyncio.run(main())\n\n```\n\n### Usage with MCP client\n\n#### Use on Claude\nTo add a persistent client, add the following to your `claude_desktop_config.json` or `mcp.json` file:\n\n##### 1. Use uv\n```json\n{\n  \"mcpServers\": {\n    \"ifly-spark-agent-mcp\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/ifly-spark-agent-mcp\",\n        \"run\",\n        \"ifly-spark-agent-mcp\"\n      ],\n      \"env\": {\n        \"IFLY_SPARK_AGENT_BASE_URL\": \"xxxx\",\n        \"IFLY_SPARK_AGENT_APP_ID\": \"xxxx\",\n        \"IFLY_SPARK_AGENT_APP_SECRET\": \"xxxx\"\n      }\n    }\n  }\n}\n```\n\n##### 2. Use uvx with github repository\n```json\n{\n    \"mcpServers\": {\n        \"ifly-spark-agent-mcp\": {\n            \"command\": \"uvx\",\n            \"args\": [\n                \"--from\",\n                \"git+https://github.com/iflytek/ifly-spark-agent-mcp\",\n                \"ifly-spark-agent-mcp\"\n            ],\n            \"env\": {\n              \"IFLY_SPARK_AGENT_BASE_URL\": \"xxxx\",\n              \"IFLY_SPARK_AGENT_APP_ID\": \"xxxx\",\n              \"IFLY_SPARK_AGENT_APP_SECRET\": \"xxxx\"\n            }\n        }\n    }\n}\n```\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sparkagent",
        "spark",
        "agent",
        "sparkagent platform",
        "spark agent",
        "iflytek sparkagent"
      ],
      "category": "file-management"
    },
    "gabrielmaialva33--mcp-filesystem": {
      "owner": "gabrielmaialva33",
      "name": "mcp-filesystem",
      "url": "https://github.com/gabrielmaialva33/mcp-filesystem",
      "imageUrl": "/freedevtools/mcp/pfp/gabrielmaialva33.webp",
      "description": "Provides secure filesystem access for AI models through the Model Context Protocol with strict path validation to ensure authorized access to predefined directories, enabling seamless file and directory operations.",
      "stars": 7,
      "forks": 1,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-03T15:12:37Z",
      "readme_content": "<h1 align=\"center\">\n  <br>\n  <img src=\"https://raw.githubusercontent.com/gabrielmaialva33/mcp-filesystem/master/.github/assets/mcp.png\" alt=\"MCP Filesystem\" width=\"200\">\n  <br>\n  Secure <a href=\"https://modelcontextprotocol.io/introduction\">MCP</a> Filesystem Server\n  <br>\n</h1>\n\n<p align=\"center\">\n  <strong>A secure Model Context Protocol (MCP) server providing filesystem access within predefined directories</strong>\n</p>\n\n<p align=\"center\">\n  <img src=\"https://img.shields.io/github/license/gabrielmaialva33/mcp-filesystem?color=00b8d3?style=flat&logo=appveyor\" alt=\"License\" />\n  <img src=\"https://img.shields.io/github/languages/top/gabrielmaialva33/mcp-filesystem?style=flat&logo=appveyor\" alt=\"GitHub top language\" >\n  <img src=\"https://img.shields.io/github/languages/count/gabrielmaialva33/mcp-filesystem?style=flat&logo=appveyor\" alt=\"GitHub language count\" >\n  <img src=\"https://img.shields.io/github/repo-size/gabrielmaialva33/mcp-filesystem?style=flat&logo=appveyor\" alt=\"Repository size\" >\n  <a href=\"https://github.com/gabrielmaialva33/mcp-filesystem/commits/master\">\n    <img src=\"https://img.shields.io/github/last-commit/gabrielmaialva33/mcp-filesystem?style=flat&logo=appveyor\" alt=\"GitHub last commit\" >\n    <img src=\"https://img.shields.io/badge/made%20by-Maia-15c3d6?style=flat&logo=appveyor\" alt=\"Maia\" >  \n  </a>\n</p>\n\n<br>\n\n<p align=\"center\">\n  <a href=\"#bookmark-about\">About</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#computer-technologies\">Technologies</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#wrench-tools\">Tools</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#package-installation\">Installation</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#gear-usage\">Usage</a>&nbsp;&nbsp;&nbsp;|&nbsp;&nbsp;&nbsp;\n  <a href=\"#memo-license\">License</a>\n</p>\n\n<br>\n\n## :bookmark: About\n\n**MCP Filesystem Server** provides secure filesystem access for AI models through the Model Context Protocol. It\nenforces strict path validation and only allows access to predefined directories.\n\n<br>\n\n## :computer: Technologies\n\n- **[TypeScript](https://www.typescriptlang.org/)**\n- **[Node.js](https://nodejs.org/)**\n- **[MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk)**\n- **[Zod](https://zod.dev/)**\n- **[Docker](https://www.docker.com/)**\n- **[pnpm](https://pnpm.io/)**\n\n<br>\n\n## :wrench: Tools\n\n- **[Visual Studio Code](https://code.visualstudio.com/)**\n- **[ESLint](https://eslint.org/)**\n- **[Prettier](https://prettier.io/)**\n- **[Vitest](https://vitest.dev/)**\n- **[Docker Compose](https://docs.docker.com/compose/)**\n\n<br>\n\n## :package: Installation\n\n### :heavy_check_mark: **Prerequisites**\n\nThe following software must be installed:\n\n- **[Node.js](https://nodejs.org/en/)** (>=18.0.0)\n- **[Git](https://git-scm.com/)**\n- **[pnpm](https://pnpm.io/)** (>=8.0.0)\n- **[Docker](https://www.docker.com/)** (optional)\n- **[Docker Compose](https://docs.docker.com/compose/)** (optional)\n\n<br>\n\n### :arrow_down: **Cloning the repository**\n\n```sh\n  $ git clone https://github.com/gabrielmaialva33/mcp-filesystem.git\n  $ cd mcp-filesystem\n```\n\n<br>\n\n### :arrow_forward: **Running the application**\n\n#### Local Development\n\n```sh\n  # Install dependencies\n  $ pnpm install\n\n  # Build the application\n  $ pnpm build\n\n  # Run the server (specify directory to allow access to)\n  $ pnpm start /path/to/allowed/directory\n\n  # Or use configuration file\n  $ pnpm start --config=config.json\n```\n\n#### Using NPM Package\n\n```sh\n  # Install globally\n  $ npm install -g @gabrielmaialva33/mcp-filesystem\n\n  # Run the server\n  $ mcp-filesystem /path/to/allowed/directory\n\n  # Or use with npx (no installation needed)\n  $ npx @gabrielmaialva33/mcp-filesystem /path/to/allowed/directory\n\n  # Create a sample configuration file\n  $ npx @gabrielmaialva33/mcp-filesystem --create-config=config.json\n```\n\n#### Using Docker\n\n```sh\n  # Build the Docker image\n  $ docker build -t gabrielmaialva33/mcp-filesystem .\n\n  # Run using Docker\n  $ docker run -i --rm -v /path/to/data:/data:ro gabrielmaialva33/mcp-filesystem /data\n\n  # Use with config file\n  $ docker run -i --rm -v /path/to/config.json:/app/config.json -v /path/to/data:/data gabrielmaialva33/mcp-filesystem --config=/app/config.json\n```\n\n#### Using Docker Compose\n\n```sh\n  # Create a data directory\n  $ mkdir -p data\n\n  # Start the server\n  $ docker-compose up -d\n```\n\n<br>\n\n## :gear: Usage\n\n### Using with Claude Desktop\n\nClaude Desktop can be configured to use this MCP server for filesystem access. Add the following to your\n`claude_desktop_config.json`:\n\n#### Using Local Installation (Recommended)\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem\",\n      \"args\": [\n        \"/Users/gabrielmaia/Documents\",\n        \"/Users/gabrielmaia/Desktop\",\n        \"/Users/gabrielmaia/Downloads\"\n      ]\n    }\n  }\n}\n```\n\nMake sure to make the executable available globally:\n\n```sh\n# Make the binary executable\nchmod +x /Users/gabrielmaia/.nvm/versions/node/v22.14.0/bin/mcp-filesystem\n```\n\n#### Using NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@gabrielmaialva33/mcp-filesystem\",\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n#### Using Docker\n\nNote: When using Docker, all directories must be mounted to `/projects` by default. Adding the `ro` flag will make the\ndirectory read-only.\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--mount\",\n        \"type=bind,src=/Users/username/Desktop,dst=/projects/Desktop\",\n        \"--mount\",\n        \"type=bind,src=/path/to/other/allowed/dir,dst=/projects/other/allowed/dir,ro\",\n        \"--mount\",\n        \"type=bind,src=/path/to/file.txt,dst=/projects/path/to/file.txt\",\n        \"gabrielmaialva33/mcp-filesystem\",\n        \"/projects\"\n      ]\n    }\n  }\n}\n```\n\n### Available Tools\n\nThe MCP Filesystem Server provides these tools:\n\n#### File System Operations\n\n- **read_file**: Read a file's content\n- **read_multiple_files**: Read multiple files at once\n- **write_file**: Create or overwrite a file\n- **edit_file**: Make precise edits with diff preview\n- **create_directory**: Create directories recursively\n- **list_directory**: List directory contents\n- **directory_tree**: Get a recursive tree view\n- **move_file**: Move or rename files\n- **search_files**: Find files matching patterns\n- **get_file_info**: Get file metadata\n- **list_allowed_directories**: See accessible directories\n\n#### System & Network Operations\n\n- **get_metrics**: View server performance metrics (v0.3.0+)\n- **execute_command**: Execute system commands securely (v0.3.1+)\n- **curl_request**: Execute HTTP requests to external APIs (coming in v1.2.0)\n\n#### Using curl_request Tool (Coming in v1.2.0)\n\nThe `curl_request` tool will allow you to make HTTP requests to external APIs:\n\n```javascript\n// Example: Making a GET request with authentication\ncurl_request({\n  url: 'https://api.example.com/data',\n  method: 'GET',\n  headers: {\n    Authorization: 'Bearer your_token_here',\n  },\n})\n\n// Example: POST request with JSON data\ncurl_request({\n  url: 'https://api.example.com/create',\n  method: 'POST',\n  headers: {\n    'Content-Type': 'application/json',\n  },\n  data: '{\"name\":\"Example\",\"value\":123}',\n})\n```\n\nSee the `docs/curl-tool-examples.md` file for more detailed examples.\n\n<br>\n\n## :sparkles: Features\n\n### Core Features\n\n- **Secure Access**: Strict path validation prevents unauthorized access\n- **File Operations**: Read, write, edit, and move files\n- **Directory Operations**: Create, list, get tree views, and search directories\n- **Metadata Access**: View file and directory information\n- **Command Execution**: Securely execute system commands with strict validation\n- **Docker Support**: Easy deployment with Docker and Docker Compose\n\n### New Features in v0.3.0\n\n- **Structured Logging**: Detailed logging with different levels (debug, info, warn, error)\n- **Performance Metrics**: Track operation counts, errors, and execution times\n- **Configuration Management**: Support for JSON configuration files\n- **Path Caching**: Improved performance for frequently accessed paths\n- **Improved Error Handling**: Specialized error types with structured information\n- **File Size Validation**: Prevent loading excessively large files\n- **CLI Improvements**: Help command, version info, and config generation\n\n### Configuration Options\n\nYou can create a configuration file using:\n\n```sh\n$ mcp-filesystem --create-config=config.json\n```\n\nExample configuration:\n\n```json\n{\n  \"allowedDirectories\": [\"/path/to/allowed/dir1\", \"/path/to/allowed/dir2\"],\n  \"logLevel\": \"info\",\n  \"logFile\": \"/path/to/logs/mcp-filesystem.log\",\n  \"serverName\": \"secure-filesystem-server\",\n  \"serverVersion\": \"0.3.0\",\n  \"cache\": {\n    \"enabled\": true,\n    \"maxSize\": 1000,\n    \"ttlMs\": 60000\n  },\n  \"metrics\": {\n    \"enabled\": true,\n    \"reportIntervalMs\": 60000\n  },\n  \"security\": {\n    \"maxFileSize\": 10485760,\n    \"allowSymlinks\": true,\n    \"validateRealPath\": true\n  }\n}\n```\n\n<br>\n\n### :writing_hand: **Author**\n\n| [![Gabriel Maia](https://avatars.githubusercontent.com/u/26732067?size=100)](https://github.com/gabrielmaialva33) |\n| ----------------------------------------------------------------------------------------------------------------- |\n| [Gabriel Maia](https://github.com/gabrielmaialva33)                                                               |\n\n## License\n\n[MIT License](LICENSE)\n\n<p align=\"center\"><img src=\"https://raw.githubusercontent.com/gabrielmaialva33/gabrielmaialva33/master/assets/gray0_ctp_on_line.svg?sanitize=true\" /></p>\n<p align=\"center\">&copy; 2024-present <a href=\"https://github.com/gabrielmaialva33/\" target=\"_blank\">Maia</a>\n</p>\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "file",
        "directory",
        "mcp filesystem",
        "secure filesystem",
        "filesystem access"
      ],
      "category": "file-management"
    },
    "gannonh--firebase-mcp": {
      "owner": "gannonh",
      "name": "firebase-mcp",
      "url": "https://github.com/gannonh/firebase-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/gannonh.webp",
      "description": "Integrate Firebase services with AI models for real-time access to authentication, Firestore document operations, and file management. This protocol allows seamless interaction with Firebase capabilities through a standardized interface.",
      "stars": 215,
      "forks": 41,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-29T12:43:21Z",
      "readme_content": "# Firebase MCP\n\n\n\n\n<a href=\"https://glama.ai/mcp/servers/x4i8z2xmrq\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/x4i8z2xmrq/badge\" alt=\"Firebase MCP server\" />\n</a>\n\n[![Firebase Tests CI](https://github.com/gannonh/firebase-mcp/actions/workflows/tests.yml/badge.svg)](https://github.com/gannonh/firebase-mcp/actions/workflows/tests.yml)\n\n## Overview\n\n**Firebase MCP** enables AI assistants to work directly with Firebase services, including:\n\n- **Firestore**: Document database operations\n- **Storage**: File management with robust upload capabilities\n- **Authentication**: User management and verification\n\nThe server works with MCP client applicatios such as [Claude Desktop](https://claude.ai/download), [Augment Code](https://docs.augmentcode.com/setup-augment/mcp), [VS Code](https://code.visualstudio.com/docs/copilot/chat/mcp-servers), and [Cursor](https://www.cursor.com/).\n\n> ⚠️ **Known Issue**: The `firestore_list_collections` tool may return a Zod validation error in the client logs. This is an erroneous validation error in the MCP SDK, as our investigation confirmed no boolean values are present in the response. Despite the error message, the query still works correctly and returns the proper collection data. This is a log-level error that doesn't affect functionality.\n\n## ⚡ Quick Start\n\n### Prerequisites\n- Firebase project with service account credentials\n- Node.js environment\n\n### 1. Install MCP Server\n\nAdd the server configuration to your MCP settings file:\n\n- Claude Desktop: `~/Library/Application Support/Claude/claude_desktop_config.json`\n- Augment: `~/Library/Application Support/Code/User/settings.json`\n- Cursor: `[project root]/.cursor/mcp.json`\n\nMCP Servers can be installed manually or at runtime via npx (recommended). How you install determines your configuration:\n\n#### Configure for npx (recommended)\n\n   ```json\n   {\n     \"firebase-mcp\": {\n       \"command\": \"npx\",\n       \"args\": [\n         \"-y\",\n         \"@gannonh/firebase-mcp\"\n       ],\n       \"env\": {\n         \"SERVICE_ACCOUNT_KEY_PATH\": \"/absolute/path/to/serviceAccountKey.json\",\n         \"FIREBASE_STORAGE_BUCKET\": \"your-project-id.firebasestorage.app\"\n       }\n     }\n   }\n   ```\n\n#### Configure for local installation\n\n   ```json\n   {\n     \"firebase-mcp\": {\n       \"command\": \"node\",\n       \"args\": [\n         \"/absolute/path/to/firebase-mcp/dist/index.js\"\n       ],\n       \"env\": {\n         \"SERVICE_ACCOUNT_KEY_PATH\": \"/absolute/path/to/serviceAccountKey.json\",\n         \"FIREBASE_STORAGE_BUCKET\": \"your-project-id.firebasestorage.app\"\n       }\n     }\n   }\n```\n\n\n### 2. Test the Installation\n\nAsk your AI client: \"Please test all Firebase MCP tools.\"\n\n## 🛠️ Setup & Configuration\n\n### 1. Firebase Configuration\n\n1. Go to [Firebase Console](https://console.firebase.google.com) → Project Settings → Service Accounts\n2. Click \"Generate new private key\"\n3. Save the JSON file securely\n\n### 2. Environment Variables\n\n#### Required\n- `SERVICE_ACCOUNT_KEY_PATH`: Path to your Firebase service account key JSON (required)\n\n#### Optional\n- `FIREBASE_STORAGE_BUCKET`: Bucket name for Firebase Storage (defaults to `[projectId].appspot.com`)\n- `MCP_TRANSPORT`: Transport type to use (`stdio` or `http`) (defaults to `stdio`)\n- `MCP_HTTP_PORT`: Port for HTTP transport (defaults to `3000`)\n- `MCP_HTTP_HOST`: Host for HTTP transport (defaults to `localhost`)\n- `MCP_HTTP_PATH`: Path for HTTP transport (defaults to `/mcp`)\n- `DEBUG_LOG_FILE`: Enable file logging:\n  - Set to `true` to log to `~/.firebase-mcp/debug.log`\n  - Set to a file path to log to a custom location\n\n### 3. Client Integration\n\n#### Claude Desktop\nEdit: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n#### VS Code / Augment\nEdit: `~/Library/Application Support/Code/User/settings.json`\n\n#### Cursor\nEdit: `[project root]/.cursor/mcp.json`\n\n## 📚 API Reference\n\n### Firestore Tools\n\n| Tool                               | Description                    | Required Parameters        |\n| ---------------------------------- | ------------------------------ | -------------------------- |\n| `firestore_add_document`           | Add a document to a collection | `collection`, `data`       |\n| `firestore_list_documents`         | List documents with filtering  | `collection`               |\n| `firestore_get_document`           | Get a specific document        | `collection`, `id`         |\n| `firestore_update_document`        | Update an existing document    | `collection`, `id`, `data` |\n| `firestore_delete_document`        | Delete a document              | `collection`, `id`         |\n| `firestore_list_collections`       | List root collections          | None                       |\n| `firestore_query_collection_group` | Query across subcollections    | `collectionId`             |\n\n### Storage Tools\n\n| Tool                      | Description               | Required Parameters              |\n| ------------------------- | ------------------------- | -------------------------------- |\n| `storage_list_files`      | List files in a directory | None (optional: `directoryPath`) |\n| `storage_get_file_info`   | Get file metadata and URL | `filePath`                       |\n| `storage_upload`          | Upload file from content  | `filePath`, `content`            |\n| `storage_upload_from_url` | Upload file from URL      | `filePath`, `url`                |\n\n### Authentication Tools\n\n| Tool            | Description             | Required Parameters |\n| --------------- | ----------------------- | ------------------- |\n| `auth_get_user` | Get user by ID or email | `identifier`        |\n\n## 💻 Developer Guide\n\n### Installation & Building\n\n```bash\ngit clone https://github.com/gannonh/firebase-mcp\ncd firebase-mcp\nnpm install\nnpm run build\n```\n\n### Running Tests\n\nFirst, install and start Firebase emulators:\n```bash\nnpm install -g firebase-tools\nfirebase init emulators\nfirebase emulators:start\n```\n\nThen run tests:\n```bash\n# Run tests with emulator\nnpm run test:emulator\n\n# Run tests with coverage\nnpm run test:coverage:emulator\n```\n\n### Project Structure\n\n```bash\nsrc/\n├── index.ts                  # Server entry point\n├── utils/                    # Utility functions\n└── lib/\n    └── firebase/              # Firebase service clients\n        ├── authClient.ts     # Authentication operations\n        ├── firebaseConfig.ts   # Firebase configuration\n        ├── firestoreClient.ts # Firestore operations\n        └── storageClient.ts  # Storage operations\n```\n\n## 🌐 HTTP Transport\n\nFirebase MCP now supports HTTP transport in addition to the default stdio transport. This allows you to run the server as a standalone HTTP service that can be accessed by multiple clients.\n\n### Running with HTTP Transport\n\nTo run the server with HTTP transport:\n\n```bash\n# Using environment variables\nMCP_TRANSPORT=http MCP_HTTP_PORT=3000 node dist/index.js\n\n# Or with npx\nMCP_TRANSPORT=http MCP_HTTP_PORT=3000 npx @gannonh/firebase-mcp\n```\n\n### Client Configuration for HTTP\n\nWhen using HTTP transport, configure your MCP client to connect to the HTTP endpoint:\n\n```json\n{\n  \"firebase-mcp\": {\n    \"url\": \"http://localhost:3000/mcp\"\n  }\n}\n```\n\n### Session Management\n\nThe HTTP transport supports session management, allowing multiple clients to connect to the same server instance. Each client receives a unique session ID that is used to maintain state between requests.\n\n## 🔍 Troubleshooting\n\n### Common Issues\n\n#### Storage Bucket Not Found\nIf you see \"The specified bucket does not exist\" error:\n1. Verify your bucket name in Firebase Console → Storage\n2. Set the correct bucket name in `FIREBASE_STORAGE_BUCKET` environment variable\n\n#### Firebase Initialization Failed\nIf you see \"Firebase is not initialized\" error:\n1. Check that your service account key path is correct and absolute\n2. Ensure the service account has proper permissions for Firebase services\n\n#### Composite Index Required\nIf you receive \"This query requires a composite index\" error:\n1. Look for the provided URL in the error message\n2. Follow the link to create the required index in Firebase Console\n3. Retry your query after the index is created (may take a few minutes)\n\n#### Zod Validation Error with `firestore_list_collections`\nIf you see a Zod validation error with message \"Expected object, received boolean\" when using the `firestore_list_collections` tool:\n\n> ⚠️ **Known Issue**: The `firestore_list_collections` tool may return a Zod validation error in the client logs. This is an erroneous validation error in the MCP SDK, as our investigation confirmed no boolean values are present in the response. Despite the error message, the query still works correctly and returns the proper collection data. This is a log-level error that doesn't affect functionality.\n\n### Debugging\n\n#### Enable File Logging\nTo help diagnose issues, you can enable file logging:\n\n```bash\n# Log to default location (~/.firebase-mcp/debug.log)\nDEBUG_LOG_FILE=true npx @gannonh/firebase-mcp\n\n# Log to a custom location\nDEBUG_LOG_FILE=/path/to/custom/debug.log npx @gannonh/firebase-mcp\n```\n\nYou can also enable logging in your MCP client configuration:\n\n```json\n{\n  \"firebase-mcp\": {\n    \"command\": \"npx\",\n    \"args\": [\"-y\", \"@gannonh/firebase-mcp\"],\n    \"env\": {\n      \"SERVICE_ACCOUNT_KEY_PATH\": \"/path/to/serviceAccountKey.json\",\n      \"FIREBASE_STORAGE_BUCKET\": \"your-project-id.firebasestorage.app\",\n      \"DEBUG_LOG_FILE\": \"true\"\n    }\n  }\n}\n```\n\n#### Real-time Log Viewing\nTo view logs in real-time:\n\n```bash\n# Using tail to follow the log file\ntail -f ~/.firebase-mcp/debug.log\n\n# Using a split terminal to capture stderr\nnpm start 2>&1 | tee logs.txt\n```\n\n#### Using MCP Inspector\nThe MCP Inspector provides interactive debugging:\n\n```bash\n# Install MCP Inspector\nnpm install -g @mcp/inspector\n\n# Connect to your MCP server\nmcp-inspector --connect stdio --command \"node ./dist/index.js\"\n```\n\n## 📋 Response Formatting\n\n### Storage Upload Response Example\n\n```json\n{\n  \"name\": \"reports/quarterly.pdf\",\n  \"size\": \"1024000\",\n  \"contentType\": \"application/pdf\",\n  \"updated\": \"2025-04-11T15:37:10.290Z\",\n  \"downloadUrl\": \"https://storage.googleapis.com/bucket/reports/quarterly.pdf?alt=media\",\n  \"bucket\": \"your-project.appspot.com\"\n}\n```\n\nDisplayed to the user as:\n\n```markdown\n## File Successfully Uploaded! 📁\n\nYour file has been uploaded to Firebase Storage:\n\n**File Details:**\n- **Name:** reports/quarterly.pdf\n- **Size:** 1024000 bytes\n- **Type:** application/pdf\n- **Last Updated:** April 11, 2025 at 15:37:10 UTC\n\n**[Click here to download your file](https://storage.googleapis.com/bucket/reports/quarterly.pdf?alt=media)**\n```\n\n## 🤝 Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Implement changes with tests (80%+ coverage required)\n4. Submit a pull request\n\n## 📄 License\n\nMIT License - see [LICENSE](LICENSE) file for details\n\n## 🔗 Related Resources\n\n- [Model Context Protocol Documentation](https://github.com/modelcontextprotocol)\n- [Firebase Documentation](https://firebase.google.com/docs)\n- [Firebase Admin SDK](https://firebase.google.com/docs/admin/setup)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "firebase",
        "firestore",
        "gannonh",
        "firebase mcp",
        "gannonh firebase",
        "integrate firebase"
      ],
      "category": "file-management"
    },
    "gianlucamazza--mcp_python_toolbox": {
      "owner": "gianlucamazza",
      "name": "mcp_python_toolbox",
      "url": "https://github.com/gianlucamazza/mcp_python_toolbox",
      "imageUrl": "/freedevtools/mcp/pfp/gianlucamazza.webp",
      "description": "Facilitates management and development of Python projects by performing file operations, analyzing and formatting code, managing dependencies, and executing scripts within a secure environment.",
      "stars": 5,
      "forks": 5,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-18T11:03:00Z",
      "readme_content": "# MCP Python Toolbox\n\nA Model Context Protocol (MCP) server that provides a comprehensive set of tools for Python development, enabling AI assistants like Claude to effectively work with Python code and projects.\n\n## Overview\n\nMCP Python Toolbox implements a Model Context Protocol server that gives Claude the ability to perform Python development tasks through a standardized interface. It enables Claude to:\n\n- Read, write, and manage files within a workspace\n- Analyze, format, and lint Python code\n- Manage virtual environments and dependencies\n- Execute Python code safely\n\n## Features\n\n### File Operations (`FileOperations`)\n- Safe file operations within a workspace directory\n- Path validation to prevent unauthorized access outside workspace\n- Read and write files with line-specific operations\n- Create and delete files and directories\n- List directory contents with detailed metadata (size, type, modification time)\n- Automatic parent directory creation when writing files\n\n### Code Analysis (`CodeAnalyzer`)\n- Parse and analyze Python code structure using AST\n- Extract detailed information about:\n  - Import statements and their aliases\n  - Function definitions with arguments and decorators\n  - Class definitions with base classes and methods\n  - Global variable assignments\n- Format code using:\n  - Black (default)\n  - PEP8 (using autopep8)\n- Comprehensive code linting using Pylint with detailed reports\n\n### Project Management (`ProjectManager`)\n- Create and manage virtual environments with pip support\n- Flexible dependency management:\n  - Install from requirements.txt\n  - Install from pyproject.toml\n  - Support for specific package versions\n- Advanced dependency handling:\n  - Check for version conflicts between packages\n  - List all installed packages with versions\n  - Update packages to specific versions\n  - Generate requirements.txt from current environment\n\n### Code Execution (`CodeExecutor`)\n- Execute Python code in a controlled environment\n- Uses project's virtual environment for consistent dependencies\n- Temporary file management for code execution\n- Capture stdout, stderr, and exit codes\n- Support for custom working directories\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/gianlucamazza/mcp_python_toolbox.git\ncd mcp_python_toolbox\n```\n\n2. Create and activate a virtual environment:\n```bash\npython -m venv .venv\nsource .venv/bin/activate  # Linux/Mac\n# or\n.venv\\Scripts\\activate  # Windows\n```\n\n3. Install the package in development mode:\n```bash\npip install -e \".[dev]\"\n```\n\n## Usage\n\n### Running as a CLI Tool\n\nThe simplest way to start the server is using the CLI:\n\n```bash\n# Start with current directory as workspace\npython -m mcp_python_toolbox\n\n# Or specify a workspace directory\npython -m mcp_python_toolbox --workspace /path/to/your/project\n```\n\n### Setting Up with Claude Desktop\n\nClaude Desktop can automatically launch and manage the MCP Python Toolbox server. Here's how to configure it:\n\n1. Install and set up the MCP Python Toolbox as described above\n2. Add a configuration entry for the Python Toolbox in Claude Desktop's MCP tools configuration:\n\n```json\n\"python-toolbox\": {\n  \"command\": \"/Users/username/path/to/mcp_python_toolbox/.venv/bin/python\",\n  \"args\": [\n    \"-m\",\n    \"mcp_python_toolbox\",\n    \"--workspace\",\n    \"/Users/username/path/to/workspace\"\n  ],\n  \"env\": {\n    \"PYTHONPATH\": \"/Users/username/path/to/mcp_python_toolbox/src\",\n    \"PATH\": \"/opt/homebrew/bin:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\",\n    \"VIRTUAL_ENV\": \"/Users/username/path/to/mcp_python_toolbox/.venv\",\n    \"PYTHONHOME\": \"\"\n  }\n}\n```\n\n3. Customize the paths to match your environment\n4. Claude Desktop will automatically start the MCP server when needed\n5. Claude will now have access to Python development tools through the MCP interface\n\n### Programmatic Usage\n\n```python\nfrom mcp_python_toolbox import PythonToolboxServer\n\nserver = PythonToolboxServer(workspace_root=\"/path/to/your/project\")\nserver.setup()\nserver.run()\n```\n\n### Core Module Examples\n\n#### File Operations\n```python\nfrom mcp_python_toolbox.core import FileOperations\n\nfile_ops = FileOperations(workspace_root=\"/path/to/project\")\n\n# Read file contents\ncontent = file_ops.read_file(\"src/example.py\")\n# Read specific lines\nlines = file_ops.read_file(\"src/example.py\", start_line=10, end_line=20)\n\n# Write to file\nfile_ops.write_file(\"output.txt\", \"Hello, World!\")\n# Append to file\nfile_ops.write_file(\"log.txt\", \"New entry\\n\", mode='a')\n\n# List directory contents\ncontents = file_ops.list_directory(\"src\")\nfor item in contents:\n    print(f\"{item['name']} - {item['type']} - {item['size']} bytes\")\n```\n\n#### Code Analysis\n```python\nfrom mcp_python_toolbox.core import CodeAnalyzer\n\nanalyzer = CodeAnalyzer(workspace_root=\"/path/to/project\")\n\n# Analyze Python file structure\nanalysis = analyzer.parse_python_file(\"src/example.py\")\nprint(f\"Found {len(analysis['functions'])} functions\")\nprint(f\"Found {len(analysis['classes'])} classes\")\n\n# Format code\nformatted = analyzer.format_code(code, style='black')\n\n# Lint code\nissues = analyzer.lint_code(\"src/example.py\")\nfor issue in issues:\n    print(f\"Line {issue['line']}: {issue['message']}\")\n```\n\n#### Project Management\n```python\nfrom mcp_python_toolbox.core import ProjectManager\n\npm = ProjectManager(workspace_root=\"/path/to/project\")\n\n# Create virtual environment\npm.create_virtual_environment()\n\n# Install dependencies\npm.install_dependencies()  # from requirements.txt or pyproject.toml\npm.install_dependencies(\"requirements-dev.txt\")  # from specific file\n\n# Check for conflicts\nconflicts = pm.check_dependency_conflicts()\nif conflicts:\n    print(\"Found dependency conflicts:\")\n    for conflict in conflicts:\n        print(f\"{conflict['package']} requires {conflict['requires']}\")\n\n# Update packages\npm.update_package(\"requests\")  # to latest\npm.update_package(\"flask\", version=\"2.0.0\")  # to specific version\n```\n\n#### Code Execution\n```python\nfrom mcp_python_toolbox.core import CodeExecutor\n\nexecutor = CodeExecutor(workspace_root=\"/path/to/project\")\n\ncode = '''\ndef greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"World\"))\n'''\n\nresult = executor.execute_code(code)\nprint(f\"Output: {result['stdout']}\")\nprint(f\"Errors: {result['stderr']}\")\nprint(f\"Exit code: {result['exit_code']}\")\n```\n\n## Development\n\n### Running Tests\n\n```bash\npytest\n```\n\n### Type Checking\n\n```bash\nmypy src/mcp_python_toolbox\n```\n\n### Linting\n\n```bash\npylint src/mcp_python_toolbox\n```\n\n### Formatting\n\n```bash\nblack src/mcp_python_toolbox\n```\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Implements the [Model Context Protocol](https://github.com/modelcontextprotocol/servers) specification\n- Built with modern Python development tools and best practices\n- Uses industry-standard formatting (Black) and linting (Pylint) tools\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp_python_toolbox",
        "python",
        "scripts",
        "mcp_python_toolbox facilitates",
        "gianlucamazza mcp_python_toolbox",
        "python projects"
      ],
      "category": "file-management"
    },
    "giorgos3215--ultimate-cursor-mcp": {
      "owner": "giorgos3215",
      "name": "ultimate-cursor-mcp",
      "url": "https://github.com/giorgos3215/ultimate-cursor-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/giorgos3215.webp",
      "description": "Integrates advanced web, code, and file operations with Supabase for database management, providing tools for web scraping, code analysis, and file handling alongside AI-powered functionalities for intelligent analysis and self-improvement based on usage patterns.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-23T16:40:11Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/giorgos3215-ultimate-cursor-mcp-badge.png)](https://mseep.ai/app/giorgos3215-ultimate-cursor-mcp)\n\n# Ultimate Self-Evolving Cursor MCP\n\nA comprehensive MCP (Model Context Protocol) implementation for Cursor, featuring advanced tools for web, code, file operations, and Supabase database management.\n\n[![Smithery.ai](https://img.shields.io/badge/Smithery.ai-Available-blue.svg)](https://smithery.ai/package/ultimate-cursor-mcp)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n## Features\n\n- Advanced web tools (scraping, crawling, semantic search)\n- Powerful code analysis and refactoring tools\n- File operations with batch processing and watching capabilities\n- AI-powered capabilities (LLM queries, image analysis)\n- **Full Supabase integration** for database operations and management\n- Self-improvement mechanism with usage analytics\n- Memory persistence for better context understanding\n\n## Installation\n\n### Easy Setup (Recommended)\n\nRun the setup script which will install both the Ultimate Cursor MCP and optionally the Supabase MCP:\n\n```bash\n./setup.sh\n```\n\nThe script will:\n1. Install the Ultimate Cursor MCP\n2. Ask if you want to set up Supabase integration\n3. Guide you through providing Supabase credentials if needed\n4. Configure everything automatically\n\n### Manual Installation\n\n#### Ultimate Cursor MCP\n\n```bash\npython3 tools/mcp_installer.py local .\n```\n\n#### Supabase MCP (Optional)\n\n```bash\npython3 tools/mcp_installer.py supabase --url \"https://yourproject.supabase.co\" --key \"your-api-key\"\n```\n\n### Smithery.ai Installation\n\nIf you prefer to install via smithery.ai:\n\n```bash\ncursor smithery install ultimate-cursor-mcp\n```\n\n## Supabase Integration\n\nThe Supabase integration provides:\n\n- SQL query execution with safety controls (read-only by default)\n- Database schema inspection tools\n- Management API access with safety classifications\n- Auth Admin tools for user management\n\n### Benefits of Supabase MCP\n\n- **Safety features**: Starts in read-only mode; requires explicit mode switching for write operations\n- **Comprehensive database tools**: Schema inspection, table information, detailed structure\n- **Full SQL support**: Execute any PostgreSQL query with transaction handling\n- **Advanced Management API access**: Send arbitrary requests with auto-injection of project ref\n- **Auth Admin tools**: User creation, deletion, invitation and management\n\n[Read the complete Supabase integration guide](./docs/supabase.md)\n\n## Testing\n\nAfter installation, you can test the functionality:\n\n```bash\n./test-client.js\n```\n\n## Configuration\n\nThe configuration is stored in `~/.cursor/mcp.json`. After installation, restart Cursor for the changes to take effect.\n\n## Development\n\n### Project Structure\n\n- `src/` - TypeScript implementation of the MCP server\n  - `enhanced-mcp.js` - Main MCP server\n  - `tools/` - Tool implementations\n    - `web-tools.js` - Web scraping and search tools\n    - `code-tools.js` - Code analysis tools\n    - `file-tools.js` - File operation tools\n    - `ai-tools.js` - LLM and image analysis tools\n- `tools/` - Helper scripts\n  - `mcp_installer.py` - Installation utility\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "supabase",
        "cursor",
        "giorgos3215",
        "file management",
        "cursor mcp",
        "supabase database"
      ],
      "category": "file-management"
    },
    "git-jiadong--wechatDataBackup": {
      "owner": "git-jiadong",
      "name": "wechatDataBackup",
      "url": "https://github.com/git-jiadong/wechatDataBackup",
      "imageUrl": "/freedevtools/mcp/pfp/git-jiadong.webp",
      "description": "Export and permanently save WeChat chat records, allowing users to view messages such as images, videos, and files even if WeChat no longer supports them.",
      "stars": 5702,
      "forks": 491,
      "license": "Apache License 2.0",
      "language": "Go",
      "updated_at": "2025-10-04T08:18:33Z",
      "readme_content": "<p align=\"center\" style=\"text-align: center\">\n  <br/>\n</p>\n\n<p align=\"center\">\n  <b>wechatDataBackup: PC微信聊天记录数据导出工具</b>\n  <br/>\n  <br/>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/stargazers\">\n    <img src=\"https://img.shields.io/github/stars/git-jiadong/wechatDataBackup\" alt=\"GitHub Star\"/>\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/releases\">\n    <img src=\"https://img.shields.io/github/downloads/git-jiadong/wechatDataBackup/total\" alt=\"downloads\" />\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/releases\">\n    <img src=\"https://img.shields.io/github/v/release/git-jiadong/wechatDataBackup\" alt=\"releases version\"/>\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/commits/main\">\n    <img src=\"https://img.shields.io/github/last-commit/git-jiadong/wechatDataBackup\" alt=\"last commit\" />\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup\" >\n    <img src=\"https://img.shields.io/github/languages/top/git-jiadong/wechatDataBackup\" alt=\"languages\"/>\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup\" >\n    <img src=\"https://img.shields.io/github/repo-size/git-jiadong/wechatDataBackup\" alt=\"repo size\" />\n  </a>\n  <a href=\"https://github.com/git-jiadong/wechatDataBackup/blob/main/LICENSE\">\n    <img src=\"https://img.shields.io/github/license/git-jiadong/wechatDataBackup\" alt=\"license\" />\n  </a>\n</p>\n# wechatDataBackup\n\n* 基于wails开发 + React前端，实现PC端微信聊天记录一键导出功能。\n* 导出后数据可以做永久化保存，即使微信停止支持，聊天记录也可以随时查看。\n* 前端界面尽量与微信界面保持一致，减少使用成本。\n* 理论上支持所有Windows 32/64位微信版本。\n\n效果图如下：\n\n\n\n\n## 演示视频\n[演示视频](https://www.bilibili.com/video/BV1bPH1eWEEy/?share_source=copy_web&vd_source=b5cfa9258a9ad9900a00e9c1ce3cb4b6)\n## 使用方法\n1. 下载release可执行文件直接打开 国内朋友也可以使用 [网盘下载](https://pan.quark.cn/s/fa157b13e762)\n2. 下载源码自行编译可执行文件 [安装wails环境](https://wails.io/zh-Hans/docs/gettingstarted/installation)\n\n```shell\ngit clone https://github.com/git-jiadong/wechatDataBackup.git\ncd wechatDataBackup\nwails build\n```\n\n编译成功后在可执行二进制文件路径`build\\bin\\wechatDataBackup.exe`\n\n如果编译错误可能是没有gcc环境导致的，可以安装 [tdm-gcc](https://jmeubank.github.io/tdm-gcc/) 后在尝试。\n\n3. 导出聊天记录\n电脑登陆微信，然后打开`wechatDataBackup.exe`后按照如图提示导出\n\n\n## 功能\n\n本项目目前的规划与实现进度：\n- [x] 支持图片消息\n- [x] 支持视频消息\n- [x] 支持链接消息\n- [x] 支持语音消息\n- [x] 支持文件消息\n- [x] 支持名片消息\n- [x] 支持定位消息\n- [x] 支持视频/语音通话消息\n- [x] 支持QQ音乐消息\n- [x] 支持第三方视频软件分享消息\n- [x] 支持分享表情集消息\n- [x] 支持小程序消息\n- [x] 支持视频号/直播消息\n- [x] 支持转账消息\n- [x] 支持腾讯游戏分享消息\n- [x] 支持原始表情显示\n- [x] 支持按类型检索\n- [x] 支持日期检索\n- [x] 支持按群成员检索\n- [x] 支持增量式导出\n- [x] 多开账号选择导出\n- [x] 多开账号数据切换\n- [x] 头像使用本地头像\n- [ ] 支持更多消息类型显示\n- [x] 图片查看器重绘\n- [x] 支持会话导出分享\n- [x] 支持自动定位到最后浏览位置\n- [x] 支持书签功能\n- [x] 支持单聊会话对话人位置调换功能\n- [ ] 实现表情预先下载（实现完全离线查看）\n- [ ] 聊天报告\n- [ ] AI本地模型应用\n- [ ] 导出数据本地加密\n- ...\n如果遇到什么问题，或者有更好的建议与优化点欢迎给作者提 [ISSUE](https://github.com/git-jiadong/wechatDataBackup/issues)\n\n\n### 常见问题\n**Q: 支持手机端的聊天记录备份吗？**<br>\nA: 手机端可以使用聊天数据迁移功能，将手机的数据迁移到电脑后再将数据导出。 [微信迁移聊天记录功能](https://www.bilibili.com/opus/974795819172495381)<br>\n**Q: 导出后界面是空白的、导出的数据比PC微信里面看到的少,数据不完整**<br>\nA: 这是由于可能数据存在于内存中还没有回写到磁盘导致的，退出微信时会将内存的数据全部回写到磁盘，导出数据时最好退出重新登陆一次微信，保证数据都在磁盘中再导出即可。<br>\n**Q: 有些图片、视频打不开**<br>\nA: 这是电脑端微信没有点开过这个消息，默认只加载了预览图而已，如果手机有打开过可以把手机的记录迁移到电脑，迁移后重新退出登陆一次微信导出即可。<br>\n**Q: Win7电脑不能使用**<br>\nA: Win7电脑需要安装WebView2运行时才能正常使用。github release版本做了Windows版本限制，[Win7用户请安装专属的版本](https://pan.quark.cn/s/fa157b13e762)\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=git-jiadong/wechatDataBackup&type=Date)](https://star-history.com/?utm_source=bestxtools.com#git-jiadong/wechatDataBackup&Date)\n\n## 免责声明\n**⚠️ 本项目仅供学习、研究使用，严禁商业使用**<br/>\n**⚠️ 用于网络安全用途的，请确保在国家法律法规下使用**<br/>\n**⚠️ 本项目完全免费，问你要钱的都是骗子**<br/>\n**⚠️ 使用本项目初衷是作者研究微信数据库的运行使用，您使用本软件导致的后果，包含但不限于数据损坏，记录丢失等问题，作者不承担相关责任。**<br/>\n**⚠️ 因软件特殊性质，请在使用时获得微信账号所有人授权，你当确保不侵犯他人个人隐私权，后果自行承担**<br/>\n\n## 前端代码\n由于前端代码不成熟，前端界面代码暂时不公开。\n\n## 参考/引用\n- 微信数据库解密和数据库的使用 [PyWxDump](https://github.com/xaoyaoo/PyWxDump/tree/master)\n- silk语音消息解码 [silk-v3-decoder](https://github.com/kn007/silk-v3-decoder)\n- PCM转MP3 [lame](https://github.com/viert/lame.git)\n- Dat图片解码 [wechatDatDecode](https://github.com/liuggchen/wechatDatDecode)\n\n## 交流/讨论",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "wechatdatabackup",
        "export",
        "wechat",
        "jiadong wechatdatabackup",
        "wechatdatabackup export",
        "files wechat"
      ],
      "category": "file-management"
    },
    "gregkonush--mcp-obsidian": {
      "owner": "gregkonush",
      "name": "mcp-obsidian",
      "url": "https://github.com/gregkonush/mcp-obsidian",
      "imageUrl": "/freedevtools/mcp/pfp/gregkonush.webp",
      "description": "Integrate with Obsidian to manage notes by reading, creating, and manipulating files in the vault. Supports various operations including searching notes and handling file content.",
      "stars": 5,
      "forks": 3,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-13T19:40:26Z",
      "readme_content": "# MCP Obsidian\n\nA server implementation of the [Model Context Protocol (MCP)](https://github.com/modelcontextprotocol/protocol) for integrating with [Obsidian](https://obsidian.md/). This allows AI assistants to read, create, and manipulate notes in your Obsidian vault.\n\n## Features\n\n- Read the active file in Obsidian\n- Delete the active file\n- Insert content at specific positions (headings, block references, frontmatter)\n- Append content to files\n- Open specific files\n- List files in your vault\n- Search through your notes\n\n## Prerequisites\n\n- [Bun](https://bun.sh/) runtime\n- [Obsidian](https://obsidian.md/) desktop application\n- An MCP-compatible AI assistant\n\n## Add to cursor\nPlace your secret in .env file\n\nChoose command MCP and then enter this command\n\n```\nbun __REPO_PATH__/src/index.ts\n```\n\n## Installation\n\n1. Clone this repository:\n\n   ```bash\n   git clone https://github.com/gregkonush/mcp-obsidian.git\n   cd mcp-obsidian\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   bun install\n   ```\n\n3. Copy the example environment file and configure it:\n   ```bash\n   cp .env.example .env\n   ```\n\n## Configuration\n\nEdit the `.env` file with your specific configurations:\n\n```\nOBSIDIAN_BASE_URL=http://localhost:27123\nOBSIDIAN_TOKEN=your_token_here\nDEBUG=false\n```\n\n## Usage\n\nStart the MCP server:\n\n```bash\nbun run src/index.ts\n```\n\nThe server will start and communicate with MCP-compatible AI assistants via standard I/O.\n\n## Available Tools\n\nThis implementation provides the following tools to AI assistants:\n\n- `get_active_file` - Returns the content of the currently active file\n- `delete_active_file` - Deletes the currently active file\n- `insert_active_file` - Modifies content relative to a heading, block reference, or frontmatter field\n- `append_active_file` - Appends content to the end of the active file\n- `open_file` - Opens a specific file in Obsidian\n- `search_simple` - Searches for documents matching a text query\n- `list_files` - Lists files in the root directory of your vault\n- `list_directory_files` - Lists files in a specific directory of your vault\n\n## Development\n\n### Project Structure\n\n```\nmcp-obsidian/\n├── src/\n│   ├── index.ts            # Main server implementation\n│   └── tools/              # Individual tool implementations\n│       ├── get-active-file.ts\n│       ├── delete-active-file.ts\n│       └── ...\n├── .env                    # Environment configuration\n├── package.json            # Project dependencies\n└── tsconfig.json           # TypeScript configuration\n```\n\n### Adding New Tools\n\nTo add a new tool:\n\n1. Create a new file in the `src/tools/` directory\n2. Implement the tool using the MCP SDK\n3. Import and register the tool in `src/index.ts`\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "obsidian",
        "files",
        "vault",
        "mcp obsidian",
        "obsidian manage",
        "file management"
      ],
      "category": "file-management"
    },
    "hanweg--mcp-pdf-tools": {
      "owner": "hanweg",
      "name": "mcp-pdf-tools",
      "url": "https://github.com/hanweg/mcp-pdf-tools",
      "imageUrl": "/freedevtools/mcp/pfp/hanweg.webp",
      "description": "Provides tools for manipulating PDF files, including merging multiple PDFs, extracting specific pages, and finding related PDFs based on text extraction and regex patterns.",
      "stars": 63,
      "forks": 8,
      "license": "The Unlicense",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:04Z",
      "readme_content": "# WORK IN PROGRESS - USE WITH CAUTION - Windows:\n\n# MCP PDF Tools Server\n\nAn MCP (Model Context Protocol) server that provides PDF manipulation tools. This server allows LLMs to perform operations like merging PDFs and extracting pages through the Model Context Protocol.\n\n<a href=\"https://glama.ai/mcp/servers/fqtuoh05xi\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/fqtuoh05xi/badge\" alt=\"mcp-pdf-tools MCP server\" /></a>\n\n## Features\n\n- Merge multiple PDF files into a single PDF\n- Merge multiple PDF files into a single PDF in user specified order\n- Extract specific pages from a PDF file\n- Search PDFs *filesystem search or Everything search works better than this*\n- Find (and merge) related PDFs based on text extraction and regex pattern matching from a target input PDF\n\n## Installation\n\n1. Clone this repository\n2. \n```bash\ncd mcp-pdf-tools\n\n# Create and activate virtual environment\nuv venv\n.venv\\Scripts\\activate\n\n# Install the package\nuv pip install -e .\n```\n\n## Usage with Claude Desktop\n\nAdd this to your Claude Desktop configuration file (claude_desktop_config.json):\n\n```json\n{\n    \"mcpServers\": {\n        \"pdf-tools\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"PATH_TO\\\\mcp-pdf-tools\",\n                \"run\",\n                \"pdf-tools\"\n            ]\n        }\n    }\n}\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pdfs",
        "pdf",
        "mcp",
        "pdf tools",
        "pdfs extracting",
        "pdfs based"
      ],
      "category": "file-management"
    },
    "hexitex--MCP-Backup-Server": {
      "owner": "hexitex",
      "name": "MCP-Backup-Server",
      "url": "https://github.com/hexitex/MCP-Backup-Server",
      "imageUrl": "/freedevtools/mcp/pfp/hexitex.webp",
      "description": "Provides backup and restoration capabilities specifically designed for AI agents and code editing tools, simplifying the backup process and preserving the context of changes without the complexity of traditional version control systems.",
      "stars": 10,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-27T17:58:32Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/hexitex-mcp-backup-server-badge.png)](https://mseep.ai/app/hexitex-mcp-backup-server)\n\n# MCP Backup Server\n[![smithery badge](https://smithery.ai/badge/@hexitex/MCP-Backup-Server)](https://smithery.ai/server/@hexitex/MCP-Backup-Server)\n\nA specialized MCP server that provides backup and restoration capabilities for AI agents and code editing tools. Tested in both Cursor and Windsurf editors.\n\nRepository: [https://github.com/hexitex/MCP-Backup-Server](https://github.com/hexitex/MCP-Backup-Server)\n\n## Why Use This (Not Git)\n\nThis system serves a different purpose than Git:\n\n**Pros:**\n- Creates instant, targeted backups with agent context\n- Simpler than Git for single-operation safety\n- Preserves thought process and intent in backups\n- No commit messages or branching required\n- Better for AI agents making critical changes\n- Works without repository initialization\n- Faster for emergency \"save points\" during edits\n\n**Cons:**\n- Not for long-term version tracking \n- Limited collaboration features\n- No merging or conflict resolution\n- No distributed backup capabilities\n- Not a replacement for proper version control\n- Stores complete file copies rather than diffs\n\n**When to use:** Before risky edits, folder restructuring, or when you need quick safety backups with context.\n\n**When to use Git instead:** For proper version history, collaboration, and project management.\n\n## Features\n- Preserves agent context and reasoning\n- Creates targeted, minimal backups\n- Supports file and folder operations\n- Maintains version history\n- Provides restore safety\n- Uses pattern filtering\n- Tracks operations\n- Allows cancellation\n\n## Setup\n\n### Installing via Smithery\n\nTo install Backup Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@hexitex/MCP-Backup-Server):\n\n```bash\nnpx -y @smithery/cli install @hexitex/MCP-Backup-Server --client claude\n```\n\n### Installing Manually\n```bash\n# Install dependencies\nnpm install\n\n# Build TypeScript files\nnpm run build\n\n# Start the backup server\nnpm start\n```\n\n## Config\n\nEnv:\n- `BACKUP_DIR`: Backup directory (./.code_backups)\n- `EMERGENCY_BACKUP_DIR`: Emergency backups (./.code_emergency_backups)\n- `MAX_VERSIONS`: Version limit (10)\n\nConfigure in editor:\n\nWindsurf MCP config:\n```json\n{\n  \"mcpServers\": {\n    \"backup\": {\n      \"command\": \"node\",\n      \"args\": [\"./dist/index.js\"],\n      \"env\": {\n        \"BACKUP_DIR\": \"./.code_backups\",\n        \"EMERGENCY_BACKUP_DIR\": \"./.code_emergency_backups\",\n        \"MAX_VERSIONS\": \"20\"\n      }\n    }\n  }\n}\n```\n\nCursor: Create `.cursor/mcp.json` with similar config.\n\n## Tools\n\n### File Operations\n- `backup_create`: Create backup with context\n- `backup_list`: List available backups\n- `backup_restore`: Restore with safety backup\n\n### Folder Operations  \n- `backup_folder_create`: Backup with pattern filtering\n- `backup_folder_list`: List folder backups\n- `backup_folder_restore`: Restore folder structure\n\n### Management\n- `backup_list_all`: List all backups\n- `mcp_cancel`: Cancel operations\n\n## When to Use Backups\n\nOnly create backups when truly needed:\n\n1. **Before Refactoring**: When changing important code\n2. **Before Removing Folders**: When reorganizing project structure\n3. **Multiple Related Changes**: When updating several connected files\n4. **Resuming Major Work**: When continuing significant changes\n5. **Before Restores**: Create safety backup before restoring\n\nKeep backups minimal and purposeful. Document why each backup is needed.\n\n## Rules for Copy-Paste\n\n```\nAlways try to use the backup MCP server for operations that require a backup, listing backups and restoring backups.\nOnly backup before critical code changes, folder removal, changes to multiple related files, resuming major work, or restoring files.\nKeep backups minimal and focused only on files being changed.\nAlways provide clear context for why a backup is being created.\nUse pattern filters to exclude irrelevant files from folder backups.\nUse relative file paths when creating backups.\nCreate emergency backups before restore operations.\nClean up old backups to maintain system efficiency.\nBackup tools: backup_create, backup_list, backup_restore, backup_folder_create, backup_folder_list, backup_folder_restore, backup_list_all, mcp_cancel.\n```\n\n## For Human Users\n\nSimple commands like these at the start you may have to mention MCP tool\n\n```\n# Back up an important file\n\"Back up my core file before refactoring\"\n\n# Back up a folder before changes\n\"Create backup of the API folder before restructuring\"\n\n# Find previous backups\n\"Show me my recent backups\"\n\n# Restore a previous version\n\"Restore my core file from this morning\"\n```\n\n## Agent Examples\n\n### Quick Backups\n```json\n// Before project changes\n{\n  \"name\": \"mcp0_backup_folder_create\",\n  \"parameters\": {\n    \"folder_path\": \"./src\",\n    \"include_pattern\": \"*.{js,ts}\",\n    \"exclude_pattern\": \"{node_modules,dist,test}/**\",\n    \"agent_context\": \"Start auth changes\"\n  }\n}\n\n// Before core fix\n{\n  \"name\": \"mcp0_backup_create\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\",\n    \"agent_context\": \"Fix validation\"\n  }\n}\n```\n\n### Resume Session\n```json\n// View recent work\n{\n  \"name\": \"mcp0_backup_list_all\",\n  \"parameters\": {\n    \"include_pattern\": \"src/**/*.js\"\n  }\n}\n\n// Get last version\n{\n  \"name\": \"mcp0_backup_restore\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\",\n    \"timestamp\": \"20250310-055950-000\",\n    \"create_emergency_backup\": true\n  }\n}\n```\n\n### Core Changes\n```json\n// Critical update\n{\n  \"name\": \"mcp0_backup_create\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\",\n    \"agent_context\": \"Add validation\"\n  }\n}\n\n// Module update\n{\n  \"name\": \"mcp0_backup_folder_create\",\n  \"parameters\": {\n    \"folder_path\": \"./src/api\",\n    \"include_pattern\": \"*.js\",\n    \"exclude_pattern\": \"test/**\",\n    \"agent_context\": \"Refactor modules\"\n  }\n}\n```\n\n### Restore Points\n```json\n// Check versions\n{\n  \"name\": \"mcp0_backup_list\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\"\n  }\n}\n\n{\n  \"name\": \"mcp0_backup_folder_list\",\n  \"parameters\": {\n    \"folder_path\": \"./src/api\"\n  }\n}\n\n// File restore\n{\n  \"name\": \"mcp0_backup_restore\",\n  \"parameters\": {\n    \"file_path\": \"./src/core.js\",\n    \"timestamp\": \"20250310-055950-000\",\n    \"create_emergency_backup\": true\n  }\n}\n\n// Folder restore\n{\n  \"name\": \"mcp0_backup_folder_restore\",\n  \"parameters\": {\n    \"folder_path\": \"./src/api\",\n    \"timestamp\": \"20250310-055950-000\",\n    \"create_emergency_backup\": true\n  }\n}\n```\n\n### Manage\n```json\n// List recent\n{\n  \"name\": \"mcp0_backup_list_all\",\n  \"parameters\": {\n    \"include_pattern\": \"src/**/*.js\"\n  }\n}\n\n// Stop backup\n{\n  \"name\": \"mcp0_mcp_cancel\",\n  \"parameters\": {\n    \"operationId\": \"backup_1234\"\n  }\n}\n```\n\n## License\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "backup",
        "hexitex",
        "restoration",
        "mcp backup",
        "provides backup",
        "backup restoration"
      ],
      "category": "file-management"
    },
    "hoonoh57--Append-Data-to-JSON-File-and-Display-JSON-data-to-HTML-Table-using-Ajax-Jquery-getJSON-method": {
      "owner": "hoonoh57",
      "name": "Append-Data-to-JSON-File-and-Display-JSON-data-to-HTML-Table-using-Ajax-Jquery-getJSON-method",
      "url": "https://github.com/hoonoh57/Append-Data-to-JSON-File-and-Display-JSON-data-to-HTML-Table-using-Ajax-Jquery-getJSON-method",
      "imageUrl": "/freedevtools/mcp/pfp/hoonoh57.webp",
      "description": "Append data to a JSON file and display it in an HTML table using Ajax and jQuery's getJSON method. This enables dynamic data loading for web applications, enhancing data management and user experience.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "PHP",
      "updated_at": "2018-02-25T23:56:53Z",
      "readme_content": "# Append-Data-to-JSON-File-and-Display-JSON-data-to-HTML-Table-using-Ajax-Jquery-getJSON-method\n### Final Result\n#### So this is gonna be final result but if you just want to display data from json there's sceeenshot down below.\n<img width=\"660\" alt=\"scmain\" src=\"https://user-images.githubusercontent.com/20491036/35260097-6e48efde-0059-11e8-9c04-7f2f815f0fd0.png\">\n\n### This is just data view, this is how its gonna look and load data like that bellow\n<img width=\"524\" alt=\"dataview\" src=\"https://user-images.githubusercontent.com/20491036/35260195-078e19da-005a-11e8-9bef-d3ac0de170f8.png\">\n\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "json",
        "ajax",
        "getjson",
        "json file",
        "data json",
        "json data"
      ],
      "category": "file-management"
    },
    "i-tozer--excalidraw-mcp": {
      "owner": "i-tozer",
      "name": "excalidraw-mcp",
      "url": "https://github.com/i-tozer/excalidraw-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/i-tozer.webp",
      "description": "Manage Excalidraw drawings using a straightforward API, providing capabilities to create, update, retrieve, and delete drawings. Export drawings in multiple formats such as SVG, PNG, and JSON while utilizing a simple file-based storage system.",
      "stars": 32,
      "forks": 15,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-09-28T16:12:34Z",
      "readme_content": "# Excalidraw MCP Server\n\nThis is a Model Context Protocol (MCP) server for Excalidraw, providing API functionality for operating on Excalidraw drawings.\n\n## Features\n\n- Create, read, update, and delete Excalidraw drawings\n- Export drawings to SVG, PNG, and JSON formats\n- Simple file-based storage system\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/yourusername/excalidraw-mcp.git\ncd excalidraw-mcp\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Usage\n\n### Starting the Server\n\n```bash\nnpm start\n```\n\n### API Endpoints\n\nThe server provides the following tools:\n\n#### Drawing Management\n\n- `create_drawing`: Create a new Excalidraw drawing\n- `get_drawing`: Get an Excalidraw drawing by ID\n- `update_drawing`: Update an Excalidraw drawing by ID\n- `delete_drawing`: Delete an Excalidraw drawing by ID\n- `list_drawings`: List all Excalidraw drawings\n\n#### Export Operations\n\n- `export_to_svg`: Export an Excalidraw drawing to SVG\n- `export_to_png`: Export an Excalidraw drawing to PNG\n- `export_to_json`: Export an Excalidraw drawing to JSON\n\n## Development\n\n### Project Structure\n\n```\nexcalidraw-mcp/\n├── src/\n│   ├── common/\n│   │   └── errors.ts\n│   └── operations/\n│       ├── drawings.ts\n│       └── export.ts\n├── index.ts\n├── package.json\n├── tsconfig.json\n└── README.md\n```\n\n### Building\n\n```bash\nnpm run build\n```\n\n### Running in Development Mode\n\n```bash\nnpm run dev\n```\n\n## License\n\nMIT ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "excalidraw",
        "drawings",
        "file",
        "excalidraw drawings",
        "manage excalidraw",
        "tozer excalidraw"
      ],
      "category": "file-management"
    },
    "intsig-textin--textin-mcp": {
      "owner": "intsig-textin",
      "name": "textin-mcp",
      "url": "https://github.com/intsig-textin/textin-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/intsig-textin.webp",
      "description": "Extract text from images, PDFs, and Word documents while performing OCR and document conversion tasks. Convert documents to Markdown format, and retrieve key information from files intelligently.",
      "stars": 23,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-08-25T07:37:52Z",
      "readme_content": "# TextIn OCR MCP\n<p align=\"center\">\n<img align=\"center\" src=\"https://ccidownload.blob.core.chinacloudapi.cn/download/2025/LLMS/logo.png\" width=\"800\" alt=\"TextIn\">\n</p>\n\nEnglish | [中文](./README_CHS.md)\n\n## TextIn OCR MCP Server\n\nTextIn MCP Server is a tool for extracting text and performing OCR on documents, including document text recognition, ID recognition, and invoice recognition. It also supports converting documents into Markdown format.\n\n<!-- <a href=\"https://glama.ai/mcp/servers/@intsig-textin/textin-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@intsig-textin/textin-mcp/badge\" alt=\"Textin Server MCP server\" />\n</a> -->\n\n### Tools\n- `recognition_text`\n  - Text recognition from images, Word documents, and PDF files.\n  - Inputs:\n    - `path` (string, required): `file path` or `a URL (HTTP/HTTPS) pointing to a document`\n  - Return: Text of the document.\n  - Supports conversion for:\n    - PDF\n    - Image (Jpeg, Jpg, Png, Bmp)\n\n- `doc_to_markdown`\n  - Convert images, PDFs, and Word documents to Markdown.\n  - Inputs:\n    - `path` (string, required): `file path` or `a URL (HTTP/HTTPS) pointing to a document`\n  - Return: Markdown of the document.\n  - Supports conversion for:\n    - PDF\n    - Microsoft Office Documents (Word, Excel)\n    - Image (Jpeg, Jpg, Png, Bmp)\n\n- `general_information_extration`\n  - Automatically identify and extract information from documents, or identify and extract user-specified information.\n  - Inputs:\n    - `path` (string, required): `file path` or `a URL (HTTP/HTTPS) pointing to a document`\n    - `key` (string[], optional): The non-tabular text information that the user wants to identify, input format is an array of strings.\n    - `table_header` (string[], optional): The table information that the user wants to identify, input format is an array of strings.\n  - Return: The key information JSON.\n  - Supports conversion for:\n    - PDF\n    - Microsoft Office Documents (Word, Excel)\n    - Image (Jpeg, Jpg, Png, Bmp)\n\nWhen the input is a URL, it does not support handling access to protected resources.\n\n## Setup\n\n### APP_ID and APP_SECRET\n\nClick [here](https://www.textin.com/user/login?from=github_mcp) to register for a TextIn account.\n\nGet Textin APP_ID and APP_SECRET by following the instructions [here](https://www.textin.com/doc/guide/account/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96app%20id?status=first).\n\n### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"textin-ocr\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@intsig/server-textin\"\n      ],\n      \"env\": {\n        \"APP_ID\": \"<YOUR_APP_ID>\",\n        \"APP_SECRET\": \"<YOUR_APP_SECRET>\",\n        \"MCP_SERVER_REQUEST_TIMEOUT\": \"600000\"\n      },\n      \"timeout\": 600\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ocr",
        "textin",
        "markdown",
        "ocr document",
        "intsig textin",
        "document conversion"
      ],
      "category": "file-management"
    },
    "jbchouinard--mcp-document-reader": {
      "owner": "jbchouinard",
      "name": "mcp-document-reader",
      "url": "https://github.com/jbchouinard/mcp-document-reader",
      "imageUrl": "/freedevtools/mcp/pfp/jbchouinard.webp",
      "description": "Interact with PDF and EPUB documents, enabling reading and processing tasks within an IDE. Supports seamless handling of document content directly within the development environment.",
      "stars": 7,
      "forks": 4,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-16T17:07:43Z",
      "readme_content": "# mcp-document-reader\n\nA rudimentary [MCP server](https://modelcontextprotocol.io/introduction) for interacting with PDF and EPUB documents.\n\nI use this with [Windsurf IDE by Codeium](https://codeium.com/windsurf), which\nonly supports MCP tools, not resources.\n\n## Installation\n\n### Requirements\n\n- [Python 3.11+](https://www.python.org/downloads/)\n- [Poetry](https://python-poetry.org/docs/)\n\n```bash\n# Clone the repository\ngit clone https://github.com/jbchouinard/mcp-document-reader.git\ncd mcp-document-reader\npoetry install\n```\n\n## Configure MCP Server\n\nRun with poetry:\n\n```json\n{\n  \"mcpServers\": {\n    \"documents\": {\n      \"command\": \"poetry\",\n      \"args\": [\"-C\", \"path/to/mcp-document-reader\", \"run\", \"mcp-document-reader\"]\n    }\n  }\n}\n```\n\nAlternatively, build and install with pip, then run the script directly:\n\n```bash\npoetry build\npipx install dist/*.whl\nwhich mcp-document-reader\n```\n\nThen use the following config, with the path output by which:\n\n```json\n{\n  \"mcpServers\": {\n    \"documents\": {\n      \"command\": \"/path/to/mcp-document-reader\",\n      \"args\": []\n    }\n  }\n}\n```\n\n## Development\n\n### Setup\n\n```bash\n# Install dependencies\npoetry install\n```\n\n### Testing\n\n```bash\npoetry run pytest\n```\n\n### Linting\n\n```bash\npoetry run ruff check --fix .\npoetry run ruff format .\n```\n\n## License\n\n[MIT](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "document",
        "reader",
        "documents",
        "document reader",
        "epub documents",
        "pdf epub"
      ],
      "category": "file-management"
    },
    "jettyio--mlcbakery": {
      "owner": "jettyio",
      "name": "mlcbakery",
      "url": "https://github.com/jettyio/mlcbakery",
      "imageUrl": "/freedevtools/mcp/pfp/jettyio.webp",
      "description": "Provides access to MLC Bakery functionalities through an MCP-compatible interface, enabling clients to search datasets, retrieve previews, and validate metadata efficiently. Facilitates interaction with MLC Bakery API tools for data exploration and management.",
      "stars": 5,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-20T22:04:28Z",
      "readme_content": "# MLC Bakery\n\nA Python-based service for managing ML model provenance and lineage, built with FastAPI and SQLAlchemy. Support for Croissant metadata validation.\n\n## Features\n\n- Dataset management with collection support\n- Entity tracking\n- Activity logging\n- Provenance relationships tracking\n- RESTful API endpoints\n\n## Running with Docker\n\n1.  **Set up Environment Variables:**\n    Create a `.env` file in the project root by copying the example:\n    ```bash\n    cp env.example .env\n    ```\n\n2. **Start docker containers:**\n    The bakery relies on a postgres database and Typesense for search. The MCP server makes REST calls to the API server, which then calls the persistence layer.\n    ```\n    docker compose up -d\n    ```\n\n3.  **Run Database Migrations:**\n    Apply the latest database schema using Alembic. `uv run` executes commands within the project's managed environment.\n    ```bash\n    docker compose exec db psql -U postgres -c \"create DATABASE mlcbakery;\"\n    docker compose exec api alembic upgrade head\n    ```\n## Access the bakery\nBy default, the API will be available on localhost.\n-   Swagger UI: `http://bakery.localhost/docs`\n-   ReDoc: `http://bakery.localhost/redoc`\n-   Streamable MCP HTTP: `http://mcp.localhost/mcp` (you may need to add this to your `/etc/hosts` for local development)\n\n## Running the Server (Locally)\n\n### Prerequisites\n\n- Python 3.12+\n- [uv](https://github.com/astral-sh/uv) (Python package manager)\n\n### Development steps\n\n1.  **Clone the repository:**\n    ```bash\n    git clone git@github.com:jettyio/mlcbakery.git\n    cd mlcbakery\n    ```\n\n2.  **Install Dependencies:**\n    `uv` uses `pyproject.toml` to manage dependencies. It will automatically create a virtual environment if one doesn't exist.\n    ```bash\n    curl -LsSf https://astral.sh/uv/install.sh | sh\n    ```\n    ```\n    pip install poetry uvicorn\n    uv run poetry install --no-interaction --no-ansi --no-root --with mcp\n    ```\nStart the FastAPI application using uvicorn:\n```bash\n# Make sure your .env file is present for the DATABASE_URL\nuv run uvicorn mlcbakery.main:app --reload --host 0.0.0.0 --port 8000\n```\n\n### Authentication\nThe Bakery is setup to authenticate requests with two methods: JWT Tokens and a \"Master Admin Token\". Both are configured in the ENV variables (.env file). Both JWT tokens and the Master Admin Token should be provided as \"Bearer\" Authorization header values.\n\n- ADMIN_AUTH_TOKEN: A fixed value that is the token a user would need to provide to have admin permissions (unrestricted access to all resources).\n- JWT_VERIFICATION_STRATEGY: The URL of a trusted JWT token issuer, such as Clerk. We have a development instance of Clerk running that you can use. You can sign up for an account via flows.jetty.io (alpha), or contact dev@jetty.io for access to Jetty's Cloud.\n\n### Running Tests\n\nThe tests are configured to run against a PostgreSQL database defined by the `DATABASE_URL` environment variable. You can use the same database as your development environment or configure a separate test database in your `.env` file if preferred (adjust connection string as needed).\n\n```bash\n# Ensure DATABASE_URL is set in your environment or .env file\nuv run pytest\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mlcbakery",
        "mlc",
        "bakery",
        "mlc bakery",
        "mlcbakery provides",
        "access mlc"
      ],
      "category": "file-management"
    },
    "jizihua1118--linux-remote-mcp": {
      "owner": "jizihua1118",
      "name": "linux-remote-mcp",
      "url": "https://github.com/jizihua1118/linux-remote-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jizihua1118.webp",
      "description": "Connect to Linux servers for remote command execution, as well as for uploading and downloading files. This service facilitates efficient management of Linux servers through a Python-based interface.",
      "stars": 0,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-03-23T10:18:22Z",
      "readme_content": "# linux-remote-mcp\n这是一个基于Python的MCP（远程管理和控制）服务，可以用于：  1. 连接Linux服务器 2. 在远程Linux服务器上执行命令 3. 上传文件到Linux服务器 4. 从Linux服务器下载文件\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "linux",
        "mcp",
        "python",
        "remote mcp",
        "jizihua1118 linux",
        "servers python"
      ],
      "category": "file-management"
    },
    "jmh108--md-webcrawl-mcp": {
      "owner": "jmh108",
      "name": "md-webcrawl-mcp",
      "url": "https://github.com/jmh108/md-webcrawl-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/jmh108.webp",
      "description": "Extracts website content and saves it as markdown files while mapping website structures and links efficiently, enabling batch processing of multiple URLs.",
      "stars": 3,
      "forks": 5,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-07-19T18:57:32Z",
      "readme_content": "# MD MCP Webcrawler Project\n\nA Python-based MCP (https://modelcontextprotocol.io/introduction) web crawler for extracting and saving website content. \n\n## Features\n- Extract website content and save as markdown files\n- Map website structure and links\n- Batch processing of multiple URLs\n- Configurable output directory\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/yourusername/webcrawler.git\ncd webcrawler\n```\n\n2. Install dependencies:\n```bash\npip install -r requirements.txt\n```\n\n3. Optional: Configure environment variables:\n```bash\nexport OUTPUT_PATH=./output  # Set your preferred output directory\n```\n\n## Output\nCrawled content is saved in markdown format in the specified output directory.\n\n## Configuration\nThe server can be configured through environment variables:\n\n- `OUTPUT_PATH`: Default output directory for saved files\n- `MAX_CONCURRENT_REQUESTS`: Maximum parallel requests (default: 5)\n- `REQUEST_TIMEOUT`: Request timeout in seconds (default: 30)\n\n## Claude Set-Up\nInstall with FastMCP \n``` fastmcp install server.py ```\n\nor user custom settings to run with fastmcp directly\n\n````\n\"Crawl Server\": {\n      \"command\": \"fastmcp\",\n      \"args\": [\n        \"run\",\n        \"/Users/mm22/Dev_Projekte/servers-main/src/Webcrawler/server.py\"\n      ],\n      \"env\": {\n        \"OUTPUT_PATH\": \"/Users/user/Webcrawl\"\n      }\n```` \n\n\n\n## Development\n\n### Live Development\n```bash\nfastmcp dev server.py --with-editable .\n```\n### Debug \nIt helps to use https://modelcontextprotocol.io/docs/tools/inspector for debugging\n\n## Examples\n\n### Example 1: Extract and Save Content\n```bash\nmcp call extract_content --url \"https://example.com\" --output_path \"example.md\"\n```\n\n### Example 2: Create Content Index\n```bash\nmcp call scan_linked_content --url \"https://example.com\" | \\\n  mcp call create_index --content_map - --output_path \"index.md\"\n```\n\n## Contributing\n1. Fork the repository\n2. Create a feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## License\n\nDistributed under the MIT License. See `LICENSE` for more information.\n\n## Requirements\n\n- Python 3.7+\n- FastMCP (uv pip install fastmcp)\n- Dependencies listed in requirements.txt\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "webcrawl",
        "markdown",
        "urls",
        "md webcrawl",
        "webcrawl mcp",
        "markdown files"
      ],
      "category": "file-management"
    },
    "joshrutkowski--applescript-mcp": {
      "owner": "joshrutkowski",
      "name": "applescript-mcp",
      "url": "https://github.com/joshrutkowski/applescript-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/joshrutkowski.webp",
      "description": "Enables interaction with macOS through AppleScript for system control, file management, and handling notifications. Provides functionalities like managing calendar events, clipboard operations, and system controls.",
      "stars": 315,
      "forks": 51,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T04:54:55Z",
      "readme_content": "# applescript-mcp MCP Server\n\nA Model Context Protocol server that enables LLM applications to interact with macOS through AppleScript.\nThis server provides a standardized interface for AI applications to control system functions, manage files, handle notifications, and more.\n\n[![Node.js CI](https://github.com/joshrutkowski/applescript-mcp/actions/workflows/node.js.yml/badge.svg)](https://github.com/joshrutkowski/applescript-mcp/actions/workflows/node.js.yml)\n\n<a href=\"https://glama.ai/mcp/servers/0t5gydjcqw\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/0t5gydjcqw/badge\" alt=\"applescript-mcp MCP server\" /></a>\n\n## Features\n\n- 🗓️ Calendar management (events, reminders)\n- 📋 Clipboard operations\n- 🔍 Finder integration\n- 🔔 System notifications\n- ⚙️ System controls (volume, dark mode, apps)\n- 📟 iTerm terminal integration\n- 📬 Mail (create new email, list emails, get email)\n- 🔄 Shortcuts automation\n- 💬 Messages (list chats, get messages, search messages, send a message)\n- 🗒️ Notes (create formatted notes, list notes, search notes)\n- 📄 Pages (create documents)\n\n### Planned Features\n\n- 🧭 Safari (open in Safari, save page content, get selected page/tab)\n- ✅ Reminders (create, get)\n\n## Prerequisites\n\n- macOS 10.15 or later\n- Node.js 18 or later\n\n## Available Categories\n\n### Calendar\n\n| Command | Description           | Parameters                                          |\n| ------- | --------------------- | --------------------------------------------------- |\n| `add`   | Create calendar event | `title`, `startDate`, `endDate`, `calendar` (optional) |\n| `list`  | List today's events   | None                                                |\n\n#### Examples\n\n```\n// Create a new calendar event\nCreate a calendar event titled \"Team Meeting\" starting tomorrow at 2pm for 1 hour\n\n// List today's events\nWhat events do I have scheduled for today?\n```\n\n### Clipboard\n\n| Command           | Description            | Parameters |\n| ----------------- | ---------------------- | ---------- |\n| `set_clipboard`   | Copy to clipboard      | `content`  |\n| `get_clipboard`   | Get clipboard contents | None       |\n| `clear_clipboard` | Clear clipboard        | None       |\n\n#### Examples\n\n```\n// Copy text to clipboard\nCopy \"Remember to buy groceries\" to my clipboard\n\n// Get clipboard contents\nWhat's currently in my clipboard?\n\n// Clear clipboard\nClear my clipboard\n```\n\n### Finder\n\n| Command              | Description        | Parameters                     |\n| -------------------- | ------------------ | ------------------------------ |\n| `get_selected_files` | Get selected files | None                           |\n| `search_files`       | Search for files   | `query`, `location` (optional) |\n| `quick_look`         | Preview file       | `path`                         |\n\n#### Examples\n\n```\n// Get selected files in Finder\nWhat files do I currently have selected in Finder?\n\n// Search for files\nFind all PDF files in my Documents folder\n\n// Preview a file\nShow me a preview of ~/Documents/report.pdf\n```\n\n### Notifications\n\n> Note: Sending notification requires that you enable notifications in System Settings > Notifications > Script Editor.\n\n| Command                 | Description       | Parameters                             |\n| ----------------------- | ----------------- | -------------------------------------- |\n| `send_notification`     | Show notification | `title`, `message`, `sound` (optional) |\n| `toggle_do_not_disturb` | Toggle DND mode   | None                                   |\n\n#### Examples\n\n```\n// Send a notification\nSend me a notification with the title \"Reminder\" and message \"Time to take a break\"\n\n// Toggle Do Not Disturb\nTurn on Do Not Disturb mode\n```\n\n### System\n\n| Command             | Description       | Parameters                 |\n| ------------------- | ----------------- | -------------------------- |\n| `volume`            | Set system volume | `level` (0-100)            |\n| `get_frontmost_app` | Get active app    | None                       |\n| `launch_app`        | Open application  | `name`                     |\n| `quit_app`          | Close application | `name`, `force` (optional) |\n| `toggle_dark_mode`  | Toggle dark mode  | None                       |\n\n#### Examples\n\n```\n// Set system volume\nSet my Mac's volume to 50%\n\n// Get active application\nWhat app am I currently using?\n\n// Launch an application\nOpen Safari\n\n// Quit an application\nClose Spotify\n\n// Toggle dark mode\nSwitch to dark mode\n```\n\n### iTerm\n\n| Command           | Description     | Parameters                        |\n| ----------------- | --------------- | --------------------------------- |\n| `paste_clipboard` | Paste to iTerm  | None                              |\n| `run`             | Execute command | `command`, `newWindow` (optional) |\n\n#### Examples\n\n```\n// Paste clipboard to iTerm\nPaste my clipboard contents into iTerm\n\n// Run a command in iTerm\nRun \"ls -la\" in iTerm\n\n// Run a command in a new iTerm window\nRun \"top\" in a new iTerm window\n```\n\n### Shortcuts\n\n| Command          | Description                                | Parameters                                           |\n| ---------------- | ------------------------------------------ | ---------------------------------------------------- |\n| `run_shortcut`   | Run a shortcut                             | `name`, `input` (optional)                           |\n| `list_shortcuts` | List all available shortcuts               | `limit` (optional)                                   |\n\n#### Examples\n\n```\n// List available shortcuts\nList all my available shortcuts\n\n// List with limit\nShow me my top 5 shortcuts\n\n// Run a shortcut\nRun my \"Daily Note in Bear\" shortcut\n\n// Run a shortcut with input\nRun my \"Add to-do\" shortcut with input \"Buy groceries\"\n```\n\n### Mail\n\n| Command       | Description                      | Parameters                                                |\n| ------------- | -------------------------------- | --------------------------------------------------------- |\n| `create_email`| Create a new email in Mail.app   | `recipient`, `subject`, `body`                            |\n| `list_emails` | List emails from a mailbox       | `mailbox` (optional), `count` (optional), `unreadOnly` (optional) |\n| `get_email`   | Get a specific email by search   | `subject` (optional), `sender` (optional), `dateReceived` (optional), `mailbox` (optional), `account` (optional), `unreadOnly` (optional), `includeBody` (optional) |\n\n#### Examples\n\n```\n// Create a new email\nCompose an email to john@example.com with subject \"Meeting Tomorrow\" and body \"Hi John, Can we meet tomorrow at 2pm?\"\n\n// List emails\nShow me my 10 most recent unread emails\n\n// Get a specific email\nFind the email from sarah@example.com about \"Project Update\"\n```\n\n### Messages\n\n| Command           | Description                                  | Parameters                                                |\n| ----------------- | -------------------------------------------- | --------------------------------------------------------- |\n| `list_chats`      | List available iMessage and SMS chats        | `includeParticipantDetails` (optional, default: false)    |\n| `get_messages`    | Get messages from the Messages app           | `limit` (optional, default: 100)                          |\n| `search_messages` | Search for messages containing specific text | `searchText`, `sender` (optional), `chatId` (optional), `limit` (optional, default: 50), `daysBack` (optional, default: 30) |\n| `compose_message` | Open Messages app with pre-filled message or auto-send   | `recipient` (required), `body` (optional), `auto` (optional, default: false) |\n\n#### Examples\n\n```\n// List available chats\nShow me my recent message conversations\n\n// Get recent messages\nShow me my last 20 messages\n\n// Search messages\nFind messages containing \"dinner plans\" from John in the last week\n\n// Compose a message\nSend a message to 555-123-4567 saying \"I'll be there in 10 minutes\"\n```\n\n### Notes\n\n| Command           | Description                                  | Parameters                                                |\n| ----------------- | -------------------------------------------- | --------------------------------------------------------- |\n| `create`          | Create a note with markdown-like formatting  | `title`, `content`, `format` (optional with formatting options) |\n| `createRawHtml`   | Create a note with direct HTML content       | `title`, `html`                                           |\n| `list`            | List notes, optionally from a specific folder| `folder` (optional)                                       |\n| `get`             | Get a specific note by title                 | `title`, `folder` (optional)                              |\n| `search`          | Search for notes containing specific text    | `query`, `folder` (optional), `limit` (optional, default: 5), `includeBody` (optional, default: true) |\n\n#### Examples\n\n```\n// Create a new note with markdown formatting\nCreate a note titled \"Meeting Minutes\" with content \"# Discussion Points\\n- Project timeline\\n- Budget review\\n- Next steps\" and format headings and lists\n\n// Create a note with HTML\nCreate a note titled \"Formatted Report\" with HTML content \"<h1>Quarterly Report</h1><p>Sales increased by <strong>15%</strong></p>\"\n\n// List notes\nShow me all my notes in the \"Work\" folder\n\n// Get a specific note\nShow me my note titled \"Shopping List\"\n\n// Search notes\nFind notes containing \"recipe\" in my \"Cooking\" folder\n```\n\n### Pages\n\n| Command            | Description                                  | Parameters                                                |\n| ----------------- | -------------------------------------------- | --------------------------------------------------------- |\n| `create_document` | Create a new Pages document with plain text  | `content`                                                 |\n\n#### Examples\n\n```\n// Create a new Pages document\nCreate a Pages document with the content \"Project Proposal\\n\\nThis document outlines the scope and timeline for the upcoming project.\"\n```\n\n## Architecture\n\nThe applescript-mcp server is built using TypeScript and follows a modular architecture:\n\n### Core Components\n\n1. **AppleScriptFramework** (`framework.ts`): The main server class that:\n   - Manages MCP protocol communication\n   - Handles tool registration and execution\n   - Provides logging functionality\n   - Executes AppleScript commands\n\n2. **Categories** (`src/categories/*.ts`): Modular script collections organized by functionality:\n   - Each category contains related scripts (e.g., calendar, system, notes)\n   - Categories are registered with the framework in `index.ts`\n\n3. **Types** (`src/types/index.ts`): TypeScript interfaces defining:\n   - `ScriptDefinition`: Structure for individual scripts\n   - `ScriptCategory`: Collection of related scripts\n   - `LogLevel`: Standard logging levels\n   - `FrameworkOptions`: Configuration options\n\n### Execution Flow\n\n1. Client sends a tool request via MCP protocol\n2. Server identifies the appropriate category and script\n3. Script content is generated (static or dynamically via function)\n4. AppleScript is executed via macOS `osascript` command\n5. Results are returned to the client\n\n### Logging System\n\nThe framework includes a comprehensive logging system that:\n- Logs to both stderr and MCP logging protocol\n- Supports multiple severity levels (debug, info, warning, error, etc.)\n- Provides detailed execution information for troubleshooting\n\n## Development\n\n### Setup\n\n```bash\n# Install dependencies\nnpm install\n\n# Build the server\nnpm run build\n\n# Launch MCP Inspector\n# See: https://modelcontextprotocol.io/docs/tools/inspector\nnpx @modelcontextprotocol/inspector node path/to/server/index.js args...\n```\n\n### Adding New Functionality\n\n#### 1. Create Category File\n\nCreate `src/categories/newcategory.ts`:\n\n```typescript\nimport { ScriptCategory } from \"../types/index.js\";\n\nexport const newCategory: ScriptCategory = {\n  name: \"category_name\",\n  description: \"Category description\",\n  scripts: [\n    // Scripts will go here\n  ],\n};\n```\n\n#### 2. Add Scripts\n\n```typescript\n{\n  name: \"script_name\",\n  description: \"What the script does\",\n  schema: {\n    type: \"object\",\n    properties: {\n      paramName: {\n        type: \"string\",\n        description: \"Parameter description\"\n      }\n    },\n    required: [\"paramName\"]\n  },\n  script: (args) => `\n    tell application \"App\"\n      // AppleScript code using ${args.paramName}\n    end tell\n  `\n}\n```\n\n#### 3. Register Category\n\nUpdate `src/index.ts`:\n\n```typescript\nimport { newCategory } from \"./categories/newcategory.js\";\n// ...\nserver.addCategory(newCategory);\n```\n\n### Advanced Script Development\n\nFor more complex scripts, you can:\n\n1. **Use dynamic script generation**:\n   ```typescript\n   script: (args) => {\n     // Process arguments and build script dynamically\n     let scriptContent = `tell application \"App\"\\n`;\n     \n     if (args.condition) {\n       scriptContent += `  // Conditional logic\\n`;\n     }\n     \n     scriptContent += `end tell`;\n     return scriptContent;\n   }\n   ```\n\n2. **Process complex data**:\n   ```typescript\n   // Example from Notes category\n   function generateNoteHtml(args: any): string {\n     // Process markdown-like syntax into HTML\n     let processedContent = content;\n     \n     if (format.headings) {\n       processedContent = processedContent.replace(/^# (.+)$/gm, '<h1>$1</h1>');\n       // ...\n     }\n     \n     return processedContent;\n   }\n   ```\n\n## Debugging\n\n### Using MCP Inspector\n\nThe MCP Inspector provides a web interface for testing and debugging your server:\n\n```bash\nnpm run inspector\n```\n\n### Logging\n\nEnable debug logging by setting the environment variable:\n\n```bash\nDEBUG=applescript-mcp* npm start\n```\n\n### Example configuration\nAfter running `npm run build` add the following to your `mcp.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"applescript-mcp-server\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/applescript-mcp/dist/index.js\"]\n    }\n  }\n}\n```\n\n### Common Issues\n\n- **Permission Errors**: Check System Preferences > Security & Privacy > Privacy > Automation\n- **Script Failures**: Test scripts directly in Script Editor.app before integration\n- **Communication Issues**: Check stdio streams aren't being redirected\n- **Database Access**: Some features (like Messages) require Full Disk Access permission\n\n## Resources\n\n- [AppleScript Language Guide](https://developer.apple.com/library/archive/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html)\n- [MCP Protocol Documentation](https://modelcontextprotocol.io)\n- [Issue Tracker](https://github.com/joshrutkowski/applescript-mcp/issues)\n\n## Contributing\n\n1. Fork the repository\n2. Create a feature branch\n3. Commit your changes\n4. Push to the branch\n5. Create a Pull Request\n\n## License\n\nMIT License - see [LICENSE](LICENSE) for details\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "applescript",
        "mcp",
        "macos",
        "applescript mcp",
        "macos applescript",
        "applescript control"
      ],
      "category": "file-management"
    },
    "kmexnx--excel-to-pdf-mcp": {
      "owner": "kmexnx",
      "name": "excel-to-pdf-mcp",
      "url": "https://github.com/kmexnx/excel-to-pdf-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kmexnx.webp",
      "description": "Convert Excel and Apple Numbers files to PDF format, enabling seamless file handling and sharing. Integrate with AI assistants through the Model Context Protocol for direct file conversion during conversations.",
      "stars": 2,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-08-08T14:32:09Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/kmexnx-excel-to-pdf-mcp-badge.png)](https://mseep.ai/app/kmexnx-excel-to-pdf-mcp)\n\n# Excel to PDF MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@kmexnx/excel-to-pdf-mcp)](https://smithery.ai/server/@kmexnx/excel-to-pdf-mcp)\n\nAn MCP (Model Context Protocol) server that can convert Excel (.xls/.xlsx) and Apple Numbers (.numbers) files to PDF format. This tool integrates with AI assistants like Claude to enable file conversion directly through the conversation.\n\n<a href=\"https://glama.ai/mcp/servers/@kmexnx/excel-to-pdf-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@kmexnx/excel-to-pdf-mcp/badge\" alt=\"Excel to PDF Converter MCP server\" />\n</a>\n\n## Features\n\n- Convert Excel files (.xls, .xlsx) to PDF\n- Convert Apple Numbers files (.numbers) to PDF\n- Integrates with AI assistants via the Model Context Protocol\n- Secure file handling that respects project boundaries\n- Easy installation via npm\n\n## Requirements\n\n- Node.js 16 or higher\n- LibreOffice (for the conversion process)\n\n## Installation\n\n### Installing via Smithery\n\nTo install Excel to PDF Converter for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@kmexnx/excel-to-pdf-mcp):\n\n```bash\nnpx -y @smithery/cli install @kmexnx/excel-to-pdf-mcp --client claude\n```\n\n### Install LibreOffice\n\nLibreOffice is required for the conversion process. Install it according to your operating system:\n\n#### On macOS:\n```bash\nbrew install libreoffice\n```\n\n#### On Ubuntu/Debian:\n```bash\napt-get install libreoffice\n```\n\n#### On Windows:\nDownload and install from [LibreOffice official website](https://www.libreoffice.org/download/download/).\n\n### Install the MCP server\n\n```bash\nnpm install -g excel-to-pdf-mcp\n```\n\n## Using with Claude Desktop\n\nTo use this MCP server with Claude desktop:\n\n1. Configure your MCP settings in Claude desktop by adding this server to your `mcp_settings.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"excel-to-pdf-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"excel-to-pdf-mcp\"],\n      \"name\": \"Excel to PDF Converter\"\n    }\n  }\n}\n```\n\n2. Make sure your Excel or Numbers files are within your project directory.\n\n3. Once configured, Claude will be able to convert your spreadsheet files to PDF using this tool.\n\n## Example Conversation\n\nHere's an example of how a conversation with Claude might look when using this MCP server:\n\n**User**: \"I need to convert my quarterly_report.xlsx to PDF so I can share it with stakeholders.\"\n\n**Claude**: \"I can help you convert your Excel file to PDF. Let me use the Excel to PDF converter tool.\"\n\nClaude would then use the tool behind the scenes:\n\n```\nTool: convert_excel_to_pdf\nArguments: {\n  \"input_path\": \"quarterly_report.xlsx\",\n  \"output_format\": \"pdf\"\n}\n```\n\n**Claude**: \"I've converted your Excel file to PDF. You can find it at: quarterly_report-1628347658-a7b2c9.pdf in your project directory.\"\n\n## Available Tools\n\nThis MCP server provides the following tools:\n\n### 1. convert_excel_to_pdf\n\nConverts Excel files (.xls/.xlsx) to PDF format.\n\n**Arguments:**\n- `input_path`: Relative path to the Excel file (required)\n- `output_format`: Output format, currently only PDF is supported (default: \"pdf\")\n\n### 2. convert_numbers_to_pdf\n\nConverts Apple Numbers files (.numbers) to PDF format.\n\n**Arguments:**\n- `input_path`: Relative path to the Numbers file (required)\n- `output_format`: Output format, currently only PDF is supported (default: \"pdf\")\n\n## Development\n\nIf you want to run from source or contribute:\n\n1. Clone the repository\n2. Install dependencies: `npm install`\n3. Build the project: `npm run build`\n4. Run the server: `npm start`\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kmexnx",
        "excel",
        "pdf",
        "kmexnx excel",
        "management kmexnx",
        "excel apple"
      ],
      "category": "file-management"
    },
    "kshern--image-tools-mcp": {
      "owner": "kshern",
      "name": "image-tools-mcp",
      "url": "https://github.com/kshern/image-tools-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/kshern.webp",
      "description": "Retrieve image dimensions, compress images, and convert images to various formats using local files or URLs. Supports image processing with detailed output on dimensions, types, and compression information.",
      "stars": 6,
      "forks": 3,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:32:19Z",
      "readme_content": "# Image Tools MCP\n\n[![smithery badge](https://smithery.ai/badge/@kshern/image-tools-mcp)](https://smithery.ai/server/@kshern/image-tools-mcp)\n\nA Model Context Protocol (MCP) service for retrieving image dimensions and compressing images, supporting both URL and local file sources.\n\n_[中文文档](./README_zh.md)_\n\n## Features\n\n- Retrieve image dimensions from URLs\n- Get image dimensions from local files\n- Compress images from URLs using TinyPNG API\n- Compress local images using TinyPNG API\n- Convert images to different formats (webp, jpeg/jpg, png)\n- Returns width, height, type, MIME type, and compression information\n\n### Example Results\n\n\n\n\n\n\n\ndownload from figma url and compress\n\n\n## Usage\n\n### Using as an MCP Service\n\nThis service provides five tool functions:\n\n1. `get_image_size` - Get dimensions of remote images\n2. `get_local_image_size` - Get dimensions of local images\n3. `compress_image_from_url` - Compress remote images using TinyPNG API\n4. `compress_local_image` - Compress local images using TinyPNG API\n5. `figma` - Fetch image links from Figma API and compress them using TinyPNG API\n\n### Client Integration\n\nTo use this MCP service, you need to connect to it from an MCP client. Here are examples of how to integrate with different clients:\n\n#### Usage\n\n```json\n{\n  \"mcpServers\": {\n    \"image-tools\": {\n      \"command\": \"npx\",\n      \"args\": [\"image-tools-mcp\"],\n      \"env\": {\n        \"TINIFY_API_KEY\": \"<YOUR_TINIFY_API_KEY>\",\n        \"FIGMA_API_TOKEN\": \"<YOUR_FIGMA_API_TOKEN>\"\n      }\n    }\n  }\n}\n```\n\n#### Using with MCP Client Library\n\n````typescript\nimport { McpClient } from \"@modelcontextprotocol/client\";\n\n// Initialize the client\nconst client = new McpClient({\n  transport: \"stdio\" // or other transport options\n});\n\n// Connect to the server\nawait client.connect();\n\n// Get image dimensions from URL\nconst urlResult = await client.callTool(\"get_image_size\", {\n  options: {\n    imageUrl: \"https://example.com/image.jpg\"\n  }\n});\nconsole.log(JSON.parse(urlResult.content[0].text));\n// Output: { width: 800, height: 600, type: \"jpg\", mime: \"image/jpeg\" }\n\n// Get image dimensions from local file\nconst localResult = await client.callTool(\"get_local_image_size\", {\n  options: {\n    imagePath: \"D:/path/to/image.png\"\n  }\n});\nconsole.log(JSON.parse(localResult.content[0].text));\n// Output: { width: 1024, height: 768, type: \"png\", mime: \"image/png\", path: \"D:/path/to/image.png\" }\n\n// Compress image from URL\nconst compressUrlResult = await client.callTool(\"compress_image_from_url\", {\n  options: {\n    imageUrl: \"https://example.com/image.jpg\",\n    outputFormat: \"webp\" // Optional: convert to webp, jpeg/jpg, or png\n  }\n});\nconsole.log(JSON.parse(compressUrlResult.content[0].text));\n// Output: { originalSize: 102400, compressedSize: 51200, compressionRatio: \"50.00%\", tempFilePath: \"/tmp/compressed_1615456789.webp\", format: \"webp\" }\n\n// Compress local image\nconst compressLocalResult = await client.callTool(\"compress_local_image\", {\n  options: {\n    imagePath: \"D:/path/to/image.png\",\n    outputPath: \"D:/path/to/compressed.webp\", // Optional\n    outputFormat: \"image/webp\" // Optional: convert to image/webp, image/jpeg, or image/png\n  }\n});\nconsole.log(JSON.parse(compressLocalResult.content[0].text));\n// Output: { originalSize: 102400, compressedSize: 51200, compressionRatio: \"50.00%\", outputPath: \"D:/path/to/compressed.webp\", format: \"webp\" }\n\n// Fetch image links from Figma API\n\nconst figmaResult = await client.callTool(\"figma\", {\n  options: {\n    figmaUrl: \"https://www.figma.com/file/XXXXXXX\"\n  }\n});\nconsole.log(JSON.parse(figmaResult.content[0].text));\n// Output: { imageLinks: [\"https://example.com/image1.jpg\", \"https://example.com/image2.jpg\"] }\n\n### Tool Schemas\n\n#### get_image_size\n\n```typescript\n{\n  options: {\n    imageUrl: string // URL of the image to retrieve dimensions for\n  }\n}\n````\n\n#### get_local_image_size\n\n```typescript\n{\n  options: {\n    imagePath: string; // Absolute path to the local image file\n  }\n}\n```\n\n#### compress_image_from_url\n\n```typescript\n{\n  options: {\n    imageUrl: string // URL of the image to compress\n    outputFormat?: \"image/webp\" | \"image/jpeg\" | \"image/jpg\" | \"image/png\" // Optional output format\n  }\n}\n```\n\n#### compress_local_image\n\n```typescript\n{\n  options: {\n    imagePath: string // Absolute path to the local image file\n    outputPath?: string // Optional absolute path for the compressed output image\n    outputFormat?: \"image/webp\" | \"image/jpeg\" | \"image/jpg\" | \"image/png\" // Optional output format\n  }\n}\n```\n\n#### figma\n\n```typescript\n{\n  options: {\n    figmaUrl: string; // URL of the Figma file to fetch image links from\n  }\n}\n```\n\n## Changelog\n\n- **2025-05-12:** Updated Figma API to support additional parameters, including 2x image scaling.\n\n## Technical Implementation\n\nThis project is built on the following libraries:\n\n- [probe-image-size](https://github.com/nodeca/probe-image-size) - For image dimension detection\n- [tinify](https://github.com/tinify/tinify-nodejs) - For image compression via the TinyPNG API\n- [figma-api](https://github.com/figma/api) - For fetching image links from Figma API\n\n## Environment Variables\n\n- `TINIFY_API_KEY` - Required for image compression functionality. Get your API key from [TinyPNG](https://tinypng.com/developers)\n  - When not provided, the compression tools (`compress_image_from_url` and `compress_local_image`) will not be registered\n- `FIGMA_API_TOKEN` - Required for fetching image links from Figma API. Get your API token from [Figma](https://www.figma.com/developers)\n  - When not provided, the Figma tool (`figma`) will not be registered\n\nNote: The basic image dimension tools (`get_image_size` and `get_local_image_size`) are always available regardless of API keys.\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "images",
        "compression",
        "image tools",
        "convert images",
        "kshern image"
      ],
      "category": "file-management"
    },
    "kvas-it--mcp-server-fs": {
      "owner": "kvas-it",
      "name": "mcp-server-fs",
      "url": "https://github.com/kvas-it/mcp-server-fs",
      "imageUrl": "/freedevtools/mcp/pfp/kvas-it.webp",
      "description": "Provide basic file system operations including navigation, reading, writing, and analyzing files, as well as executing commands related to file management.",
      "stars": 3,
      "forks": 4,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-03T22:32:13Z",
      "readme_content": "# MCP File System Server\n\nMCP server providing file system operations. Supports navigation, reading,\nwriting, analyzing files and command execution.\n\n## Tools\n\n### File and Directory Operations\n* `ls(path)` - List directory contents\n* `cd(path)` - Change working directory (supports home directory expansion with ~)\n* `read_file(path)` - Read file contents\n* `write_file(path, content)` - Write content to a file\n* `mkdir(path)` - Create directory\n* `rm(path)` - Remove file or empty directory\n* `rmdir(path)` - Remove directory and contents recursively  \n* `cp(src, dst)` - Copy file or directory\n* `mv(src, dst)` - Move file or directory\n\n### Editing and Searching\n* `edit_file(path, changes)` - Apply multiple search/replace operations to a\n  file, where changes is a list of (search_text, replace_text) tuples\n* `grep(pattern, path)` - Search for regex pattern in file(s)\n\n### Analysis\n* `summary(path)` - Generate summary of Python (.py) and Markdown (.md) files:\n  - Python: Lists functions and classes\n  - Markdown: Lists headers (lines starting with #)\n\n### Batch Operations\n* `read_files(paths)` - Read multiple files, returns dict mapping paths to contents\n* `summarize(paths)` - Generate summaries for multiple files, returns dict mapping paths to summaries\n\n### Project Navigation\n* `work_on(path)` - Change to directory, list its contents, and get the notes from CLAUDE.md.\n  Useful for getting familiar with a project at the start of a chat\n\n### Code Quality\n* `ruff_check(paths)` - Run ruff linter on specified files\n* `ruff_format(paths)` - Format files using ruff\n\n### Command Execution\n* `shell_command(command, args=None, cmdline=None, timeout=30)` - Run shell commands and capture their output\n  > **⚠️ Security Warning**: This tool allows arbitrary command execution on the host system. Always inspect and validate commands before allowing them to run, especially if the input source is untrusted.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "kvas",
        "files",
        "file",
        "file management",
        "kvas mcp",
        "management kvas"
      ],
      "category": "file-management"
    },
    "laosu888--tupianyasuo": {
      "owner": "laosu888",
      "name": "tupianyasuo",
      "url": "https://github.com/laosu888/tupianyasuo",
      "imageUrl": "/freedevtools/mcp/pfp/laosu888.webp",
      "description": "A front-end image compression tool supporting various formats like PNG and JPG, enabling users to customize compression ratios and preview results in real-time. The application allows users to download optimized images with comparisons of file sizes before and after compression.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2024-12-25T19:15:50Z",
      "readme_content": "# 图片压缩工具\n\n一个简单易用的在线图片压缩工具，具有精美的苹果风格界面设计。\n\n## 功能特点\n\n- 支持PNG、JPG等格式图片上传\n- 支持自定义压缩比例\n- 实时预览压缩前后的图片效果\n- 显示压缩前后文件大小对比\n- 支持压缩后图片下载\n- 纯前端实现，无需后端服务\n\n## 项目结构\n\n```\n├── index.html          # 主页面\n├── css/               \n│   └── style.css      # 样式文件\n├── js/\n│   └── main.js        # 主要功能实现\n└── assets/\n    └── icons/         # SVG图标\n```\n\n## 技术栈\n\n- HTML5\n- CSS3 (Flexbox & Grid)\n- Vanilla JavaScript\n- 浏览器原生图片压缩API ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "compression",
        "png",
        "jpg",
        "image compression",
        "compression tool",
        "file management"
      ],
      "category": "file-management"
    },
    "lishenxydlgzs--simple-files-vectorstore": {
      "owner": "lishenxydlgzs",
      "name": "simple-files-vectorstore",
      "url": "https://github.com/lishenxydlgzs/simple-files-vectorstore",
      "imageUrl": "/freedevtools/mcp/pfp/lishenxydlgzs.webp",
      "description": "Creates a vector store from local directories and files, enabling semantic search across document contents. Monitors specified directories for file changes and generates vector embeddings to facilitate search functionality.",
      "stars": 33,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-26T02:44:28Z",
      "readme_content": "# @lishenxydlgzs/simple-files-vectorstore\n\nA Model Context Protocol (MCP) server that provides semantic search capabilities across files. This server watches specified directories and creates vector embeddings of file contents, enabling semantic search across your documents.\n\n## Installation & Usage\nAdd to your MCP settings file:\n```json\n{\n  \"mcpServers\": {\n    \"files-vectorstore\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@lishenxydlgzs/simple-files-vectorstore\"\n      ],\n      \"env\": {\n        \"WATCH_DIRECTORIES\": \"/path/to/your/directories\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nMCP settings file locations:\n- VSCode Cline Extension: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n- Claude Desktop App: `~/Library/Application Support/Claude/claude_desktop_config.json`\n\n## Configuration\n\nThe server requires configuration through environment variables:\n\n### Required Environment Variables\n\nYou must specify directories to watch using ONE of the following methods:\n\n- `WATCH_DIRECTORIES`: Comma-separated list of directories to watch\n- `WATCH_CONFIG_FILE`: Path to a JSON configuration file with a `watchList` array\n\nExample using WATCH_DIRECTORIES:\n```json\n{\n  \"mcpServers\": {\n    \"files-vectorstore\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@lishenxydlgzs/simple-files-vectorstore\"\n      ],\n      \"env\": {\n        \"WATCH_DIRECTORIES\": \"/path/to/dir1,/path/to/dir2\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nExample using WATCH_CONFIG_FILE:\n```json\n{\n  \"mcpServers\": {\n    \"files-vectorstore\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@lishenxydlgzs/simple-files-vectorstore\"\n      ],\n      \"env\": {\n        \"WATCH_CONFIG_FILE\": \"/path/to/watch-config.json\"\n      },\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nThe watch config file should have the following structure:\n```json\n{\n  \"watchList\": [\n    \"/path/to/dir1\",\n    \"/path/to/dir2\",\n    \"/path/to/specific/file.txt\"\n  ]\n}\n```\n\n### Optional Environment Variables\n\n- `CHUNK_SIZE`: Size of text chunks for processing (default: 1000)\n- `CHUNK_OVERLAP`: Overlap between chunks (default: 200)\n- `IGNORE_FILE`: Path to a .gitignore style file to exclude files/directories based on patterns\n\nExample with all optional parameters:\n\n```json\n  {\n    \"mcpServers\": {\n      \"files-vectorstore\": {\n        \"command\": \"npx\",\n        \"args\": [\n          \"-y\",\n          \"@lishenxydlgzs/simple-files-vectorstore\"\n        ],\n        \"env\": {\n          \"WATCH_DIRECTORIES\": \"/path/to/dir1,/path/to/dir2\",\n          \"CHUNK_SIZE\": \"2000\",\n          \"CHUNK_OVERLAP\": \"500\",\n          \"IGNORE_FILE\": \"/path/to/.gitignore\"\n        },\n        \"disabled\": false,\n        \"autoApprove\": []\n      }\n    }\n  }\n  ```\n## MCP Tools\n\nThis server provides the following MCP tools:\n\n### 1. search\n\nPerform semantic search across indexed files.\n\nParameters:\n- `query` (required): The search query string\n- `limit` (optional): Maximum number of results to return (default: 5, max: 20)\n\nExample response:\n```json\n[\n  {\n    \"content\": \"matched text content\",\n    \"source\": \"/path/to/file\",\n    \"fileType\": \"markdown\",\n    \"score\": 0.85\n  }\n]\n```\n\n### 2. get_stats\n\nGet statistics about indexed files.\n\nParameters: None\n\nExample response:\n```json\n{\n  \"totalDocuments\": 42,\n  \"watchedDirectories\": [\"/path/to/docs\"],\n  \"processingFiles\": []\n}\n```\n\n## Features\n\n- Real-time file watching and indexing\n- Semantic search using vector embeddings\n- Support for multiple file types\n- Configurable chunk size and overlap\n- Background processing of files\n- Automatic handling of file changes and deletions\n\n## Repository\n\n[GitHub Repository](https://github.com/lishenxydlgzs/simple-files-vectorstore)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vectorstore",
        "files",
        "lishenxydlgzs",
        "files vectorstore",
        "vector store",
        "vectorstore creates"
      ],
      "category": "file-management"
    },
    "liuyazui--base64_server": {
      "owner": "liuyazui",
      "name": "base64_server",
      "url": "https://github.com/liuyazui/base64_server",
      "imageUrl": "/freedevtools/mcp/pfp/liuyazui.webp",
      "description": "Provides efficient Base64 encoding and decoding services for both text and images, including support for Data URL formats. Features a simple API for easy integration and reusable prompt templates to simplify Base64 transformations in applications.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-08-28T07:11:18Z",
      "readme_content": "# Base64编码解码MCP服务器\n\n[![smithery badge](https://smithery.ai/badge/@liuyazui/base64_server)](https://smithery.ai/server/@liuyazui/base64_server)\n[English Version](README_EN.md)\n\n一个简单高效的MCP服务器，专注于提供Base64编码和解码功能，支持文本和图片的Base64转换。\n\n<a href=\"https://glama.ai/mcp/servers/@liuyazui/base64_server\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@liuyazui/base64_server/badge\" alt=\"Base64 Server MCP server\" />\n</a>\n\n## 功能特点\n\n- 文本Base64编码和解码\n- 图片Base64编码和解码\n- 支持Data URL格式\n- 简单易用的API\n- 使用uv进行依赖管理\n\n## 安装\n\n### 使用uv安装\n\n```bash\n# 创建虚拟环境\nuv venv\n\n# 激活虚拟环境（Linux/macOS）\nsource .venv/bin/activate\n\n# 激活虚拟环境（Windows）\n.venv\\Scripts\\activate\n\n# 安装包（开发模式）\nuv pip install -e .\n\n# 安装带开发依赖的包\nuv pip install -e \".[dev]\"\n```\n\n### 安装Smithery\n\n使用Smithery为Claude桌面安装Base64编码解码MCP服务器，使用以下命令:\n\n```bash\nnpx -y @smithery/cli install @liuyazui/base64_server --client claude\n```\n\n## 使用方法\n\n### 使用MCP Inspector测试\n\n```bash\n# 使用MCP Inspector测试服务器\nuv run mcp dev base64_server.py\n```\n\n### 与MCP client集成\n\n1. 添加服务器配置：\n\n   ```json\n   {\n     \"mcpServers\": {\n        \"base64-encoder\": {\n        \"command\": \"uv\",\n        \"args\": [\n          \"run\",\n          \"--with\",\n          \"mcp[cli]\",\n          \"mcp\",\n          \"run\",\n          \"[path to base64_server.py]\"\n        ]\n      }\n     }\n   }\n   ```\n\n## API参考\n\n### 工具(Tools)\n\n- **base64_encode_text(text: str) -> str**：将文本转换为Base64编码\n- **base64_decode_text(encoded: str) -> str**：将Base64编码解码为文本\n- **base64_encode_image(image_path: str) -> str**：将图片转换为Base64编码\n- **base64_decode_image(encoded: str, output_path: str, mime_type: str = \"image/png\") -> str**：将Base64编码解码为图片\n\n### 资源(Resources)\n\n- **encode://base64/text/{text}**：获取文本的Base64编码\n- **decode://base64/text/{encoded}**：获取Base64编码的解码结果\n- **encode://base64/image/{image_path}**：获取图片的Base64编码\n- **decode://base64/image/{encoded}**：获取Base64编码的解码图片\n\n### 提示模板(Prompts)\n\n- **base64_usage_guide()**: 提供Base64服务的基本使用指南\n- **encode_text_prompt(text: str)**: 文本编码提示模板\n- **encode_image_prompt(image_path: str)**: 图片编码提示模板\n- **error_handling_prompt(error_message: str)**: 错误处理提示模板\n\n使用示例:\n\n```python\n# 获取使用指南提示\nmessages = await client.get_prompt(\"base64_usage_guide\")\n\n# 获取文本编码提示\nmessages = await client.get_prompt(\"encode_text_prompt\", {\"text\": \"Hello World\"})\n```\n\n## 开发\n\n## 许可证\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "base64",
        "base64_server",
        "encoding",
        "liuyazui base64_server",
        "base64 encoding",
        "base64_server provides"
      ],
      "category": "file-management"
    },
    "lpsDevelopers--LPS-MCP": {
      "owner": "lpsDevelopers",
      "name": "LPS-MCP",
      "url": "https://github.com/lpsDevelopers/LPS-MCP",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Proporciona acceso seguro al sistema de archivos y capacidades de pensamiento secuencial para mejorar la interacción de Claude con su entorno. Permite desglosar problemas complejos en pasos estructurados y acceder a archivos de manera controlada.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "lps",
        "lpsdevelopers",
        "management",
        "management lpsdevelopers",
        "file management",
        "lpsdevelopers lps"
      ],
      "category": "file-management"
    },
    "lroolle--openai-agents-mcp-server": {
      "owner": "lroolle",
      "name": "openai-agents-mcp-server",
      "url": "https://github.com/lroolle/openai-agents-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/lroolle.webp",
      "description": "Connects OpenAI agents to various tools and data sources, enabling specialized tasks such as web searching, file analysis, and computer actions. Supports coordination through a multi-agent orchestrator to enhance AI functionalities.",
      "stars": 9,
      "forks": 2,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-07-27T09:22:42Z",
      "readme_content": "# OpenAI Agents MCP Server\n[![smithery badge](https://smithery.ai/badge/@lroolle/openai-agents-mcp-server)](https://smithery.ai/server/@lroolle/openai-agents-mcp-server)\n\nA Model Context Protocol (MCP) server that exposes OpenAI agents through the MCP protocol.\n\n## Features\n\nThis server exposes both individual agents and a multi-agent orchestrator using the OpenAI Agents SDK:\n\n### Individual Specialized Agents\n\n- **Web Search Agent**: A specialized agent for searching the web for real-time information\n- **File Search Agent**: A specialized agent for searching and analyzing files in OpenAI's vector store\n- **Computer Action Agent**: A specialized agent for performing actions on your computer safely\n\n### Multi-Agent Orchestrator\n\n- **Orchestrator Agent**: A powerful agent that can coordinate between the specialized agents, choosing the right one(s) for each task\n\nEach agent is accessed through the MCP protocol, making them available to any MCP client, including the Claude desktop app.\n\n## Installation\n\n### Prerequisites\n\n- Python 3.11 or higher\n- [uv](https://github.com/astral-sh/uv) package manager (recommended)\n- OpenAI API key\n\n\n### Installing via Smithery\n\nTo install openai-agents-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@lroolle/openai-agents-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @lroolle/openai-agents-mcp-server --client claude\n```\n\n### Claude Desktop\n\n```\n\"mcpServers\": {\n  \"openai-agents-mcp-server\": {\n    \"command\": \"uvx\",\n    \"args\": [\"openai-agents-mcp-server\"],\n    \"env\": {\n        \"OPENAI_API_KEY\": \"your-api-key-here\"\n    }\n  }\n}\n\n```\n\n\n## Implementation Details\n\n### Tool Requirements\n\n- **WebSearchTool**: No required parameters, but can accept optional location context\n- **FileSearchTool**: Requires vector_store_ids (IDs from your OpenAI vector stores)\n- **ComputerTool**: Requires an AsyncComputer implementation (currently simulated)\n\n### Customization\n\nYou can customize this server by:\n\n1. Implementing a full AsyncComputer interface to enable real computer interactions\n2. Adding additional specialized agents for other OpenAI tools\n3. Enhancing the orchestrator agent to handle more complex workflows\n\n## Configuration\n\nYou can configure the server using environment variables:\n\n- `OPENAI_API_KEY`: Your OpenAI API key (required)\n- `MCP_TRANSPORT`: Transport protocol to use (default: \"stdio\", can be \"sse\")\n\n## Development\n\n### Setup development environment\n\n```bash\n# Clone the repository\ngit clone https://github.com/lroolle/openai-agents-mcp-server.git\ncd openai-agents-mcp-server\n\n# Create a virtual environment\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Install dependencies\nuv sync --dev\n```\n\n### Testing with MCP Inspector\n\nYou can test the server using the MCP Inspector:\n\n```bash\n# In one terminal, run the server with SSE transport\nexport OPENAI_API_KEY=your-api-key\nexport MCP_TRANSPORT=sse\n\nuv run mcp dev src/agents_mcp_server/server.py\n```\n\nThen open a web browser and navigate to http://localhost:5173.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "openai",
        "agents",
        "agent",
        "openai agents",
        "connects openai",
        "agents mcp"
      ],
      "category": "file-management"
    },
    "m-ahmed-elbeskeri--UltimateCoderMCP": {
      "owner": "m-ahmed-elbeskeri",
      "name": "UltimateCoderMCP",
      "url": "https://github.com/m-ahmed-elbeskeri/UltimateCoderMCP",
      "imageUrl": "/freedevtools/mcp/pfp/m-ahmed-elbeskeri.webp",
      "description": "Automate terminal commands, edit files locally, and integrate AI tools for efficient development workflows without cloud latency.",
      "stars": 13,
      "forks": 6,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-03T00:03:33Z",
      "readme_content": "# UltimateCoder MCP\n\nLocal-first automation server for developers and engineers — automate terminal commands, edit files, and power up your AI tools.\n\n<p align=\"left\">\n  <a href=\"https://buymeacoffee.com/m.ahmed.elbesk?new=1\"><img src=\"https://img.shields.io/badge/Buy%20Me%20a%20Coffee-support-yellow?style=flat-square\" alt=\"Buy Me a Coffee\"></a>\n  <a href=\"https://smithery.ai/server/@m-ahmed-elbeskeri/ultimatecodermcp\"><img src=\"https://img.shields.io/badge/Smithery-Deployed-blue?style=flat-square\" alt=\"Smithery\"></a>\n  <a href=\"https://github.com/m-ahmed-elbeskeri/UltimateCoderMCP/releases\"><img src=\"https://img.shields.io/github/downloads/m-ahmed-elbeskeri/UltimateCoderMCP/total?style=flat-square\" alt=\"Downloads\"></a>\n  <a href=\"https://github.com/m-ahmed-elbeskeri/UltimateCoderMCP/stargazers\"><img src=\"https://img.shields.io/github/stars/m-ahmed-elbeskeri/UltimateCoderMCP?style=flat-square\" alt=\"Stars\"></a>\n</p>\n\nSmithery link: [https://smithery.ai/server/@m-ahmed-elbeskeri/ultimatecodermcp](https://smithery.ai/server/@m-ahmed-elbeskeri/ultimatecodermcp)\n\nUltimateCoder turns your local machine into a surgical code command center.  \nBuilt on  [fastmcp](https://github.com/jlowin/fastmcp), UltimateCoder delivers total control over your filesystem, processes, and codebase — with AI-enhanced precision.\n\nRun terminal commands, edit thousands of files at once, apply unified diffs safely, or let your AI assistant intelligently refactor your project.  \nAll locally, instantly, and securely.\n\nNo cloud latency. No data leaving your machine. No compromises.\n\nBuilt for builders. Loved by automation architects. Trusted by power users.\n\n\n## What Makes UltimateCoder Different\n\n- MCP-native, fully local server — AI assistants (like Claude) gain real-time read/write power over your projects.\n- Fast, Safe File Editing — Single lines, blocks, or entire files. Precise changes, full control.\n- Advanced Patch & Diff Engine — Unified diffs apply with strict context matching, so you never apply mistakes blindly.\n- Process Control — List, monitor, and kill running processes programmatically.\n- Supercharged Search — Ripgrep-backed recursive search with smart fallbacks.\n- Multi-file Operations — Process thousands of files across your codebase. Batch edits, mass linting, intelligent replacements.\n- Ready for Automation — Ideal for scripting, automation, and human-in-the-loop AI workflows.\n- Built on [fastmcp](https://github.com/jlowin/fastmcp) — Lightning-fast, extensible MCP core.\n\n\n## What Can It Do\n\n| Feature | Benefit | Typical Use Case |\n|---------|----------|-----------------|\n| Terminal Execution | Run any local shell command with full output capture | Automate build scripts, deploy, run tests, manage local tools |\n| Process Management | List and kill processes by PID | Manage runaway processes, automate cleanup |\n| File Operations | Read, write, move, and delete files & directories | Automate file handling tasks, backups, or migrations |\n| File Metadata Retrieval | Get size, timestamps, permissions | Auditing, automation pipelines |\n| Precise Line/Block Replacement | Make targeted file edits (supports regex) | Fix configuration files, update code snippets programmatically |\n| Unified Diff Patching | Safely apply diffs with strict context matching | Automated refactoring, safe code migrations |\n| Mass Code Search | Ripgrep-powered search across files | Explore codebases, find usages, audit security-sensitive patterns |\n| JSON and Python Linting | Instant feedback for common formats | Validate configs, ensure code hygiene |\n| Static Python Analysis | Deeper pylint insights | Spot bugs before they happen |\n| Read Python with Line Numbers | Contextual code review or AI-assisted editing | AI understands context better, human reviews are faster |\n| Batch File Processing | Work on thousands of files at once | Large-scale refactoring or analysis |\n| AI-Enhanced Workflows | Fully compatible with Claude Desktop and MCP clients | Let your AI assistant become a local dev co-pilot |\n\n\n## Example Use Cases\n\n- Refactor 10,000+ files safely using unified diff patches with context validation.\n- Audit your entire project for deprecated functions in seconds.\n- Automate cleanup: list, analyze, and kill idle processes from batch scripts.\n- Enhance your AI workflows: give Claude or custom MCP clients real filesystem and terminal power.\n- Work on sensitive codebases: UltimateCoder runs 100% locally, no data leaves your machine.\n- Automate migrations: JSON schemas, Python packages, configs — all editable programmatically.\n- Lint and validate at scale: automate linting pipelines before commits or deployments.\n\n\n## Installation\n\n### Requirements\n\n- Python 3.8+\n- Core dependency: [fastmcp](https://github.com/jlowin/fastmcp)\n\n### Steps\n\n```bash\ngit clone https://github.com/m-ahmed-elbeskeri/UltimateCoderMCP.git\ncd UltimateCoder\npython main.py\n```\n\nYou now have a fully operational MCP server running locally.\n\n\n## Tool Reference\n\n| Tool | Summary |\n|------|----------|\n| `tool_run_command` | Execute local shell commands |\n| `tool_list_processes` | List system processes |\n| `tool_kill_process` | Kill a process by PID |\n| `tool_read_file` | Read file content (text or image) |\n| `tool_write_file` | Write/overwrite file content |\n| `tool_create_directory` | Make directories recursively |\n| `tool_list_files` | List files and folders (with recursion option) |\n| `tool_move_file` | Move or rename files/folders |\n| `tool_get_file_info` | Fetch metadata about a file |\n| `tool_replace_line` | Replace a specific line in a file |\n| `tool_replace_block` | Replace a text block (with optional regex) |\n| `tool_apply_patch` | Apply unified diff patches safely |\n| `tool_search_code` | Ripgrep-based recursive code search |\n| `tool_lint_json` | Validate JSON files |\n| `tool_lint_python` | Run flake8 linter on Python files |\n| `tool_static_analysis_python` | Static analysis with pylint |\n| `tool_read_multiple_files` | Batch-read multiple files |\n| `tool_process_files` | Async batch file processing |\n| `tool_search_files` | Pattern-based filename search |\n| `tool_search_replace` | Search and replace text in a file |\n| `tool_line_python_file` | Read Python file with line numbers for better context |\n\n\n## Roadmap\n\n- Multi-language linting (JS, TS, CSS, Shell scripts)\n- Advanced multi-file diffing and patching\n- Smithery\n- CLI companion tool\n- Claude Desktop templates\n- Performance enhancements for enterprise-scale repositories\n\n\n## Contribute\n\nWe’re building UltimateCoder to be a developer-first, automation-friendly powerhouse.\n\n- Star the repo to support development\n- Open issues for bugs or ideas\n- Submit PRs to improve functionality\n- Share feedback and ideas in Discussions\n\nEvery contribution matters.\n\n\n## License\n\nMIT License.  \nUse it, build on it, and make it your own.\n\n\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ultimatecodermcp",
        "automate",
        "workflows",
        "ultimatecodermcp automate",
        "workflows cloud",
        "file management"
      ],
      "category": "file-management"
    },
    "mamertofabian--mcp-everything-search": {
      "owner": "mamertofabian",
      "name": "mcp-everything-search",
      "url": "https://github.com/mamertofabian/mcp-everything-search",
      "imageUrl": "/freedevtools/mcp/pfp/mamertofabian.webp",
      "description": "Provides fast file searching capabilities across multiple operating systems, utilizing platform-specific tools for efficient file and folder retrieval. Supports advanced search syntax on Windows, basic filename and content search on macOS, and filename search on Linux.",
      "stars": 248,
      "forks": 30,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T18:27:23Z",
      "readme_content": "# Everything Search MCP Server\n\n[![smithery badge](https://smithery.ai/badge/mcp-server-everything-search)](https://smithery.ai/server/mcp-server-everything-search)\n\nAn MCP server that provides fast file searching capabilities across Windows, macOS, and Linux. On Windows, it uses the [Everything](https://www.voidtools.com/) SDK. On macOS, it uses the built-in `mdfind` command. On Linux, it uses the `locate`/`plocate` command.\n\n## Tools\n\n### search\n\nSearch for files and folders across your system. The search capabilities and syntax support vary by platform:\n\n- Windows: Full Everything SDK features (see syntax guide below)\n- macOS: Basic filename and content search using Spotlight database\n- Linux: Basic filename search using locate database\n\nParameters:\n\n- `query` (required): Search query string. See platform-specific notes below.\n- `max_results` (optional): Maximum number of results to return (default: 100, max: 1000)\n- `match_path` (optional): Match against full path instead of filename only (default: false)\n- `match_case` (optional): Enable case-sensitive search (default: false)\n- `match_whole_word` (optional): Match whole words only (default: false)\n- `match_regex` (optional): Enable regex search (default: false)\n- `sort_by` (optional): Sort order for results (default: 1). Available options:\n\n```\n  - 1: Sort by filename (A to Z)\n  - 2: Sort by filename (Z to A)\n  - 3: Sort by path (A to Z)\n  - 4: Sort by path (Z to A)\n  - 5: Sort by size (smallest first)\n  - 6: Sort by size (largest first)\n  - 7: Sort by extension (A to Z)\n  - 8: Sort by extension (Z to A)\n  - 11: Sort by creation date (oldest first)\n  - 12: Sort by creation date (newest first)\n  - 13: Sort by modification date (oldest first)\n  - 14: Sort by modification date (newest first)\n```\n\nExamples:\n\n```json\n{\n  \"query\": \"*.py\",\n  \"max_results\": 50,\n  \"sort_by\": 6\n}\n```\n\n```json\n{\n  \"query\": \"ext:py datemodified:today\",\n  \"max_results\": 10\n}\n```\n\nResponse includes:\n\n- File/folder path\n- File size in bytes\n- Last modified date\n\n### Search Syntax Guide\n\nFor detailed information about the search syntax supported on each platform (Windows, macOS, and Linux), please see [SEARCH_SYNTAX.md](SEARCH_SYNTAX.md).\n\n## Prerequisites\n\n### Windows\n\n1. [Everything](https://www.voidtools.com/) search utility:\n   - Download and install from https://www.voidtools.com/\n   - **Make sure the Everything service is running**\n2. Everything SDK:\n   - Download from https://www.voidtools.com/support/everything/sdk/\n   - Extract the SDK files to a location on your system\n\n### Linux\n\n1. Install and initialize the `locate` or `plocate` command:\n   - Ubuntu/Debian: `sudo apt-get install plocate` or `sudo apt-get install mlocate`\n   - Fedora: `sudo dnf install mlocate`\n2. After installation, update the database:\n   - For plocate: `sudo updatedb`\n   - For mlocate: `sudo /etc/cron.daily/mlocate`\n\n### macOS\n\nNo additional setup required. The server uses the built-in `mdfind` command.\n\n## Installation\n\n### Installing via Smithery\n\nTo install Everything Search for Claude Desktop automatically via [Smithery](https://smithery.ai/server/mcp-server-everything-search):\n\n```bash\nnpx -y @smithery/cli install mcp-server-everything-search --client claude\n```\n\n### Using uv (recommended)\n\nWhen using [`uv`](https://docs.astral.sh/uv/) no specific installation is needed. We will\nuse [`uvx`](https://docs.astral.sh/uv/guides/tools/) to directly run _mcp-server-everything-search_.\n\n### Using PIP\n\nAlternatively you can install `mcp-server-everything-search` via pip:\n\n```\npip install mcp-server-everything-search\n```\n\nAfter installation, you can run it as a script using:\n\n```\npython -m mcp_server_everything_search\n```\n\n## Configuration\n\n### Windows\n\nThe server requires the Everything SDK DLL to be available:\n\nEnvironment variable:\n\n```\nEVERYTHING_SDK_PATH=path\\to\\Everything-SDK\\dll\\Everything64.dll\n```\n\n### Linux and macOS\n\nNo additional configuration required.\n\n### Usage with Claude Desktop\n\nAdd one of these configurations to your `claude_desktop_config.json` based on your platform:\n\n<details>\n<summary>Windows (using uvx)</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-everything-search\"],\n    \"env\": {\n      \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>Windows (using pip installation)</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_everything_search\"],\n    \"env\": {\n      \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n    }\n  }\n}\n```\n\n</details>\n\n<details>\n<summary>Linux and macOS</summary>\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"uvx\",\n    \"args\": [\"mcp-server-everything-search\"]\n  }\n}\n```\n\nOr if using pip installation:\n\n```json\n\"mcpServers\": {\n  \"everything-search\": {\n    \"command\": \"python\",\n    \"args\": [\"-m\", \"mcp_server_everything_search\"]\n  }\n}\n```\n\n</details>\n\n## Debugging\n\nYou can use the MCP inspector to debug the server. For uvx installations:\n\n```\nnpx @modelcontextprotocol/inspector uvx mcp-server-everything-search\n```\n\nOr if you've installed the package in a specific directory or are developing on it:\n\n```\ngit clone https://github.com/mamertofabian/mcp-everything-search.git\ncd mcp-everything-search/src/mcp_server_everything_search\nnpx @modelcontextprotocol/inspector uv run mcp-server-everything-search\n```\n\nTo view server logs:\n\nLinux/macOS:\n\n```bash\ntail -f ~/.config/Claude/logs/mcp*.log\n```\n\nWindows (PowerShell):\n\n```powershell\nGet-Content -Path \"$env:APPDATA\\Claude\\logs\\mcp*.log\" -Tail 20 -Wait\n```\n\n## Development\n\nIf you are doing local development, there are two ways to test your changes:\n\n1. Run the MCP inspector to test your changes. See [Debugging](#debugging) for run instructions.\n\n2. Test using the Claude desktop app. Add the following to your `claude_desktop_config.json`:\n\n```json\n\"everything-search\": {\n  \"command\": \"uv\",\n  \"args\": [\n    \"--directory\",\n    \"/path/to/mcp-everything-search/src/mcp_server_everything_search\",\n    \"run\",\n    \"mcp-server-everything-search\"\n  ],\n  \"env\": {\n    \"EVERYTHING_SDK_PATH\": \"path/to/Everything-SDK/dll/Everything64.dll\"\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n\n## Disclaimer\n\nThis project is not affiliated with, endorsed by, or sponsored by voidtools (the creators of Everything search utility). This is an independent project that utilizes the publicly available Everything SDK.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mamertofabian",
        "searching",
        "search",
        "file searching",
        "filename search",
        "search macos"
      ],
      "category": "file-management"
    },
    "mark3labs--mcp-filesystem-server": {
      "owner": "mark3labs",
      "name": "mcp-filesystem-server",
      "url": "https://github.com/mark3labs/mcp-filesystem-server",
      "imageUrl": "/freedevtools/mcp/pfp/mark3labs.webp",
      "description": "Provides secure access to the local filesystem for reading, writing, and managing files and directories using the Model Context Protocol (MCP). Supports operations like reading from single or multiple files, writing content to files, and copying files or directories.",
      "stars": 524,
      "forks": 78,
      "license": "MIT License",
      "language": "Go",
      "updated_at": "2025-10-04T06:12:16Z",
      "readme_content": "# MCP Filesystem Server\n\nThis MCP server provides secure access to the local filesystem via the Model Context Protocol (MCP).\n\n## Components\n\n### Resources\n\n- **file://**\n  - Name: File System\n  - Description: Access to files and directories on the local file system\n\n### Tools\n\n#### File Operations\n\n- **read_file**\n  - Read the complete contents of a file from the file system\n  - Parameters: `path` (required): Path to the file to read\n\n- **read_multiple_files**\n  - Read the contents of multiple files in a single operation\n  - Parameters: `paths` (required): List of file paths to read\n\n- **write_file**\n  - Create a new file or overwrite an existing file with new content\n  - Parameters: `path` (required): Path where to write the file, `content` (required): Content to write to the file\n\n- **copy_file**\n  - Copy files and directories\n  - Parameters: `source` (required): Source path of the file or directory, `destination` (required): Destination path\n\n- **move_file**\n  - Move or rename files and directories\n  - Parameters: `source` (required): Source path of the file or directory, `destination` (required): Destination path\n\n- **delete_file**\n  - Delete a file or directory from the file system\n  - Parameters: `path` (required): Path to the file or directory to delete, `recursive` (optional): Whether to recursively delete directories (default: false)\n\n- **modify_file**\n  - Update file by finding and replacing text using string matching or regex\n  - Parameters: `path` (required): Path to the file to modify, `find` (required): Text to search for, `replace` (required): Text to replace with, `all_occurrences` (optional): Replace all occurrences (default: true), `regex` (optional): Treat find pattern as regex (default: false)\n\n#### Directory Operations\n\n- **list_directory**\n  - Get a detailed listing of all files and directories in a specified path\n  - Parameters: `path` (required): Path of the directory to list\n\n- **create_directory**\n  - Create a new directory or ensure a directory exists\n  - Parameters: `path` (required): Path of the directory to create\n\n- **tree**\n  - Returns a hierarchical JSON representation of a directory structure\n  - Parameters: `path` (required): Path of the directory to traverse, `depth` (optional): Maximum depth to traverse (default: 3), `follow_symlinks` (optional): Whether to follow symbolic links (default: false)\n\n#### Search and Information\n\n- **search_files**\n  - Recursively search for files and directories matching a pattern\n  - Parameters: `path` (required): Starting path for the search, `pattern` (required): Search pattern to match against file names\n\n- **search_within_files**\n  - Search for text within file contents across directory trees\n  - Parameters: `path` (required): Starting directory for the search, `substring` (required): Text to search for within file contents, `depth` (optional): Maximum directory depth to search, `max_results` (optional): Maximum number of results to return (default: 1000)\n\n- **get_file_info**\n  - Retrieve detailed metadata about a file or directory\n  - Parameters: `path` (required): Path to the file or directory\n\n- **list_allowed_directories**\n  - Returns the list of directories that this server is allowed to access\n  - Parameters: None\n\n## Features\n\n- Secure access to specified directories\n- Path validation to prevent directory traversal attacks\n- Symlink resolution with security checks\n- MIME type detection\n- Support for text, binary, and image files\n- Size limits for inline content and base64 encoding\n\n## Getting Started\n\n### Installation\n\n#### Using Go Install\n\n```bash\ngo install github.com/mark3labs/mcp-filesystem-server@latest\n```\n\n### Usage\n\n#### As a standalone server\n\nStart the MCP server with allowed directories:\n\n```bash\nmcp-filesystem-server /path/to/allowed/directory [/another/allowed/directory ...]\n```\n\n#### As a library in your Go project\n\n```go\npackage main\n\nimport (\n\t\"log\"\n\t\"os\"\n\n\t\"github.com/mark3labs/mcp-filesystem-server/filesystemserver\"\n)\n\nfunc main() {\n\t// Create a new filesystem server with allowed directories\n\tallowedDirs := []string{\"/path/to/allowed/directory\", \"/another/allowed/directory\"}\n\tfs, err := filesystemserver.NewFilesystemServer(allowedDirs)\n\tif err != nil {\n\t\tlog.Fatalf(\"Failed to create server: %v\", err)\n\t}\n\n\t// Serve requests\n\tif err := fs.Serve(); err != nil {\n\t\tlog.Fatalf(\"Server error: %v\", err)\n\t}\n}\n```\n\n### Usage with Model Context Protocol\n\nTo integrate this server with apps that support MCP:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem-server\",\n      \"args\": [\"/path/to/allowed/directory\", \"/another/allowed/directory\"]\n    }\n  }\n}\n```\n\n### Docker\n\n#### Running with Docker\n\nYou can run the Filesystem MCP server using Docker:\n\n```bash\ndocker run -i --rm ghcr.io/mark3labs/mcp-filesystem-server:latest /path/to/allowed/directory\n```\n\n#### Docker Configuration with MCP\n\nTo integrate the Docker image with apps that support MCP:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"ghcr.io/mark3labs/mcp-filesystem-server:latest\",\n        \"/path/to/allowed/directory\"\n      ]\n    }\n  }\n}\n```\n\nIf you need changes made inside the container to reflect on the host filesystem, you can mount a volume. This allows the container to access and modify files on the host system. Here's an example:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"--volume=/allowed/directory/in/host:/allowed/directory/in/container\",\n        \"ghcr.io/mark3labs/mcp-filesystem-server:latest\",\n        \"/allowed/directory/in/container\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nSee the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "filesystem",
        "files",
        "mcp filesystem",
        "mark3labs mcp",
        "mcp supports"
      ],
      "category": "file-management"
    },
    "mattlemmone--file-mcp": {
      "owner": "mattlemmone",
      "name": "file-mcp",
      "url": "https://github.com/mattlemmone/file-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/mattlemmone.webp",
      "description": "Manage and monitor Expo development servers, enabling operations like starting, stopping, and querying server status while accessing logs and performing file operations. Streamlines the React Native development workflow and supports automation and AI-driven integrations with extendable tools.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-06-30T19:47:19Z",
      "readme_content": "# File MCP\n\nA Model Context Protocol (MCP) server that provides file system operations through a standardized API.\nMainly just doing this so I can prototype and integrate error logs into mcp clients.\n\n## Usage\n\n### CLI\n\n```bash\nnpm run build\nnpm start\n```\n\n### Development\n\n```bash\nnpm run dev\n```\n\n### Testing\n\n```bash\nnpm run inspect\n```\n\n### Available Tools\n\n| Tool Name   | Description                             |\n| ----------- | --------------------------------------- |\n| `readFile`  | Read contents of a file                 |\n| `writeFile` | Write content to a file                 |\n| `listFiles` | List files in a directory               |\n| `tailFile`  | Read the last N lines from a file       |\n| `listTools` | List all tools registered in the server |\n\n## Installation\n\n```bash\nnpm install\n```\n\n## Build\n\n```bash\nnpm run build\n```\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "expo",
        "react",
        "development",
        "expo development",
        "react native",
        "file management"
      ],
      "category": "file-management"
    },
    "modelcontextprotocol--servers": {
      "owner": "modelcontextprotocol",
      "name": "servers",
      "url": "https://github.com/modelcontextprotocol/servers",
      "imageUrl": "/freedevtools/mcp/pfp/modelcontextprotocol.webp",
      "description": "Node.js implementation of the Model Context Protocol (MCP) for performing various filesystem operations, including file reading and writing, directory management, and file metadata retrieval.",
      "stars": 69473,
      "forks": 8234,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T09:56:52Z",
      "readme_content": "# Model Context Protocol servers\n\nThis repository is a collection of *reference implementations* for the [Model Context Protocol](https://modelcontextprotocol.io/) (MCP), as well as references to community-built servers and additional resources.\n\nThe servers in this repository showcase the versatility and extensibility of MCP, demonstrating how it can be used to give Large Language Models (LLMs) secure, controlled access to tools and data sources.\nTypically, each MCP server is implemented with an MCP SDK:\n\n- [C# MCP SDK](https://github.com/modelcontextprotocol/csharp-sdk)\n- [Go MCP SDK](https://github.com/modelcontextprotocol/go-sdk)\n- [Java MCP SDK](https://github.com/modelcontextprotocol/java-sdk)\n- [Kotlin MCP SDK](https://github.com/modelcontextprotocol/kotlin-sdk)\n- [PHP MCP SDK](https://github.com/modelcontextprotocol/php-sdk)\n- [Python MCP SDK](https://github.com/modelcontextprotocol/python-sdk)\n- [Ruby MCP SDK](https://github.com/modelcontextprotocol/ruby-sdk)\n- [Rust MCP SDK](https://github.com/modelcontextprotocol/rust-sdk)\n- [Swift MCP SDK](https://github.com/modelcontextprotocol/swift-sdk)\n- [TypeScript MCP SDK](https://github.com/modelcontextprotocol/typescript-sdk)\n\n> [!NOTE]\n> Lists in this README are maintained in alphabetical order to minimize merge conflicts when adding new items.\n\n## 🌟 Reference Servers\n\nThese servers aim to demonstrate MCP features and the official SDKs.\n\n- **[Everything](src/everything)** - Reference / test server with prompts, resources, and tools.\n- **[Fetch](src/fetch)** - Web content fetching and conversion for efficient LLM usage.\n- **[Filesystem](src/filesystem)** - Secure file operations with configurable access controls.\n- **[Git](src/git)** - Tools to read, search, and manipulate Git repositories.\n- **[Memory](src/memory)** - Knowledge graph-based persistent memory system.\n- **[Sequential Thinking](src/sequentialthinking)** - Dynamic and reflective problem-solving through thought sequences.\n- **[Time](src/time)** - Time and timezone conversion capabilities.\n\n### Archived\n\nThe following reference servers are now archived and can be found at [servers-archived](https://github.com/modelcontextprotocol/servers-archived).\n\n- **[AWS KB Retrieval](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/aws-kb-retrieval-server)** - Retrieval from AWS Knowledge Base using Bedrock Agent Runtime.\n- **[Brave Search](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/brave-search)** - Web and local search using Brave's Search API.  Has been replaced by the [official server](https://github.com/brave/brave-search-mcp-server).\n- **[EverArt](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/everart)** - AI image generation using various models.\n- **[GitHub](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/github)** - Repository management, file operations, and GitHub API integration.\n- **[GitLab](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gitlab)** - GitLab API, enabling project management.\n- **[Google Drive](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/gdrive)** - File access and search capabilities for Google Drive.\n- **[Google Maps](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/google-maps)** - Location services, directions, and place details.\n- **[PostgreSQL](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/postgres)** - Read-only database access with schema inspection.\n- **[Puppeteer](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/puppeteer)** - Browser automation and web scraping.\n- **[Redis](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/redis)** - Interact with Redis key-value stores.\n- **[Sentry](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sentry)** - Retrieving and analyzing issues from Sentry.io.\n- **[Slack](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)** - Channel management and messaging capabilities. Now maintained by [Zencoder](https://github.com/zencoderai/slack-mcp-server)\n- **[SQLite](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/sqlite)** - Database interaction and business intelligence capabilities.\n\n## 🤝 Third-Party Servers\n\n### 🎖️ Official Integrations\n\nOfficial integrations are maintained by companies building production ready MCP servers for their platforms.\n\n- <img height=\"12\" width=\"12\" src=\"https://www.21st.dev/favicon.ico\" alt=\"21st.dev Logo\" /> **[21st.dev Magic](https://github.com/21st-dev/magic-mcp)** - Create crafted UI components inspired by the best 21st.dev design engineers.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/LpSK1tSZweomrAHOMAj9Gea96lA.svg\" alt=\"Paragon Logo\" /> **[ActionKit by Paragon](https://github.com/useparagon/paragon-mcp)** - Connect to 130+ SaaS integrations (e.g. Slack, Salesforce, Gmail) with Paragon’s [ActionKit](https://www.useparagon.com/actionkit) API.\n- <img height=\"12\" width=\"12\" src=\"https://invoxx-public-bucket.s3.eu-central-1.amazonaws.com/frontend-resources/adfin-logo-small.svg\" alt=\"Adfin Logo\" /> **[Adfin](https://github.com/Adfin-Engineering/mcp-server-adfin)** - The only platform you need to get paid - all payments in one place, invoicing and accounting reconciliations with [Adfin](https://www.adfin.com/).\n- <img height=\"12\" width=\"12\" src=\"https://github.com/AgentOps-AI/agentops/blob/main/docs/favicon.png\" alt=\"AgentOps Logo\" /> **[AgentOps](https://github.com/AgentOps-AI/agentops-mcp)** - Provide observability and tracing for debugging AI agents with [AgentOps](https://www.agentops.ai/) API.\n- <img height=\"12\" width=\"12\" src=\"https://www.agentql.com/favicon/favicon.png\" alt=\"AgentQL Logo\" /> **[AgentQL](https://github.com/tinyfish-io/agentql-mcp)** - Enable AI agents to get structured data from unstructured web with [AgentQL](https://www.agentql.com/).\n- <img height=\"12\" width=\"12\" src=\"https://agentrpc.com/favicon.ico\" alt=\"AgentRPC Logo\" /> **[AgentRPC](https://github.com/agentrpc/agentrpc)** - Connect to any function, any language, across network boundaries using [AgentRPC](https://www.agentrpc.com/).\n- **[Agentset](https://github.com/agentset-ai/mcp-server)** - RAG for your knowledge base connected to [Agentset](https://agentset.ai).\n- <img height=\"12\" width=\"12\" src=\"https://aiven.io/favicon.ico\" alt=\"Aiven Logo\" /> **[Aiven](https://github.com/Aiven-Open/mcp-aiven)** - Navigate your [Aiven projects](https://go.aiven.io/mcp-server) and interact with the PostgreSQL®, Apache Kafka®, ClickHouse® and OpenSearch® services\n- <img height=\"12\" width=\"12\" src=\"https://www.alation.com/resource-center/download/7p3vnbbznfiw/34FMtBTex5ppvs2hNYa9Fc/c877c37e88e5339878658697c46d2d58/Alation-Logo-Bug-Primary.svg\" alt=\"Alation Logo\" /> **[Alation](https://github.com/Alation/alation-ai-agent-sdk)** - Unlock the power of the enterprise Data Catalog by harnessing tools provided by the Alation MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://i.postimg.cc/5NYw9qjS/alby-icon-head-yellow-500x500.png\" alt=\"Alby Logo\" /> **[Alby Bitcoin Payments](https://github.com/getAlby/mcp)** - Connect any bitcoin lightning wallet to your agent to send and receive instant payments globally with your agent.\n- **[Algolia](https://github.com/algolia/mcp)** - Use AI agents to provision, configure, and query your [Algolia](https://algolia.com) search indices.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i4/O1CN01epkXwH1WLAXkZfV6N_!!6000000002771-2-tps-200-200.png\" alt=\"Alibaba Cloud AnalyticDB for MySQL Logo\" /> **[Alibaba Cloud AnalyticDB for MySQL](https://github.com/aliyun/alibabacloud-adb-mysql-mcp-server)** - Connect to an [AnalyticDB for MySQL](https://www.alibabacloud.com/en/product/analyticdb-for-mysql) cluster for getting database or table metadata, querying and analyzing data. It will be supported to add the OpenAPI for cluster operation in the future.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibabacloud-adbpg-mcp-server/blob/master/images/AnalyticDB.png\" alt=\"Alibaba Cloud AnalyticDB for PostgreSQL Logo\" /> **[Alibaba Cloud AnalyticDB for PostgreSQL](https://github.com/aliyun/alibabacloud-adbpg-mcp-server)** - An MCP server to connect to [AnalyticDB for PostgreSQL](https://github.com/aliyun/alibabacloud-adbpg-mcp-server) instances, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN0101UWWF1UYn3rAe3HU_!!6000000002530-2-tps-32-32.png\" alt=\"DataWorks Logo\" /> **[Alibaba Cloud DataWorks](https://github.com/aliyun/alibabacloud-dataworks-mcp-server)** - A Model Context Protocol (MCP) server that provides tools for AI, allowing it to interact with the [DataWorks](https://www.alibabacloud.com/help/en/dataworks/) Open API through a standardized interface. This implementation is based on the Alibaba Cloud Open API and enables AI agents to perform cloud resources operations seamlessly.\n- <img height=\"12\" width=\"12\" src=\"https://opensearch-shanghai.oss-cn-shanghai.aliyuncs.com/ouhuang/aliyun-icon.png\" alt=\"Alibaba Cloud OpenSearch Logo\" /> **[Alibaba Cloud OpenSearch](https://github.com/aliyun/alibabacloud-opensearch-mcp-server)** - This MCP server equips AI Agents with tools to interact with [OpenSearch](https://help.aliyun.com/zh/open-search/?spm=5176.7946605.J_5253785160.6.28098651AaYZXC) through a standardized and extensible interface.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibaba-cloud-ops-mcp-server/blob/master/image/alibaba-cloud.png\" alt=\"Alibaba Cloud OPS Logo\" /> **[Alibaba Cloud OPS](https://github.com/aliyun/alibaba-cloud-ops-mcp-server)** - Manage the lifecycle of your Alibaba Cloud resources with [CloudOps Orchestration Service](https://www.alibabacloud.com/en/product/oos) and Alibaba Cloud OpenAPI.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/aliyun/alibabacloud-rds-openapi-mcp-server/blob/main/assets/alibabacloudrds.png\" alt=\"Alibaba Cloud RDS MySQL Logo\" /> **[Alibaba Cloud RDS](https://github.com/aliyun/alibabacloud-rds-openapi-mcp-server)** - An MCP server designed to interact with the Alibaba Cloud RDS OpenAPI, enabling programmatic management of RDS resources via an LLM.\n- <img height=\"12\" width=\"12\" src=\"https://www.alipayplus.com/favicon.ico\" alt=\"AlipayPlus Logo\" /> **[AlipayPlus](https://github.com/alipay/global-alipayplus-mcp)** - Connect your AI Agents to AlipayPlus Checkout Payment.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.allvoicelab.com/resources/workbench/dist/icon-dark.ico\" alt=\"AllVoiceLab Logo\" /> **[AllVoiceLab](https://www.allvoicelab.com/mcp)** - An AI voice toolkit with TTS, voice cloning, and video translation, now available as an MCP server for smarter agent integration.\n- <img height=\"12\" width=\"12\" src=\"https://files.alpaca.markets/webassets/favicon-32x32.png\" alt=\"Alpaca Logo\" /> **[Alpaca](https://github.com/alpacahq/alpaca-mcp-server)** – Alpaca's MCP server lets you trade stocks and options, analyze market data, and build strategies through [Alpaca's Trading API](https://alpaca.markets/)\n- <img height=\"12\" width=\"12\" src=\"https://www.alphavantage.co/logo.png/\" alt=\"AlphaVantage Logo\" /> **[AlphaVantage](https://mcp.alphavantage.co/)** - Connect to 100+ APIs for financial market data, including stock prices, fundamentals, and more from [AlphaVantage](https://www.alphavantage.co)\n- <img height=\"12\" width=\"12\" src=\"https://alttester.com/app/themes/alttester-sage-theme/public/images/logo-alttester.038ec8.png\" alt=\"AltTester Logo\" /> **[AltTester®](https://alttester.com/docs/desktop/latest/pages/ai-extension.html)** - Use AltTester® capabilities to connect and test your Unity or Unreal game. Write game test automation faster and smarter, using [AltTester](https://alttester.com) and the AltTester® MCP server. \n- <img height=\"12\" width=\"12\" src=\"https://www.antom.com/favicon.ico\" alt=\"Antom Logo\" /> **[Antom](https://github.com/alipay/global-antom-mcp)** - Connect your AI Agents to Antom Checkout Payment.\n- <img height=\"12\" width=\"12\" src=\"https://developers.anytype.io/img/favicon.ico\" alt=\"Anytype Logo\" /> **[Anytype](https://github.com/anyproto/anytype-mcp)** - An MCP server enabling AI assistants to interact with [Anytype](https://anytype.io) - a local and collaborative wiki - to organize objects, lists, and more through natural language.\n- <img height=\"12\" width=\"12\" src=\"https://doris.apache.org/images/favicon.ico\" alt=\"Apache Doris Logo\" /> **[Apache Doris](https://github.com/apache/doris-mcp-server)** - MCP Server For [Apache Doris](https://doris.apache.org/), an MPP-based real-time data warehouse.\n- <img height=\"12\" width=\"12\" src=\"https://iotdb.apache.org/img/logo.svg\" alt=\"Apache IoTDB Logo\" /> **[Apache IoTDB](https://github.com/apache/iotdb-mcp-server)** - MCP Server for [Apache IoTDB](https://github.com/apache/iotdb) database and its tools\n- **[Apache Pinot](https://github.com/startreedata/mcp-pinot)** – MCP server for running real - time analytics queries on Apache Pinot, an open-source OLAP database built for high-throughput, low-latency powering real-time applications.\n- <img height=\"12\" width=\"12\" src=\"https://apify.com/favicon.ico\" alt=\"Apify Logo\" /> **[Apify](https://github.com/apify/apify-mcp-server)** - Use 6,000+ pre-built cloud tools to extract data from websites, e-commerce, social media, search engines, maps, and more\n- <img height=\"12\" width=\"12\" src=\"https://2052727.fs1.hubspotusercontent-na1.net/hubfs/2052727/cropped-cropped-apimaticio-favicon-1-32x32.png\" alt=\"APIMatic Logo\" /> **[APIMatic MCP](https://github.com/apimatic/apimatic-validator-mcp)** - APIMatic MCP Server is used to validate OpenAPI specifications using [APIMatic](https://www.apimatic.io/). The server processes OpenAPI files and returns validation summaries by leveraging APIMatic's API.\n- <img height=\"12\" width=\"12\" src=\"https://apollo-server-landing-page.cdn.apollographql.com/_latest/assets/favicon.png\" alt=\"Apollo Graph Logo\" /> **[Apollo MCP Server](https://github.com/apollographql/apollo-mcp-server/)** - Connect your GraphQL APIs to AI agents\n- <img height=\"12\" width=\"12\" src=\"https://developer.aqara.com/favicon.ico\" alt=\"Aqara Logo\" /> **[Aqara MCP Server](https://github.com/aqara/aqara-mcp-server/)** - Control  [Aqara](https://www.aqara.com/) smart home devices, query status, execute scenes, and much more using natural language.\n- <img height=\"12\" width=\"12\" src=\"https://media.licdn.com/dms/image/v2/C4D0BAQEeD7Dxbpadkw/company-logo_200_200/company-logo_200_200/0/1644692667545/archbee_logo?e=2147483647&v=beta&t=lTi9GRIoqzG6jN3kJC26uZWh0q3uiQelsH6mGoq_Wfw\" alt=\"Archbee Logo\" /> **[Archbee](https://www.npmjs.com/package/@archbee/mcp)** - Write and publish documentation that becomes the trusted source for instant answers with AI. Stop cobbling tools and use [Archbee](https://www.archbee.com/) — the first complete documentation platform.\n- <img height=\"12\" width=\"12\" src=\"https://phoenix.arize.com/wp-content/uploads/2023/04/cropped-Favicon-32x32.png\" alt=\"Arize-Phoenix Logo\" /> **[Arize Phoenix](https://github.com/Arize-ai/phoenix/tree/main/js/packages/phoenix-mcp)** - Inspect traces, manage prompts, curate datasets, and run experiments using [Arize Phoenix](https://github.com/Arize-ai/phoenix), an open-source AI and LLM observability tool.\n- <img height=\"12\" width=\"12\" src=\"https://731523176-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2FaVUBXRZbpAgtjYf5HsvO%2Fuploads%2FaRRrVVocXCTr6GkepfCx%2Flogo_color.svg?alt=media&token=3ba24089-0ab2-421f-a9d9-41f2f94f954a\" alt=\"Armor Logo\" /> **[Armor Crypto MCP](https://github.com/armorwallet/armor-crypto-mcp)** - MCP to interface with multiple blockchains, staking, DeFi, swap, bridging, wallet management, DCA, Limit Orders, Coin Lookup, Tracking and more.\n- <img height=\"12\" width=\"12\" src=\"https://console.asgardeo.io/app/libs/themes/wso2is/assets/images/branding/favicon.ico\" alt=\"Asgardeo Logo\" /> **[Asgardeo](https://github.com/asgardeo/asgardeo-mcp-server)** - MCP server to interact with your [Asgardeo](https://wso2.com/asgardeo) organization through LLM tools.\n- <img height=\"12\" width=\"12\" src=\"https://www.datastax.com/favicon-32x32.png\" alt=\"DataStax logo\" /> **[Astra DB](https://github.com/datastax/astra-db-mcp)** - Comprehensive tools for managing collections and documents in a [DataStax Astra DB](https://www.datastax.com/products/datastax-astra) NoSQL database with a full range of operations such as create, update, delete, find, and associated bulk actions.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/66598898fd13d51606c3215d/66ccbfef13bd8bc19d587578_favicon-32x32.png\" alt=\"Atla Logo\" /> **[Atla](https://github.com/atla-ai/atla-mcp-server)** - Enable AI agents to interact with the [Atla API](https://docs.atla-ai.com/) for state-of-the-art LLMJ evaluation.\n- <img height=\"12\" width=\"12\" src=\"https://assets.atlan.com/assets/atlan-a-logo-blue-background.png\" alt=\"Atlan Logo\" /> **[Atlan](https://github.com/atlanhq/agent-toolkit/tree/main/modelcontextprotocol)** - The Atlan Model Context Protocol server allows you to interact with the [Atlan](https://www.atlan.com/) services through multiple tools.\n- <img height=\"12\" width=\"12\" src=\"https://www.atlassian.com/favicon.ico\" alt=\"Atlassian Logo\" /> **[Atlassian](https://www.atlassian.com/platform/remote-mcp-server)** - Securely interact with Jira work items and Confluence pages, and search across both.\n- <img height=\"12\" width=\"12\" src=\"https://res.oafimg.cn/-/737b3b3ffed9b19e/logo.png\" alt=\"AtomGit Logo\" /> **[AtomGit](https://atomgit.com/atomgit-open-source-ecosystem/atomgit-mcp-server)** - Official AtomGit server for integration with repository management, PRs, issues, branches, labels, and more.\n- <img height=\"12\" width=\"12\" src=\"https://resources.audiense.com/hubfs/favicon-1.png\" alt=\"Audiense Logo\" /> **[Audiense Insights](https://github.com/AudienseCo/mcp-audiense-insights)** - Marketing insights and audience analysis from [Audiense](https://www.audiense.com/products/audiense-insights) reports, covering demographic, cultural, influencer, and content engagement analysis.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.auth0.com/website/website/favicons/auth0-favicon.svg\" alt=\"Auth0 Logo\" /> **[Auth0](https://github.com/auth0/auth0-mcp-server)** - MCP server for interacting with your Auth0 tenant, supporting creating and modifying actions, applications, forms, logs, resource servers, and more.\n- <img height=\"12\" width=\"12\" src=\"https://firstorder.ai/favicon_auth.ico\" alt=\"Authenticator App Logo\" /> **[Authenticator App · 2FA](https://github.com/firstorderai/authenticator_mcp)** - A secure MCP (Model Context Protocol) server that enables AI agents to interact with the Authenticator App.\n- <img height=\"12\" width=\"12\" src=\"https://a0.awsstatic.com/libra-css/images/site/fav/favicon.ico\" alt=\"AWS Logo\" /> **[AWS](https://github.com/awslabs/mcp)** -  Specialized MCP servers that bring AWS best practices directly to your development workflow.\n- <img height=\"12\" width=\"12\" src=\"https://axiom.co/favicon.ico\" alt=\"Axiom Logo\" /> **[Axiom](https://github.com/axiomhq/mcp-server-axiom)** - Query and analyze your Axiom logs, traces, and all other event data in natural language\n- <img height=\"12\" width=\"12\" src=\"https://cdn-dynmedia-1.microsoft.com/is/content/microsoftcorp/acom_social_icon_azure\" alt=\"Microsoft Azure Logo\" /> **[Azure](https://github.com/microsoft/mcp/tree/main/servers/Azure.Mcp.Server)** - The Azure MCP Server gives MCP Clients access to key Azure services and tools like Azure Storage, Cosmos DB, the Azure CLI, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn-dynmedia-1.microsoft.com/is/content/microsoftcorp/1062064-Products-1.2-24x24\" alt=\"Microsoft Azure DevOps Logo\" /> **[Azure DevOps](https://github.com/microsoft/azure-devops-mcp)** - Interact with Azure DevOps services like repositories, work items, builds, releases, test plans, and code search.\n- <img height=\"12\" width=\"12\" src=\"https://application.backdocket.com/favicon.ico\" alt=\"Backdocket Logo\" /> **[Backdocket](https://ai.backdocket.com)** - Search, Retrieve, and Update your **[Backdocket](https://backdocket.com)** data. This currently includes Claims, Matters, Contacts, Tasks and Advanced Searches. To easily use the Remote Mcp Server utilize the following url: **[https://ai.backdocket.com/mcp]([https://backdocket.com](https://ai.backdocket.com/mcp))**\n- <img height=\"12\" width=\"12\" src=\"https://mapopen-website-wiki.cdn.bcebos.com/LOGO/lbsyunlogo_icon.ico\" alt=\"Baidu Map Logo\" /> **[Baidu Map](https://github.com/baidu-maps/mcp)** - [Baidu Map MCP Server](https://lbsyun.baidu.com/faq/api?title=mcpserver/base) provides tools for AI agents to interact with Baidu Maps APIs, enabling location-based services and geospatial data analysis.\n- <img height=\"12\" width=\"12\" src=\"https://www.bankless.com/favicon.ico\" alt=\"Bankless Logo\" /> **[Bankless Onchain](https://github.com/bankless/onchain-mcp)** - Query Onchain data, like ERC20 tokens, transaction history, smart contract state.\n- <img height=\"12\" width=\"12\" src=\"https://baserow.io/img/logo_baserow_square_large.png\" alt=\"Baserow Logo\" /> **[Baserow](https://gitlab.com/baserow/baserow/-/tree/develop/backend/src/baserow/api/mcp)** - Query data from Baserow self-hosted or SaaS databases using MCP integration.\n- <img height=\"12\" width=\"12\" src=\"https://bicscan.io/favicon.png\" alt=\"BICScan Logo\" /> **[BICScan](https://github.com/ahnlabio/bicscan-mcp)** - Risk score / asset holdings of EVM blockchain address (EOA, CA, ENS) and even domain names.\n- <img height=\"12\" width=\"12\" src=\"https://web-cdn.bitrise.io/favicon.ico\" alt=\"Bitrise Logo\" /> **[Bitrise](https://github.com/bitrise-io/bitrise-mcp)** - Chat with your builds, CI, and [more](https://bitrise.io/blog/post/chat-with-your-builds-ci-and-more-introducing-the-bitrise-mcp-server).\n- <img height=\"12\" width=\"12\" src=\"https://boikot.xyz/assets/favicon.svg\" alt=\"boikot Logo\" /> **[Boikot](https://github.com/boikot-xyz/boikot)** - Learn about the ethical and unethical actions of major companies with [boikot.xyz](https://boikot.xyz/).\n- <img height=\"12\" width=\"12\" src=\"https://boldsign.com/favicon.ico\" alt=\"BoldSign Logo\" /> **[BoldSign](https://github.com/boldsign/boldsign-mcp)** - Search, request, and manage e-signature contracts effortlessly with [BoldSign](https://boldsign.com/).\n- <img height=\"12\" width=\"12\" src=\"https://boost.space/favicon.ico\" alt=\"Boost.space Logo\" /> **[Boost.space](https://github.com/boostspace/boostspace-mcp-server)** - An MCP server integrating with [Boost.space](https://boost.space) for centralized, automated business data from 2000+ sources.\n- <img height=\"12\" width=\"12\" src=\"https://www.box.com/favicon.ico\" alt=\"Box Logo\" /> **[Box](https://github.com/box-community/mcp-server-box)** - Interact with the Intelligent Content Management platform through Box AI.\n- <img height=\"12\" width=\"12\" src=\"https://www.brightdata.com/favicon.ico\" alt=\"BrightData Logo\" /> **[BrightData](https://github.com/luminati-io/brightdata-mcp)** - Discover, extract, and interact with the web - one interface powering automated access across the public internet.\n- <img height=\"12\" width=\"12\" src=\"https://browserbase.com/favicon.ico\" alt=\"Browserbase Logo\" /> **[Browserbase](https://github.com/browserbase/mcp-server-browserbase)** - Automate browser interactions in the cloud (e.g. web navigation, data extraction, form filling, and more)\n- <img height=\"12\" width=\"12\" src=\"https://browserstack.wpenginepowered.com/wp-content/themes/browserstack/img/favicons/favicon.ico\" alt=\"BrowserStack Logo\" /> **[BrowserStack](https://github.com/browserstack/mcp-server)** - Access BrowserStack's [Test Platform](https://www.browserstack.com/test-platform) to debug, write and fix tests, do accessibility testing and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.google.com/s2/favicons?domain=buildkite.com&sz=24\" alt=\"Buildkite Logo\" /> **[Buildkite](https://github.com/buildkite/buildkite-mcp-server)** - Exposing Buildkite data (pipelines, builds, jobs, tests) to AI tooling and editors.\n- <img height=\"12\" width=\"12\" src=\"https://bldbl.dev/favico.png\" alt=\"Buildable Logo\" />**[Buildable](https://github.com/chunkydotdev/bldbl-mcp)** (TypeScript) - Official MCP server for Buildable AI-powered development platform. Enables AI assistants to manage tasks, track progress, get project context, and collaborate with humans on software projects.\n- <img height=\"12\" width=\"12\" src=\"https://builtwith.com/favicon.ico\" alt=\"BuiltWith Logo\" /> **[BuiltWith](https://github.com/builtwith/mcp)** - Identify the technology stack behind any website.\n- <img height=\"12\" width=\"12\" src=\"https://portswigger.net/favicon.ico\" alt=\"PortSwigger Logo\" /> **[Burp Suite](https://github.com/PortSwigger/mcp-server)** - MCP Server extension allowing AI clients to connect to [Burp Suite](https://portswigger.net)\n- <img src=\"https://app.cal.com/favicon.ico\" alt=\"Cal.com\" width=\"12\" height=\"12\"> **[Cal.com](https://www.npmjs.com/package/@calcom/cal-mcp?activeTab=readme)** - Connect to the Cal.com API to schedule and manage bookings and appointments.\n- <img height=\"12\" width=\"12\" src=\"https://campertunity.com/assets/icon/favicon.ico\" alt=\"Campertunity Logo\" /> **[Campertunity](https://github.com/campertunity/mcp-server)** - Search campgrounds around the world on campertunity, check availability, and provide booking links.\n- <img height=\"12\" width=\"12\" src=\"https://static.canva.com/static/images/favicon.ico\" alt=\"Canva logo\" /> **[Canva](https://www.canva.dev/docs/apps/mcp-server/)** — Provide AI - powered development assistance for [Canva](https://canva.com) apps and integrations.\n- <img height=\"12\" width=\"12\" src=\"https://carbonvoice.app/favicon.ico\" alt=\"Carbon Voice Logo\" /> **[Carbon Voice](https://github.com/PhononX/cv-mcp-server)** - MCP Server that connects AI Agents to [Carbon Voice](https://getcarbon.app). Create, manage, and interact with voice messages, conversations, direct messages, folders, voice memos, AI actions and more in [Carbon Voice](https://getcarbon.app).\n-  **[Cartesia](https://github.com/cartesia-ai/cartesia-mcp)** - Connect to the [Cartesia](https://cartesia.ai/) voice platform to perform text-to-speech, voice cloning etc.\n- <img height=\"12\" width=\"12\" src=\"https://www.cashfree.com/favicon.ico\" alt=\"Cashfree logo\" /> **[Cashfree](https://github.com/cashfree/cashfree-mcp)** - [Cashfree Payments](https://www.cashfree.com/) official MCP server.\n- **[CB Insights](https://github.com/cbinsights/cbi-mcp-server)** - Use the [CB Insights](https://www.cbinsights.com) MCP Server to connect to [ChatCBI](https://www.cbinsights.com/chatcbi/)\n- <img height=\"12\" width=\"12\" src=\"https://cleanupcrew.ai/favicon-light.png\" alt=\"Cleanup Crew logo\" /> **[Cleanup Crew](https://cleanupcrew.ai/install)** - Real-time human support service for non-technical founders using AI coding tools. When AI hits a wall, request instant human help directly from your IDE.\n- <img height=\"12\" width=\"12\" src=\"https://www.chargebee.com/static/resources/brand/favicon.png\" alt=\"Chargebee Logo\" /> **[Chargebee](https://github.com/chargebee/agentkit/tree/main/modelcontextprotocol)** - MCP Server that connects AI agents to [Chargebee platform](https://www.chargebee.com).\n- <img height=\"12\" width=\"12\" src=\"https://cheqd.io/wp-content/uploads/2023/03/logo_cheqd_favicon.png\" alt=\"Cheqd Logo\" /> **[Cheqd](https://github.com/cheqd/mcp-toolkit)** - Enable AI Agents to be trusted, verified, prevent fraud, protect your reputation, and more through [cheqd's](https://cheqd.io) Trust Registries and Credentials.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.chiki.studio/brand/logo.png\" alt=\"Chiki StudIO Logo\" /> **[Chiki StudIO](https://chiki.studio/galimybes/mcp/)** - Create your own configurable MCP servers purely via configuration (no code), with instructions, prompts, and tools support.\n- <img height=\"12\" width=\"12\" src=\"https://trychroma.com/_next/static/media/chroma-logo.ae2d6e4b.svg\" alt=\"Chroma Logo\" /> **[Chroma](https://github.com/chroma-core/chroma-mcp)** - Embeddings, vector search, document storage, and full-text search with the open-source AI application database\n- <img height=\"12\" width=\"12\" src=\"https://www.chronulus.com/favicon/chronulus-logo-blue-on-alpha-square-128x128.ico\" alt=\"Chronulus AI Logo\" /> **[Chronulus AI](https://github.com/ChronulusAI/chronulus-mcp)** - Predict anything with Chronulus AI forecasting and prediction agents.\n- <img height=\"12\" width=\"12\" src=\"https://circleci.com/favicon.ico\" alt=\"CircleCI Logo\" /> **[CircleCI](https://github.com/CircleCI-Public/mcp-server-circleci)** - Enable AI Agents to fix build failures from CircleCI.\n- <img height=\"12\" width=\"12\" src=\"https://assets.zilliz.com/Zilliz_Logo_Mark_White_20230223_041013_86057436cc.png\" alt=\"Claude Context Logo\" /> **[Claude Context](https://github.com/zilliztech/claude-context)** - Bring your codebase as context to Claude Code\n- <img height=\"12\" width=\"12\" src=\"https://clickhouse.com/favicon.ico\" alt=\"ClickHouse Logo\" /> **[ClickHouse](https://github.com/ClickHouse/mcp-clickhouse)** - Query your [ClickHouse](https://clickhouse.com/) database server.\n- <img height=\"12\" width=\"12\" src=\"https://brand.clicksend.com/_ipx/s_794x608/img/clicksend_icon_only.svg\" alt=\"ClickSend Logo\" /> **[ClickSend](https://github.com/ClickSend/clicksend-mcp-server/)** - This is the official ClickSend MCP Server developed by ClickSend team.\n- <img height=\"12\" width=\"12\" src=\"https://7463-tcb-advanced-a656fc-1257967285.tcb.qcloud.la/mcp/cloudbase-logo.svg\" alt=\"CloudBase Logo\" /> **[CloudBase](https://github.com/TencentCloudBase/CloudBase-AI-ToolKit)** - One-stop backend services for WeChat Mini-Programs and full-stack apps with serverless cloud functions and databases by [Tencent CloudBase](https://tcb.cloud.tencent.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.cloudbet.com/favicon.ico\" alt=\"Cloudbet Logo\" /> **[Cloudbet](https://github.com/cloudbet/sports-mcp-server)** - Structured sports and esports data via Cloudbet API: fixtures, live odds, stake limits, and markets.\n- <img height=\"12\" width=\"12\" src=\"https://www.cloudbees.com/favicon.ico\" alt=\"CloudBees Logo\" /> **[CloudBees](https://docs.cloudbees.com/docs/cloudbees-mcp/latest/)** - Enable AI access to your [CloudBees Unify](https://www.cloudbees.com/unify) environment.\n- <img src=\"http://www.google.com/s2/favicons?domain=www.cloudera.com\" alt=\"Cloudera Iceberg\" width=\"12\" height=\"12\"> **[Cloudera Iceberg](https://github.com/cloudera/iceberg-mcp-server)** - enabling AI on the [Open Data Lakehouse](https://www.cloudera.com/products/open-data-lakehouse.html).\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/cloudflare\" /> **[Cloudflare](https://github.com/cloudflare/mcp-server-cloudflare)** - Deploy, configure & interrogate your resources on the Cloudflare developer platform (e.g. Workers/KV/R2/D1)\n- <img src=\"https://cdn.prod.website-files.com/64d41aab8183c7c3324ddb29/67c0f1e272e51cf3c511c17c_Gyph.svg\" alt=\"Cloudinary\" width=\"12\" height=\"12\"> **[Cloudinary](https://github.com/cloudinary/mcp-servers)** - Exposes Cloudinary's media upload, transformation, AI analysis, management, optimization and delivery as tools usable by AI agents\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/Cloudsway-AI/smartsearch/refs/heads/main/plugin_cloudsway.ico\" alt=\"Cloudsway Logo\" /> **[Cloudsway SmartSearch](https://github.com/Cloudsway-AI/smartsearch)** - Web search MCP server powered by Cloudsway, supporting keyword search, language, and safety options. Returns structured JSON results.\n-  **[Codacy](https://github.com/codacy/codacy-mcp-server/)** - Interact with [Codacy](https://www.codacy.com) API to query code quality issues, vulnerabilities, and coverage insights about your code.\n-  **[CodeLogic](https://github.com/CodeLogicIncEngineering/codelogic-mcp-server)** - Interact with [CodeLogic](https://codelogic.com), a Software Intelligence platform that graphs complex code and data architecture dependencies, to boost AI accuracy and insight.\n- <img height=\"12\" width=\"12\" src=\"https://www.coingecko.com/favicon.ico\" alt=\"CoinGecko Logo\" /> **[CoinGecko](https://github.com/coingecko/coingecko-typescript/tree/main/packages/mcp-server)** - Official [CoinGecko API](https://www.coingecko.com/en/api) MCP Server for Crypto Price & Market Data, across 200+ Blockchain Networks and 8M+ Tokens.\n- <img height=\"12\" width=\"12\" src=\"https://www.comet.com/favicon.ico\" alt=\"Comet Logo\" /> **[Comet Opik](https://github.com/comet-ml/opik-mcp)** - Query and analyze your [Opik](https://github.com/comet-ml/opik) logs, traces, prompts and all other telemetry data from your LLMs in natural language.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6572bd8c27ee5db3eb91f4b3/6572bd8d27ee5db3eb91f55e_favicon-dashflow-webflow-template.svg\" alt=\"OSS Conductor Logo\" /> <img height=\"12\" width=\"12\" src=\"https://orkes.io/icons/icon-48x48.png\" alt=\"Orkes Conductor Logo\" />**[Conductor](https://github.com/conductor-oss/conductor-mcp)** - Interact with Conductor (OSS and Orkes) REST APIs.\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\" /> **[Composio](https://docs.composio.dev/docs/mcp-overview#-getting-started)** – Use [Composio](https://composio.dev) to connect 100+ tools. Zero setup. Auth built-in. Made for agents, works for humans.\n- <img height=\"12\" width=\"12\" src=\"https://www.confluent.io/favicon.ico\" alt=\"Confluent Logo\" /> **[Confluent](https://github.com/confluentinc/mcp-confluent)** - Interact with Confluent Kafka and Confluent Cloud REST APIs.\n- <img src=\"https://contrastsecurity.com/favicon.ico\" alt=\"Contrast Security\" width=\"12\" height=\"12\"> **[Contrast Security](https://github.com/Contrast-Security-OSS/mcp-contrast)** - Brings Contrast's vulnerability and SCA data into your coding agent to quickly remediate vulnerabilities.\n- <img height=\"12\" width=\"12\" src=\"https://www.convex.dev/favicon.ico\" alt=\"Convex Logo\" /> **[Convex](https://stack.convex.dev/convex-mcp-server)** - Introspect and query your apps deployed to Convex.\n- <img height=\"12\" width=\"12\" src=\"https://www.cortex.io/favicon.ico\" alt=\"Cortex Logo\" /> **[Cortex](https://github.com/cortexapps/cortex-mcp)** - Official MCP server for [Cortex](https://www.cortex.io).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/605755?s=200&v=4\" alt=\"Couchbase Logo\" /> **[Couchbase](https://github.com/Couchbase-Ecosystem/mcp-server-couchbase)** - Interact with the data stored in Couchbase clusters.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/user-attachments/assets/b256f9fa-2020-4b37-9644-c77229ef182b\" alt=\"CRIC 克而瑞 LOGO\"> **[CRIC Wuye AI](https://github.com/wuye-ai/mcp-server-wuye-ai)** - Interact with capabilities of the CRIC Wuye AI platform, an intelligent assistant specifically for the property management industry.\n- <img height=\"12\" width=\"12\" src=\"https://www.crowdstrike.com/etc.clientlibs/crowdstrike/clientlibs/crowdstrike-common/resources/favicon.ico\" alt=\"CrowdStrike Logo\" /> **[CrowdStrike Falcon](https://github.com/CrowdStrike/falcon-mcp)** - Connects AI agents with the CrowdStrike Falcon platform for intelligent security analysis, providing programmatic access to detections, incidents, behaviors, threat intelligence, hosts, vulnerabilities, and identity protection capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58433296\" alt=\"CTERA Edge Filer\" /> **[CTERA Edge Filer](https://github.com/ctera/mcp-ctera-edge)** - CTERA Edge Filer delivers intelligent edge caching and multiprotocol file access, enabling fast, secure access to files across core and remote sites.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58433296\" alt=\"CTERA Portal\" /> **[CTERA Portal](https://github.com/ctera/mcp-ctera-core)** - CTERA Portal is a multi-tenant, multi-cloud platform that delivers a global namespace and unified management across petabytes of distributed content.\n- <img height=\"12\" width=\"12\" src=\"https://app.cycode.com/img/favicon.ico\" alt=\"Cycode Logo\" /> **[Cycode](https://github.com/cycodehq/cycode-cli#mcp-command-experiment)** - Boost security in your dev lifecycle via SAST, SCA, Secrets & IaC scanning with [Cycode](https://cycode.com/).\n- <img height=\"12\" width=\"12\" src=\"http://app.itsdart.com/static/img/favicon.png\" alt=\"Dart Logo\" /> **[Dart](https://github.com/its-dart/dart-mcp-server)** - Interact with task, doc, and project data in [Dart](https://itsdart.com), an AI-native project management tool\n- <img height=\"12\" width=\"12\" src=\"https://cdn.bfldr.com/9AYANS2F/at/k8bgnnxhb4bggjk88r4x9snf/databricks-symbol-color.svg?auto=webp&format=png&width=12&height=13\" alt=\"Databricks Logo\" /> **[Databricks](https://docs.databricks.com/aws/en/generative-ai/mcp/)** - Connect to data, AI tools & agents, and the rest of the Databricks platform using turnkey managed MCP servers. Or, host your own custom MCP servers within the Databricks security and data governance boundary.\n- <img height=\"12\" width=\"12\" src=\"https://datahub.com/wp-content/uploads/2025/04/cropped-Artboard-1-32x32.png\" alt=\"DataHub Logo\" /> **[DataHub](https://github.com/acryldata/mcp-server-datahub)** - Search your data assets, traverse data lineage, write SQL queries, and more using [DataHub](https://datahub.com/) metadata.\n- <img height=\"12\" width=\"12\" src=\"https://www.daytona.io/brand/social-daytona-icon.png\" alt=\"Daytona Logo\" /> **[Daytona](https://github.com/daytonaio/daytona/tree/main/apps/cli/mcp)** - Fast and secure execution of your AI generated code with [Daytona](https://daytona.io) sandboxes\n- <img height=\"12\" width=\"12\" src=\"https://debugg.ai/favicon.svg\" alt=\"Debugg AI Logo\" /> **[Debugg.AI](https://github.com/debugg-ai/debugg-ai-mcp)** - Zero-Config, Fully AI-Managed End-to-End Testing for any code gen platform via [Debugg.AI](https://debugg.ai) remote browsing test agents.\n- <img height=\"12\" width=\"12\" src=\"https://www.deepl.com/img/logo/deepl-logo-blue.svg\" alt=\"DeepL Logo\" /> **[DeepL](https://github.com/DeepLcom/deepl-mcp-server)** - Translate or rewrite text with [DeepL](https://deepl.com)'s very own AI models using [the DeepL API](https://developers.deepl.com/docs)\n- <img height=\"12\" width=\"12\" src=\"https://defang.io/_next/static/media/defang-icon-dark-colour.25f95b77.svg\" alt=\"Defang Logo\" /> **[Defang](https://github.com/DefangLabs/defang/blob/main/src/pkg/mcp/README.md)** - Deploy your project to the cloud seamlessly with the [Defang](https://www.defang.io) platform without leaving your integrated development environment\n- <img height=\"12\" width=\"12\" src=\"https://detailer.ginylil.com/favicon.ico\" alt=\"Detailer Logo\" /> **[Detailer](https://detailer.ginylil.com/)** – Instantly generate rich, AI-powered documentation for your GitHub repositories. Designed for AI agents to gain deep project context before taking action.\n- <img height=\"12\" width=\"12\" src=\"https://devcycle.com/_next/image?url=%2Fassets%2Fbrand%2FColor-logo-mark.png&w=384&q=75\" alt=\"DevCycle Logo\" /> **[DevCycle](https://docs.devcycle.com/cli-mcp/mcp-getting-started)** - Create and monitor feature flags using natural language in your AI coding assistant.\n- <img height=\"12\" width=\"12\" src=\"https://www.devhub.com/img/upload/favicon-196x196-dh.png\" alt=\"DevHub Logo\" /> **[DevHub](https://github.com/devhub/devhub-cms-mcp)** - Manage and utilize website content within the [DevHub](https://www.devhub.com) CMS platform\n- <img height=\"12\" width=\"12\" src=\"https://devrev.ai/favicon.ico\" alt=\"DevRev Logo\" /> **[DevRev](https://github.com/devrev/mcp-server)** - An MCP server to integrate with DevRev APIs to search through your DevRev Knowledge Graph where objects can be imported from diff. Sources listed [here](https://devrev.ai/docs/import#available-sources).\n- <img height=\"12\" width=\"12\" src=\"https://dexpaprika.com/favicon.ico\" alt=\"DexPaprika Logo\" /> **[DexPaprika (CoinPaprika)](https://github.com/coinpaprika/dexpaprika-mcp)** - Access real-time DEX data, liquidity pools, token information, and trading analytics across multiple blockchain networks with [DexPaprika](https://dexpaprika.com) by CoinPaprika.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/dolthub/dolt/raw/main/images/Dolt-Logo@3x.svg\" alt=\"Dolt Logo\" /> **[Dolt](https://github.com/dolthub/dolt-mcp)** - The official MCP server for version-controlled [Dolt](https://doltdb.com/) databases.\n- <img height=\"12\" width=\"12\" src=\"https://eu.getdot.ai/favicon.ico\" alt=\"GetDot.ai Logo\" /> **[Dot (GetDot.ai)](https://docs.getdot.ai/dot/integrations/mcp)** - Fetch, analyze or visualize data from your favorite database or data warehouse (Snowflake, BigQuery, Redshift, Databricks, Clickhouse, ...) with [Dot](https://getdot.ai), your AI Data Analyst. This remote MCP server is a one-click integration for user that have setup Dot.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/65421071?s=200&v=4\" alt=\"Drata Logo\" /> **[Drata](https://drata.com/mcp)** - Get hands-on with our experimental MCP server—bringing real-time compliance intelligence into your AI workflows.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/204530939?s=200&v=4\" alt=\"Dumpling AI Logo\" /> **[Dumpling AI](https://github.com/Dumpling-AI/mcp-server-dumplingai)** - Access data, web scraping, and document conversion APIs by [Dumpling AI](https://www.dumplingai.com/)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/58178984\" alt=\"Dynatrace Logo\" /> **[Dynatrace](https://github.com/dynatrace-oss/dynatrace-mcp)** - Manage and interact with the [Dynatrace Platform ](https://www.dynatrace.com/platform) for real-time observability and monitoring.\n- <img height=\"12\" width=\"12\" src=\"https://e2b.dev/favicon.ico\" alt=\"E2B Logo\" /> **[E2B](https://github.com/e2b-dev/mcp-server)** - Run code in secure sandboxes hosted by [E2B](https://e2b.dev)\n- <img height=\"12\" width=\"12\" src=\"https://www.edgee.cloud/favicon.ico\" alt=\"Edgee Logo\" /> **[Edgee](https://github.com/edgee-cloud/mcp-server-edgee)** - Deploy and manage [Edgee](https://www.edgee.cloud) components and projects\n- <img height=\"12\" width=\"12\" src=\"https://static.edubase.net/media/brand/favicon/favicon-32x32.png\" alt=\"EduBase Logo\" /> **[EduBase](https://github.com/EduBase/MCP)** - Interact with [EduBase](https://www.edubase.net), a comprehensive e-learning platform with advanced quizzing, exam management, and content organization capabilities\n- <img height=\"12\" width=\"12\" src=\"https://www.elastic.co/favicon.ico\" alt=\"Elasticsearch Logo\" /> **[Elasticsearch](https://github.com/elastic/mcp-server-elasticsearch)** - Query your data in [Elasticsearch](https://www.elastic.co/elasticsearch)\n- <img height=\"12\" width=\"12\" src=\"https://github.com/EmberAGI/arbitrum-vibekit/blob/main/img/Ember%20Black.png?raw=true\" alt=\"Ember AI Logo\" /> **[Ember AI](https://docs.emberai.xyz/)** - A unified MCP server that enables AI agents to execute cross-chain DeFi strategies.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/656eaf5c6da3527caf362363/656ecc07555afac40df4c40e_Facicon.png\" alt=\"Endor Labs Logo\" /> **[Endor Labs](https://docs.endorlabs.com/deployment/ide/mcp/)** - Find and fix security risks in you code. Integrate [Endor Labs](https://endorlabs.com) to scan and secure your code from vulnerabilities and secret leaks.\n- <img height=\"12\" width=\"12\" src=\"https://esignatures.com/favicon.ico\" alt=\"eSignatures Logo\" /> **[eSignatures](https://github.com/esignaturescom/mcp-server-esignatures)** - Contract and template management for drafting, reviewing, and sending binding contracts.\n- <img height=\"12\" width=\"12\" src=\"https://rainmaker.espressif.com/favicon.ico\" alt=\"ESP RainMaker Logo\" /> **[ESP RainMaker](https://github.com/espressif/esp-rainmaker-mcp)** - Official Espressif MCP Server to Control and Manage ESP RainMaker Devices.\n- <img height=\"12\" width=\"12\" src=\"https://exa.ai/images/favicon-32x32.png\" alt=\"Exa Logo\" /> **[Exa](https://github.com/exa-labs/exa-mcp-server)** - Search Engine made for AIs by [Exa](https://exa.ai)\n- <img height=\"12\" width=\"12\" src=\"https://www.explorium.ai/wp-content/uploads/2025/04/Favicon-Purple-512x512-1-150x150.png\" alt=\"Explorium Logo\" /> **[Explorium](https://github.com/explorium-ai/mcp-explorium)** - B2B data and infrastructure for AI SDR & GTM Agents [Explorium](https://www.explorium.ai)\n- **[FalkorDB](https://github.com/FalkorDB/FalkorDB-MCPServer)** - FalkorDB graph database server get schema and read/write-cypher [FalkorDB](https://www.falkordb.com)\n- <img height=\"12\" width=\"12\" src=\"https://fetchserp.com/icon.png\" alt=\"fetchSERP Logo\" /> **[fetchSERP](https://github.com/fetchSERP/fetchserp-mcp-server-node)** - All-in-One SEO & Web Intelligence Toolkit API [fetchSERP](https://www.fetchserp.com/)\n- <img height=\"12\" width=\"12\" src=\"https://fewsats.com/favicon.svg\" alt=\"Fewsats Logo\" /> **[Fewsats](https://github.com/Fewsats/fewsats-mcp)** - Enable AI Agents to purchase anything in a secure way using [Fewsats](https://fewsats.com)\n- <img height=\"12\" width=\"12\" src=\"https://fibery.io/favicon.svg\" alt=\"Fibery Logo\" /> **[Fibery](https://github.com/Fibery-inc/fibery-mcp-server)** - Perform queries and entity operations in your [Fibery](https://fibery.io) workspace.\n- <img height=\"12\" width=\"12\" src=\"https://financialdatasets.ai/favicon.ico\" alt=\"Financial Datasets Logo\" /> **[Financial Datasets](https://github.com/financial-datasets/mcp-server)** - Stock market API made for AI agents\n- <img height=\"12\" width=\"12\" src=\"https://www.gstatic.com/devrel-devsite/prod/v7aeef7f1393bb1d75a4489145c511cdd5aeaa8e13ad0a83ec1b5b03612e66330/firebase/images/favicon.png\" alt=\"Firebase Logo\" /> **[Firebase](https://github.com/firebase/firebase-tools/blob/master/src/mcp)** - Firebase's experimental [MCP Server](https://firebase.google.com/docs/cli/mcp-server) to power your AI Tools\n- <img height=\"12\" width=\"12\" src=\"https://firecrawl.dev/favicon.ico\" alt=\"Firecrawl Logo\" /> **[Firecrawl](https://github.com/firecrawl/firecrawl-mcp-server)** - Extract web data with [Firecrawl](https://firecrawl.dev)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/100200663?s=200&v=4\" alt=\"Firefly Logo\" /> **[Firefly](https://github.com/gofireflyio/firefly-mcp)** - Integrates, discovers, manages, and codifies cloud resources with [Firefly](https://firefly.ai).\n- <img height=\"12\" width=\"12\" src=\"https://fireproof.storage/favicon.ico\" alt=\"Fireproof Logo\" /> **[Fireproof](https://github.com/fireproof-storage/mcp-database-server)** - Immutable ledger database with live synchronization\n- <img height=\"12\" width=\"12\" src=\"https://fixparser.dev/favicon.ico\" alt=\"FIXParser Logo\" /> **[FIXParser](https://gitlab.com/logotype/fixparser/-/tree/main/packages/fixparser-plugin-mcp)** - A modern FIX Protocol engine for AI-powered trading agents\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/52471808\" alt=\"Fluid Attacks Logo\" /> **[Fluid Attacks](https://github.com/fluidattacks/mcp)** - Interact with the [Fluid Attacks](https://fluidattacks.com/) API, enabling vulnerability management, organization insights, and GraphQL query execution.\n- <img height=\"12\" width=\"12\" src=\"https://forevervm.com/icon.png\" alt=\"ForeverVM Logo\" /> **[ForeverVM](https://github.com/jamsocket/forevervm/tree/main/javascript/mcp-server)** - Run Python in a code sandbox.\n- <img height=\"12\" width=\"12\" src=\"https://flutterwave.com/favicon.ico\" alt=\"Flutterwave Logo\" /> **[Flutterwave](https://github.com/bajoski34/mcp-flutterwave/tree/main)** - Interact with Flutterwave payment solutions API, to manage transactions, payment links and more.\n- <img height=\"12\" width=\"12\" src=\"https://app.gibsonai.com/favicon.ico\" alt=\"GibsonAI Logo\" /> **[GibsonAI](https://github.com/GibsonAI/mcp)** - AI-Powered Cloud databases: Build, migrate, and deploy database instances with AI\n- <img height=\"12\" width=\"12\" src=\"https://gcore.com/assets/favicon/favicon-16x16.png\" alt=\"Gcore Logo\" /> **[Gcore](https://github.com/G-Core/gcore-mcp-server)** - Interact with Gcore platform services via LLM assistants, providing unified access to CDN, GPU Cloud & AI Inference, Video Streaming, WAAP, and cloud resources including instances and networks.\n- <img height=\"12\" width=\"12\" src=\"https://gitea.com/assets/img/favicon.svg\" alt=\"Gitea Logo\" /> **[Gitea](https://gitea.com/gitea/gitea-mcp)** - Interact with Gitea instances with MCP.\n- <img height=\"12\" width=\"12\" src=\"https://gitee.com/favicon.ico\" alt=\"Gitee Logo\" /> **[Gitee](https://github.com/oschina/mcp-gitee)** - Gitee API integration, repository, issue, and pull request management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/5ee25cbe47310017adf964da/6323888a9b9f4e22a7bc766b_GG%20Favicon.svg\" alt=\"GitGuardian Logo\" /> **[GitGuardian](https://github.com/GitGuardian/gg-mcp)** - GitGuardian official MCP server - Scan projects using GitGuardian's industry-leading API, which features over 500 secret detectors to prevent credential leaks before they reach public repositories. Resolve security incidents directly with rich contextual data for rapid, automated remediation.\n- <img height=\"12\" width=\"12\" src=\"https://gitlab.com/favicon.ico\" alt=\"GitLab Logo\" /> **[GitLab](https://docs.gitlab.com/user/gitlab_duo/model_context_protocol/mcp_server/)** - GitLab's official MCP server enabling AI tools to securely access GitLab project data, manage issues, and perform repository operations via OAuth 2.0.\n- <img height=\"12\" width=\"12\" src=\"https://github.githubassets.com/assets/GitHub-Mark-ea2971cee799.png\" alt=\"GitHub Logo\" /> **[GitHub](https://github.com/github/github-mcp-server)** - GitHub's official MCP Server.\n- <img height=\"12\" width=\"12\" src=\"https://www.gitkraken.com/wp-content/uploads/2021/03/android-chrome-144x144-1.png\" alt=\"GitKraken Logo\" /> **[GitKraken](https://github.com/gitkraken/gk-cli?tab=readme-ov-file#mcp-server)** - A CLI for interacting with GitKraken APIs. Includes an MCP server via `gk mcp` that not only wraps GitKraken APIs, but also Jira, GitHub, GitLab, and more.\n- <img height=\"12\" width=\"12\" src=\"https://app.glean.com/images/favicon3-196x196.png\" alt=\"Glean Logo\" /> **[Glean](https://github.com/gleanwork/mcp-server)** - Enterprise search and chat using Glean's API.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.jsdelivr.net/gh/jsdelivr/globalping-media@refs/heads/master/icons/android-chrome-192x192.png\" alt=\"Globalping Logo\" /> **[Globalping](https://github.com/jsdelivr/globalping-mcp-server)** - Access a network of thousands of probes to run network commands like ping, traceroute, mtr, http and DNS resolve.\n- <img height=\"12\" width=\"12\" src=\"https://gnucleus.ai/favicon.ico\" alt=\"gNucleus Logo\" /> **[gNucleus Text-To-CAD](https://github.com/gNucleus/text-to-cad-mcp)** - Generate CAD parts and assemblies from text using gNucleus AI models.\n- <img height=\"12\" width=\"12\" src=\"https://www.gstatic.com/cgc/favicon.ico\" alt=\"Google Cloud Logo\" /> **[Google Cloud Run](https://github.com/GoogleCloudPlatform/cloud-run-mcp)** - Deploy code to Google Cloud Run\n- <img height=\"12\" width=\"12\" src=\"https://api.gologin.com/favicon.ico\" alt=\"GoLogin Logo\" /> **[GoLogin MCP server](https://github.com/gologinapp/gologin-mcp)** - Manage your GoLogin browser profiles and automation directly through AI conversations!\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/3717923?s=200&v=4\" alt=\"Google Maps Platform Logo\" /> **[Google Maps Platform Code Assist](https://github.com/googlemaps/platform-ai/tree/main/packages/code-assist)** - Ground agents on fresh, official documentation and code samples for optimal geo-related guidance and code..\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6605a2979ff17b2cd1939cd4/6605a460de47e7596ed84f06_icon256.png\" alt=\"gotoHuman Logo\" /> **[gotoHuman](https://github.com/gotohuman/gotohuman-mcp-server)** - Human-in-the-loop platform - Allow AI agents and automations to send requests for approval to your [gotoHuman](https://www.gotohuman.com) inbox.\n- <img height=\"12\" width=\"12\" src=\"https://grafana.com/favicon.ico\" alt=\"Grafana Logo\" /> **[Grafana](https://github.com/grafana/mcp-grafana)** - Search dashboards, investigate incidents and query datasources in your Grafana instance\n- <img height=\"12\" width=\"12\" src=\"https://grafbase.com/favicon.ico\" alt=\"Grafbase Logo\" /> **[Grafbase](https://github.com/grafbase/grafbase/tree/main/crates/mcp)** - Turn your GraphQL API into an efficient MCP server with schema intelligence in a single command.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/5f5e90c17e7c9eb95c7acb17/61d3457a519242f2c75c725c_favicon.png\" alt=\"Grain Logo\" /> **[Grain](https://grain.com/release-note/06-18-2025)** - Access your Grain meetings notes & transcripts directly in claude and generate reports with native Claude Prompts.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/KCOWBYLKunDff1Dr452y6EfjiU.png\" alt=\"Graphlit Logo\" /> **[Graphlit](https://github.com/graphlit/graphlit-mcp-server)** - Ingest anything from Slack to Gmail to podcast feeds, in addition to web crawling, into a searchable [Graphlit](https://www.graphlit.com) project.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/64a5291e7847ac04fe1531ad/64a529af2f1fc7debc26f2a6_favicon-32x32.avif\" alt=\"Gremlin favicon\" /> **[Gremlin](https://github.com/gremlin/mcp)** - The official [Gremlin](https://www.gremlin.com) MCP server. Analyze your reliability posture, review recent tests and chaos engineering experiments, and create detailed reports.\n- <img height=\"12\" width=\"12\" src=\"https://greptime.com/favicon.ico\" alt=\"Greptime Logo\" /> **[GreptimeDB](https://github.com/GreptimeTeam/greptimedb-mcp-server)** - Provides AI assistants with a secure and structured way to explore and analyze data in [GreptimeDB](https://github.com/GreptimeTeam/greptimedb).\n- <img height=\"12\" width=\"12\" src=\"https://growi.org/assets/images/favicon.ico\" alt=\"GROWI Logo\" /> **[GROWI](https://github.com/growilabs/growi-mcp-server)** - Official MCP Server to integrate with GROWI APIs.\n- <img height=\"12\" width=\"12\" src=\"https://gyazo.com/favicon.ico\" alt=\"Gyazo Logo\" /> **[Gyazo](https://github.com/nota/gyazo-mcp-server)** - Search, fetch, upload, and interact with Gyazo images, including metadata and OCR data.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6374050260446c42f94dc90f/63d828be3e13d32ee6973f35_favicon-32x32.png\" alt=\"Harper Logo\" /> **[Harper](https://github.com/HarperDB/mcp-server)** - An MCP server providing an interface for MCP clients to access data within [Harper](https://www.harpersystems.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://www.herokucdn.com/favicons/favicon.ico\" alt=\"Heroku Logo\" /> **[Heroku](https://github.com/heroku/heroku-mcp-server)** - Interact with the Heroku Platform through LLM-driven tools for managing apps, add-ons, dynos, databases, and more.\n- <img height=\"12\" width=\"12\" src=\"https://heyoncall.com/favicon.ico\" alt=\"HeyOnCall Logo\" /> **[HeyOnCall](https://heyoncall.com/blog/mcp-server-for-paging-a-human)** - Page a human, sending critical or non-critical alerts to the free [HeyOnCall](https://heyoncall.com/) iOS or Android apps.\n- <img height=\"12\" width=\"12\" src=\"https://www.hiveflow.ai/favicon.ico\" alt=\"Hiveflow Logo\" /> **[Hiveflow](https://github.com/hiveflowai/hiveflow-mcp-server)** - Create, manage, and execute agentic AI workflows directly from your assistant.\n- <img height=\"12\" width=\"12\" src=\"https://hiveintelligence.xyz/favicon.ico\" alt=\"Hive Intelligence Logo\" /> **[Hive Intelligence](https://github.com/hive-intel/hive-crypto-mcp)** - Ultimate cryptocurrency MCP for AI assistants with unified access to crypto, DeFi, and Web3 analytics\n- <img height=\"12\" width=\"12\" src=\"https://img.alicdn.com/imgextra/i3/O1CN01d9qrry1i6lTNa2BRa_!!6000000004364-2-tps-218-200.png\" alt=\"Hologres Logo\" /> **[Hologres](https://github.com/aliyun/alibabacloud-hologres-mcp-server)** - Connect to a [Hologres](https://www.alibabacloud.com/en/product/hologres) instance, get table metadata, query and analyze data.\n- <img height=\"12\" width=\"12\" src=\"https://brew.sh/assets/img/favicon.ico\" alt=\"Homebrew Logo\" /> **[Homebrew](https://docs.brew.sh/MCP-Server)** Allows [Homebrew](https://brew.sh) users to run Homebrew commands locally.\n- <img height=\"12\" width=\"12\" src=\"https://www.honeycomb.io/favicon.ico\" alt=\"Honeycomb Logo\" /> **[Honeycomb](https://github.com/honeycombio/honeycomb-mcp)** Allows [Honeycomb](https://www.honeycomb.io/) Enterprise customers to query and analyze their data, alerts, dashboards, and more; and cross-reference production behavior with the codebase.\n- <img height=\"12\" width=\"12\" src=\"https://static.hsinfrastatic.net/StyleGuideUI/static-3.438/img/sprocket/favicon-32x32.png\" alt=\"HubSpot Logo\" /> **[HubSpot](https://developer.hubspot.com/mcp)** - Connect, manage, and interact with [HubSpot](https://www.hubspot.com/) CRM data\n- <img height=\"12\" width=\"12\" src=\"https://huggingface.co/datasets/huggingface/brand-assets/resolve/main/hf-logo.svg\" alt=\"HuggingFace Logo\" /> **[Hugging Face](https://huggingface.co/settings/mcp)** - Connect to the Hugging Face Hub APIs programmatically: semantic search for spaces and papers, exploration of datasets and models, and access to all compatible MCP Gradio tool spaces!\n- <img height=\"12\" width=\"12\" src=\"https://hunter.io/favicon.ico\" alt=\"Hunter Logo\" /> **[Hunter](https://github.com/hunter-io/hunter-mcp)** - Interact with the [Hunter API](https://hunter.io) to get B2B data using natural language.\n- <img height=\"12\" width=\"12\" src=\"https://app.hyperbolic.xyz/hyperbolic-logo.svg\" alt=\"Hyperbolic Labs Logo\" /> **[Hyperbolic](https://github.com/HyperbolicLabs/hyperbolic-mcp)** - Interact with Hyperbolic's GPU cloud, enabling agents and LLMs to view and rent available GPUs, SSH into them, and run GPU-powered workloads for you.\n- <img height=\"12\" width=\"12\" src=\"https://hyperbrowser-assets-bucket.s3.us-east-1.amazonaws.com/Hyperbrowser-logo.png\" alt=\"Hyperbrowsers23 Logo\" /> **[Hyperbrowser](https://github.com/hyperbrowserai/mcp)** - [Hyperbrowser](https://www.hyperbrowser.ai/) is the next-generation platform empowering AI agents and enabling effortless, scalable browser automation.\n- **[IBM wxflows](https://github.com/IBM/wxflows/tree/main/examples/mcp/javascript)** - Tool platform by IBM to build, test and deploy tools for any data source\n- <img height=\"12\" width=\"12\" src=\"https://www.getinboxzero.com/icon.png\" alt=\"Inbox Zero Logo\" /> **[Inbox Zero](https://github.com/elie222/inbox-zero/tree/main/apps/mcp-server)** - AI personal assistant for email [Inbox Zero](https://www.getinboxzero.com)\n- <img height=\"12\" width=\"12\" src=\"https://www.inflectra.com/Favicon.ico\" alt=\"Inflectra Logo\" /> **[Inflectra Spira](https://github.com/Inflectra/mcp-server-spira)** - Connect to your instance of the SpiraTest, SpiraTeam or SpiraPlan application lifecycle management platform by [Inflectra](https://www.inflectra.com)\n-  **[Inkeep](https://github.com/inkeep/mcp-server-python)** - RAG Search over your content powered by [Inkeep](https://inkeep.com)\n- <img height=\"12\" width=\"12\" src=\"https://integration.app/favicon.ico\" alt=\"Integration App Icon\" /> **[Integration App](https://github.com/integration-app/mcp-server)** - Interact with any other SaaS applications on behalf of your customers.\n- <img height=\"12\" width=\"12\" src=\"https://www.ip2location.io/favicon.ico\" alt=\"IP2Location.io Icon\" /> **[IP2Location.io](https://github.com/ip2location/mcp-ip2location-io)** - Interact with IP2Location.io API to retrieve the geolocation information for an IP address.\n- <img height=\"12\" width=\"12\" src=\"https://static.iplocate.io/custom/logo-square-rounded.png\" alt=\"IPLocate Icon\" /> **[IPLocate](https://github.com/iplocate/mcp-server-iplocate)** - Look up IP address geolocation, network information, detect proxies and VPNs, and find abuse contact details using [IPLocate.io](https://www.iplocate.io)\n- <img height=\"12\" width=\"12\" src=\"https://jellyfish.co/favicon.ico\" alt=\"Jellyfish Logo\" /> **[Jellyfish](https://github.com/Jellyfish-AI/jellyfish-mcp)** – Give your AI agent context about your team's software engineering allocations and workflow via the [Jellyfish](https://jellyfish.co) platform\n- <img height=\"12\" width=\"12\" src=\"https://cdn.simpleicons.org/jetbrains\" /> **[JetBrains](https://www.jetbrains.com/help/idea/mcp-server.html)** – Work on your code with JetBrains IDEs: IntelliJ IDEA, PhpStorm, etc.\n- <img height=\"12\" width=\"12\" src=\"https://speedmedia.jfrog.com/08612fe1-9391-4cf3-ac1a-6dd49c36b276/media.jfrog.com/wp-content/uploads/2019/04/20131046/Jfrog16-1.png\" alt=\"JFrog Logo\" /> **[JFrog](https://github.com/jfrog/mcp-jfrog)** - Model Context Protocol (MCP) Server for the [JFrog](https://jfrog.com/) Platform API, enabling repository management, build tracking, release lifecycle management, and more.\n- <img height=\"12\" width=\"12\" src=\"https://jenkins.io/images/logos/jenkins/jenkins.svg\" alt=\"Jenkins Logo\" /> **[Jenkins](https://plugins.jenkins.io/mcp-server/)** - Official Jenkins MCP Server plugin enabling AI assistants to manage builds, check job statuses, retrieve logs, and integrate with CI/CD pipelines through standardized MCP interface.\n- <img height=\"12\" width=\"12\" src=\"https://kagi.com/favicon.ico\" alt=\"Kagi Logo\" /> **[Kagi Search](https://github.com/kagisearch/kagimcp)** - Search the web using Kagi's search API\n- <img height=\"12\" width=\"12\" src=\"https://connection.keboola.com/favicon.ico\" alt=\"Keboola Logo\" /> **[Keboola](https://github.com/keboola/keboola-mcp-server)** - Build robust data workflows, integrations, and analytics on a single intuitive platform.\n- <img height=\"12\" width=\"12\" src=\"https://mcp.onkernel.com/favicon.svg\" alt=\"Kernel Logo\" /> **[Kernel](https://github.com/onkernel/kernel-mcp-server)** – Access Kernel's cloud‑based browsers via MCP.\n- <img height=\"12\" width=\"12\" src=\"https://keywordseverywhere.com/favicon.ico\" alt=\"Keywords Everywhere Logo\" /> **[Keywords Everywhere](https://api.keywordseverywhere.com/docs/#/mcp_integration)** – Access SEO data through the official Keywords Everywhere API MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://keywordspeopleuse.com/favicon.ico\" alt=\"KeywordsPeopleUse Logo\" /> **[KeywordsPeopleUse.com](https://github.com/data-skunks/kpu-mcp)** - Find questions people ask online with [KeywordsPeopleUse](https://keywordspeopleuse.com).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/4815054\" alt=\"Kintone Logo\" /> **[Kintone](https://github.com/kintone/mcp-server)** - The official local MCP server for [Kintone](https://kintone.com).\n- <img height=\"12\" width=\"12\" src=\"https://kirokuforms.com/favicon.svg\" alt=\"KirokuForms Logo\" /> **[KirokuForms](https://www.kirokuforms.com/ai/mcp)** - [KirokuForms](https://www.kirokuforms.com) is an AI-powered form platform combining professional form building with Human-in-the-Loop (HITL) capabilities. Create custom forms, collect submissions, and integrate human oversight into AI workflows through [MCP integration](https://kirokuforms.com/ai/mcp).\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" alt=\"Klavis Logo\" /> **[Klavis ReportGen](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/report_generation)** - Create professional reports from a simple user query.\n- <img height=\"12\" width=\"12\" src=\"https://www.klaviyo.com/media/Favicon-16by16.png\" alt=\"Klaviyo Logo\" /> **[Klaviyo](https://developers.klaviyo.com/en/docs/klaviyo_mcp_server)** - Interact with your [Klaviyo](https://www.klaviyo.com/) marketing data.\n- <img height=\"12\" width=\"12\" src=\"https://platform.kluster.ai/logo-light.svg\" alt=\"kluster.ai Logo\" /> **[kluster.ai](https://docs.kluster.ai/get-started/mcp/overview/)** - kluster.ai provides MCP servers that bring AI services directly into your development workflow, including guardrails like hallucination detection.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6347ea26001f0287c592ff91/649953ef7a9ffe1f3e492b5a_Knit%20Logo.svg\" alt=\"Knit Logo\" /> **[Knit MCP Server](https://developers.getknit.dev/docs/knit-mcp-server-getting-started)** - Production-ready remote MCP servers that enable you to connect with 10000+ tools across CRM, HRIS, Payroll, Accounting, ERP, Calendar, Expense Management, and Chat categories.\n- <img height=\"12\" width=\"12\" src=\"https://knock.app/favicon/favicon-dark.svg\" alt=\"Knock Logo\" /> **[Knock MCP Server](https://github.com/knocklabs/agent-toolkit#model-context-protocol-mcp)** - Send product and customer messaging across email, in-app, push, SMS, Slack, MS Teams.\n- <img height=\"12\" width=\"12\" src=\"https://kumo-sdk-public.s3.us-west-2.amazonaws.com/rfm-colabs/kumo_ai_logo.jpeg\" alt=\"Kumo Logo\" /> **[Kumo](https://github.com/kumo-ai/kumo-rfm-mcp)** - MCP Server to interact with KumoRFM, a foundation model for generating predictions from your relational data.\n- <img height=\"12\" width=\"12\" src=\"https://www.kurrent.io/favicon.ico\" alt=\"Kurrent Logo\" /> **[KurrentDB](https://github.com/kurrent-io/mcp-server)** - This is a simple MCP server to help you explore data and prototype projections faster on top of KurrentDB.\n- <img height=\"12\" width=\"12\" src=\"https://kuzudb.com/favicon.ico\" alt=\"Kuzu Logo\" /> **[Kuzu](https://github.com/kuzudb/kuzu-mcp-server)** - This server enables LLMs to inspect database schemas and execute queries on the provided Kuzu graph database. See [blog](https://blog.kuzudb.com/post/2025-03-23-kuzu-mcp-server/)) for a debugging use case.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/187484914\" alt=\"KWDB Logo\" /> **[KWDB](https://github.com/KWDB/kwdb-mcp-server)** - Reading, writing, querying, modifying data, and performing DDL operations with data in your KWDB Database.\n- <img height=\"12\" width=\"12\" src=\"https://labelstud.io/favicon-16x16.png\" alt=\"Label Studio Logo\" /> **[Label Studio](https://github.com/HumanSignal/label-studio-mcp-server)** - Open Source data labeling platform.\n- <img src=\"https://avatars.githubusercontent.com/u/188884511?s=48&v=4\" alt=\"Lambda Capture\" width=\"12\" height=\"12\"> **[Lambda Capture](https://github.com/lambda-capture/mcp-server)** - Macroeconomic Forecasts & Semantic Context from Federal Reserve, Bank of England, ECB.\n- <img src=\"https://www.lambdatest.com/resources/images/header/professional-service.svg\" alt=\"LambdaTest MCP server\" width=\"12\" height=\"12\"> **[LambdaTest](https://www.lambdatest.com/mcp)** - LambdaTest MCP Servers ranging from Accessibility, SmartUI, Automation, and HyperExecute allows you to connect AI assistants with your testing workflow, streamlining setup, analyzing failures, and generating fixes to speed up testing and improve efficiency.\n- <img height=\"12\" width=\"12\" src=\"https://langfuse.com/favicon.ico\" alt=\"Langfuse Logo\" /> **[Langfuse Prompt Management](https://github.com/langfuse/mcp-server-langfuse)** - Open-source tool for collaborative editing, versioning, evaluating, and releasing prompts.\n- <img height=\"12\" width=\"12\" src=\"https://laratranslate.com/favicon.ico\" alt=\"Lara Translate Logo\" /> **[Lara Translate](https://github.com/translated/lara-mcp)** - MCP Server for Lara Translate API, enabling powerful translation capabilities with support for language detection and context-aware translations.\n- <img height=\"12\" width=\"12\" src=\"https://last9.io/favicon.png\" alt=\"Last9 Logo\" /> **[Last9](https://github.com/last9/last9-mcp-server)** - Seamlessly bring real-time production context—logs, metrics, and traces—into your local environment to auto-fix code faster.\n- <img height=\"12\" width=\"12\" src=\"https://www.launchdarkly.com/favicon.ico\" alt=\"LaunchDarkly Logo\" /> **[LaunchDarkly](https://github.com/launchdarkly/mcp-server)** - LaunchDarkly is a continuous delivery platform that provides feature flags as a service and allows developers to iterate quickly and safely.\n- <img height=\"12\" width=\"12\" src=\"https://www.line.me/favicon-32x32.png\" alt=\"LINE Logo\" /> **[LINE](https://github.com/line/line-bot-mcp-server)** - Integrates the LINE Messaging API to connect an AI Agent to the LINE Official Account.\n- <img height=\"12\" width=\"12\" src=\"https://linear.app/favicon.ico\" alt=\"Linear Logo\" /> **[Linear](https://linear.app/docs/mcp)** - Search, create, and update Linear issues, projects, and comments.\n- <img height=\"12\" width=\"12\" src=\"https://lingo.dev/favicon.ico\" alt=\"Lingo.dev Logo\" /> **[Lingo.dev](https://github.com/lingodotdev/lingo.dev/blob/main/mcp.md)** - Make your AI agent speak every language on the planet, using [Lingo.dev](https://lingo.dev) Localization Engine.\n- <img height=\"12\" width=\"12\" src=\"https://ligo.ertiqah.com/favicon.avif\" alt=\"LiGo Logo\" /> **[LinkedIn MCP Runner](https://github.com/ertiqah/linkedin-mcp-runner)** - Write, edit, and schedule LinkedIn posts right from ChatGPT and Claude with [LiGo](https://ligo.ertiqah.com/).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/175112039?s=200&v=4\" alt=\"Linkup Logo\" /> **[Linkup](https://github.com/LinkupPlatform/js-mcp-server)** - (JS version) MCP server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/175112039?s=200&v=4\" alt=\"Linkup Logo\" /> **[Linkup](https://github.com/LinkupPlatform/python-mcp-server)** - (Python version) MCP server that provides web search capabilities through Linkup's advanced search API. This server enables AI assistants and development tools to perform intelligent web searches with natural language queries.\n- <img src=\"https://avatars.githubusercontent.com/u/149083471\" alt=\"Lippia.io\" width=\"12\" height=\"12\"> **[Lippia](https://github.com/Lippia-io/Lippia-MCP-Server/blob/main/getting-started.md)** - MCP Server to accelerate Test Automation using Lippia Framework.\n- <img src=\"https://gornschool.com/gorn.png\" alt=\"Lisply\" width=\"12\" height=\"12\"> **[Lisply](https://github.com/gornskew/lisply-mcp)** - Flexible frontend for compliant Lisp-speaking backends.\n- <img height=\"12\" width=\"12\" src=\"https://litmus.io/favicon.ico\" alt=\"Litmus.io Logo\" /> **[Litmus.io](https://github.com/litmusautomation/litmus-mcp-server)** - Official MCP server for configuring [Litmus](https://litmus.io) Edge for Industrial Data Collection, Edge Analytics & Industrial AI.\n- <img height=\"12\" width=\"12\" src=\"https://liveblocks.io/favicon.ico\" alt=\"Liveblocks Logo\" /> **[Liveblocks](https://github.com/liveblocks/liveblocks-mcp-server)** - Ready‑made features for AI & human collaboration—use this to develop your [Liveblocks](https://liveblocks.io) app quicker.\n- <img height=\"12\" width=\"12\" src=\"https://logfire.pydantic.dev/favicon.ico\" alt=\"Logfire Logo\" /> **[Logfire](https://github.com/pydantic/logfire-mcp)** - Provides access to OpenTelemetry traces and metrics through Logfire.\n- <img height=\"12\" width=\"12\" src=\"https://make.magicmealkits.com/favicon.ico\" alt=\"Magic Meal Kits Logo\" /> **[Magic Meal Kits](https://github.com/pureugong/mmk-mcp)** - Unleash Make's Full Potential by [Magic Meal Kits](https://make.magicmealkits.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.mailgun.com/favicon.ico\" alt=\"Mailgun Logo\" /> **[Mailgun](https://github.com/mailgun/mailgun-mcp-server)** - Interact with Mailgun API.\n- <img height=\"12\" width=\"12\" src=\"https://www.mailjet.com/favicon.ico\" alt=\"Mailjet Logo\" /> **[Mailjet](https://github.com/mailgun/mailjet-mcp-server)** - Official MCP server which allows AI agents to interact with contact, campaign, segmentation, statistics, workflow (and more) APIs from [Sinch Mailjet](https://www.mailjet.com).\n- <img height=\"12\" width=\"12\" src=\"https://www.make.com/favicon.ico\" alt=\"Make Logo\" /> **[Make](https://github.com/integromat/make-mcp-server)** - Turn your [Make](https://www.make.com/) scenarios into callable tools for AI assistants.\n- <img height=\"12\" width=\"12\" src=\"https://static-assets.mapbox.com/branding/favicon/v1/favicon.ico\" alt=\"Mapbox Logo\" /> **[Mapbox](https://github.com/mapbox/mcp-server)** - Unlock geospatial intelligence through Mapbox APIs like geocoding, POI search, directions, isochrones and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.mariadb.com/favicon.ico\" alt=\"MariaDB Logo\" /> **[MariaDB](https://github.com/mariadb/mcp)** - A standard interface for managing and querying MariaDB databases, supporting both standard SQL operations and advanced vector/embedding-based search.\n- <img height=\"14\" width=\"14\" src=\"https://raw.githubusercontent.com/rust-mcp-stack/mcp-discovery/refs/heads/main/docs/_media/mcp-discovery-logo.png\" alt=\"mcp-discovery logo\" /> **[MCP Discovery](https://github.com/rust-mcp-stack/mcp-discovery)** - A lightweight CLI tool built in Rust for discovering MCP server capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://googleapis.github.io/genai-toolbox/favicons/favicon.ico\" alt=\"MCP Toolbox for Databases Logo\" /> **[MCP Toolbox for Databases](https://github.com/googleapis/genai-toolbox)** - Open source MCP server specializing in easy, fast, and secure tools for Databases. Supports  AlloyDB, BigQuery, Bigtable, Cloud SQL, Dgraph, Looker, MySQL, Neo4j, Postgres, Spanner, and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.meilisearch.com/favicon.ico\" alt=\"Meilisearch Logo\" /> **[Meilisearch](https://github.com/meilisearch/meilisearch-mcp)** - Interact & query with Meilisearch (Full-text & semantic search API)\n- <img height=\"12\" width=\"12\" src=\"https://memgraph.com/favicon.png\" alt=\"Memgraph Logo\" /> **[Memgraph](https://github.com/memgraph/ai-toolkit/tree/main/integrations/mcp-memgraph)** - Query your data in [Memgraph](https://memgraph.com/) graph database.\n- <img height=\"12\" width=\"12\" src=\"https://www.mercadolibre.com.ar/favicon.ico\" alt=\"MercadoLibre Logo\" /> **[Mercado Libre](https://mcp.mercadolibre.com/)** - Mercado Libre's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.mercadopago.com/favicon.ico\" alt=\"MercadoPago Logo\" /> **[Mercado Pago](https://mcp.mercadopago.com/)** - Mercado Pago's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://metoro.io/static/images/logos/MetoroLogo.png\" alt=\"Metoro Logo\" /> **[Metoro](https://github.com/metoro-io/metoro-mcp-server)** - Query and interact with kubernetes environments monitored by Metoro\n- <img height=\"12\" width=\"12\" src=\"https://claritystatic.azureedge.net/images/logo.ico\" alt=\"Microsoft Clarity Logo\"/> **[Microsoft Clarity](https://github.com/microsoft/clarity-mcp-server)** - Official MCP Server to get your behavioral analytics data and insights from [Clarity](https://clarity.microsoft.com)\n- <img height=\"12\" width=\"12\" src=\"https://conn-afd-prod-endpoint-bmc9bqahasf3grgk.b01.azurefd.net/releases/v1.0.1735/1.0.1735.4099/commondataserviceforapps/icon.png\" alt=\"Microsoft Dataverse Logo\" /> **[Microsoft Dataverse](https://go.microsoft.com/fwlink/?linkid=2320176)** - Chat over your business data using NL - Discover tables, run queries, retrieve data, insert or update records, and execute custom prompts grounded in business knowledge and context.\n- <img height=\"12\" width=\"12\" src=\"https://learn.microsoft.com/favicon.ico\" alt=\"Microsoft Learn Logo\" /> **[Microsoft Learn Docs](https://github.com/microsoftdocs/mcp)** - An MCP server that provides structured access to Microsoft's official documentation. Retrieves accurate, authoritative, and context-aware technical content for code generation, question answering, and workflow grounding.\n- <img height=\"12\" width=\"12\" src=\"https://statics.teams.microsoft.com/hashedassets/favicon/prod/favicon-9f45b466.ico\" alt=\"Microsoft Teams Logo\" /> **[Microsoft Teams](https://devblogs.microsoft.com/microsoft365dev/announcing-the-updated-teams-ai-library-and-mcp-support/)** - Official Microsoft Teams AI Library with MCP support enabling advanced agent orchestration, multi-agent collaboration, and seamless integration with Teams messaging and collaboration features.\n- <img height=\"12\" width=\"12\" src=\"https://milvus.io/favicon-32x32.png\" /> **[Milvus](https://github.com/zilliztech/mcp-server-milvus)** - Search, Query and interact with data in your Milvus Vector Database.\n- <img src=\"https://www.mimilabs.ai/logos/mimilabsSquare.svg\" alt=\"mimilabs\" width=\"12\" height=\"12\"> **[mimilabs](https://www.mimilabs.ai/mcp)** - A US healthcare data discovery guide for 50+ gov sources and thousands of publicly available US healthcare datasets regarding gov-funded programs, policies, drug pricings, clinical trials, etc.\n- <img src=\"https://avatars.githubusercontent.com/u/94089762?s=48&v=4\" alt=\"Mobb\" width=\"12\" height=\"12\"> **[Mobb](https://github.com/mobb-dev/bugsy?tab=readme-ov-file#model-context-protocol-mcp-server)** - The [Mobb Vibe Shield](https://vibe.mobb.ai/) MCP server identifies and remediates vulnerabilities in both human and AI-written code, ensuring your applications remain secure without slowing development.\n- <img height=\"12\" width=\"12\" src=\"https://console.gomomento.com/favicon.ico\" /> **[Momento](https://github.com/momentohq/mcp-momento)** - Momento Cache lets you quickly improve your performance, reduce costs, and handle load at any scale.\n- <img height=\"12\" width=\"12\" src=\"https://www.monday.com/favicon.ico\" alt=\"Monday.com Logo\" /> **[Monday.com](https://github.com/mondaycom/mcp)** - Interact with Monday.com boards, items, accounts and work forms.\n- <img height=\"12\" width=\"12\" src=\"https://www.mongodb.com/favicon.ico\" /> **[MongoDB](https://github.com/mongodb-js/mongodb-mcp-server)** - Both MongoDB Community Server and MongoDB Atlas are supported.\n- <img height=\"12\" width=\"12\" src=\"https://moorcheh.ai/Moorcheh-mcp.ico\" alt=\"Moorcheh Logo\" /> **[Moorcheh](https://github.com/moorcheh-ai/moorcheh-mcp)** - Embed, store, and search your documents, and build secure chatbots and RAG systems with Moorcheh's information-theoretic semantic search engine\n- <img height=\"12\" width=\"12\" src=\"https://www.motherduck.com/favicon.ico\" alt=\"MotherDuck Logo\" /> **[MotherDuck](https://github.com/motherduckdb/mcp-server-motherduck)** - Query and analyze data with MotherDuck and local DuckDB\n- <img height=\"12\" width=\"12\" src=\"https://docs.mulesoft.com/_/img/favicon.ico\" alt=\"Mulesoft Logo\" /> **[Mulesoft](https://www.npmjs.com/package/@mulesoft/mcp-server)** - Build, deploy, and manage MuleSoft applications with natural language, directly inside any compatible IDE.\n- <img height=\"12\" width=\"12\" src=\"https://www.multiplayer.app/favicon-32x32.png\" alt=\"Multiplayer Logo\" /> **[Multiplayer](https://www.multiplayer.app/docs/ai/mcp-server)** - Analyze your full stack session recordings easily. Record a bug with Multiplayer, analyze and fix it with LLM\n-  **[Nango](https://docs.nango.dev/guides/use-cases/mcp-server)** - Integrate your AI agent with 500+ APIs: Auth, custom tools, and observability. Open-source.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/38020270\" alt=\"NanoVMs Logo\" /> **[NanoVMs](https://github.com/nanovms/ops-mcp)** - Easily Build and Deploy unikernels to any cloud.\n- <img height=\"12\" width=\"12\" src=\"https://needle-ai.com/images/needle-logo-orange-2-rounded.png\" alt=\"Needle AI Logo\" /> **[Needle](https://github.com/needle-ai/needle-mcp)** - Production-ready RAG out of the box to search and retrieve data from your own documents.\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j](https://github.com/neo4j-contrib/mcp-neo4j/)** - Neo4j graph database server (schema + read/write-cypher) and separate graph database backed memory\n- <img height=\"12\" width=\"12\" src=\"https://knowall.ai/favicon.ico\" alt=\"Neo4j Agent Memory Logo\" /> **[Neo4j Agent Memory](https://github.com/knowall-ai/mcp-neo4j-agent-memory)** - Memory management for AI agents using Neo4j knowledge graphs\n- <img height=\"12\" width=\"12\" src=\"https://neo4j.com/favicon.ico\" alt=\"Neo4j Logo\" /> **[Neo4j GDS](https://github.com/neo4j-contrib/gds-agent)** - Neo4j graph data science server with comprehensive graph algorithms that enables complex graph reasoning and Q&A.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/183852044?s=48&v=4\" alt=\"Neon Logo\" /> **[Neon](https://github.com/neondatabase/mcp-server-neon)** - Interact with the Neon serverless Postgres platform\n- <img height=\"12\" width=\"12\" src=\"https://app.usenerve.com/favicon.ico\" alt=\"Nerve Logo\" /> **[Nerve](https://github.com/nerve-hq/nerve-mcp-server)** - Search and Act on all your company data across all your SaaS apps via [Nerve](https://www.usenerve.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.netdata.cloud/favicon-32x32.png\" alt=\"Netdata Logo\" /> **[Netdata](https://github.com/netdata/netdata/blob/master/src/web/mcp/README.md)** - Discovery, exploration, reporting and root cause analysis using all observability data, including metrics, logs, systems, containers, processes, and network connections\n- <img height=\"12\" width=\"12\" src=\"https://www.netlify.com/favicon/icon.svg\" alt=\"Netlify Logo\" /> **[Netlify](https://docs.netlify.com/welcome/build-with-ai/netlify-mcp-server/)** - Create, build, deploy, and manage your websites with Netlify web platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.thenile.dev/favicon.ico\" alt=\"Nile Logo\" /> **[Nile](https://github.com/niledatabase/nile-mcp-server)** - An MCP server that talks to Nile - Postgres re-engineered for B2B apps. Manage and query databases, tenants, users, auth using LLMs\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/208441832?s=400&v=4\" alt=\"Nodit Logo\" /> **[Nodit](https://github.com/noditlabs/nodit-mcp-server)** - Official Nodit MCP Server enabling access to multi-chain RPC Nodes and Data APIs for blockchain data.\n- <img height=\"12\" width=\"12\" src=\"https://app.norman.finance/favicons/favicon-32x32.png\" alt=\"Norman Logo\" /> **[Norman Finance](https://github.com/norman-finance/norman-mcp-server)** - MCP server for managing accounting and taxes with Norman Finance.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/4792552?s=200&v=4\" alt=\"Notion Logo\" /> **[Notion](https://github.com/makenotion/notion-mcp-server#readme)** - This project implements an MCP server for the Notion API.\n-  **[Nutrient](https://github.com/PSPDFKit/nutrient-dws-mcp-server)** - Create, Edit, Sign, Extract Documents using Natural Language\n- <img height=\"12\" width=\"12\" src=\"https://nx.dev/favicon/favicon.svg\" alt=\"Nx Logo\" /> **[Nx](https://github.com/nrwl/nx-console/blob/master/apps/nx-mcp)** - Makes [Nx's understanding](https://nx.dev/features/enhance-AI) of your codebase accessible to LLMs, providing insights into the codebase architecture, project relationships and runnable tasks thus allowing AI to make precise code suggestions.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/82347605?s=48&v=4\" alt=\"OceanBase Logo\" /> **[OceanBase](https://github.com/oceanbase/mcp-oceanbase)** - MCP Server for OceanBase database and its tools\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[Octagon](https://github.com/OctagonAI/octagon-mcp-server)** - Deliver real-time investment research with extensive private and public market data.\n- <img height=\"12\" width=\"12\" src=\"https://octoeverywhere.com/img/logo.png\" alt=\"OctoEverywhere Logo\" /> **[OctoEverywhere](https://github.com/OctoEverywhere/mcp)** - A 3D Printing MCP server that allows for querying for live state, webcam snapshots, and 3D printer control.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/211697972\" alt=\"Offorte Logo\" /> **[Offorte](https://github.com/offorte/offorte-mcp-server#readme)** - Offorte Proposal Software official MCP server enables creation and sending of business proposals.\n-  **[OlaMaps](https://pypi.org/project/ola-maps-mcp-server)** - Official Ola Maps MCP Server for services like geocode, directions, place details and many more.\n- <img height=\"12\" width=\"12\" src=\"https://www.olostep.com/favicon.ico\" alt=\"Olostep\" /> **[Olostep](https://github.com/olostep/olostep-mcp-server)** - Search, scrape and crawl content from web. Real-time results in clean markdown.\n- <img height=\"12\" width=\"12\" src=\"https://static.onlyoffice.com/images/favicon.ico\" alt=\"ONLYOFFICE DocSpace\" /> **[ONLYOFFICE DocSpace](https://github.com/ONLYOFFICE/docspace-mcp)** - Interact with [ONLYOFFICE DocSpace](https://www.onlyoffice.com/docspace.aspx) API to create rooms, manage files and folders.\n- **[OMOP MCP](https://github.com/OHNLP/omop_mcp)** - Map clinical terminology to OMOP concepts using LLMs for healthcare data standardization.\n- <img height=\"12\" width=\"12\" src=\"https://op.gg/favicon.ico\" alt=\"OP.GG Logo\" /> **[OP.GG](https://github.com/opgginc/opgg-mcp)** - Access real-time gaming data across popular titles like League of Legends, TFT, and Valorant, offering champion analytics, esports schedules, meta compositions, and character statistics.\n- <img height=\"12\" width=\"12\" src=\"https://www.openfort.io/img/icon.svg\" alt=\"Openfort\" /> **[Openfort](https://github.com/openfort-xyz/mcp)** - Connect your AI to Openfort's smart wallet, auth, and project infrastructure.\n- <img height=\"12\" width=\"12\" src=\"https://open-metadata.org/favicon.ico\" alt=\"OpenMetadata\" /> **[OpenMetadata](https://open-metadata.org/mcp)** - The first Enterprise-grade MCP server for metadata\n- <img height=\"12\" width=\"12\" src=\"https://opensearch.org/wp-content/uploads/2025/01/opensearch_mark_default.svg\" alt=\"OpenSearch Logo\" /> **[OpenSearch](https://github.com/opensearch-project/opensearch-mcp-server-py)** -  MCP server that enables AI agents to perform search and analytics use cases on data stored in [OpenSearch](https://opensearch.org/).\n- <img height=\"12\" width=\"12\" src=\"https://app.opslevel.com/favicon.ico\" alt=\"OpsLevel\" /> **[OpsLevel](https://github.com/opslevel/opslevel-mcp)** - Official MCP Server for [OpsLevel](https://www.opslevel.com).\n- <img height=\"12\" width=\"12\" src=\"https://optuna.org/assets/img/favicon.ico\" alt=\"Optuna Logo\" /> **[Optuna](https://github.com/optuna/optuna-mcp)** - Official MCP server enabling seamless orchestration of hyperparameter search and other optimization tasks with [Optuna](https://optuna.org/).\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/oracle/mcp/refs/heads/main/oracle.svg\" alt=\"Oracle Logo\" /> **[Oracle](https://docs.oracle.com/en/database/oracle/sql-developer-command-line/25.2/sqcug/starting-and-managing-sqlcl-mcp-server.html#GUID-5F916B5D-8670-42BD-9F8B-D3D2424EC47E)** - Official [Oracle Database: SQLcl ](https://www.oracle.com/database/sqldeveloper/technologies/sqlcl/download/) MCP server enabling all access to any Oracle Database via native MCP support directly in SQLcl.\n- <img height=\"12\" width=\"12\" src=\"https://orshot.com/brand/favicon.svg\" alt=\"Orshot Logo\" /> **[Orshot](https://github.com/rishimohan/orshot-mcp-server)** - Official [Orshot](https://orshot.com) MCP server to dynamically generate images from custom design templates.\n- <img height=\"12\" width=\"12\" src=\"https://oxylabs.io/favicon.ico\" alt=\"Oxylabs Logo\" /> **[Oxylabs](https://github.com/oxylabs/oxylabs-mcp)** - Scrape websites with Oxylabs Web API, supporting dynamic rendering and parsing for structured data extraction.\n- <img height=\"12\" width=\"12\" src=\"https://developer.paddle.com/favicon.svg\" alt=\"Paddle Logo\" /> **[Paddle](https://github.com/PaddleHQ/paddle-mcp-server)** - Interact with the Paddle API. Manage product catalog, billing and subscriptions, and reports.\n- **[PaddleOCR](https://paddlepaddle.github.io/PaddleOCR/latest/en/version3.x/deployment/mcp_server.html)** - An MCP server that brings enterprise-grade OCR and document parsing capabilities to AI applications.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.brandfolder.io/YX9ETPCP/at/266537g8kh6mmvt24jvsjb/P-GreenRGB.svg\" alt=\"PagerDuty Logo\" /> **[PagerDuty](https://github.com/PagerDuty/pagerduty-mcp-server)** - Interact with your PagerDuty account, allowing you to manage incidents, services, schedules, and more directly from your MCP-enabled client.\n- **[Pagos](https://github.com/pagos-ai/pagos-mcp)** - Interact with the Pagos API. Query Credit Card BIN Data with more to come.\n- <img height=\"12\" width=\"12\" src=\"https://paiml.com/favicon.ico\" alt=\"PAIML Logo\" /> **[PAIML MCP Agent Toolkit](https://github.com/paiml/paiml-mcp-agent-toolkit)** - Professional project scaffolding toolkit with zero-configuration AI context generation, template generation for Rust/Deno/Python projects, and hybrid neuro-symbolic code analysis.\n- <img height=\"12\" width=\"12\" src=\"https://app.paperinvest.io/favicon.svg\" alt=\"Paper Logo\" /> **[Paper](https://github.com/paperinvest/mcp-server)** - Realistic paper trading platform with market simulation, 22 broker emulations, and professional tools for risk-free trading practice. First trading platform with MCP integration.\n- **[Patronus AI](https://github.com/patronus-ai/patronus-mcp-server)** - Test, evaluate, and optimize AI agents and RAG apps\n- <img height=\"12\" width=\"12\" src=\"https://mcp.paubox.com/paubox.png\" alt=\"Paubox Logo\" />**[Paubox](https://mcp.paubox.com)** - Official MCP server which allows AI agents to interact with Paubox Email API. HITRUST certified.\n- <img height=\"12\" width=\"12\" src=\"https://www.paypalobjects.com/webstatic/icon/favicon.ico\" alt=\"PayPal Logo\" /> **[PayPal](https://mcp.paypal.com)** - PayPal's official MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://ww2-secure.pearl.com/static/pearl/pearl-logo.svg\" alt=\"Pearl Logo\" /> **[Pearl](https://github.com/Pearl-com/pearl_mcp_server)** - Official MCP Server to interact with Pearl API. Connect your AI Agents with 12,000+ certified experts instantly.\n- <img height=\"12\" width=\"12\" src=\"https://www.perplexity.ai/favicon.ico\" alt=\"Perplexity Logo\" /> **[Perplexity](https://github.com/ppl-ai/modelcontextprotocol)** - An MCP server that connects to Perplexity's Sonar API, enabling real-time web-wide research in conversational AI.\n- <img height=\"12\" width=\"12\" src=\"https://www.foxit.com/favicon.ico\" alt=\"Foxit Logo\" /> **[PDFActionInspector](https://github.com/foxitsoftware/PDFActionInspector/tree/develop)** - A Model Context Protocol server for extracting and analyzing JavaScript Actions from PDF files. Provides comprehensive security analysis to detect malicious PDF behaviors, hidden scripts, and potential security threats through AI-assisted risk assessment.\n- <img height=\"12\" width=\"12\" src=\"https://www.pga.com/favicon.ico\" alt=\"PGA Logo\" /> **[PGA (Golf)](https://mcp.pga.com)** - PGA's official MCP Server for all things golf-related. Find a coach, play golf, improve your game, and more.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/54333248\" /> **[Pinecone](https://github.com/pinecone-io/pinecone-mcp)** - [Pinecone](https://docs.pinecone.io/guides/operations/mcp-server)'s developer MCP Server assist developers in searching documentation and managing data within their development environment.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/54333248\" /> **[Pinecone Assistant](https://github.com/pinecone-io/assistant-mcp)** - Retrieves context from your [Pinecone Assistant](https://docs.pinecone.io/guides/assistant/mcp-server) knowledge base.\n- <img height=\"12\" width=\"12\" src=\"https://pipedream.com/favicon.ico\" alt=\"Pipedream Logo\" /> **[Pipedream](https://github.com/PipedreamHQ/pipedream/tree/master/modelcontextprotocol)** - Connect with 2,500 APIs with 8,000+ prebuilt tools.\n- <img height=\"12\" width=\"12\" src=\"https://playcanvas.com/static-assets/images/icons/favicon.png\" alt=\"PlayCanvas Logo\" /> **[PlayCanvas](https://github.com/playcanvas/editor-mcp-server)** - Create interactive 3D web apps with the PlayCanvas Editor.\n- <img height=\"12\" width=\"12\" src=\"https://playwright.dev/img/playwright-logo.ico\" alt=\"Playwright Logo\" /> **[Playwright](https://github.com/microsoft/playwright-mcp)** — Browser automation MCP server using Playwright to run tests, navigate pages, capture screenshots, scrape content, and automate web interactions reliably.\n- <img height=\"12\" width=\"12\" src=\"https://www.plugged.in/favicon.ico\" alt=\"Plugged.in Logo\" /> **[Plugged.in](https://github.com/VeriTeknik/pluggedin-mcp)** - A comprehensive proxy that combines multiple MCP servers into a single MCP. It provides discovery and management of tools, prompts, resources, and templates across servers, plus a playground for debugging when building MCP servers.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/port-labs/port-mcp-server/blob/main/assets/port_symbol_white.svg\" alt=\"Port Logo\" /> **[Port IO](https://github.com/port-labs/port-mcp-server)** - Access and manage your software catalog to improve service quality and compliance.\n- **[PostHog](https://github.com/posthog/mcp)** - Interact with PostHog analytics, feature flags, error tracking and more with the official PostHog MCP server.\n- **[Postman API](https://github.com/postmanlabs/postman-api-mcp)** - Manage your Postman resources using the [Postman API](https://www.postman.com/postman/postman-public-workspace/collection/i2uqzpp/postman-api).\n- <img height=\"12\" width=\"12\" src=\"https://powerdrill.ai/_next/static/media/powerdrill.0fa27d00.webp\" alt=\"Powerdrill Logo\" /> **[Powerdrill](https://github.com/powerdrillai/powerdrill-mcp)** - An MCP server that provides tools to interact with Powerdrill datasets, enabling smart AI data analysis and insights.\n- <img height=\"12\" width=\"12\" src=\"https://www.prisma.io/images/favicon-32x32.png\" alt=\"Prisma Logo\" /> **[Prisma](https://www.prisma.io/docs/postgres/mcp-server)** - Create and manage Prisma Postgres databases\n- <img height=\"12\" width=\"12\" src=\"https://probe.dev/favicon.ico\" alt=\"Probe.dev Logo\" /> **[Probe.dev](https://docs.probe.dev/guides/mcp-integration)** - Comprehensive media analysis and validation powered by [Probe.dev](https://probe.dev). Hosted MCP server with FFprobe, MediaInfo, and Probe Report analysis capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/FGzpihs4MxmSJhyGZ6n7f2Xj0.png\" alt=\"Prode.ai Logo\" /> **[ProdE](https://github.com/CuriousBox-AI/ProdE-mcp)** - Your 24/7 production engineer that preserves context across multiple codebases.\n- <img height=\"12\" width=\"12\" src=\"https://programintegrity.org/wp-content/uploads/2024/07/PIA-Favicon.svg\" alt=\"Program Integrity Alliance (PIA) Logo\" /> **[Program Integrity Alliance (PIA)](https://github.com/Program-Integrity-Alliance/pia-mcp-local)** - Local and Hosted MCP servers providing AI-friendly access to U.S. Government Open Datasets. Also available on [Docker MCP Catalog](https://hub.docker.com/mcp/explore?search=PIA). See [our website](https://programintegrity.org) for more details.\n- <img height=\"12\" width=\"12\" src=\"https://github.com/newtype-01/prompthouse-mcp/raw/main/prompthouse-logo-12x12.png\" alt=\"PromptHouse Logo\" /> **[PromptHouse](https://github.com/newtype-01/prompthouse-mcp)** - Personal prompt library with MCP integration for AI clients.\n- <img height=\"12\" width=\"12\" src=\"https://docs.speedscale.com/img/favicon.ico\" alt=\"proxymock Logo\" /> **[proxymock](https://docs.speedscale.com/proxymock/reference/mcp/)** - An MCP server that automatically generates tests and mocks by recording a live app.\n- <img src=\"https://www.pubnub.com/favicon/favicon-32x32.png\" alt=\"PubNub\" width=\"12\" height=\"12\"> **[PubNub](https://github.com/pubnub/pubnub-mcp-server)** - Retrieves context for developing with PubNub SDKs and calling APIs.\n- <img height=\"12\" width=\"12\" src=\"https://www.pulumi.com/images/favicon.ico\" alt=\"Pulumi Logo\" /> **[Pulumi](https://github.com/pulumi/mcp-server)** - Deploy and manage cloud infrastructure using [Pulumi](https://pulumi.com).\n- <img height=\"12\" width=\"12\" src=\"https://pure.md/favicon.png\" alt=\"Pure.md Logo\" /> **[Pure.md](https://github.com/puremd/puremd-mcp)** - Reliably access web content in markdown format with [pure.md](https://pure.md) (bot detection avoidance, proxy rotation, and headless JS rendering built in).\n- <img height=\"12\" width=\"12\" src=\"https://put.io/images/favicon.ico\" alt=\"Put.io Logo\" /> **[Put.io](https://github.com/putdotio/putio-mcp-server)** - Interact with your Put.io account to download torrents.\n- <img height=\"12\" width=\"12\" src=\"https://qdrant.tech/img/brand-resources-logos/logomark.svg\" /> **[Qdrant](https://github.com/qdrant/mcp-server-qdrant/)** - Implement semantic memory layer on top of the Qdrant vector search engine\n- <img src=\"https://api.qoretechnologies.com/api/public/apps/Qorus/qorus-logo.svg\" alt=\"Qorus\" width=\"12\" height=\"12\"> **[Qorus](https://qoretechnologies.com/manual/qorus/current/qorus/sysarch.html#mcp_server)** - Connect to any application, system, or technology and automate your business processes without coding and with AI\n- <img src=\"https://avatars.githubusercontent.com/u/18053493?s=200&v=4\" alt=\"Qonto\" width=\"12\" height=\"12\"> **[Qonto](https://github.com/qonto/qonto-mcp-server)** - Access and interact your Qonto account through LLMs using MCP.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/3912814\" alt=\"QuantConnect Logo\" /> **[QuantConnect](https://github.com/QuantConnect/mcp-server)** - Interact with your [QuantConnect](https://www.quantconnect.com/) account to update projects, write strategies, run backtest, and deploying strategies to production live-trading.\n- **[Quickchat AI](https://github.com/incentivai/quickchat-ai-mcp)** - Launch your conversational [Quickchat AI](https://quickchat.ai) agent as an MCP to give AI apps real-time access to its Knowledge Base and conversational capabilities\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/165178062\" alt=\"Ragie Logo\" /> **[Ragie](https://github.com/ragieai/ragie-mcp-server/)** - Retrieve context from your [Ragie](https://www.ragie.ai) (RAG) knowledge base connected to integrations like Google Drive, Notion, JIRA and more.\n- <img height=\"12\" width=\"12\" src=\"https://www.ramp.com/favicon.ico\" /> **[Ramp](https://github.com/ramp-public/ramp-mcp)** - Interact with [Ramp](https://ramp.com)'s Developer API to run analysis on your spend and gain insights leveraging LLMs\n- **[Raygun](https://github.com/MindscapeHQ/mcp-server-raygun)** - Interact with your crash reporting and real using monitoring data on your Raygun account\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/CU1m0xFonUl76ZeaW0IdkQ0M.png\" alt=\"Razorpay Logo\" /> **[Razorpay](https://github.com/razorpay/razorpay-mcp-server)** - Razorpay's official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://www.recraft.ai/favicons/icon.svg\" alt=\"Recraft Logo\" /> **[Recraft](https://github.com/recraft-ai/mcp-recraft-server)** - Generate raster and vector (SVG) images using [Recraft](https://recraft.ai). Also you can edit, upscale images, create your own styles, and vectorize raster images\n- <img height=\"12\" width=\"12\" src=\"https://www.redhat.com/favicon.ico\" alt=\"Red Hat Logo\" /> **[Red Hat Insights](https://github.com/RedHatInsights/insights-mcp)** - Interact with [Red Hat Insights](https://www.redhat.com/en/technologies/management/insights) - build images, manage vulnerabilities, or view targeted recommendations.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1529926\" alt=\"Redis Logo\" /> **[Redis](https://github.com/redis/mcp-redis/)** - The Redis official MCP Server offers an interface to manage and search data in Redis.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1529926\" alt=\"Redis Logo\" /> **[Redis Cloud API](https://github.com/redis/mcp-redis-cloud/)** - The Redis Cloud API MCP Server allows you to manage your Redis Cloud resources using natural language.\n- <img src=\"https://avatars.githubusercontent.com/u/149024635\" alt=\"Reexpress\" width=\"12\" height=\"12\"> **[Reexpress](https://github.com/ReexpressAI/reexpress_mcp_server)** - Enable Similarity-Distance-Magnitude statistical verification for your search, software, and data science workflows\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/68a872edf3df6064de547670/68b7f089c45a6083ce25acb1_reflag-favicon-32.png\" alt=\"Reflag\" /> **[Reflag](https://github.com/reflagcom/javascript/tree/main/packages/cli#model-context-protocol)** - Create and manage feature flags using [Reflag](https://reflag.com)\n- <img height=\"12\" width=\"12\" src=\"https://www.reltio.com/wp-content/uploads/2024/03/cropped-cropped-Reltio_Light_Mode_Dark_Mode_Favicon-270x270.png\" alt=\"Reltio Logo\" /> **[Reltio](https://github.com/reltio-ai/reltio-mcp-server)** - A lightweight, plugin-based MCP server designed to perform advanced entity matching with language models in Reltio environments.\n- <img height=\"12\" width=\"12\" src=\"https://www.rember.com/favicon.ico\" alt=\"Rember Logo\" /> **[Rember](https://github.com/rember/rember-mcp)** - Create spaced repetition flashcards in [Rember](https://rember.com) to remember anything you learn in your chats\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/114033652\" alt=\"Render Logo\" /> **[Render](https://render.com/docs/mcp-server)** - The official Render MCP server: spin up new services, run queries against your databases, and debug rapidly with direct access to service metrics and logs.\n- <img height=\"12\" width=\"12\" src=\"https://reportportal.io/favicon.ico\" alt=\"ReportPortal Logo\" /> **[ReportPortal](https://github.com/reportportal/reportportal-mcp-server)** - explore and analyze automated test results from [ReportPortal](https://reportportal.io) using your favourite LLM.\n- <img height=\"12\" width=\"12\" src=\"http://nonica.io/Nonica-logo.ico\" alt=\"Nonica Logo\" /> **[Revit](https://github.com/NonicaTeam/AI-Connector-for-Revit)** - Connect and interact with your Revit models live.\n- <img height=\"12\" width=\"12\" src=\"https://ui.rilldata.com/favicon.png\" alt=\"Rill Data Logo\" /> **[Rill Data](https://docs.rilldata.com/explore/mcp)** - Interact with Rill Data to query and analyze your data.\n- <img height=\"12\" width=\"12\" src=\"https://riza.io/favicon.ico\" alt=\"Riza logo\" /> **[Riza](https://github.com/riza-io/riza-mcp)** - Arbitrary code execution and tool-use platform for LLMs by [Riza](https://riza.io)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.foundation.roblox.com/current/RobloxStudio.ico\" alt=\"Roblox Studio\" /> **[Roblox Studio](https://github.com/Roblox/studio-rust-mcp-server)** - Roblox Studio MCP Server, create and manipulate scenes, scripts in Roblox Studio\n- <img src=\"https://hyper3d.ai/favicon.ico\" alt=\"Rodin\" width=\"12\" height=\"12\"> **[Rodin](https://github.com/DeemosTech/rodin-api-mcp)** - Generate 3D Models with [Hyper3D Rodin](https://hyper3d.ai)\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/66b7de6a233c04f4dac200a6/66bed52680d689629483c18b_faviconV2%20(2).png\" alt=\"Root Signals Logo\" /> **[Root Signals](https://github.com/root-signals/root-signals-mcp)** - Improve and quality control your outputs with evaluations using LLM-as-Judge\n- **[Routine](https://github.com/routineco/mcp-server)** - MCP server to interact with [Routine](https://routine.co/): calendars, tasks, notes, etc.\n- <img height=\"12\" width=\"12\" src=\"https://platform.composio.dev/favicon.ico\" alt=\"Composio Logo\"> **[Rube](https://github.com/ComposioHQ/Rube)** - Rube is a Model Context Protocol (MCP) server that connects your AI tools to 500+ apps like Gmail, Slack, GitHub, and Notion. Simply install it in your AI client, authenticate once with your apps, and start asking your AI to perform real actions like \"Send an email\" or \"Create a task.\"\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/safedep/.github/refs/heads/main/assets/logo/1.png\" alt=\"SafeDep Logo\" /> **[SafeDep](https://github.com/safedep/vet/blob/main/docs/mcp.md)** - SafeDep `vet-mcp` helps in  vetting open source packages for security risks—such as vulnerabilities and malicious code—before they're used in your project, especially with AI-generated code suggestions.\n- <img height=\"12\" width=\"12\" src=\"https://waf-ce.chaitin.cn/favicon.ico\" alt=\"SafeLine Logo\" /> **[SafeLine](https://github.com/chaitin/SafeLine/tree/main/mcp_server)** - [SafeLine](https://safepoint.cloud/landing/safeline) is a self-hosted WAF(Web Application Firewall) to protect your web apps from attacks and exploits.\n- <img height=\"12\" width=\"12\" src=\"https://scrapi.tech/favicon.ico\" alt=\"ScrAPI Logo\" /> **[ScrAPI](https://github.com/DevEnterpriseSoftware/scrapi-mcp)** - Web scraping using [ScrAPI](https://scrapi.tech). Extract website content that is difficult to access because of bot detection, captchas or even geolocation restrictions.\n- <img height=\"12\" width=\"12\" src=\"https://upnorthmedia.co/favicon.ico\" alt=\"Up North Media Logo\" /> **[ScreenshotMCP](https://github.com/upnorthmedia/ScreenshotMCP/)** - A Model Context Protocol MCP server for capturing website screenshots with full page, element, and device size features.\n- <img height=\"12\" width=\"12\" src=\"https://screenshotone.com/favicon.ico\" alt=\"ScreenshotOne Logo\" /> **[ScreenshotOne](https://github.com/screenshotone/mcp/)** - Render website screenshots with [ScreenshotOne](https://screenshotone.com/)\n- <img height=\"12\" width=\"12\" src=\"https://pics.fatwang2.com/56912e614b35093426c515860f9f2234.svg\" alt=\"Search1API Logo\" /> **[Search1API](https://github.com/fatwang2/search1api-mcp)** - One API for Search, Crawling, and Sitemaps\n- <img height=\"12\" width=\"12\" src=\"https://www.searchunify.com/favicon.ico\" alt=\"SearchUnify Logo\" /> **[SearchUnify](https://github.com/searchunify/su-mcp/)** - SearchUnify MCP Server (su-mcp) enables seamless integration of SearchUnify with Claude Desktop\n- <img height=\"12\" width=\"12\" src=\"https://secureframe.com/favicon.ico\" alt=\"Secureframe Logo\" /> **[Secureframe](https://github.com/secureframe/secureframe-mcp-server)** - Query security controls, monitor compliance tests, and access audit data across SOC 2, ISO 27001, CMMC, FedRAMP, and other frameworks from [Secureframe](https://secureframe.com).\n- <img height=\"12\" width=\"12\" src=\"https://semgrep.dev/favicon.ico\" alt=\"Semgrep Logo\" /> **[Semgrep](https://github.com/semgrep/mcp)** - Enable AI agents to secure code with [Semgrep](https://semgrep.dev/).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/187640573?s=48&v=4\" alt=\"Sequa Logo\" /> **[Sequa.AI](https://github.com/sequa-ai/sequa-mcp)** - Stop stitching context for Copilot and Cursor. With [Sequa MCP](https://github.com/sequa-ai/sequa-mcp), your AI tools know all your codebases and docs out of the box.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/6372338e5477e047032b37a5/64f85e6388a2a5c8c9525b4d_favLogo.png\" alt=\"Shortcut Logo\" /> **[Shortcut](https://github.com/useshortcut/mcp-server-shortcut)** - Access and implement all of your projects and tasks (Stories) from [Shortcut](https://shortcut.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.singlestore.com/favicon-32x32.png?v=277b9cbbe31e8bc416504cf3b902d430\"/> **[SingleStore](https://github.com/singlestore-labs/mcp-server-singlestore)** - Interact with the SingleStore database platform\n- <img height=\"12\" width=\"12\" src=\"https://smartbear.com/smartbear/assets/img/favicon.png\" alt=\"SmartBear Logo\" /> **[SmartBear](https://github.com/SmartBear/smartbear-mcp)** - Provides access to multiple capabilities across SmartBear's API Hub, Test Hub, and Insight Hub, all through [dedicated tools and resources](https://developer.smartbear.com/smartbear-mcp/docs/mcp-server).\n- <img src=\"https://smooth-operator.online/logo48.png\" alt=\"Smooth Operator\" width=\"12\" height=\"12\"> **[Smooth Operator](https://smooth-operator.online/agent-tools-api-docs/toolserverdocs)** - Tools to automate Windows via AI Vision, Mouse, Keyboard, Automation Trees, Webbrowser\n- <img height=\"12\" width=\"12\" src=\"https://app.snyk.io/bundle/favicon-faj49uD9.png\" alt=\"Snyk Logo\" /> **[Snyk](https://github.com/snyk/snyk-ls/blob/main/mcp_extension/README.md)** - Enhance security posture by embedding [Snyk](https://snyk.io/) vulnerability scanning directly into agentic workflows.\n- <img height=\"12\" width=\"12\" src=\"https://www.sonarsource.com/favicon.ico\" alt=\"SonarQube Logo\" /> **[SonarQube](https://github.com/SonarSource/sonarqube-mcp-server)** - Enables seamless integration with [SonarQube](https://www.sonarsource.com/) Server or Cloud and allows for code snippet analysis within the agent context.\n- <img src=\"https://sophtron.com/favicon.ico\" alt=\"Sophtron\" width=\"12\" height=\"12\"> **[Sophtron](https://github.com/sophtron/Sophtron-Integration/tree/main/modelcontextprotocol)** - Connect to your bank, credit card, utilities accounts to retrieve account balances and transactions with [Sophtron Bank Integration](https://sophtron.com).\n- <img height=\"12\" width=\"12\" src=\"https://www.stackhawk.com/wp-content/uploads/2025/03/icon-512x512-2-150x150.png\" alt=\"StackHawk Logo\" /> **[StackHawk](https://github.com/stackhawk/stackhawk-mcp)** - Use [StackHawk](https://www.stackhawk.com/) to test for and FIX security problems in your code or vibe coded app.\n- <img height=\"12\" width=\"12\" src=\"https://www.starrocks.io/favicon.ico\" alt=\"StarRocks Logo\" /> **[StarRocks](https://github.com/StarRocks/mcp-server-starrocks)** - Interact with [StarRocks](https://www.starrocks.io/)\n- <img height=\"12\" width=\"12\" src=\"https://downloads.steadybit.com/logomark.svg\" alt=\"Steadybit Logo\" /> **[Steadybit](https://github.com/steadybit/mcp)** - Interact with [Steadybit](https://www.steadybit.com/)\n- <img height=\"12\" width=\"12\" src=\"https://steuerboard.net/favicon.ico\" alt=\"Steuerboard Logo\" /> **[Steuerboard](https://github.com/steuerboard/steuerboard-mcp-typescript)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/22632046?s=200&v=4\" alt=\"Storybook Logo\" /> **[Storybook](https://github.com/storybookjs/addon-mcp)** - Interact with [Storybook](https://storybook.js.org/) to automate UI component testing and documentation\n- <img height=\"12\" width=\"12\" src=\"https://stripe.com/favicon.ico\" alt=\"Stripe Logo\" /> **[Stripe](https://github.com/stripe/agent-toolkit)** - Interact with Stripe API\n- <img height=\"12\" width=\"12\" src=\"https://sunra.ai/favicon.ico\" alt=\"Sunra AI Logo\" /> **[Sunra AI](https://github.com/sunra-ai/sunra-clients/tree/main/mcp-server)** - Search for and run AI models on [Sunra.ai](https://sunra.ai). Discover models, create video, image, and 3D model content, track their status, and manage the generated media.\n- <img height=\"12\" width=\"12\" src=\"https://supabase.com/favicon/favicon.ico\" alt=\"Supabase Logo\" /> **[Supabase](https://github.com/supabase-community/supabase-mcp)** - Interact with Supabase: Create tables, query data, deploy edge functions, and more.\n- <img height=\"12\" width=\"12\" src=\"https://supadata.ai/favicon.ico\" alt=\"Supadata Logo\" /> **[Supadata](https://github.com/supadata-ai/mcp)** - Official MCP server for [Supadata](https://supadata.ai) - YouTube, TikTok, X and Web data for makers.\n- <img height=\"12\" width=\"12\" src=\"https://d12w4pyrrczi5e.cloudfront.net/archive/50eb154ab859c63a8f1c850f9fe094e25d35e929/images/favicon.ico\" alt=\"Tako Logo\" /> **[Tako](https://github.com/TakoData/tako-mcp)** - Use natural language to search [Tako](https://trytako.com) for real-time financial, sports, weather, and public data with visualization\n- <img height=\"12\" width=\"12\" src=\"https://tavily.com/favicon.ico\" alt=\"Tavily Logo\" /> **[Tavily](https://github.com/tavily-ai/tavily-mcp)** - Search engine for AI agents (search + extract) powered by [Tavily](https://tavily.com/)\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/10522416?s=200&v=4\" alt=\"Telnyx Logo\" /> **[Telnyx](https://github.com/team-telnyx/telnyx-mcp-server)** - Official MCP server for building AI-powered communication apps. Create voice assistants, send SMS campaigns, manage phone numbers, and integrate real-time messaging with enterprise-grade reliability. Includes remote [streamable-http](https://api.telnyx.com/v2/mcp) and [sse](https://api.telnyx.com/mcp/sse) servers.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/1615979?s=200&v=4\" alt=\"Teradata Logo\" /> **[Teradata](https://github.com/Teradata/teradata-mcp-server)** - This MCP Server support tools and prompts for multi task data analytics on a [Teradata](https://teradata.com) platform.\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/hashicorp/terraform-mcp-server/main/public/images/Terraform-LogoMark_onDark.svg\" alt=\"Terraform Logo\" /> **[Terraform](https://github.com/hashicorp/terraform-mcp-server)** - Seamlessly integrate with Terraform ecosystem, enabling advanced automation and interaction capabilities for Infrastructure as Code (IaC) development powered by [Terraform](https://www.hashicorp.com/en/products/terraform)\n- <img height=\"12\" width=\"12\" src=\"https://www.textin.com/favicon.png\" alt=\"TextIn Logo\" /> **[TextIn](https://github.com/intsig-textin/textin-mcp)** - An MCP server for the [TextIn](https://www.textin.com/?from=github_mcp) API, is a tool for extracting text and performing OCR on documents, it also supports converting documents into Markdown\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/106156665?s=200\" alt=\"Thena Logo\" /> **[Thena](https://mcp.thena.ai)** - Thena's MCP server for enabling users and AI agents to interact with Thena's services and manage customers across different channels such as Slack, Email, Web, Discord etc.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/24291394?v=4\" alt=\"ThingsBoard\" /> **[ThingsBoard](https://github.com/thingsboard/thingsboard-mcp)** - The ThingsBoard MCP Server provides a natural language interface for LLMs and AI agents to interact with your ThingsBoard IoT platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.lg.com/favicon.ico\" alt=\"ThinQ Logo\" /> **[ThinQ Connect](https://github.com/thinq-connect/thinqconnect-mcp)** - Interact with LG ThinQ smart home devices and appliances through the ThinQ Connect MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://thirdweb.com/favicon.ico\" alt=\"Thirdweb Logo\" /> **[Thirdweb](https://github.com/thirdweb-dev/ai/tree/main/python/thirdweb-mcp)** - Read/write to over 2k blockchains, enabling data querying, contract analysis/deployment, and transaction execution, powered by [Thirdweb](https://thirdweb.com/)\n- <img height=\"12\" width=\"12\" src=\"https://www.thoughtspot.com/favicon-16x16.png\" alt=\"ThoughtSpot Logo\" /> **[ThoughtSpot](https://github.com/thoughtspot/mcp-server)** - AI is the new BI. A dedicated data analyst for everyone on your team. Bring [ThoughtSpot](https://thoughtspot.com) powers into Claude or any MCP host.\n- <img height=\"12\" width=\"12\" src=\"https://tianji.msgbyte.com/img/dark-brand.svg\" alt=\"Tianji Logo\" /> **[Tianji](https://github.com/msgbyte/tianji/tree/master/apps/mcp-server)** - Interact with Tianji platform whatever selfhosted or cloud platform, powered by [Tianji](https://tianji.msgbyte.com/).\n- <img height=\"12\" width=\"12\" src=\"https://www.pingcap.com/favicon.ico\" alt=\"TiDB Logo\" /> **[TiDB](https://github.com/pingcap/pytidb)** - MCP Server to interact with TiDB database platform.\n- <img height=\"12\" width=\"12\" src=\"https://www.tinybird.co/favicon.ico\" alt=\"Tinybird Logo\" /> **[Tinybird](https://github.com/tinybirdco/mcp-tinybird)** - Interact with Tinybird serverless ClickHouse platform\n- <img height=\"12\" width=\"12\" src=\"https://b2729162.smushcdn.com/2729162/wp-content/uploads/2023/10/cropped-Favicon-1-192x192.png?lossy=1&strip=1&webp=1\" alt=\"Tldv Logo\" /> **[Tldv](https://gitlab.com/tldv/tldv-mcp-server)** - Connect your AI agents to Google-Meet, Zoom & Microsoft Teams through [tl;dv](https://tldv.io)\n- <img height=\"12\" width=\"12\" src=\"https://www.todoist.com/static/favicon-32x32.png\" alt=\"Todoist Logo\" /> **[Todoist](https://github.com/doist/todoist-ai)** - Search, add, and update [Todoist](https://todoist.com) tasks, projects, sections, comments, and more.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.tokenmetrics.com/logo.svg\" alt=\"Token Metrics Logo\" /> **[Token Metrics](https://github.com/token-metrics/mcp)** - [Token Metrics](https://www.tokenmetrics.com/) integration for fetching real-time crypto market data, trading signals, price predictions, and advanced analytics.\n- <img height=\"12\" width=\"12\" src=\"https://di8m9w6rqrh5d.cloudfront.net/2G3TRwfv1w3GTLfmT7Dmco1VddoFTI5P/1920_6b7e7ec2-d897-4cd7-94f3-46a8301212c3.png\" alt=\"TomTom Logo\" /> **[TomTom-MCP](https://github.com/tomtom-international/tomtom-mcp)** - The [TomTom](https://www.tomtom.com/) MCP Server simplifies geospatial development by providing seamless access to TomTom's location services, including search, routing, traffic and static maps data.\n- <img height=\"12\" width=\"12\" src=\"https://images.thetradeagent.ai/trade_agent/logo.svg\" alt=\"Trade Agent Logo\" /> **[Trade Agent](https://github.com/Trade-Agent/trade-agent-mcp)** - Execute stock and crypto trades on your brokerage via [Trade Agent](https://thetradeagent.ai)\n-  **[Twelve Data](https://github.com/twelvedata/mcp)** — Integrate your AI agents with real-time and historical financial market data through our official [Twelve Data](https://twelvedata.com) MCP server.\n- <img height=\"12\" width=\"12\" src=\"https://www.twilio.com/content/dam/twilio-com/core-assets/social/favicon-16x16.png\" alt=\"Twilio Logo\" /> **[Twilio](https://github.com/twilio-labs/mcp)** - Interact with [Twilio](https://www.twilio.com/en-us) APIs to send SMS messages, manage phone numbers, configure your account, and more.\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/91520705?s=48&v=4\" alt=\"Tencent RTC Logo\" /> **[Tencent RTC](https://github.com/Tencent-RTC/mcp)** - The MCP Server enables AI IDEs to more effectively understand and use [Tencent's Real-Time Communication](https://trtc.io/) SDKs and APIs, which significantly streamlines the process for developers to build audio/video call applications.\n- <img height=\"12\" width=\"12\" src=\"https://uberall.com/media/favicon.svg\" alt=\"Uberall Logo\" /> **[Uberall](https://github.com/uberall/uberall-mcp-server)** – Manage multi - location presence, including listings, reviews, and social posting, via [uberall](https://uberall.com).\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/91906527\" alt=\"Unblocked Logo\" /> **[Unblocked](https://docs.getunblocked.com/unblocked-mcp)** Help your AI-powered IDEs generate faster, more accurate code by giving them access to context from Slack, Confluence, Google Docs, JIRA, and more with [Unblocked](https://getunblocked.com).\n- <img height=\"12\" width=\"12\" src=\"https://unifai.network/favicon.ico\" alt=\"UnifAI Logo\" /> **[UnifAI](https://github.com/unifai-network/unifai-mcp-server)** - Dynamically search and call tools using [UnifAI Network](https://unifai.network)\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/plcQevjrOYnyriuGw90NfQBPoQ.jpg\" alt=\"Unstructured Logo\" /> **[Unstructured](https://github.com/Unstructured-IO/UNS-MCP)** - Set up and interact with your unstructured data processing workflows in [Unstructured Platform](https://unstructured.io)\n- <img height=\"12\" width=\"12\" src=\"https://upstash.com/icons/favicon-32x32.png\" alt=\"Upstash Logo\" /> **[Upstash](https://github.com/upstash/mcp-server)** - Manage Redis databases and run Redis commands on [Upstash](https://upstash.com/) with natural language.\n-  **[Vantage](https://github.com/vantage-sh/vantage-mcp-server)** - Interact with your organization's cloud cost spend.\n- <img height=\"12\" width=\"12\" src=\"https://mcp.variflight.com/favicon.ico\" alt=\"VariFlight Logo\" /> **[VariFlight](https://github.com/variflight/variflight-mcp)** - VariFlight's official MCP server provides tools to query flight information, weather data, comfort metrics, the lowest available fares, and other civil aviation-related data.\n- <img height=\"12\" width=\"12\" src=\"https://docs.octagonagents.com/logo.svg\" alt=\"Octagon Logo\" /> **[VCAgents](https://github.com/OctagonAI/octagon-vc-agents)** - Interact with investor agents—think Wilson or Thiel—continuously updated with market intel.\n- **[Vectorize](https://github.com/vectorize-io/vectorize-mcp-server/)** - [Vectorize](https://vectorize.io) MCP server for advanced retrieval, Private Deep Research, Anything-to-Markdown file extraction and text chunking.\n- <img height=\"12\" width=\"12\" src=\"https://static.verbwire.com/favicon-16x16.png\" alt=\"Verbwire Logo\" /> **[Verbwire](https://github.com/verbwire/verbwire-mcp-server)** - Deploy smart contracts, mint NFTs, manage IPFS storage, and more through the Verbwire API\n- <img height=\"12\" width=\"12\" src=\"http://vercel.com/favicon.ico\" alt=\"Vercel Logo\" /> **[Vercel](https://vercel.com/docs/mcp/vercel-mcp)** - Access logs, search docs, and manage projects and deployments.\n- <img height=\"12\" width=\"12\" src=\"https://verodat.io/assets/favicon-16x16.png\" alt=\"Verodat Logo\" /> **[Verodat](https://github.com/Verodat/verodat-mcp-server)** - Interact with Verodat AI Ready Data platform\n- <img height=\"12\" width=\"12\" src=\"https://www.veyrax.com/favicon.ico\" alt=\"VeyraX Logo\" /> **[VeyraX](https://github.com/VeyraX/veyrax-mcp)** - Single tool to control all 100+ API integrations, and UI components\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/174736222?s=200&v=4\" alt=\"VictoriaMetrics Logo\" /> **[VictoriaMetrics](https://github.com/VictoriaMetrics-Community/mcp-victoriametrics)** - Comprehensive integration with [VictoriaMetrics APIs](https://docs.victoriametrics.com/victoriametrics/url-examples/) and [documentation](https://docs.victoriametrics.com/) for monitoring, observability, and debugging tasks related to your VictoriaMetrics instances.\n- <img height=\"12\" width=\"12\" src=\"https://framerusercontent.com/images/ijlYG00LOcMD6zR1XLMxHbAwZkM.png\" alt=\"VideoDB Director\" /> **[VideoDB Director](https://github.com/video-db/agent-toolkit/tree/main/modelcontextprotocol)** - Create AI-powered video workflows including automatic editing, content moderation, voice cloning, highlight generation, and searchable video moments—all accessible via simple APIs and intuitive chat-based interfaces.\n- <img height=\"12\" width=\"12\" src=\"https://landing.ai/wp-content/uploads/2024/04/cropped-favicon-192x192.png\" alt=\"LandingAI VisionAgent\" /> **[VisionAgent MCP](https://github.com/landing-ai/vision-agent-mcp)** - A simple MCP server that enables your LLM to better reason over images, video and documents.\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/mckinsey/vizro/main/vizro-core/docs/assets/images/favicon.png\" alt=\"Vizro Logo\" /> **[Vizro](https://github.com/mckinsey/vizro/tree/main/vizro-mcp)** - Tools and templates to create validated and maintainable data charts and dashboards\n- <img height=\"12\" width=\"12\" src=\"https://wavespeed.ai/logo.webp\" alt=\"WaveSpeed Logo\" /> **[WaveSpeed](https://github.com/WaveSpeedAI/mcp-server)** - WaveSpeed MCP server providing AI agents with image and video generation capabilities.\n- <img height=\"12\" width=\"12\" src=\"https://waystation.ai/images/logo.svg\" alt=\"WayStation Logo\" /> **[WayStation](https://github.com/waystation-ai/mcp)** - Universal MCP server to connect to popular productivity tools such as Notion, Monday, AirTable, and many more\n- <img height=\"12\" width=\"12\" src=\"https://static.whatsapp.net/rsrc.php/v3/yz/r/ujTY9i_Jhs1.png\" alt=\"WhatsApp Business Logo\" /> **[WhatsApp Business](https://medium.com/@wassenger/introducing-whatsapp-mcp-ai-connector-3d393b52d1b0)** - WhatsApp Business MCP connector enabling AI agents to send messages, manage conversations, access templates, and integrate with WhatsApp Business API for automated customer communication.\n- <img height=\"12\" width=\"12\" src=\"https://www.webflow.com/favicon.ico\" alt=\"Webflow Logo\"> **[Webflow](https://github.com/webflow/mcp-server)** - Interact with Webflow sites, pages, and collections\n- <img height=\"12\" width=\"12\" src=\"https://webscraping.ai/favicon.ico\" alt=\"WebScraping.AI Logo\" /> **[WebScraping.AI](https://github.com/webscraping-ai/webscraping-ai-mcp-server)** - Interact with **[WebScraping.AI](https://WebScraping.AI)** for web data extraction and scraping\n- <img height=\"12\" width=\"12\" src=\"https://winston-app-production-public.s3.us-east-1.amazonaws.com/winston-ai-favicon-light.svg\" alt=\"Winston.AI Logo\" /> **[Winston AI](https://github.com/gowinston-ai/winston-ai-mcp-server)** - AI detector MCP server with industry leading accuracy rates in detecting use of AI in text and images. The [Winston AI](https://gowinston.ai) MCP server also offers a robust plagiarism checker to help maintain integrity.\n- <img height=\"12\" width=\"12\" src=\"https://www.xero.com/favicon.ico\" alt=\"Xero Logo\" /> **[Xero](https://github.com/XeroAPI/xero-mcp-server)** - Interact with the accounting data in your business using our official MCP server\n- <img height=\"12\" width=\"12\" src=\"https://storage.yandexcloud.net/ydb-www-prod-site-assets/favicon-202305/favicon.ico\" alt=\"YDB Logo\" /> **[YDB](https://github.com/ydb-platform/ydb-mcp)** - Query [YDB](https://ydb.tech/) databases\n- <img height=\"12\" width=\"12\" src=\"https://fe-resource.yeelight.com/logo-black.jpeg\" alt=\"Yeelight Logo\" /> **[Yeelight MCP Server](https://github.com/Yeelight/yeelight-iot-mcp)** - The official [Yeelight MCP Server](https://github.com/Yeelight/yeelight-iot-mcp) enables users to control and query their [Yeelight](https://en.yeelight.com/) smart devices using natural language, offering a seamless and efficient human-AI interaction experience.\n- <img height=\"12\" width=\"12\" src=\"https://cdn.prod.website-files.com/632cd328ed2b485519c3f689/6334977a5d1a542102d4b9b5_favicon-32x32.png\" alt=\"YepCode Logo\" /> **[YepCode](https://github.com/yepcode/mcp-server-js)** - Run code in a secure, scalable sandbox environment with full support for dependencies, secrets, logs, and access to APIs or databases. Powered by [YepCode](https://yepcode.io)\n- <img height=\"12\" width=\"12\" src=\"https://www.yugabyte.com/favicon-16x16.png\" alt=\"YugabyteDB Logo\" /> **[YugabyteDB](https://github.com/yugabyte/yugabytedb-mcp-server)** -  MCP Server to interact with your [YugabyteDB](https://www.yugabyte.com/) database\n- <img height=\"12\" width=\"12\" src=\"https://avatars.githubusercontent.com/u/14069894\" alt=\"Yunxin Logo\" /> **[Yunxin](https://github.com/netease-im/yunxin-mcp-server)** - An MCP server that connects to Yunxin's IM/RTC/DATA Open-API\n- <img height=\"12\" width=\"12\" src=\"https://cdn.zapier.com/zapier/images/favicon.ico\" alt=\"Zapier Logo\" /> **[Zapier](https://zapier.com/mcp)** - Connect your AI Agents to 8,000 apps instantly.\n- <img height=\"12\" width=\"12\" src=\"https://www.zenable.app/zenable_light.svg\" alt=\"Zenable Logo\" /> **[Zenable](https://docs.zenable.io/integrations/mcp/getting-started)** - Clean up sloppy AI code and prevent vulnerabilities\n- **[ZenML](https://github.com/zenml-io/mcp-zenml)** - Interact with your MLOps and LLMOps pipelines through your [ZenML](https://www.zenml.io) MCP server\n- <img height=\"12\" width=\"12\" src=\"https://www.zine.ai/images/zine-logo.png\" alt=\"Zine Logo\" /> **[Zine](https://www.zine.ai)** - Your memory, everywhere AI goes. Think iPhoto for your knowledge - upload and curate. Like ChatGPT but portable - context that travels with you.\n- <img height=\"12\" width=\"12\" src=\"https://zizai.work/images/logo.jpg\" alt=\"ZIZAI Logo\" /> **[ZIZAI Recruitment](https://github.com/zaiwork/mcp)** - Interact with the next-generation intelligent recruitment platform for employees and employers, powered by [ZIZAI Recruitment](https://zizai.work).\n\n### 🌎 Community Servers\n\nA growing set of community-developed and maintained servers demonstrates various applications of MCP across different domains.\n\n> [!NOTE]\n> Community servers are **untested** and should be used at **your own risk**. They are not affiliated with or endorsed by Anthropic.\n\n- **[1mcpserver](https://github.com/particlefuture/1mcpserver)** - MCP of MCPs. Automatically discover, configure, and add MCP servers on your local machine.\n- **[1Panel](https://github.com/1Panel-dev/mcp-1panel)** - MCP server implementation that provides 1Panel interaction.\n- **[A2A](https://github.com/GongRzhe/A2A-MCP-Server)** - An MCP server that bridges the Model Context Protocol (MCP) with the Agent-to-Agent (A2A) protocol, enabling MCP-compatible AI assistants (like Claude) to seamlessly interact with A2A agents.\n- **[Ableton Live](https://github.com/Simon-Kansara/ableton-live-mcp-server)** - an MCP server to control Ableton Live.\n- **[Ableton Live](https://github.com/ahujasid/ableton-mcp)** (by ahujasid) - Ableton integration allowing prompt enabled music creation.\n- **[Actor Critic Thinking](https://github.com/aquarius-wing/actor-critic-thinking-mcp)** - Actor-critic thinking for performance evaluation\n- **[Adobe Commerce](https://github.com/rafaelstz/adobe-commerce-dev-mcp)** — MCP to interact with Adobe Commerce GraphQL API, including orders, products, customers, etc.\n- **[ADR Analysis](https://github.com/tosin2013/mcp-adr-analysis-server)** - AI-powered Architectural Decision Records (ADR) analysis server that provides architectural insights, technology stack detection, security checks, and TDD workflow enhancement for software development projects.\n- **[AgentBay](https://github.com/Michael98671/agentbay)** - An MCP server for providing serverless cloud infrastructure for AI agents.\n- **[AgentMode](https://www.agentmode.app)** - Connect to dozens of databases, data warehouses, Github & more, from a single MCP server.  Run the Docker image locally, in the cloud, or on-premise.\n- **[AI Agent Marketplace Index](https://github.com/AI-Agent-Hub/ai-agent-marketplace-index-mcp)** - MCP server to search more than 5000+ AI agents and tools of various categories from [AI Agent Marketplace Index](http://www.deepnlp.org/store/ai-agent) and monitor traffic of AI Agents.\n- **[AI Tasks](https://github.com/jbrinkman/valkey-ai-tasks)** - Let the AI manage complex plans with integrated task management and tracking tools. Supports STDIO, SSE and Streamable HTTP transports.\n- **[ai-Bible](https://github.com/AdbC99/ai-bible)** - Search the bible reliably and repeatably [ai-Bible Labs](https://ai-bible.com)\n- **[Airbnb](https://github.com/openbnb-org/mcp-server-airbnb)** - Provides tools to search Airbnb and get listing details.\n- **[Airflow](https://github.com/yangkyeongmo/mcp-server-apache-airflow)** - An MCP Server that connects to [Apache Airflow](https://airflow.apache.org/) using official python client.\n- **[Airtable](https://github.com/domdomegg/airtable-mcp-server)** - Read and write access to [Airtable](https://airtable.com/) databases, with schema inspection.\n- **[Airtable](https://github.com/felores/airtable-mcp)** - Airtable Model Context Protocol Server.\n- **[Algorand](https://github.com/GoPlausible/algorand-mcp)** - A comprehensive MCP server for tooling interactions (40+) and resource accessibility (60+) plus many useful prompts for interacting with the Algorand blockchain.\n- **[Amadeus](https://github.com/donghyun-chae/mcp-amadeus)** (by donghyun-chae) - An MCP server to access, explore, and interact with Amadeus Flight Offers Search API for retrieving detailed flight options, including airline, times, duration, and pricing data.\n- **[Amazon Ads](https://github.com/MarketplaceAdPros/amazon-ads-mcp-server)** - MCP Server that provides interaction capabilities with Amazon Advertising through [MarketplaceAdPros](https://marketplaceadpros.com)/\n- **[AniList](https://github.com/yuna0x0/anilist-mcp)** (by yuna0x0) - An MCP server to interact with AniList API, allowing you to search for anime and manga, retrieve user data, and manage your watchlist.\n- **[Anki](https://github.com/scorzeth/anki-mcp-server)** - An MCP server for interacting with your [Anki](https://apps.ankiweb.net) decks and cards.\n- **[Anki](https://github.com/nietus/anki-mcp)** - MCP server to run locally with Anki and Ankiconnect. Supports creating, updating, searching and filtering cards and decks. Include mass update and other advanced tools.\n- **[AntV Chart](https://github.com/antvis/mcp-server-chart)** - A Model Context Protocol server for generating 15+ visual charts using [AntV](https://github.com/antvis).\n- **[Any Chat Completions](https://github.com/pyroprompts/any-chat-completions-mcp)** - Interact with any OpenAI SDK Compatible Chat Completions API like OpenAI, Perplexity, Groq, xAI and many more.\n- **[Apache Gravitino(incubating)](https://github.com/datastrato/mcp-server-gravitino)** - Allow LLMs to explore metadata of structured data and unstructured data with Gravitino, and perform data governance tasks including tagging/classification.\n- **[API Lab MCP](https://github.com/atototo/api-lab-mcp)** - Transform Claude into your AI-powered API testing laboratory. Test, debug, and document APIs through natural conversation with authentication support, response validation, and performance metrics.\n- **[APIWeaver](https://github.com/GongRzhe/APIWeaver)** - An MCP server that dynamically creates MCP  servers from web API configurations. This allows you to easily integrate any REST API, GraphQL endpoint, or web service into an MCP-compatible tool that can be used by AI assistants like Claude.\n- **[Apollo IO MCP Server](https://github.com/AgentX-ai/apollo-io-mcp-server)** - apollo.io mcp server. Get/enrich contact data for people and organizations agentically.\n- **[Apple Books](https://github.com/vgnshiyer/apple-books-mcp)** - Interact with your library on Apple Books, manage your book collection, summarize highlights, notes, and much more.\n- **[Apple Calendar](https://github.com/Omar-v2/mcp-ical)** - An MCP server that allows you to interact with your macOS Calendar through natural language, including features such as event creation, modification, schedule listing, finding free time slots etc.\n- **[Apple Docs](https://github.com/kimsungwhee/apple-docs-mcp)** - A powerful Model Context Protocol (MCP) server that provides seamless access to Apple Developer Documentation through natural language queries. Search, explore, and get detailed information about Apple frameworks, APIs, sample code, and more directly in your AI-powered development environment.\n- **[Apple Script](https://github.com/peakmojo/applescript-mcp)** - MCP server that lets LLM run AppleScript code to to fully control anything on Mac, no setup needed.\n- **[APT MCP](https://github.com/GdMacmillan/apt-mcp-server)** - MCP server which runs debian package manager (apt) commands for you using ai agents.\n- **[Aranet4](https://github.com/diegobit/aranet4-mcp-server)** - MCP Server to manage your Aranet4 CO2 sensor. Fetch data and store in a local SQLite. Ask questions about historical data.\n- **[ArangoDB](https://github.com/ravenwits/mcp-server-arangodb)** - MCP Server that provides database interaction capabilities through [ArangoDB](https://arangodb.com/).\n- **[ArangoDB Graph](https://github.com/PCfVW/mcp-arangodb-async)** - Async-first Python architecture, wrapping the official [python-arango driver](https://github.com/arangodb/python-arango) with graph management capabilities, content conversion utilities (JSON, Markdown, YAML and Table), backup/restore functionality, and graph analytics capabilities; the 33 MCP tools use strict [Pydantic](https://github.com/pydantic/pydantic) validation.\n- **[Arduino](https://github.com/vishalmysore/choturobo)** - MCP Server that enables AI-powered robotics using Claude AI and Arduino (ESP32) for real-world automation and interaction with robots.\n- **[arXiv API](https://github.com/prashalruchiranga/arxiv-mcp-server)** - An MCP server that enables interacting with the arXiv API using natural language.\n- **[arxiv-latex-mcp](https://github.com/takashiishida/arxiv-latex-mcp)** - MCP server that fetches and processes arXiv LaTeX sources for precise interpretation of mathematical expressions in papers.\n- **[Atlassian](https://github.com/sooperset/mcp-atlassian)** - Interact with Atlassian Cloud products (Confluence and Jira) including searching/reading Confluence spaces/pages, accessing Jira issues, and project metadata.\n- **[Atlassian Server (by phuc-nt)](https://github.com/phuc-nt/mcp-atlassian-server)** - An MCP server that connects AI agents (Cline, Claude Desktop, Cursor, etc.) to Atlassian Jira & Confluence, enabling data queries and actions through the Model Context Protocol.\n- **[Attestable MCP](https://github.com/co-browser/attestable-mcp-server)** - An MCP server running inside a trusted execution environment (TEE) via Gramine, showcasing remote attestation using [RA-TLS](https://gramine.readthedocs.io/en/stable/attestation.html). This allows an MCP client to verify the server before connecting.\n- **[Audius](https://github.com/glassBead-tc/audius-mcp-atris)** - Audius + AI = Atris. Interact with fans, stream music, tip your favorite artists, and more on Audius: all through Claude.\n- **[AutoML](https://github.com/emircansoftware/MCP_Server_DataScience)** – An MCP server for data analysis workflows including reading, preprocessing, feature engineering, model selection, visualization, and hyperparameter tuning.\n- **[AX-Platform](https://github.com/AX-MCP/PaxAI?tab=readme-ov-file#mcp-setup-guides)** - AI Agent collaboration platform. Collaborate on tasks, share context, and coordinate workflows.\n- **[AWS](https://github.com/rishikavikondala/mcp-server-aws)** - Perform operations on your AWS resources using an LLM.\n- **[AWS Athena](https://github.com/lishenxydlgzs/aws-athena-mcp)** - An MCP server for AWS Athena to run SQL queries on Glue Catalog.\n- **[AWS Cognito](https://github.com/gitCarrot/mcp-server-aws-cognito)** - An MCP server that connects to AWS Cognito for authentication and user management.\n- **[AWS Cost Explorer](https://github.com/aarora79/aws-cost-explorer-mcp-server)** - Optimize your AWS spend (including Amazon Bedrock spend) with this MCP server by examining spend across regions, services, instance types and foundation models ([demo video](https://www.youtube.com/watch?v=WuVOmYLRFmI&feature=youtu.be)).\n- **[AWS Resources Operations](https://github.com/baryhuang/mcp-server-aws-resources-python)** - Run generated python code to securely query or modify any AWS resources supported by boto3.\n- **[AWS S3](https://github.com/aws-samples/sample-mcp-server-s3)** - A sample MCP server for AWS S3 that flexibly fetches objects from S3 such as PDF documents.\n- **[AWS SES](https://github.com/aws-samples/sample-for-amazon-ses-mcp)** Sample MCP Server for Amazon SES (SESv2). See [AWS blog post](https://aws.amazon.com/blogs/messaging - and-targeting/use-ai-agents-and-the-model-context-protocol-with-amazon-ses/) for more details.\n- **[Azure ADX](https://github.com/pab1it0/adx-mcp-server)** - Query and analyze Azure Data Explorer databases.\n- **[Azure DevOps](https://github.com/Vortiago/mcp-azure-devops)** - An MCP server that provides a bridge to Azure DevOps services, enabling AI assistants to query and manage work items.\n- **[Azure MCP Hub](https://github.com/Azure-Samples/mcp)** - A curated list of all MCP servers and related resources for Azure developers by **[Arun Sekhar](https://github.com/achandmsft)**\n- **[Azure OpenAI DALL-E 3 MCP Server](https://github.com/jacwu/mcp-server-aoai-dalle3)** - An MCP server for Azure OpenAI DALL-E 3 service to generate image from text.\n- **[Azure Wiki Search](https://github.com/coder-linping/azure-wiki-search-server)** - An MCP that enables AI to query the wiki hosted on Azure Devops Wiki.\n- **[Baidu AI Search](https://github.com/baidubce/app-builder/tree/master/python/mcp_server/ai_search)** - Web search with Baidu Cloud's AI Search\n- **[BambooHR MCP](https://github.com/encoreshao/bamboohr-mcp)** - An MCP server that interfaces with the BambooHR APIs, providing access to employee data, time tracking, and HR management features.\n- **[Base Free USDC Transfer](https://github.com/magnetai/mcp-free-usdc-transfer)** - Send USDC on [Base](https://base.org) for free using Claude AI! Built with [Coinbase CDP](https://docs.cdp.coinbase.com/mpc-wallet/docs/welcome).\n- **[Basic Memory](https://github.com/basicmachines-co/basic-memory)** - Local-first knowledge management system that builds a semantic graph from Markdown files, enabling persistent memory across conversations with LLMs.\n- **[BGG MCP](https://github.com/kkjdaniel/bgg-mcp)** (by kkjdaniel) - MCP to enable interaction with the BoardGameGeek API via AI tooling.\n- **[Bible](https://github.com/trevato/bible-mcp)** - Add biblical context to your generative AI applications.\n- **[BigQuery](https://github.com/LucasHild/mcp-server-bigquery)** (by LucasHild) - This server enables LLMs to inspect database schemas and execute queries on BigQuery.\n- **[BigQuery](https://github.com/ergut/mcp-bigquery-server)** (by ergut) - Server implementation for Google BigQuery integration that enables direct BigQuery database access and querying capabilities\n- **[Bilibili](https://github.com/wangshunnn/bilibili-mcp-server)** - This MCP server provides tools to fetch Bilibili user profiles, video metadata, search videos, and more.\n- **[Binance](https://github.com/ethancod1ng/binance-mcp-server)** - Cryptocurrency trading and market data access through Binance API integration.\n- **[Binance](https://github.com/AnalyticAce/BinanceMCPServer)** (by dosseh shalom) - Unofficial tools and server implementation for Binance's Model Context Protocol (MCP). Designed to support developers building crypto trading AI Agents.\n- **[Bing Web Search API](https://github.com/leehanchung/bing-search-mcp)** (by hanchunglee) - Server implementation for Microsoft Bing Web Search API.\n- **[BioMCP](https://github.com/genomoncology/biomcp)** (by imaurer) - Biomedical research assistant server providing access to PubMed, ClinicalTrials.gov, and MyVariant.info.\n- **[bioRxiv](https://github.com/JackKuo666/bioRxiv-MCP-Server)** - 🔍 Enable AI assistants to search and access bioRxiv papers through a simple MCP interface.\n- **[Bitable MCP](https://github.com/lloydzhou/bitable-mcp)** (by lloydzhou) - MCP server provides access to Lark Bitable through the Model Context Protocol. It allows users to interact with Bitable tables using predefined tools.\n- **[Blender](https://github.com/ahujasid/blender-mcp)** (by ahujasid) - Blender integration allowing prompt enabled 3D scene creation, modeling and manipulation.\n- **[Blender MCP](https://github.com/pranav-deshmukh/blender-mcp)** - MCP server to create professional like 3d scenes on blender using natural language.\n- **[Blockbench MCP Plugin](https://github.com/jasonjgardner/blockbench-mcp-plugin)** (by jasonjgardner) - Blockbench plugin to connect AI agents to Blockbench's JavaScript API. Allows for creating and editing 3D models or pixel art textures with AI in Blockbench.\n- **[Blockchain MCP](https://github.com/tatumio/blockchain-mcp)** - MCP Server for Blockchain Data from **[Tatum](http://tatum.io/mcp)** that instantly unlocks blockchain access for your AI agents. This official Tatum MCP server connects to any LLM in seconds.\n- **[Bluesky](https://github.com/semioz/bluesky-mcp)** (by semioz) - An MCP server for Bluesky, a decentralized social network. It enables automated interactions with the AT Protocol, supporting features like posting, liking, reposting, timeline management, and profile operations.\n- **[Bluetooth MCP Server](https://github.com/Hypijump31/bluetooth-mcp-server)** - Control Bluetooth devices and manage connections through natural language commands, including device discovery, pairing, and audio controls.\n- **[BNBChain MCP](https://github.com/bnb-chain/bnbchain-mcp)** - An MCP server for interacting with BSC, opBNB, and the Greenfield blockchain.\n- **[Braintree](https://github.com/QuentinCody/braintree-mcp-server)** - Unofficial PayPal Braintree payment gateway MCP Server for AI agents to process payments, manage customers, and handle transactions securely.\n- **[Brazilian Law](https://github.com/pdmtt/brlaw_mcp_server/)** (by pdmtt) - Agent-driven research on Brazilian law using official sources.\n- **[BreakoutRoom](https://github.com/agree-able/room-mcp)** - Agents accomplishing goals together in p2p rooms\n- **[Browser MCP](https://github.com/bytedance/UI-TARS-desktop/tree/main/packages/agent-infra/mcp-servers/browser)** (by UI-TARS) - A fast, lightweight MCP server that empowers LLMs with browser automation via Puppeteer’s structured accessibility data, featuring optional vision mode for complex visual understanding and flexible, cross-platform configuration.\n- **[browser-use](https://github.com/co-browser/browser-use-mcp-server)** (by co-browser) - browser-use MCP server with dockerized playwright + chromium + vnc. supports stdio & resumable http.\n- **[BrowserLoop](https://github.com/mattiasw/browserloop)** - An MCP server for taking screenshots of web pages using Playwright. Supports high-quality capture with configurable formats, viewport sizes, cookie-based authentication, and both full page and element-specific screenshots.\n- **[Bsc-mcp](https://github.com/TermiX-official/bsc-mcp)** The first MCP server that serves as the bridge between AI and BNB Chain, enabling AI agents to execute complex on-chain operations through seamless integration with the BNB Chain, including transfer, swap, launch, security check on any token and even more.\n- **[BugBug MCP Server](https://github.com/simplypixi/bugbug-mcp-server)** - Unofficial MCP server for BugBug API.\n- **[BVG MCP Server - (Unofficial) ](https://github.com/svkaizoku/mcp-bvg)** - Unofficial MCP server for Berliner Verkehrsbetriebe Api.\n- **[Bybit](https://github.com/ethancod1ng/bybit-mcp-server)** - A Model Context Protocol (MCP) server for integrating AI assistants with Bybit cryptocurrency exchange APIs, enabling automated trading, market data access, and account management.\n- **[CAD-MCP](https://github.com/daobataotie/CAD-MCP#)** (by daobataotie) - Drawing CAD(Line,Circle,Text,Annotation...) through MCP server, supporting mainstream CAD software.\n- **[Calculator](https://github.com/githejie/mcp-server-calculator)** - This server enables LLMs to use calculator for precise numerical calculations.\n- **[CalDAV MCP](https://github.com/dominik1001/caldav-mcp)** - A CalDAV MCP server to expose calendar operations as tools for AI assistants.\n- **[Calendly-mcp-server](https://github.com/meAmitPatil/calendly-mcp-server)** - Open source calendly mcp server.\n- **[Catalysis Hub](https://github.com/QuentinCody/catalysishub-mcp-server)** - Unofficial MCP server for searching and retrieving scientific data from the Catalysis Hub database, providing access to computational catalysis research and surface reaction data.\n- **[CCTV VMS MCP](https://github.com/jyjune/mcp_vms)** - A Model Context Protocol (MCP) server designed to connect to a CCTV recording program (VMS) to retrieve recorded and live video streams. It also provides tools to control the VMS software, such as showing live or playback dialogs for specific channels at specified times.\n- **[CFBD API](https://github.com/lenwood/cfbd-mcp-server)** - An MCP server for the [College Football Data API](https://collegefootballdata.com/).\n- **[ChatMCP](https://github.com/AI-QL/chat-mcp)** – An Open Source Cross-platform GUI Desktop application compatible with Linux, macOS, and Windows, enabling seamless interaction with MCP servers across dynamically selectable LLMs, by **[AIQL](https://github.com/AI-QL)**\n- **[ChatSum](https://github.com/mcpso/mcp-server-chatsum)** - Query and Summarize chat messages with LLM. by [mcpso](https://mcp.so)\n- **[Chess.com](https://github.com/pab1it0/chess-mcp)** - Access Chess.com player data, game records, and other public information through standardized MCP interfaces, allowing AI assistants to search and analyze chess information.\n- **[ChessPal Chess Engine (stockfish)](https://github.com/wilson-urdaneta/chesspal-mcp-engine)** - A Stockfish-powered chess engine exposed as an MCP server. Calculates best moves and supports both HTTP/SSE and stdio transports.\n- **[Chroma](https://github.com/privetin/chroma)** - Vector database server for semantic document search and metadata filtering, built on Chroma\n- **[Chrome history](https://github.com/vincent-pli/chrome-history-mcp)** - Talk with AI about your browser history, get fun ^_^\n- **[CIViC](https://github.com/QuentinCody/civic-mcp-server)** - MCP server for the Clinical Interpretation of Variants in Cancer (CIViC) database, providing access to clinical variant interpretations and genomic evidence for cancer research.\n- **[Claude Thread Continuity](https://github.com/peless/claude-thread-continuity)** - Persistent memory system enabling Claude Desktop conversations to resume with full context across sessions. Maintains conversation history, project states, and user preferences for seamless multi-session workflows.\n- **[ClaudePost](https://github.com/ZilongXue/claude-post)** - ClaudePost enables seamless email management for Gmail, offering secure features like email search, reading, and sending.\n- **[CLDGeminiPDF Analyzer](https://github.com/tfll37/CLDGeminiPDF-Analyzer)** - MCP server tool enabling sharing large PDF files to Google LLMs via API for further/additional analysis and response retrieval to Claude Desktop.\n- **[ClearML MCP](https://github.com/prassanna-ravishankar/clearml-mcp)** - Get comprehensive ML experiment context and analysis directly from [ClearML](https://clear.ml) in your AI conversations.\n- **[ClickUp](https://github.com/TaazKareem/clickup-mcp-server)** - MCP server for ClickUp task management, supporting task creation, updates, bulk operations, and markdown descriptions.\n- **[Cloudinary](https://github.com/felores/cloudinary-mcp-server)** - Cloudinary Model Context Protocol Server to upload media to Cloudinary and get back the media link and details.\n- **[CockroachDB](https://github.com/amineelkouhen/mcp-cockroachdb)** - MCP server enabling AI agents and LLMs to manage, monitor, and query **[CockroachDB](https://www.cockroachlabs.com/)** using natural language.\n- **[CockroachDB MCP Server](https://github.com/viragtripathi/cockroachdb-mcp-server)** – Full - featured MCP implementation built with FastAPI and CockroachDB. Supports schema bootstrapping, JSONB storage, LLM-ready CLI, and optional `/debug` endpoints.\n- **[code-assistant](https://github.com/stippi/code-assistant)** - A coding assistant MCP server that allows to explore a code-base and make changes to code. Should be used with trusted repos only (insufficient protection against prompt injections).\n- **[code-context-provider-mcp](https://github.com/AB498/code-context-provider-mcp)** - MCP server that provides code context and analysis for AI assistants. Extracts directory structure and code symbols using WebAssembly Tree-sitter parsers without Native Dependencies.\n- **[code-executor](https://github.com/bazinga012/mcp_code_executor)** - An MCP server that allows LLMs to execute Python code within a specified Conda environment.\n- **[code-sandbox-mcp](https://github.com/Automata-Labs-team/code-sandbox-mcp)** - An MCP server to create secure code sandbox environment for executing code within Docker containers.\n- **[cognee-mcp](https://github.com/topoteretes/cognee/tree/main/cognee-mcp)** - GraphRAG memory server with customizable ingestion, data processing and search\n- **[coin_api_mcp](https://github.com/longmans/coin_api_mcp)** - Provides access to [coinmarketcap](https://coinmarketcap.com/) cryptocurrency data.\n- **[CoinMarketCap](https://github.com/shinzo-labs/coinmarketcap-mcp)** - Implements the complete [CoinMarketCap](https://coinmarketcap.com/) API for accessing cryptocurrency market data, exchange information, and other blockchain-related metrics.\n- **[commands](https://github.com/g0t4/mcp-server-commands)** - Run commands and scripts. Just like in a terminal.\n- **[Companies House MCP](https://github.com/stefanoamorelli/companies-house-mcp)** (by Stefano Amorelli) - MCP server to connect with the UK Companies House API.\n- **[computer-control-mcp](https://github.com/AB498/computer-control-mcp)** - MCP server that provides computer control capabilities, like mouse, keyboard, OCR, etc. using PyAutoGUI, RapidOCR, ONNXRuntime Without External Dependencies.\n- **[Computer-Use - Remote MacOS Use](https://github.com/baryhuang/mcp-remote-macos-use)** - Open-source out-of-the-box alternative to OpenAI Operator, providing a full desktop experience and optimized for using remote macOS machines as autonomous AI agents.\n- **[Congress.gov API](https://github.com/AshwinSundar/congress_gov_mcp)** - An MCP server to interact with real-time data from the Congress.gov API, which is the official API for the United States Congress.\n- **[consul-mcp](https://github.com/kocierik/consul-mcp-server)** - A consul MCP server for service management, health check and Key-Value Store\n- **[consult7](https://github.com/szeider/consult7)** - Analyze large codebases and document collections using high-context models via OpenRouter, OpenAI, or Google AI -- very useful, e.g., with Claude Code\n- **[Contentful-mcp](https://github.com/ivo-toby/contentful-mcp)** - Read, update, delete, publish content in your [Contentful](https://contentful.com) space(s) from this MCP Server.\n- **[Context Crystallizer](https://github.com/hubertciebiada/context-crystallizer)** - AI Context Engineering tool that transforms large repositories into crystallized, AI-consumable knowledge through systematic analysis and optimization.\n- **[MCP Context Provider](https://github.com/doobidoo/MCP-Context-Provider)** - Static server that provides AI models with persistent tool-specific context and rules, preventing context loss between chat sessions and enabling consistent behavior across interactions.\n- **[context-portal](https://github.com/GreatScottyMac/context-portal)** - Context Portal (ConPort) is a memory bank database system that effectively builds a project-specific knowledge graph, capturing entities like decisions, progress, and architecture, along with their relationships. This serves as a powerful backend for Retrieval Augmented Generation (RAG), enabling AI assistants to access precise, up-to-date project information.\n- **[cplusplus-mcp](https://github.com/kandrwmrtn/cplusplus_mcp)** - Semantic C++ code analysis using libclang. Enables Claude to understand C++ codebases through AST parsing rather than text search - find classes, navigate inheritance, trace function calls, and explore code relationships.\n- **[CreateveAI Nexus](https://github.com/spgoodman/createveai-nexus-server)** - Open-Source Bridge Between AI Agents and Enterprise Systems, with simple custom API plug-in capabilities (including close compatibility with ComfyUI nodes), support for Copilot Studio's MCP agent integations, and support for Azure deployment in secure environments with secrets stored in Azure Key Vault, as well as straightforward on-premises deployment.\n- **[CRASH](https://github.com/nikkoxgonzales/crash-mcp)** - MCP server for structured, iterative reasoning and thinking with flexible validation, confidence tracking, revision mechanisms, and branching support.\n- **[Creatify](https://github.com/TSavo/creatify-mcp)** - MCP Server that exposes Creatify AI API capabilities for AI video generation, including avatar videos, URL-to-video conversion, text-to-speech, and AI-powered editing tools.\n- **[Cronlytic](https://github.com/Cronlytic/cronlytic-mcp-server)** - Create CRUD operations for serverless cron jobs through [Cronlytic](https://cronlytic.com) MCP Server\n- **[crypto-feargreed-mcp](https://github.com/kukapay/crypto-feargreed-mcp)**  -  Providing real-time and historical Crypto Fear & Greed Index data.\n- **[crypto-indicators-mcp](https://github.com/kukapay/crypto-indicators-mcp)**  -  An MCP server providing a range of cryptocurrency technical analysis indicators and strategies.\n- **[crypto-sentiment-mcp](https://github.com/kukapay/crypto-sentiment-mcp)**  -  An MCP server that delivers cryptocurrency sentiment analysis to AI agents.\n- **[cryptopanic-mcp-server](https://github.com/kukapay/cryptopanic-mcp-server)** - Providing latest cryptocurrency news to AI agents, powered by CryptoPanic.\n- **[CSV Editor](https://github.com/santoshray02/csv-editor)** - Comprehensive CSV processing with 40+ operations for data manipulation, analysis, and validation. Features auto-save, undo/redo, and handles GB+ files. Built with FastMCP & Pandas.\n- **[Cursor MCP Installer](https://github.com/matthewdcage/cursor-mcp-installer)** - A tool to easily install and configure other MCP servers within Cursor IDE, with support for npm packages, local directories, and Git repositories.\n- **[CVE Intelligence Server](https://github.com/gnlds/mcp-cve-intelligence-server-lite)** – Provides vulnerability intelligence via multi - source CVE data, essential exploit discovery, and EPSS risk scoring through the MCP. Useful for security research, automation, and agent workflows.\n- **[D365FO](https://github.com/mafzaal/d365fo-client)** - A comprehensive MCP server for Microsoft Dynamics 365 Finance & Operations (D365 F&O) that provides easy access to OData endpoints, metadata operations, label management, and AI assistant integration.\n- **[Dagster](https://github.com/dagster-io/dagster/tree/master/python_modules/libraries/dagster-dg-cli)** - An MCP server to easily build data pipelines using [Dagster](https://dagster.io/).\n- **[Dappier](https://github.com/DappierAI/dappier-mcp)** - Connect LLMs to real-time, rights-cleared, proprietary data from trusted sources. Access specialized models for Real-Time Web Search, News, Sports, Financial Data, Crypto, and premium publisher content. Explore data models at [marketplace.dappier.com](https://marketplace.dappier.com/marketplace).\n- **[Data Exploration](https://github.com/reading-plus-ai/mcp-server-data-exploration)** - MCP server for autonomous data exploration on .csv-based datasets, providing intelligent insights with minimal effort. NOTE: Will execute arbitrary Python code on your machine, please use with caution!\n- **[Databricks](https://github.com/JordiNeil/mcp-databricks-server)** - Allows LLMs to run SQL queries, list and get details of jobs executions in a Databricks account.\n- **[Databricks Genie](https://github.com/yashshingvi/databricks-genie-MCP)** - A server that connects to the Databricks Genie, allowing LLMs to ask natural language questions, run SQL queries, and interact with Databricks conversational agents.\n- **[Databricks Smart SQL](https://github.com/RafaelCartenet/mcp-databricks-server)** - Leveraging Databricks Unity Catalog metadata, perform smart efficient SQL queries to solve Ad-hoc queries and explore data.\n- **[DataCite](https://github.com/QuentinCody/datacite-mcp-server)** - Unofficial MCP server for DataCite, providing access to research data and publication metadata through DataCite's REST API and GraphQL interface for scholarly research discovery.\n- **[Datadog](https://github.com/GeLi2001/datadog-mcp-server)** - Datadog MCP Server for application tracing, monitoring, dashboard, incidents queries built on official datadog api.\n- **[Dataset Viewer](https://github.com/privetin/dataset-viewer)** - Browse and analyze Hugging Face datasets with features like search, filtering, statistics, and data export\n- **[DataWorks](https://github.com/aliyun/alibabacloud-dataworks-mcp-server)** - A Model Context Protocol (MCP) server that provides tools for AI, allowing it to interact with the [DataWorks](https://www.alibabacloud.com/help/en/dataworks/) Open API through a standardized interface. This implementation is based on the Alibaba Cloud Open API and enables AI agents to perform cloud resources operations seamlessly.\n- **[Data4library](https://github.com/isnow890/data4library-mcp)** (by isnow890) - MCP server for Korea's Library Information Naru API, providing comprehensive access to public library data, book searches, loan status, reading statistics, and GPS-based nearby library discovery across South Korea.\n\n- **[DaVinci Resolve](https://github.com/samuelgursky/davinci-resolve-mcp)** - MCP server integration for DaVinci Resolve providing powerful tools for video editing, color grading, media management, and project control.\n- **[DBHub](https://github.com/bytebase/dbhub/)** - Universal database MCP server connecting to MySQL, MariaDB, PostgreSQL, and SQL Server.\n- **[Deebo](https://github.com/snagasuri/deebo-prototype)** – Agentic debugging MCP server that helps AI coding agents delegate and fix hard bugs through isolated multi-agent hypothesis testing.\n- **[Deep Research](https://github.com/reading-plus-ai/mcp-server-deep-research)** - Lightweight MCP server offering Grok/OpenAI/Gemini/Perplexity-style automated deep research exploration and structured reporting.\n- **[DeepSeek MCP Server](https://github.com/DMontgomery40/deepseek-mcp-server)** - Model Context Protocol server integrating DeepSeek's advanced language models, in addition to [other useful API endpoints](https://github.com/DMontgomery40/deepseek-mcp-server?tab=readme-ov-file#features)\n- **[deepseek-thinker-mcp](https://github.com/ruixingshi/deepseek-thinker-mcp)** - A MCP (Model Context Protocol) provider Deepseek reasoning content to MCP-enabled AI Clients, like Claude Desktop. Supports access to Deepseek's thought processes from the Deepseek API service or from a local Ollama server.\n- **[Deepseek_R1](https://github.com/66julienmartin/MCP-server-Deepseek_R1)** - A Model Context Protocol (MCP) server implementation connecting Claude Desktop with DeepSeek's language models (R1/V3)\n- **[Depyler](https://github.com/paiml/depyler/blob/main/docs/mcp-integration.md)** - Energy-efficient Python-to-Rust transpiler with progressive verification, enabling AI assistants to convert Python code to safe, performant Rust while reducing energy consumption by 75-85%.\n- **[deploy-mcp](https://github.com/alexpota/deploy-mcp)** - Universal deployment tracker for AI assistants with live status badges and deployment monitoring.\n- **[Descope](https://github.com/descope-sample-apps/descope-mcp-server)** - An MCP server to integrate with [Descope](https://descope.com) to search audit logs, manage users, and more.\n- **[DesktopCommander](https://github.com/wonderwhy-er/DesktopCommanderMCP)** - Let AI edit and manage files on your computer, run terminal commands, and connect to remote servers via SSH - all powered by one of the most popular local MCP servers.\n- **[Devcontainer](https://github.com/AI-QL/mcp-devcontainers)** - An MCP server for devcontainer to generate and configure development containers directly from devcontainer configuration files.\n- **[DevDb](https://github.com/damms005/devdb-vscode?tab=readme-ov-file#mcp-configuration)** - An MCP server that runs right inside the IDE, for connecting to MySQL, Postgres, SQLite, and MSSQL databases.\n- **[DevOps AI Toolkit](https://github.com/vfarcic/dot-ai)** - AI-powered development productivity platform that enhances software development workflows through intelligent automation and AI-driven assistance.\n- **[DevOps-MCP](https://github.com/wangkanai/devops-mcp)** - Dynamic Azure DevOps MCP server with directory-based authentication switching, supporting work items, repositories, builds, pipelines, and multi-project management with local configuration files.\n- **[DGIdb](https://github.com/QuentinCody/dgidb-mcp-server)** - MCP server for the Drug Gene Interaction Database (DGIdb), providing access to drug-gene interaction data, druggable genome information, and pharmacogenomics research.\n- **[Dicom](https://github.com/ChristianHinge/dicom-mcp)** - An MCP server to query and retrieve medical images and for parsing and reading dicom-encapsulated documents (pdf etc.).\n- **[Dify](https://github.com/YanxingLiu/dify-mcp-server)** - A simple implementation of an MCP server for dify workflows.\n- **[Discogs](https://github.com/cswkim/discogs-mcp-server)** - An MCP server that connects to the Discogs API for interacting with your music collection.\n- **[Discord](https://github.com/v-3/discordmcp)** - An MCP server to connect to Discord guilds through a bot and read and write messages in channels\n- **[Discord](https://github.com/SaseQ/discord-mcp)** - An MCP server, which connects to Discord through a bot, and provides comprehensive integration with Discord.\n- **[Discord](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/discord)** - For Discord API integration by Klavis AI\n- **[Discourse](https://github.com/AshDevFr/discourse-mcp-server)** - An MCP server to search Discourse posts on a Discourse forum.\n- **[DocBase](https://help.docbase.io/posts/3925317)** - Official MCP server for DocBase API integration, enabling post management, user collaboration, group administration, and more.\n- **[Docker](https://github.com/ckreiling/mcp-server-docker)** - Integrate with Docker to manage containers, images, volumes, and networks.\n- **[Docker](https://github.com/0xshariq/docker-mcp-server)** - Docker MCP Server provides advanced, unified Docker management via CLI and MCP workflows, supporting containers, images, volumes, networks, and orchestration.\n- **[Docs](https://github.com/da1z/docsmcp)** - Enable documentation access for the AI agent, supporting llms.txt and other remote or local files.\n- **[documcp](https://github.com/tosin2013/documcp)** - An MCP server for intelligent document processing and management, supporting multiple formats and document operations.\n- **[Docy](https://github.com/oborchers/mcp-server-docy)** - Docy gives your AI direct access to the technical documentation it needs, right when it needs it. No more outdated information, broken links, or rate limits - just accurate, real-time documentation access for more precise coding assistance.\n- **[Dodo Payments](https://github.com/dodopayments/dodopayments-node/tree/main/packages/mcp-server)** - Enables AI agents to securely perform payment operations via a lightweight, serverless-compatible interface to the [Dodo Payments](https://dodopayments.com) API.\n- **[Domain Tools](https://github.com/deshabhishek007/domain-tools-mcp-server)** - A Model Context Protocol (MCP) server for comprehensive domain analysis: WHOIS, DNS records, and DNS health checks.\n- **[DPLP](https://github.com/szeider/mcp-dblp)**  - Searches the [DBLP](https://dblp.org) computer science bibliography database.\n- **[Druid MCP Server](https://github.com/iunera/druid-mcp-server)** - STDIO/SEE MCP Server for Apache Druid by [iunera](https://www.iunera.com) that provides extensive tools, resources, and prompts for managing and analyzing Druid clusters.\n- **[Drupal](https://github.com/Omedia/mcp-server-drupal)** - Server for interacting with [Drupal](https://www.drupal.org/project/mcp) using STDIO transport layer.\n- **[dune-analytics-mcp](https://github.com/kukapay/dune-analytics-mcp)** -  A mcp server that bridges Dune Analytics data to AI agents.\n- **[DynamoDB-Toolbox](https://www.dynamodbtoolbox.com/docs/databases/actions/mcp-toolkit)** - Leverages your Schemas and Access Patterns to interact with your [DynamoDB](https://aws.amazon.com/dynamodb) Database using natural language.\n- **[eBook-mcp](https://github.com/onebirdrocks/ebook-mcp)** - A lightweight MCP server that allows LLMs to read and interact with your personal PDF and EPUB ebooks. Ideal for building AI reading assistants or chat-based ebook interfaces.\n- **[ECharts MCP Server](https://github.com/hustcc/mcp-echarts)** - Generate visual charts using ECharts with AI MCP dynamically, used for chart generation and data analysis.\n- **[EDA MCP Server](https://github.com/NellyW8/mcp-EDA)** - A comprehensive Model Context Protocol server for Electronic Design Automation tools, enabling AI assistants to synthesize Verilog with Yosys, simulate designs with Icarus Verilog, run complete ASIC flows with OpenLane, and view results with GTKWave and KLayout.\n- **[EdgeOne Pages MCP](https://github.com/TencentEdgeOne/edgeone-pages-mcp)** - An MCP service for deploying HTML content to EdgeOne Pages and obtaining a publicly accessible URL.\n- **[Edwin](https://github.com/edwin-finance/edwin/tree/main/examples/mcp-server)** - MCP server for edwin SDK - enabling AI agents to interact with DeFi protocols across EVM, Solana and other blockchains.\n- **[eechat](https://github.com/Lucassssss/eechat)** - An open-source, cross-platform desktop application that seamlessly connects with MCP servers, across Linux, macOS, and Windows.\n- **[Elasticsearch](https://github.com/cr7258/elasticsearch-mcp-server)** - MCP server implementation that provides Elasticsearch interaction.\n- **[ElevenLabs](https://github.com/mamertofabian/elevenlabs-mcp-server)** - A server that integrates with ElevenLabs text-to-speech API capable of generating full voiceovers with multiple voices.\n- **[Email](https://github.com/Shy2593666979/mcp-server-email)** - This server enables users to send emails through various email providers, including Gmail, Outlook, Yahoo, Sina, Sohu, 126, 163, and QQ Mail. It also supports attaching files from specified directories, making it easy to upload attachments along with the email content.\n- **[Email SMTP](https://github.com/egyptianego17/email-mcp-server)** - A simple MCP server that lets your AI agent send emails and attach files through SMTP.\n- **[Enhance Prompt](https://github.com/FelixFoster/mcp-enhance-prompt)** - An MCP service for enhance you prompt.\n- **[Entrez](https://github.com/QuentinCody/entrez-mcp-server)** - Unofficial MCP server for NCBI Entrez databases, providing access to PubMed articles, gene information, protein data, and other biomedical research resources through NCBI's E-utilities API.\n- **[Ergo Blockchain MCP](https://github.com/marctheshark3/ergo-mcp)** -An MCP server to integrate Ergo Blockchain Node and Explorer APIs for checking address balances, analyzing transactions, viewing transaction history, performing forensic analysis of addresses, searching for tokens, and monitoring network status.\n- **[ESP MCP Server](https://github.com/horw/esp-mcp)** - An MCP server that integrates ESP IDF commands like building and flashing code for ESP Microcontrollers using an LLM.\n- **[Eunomia](https://github.com/whataboutyou-ai/eunomia-MCP-server)** - Extension of the Eunomia framework that connects Eunomia instruments with MCP servers\n- **[Everything Search](https://github.com/mamertofabian/mcp-everything-search)** - Fast file searching capabilities across Windows (using [Everything SDK](https://www.voidtools.com/support/everything/sdk/)), macOS (using mdfind command), and Linux (using locate/plocate command).\n- **[EVM MCP Server](https://github.com/mcpdotdirect/evm-mcp-server)** - Comprehensive blockchain services for 30+ EVM networks, supporting native tokens, ERC20, NFTs, smart contracts, transactions, and ENS resolution.\n- **[Excel](https://github.com/haris-musa/excel-mcp-server)** - Excel manipulation including data reading/writing, worksheet management, formatting, charts, and pivot table.\n- **[Excel to JSON MCP by WTSolutions](https://github.com/he-yang/excel-to-json-mcp)** - MCP Server providing a standardized interface for converting (1) Excel or CSV data into JSON format ;(2) Excel(.xlsx) file into Structured JSON.\n- **[Extended Memory](https://github.com/ssmirnovpro/extended-memory-mcp)** - Persistent memory across Claude conversations with multi-project support, automatic importance scoring, and tag-based organization. Production-ready with 400+ tests.\n- **[F1](https://github.com/AbhiJ2706/f1-mcp/tree/main)** - Access to Formula 1 data including race results, driver information, lap times, telemetry, and circuit details.\n- **[Fabric MCP](https://github.com/aci-labs/ms-fabric-mcp)** - Microsoft Fabric MCP server to accelerate working in your Fabric Tenant with the help of your favorite LLM models.\n- **[Fabric Real-Time Intelligence MCP](https://github.com/Microsoft/fabric-rti-mcp)** - Official Microsoft Fabric RTI server to accelerate working with Eventhouse, Azure Data Explorer(Kusto), Eventstreams and other RTI items using your favorite LLM models.\n- **[fabric-mcp-server](https://github.com/adapoet/fabric-mcp-server)** - The fabric-mcp-server is an MCP server that integrates [Fabric](https://github.com/danielmiessler/fabric) patterns with [Cline](https://cline.bot/), exposing them as tools for AI-driven task execution and enhancing Cline's capabilities.\n- **[Fal MCP Server](https://github.com/raveenb/fal-mcp-server)** - Generate AI images, videos, and music using Fal.ai models (FLUX, Stable Diffusion, MusicGen) directly in Claude\n- **[Facebook Ads](https://github.com/gomarble-ai/facebook-ads-mcp-server)** - MCP server acting as an interface to the Facebook Ads, enabling programmatic access to Facebook Ads data and management features.\n- **[Facebook Ads 10xeR](https://github.com/fortytwode/10xer)** - Advanced Facebook Ads MCP server with enhanced creative insights, multi-dimensional breakdowns, and comprehensive ad performance analytics.\n- **[Facebook Ads Library](https://github.com/trypeggy/facebook-ads-library-mcp)** - Get any answer from the Facebook Ads Library, conduct deep research including messaging, creative testing and comparisons in seconds.\n- **[Fantasy PL](https://github.com/rishijatia/fantasy-pl-mcp)** - Give your coding agent direct access to up-to date Fantasy Premier League data\n- **[Fastmail MCP](https://github.com/MadLlama25/fastmail-mcp)** - Access Fastmail via JMAP: list/search emails, send and move mail, handle attachments/threads, plus contacts and calendar tools.\n- **[fastn.ai – Unified API MCP Server](https://github.com/fastnai/mcp-fastn)** - A remote, dynamic MCP server with a unified API that connects to 1,000+ tools, actions, and workflows, featuring built-in authentication and monitoring.\n- **[FDIC BankFind MCP Server - (Unofficial)](https://github.com/clafollett/fdic-bank-find-mcp-server)** - The is a MCPserver that brings the power of FDIC BankFind APIs straight to your AI tools and workflows. Structured U.S. banking data, delivered with maximum vibes. 😎📊\n- **[FPE Demo MCP](https://github.com/Horizon-Digital-Engineering/fpe-demo-mcp)** - FF3 Format Preserving Encryption with authentication patterns for secure data protection in LLM workflows.\n- **[Federal Reserve Economic Data (FRED)](https://github.com/stefanoamorelli/fred-mcp-server)** (by Stefano Amorelli) - Community developed MCP server to interact with the Federal Reserve Economic Data.\n- **[Fetch](https://github.com/zcaceres/fetch-mcp)** - A server that flexibly fetches HTML, JSON, Markdown, or plaintext.\n- **[Feyod](https://github.com/jeroenvdmeer/feyod-mcp)** - A server that answers questions about football matches, and specialised in the football club Feyenoord.\n- **[Fast Filesystem](https://github.com/efforthye/fast-filesystem-mcp)** - Advanced filesystem operations with large file handling capabilities and Claude-optimized features. Provides fast file reading/writing, sequential reading for large files, directory operations, file search, and streaming writes with backup & recovery.\n- **[FHIR](https://github.com/wso2/fhir-mcp-server)** - A Model Context Protocol server that provides seamless, standardized access to Fast Healthcare Interoperability Resources (FHIR) data from any compatible FHIR server. Designed for easy integration with AI tools, developer workflows, and healthcare applications, it enables natural language and programmatic search, retrieval, and analysis of clinical data.\n- **[Fibaro HC3](https://github.com/coding-sailor/mcp-server-hc3)** - MCP server for Fibaro Home Center 3 smart home systems.\n- **[Figma](https://github.com/GLips/Figma-Context-MCP)** - Give your coding agent direct access to Figma file data, helping it one-shot design implementation.\n- **[Figma](https://github.com/paulvandermeijs/figma-mcp)** - A blazingly fast MCP server to read and export your Figma design files.\n- **[Figma to Flutter](https://github.com/mhmzdev/figma-flutter-mcp)** - Write down clean and better Flutter code from Figma design tokens and enrich nodes data in Flutter terminology.\n- **[Files](https://github.com/flesler/mcp-files)** - Enables agents to quickly find and edit code in a codebase with surgical precision. Find symbols, edit them everywhere.\n- **[FileSystem Server](https://github.com/Oncorporation/filesystem_server)** - Local MCP server for Visual Studio 2022 that provides code-workspace functionality by giving AI agents selective access to project folders and files\n- **[finmap.org](https://github.com/finmap-org/mcp-server)** MCP server provides comprehensive historical data from the US, UK, Russian and Turkish stock exchanges. Access sectors, tickers, company profiles, market cap, volume, value, and trade counts, as well as treemap and histogram visualizations.\n- **[Firebase](https://github.com/gannonh/firebase-mcp)** - Server to interact with Firebase services including Firebase Authentication, Firestore, and Firebase Storage.\n- **[Fish Audio](https://github.com/da-okazaki/mcp-fish-audio-server)** - Text-to-Speech integration with Fish Audio's API, supporting multiple voices, streaming, and real-time playback\n- **[FitBit MCP Server](https://github.com/NitayRabi/fitbit-mcp)** - An MCP server that connects to FitBit API using a token obtained from OAuth flow.\n- **[FlightRadar24](https://github.com/sunsetcoder/flightradar24-mcp-server)** - A Claude Desktop MCP server that helps you track flights in real-time using Flightradar24 data.\n- **[Fluent-MCP](https://github.com/modesty/fluent-mcp)** - MCP server for Fluent (ServiceNow SDK) providing access to ServiceNow SDK CLI, API specifications, code snippets, and more.\n- **[Flyworks Avatar](https://github.com/Flyworks-AI/flyworks-mcp)** - Fast and free zeroshot lipsync MCP server.\n- **[fmp-mcp-server](https://github.com/vipbat/fmp-mcp-server)** - Enable your agent for M&A analysis and investment banking workflows. Access company profiles, financial statements, ratios, and perform sector analysis with the [Financial Modeling Prep APIs]\n- **[FoundationModels](https://github.com/phimage/mcp-foundation-models)** - An MCP server that integrates Apple's [FoundationModels](https://developer.apple.com/documentation/foundationmodels) for text generation.\n- **[Foursquare](https://github.com/foursquare/foursquare-places-mcp)** - Enable your agent to recommend places around the world with the [Foursquare Places API](https://location.foursquare.com/products/places-api/)\n- **[FrankfurterMCP](https://github.com/anirbanbasu/frankfurtermcp)** - MCP server acting as an interface to the [Frankfurter API](https://frankfurter.dev/) for currency exchange data.\n- **[freqtrade-mcp](https://github.com/kukapay/freqtrade-mcp)** - An MCP server that integrates with the Freqtrade cryptocurrency trading bot.\n- **[Geolocation](https://github.com/jackyang25/geolocation-mcp-server)** - WalkScore API integration for walkability, transit, and bike scores.\n- **[GDB](https://github.com/pansila/mcp_server_gdb)** - A GDB/MI protocol server based on the MCP protocol, providing remote application debugging capabilities with AI assistants.\n- **[ggRMCP](https://github.com/aalobaidi/ggRMCP)** - A Go gateway that converts gRPC services into MCP-compatible tools, allowing AI models like Claude to directly call your gRPC services.\n- **[Gemini Bridge](https://github.com/eLyiN/gemini-bridge)** - Lightweight MCP server that enables Claude to interact with Google's Gemini AI through the official CLI, offering zero API costs and stateless architecture.\n- **[Ghost](https://github.com/MFYDev/ghost-mcp)** - A Model Context Protocol (MCP) server for interacting with Ghost CMS through LLM interfaces like Claude.\n- **[Git](https://github.com/geropl/git-mcp-go)** - Allows LLM to interact with a local git repository, incl. optional push support.\n- **[Git Mob](https://github.com/Mubashwer/git-mob-mcp-server)** - MCP server that interfaces with the [git-mob](https://github.com/Mubashwer/git-mob) CLI app for managing co-authors in git commits during pair/mob programming.\n- **[Github](https://github.com/0xshariq/github-mcp-server)** - A Model Context Protocol (MCP) server that provides 29 Git operations + 11 workflow combinations for AI assistants and developers. This server exposes comprehensive Git repository management through a standardized interface, enabling AI models and developers to safely manage complex version control workflows.\n- **[GitHub Actions](https://github.com/ko1ynnky/github-actions-mcp-server)** - A Model Context Protocol (MCP) server for interacting with GitHub Actions.\n- **[GitHub Enterprise MCP](https://github.com/ddukbg/github-enterprise-mcp)** - A Model Context Protocol (MCP) server for interacting with GitHub Enterprise.\n- **[GitHub GraphQL](https://github.com/QuentinCody/github-graphql-mcp-server)** - Unofficial GitHub MCP server that provides access to GitHub's GraphQL API, enabling more powerful and flexible queries for repository data, issues, pull requests, and other GitHub resources.\n- **[GitHub Projects](https://github.com/redducklabs/github-projects-mcp)** — Manage GitHub Projects with full GraphQL API access including items, fields, and milestones.\n- **[GitHub Repos Manager MCP Server](https://github.com/kurdin/github-repos-manager-mcp)** - Token-based GitHub automation management. No Docker, Flexible configuration, 80+ tools with direct API integration.\n- **[GitMCP](https://github.com/idosal/git-mcp)** - gitmcp.io is a generic remote MCP server to connect to ANY GitHub repository or project documentation effortlessly\n- **[Glean](https://github.com/longyi1207/glean-mcp-server)** - A server that uses Glean API to search and chat.\n- **[Gmail](https://github.com/GongRzhe/Gmail-MCP-Server)** - A Model Context Protocol (MCP) server for Gmail integration in Claude Desktop with auto authentication support.\n- **[Gmail](https://github.com/Ayush-k-Shukla/gmail-mcp-server)** - A Simple MCP server for Gmail with support for all basic operations with oauth2.0.\n- **[Gmail Headless](https://github.com/baryhuang/mcp-headless-gmail)** - Remote hostable MCP server that can get and send Gmail messages without local credential or file system setup.\n- **[Gmail MCP](https://github.com/gangradeamitesh/mcp-google-email)** - A Gmail service implementation using MCP (Model Context Protocol) that provides functionality for sending, receiving, and managing emails through Gmail's API.\n- **[Gnuradio](https://github.com/yoelbassin/gnuradioMCP)** - An MCP server for GNU Radio that enables LLMs to autonomously create and modify RF .grc flowcharts.\n- **[Goal Story](https://github.com/hichana/goalstory-mcp)** - a Goal Tracker and Visualization Tool for personal and professional development.\n- **[GOAT](https://github.com/goat-sdk/goat/tree/main/typescript/examples/by-framework/model-context-protocol)** - Run more than +200 onchain actions on any blockchain including Ethereum, Solana and Base.\n- **[Godot](https://github.com/Coding-Solo/godot-mcp)** - An MCP server providing comprehensive Godot engine integration for project editing, debugging, and scene management.\n- **[Golang Filesystem Server](https://github.com/mark3labs/mcp-filesystem-server)** - Secure file operations with configurable access controls built with Go!\n- **[Goodnews](https://github.com/VectorInstitute/mcp-goodnews)** - A simple MCP server that delivers curated positive and uplifting news stories.\n- **[Gopher MCP](https://github.com/cameronrye/gopher-mcp)** - Modern, cross-platform MCP server that enables AI assistants to browse and interact with both Gopher protocol and Gemini protocol resources safely and efficiently.\n- **[Google Ads](https://github.com/gomarble-ai/google-ads-mcp-server)** - MCP server acting as an interface to the Google Ads, enabling programmatic access to Facebook Ads data and management features.\n- **[Google Analytics](https://github.com/surendranb/google-analytics-mcp)** - Google Analytics MCP Server to bring data across 200+ dimensions & metrics for LLMs to analyse.\n- **[Google Calendar](https://github.com/v-3/google-calendar)** - Integration with Google Calendar to check schedules, find time, and add/delete events\n- **[Google Calendar](https://github.com/nspady/google-calendar-mcp)** - Google Calendar MCP Server for managing Google calendar events. Also supports searching for events by attributes like title and location.\n- **[Google Custom Search](https://github.com/adenot/mcp-google-search)** - Provides Google Search results via the Google Custom Search API\n- **[Google Maps](https://github.com/Mastan1301/google_maps_mcp)** - Provides location results using Google Places API.\n- **[Google Sheets](https://github.com/xing5/mcp-google-sheets)** - Access and editing data to your Google Sheets.\n- **[Google Sheets](https://github.com/rohans2/mcp-google-sheets)** - An MCP Server written in TypeScript to access and edit data in your Google Sheets.\n- **[Google Tasks](https://github.com/zcaceres/gtasks-mcp)** - Google Tasks API Model Context Protocol Server.\n- **[Google Vertex AI Search](https://github.com/ubie-oss/mcp-vertexai-search)** - Provides Google Vertex AI Search results by grounding a Gemini model with your own private data\n- **[Google Workspace](https://github.com/taylorwilsdon/google_workspace_mcp)** - Comprehensive Google Workspace MCP with full support for Calendar, Drive, Gmail, and Docs using Streamable HTTP or SSE transport.\n- **[Google-Scholar](https://github.com/JackKuo666/Google-Scholar-MCP-Server)** - Enable AI assistants to search and access Google Scholar papers through a simple MCP interface.\n- **[Google-Scholar](https://github.com/mochow13/google-scholar-mcp)** - An MCP server for Google Scholar written in TypeScript with Streamable HTTP transport, along with a `client` implementations that integrates with the server and interacts with `gemini-2.5-flash`.\n- **[gx-mcp-server](https://github.com/davidf9999/gx-mcp-server)** - Expose Great Expectations data validation and quality checks as MCP tools for AI agents.\n- **[Gralio SaaS Database](https://github.com/tymonTe/gralio-mcp)** - Find and compare SaaS products, including data from G2 reviews, Trustpilot, Crunchbase, Linkedin, pricing, features and more, using [Gralio MCP](https://gralio.ai/mcp) server\n- **[GraphQL](https://github.com/drestrepom/mcp_graphql)** - Comprehensive GraphQL API integration that automatically exposes each GraphQL query as a separate tool.\n- **[GraphQL Schema](https://github.com/hannesj/mcp-graphql-schema)** - Allow LLMs to explore large GraphQL schemas without bloating the context.\n- **[HackMD](https://github.com/yuna0x0/hackmd-mcp)** (by yuna0x0) - An MCP server for HackMD, a collaborative markdown editor. It allows users to create, read, and update documents in HackMD using the Model Context Protocol.\n- **[HAProxy](https://github.com/tuannvm/haproxy-mcp-server)** - A Model Context Protocol (MCP) server for HAProxy implemented in Go, leveraging HAProxy Runtime API.\n- **[Hashing MCP Server](https://github.com/kanad13/MCP-Server-for-Hashing)** - MCP Server with cryptographic hashing functions e.g. SHA256, MD5, etc.\n- **[HDW LinkedIn](https://github.com/horizondatawave/hdw-mcp-server)** - Access to profile data and management of user account with [HorizonDataWave.ai](https://horizondatawave.ai/).\n- **[HeatPump](https://github.com/jiweiqi/heatpump-mcp-server)** — Residential heat - pump sizing & cost-estimation tools by **HeatPumpHQ**.\n- **[Helm Chart CLI](https://github.com/jeff-nasseri/helm-chart-cli-mcp)** - Helm MCP provides a bridge between AI assistants and the Helm package manager for Kubernetes. It allows AI assistants to interact with Helm through natural language requests, executing commands like installing charts, managing repositories, and more.\n- **[Heurist Mesh Agent](https://github.com/heurist-network/heurist-mesh-mcp-server)** - Access specialized web3 AI agents for blockchain analysis, smart contract security, token metrics, and blockchain interactions through the [Heurist Mesh network](https://github.com/heurist-network/heurist-agent-framework/tree/main/mesh).\n- **[HLedger MCP](https://github.com/iiAtlas/hledger-mcp)** - Double entry plain text accounting, right in your LLM! This MCP enables comprehensive read, and (optional) write access to your local [HLedger](https://hledger.org/) accounting journals.\n- **[Holaspirit](https://github.com/syucream/holaspirit-mcp-server)** - Interact with [Holaspirit](https://www.holaspirit.com/).\n- **[Home Assistant](https://github.com/tevonsb/homeassistant-mcp)** - Interact with [Home Assistant](https://www.home-assistant.io/) including viewing and controlling lights, switches, sensors, and all other Home Assistant entities.\n- **[Home Assistant](https://github.com/voska/hass-mcp)** - Docker-ready MCP server for Home Assistant with entity management, domain summaries, automation support, and guided conversations. Includes pre-built container images for easy installation.\n- **[HubSpot](https://github.com/buryhuang/mcp-hubspot)** - HubSpot CRM integration for managing contacts and companies. Create and retrieve CRM data directly through Claude chat.\n- **[HuggingFace Spaces](https://github.com/evalstate/mcp-hfspace)** - Server for using HuggingFace Spaces, supporting Open Source Image, Audio, Text Models and more. Claude Desktop mode for easy integration.\n- **[Human-In-the-Loop](https://github.com/GongRzhe/Human-In-the-Loop-MCP-Server)** - A powerful MCP Server that enables AI assistants like Claude to interact with humans through intuitive GUI dialogs. This server bridges the gap between automated AI processes and human decision-making by providing real-time user input tools, choices, confirmations, and feedback mechanisms.\n- **[Human-use](https://github.com/RapidataAI/human-use)** - Instant human feedback through an MCP, have your AI interact with humans around the world. Powered by [Rapidata](https://www.rapidata.ai/)\n- **[Hyperledger Fabric Agent Suite](https://github.com/padmarajkore/hlf-fabric-agent)** - Modular toolkit for managing Fabric test networks and chaincode lifecycle via MCP tools.\n- **[Hyperliquid](https://github.com/mektigboy/server-hyperliquid)** - An MCP server implementation that integrates the Hyperliquid SDK for exchange data.\n- **[Hypertool](https://github.com/toolprint/hypertool-mcp)** – MCP that let's you create hot - swappable, \"persona toolsets\" from multiple MCP servers to reduce tool overload and improve tool execution.\n- **[hyprmcp](https://github.com/stefanoamorelli/hyprmcp)** (by Stefano Amorelli) - Lightweight MCP server for `hyprland`.\n- **[iFlytek SparkAgent Platform](https://github.com/iflytek/ifly-spark-agent-mcp)** - This is a simple example of using MCP Server to invoke the task chain of the  iFlytek SparkAgent Platform.\n- **[iFlytek Workflow](https://github.com/iflytek/ifly-workflow-mcp-server)** - Connect to iFlytek Workflow via the MCP server and run your own Agent.\n- **[IIIF](https://github.com/code4history/IIIF_MCP)** - Comprehensive IIIF (International Image Interoperability Framework) protocol support for searching, navigating, and manipulating digital collections from museums, libraries, and archives worldwide.\n- **[Image Generation](https://github.com/GongRzhe/Image-Generation-MCP-Server)** - This MCP server provides image generation capabilities using the Replicate Flux model.\n- **[ImageSorcery MCP](https://github.com/sunriseapps/imagesorcery-mcp)** - ComputerVision-based 🪄 sorcery of image recognition and editing tools for AI assistants.\n- **[IMAP MCP](https://github.com/dominik1001/imap-mcp)** - 📧 An IMAP Model Context Protocol (MCP) server to expose IMAP operations as tools for AI assistants.\n- **[iMCP](https://github.com/loopwork-ai/iMCP)** - A macOS app that provides an MCP server for your iMessage, Reminders, and other Apple services.\n- **[InfluxDB](https://github.com/idoru/influxdb-mcp-server)** - Run queries against InfluxDB OSS API v2.\n- **[Intelligent Image Generator](https://github.com/shinpr/mcp-image)** - Turn casual prompts into professional-quality images with AI enhancement\n- **[Inner Monologue MCP](https://github.com/abhinav-mangla/inner-monologue-mcp)** - A cognitive reasoning tool that enables LLMs to engage in private, structured self-reflection and multi-step reasoning before generating responses, improving response quality and problem-solving capabilities.\n- **[Inoyu](https://github.com/sergehuber/inoyu-mcp-unomi-server)** - Interact with an Apache Unomi CDP customer data platform to retrieve and update customer profiles\n- **[Instagram DM](https://github.com/trypeggy/instagram_dm_mcp)** - Send DMs on Instagram via your LLM\n- **[interactive-mcp](https://github.com/ttommyth/interactive-mcp)** - Enables interactive LLM workflows by adding local user prompts and chat capabilities directly into the MCP loop.\n- **[Intercom](https://github.com/raoulbia-ai/mcp-server-for-intercom)** - An MCP-compliant server for retrieving customer support tickets from Intercom. This tool enables AI assistants like Claude Desktop and Cline to access and analyze your Intercom support tickets.\n- **[iOS Simulator](https://github.com/InditexTech/mcp-server-simulator-ios-idb)** - A Model Context Protocol (MCP) server that enables LLMs to interact with iOS simulators (iPhone, iPad, etc.) through natural language commands.\n- **[ipybox](https://github.com/gradion-ai/ipybox)** - Python code execution sandbox based on IPython and Docker. Stateful code execution, file transfer between host and container, configurable network access. See [ipybox MCP server](https://gradion-ai.github.io/ipybox/mcp-server/) for details.\n- **[it-tools-mcp](https://github.com/wrenchpilot/it-tools-mcp)** - A Model Context Protocol server that recreates [CorentinTh it-tools](https://github.com/CorentinTh/it-tools) utilities for AI agents, enabling access to a wide range of developer tools (encoding, decoding, conversions, and more) via MCP.\n- **[itemit MCP](https://github.com/umin-ai/itemit-mcp)** - itemit is Asset Tracking MCP that manage the inventory, monitoring and location tracking that powers over +300 organizations.\n- **[iTerm MCP](https://github.com/ferrislucas/iterm-mcp)** - Integration with iTerm2 terminal emulator for macOS, enabling LLMs to execute and monitor terminal commands.\n- **[iTerm MCP Server](https://github.com/rishabkoul/iTerm-MCP-Server)** - A Model Context Protocol (MCP) server implementation for iTerm2 terminal integration. Able to manage multiple iTerm Sessions.\n- **[Java Decompiler](https://github.com/idachev/mcp-javadc)** - Decompile Java bytecode into readable source code from .class files, package names, or JAR archives using CFR decompiler\n- **[JavaFX](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jfx)** - Make drawings using a JavaFX canvas\n- **[JDBC](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc)** - Connect to any JDBC-compatible database and query, insert, update, delete, and more. Supports MySQL, PostgreSQL, Oracle, SQL Server, SQLite and [more](https://github.com/quarkiverse/quarkus-mcp-servers/tree/main/jdbc#supported-jdbc-variants).\n- **[Jenkins](https://github.com/jasonkylelol/jenkins-mcp-server)** - This MCP server allow you to create Jenkins tasks.\n- **[JMeter](https://github.com/QAInsights/jmeter-mcp-server)** - Run load testing using Apache JMeter via MCP-compliant tools.\n- **[Job Searcher](https://github.com/0xDAEF0F/job-searchoor)** - A FastMCP server that provides tools for retrieving and filtering job listings based on time period, keywords, and remote work preferences.\n- **[jobswithgpt](https://github.com/jobswithgpt/mcp)** - Job search MCP using jobswithgpt which indexes 500K+ public job listings and refreshed continously.\n- **[joinly](https://github.com/joinly-ai/joinly)** - MCP server to interact with browser-based meeting platforms (Zoom, Teams, Google Meet). Enables AI agents to send bots to online meetings, gather live transcripts, speak text, and send messages in the meeting chat.\n- **[JSON](https://github.com/GongRzhe/JSON-MCP-Server)** - JSON handling and processing server with advanced query capabilities using JSONPath syntax and support for array, string, numeric, and date operations.\n- **[JSON](https://github.com/kehvinbehvin/json-mcp-filter)** - JSON schema generation and filtering server with TypeScript type creation optimised for retrieving relevant context JSON data using quicktype-core and support for shape-based data extraction, nested object filtering, and array processing operations.\n- **[JSON to Excel by WTSolutions](https://github.com/he-yang/json-to-excel-mcp)** - Converting JSON into CSV format string from (1) JSON data, (2) URLs pointing to publiclly available .json files.\n- **[JSON2Video MCP](https://github.com/omergocmen/json2video-mcp-server)** - A Model Context Protocol (MCP) server implementation for programmatically generating videos using the json2video API. This server exposes powerful video generation and status-checking tools for use with LLMs, agents, or any MCP-compatible client.\n- **[jupiter-mcp](https://github.com/kukapay/jupiter-mcp)** - An MCP server for executing token swaps on the Solana blockchain using Jupiter's new Ultra API.\n- **[Jupyter MCP Server](https://github.com/datalayer/jupyter-mcp-server)** – Real-time interaction with Jupyter Notebooks, allowing AI to edit, document and execute code for data analysis, visualization etc. Compatible with any Jupyter deployment (local, JupyterHub, ...).\n- **[Jupyter Notebook](https://github.com/jjsantos01/jupyter-notebook-mcp)** - connects Jupyter Notebook to Claude AI, allowing Claude to directly interact with and control Jupyter Notebooks. This integration enables AI-assisted code execution, data analysis, visualization, and more.\n- **[k8s-multicluster-mcp](https://github.com/razvanmacovei/k8s-multicluster-mcp)** - An MCP server for interact with multiple Kubernetes clusters simultaneously using multiple kubeconfig files.\n- **[Kafka](https://github.com/tuannvm/kafka-mcp-server)** - A Model Context Protocol (MCP) server for Apache Kafka implemented in Go, leveraging [franz-go](https://github.com/twmb/franz-go).\n- **[Kafka Schema Registry MCP](https://github.com/aywengo/kafka-schema-reg-mcp)** \\ - A comprehensive MCP server for Kafka Schema Registry with 48 tools, multi-registry support, authentication, and production safety features. Enables AI-powered schema management with enterprise-grade capabilities including schema contexts, migration tools, and comprehensive export capabilities.\n- **[kafka-mcp](https://github.com/shivamxtech/kafka-mcp)** - An MCP Server for Kafka clusters to interact with kafka environment via tools on messages, topics, offsets, partitions for consumer and producers along with seamless integration with MCP clients.\n- **[Keycloak](https://github.com/idoyudha/mcp-keycloak)** - The Keycloak MCP Server designed for agentic applications to manage and search data in Keycloak efficiently.\n- **[Keycloak MCP](https://github.com/ChristophEnglisch/keycloak-model-context-protocol)** - This MCP server enables natural language interaction with Keycloak for user and realm management including creating, deleting, and listing users and realms.\n- **[Keycloak MCP Server](https://github.com/sshaaf/keycloak-mcp-server)** - designed to work with Keycloak for identity and access management, with about 40+ tools covering, Users, Realms, Clients, Roles, Groups, IDPs, Authentication. Native builds available.\n- **[Kibana MCP](https://github.com/TocharianOU/mcp-server-kibana.git)** (by TocharianOU) - A community-maintained MCP server implementation that allows any MCP-compatible client to access and manage Kibana instances through natural language or programmatic requests.\n- **[Kibela](https://github.com/kiwamizamurai/mcp-kibela-server)** (by kiwamizamurai) - Interact with Kibela API.\n- **[KiCad MCP](https://github.com/lamaalrajih/kicad-mcp)** - MCP server for KiCad on Mac, Windows, and Linux.\n- **[kill-process-mcp](https://github.com/misiektoja/kill-process-mcp)** - List and terminate OS processes via natural language queries\n- **[Kindred Offers & Discounts MCP](https://github.com/kindred-app/mcp-server-kindred-offers)** (by kindred.co) - This MCP server allows you to get live deals and offers/coupons from e-commerce merchant sites all over the world.\n- **[kintone](https://github.com/macrat/mcp-server-kintone)** - Manage records and apps in [kintone](https://kintone.com) through LLM tools.\n- **[Kokoro TTS](https://github.com/mberg/kokoro-tts-mcp)** - Use Kokoro text to speech to convert text to MP3s with optional autoupload to S3.\n- **[Kong Konnect](https://github.com/Kong/mcp-konnect)** - A Model Context Protocol (MCP) server for interacting with Kong Konnect APIs, allowing AI assistants to query and analyze Kong Gateway configurations, traffic, and analytics.\n- **[Korea Stock Analyzer](https://github.com/Mrbaeksang/korea-stock-analyzer-mcp)** - Analyze Korean stocks (KOSPI/KOSDAQ) with 6 legendary investment strategies including Buffett, Lynch, Graham, Greenblatt, Fisher, and Templeton.\n- **[Kubernetes](https://github.com/Flux159/mcp-server-kubernetes)** - Connect to Kubernetes cluster and manage pods, deployments, and services.\n- **[Kubernetes and OpenShift](https://github.com/manusa/kubernetes-mcp-server)** - A powerful Kubernetes MCP server with additional support for OpenShift. Besides providing CRUD operations for any Kubernetes resource, this server provides specialized tools to interact with your cluster.\n- **[KubeSphere](https://github.com/kubesphere/ks-mcp-server)** - The KubeSphere MCP Server is a Model Context Protocol(MCP) server that provides integration with KubeSphere APIs, enabling to get resources from KubeSphere. Divided into four tools modules: Workspace Management, Cluster Management, User and Roles, Extensions Center.\n- **[Kukapay MCP Servers](https://github.com/kukapay/kukapay-mcp-servers)** - A comprehensive suite of Model Context Protocol (MCP) servers dedicated to cryptocurrency, blockchain, and Web3 data aggregation, analysis, and services from Kukapay.\n- **[kwrds.ai](https://github.com/mkotsollaris/kwrds_ai_mcp)** - Keyword research, people also ask, SERP and other SEO tools for [kwrds.ai](https://www.kwrds.ai/)\n- **[KYC-mcp-server](https://github.com/vishnurudra-ai/KYC-mcp-server)** - Know Your Computer (KYC) - MCP Server compatible with Claude Desktop. Comprehensive system diagnostics for Windows, Mac OS and Linux operating system with AI-powered recommendations.\n- **[Langflow-DOC-QA-SERVER](https://github.com/GongRzhe/Langflow-DOC-QA-SERVER)** - A Model Context Protocol server for document Q&A powered by Langflow. It demonstrates core MCP concepts by providing a simple interface to query documents through a Langflow backend.\n- **[Language Server](https://github.com/isaacphi/mcp-language-server)** - MCP Language Server helps MCP enabled clients navigate codebases more easily by giving them access to semantic tools like get definition, references, rename, and diagnostics.\n- **[Lark(Feishu)](https://github.com/kone-net/mcp_server_lark)** - A Model Context Protocol(MCP) server for Lark(Feishu) sheet, message, doc and etc.\n- **[Lazy Toggl MCP](https://github.com/movstox/lazy-toggl-mcp)** - Simple unofficial MCP server to track time via Toggl API\n- **[lean-lsp-mcp](https://github.com/oOo0oOo/lean-lsp-mcp)** - Interact with the [Lean theorem prover](https://lean-lang.org/) via the Language Server Protocol.\n- **[librenms-mcp](https://github.com/mhajder/librenms-mcp)** - MCP server for [LibreNMS](https://www.librenms.org/) management\n- **[libvirt-mcp](https://github.com/MatiasVara/libvirt-mcp)** - Allows LLM to interact with libvirt thus enabling to create, destroy or list the Virtual Machines in a system.\n- **[Lightdash](https://github.com/syucream/lightdash-mcp-server)** - Interact with [Lightdash](https://www.lightdash.com/), a BI tool.\n- **[LINE](https://github.com/amornpan/py-mcp-line)** (by amornpan) - Implementation for LINE Bot integration that enables Language Models to read and analyze LINE conversations through a standardized interface. Features asynchronous operation, comprehensive logging, webhook event handling, and support for various message types.\n- **[Linear](https://github.com/tacticlaunch/mcp-linear)** - Interact with Linear project management system.\n- **[Linear](https://github.com/jerhadf/linear-mcp-server)** - Allows LLM to interact with Linear's API for project management, including searching, creating, and updating issues.\n- **[Linear (Go)](https://github.com/geropl/linear-mcp-go)** - Allows LLM to interact with Linear's API via a single static binary.\n- **[Linear MCP](https://github.com/anoncam/linear-mcp)** - Full blown implementation of the Linear SDK to support comprehensive Linear management of projects, initiatives, issues, users, teams and states.\n- **[Linked API MCP](https://github.com/Linked-API/linkedapi-mcp)** - MCP server that lets AI assistants control LinkedIn accounts and retrieve real-time data.\n- **[Listmonk MCP Server](https://github.com/rhnvrm/listmonk-mcp)** (by rhnvrm) - Full API coverage of [Listmonk](https://github.com/knadh/listmonk) email marketing FOSS.\n- **[LlamaCloud](https://github.com/run-llama/mcp-server-llamacloud)** (by marcusschiesser) - Integrate the data stored in a managed index on [LlamaCloud](https://cloud.llamaindex.ai/)\n- **[lldb-mcp](https://github.com/stass/lldb-mcp)** - A Model Context Protocol server for LLDB that provides LLM-driven debugging.\n- **[llm-context](https://github.com/cyberchitta/llm-context.py)** - Provides a repo-packing MCP tool with configurable profiles that specify file inclusion/exclusion patterns and optional prompts.\n- **[Local History](https://github.com/xxczaki/local-history-mcp)** – MCP server for accessing VS Code/Cursor's Local History.\n- **[Locust](https://github.com/QAInsights/locust-mcp-server)** - Allows running and analyzing Locust tests using MCP compatible clients.\n- **[Loki](https://github.com/scottlepp/loki-mcp)** - Golang based MCP Server to query logs from [Grafana Loki](https://github.com/grafana/loki).\n- **[Loki MCP Server](https://github.com/mo-silent/loki-mcp-server)** - Python based MCP Server for querying and analyzing logs from Grafana Loki with advanced filtering and authentication support.\n- **[LottieFiles](https://github.com/junmer/mcp-server-lottiefiles)** - Searching and retrieving Lottie animations from [LottieFiles](https://lottiefiles.com/)\n- **[lsp-mcp](https://github.com/Tritlo/lsp-mcp)** - Interact with Language Servers usint the Language Server Protocol to provide additional context information via hover, code actions and completions.\n- **[Lspace](https://github.com/Lspace-io/lspace-server)** - Turn scattered ChatGPT/Claude/Cursor conversations into persistent, searchable knowledge.\n- **[lucene-mcp-server](https://github.com/VivekKumarNeu/MCP-Lucene-Server)** - spring boot server using Lucene for fast document search and management.\n- **[lucid-mcp-server](https://github.com/smartzan63/lucid-mcp-server)** – An MCP server for Lucidchart and Lucidspark: connect, search, and obtain text representations of your Lucid documents and diagrams via LLM - driven AI Vision analysis. [npm](https://www.npmjs.com/package/lucid-mcp-server)\n- **[LunarCrush Remote MCP](https://github.com/lunarcrush/mcp-server)** - Get the latest social metrics and posts for both current live social context as well as historical metrics in LLM and token optimized outputs. Ideal for automated trading / financial advisory.\n- **[mac-messages-mcp](https://github.com/carterlasalle/mac_messages_mcp)** - An MCP server that securely interfaces with your iMessage database via the Model Context Protocol (MCP), allowing LLMs to query and analyze iMessage conversations. It includes robust phone number validation, attachment processing, contact management, group chat handling, and full support for sending and receiving messages.\n- **[Maestro MCP](https://github.com/maestro-org/maestro-mcp)** - An MCP server for interacting with Bitcoin via the Maestro RPC API.\n- **[Magg: The MCP Aggregator](https://github.com/sitbon/magg)** - A meta-MCP server that acts as a universal hub, allowing LLMs to autonomously discover, install, and orchestrate multiple MCP servers - essentially giving AI assistants the power to extend their own capabilities on-demand. Includes `mbro`, a powerful CLI MCP server browser with scripting capability.\n- **[Mailchimp MCP](https://github.com/AgentX-ai/mailchimp-mcp)** - Allows AI agents to interact with the Mailchimp API (read-only)\n- **[MalwareBazaar_MCP](https://github.com/mytechnotalent/MalwareBazaar_MCP)** (by Kevin Thomas) - An AI-driven MCP server that autonomously interfaces with MalwareBazaar, delivering real-time threat intel and sample metadata for authorized cybersecurity research workflows.\n- **[Mandoline](https://github.com/mandoline-ai/mandoline-mcp-server)** - Enable AI assistants to reflect on, critique, and continuously improve their own performance using Mandoline's evaluation framework.\n- **[Matrix](https://github.com/mjknowles/matrix-mcp-server)** - Interact with a Matrix homeserver.\n- **[man-mcp-server](https://github.com/guyru/man-mcp-server)** - MCP to search and access man pages on the local machine.\n- **[MariaDB](https://github.com/abel9851/mcp-server-mariadb)** - MariaDB database integration with configurable access controls in Python.\n- **[Markdown2doc](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/pandoc)** - Convert between various file formats using Pandoc\n- **[Markdownify](https://github.com/zcaceres/mcp-markdownify-server)** - MCP to convert almost anything to Markdown (PPTX, HTML, PDF, Youtube Transcripts and more)\n- **[market-fiyati](https://github.com/mtcnbzks/market-fiyati-mcp-server)** - The MCP server for marketfiyati.org.tr, offering grocery price search and comparison across Turkish markets.)\n- **[Markitdown](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/markitdown)** - Convert files to Markdown\n- **[Masquerade](https://github.com/postralai/masquerade)** - Redact sensitive information from your PDF documents before sending them to Claude. Masquerade serves as a privacy firewall for LLMs.\n- **[MasterGo](https://github.com/mastergo-design/mastergo-magic-mcp)** - The server designed to connect MasterGo design tools with AI models. It enables AI models to directly retrieve DSL data from MasterGo design files.\n- **[Matlab-MCP-Tools](https://github.com/neuromechanist/matlab-mcp-tools)** - An MCP to write and execute MATLAB scripts, maintain workspace context between MCP calls, visualize plots, and perform section-by-section analysis of MATLAB code with full access to MATLAB's computational capabilities.\n- **[Maton](https://github.com/maton-ai/agent-toolkit/tree/main/modelcontextprotocol)** - Connect to your SaaS tools like HubSpot, Salesforce, and more.\n- **[Maven Tools MCP](https://github.com/arvindand/maven-tools-mcp)** - Maven Central dependency intelligence for JVM build tools. Supports all build tools (Maven, Gradle, SBT, Mill) with Context7 integration for documentation support.\n- **[MCP-Airflow-API](https://github.com/call518/MCP-Airflow-API)** - Model Context Protocol (MCP) server for Apache Airflow API integration. Provides comprehensive tools for managing Airflow clusters including service operations, configuration management, status monitoring, and request tracking.\n- **[mcpcap](https://github.com/mcpcap/mcpcap)** - A modular Python MCP (Model Context Protocol) Server for analyzing PCAP files.\n- **[MCP Compass](https://github.com/liuyoshio/mcp-compass)** - Suggest the right MCP server for your needs\n- **[MCP Create](https://github.com/tesla0225/mcp-create)** - A dynamic MCP server management service that creates, runs, and manages Model Context Protocol servers on-the-fly.\n- **[MCP Documentation Server](https://github.com/andrea9293/mcp-documentation-server)** - Server that provides local-first document management and semantic search via embeddings or Gemini AI (recommended). Optimized for performance with disk persistence, an in-memory index, and caching.\n- **[MCP Installer](https://github.com/anaisbetts/mcp-installer)** - This server is a server that installs other MCP servers for you.\n- **[MCP ProjectManage OpenProject](https://github.com/boma086/mcp-projectmanage-openproject)** - This server provides the MCP service for project weekly reports, with project management information supplied by OpenProject.\n- **[MCP Proxy Server](https://github.com/TBXark/mcp-proxy)** - An MCP proxy server that aggregates and serves multiple MCP resource servers through a single HTTP server.\n- **[MCP Server Creator](https://github.com/GongRzhe/MCP-Server-Creator)** - A powerful Model Context Protocol (MCP) server that creates other MCP servers! This meta-server provides tools for dynamically generating FastMCP server configurations and Python code.\n- **[MCP Server Generator](https://github.com/SerhatUzbas/mcp-server-generator)** - An MCP server that creates and manages  MCP servers! Helps both non-technical users and developers build custom JavaScript MCP servers with AI guidance, automatic dependency management, and Claude Desktop integration.\n- **[MCP STDIO to Streamable HTTP Adapter](https://github.com/pyroprompts/mcp-stdio-to-streamable-http-adapter)** - Connect to Streamable HTTP MCP Servers even if the MCP Client only supports STDIO.\n- **[MCP-Ambari-API](https://github.com/call518/MCP-Ambari-API)** - Model Context Protocol (MCP) server for Apache Ambari API integration. This project provides tools for managing Hadoop clusters, including service operations, configuration management, status monitoring, and request tracking.\n- **[MCP-OpenStack-Ops](https://github.com/call518/MCP-OpenStack-Ops)** - Professional OpenStack operations automation via MCP server. Specialized tools for cluster monitoring, instance management, volume control & network analysis. FastMCP + OpenStack SDK + Bearer auth. Claude Desktop ready. Perfect for DevOps & cloud automation.\n- **[MCP-PostgreSQL-Ops](https://github.com/call518/MCP-PostgreSQL-Ops)** - Model Context Protocol (MCP) server for Apache Ambari API integration. This project provides tools for managing Hadoop clusters, including service operations, configuration management, status monitoring, and request tracking.\n- **[mcp-containerd](https://github.com/jokemanfire/mcp-containerd)** - The containerd MCP implemented by Rust supports the operation of the CRI interface.\n- **[MCP-Database-Server](https://github.com/executeautomation/mcp-database-server)** - Fastest way to interact with your Database such as SQL Server, SQLite and PostgreSQL\n- **[mcp-grep](https://github.com/erniebrodeur/mcp-grep)** - Python-based MCP server that brings grep functionality to LLMs. Supports common grep features including pattern searching, case-insensitive matching, context lines, and recursive directory searches.\n- **[mcp-k8s-go](https://github.com/strowk/mcp-k8s-go)** - Golang-based Kubernetes server for MCP to browse pods and their logs, events, namespaces and more. Built to be extensible.\n- **[mcp-local-rag](https://github.com/nkapila6/mcp-local-rag)** - \"primitive\" RAG-like web search model context protocol (MCP) server that runs locally using Google's MediaPipe Text Embedder and DuckDuckGo Search.\n- **[mcp-mcp](https://github.com/wojtyniak/mcp-mcp)** - Meta-MCP Server that acts as a tool discovery service for MCP clients.\n- **[mcp-meme-sticky](https://github.com/nkapila6/mcp-meme-sticky)** - Make memes or stickers using MCP server for WhatsApp or Telegram.\n- **[mcp-memory-service](https://github.com/doobidoo/mcp-memory-service)** - Universal MCP memory service providing semantic memory search, persistent storage, and autonomous memory consolidation for AI assistants across 13+ AI applications.\n- **[MCP-NixOS](https://github.com/utensils/mcp-nixos)** - A Model Context Protocol server that provides AI assistants with accurate, real-time information about NixOS packages, system options, Home Manager settings, and nix-darwin macOS configurations.\n- **[mcp-open-library](https://github.com/8enSmith/mcp-open-library)** - A Model Context Protocol (MCP) server for the Open Library API that enables AI assistants to search for book and author information.\n- **[mcp-proxy](https://github.com/sparfenyuk/mcp-proxy)** - Connect to MCP servers that run on SSE transport, or expose stdio servers as an SSE server.\n- **[mcp-read-website-fast](https://github.com/just-every/mcp-read-website-fast)** - Fast, token-efficient web content extraction that converts websites to clean Markdown. Features Mozilla Readability, smart caching, polite crawling with robots.txt support, and concurrent fetching with minimal dependencies.\n- **[mcp-salesforce](https://github.com/lciesielski/mcp-salesforce-example)** - MCP server with basic demonstration of interactions with your Salesforce instance\n- **[mcp-sanctions](https://github.com/madupay/mcp-sanctions)** - Screen individuals and organizations against global sanctions lists (OFAC, SDN, UN, etc). Query by prompt or document upload.\n- **[mcp-screenshot-website-fast](https://github.com/just-every/mcp-screenshot-website-fast)** - High-quality screenshot capture optimized for Claude Vision API. Automatically tiles full pages into 1072x1072 chunks (1.15 megapixels) with configurable viewports and wait strategies for dynamic content.\n- **[mcp-server-leetcode](https://github.com/doggybee/mcp-server-leetcode)** - Practice and retrieve problems from LeetCode. Automate problem retrieval, solutions, and insights for coding practice and competitions.\n- **[Mcp-Swagger-Server](https://github.com/zaizaizhao/mcp-swagger-server)** (by zaizaizhao) - This MCP server transforms OpenAPI specifications into MCP tools, enabling AI assistants to interact with REST APIs through standardized protocol\n- **[MCP Dynamic Tool Groups](https://github.com/ECF/MCPToolGroups)** - Example MCP servers that use [annotated](https://github.com/spring-ai-community/mcp-annotations) Java interfaces/classes as 'tool groups'.  Using standard MCP annotations, service implementations can then, at runtime, be used to generate tool specifications, and then dynamically added or removed from MCP servers.   The functionality is demonstrated in a sample tool group, but can be similarly used for any API or service.\n- **[mcp-vision](https://github.com/groundlight/mcp-vision)** - An MCP server exposing HuggingFace computer vision models such as zero-shot object detection as tools, enhancing the vision capabilities of large language or vision-language models.\n- **[mcp-weather](https://github.com/TimLukaHorstmann/mcp-weather)** - Accurate weather forecasts via the AccuWeather API (free tier available).\n- **[KnowAir Weather MCP](https://github.com/shuowang-ai/Weather-MCP)** - A comprehensive Model Context Protocol (MCP) server providing real-time weather data, air quality monitoring, forecasts, and astronomical information powered by Caiyun Weather API.\n- **[mcp-youtube-extract](https://github.com/sinjab/mcp_youtube_extract)** - A Model Context Protocol server for YouTube operations, extracting video information and transcripts with intelligent fallback logic. Features comprehensive logging, error handling, and support for both auto-generated and manual transcripts.\n- **[mcp_weather](https://github.com/isdaniel/mcp_weather_server)** - Get weather information from https://api.open-meteo.com API.\n- **[MCPfinder](https://github.com/mcpfinder/server)** - The AI Agent's \"App Store\": Discover, install, and monetize AI capabilities — all within the MCP ecosystem.\n- **[MCPIgnore Filesytem](https://github.com/CyberhavenInc/filesystem-mcpignore)** - A Data Security First filesystem MCP server that implements .mcpignore to prevent MCP clients from accessing sensitive data.\n- **[MCPJungle](https://github.com/mcpjungle/MCPJungle)** - Self-hosted MCP Registry and Gateway for enterprise AI Agents\n- **[Md2doc](https://github.com/Yorick-Ryu/md2doc-mcp)** - Convert Markdown text to DOCX format using an external conversion service\n- **[MeasureSpace MCP](https://github.com/MeasureSpace/measure-space-mcp-server)** - A free [Model Context Protocol (MCP) Server](https://smithery.ai/server/@MeasureSpace/measure-space-mcp-server) that provides global weather, climate, air quality forecast and geocoding services by [measurespace.io](https://measurespace.io).\n- **[MediaWiki](https://github.com/ProfessionalWiki/MediaWiki-MCP-Server)** - A Model Context Protocol (MCP) Server that interacts with any MediaWiki wiki\n- **[MediaWiki MCP adapter](https://github.com/lucamauri/MediaWiki-MCP-adapter)** - A custom Model Context Protocol adapter for MediaWiki and WikiBase APIs\n- **[medRxiv](https://github.com/JackKuo666/medRxiv-MCP-Server)** - Enable AI assistants to search and access medRxiv papers through a simple MCP interface.\n- **[mem0-mcp](https://github.com/mem0ai/mem0-mcp)** - A Model Context Protocol server for Mem0, which helps with managing coding preferences.\n- **[Membase](https://github.com/unibaseio/membase-mcp)** - Save and query your agent memory in distributed way by Membase.\n- **[Meme MCP](https://github.com/lidorshimoni/meme-mcp)** - Generate memes via AI using the Imgflip API through the Model Context Protocol.\n- **[memento-mcp](https://github.com/gannonh/memento-mcp)** - Knowledge graph memory system built on Neo4j with semantic search, temporal awareness.\n- **[Meta Ads Remote MCP](https://github.com/pipeboard-co/meta-ads-mcp)** - Remote MCP server to interact with Meta Ads API - access, analyze, and manage Facebook, Instagram, and other Meta platforms advertising campaigns.\n- **[MetaTrader MCP](https://github.com/ariadng/metatrader-mcp-server)** - Enable AI LLMs to execute trades using MetaTrader 5 platform.\n- **[Metricool MCP](https://github.com/metricool/mcp-metricool)** - A Model Context Protocol server that integrates with Metricool's social media analytics platform to retrieve performance metrics and schedule content across networks like Instagram, Facebook, Twitter, LinkedIn, TikTok and YouTube.\n- **[Microsoft 365](https://github.com/merill/lokka)** - (by Merill) A Model Context Protocol (MCP) server for Microsoft 365. Includes support for all services including Teams, SharePoint, Exchange, OneDrive, Entra, Intune and more. See [Lokka](https://lokka.dev/) for more details.\n- **[Microsoft 365](https://github.com/softeria/ms-365-mcp-server)** - MCP server that connects to Microsoft Office and the whole Microsoft 365 suite using Graph API (including Outlook/mail, files, Excel, calendar)\n- **[Microsoft 365](https://github.com/pnp/cli-microsoft365-mcp-server)** - Single MCP server that allows to manage many different areas of Microsoft 365, for example: Entra ID, OneDrive, OneNote, Outlook, Planner, Power Apps, Power Automate, Power Platform, SharePoint Embedded, SharePoint Online, Teams, Viva Engage, and many more.\n- **[Microsoft 365 Files (SharePoint/OneDrive)](https://github.com/godwin3737/mcp-server-microsoft365-filesearch)** (by godwin3737) - MCP server with tools to search and get file content from Microsoft 365 including Onedrive and SharePoint. Works with Documents (pdf/docx), Presentations, Spreadsheets and Images.\n- **[Microsoft Teams](https://github.com/InditexTech/mcp-teams-server)** - MCP server that integrates Microsoft Teams messaging (read, post, mention, list members and threads)\n- **[Mifos X](https://github.com/openMF/mcp-mifosx)** - An MCP server for the Mifos X Open Source Banking useful for managing clients, loans, savings, shares, financial transactions and generating financial reports.\n- **[Mikrotik](https://github.com/jeff-nasseri/mikrotik-mcp)** - Mikrotik MCP server which cover networking operations (IP, DHCP, Firewall, etc)\n- **[Mindmap](https://github.com/YuChenSSR/mindmap-mcp-server)** (by YuChenSSR) - A server that generates mindmaps from input containing markdown code.\n- **[Minima](https://github.com/dmayboroda/minima)** - MCP server for RAG on local files\n- **[Modao Proto MCP](https://github.com/modao-dev/modao-proto-mcp)** - AI-powered HTML prototype generation server that converts natural language descriptions into complete HTML code with modern design and responsive layouts. Supports design description expansion and seamless integration with Modao workspace.\n- **[Mobile MCP](https://github.com/mobile-next/mobile-mcp)** (by Mobile Next) - MCP server for Mobile(iOS/Android) automation, app scraping and development using physical devices or simulators/emulators.\n- **[Monday.com (unofficial)](https://github.com/sakce/mcp-server-monday)** - MCP Server to interact with Monday.com boards and items.\n- **[MongoDB](https://github.com/kiliczsh/mcp-mongo-server)** - A Model Context Protocol Server for MongoDB.\n- **[MongoDB & Mongoose](https://github.com/nabid-pf/mongo-mongoose-mcp)** - MongoDB MCP Server with Mongoose Schema and Validation.\n- **[MongoDB Lens](https://github.com/furey/mongodb-lens)** - Full Featured MCP Server for MongoDB Databases.\n- **[Monzo](https://github.com/BfdCampos/monzo-mcp-bfdcampos)** - Access and manage your Monzo bank accounts through natural language, including balance checking, pot management, transaction listing, and transaction annotation across multiple account types (personal, joint, flex).\n- **[Morningstar](https://github.com/Morningstar/morningstar-mcp-server)** - MCP Server to interact with Morningstar Research, Editorial and Datapoints\n- **[MSSQL](https://github.com/aekanun2020/mcp-server/)** - MSSQL database integration with configurable access controls and schema inspection\n- **[MSSQL](https://github.com/JexinSam/mssql_mcp_server)** (by jexin) - MCP Server for MSSQL database in Python\n- **[MSSQL-MCP](https://github.com/daobataotie/mssql-mcp)** (by daobataotie) - MSSQL MCP that refer to the official website's SQLite MCP for modifications to adapt to MSSQL\n- **[MSSQL-MCP-Node](https://github.com/mihai-dulgheru/mssql-mcp-node)** (by mihai - dulgheru) – Node.js MCP server for Microsoft SQL Server featuring auto-detected single / multi-database configs, execute-SQL and schema tools, robust Zod validation, and optional Express endpoints for local testing\n- **[MSSQL-Python](https://github.com/amornpan/py-mcp-mssql)** (by amornpan) - A read-only Python implementation for MSSQL database access with enhanced security features, configurable access controls, and schema inspection capabilities. Focuses on safe database interaction through Python ecosystem.\n- **[Multi-Model Advisor](https://github.com/YuChenSSR/multi-ai-advisor-mcp)** - A Model Context Protocol (MCP) server that orchestrates queries across multiple Ollama models, synthesizing their insights to deliver a comprehensive and multifaceted AI perspective on any given query.\n- **[Multicluster-MCP-Sever](https://github.com/yanmxa/multicluster-mcp-server)** - The gateway for GenAI systems to interact with multiple Kubernetes clusters.\n- **[MySQL](https://github.com/benborla/mcp-server-mysql)** (by benborla) - MySQL database integration in NodeJS with configurable access controls and schema inspection\n- **[MySQL](https://github.com/designcomputer/mysql_mcp_server)** (by DesignComputer) - MySQL database integration in Python with configurable access controls and schema inspection\n- **[MySQL-Server](https://github.com/tonycai/mcp-mysql-server)** (by TonyCai) - MySQL Database Integration using Python script with configurable access controls and schema inspection, usng stdio mode to suitable local deployment, you can run it in docker container.\n- **[n8n](https://github.com/leonardsellem/n8n-mcp-server)** - This MCP server provides tools and resources for AI assistants to manage n8n workflows and executions, including listing, creating, updating, and deleting workflows, as well as monitoring their execution status.\n- **[Nacos MCP Router](https://github.com/nacos-group/nacos-mcp-router)** - This MCP(Model Context Protocol) Server provides tools to search, install, proxy other MCP servers.\n- **[NASA](https://github.com/ProgramComputer/NASA-MCP-server)** (by ProgramComputer) - Access to a unified gateway of NASA's data sources including but not limited to APOD, NEO, EPIC, GIBS.\n- **[NASA Image MCP Server](https://github.com/adithya1012/NASA-MCP-Server/blob/main/README.md)** - MCP server providing access to NASA's visual data APIs including Mars Rover photos, Earth satellite imagery (EPIC/GIBS), and Astronomy picture of the day. Features built-in image analysis tools with automatic format detection, compression, and base64 conversion for LLM integration.\n- **[Nasdaq Data Link](https://github.com/stefanoamorelli/nasdaq-data-link-mcp)** (by stefanoamorelli) - An MCP server to access, explore, and interact with Nasdaq Data Link's extensive and valuable financial and economic datasets.\n- **[National Parks](https://github.com/KyrieTangSheng/mcp-server-nationalparks)** - The server provides latest information of park details, alerts, visitor centers, campgrounds, hiking trails, and events for U.S. National Parks.\n- **[NAVER](https://github.com/pfldy2850/py-mcp-naver)** (by pfldy2850) - This MCP server provides tools to interact with various Naver services, such as searching blogs, news, books, and more.\n- **[Naver](https://github.com/isnow890/naver-search-mcp)** (by isnow890) - MCP server for Naver Search API integration, supporting blog, news, shopping search and DataLab analytics features.\n- **[NBA](https://github.com/Taidgh-Robinson/nba-mcp-server)** - This MCP server provides tools to fetch recent and historical NBA games including basic and advanced statistics.\n- **[NCI GDC](https://github.com/QuentinCody/nci-gdc-mcp-server)** - Unofficial MCP server for the National Cancer Institute's Genomic Data Commons (GDC), providing access to harmonized cancer genomic and clinical data for oncology research.\n- **[Neo4j](https://github.com/da-okazaki/mcp-neo4j-server)** - A community built server that interacts with Neo4j Graph Database.\n- **[Neovim](https://github.com/bigcodegen/mcp-neovim-server)** - An MCP Server for your Neovim session.\n- **[Netbird](https://github.com/aantti/mcp-netbird)** - List and analyze Netbird network peers, groups, policies, and more.\n- **[NetMind ParsePro](https://github.com/protagolabs/Netmind-Parse-PDF-MCP)** - The PDF Parser AI service, built and customized by the [NetMind](https://www.netmind.ai/) team.\n- **[Nikto MCP](https://github.com/weldpua2008/nikto-mcp)** (by weldpua2008) - A secure MCP server that enables AI agents to interact with Nikto web server scanner](- use with npx or docker).\n- **[NocoDB](https://github.com/edwinbernadus/nocodb-mcp-server)** - Read and write access to NocoDB database.\n- **[Node Code Sandbox](https://github.com/alfonsograziano/node-code-sandbox-mcp)** – A Node.js MCP server that spins up isolated Docker - based sandboxes for executing JavaScript snippets with on-the-fly npm dependency installation\n- **[nomad-mcp](https://github.com/kocierik/mcp-nomad)** - A server that provides a set of tools for managing Nomad clusters through the MCP.\n- **[Notion](https://github.com/suekou/mcp-notion-server)** (by suekou) - Interact with Notion API.\n- **[Notion](https://github.com/v-3/notion-server)** (by v-3) - Notion MCP integration. Search, Read, Update, and Create pages through Claude chat.\n- **[NPM Plus](https://github.com/shacharsol/js-package-manager-mcp)** - AI-powered JavaScript package management with security scanning, bundle analysis, and intelligent dependency management for MCP-compatible editors.\n- **[NS Travel Information](https://github.com/r-huijts/ns-mcp-server)** - Access Dutch Railways (NS) real-time train travel information and disruptions through the official NS API.\n- **[ntfy-mcp](https://github.com/teddyzxcv/ntfy-mcp)** (by teddyzxcv) - The MCP server that keeps you informed by sending the notification on phone using ntfy\n- **[ntfy-me-mcp](https://github.com/gitmotion/ntfy-me-mcp)** (by gitmotion) - An ntfy MCP server for sending/fetching ntfy notifications to your self-hosted ntfy server from AI Agents 📤 (supports secure token auth & more - use with npx or docker!)\n- **[oatpp-mcp](https://github.com/oatpp/oatpp-mcp)** - C++ MCP integration for Oat++. Use [Oat++](https://oatpp.io) to build MCP servers.\n- **[Obsidian Markdown Notes](https://github.com/calclavia/mcp-obsidian)** - Read and search through your Obsidian vault or any directory containing Markdown notes\n- **[obsidian-mcp](https://github.com/StevenStavrakis/obsidian-mcp)** - (by Steven Stavrakis) An MCP server for Obsidian.md with tools for searching, reading, writing, and organizing notes.\n- **[OceanBase](https://github.com/yuanoOo/oceanbase_mcp_server)** - (by yuanoOo) A Model Context Protocol (MCP) server that enables secure interaction with OceanBase databases.\n- **[Octocode](https://github.com/bgauryy/octocode-mcp)** - (by Guy Bary) AI-powered developer assistant that enables advanced code research, analysis and discovery across GitHub and NPM realms in realtime\n- **[Odoo](https://github.com/ivnvxd/mcp-server-odoo)** - Connect AI assistants to Odoo ERP systems for business data access and workflow automation.\n- **[Office-PowerPoint-MCP-Server](https://github.com/GongRzhe/Office-PowerPoint-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft PowerPoint documents.\n- **[Office-Visio-MCP-Server](https://github.com/GongRzhe/Office-Visio-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Visio documents.\n- **[Office-Word-MCP-Server](https://github.com/GongRzhe/Office-Word-MCP-Server)** - A Model Context Protocol (MCP) server for creating, reading, and manipulating Microsoft Word documents.\n- **[Okta](https://github.com/kapilduraphe/okta-mcp-server)** - Interact with Okta API.\n- **[OKX-MCP-Server](https://github.com/memetus/okx-mcp-playground)** - An MCP server provides various blockchain data and market price data via the OKX API. The server enables Claude to perform operations like retrieve assets prices, transaction data, account history data and trade instruction data.\n- **[OneNote](https://github.com/rajvirtual/MCP-Servers/tree/master/onenote)** - (by Rajesh Vijay) An MCP server that connects to Microsoft OneNote using the Microsoft Graph API. Reading notebooks, sections, and pages from OneNote,Creating new notebooks, sections, and pages in OneNote.\n- **[Onyx MCP Sandbox](https://github.com/avd1729/Onyx)** – (by Aravind) A secure MCP server that executes code in isolated Docker sandboxes. Supports Python, Java, C, C++, JavaScript, and Rust. Provides the `run_code` tool, enforces CPU/memory limits, includes comprehensive tests, and detailed setup instructions.\n- **[Open Strategy Partners Marketing Tools](https://github.com/open-strategy-partners/osp_marketing_tools)** - Content editing codes, value map, and positioning tools for product marketing.\n- **[OpenAI WebSearch MCP](https://github.com/ConechoAI/openai-websearch-mcp)** - This is a Python-based MCP server that provides OpenAI `web_search` built-in tool.\n- **[OpenAlex.org MCP](https://github.com/drAbreu/alex-mcp)** - Professional MCP server providing ML-powered author disambiguation and comprehensive researcher profiles using the OpenAlex database.\n- **[OpenAPI](https://github.com/snaggle-ai/openapi-mcp-server)** - Interact with [OpenAPI](https://www.openapis.org/) APIs.\n- **[OpenAPI AnyApi](https://github.com/baryhuang/mcp-server-any-openapi)** - Interact with large [OpenAPI](https://www.openapis.org/) docs using built-in semantic search for endpoints. Allows for customizing the MCP server prefix.\n- **[OpenAPI Schema](https://github.com/hannesj/mcp-openapi-schema)** - Allow LLMs to explore large [OpenAPI](https://www.openapis.org/) schemas without bloating the context.\n- **[OpenAPI Schema Explorer](https://github.com/kadykov/mcp-openapi-schema-explorer)** - Token-efficient access to local or remote OpenAPI/Swagger specs via MCP Resources.\n- **[OpenCTI](https://github.com/Spathodea-Network/opencti-mcp)** - Interact with OpenCTI platform to retrieve threat intelligence data including reports, indicators, malware and threat actors.\n- **[OpenCV](https://github.com/GongRzhe/opencv-mcp-server)** - An MCP server providing OpenCV computer vision capabilities. This allows AI assistants and language models to access powerful computer vision tools.\n- **[OpenDota](https://github.com/asusevski/opendota-mcp-server)** - Interact with OpenDota API to retrieve Dota 2 match data, player statistics, and more.\n- **[OpenLink Generic Java Database Connectivity](https://github.com/OpenLinkSoftware/mcp-jdbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers)\n- **[OpenLink Generic Open Database Connectivity](https://github.com/OpenLinkSoftware/mcp-odbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers)\n- **[OpenLink Generic Python Open Database Connectivity](https://github.com/OpenLinkSoftware/mcp-pyodbc-server)** - Generic Database Management System (DBMS) access via Open Database Connectivity (ODBC) Connectors (Drivers) for PyODBC\n- **[OpenLink Generic SQLAlchemy Object-Relational Database Connectivity for PyODBC](https://github.com/OpenLinkSoftware/mcp-sqlalchemy-server)** - Generic Database Management System (DBMS) access via SQLAlchemy (PyODBC) Connectors (Drivers)\n- **[OpenMetadata](https://github.com/yangkyeongmo/mcp-server-openmetadata)** - MCP Server for OpenMetadata, an open-source metadata management platform.\n- **[OpenNeuro](https://github.com/QuentinCody/open-neuro-mcp-server)** - Unofficial MCP server for OpenNeuro, providing access to open neuroimaging datasets, study metadata, and brain imaging data for neuroscience research and analysis.\n- **[OpenReview](https://github.com/anyakors/openreview-mcp-server)** - An MCP server for [OpenReview](https://openreview.net/) to fetch, read and save manuscripts from AI/ML conferences.\n- **[OpenRPC](https://github.com/shanejonas/openrpc-mpc-server)** - Interact with and discover JSON-RPC APIs via [OpenRPC](https://open-rpc.org).\n- **[OpenStack](https://github.com/wangsqly0407/openstack-mcp-server)** - MCP server implementation that provides OpenStack interaction.\n- **[Open Targets](https://github.com/QuentinCody/open-targets-mcp-server)** - Unofficial MCP server for the Open Targets Platform, providing access to target-disease associations, drug discovery data, and therapeutic hypothesis generation for biomedical research.\n- **[OpenWeather](https://github.com/mschneider82/mcp-openweather)** - Interact with the free openweathermap API to get the current and forecast weather for a location.\n- **[OpenZIM MCP](https://github.com/cameronrye/openzim-mcp)** - Modern, secure, and high-performance MCP server that enables AI models to access and search ZIM format knowledge bases offline, including Wikipedia and educational content archives.\n- **[Operative WebEvalAgent](https://github.com/Operative-Sh/web-eval-agent)** (by [Operative.sh](https://www.operative.sh)) - An MCP server to test, debug, and fix web applications autonomously.\n- **[OPNSense MCP](https://github.com/vespo92/OPNSenseMCP)** - MCP Server for OPNSense Firewall Management and API access\n- **[OpenAI GPT Image](https://github.com/SureScaleAI/openai-gpt-image-mcp)** - OpenAI GPT image generation/editing MCP server.\n- **[Optimade MCP](https://github.com/dianfengxiaobo/optimade-mcp-server)** - An MCP server conducts real-time material science data queries with the Optimade database (for example, elemental composition, crystal structure).\n- **[Oracle](https://github.com/marcelo-ochoa/servers)** (by marcelo-ochoa) - Oracle Database integration in NodeJS with configurable access controls, query explain, stats and schema inspection\n- **[Oracle Cloud Infrastructure (OCI)](https://github.com/karthiksuku/oci-mcp)** (by karthiksukumar) - Python MCP server for OCI infrastructure (Compute, Autonomous Database, Object Storage). Read-heavy by default with safe instance actions (start/stop/reset). Includes Claude Desktop config and `.env` compartment scoping.\n- **[Oura MCP server](https://github.com/tomekkorbak/oura-mcp-server)** - MCP server for Oura API to retrieve one's sleep data\n- **[Oura Ring](https://github.com/rajvirtual/oura-mcp-server)** (by Rajesh Vijay) - MCP Server to access and analyze your Oura Ring data. It provides a structured way to fetch and understand your health metrics.\n- **[Outline](https://github.com/Vortiago/mcp-outline)** - MCP Server to interact with [Outline](https://www.getoutline.com) knowledge base to search, read, create, and manage documents and their content, access collections, add comments, and manage document backlinks.\n- **[Outlook Mail + Calendar + OneDrive](https://github.com/Norcim133/OutlookMCPServer) - Virtual assistant with Outlook Mail, Calendar, and early OneDrive support (requires Azure admin).\n- **[Pacman](https://github.com/oborchers/mcp-server-pacman)** - An MCP server that provides package index querying capabilities. This server is able to search and retrieve information from package repositories like PyPI, npm, crates.io, Docker Hub, and Terraform Registry.\n- **[pancakeswap-poolspy-mcp](https://github.com/kukapay/pancakeswap-poolspy-mcp)** - An MCP server that tracks newly created liquidity pools on Pancake Swap.\n- **[Pandoc](https://github.com/vivekVells/mcp-pandoc)** - MCP server for seamless document format conversion using Pandoc, supporting Markdown, HTML, PDF, DOCX (.docx), csv and more.\n- **[Paradex MCP](https://github.com/sv/mcp-paradex-py)** - MCP native server for interacting with Paradex platform, including fully features trading.\n- **[Parliament MCP]([https://github.com/sv/mcp-paradex-py](https://github.com/i-dot-ai/parliament-mcp))** - MCP server for querying UK parliamentary data.\n- **[PDF reader MCP](https://github.com/gpetraroli/mcp_pdf_reader)** - MCP server to read and search text in a local PDF file.\n- **[PDF Tools MCP](https://github.com/Sohaib-2/pdf-mcp-server)** - Comprehensive PDF manipulation toolkit (merge, split, encrypt, optimize and much more)\n- **[PDMT](https://github.com/paiml/pdmt)** - Pragmatic Deterministic MCP Templating - High-performance deterministic templating library with comprehensive todo validation, quality enforcement, and 0.0 temperature generation for reproducible outputs.\n- **[Peacock for VS Code](https://github.com/johnpapa/peacock-mcp)** - MCP Server for the Peacock extension for VS Code, coloring your world, one Code editor at a time. The main goal of the project is to show how an MCP server can be used to interact with APIs.\n- **[persistproc](https://github.com/irskep/persistproc)** - MCP server + command line tool that allows agents to see & control long-running processes like web servers.\n- **[Pexels](https://github.com/garylab/pexels-mcp-server)** - A MCP server providing access to Pexels Free Image API, enabling seamless search, retrieval, and download of high-quality royalty-free images.\n- **[Pharos](https://github.com/QuentinCody/pharos-mcp-server)** - Unofficial MCP server for the Pharos database by the National Center for Advancing Translational Sciences (NCATS), providing access to target, drug, and disease information for drug discovery research.\n- **[Phone MCP](https://github.com/hao-cyber/phone-mcp)** - 📱 A powerful plugin that lets you control your Android phone. Enables AI agents to perform complex tasks like automatically playing music based on weather or making calls and sending texts.\n- **[PIF](https://github.com/hungryrobot1/MCP-PIF)** - A Personal Intelligence Framework (PIF), providing tools for file operations, structured reasoning, and journal-based documentation to support continuity and evolving human-AI collaboration across sessions.\n- **[Pinecone](https://github.com/sirmews/mcp-pinecone)** - MCP server for searching and uploading records to Pinecone. Allows for simple RAG features, leveraging Pinecone's Inference API.\n- **[Pinner MCP](https://github.com/safedep/pinner-mcp)** - An MCP server for pinning GitHub Actions and container base images to their immutable SHA hashes to prevent supply chain attacks.\n- **[Pixelle MCP](https://github.com/AIDC-AI/Pixelle-MCP)** - An omnimodal AIGC framework that seamlessly converts ComfyUI workflows into MCP tools with zero code, enabling full-modal support for Text, Image, Sound, and Video generation with Chainlit-based web interface.\n- **[Placid.app](https://github.com/felores/placid-mcp-server)** - Generate image and video creatives using Placid.app templates\n- **[Plane](https://github.com/kelvin6365/plane-mcp-server)** - This MCP Server will help you to manage projects and issues through Plane's API\n- **[Playwright](https://github.com/executeautomation/mcp-playwright)** - This MCP Server will help you run browser automation and webscraping using Playwright\n- **[Podbean](https://github.com/amurshak/podbeanMCP)** - MCP server for managing your podcasts, episodes, and analytics through the Podbean API. Allows for updating, adding, deleting podcasts, querying show description, notes, analytics, and more.\n- **[Polarsteps](https://github.com/remuzel/polarsteps-mcp)** - An MCP server to help you review your previous Trips and plan new ones!\n- **[PostgreSQL](https://github.com/ahmedmustahid/postgres-mcp-server)** - A PostgreSQL MCP server offering dual HTTP/Stdio transports for database schema inspection and read-only query execution with session management and Podman(or Docker) support.\n- **[Postman](https://github.com/shannonlal/mcp-postman)** - MCP server for running Postman Collections locally via Newman. Allows for simple execution of Postman Server and returns the results of whether the collection passed all the tests.\n- **[Powerdrill](https://github.com/powerdrillai/powerdrill-mcp)** - Interact with Powerdrill datasets, authenticated with [Powerdrill](https://powerdrill.ai) User ID and Project API Key.\n- **[Prefect](https://github.com/allen-munsch/mcp-prefect)** - MCP Server for workflow orchestration and ELT/ETL with Prefect Server, and Prefect Cloud [https://www.prefect.io/] using the `prefect` python client.\n- **[Productboard](https://github.com/kenjihikmatullah/productboard-mcp)** - Integrate the Productboard API into agentic workflows via MCP.\n- **[Prometheus](https://github.com/pab1it0/prometheus-mcp-server)** - Query and analyze Prometheus - open-source monitoring system.\n- **[Prometheus (TypeScript)](https://github.com/yanmxa/prometheus-mcp-server)** - Enable AI assistants to query Prometheus using natural language with TypeScript implementation.\n- **[Prometheus (Golang)](https://github.com/tjhop/prometheus-mcp-server/)** - A Prometheus MCP server with full API support for comprehensive management and deep interaction with Prometheus beyond basic query support. Written in go, it is a single binary install that is capable of STDIO, SSE, and HTTP transports for complex deployments. \n- **[PubChem](https://github.com/sssjiang/pubchem_mcp_server)** - extract drug information from pubchem API.\n- **[PubMed](https://github.com/JackKuo666/PubMed-MCP-Server)** - Enable AI assistants to search, access, and analyze PubMed articles through a simple MCP interface.\n- **[Pulumi](https://github.com/dogukanakkaya/pulumi-mcp-server)** - MCP Server to Interact with Pulumi API, creates and lists Stacks\n- **[Puppeteer vision](https://github.com/djannot/puppeteer-vision-mcp)** - Use Puppeteer to browse a webpage and return a high quality Markdown. Use AI vision capabilities to handle cookies, captchas, and other interactive elements automatically.\n- **[Pushover](https://github.com/ashiknesin/pushover-mcp)** - Send instant notifications to your devices using [Pushover.net](https://pushover.net/)\n- **[py-mcp-qdrant-rag](https://github.com/amornpan/py-mcp-qdrant-rag)** (by amornpan) - A Model Context Protocol server implementation that provides RAG capabilities through Qdrant vector database integration, enabling AI agents to perform semantic search and document retrieval with local or cloud-based embedding generation support across Mac, Linux, and Windows platforms.\n- **[pydantic/pydantic-ai/mcp-run-python](https://github.com/pydantic/pydantic-ai/tree/main/mcp-run-python)** - Run Python code in a secure sandbox via MCP tool calls, powered by Deno and Pyodide\n- **[Python CLI MCP](https://github.com/ofek/pycli-mcp)** - Interact with local Python command line applications.\n- **[QGIS](https://github.com/jjsantos01/qgis_mcp)** - connects QGIS to Claude AI through the MCP. This integration enables prompt-assisted project creation, layer loading, code execution, and more.\n- **[Qiniu MCP Server](https://github.com/qiniu/qiniu-mcp-server)** - The Model Context Protocol (MCP) Server built on Qiniu Cloud products supports users in accessing Qiniu Cloud Storage, intelligent multimedia services, and more through this MCP Server within the context of AI large model clients.\n- **[QuantConnect](https://github.com/taylorwilsdon/quantconnect-mcp)** - QuantConnect Algorithmic Trading Platform Orchestration MCP - Agentic LLM Driven Trading Strategy Design, Research & Implementation.\n- **[Quarkus](https://github.com/quarkiverse/quarkus-mcp-servers)** - MCP servers for the Quarkus Java framework.\n- **[QuickChart](https://github.com/GongRzhe/Quickchart-MCP-Server)** - A Model Context Protocol server for generating charts using QuickChart.io\n- **[Qwen_Max](https://github.com/66julienmartin/MCP-server-Qwen_Max)** - A Model Context Protocol (MCP) server implementation for the Qwen models.\n- **[RabbitMQ](https://github.com/kenliao94/mcp-server-rabbitmq)** - The MCP server that interacts with RabbitMQ to publish and consume messages.\n- **[RAE](https://github.com/rae-api-com/rae-mcp)** - MPC Server to connect your preferred model with rae-api.com, Roya Academy of Spanish Dictionary\n- **[RAG Local](https://github.com/renl/mcp-rag-local)** - This MCP server for storing and retrieving text passages locally based on their semantic meaning.\n- **[RAG Web Browser](https://github.com/apify/mcp-server-rag-web-browser)** An MCP server for Apify's open-source RAG Web Browser [Actor](https://apify.com/apify/rag-web-browser) to perform web searches, scrape URLs, and return content in Markdown.\n- **[Raindrop.io](https://github.com/hiromitsusasaki/raindrop-io-mcp-server)** - An integration that allows LLMs to interact with Raindrop.io bookmarks using the Model Context Protocol (MCP).\n- **[Random Number](https://github.com/zazencodes/random-number-mcp)** - Provides LLMs with essential random generation abilities, built entirely on Python's standard library.\n- **[RCSB PDB](https://github.com/QuentinCody/rcsb-pdb-mcp-server)** - Unofficial MCP server for the Research Collaboratory for Structural Bioinformatics Protein Data Bank (RCSB PDB), providing access to 3D protein structures, experimental data, and structural bioinformatics information.\n- **[Reaper](https://github.com/dschuler36/reaper-mcp-server)** - Interact with your [Reaper](https://www.reaper.fm/) (Digital Audio Workstation) projects.\n- **[Redbee](https://github.com/Tamsi/redbee-mcp)** - Redbee MCP server that provides support for interacting with Redbee API.\n- **[Redfish](https://github.com/nokia/mcp-redfish)** - Redfish MCP server that provides support for interacting with [DMTF Redfish API](https://www.dmtf.org/standards/redfish).\n- **[Redis](https://github.com/GongRzhe/REDIS-MCP-Server)** - Redis database operations and caching microservice server with support for key-value operations, expiration management, and pattern-based key listing.\n- **[Redis](https://github.com/prajwalnayak7/mcp-server-redis)** MCP server to interact with Redis Server, AWS Memory DB, etc for caching or other use-cases where in-memory and key-value based storage is appropriate\n- **[RedNote MCP](https://github.com/ifuryst/rednote-mcp)** - MCP server for accessing RedNote(XiaoHongShu, xhs) content\n- **[Reed Jobs](https://github.com/kld3v/reed_jobs_mcp)** - Search and retrieve job listings from Reed.co.uk.\n- **[Rememberizer AI](https://github.com/skydeckai/mcp-server-rememberizer)** - An MCP server designed for interacting with the Rememberizer data source, facilitating enhanced knowledge retrieval.\n- **[Replicate](https://github.com/deepfates/mcp-replicate)** - Search, run and manage machine learning models on Replicate through a simple tool-based interface. Browse models, create predictions, track their status, and handle generated images.\n- **[Resend](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/resend)** - Send email using Resend services\n- **[Revit MCP](https://github.com/revit-mcp)** - A service implementing the MCP protocol for Autodesk Revit.\n- **[Rijksmuseum](https://github.com/r-huijts/rijksmuseum-mcp)** - Interface with the Rijksmuseum API to search artworks, retrieve artwork details, access image tiles, and explore user collections.\n- **[Riot Games](https://github.com/jifrozen0110/mcp-riot)** - MCP server for League of Legends – fetch player info, ranks, champion stats, and match history via Riot API.\n- **[Rohlik](https://github.com/tomaspavlin/rohlik-mcp)** - Shop groceries across the Rohlik Group platforms (Rohlik.cz, Knuspr.de, Gurkerl.at, Kifli.hu, Sezamo.ro)\n- **[Rquest](https://github.com/xxxbrian/mcp-rquest)** - An MCP server providing realistic browser-like HTTP request capabilities with accurate TLS/JA3/JA4 fingerprints for bypassing anti-bot measures.\n- **[Rust MCP Filesystem](https://github.com/rust-mcp-stack/rust-mcp-filesystem)** - Fast, asynchronous MCP server for efficient handling of various filesystem operations built with the power of Rust.\n- **[SafetySearch](https://github.com/surabhya/SafetySearch)** - Real-time FDA food safety data: recalls, adverse events, analysis.\n- **[Salesforce MCP](https://github.com/smn2gnt/MCP-Salesforce)** - Interact with Salesforce Data and Metadata\n- **[Salesforce MCP (AiondaDotCom)](https://github.com/AiondaDotCom/mcp-salesforce)** - Universal Salesforce integration with OAuth authentication, smart learning system, comprehensive backup capabilities, and full CRUD operations for any Salesforce org including custom objects and fields.\n- **[Salesforce MCP Server](https://github.com/tsmztech/mcp-server-salesforce)** - Comprehensive Salesforce integration with tools for querying records, executing Apex, managing fields/objects, and handling debug logs\n- **[Scanova MCP Server](https://github.com/trycon/scanova-mcp)** - MCP server for creating and managing QR codes using the [Scanova](https://scanova.io) API. Provides tools for generating, managing, and downloading QR codes.\n- **[SchemaCrawler](https://github.com/schemacrawler/SchemaCrawler-MCP-Server-Usage)** - Connect to any relational database, and be able to get valid SQL, and ask questions like what does a certain column prefix mean.\n- **[SchemaFlow](https://github.com/CryptoRadi/schemaflow-mcp-server)** - Real-time PostgreSQL & Supabase database schema access for AI-IDEs via Model Context Protocol. Provides live database context through secure SSE connections with three powerful tools: get_schema, analyze_database, and check_schema_alignment. [SchemaFlow](https://schemaflow.dev)\n- **[Scholarly](https://github.com/adityak74/mcp-scholarly)** - An MCP server to search for scholarly and academic articles.\n- **[scrapling-fetch](https://github.com/cyberchitta/scrapling-fetch-mcp)** - Access text content from bot-protected websites. Fetches HTML/markdown from sites with anti-automation measures using Scrapling.\n- **[Screeny](https://github.com/rohanrav/screeny)** - Privacy-first macOS MCP server that provides visual context for AI agents through window screenshots\n- **[ScriptFlow](https://github.com/yanmxa/scriptflow-mcp)** - Transform complex, repetitive AI interactions into persistent, executable scripts with comprehensive script management (add, edit, remove, list, search, execute) and multi-language support (Bash, Python, Node.js, TypeScript).\n- **[SearXNG](https://github.com/ihor-sokoliuk/mcp-searxng)** - A Model Context Protocol Server for [SearXNG](https://docs.searxng.org)\n- **[SearXNG](https://github.com/erhwenkuo/mcp-searxng)** - An MCP server provide web searching via [SearXNG](https://docs.searxng.org) & retrieve url as makrdown.\n- **[SearXNG Public](https://github.com/pwilkin/mcp-searxng-public)** - A Model Context Protocol Server for retrieving data from public [SearXNG](https://docs.searxng.org) instances, with fallback support\n- **[SEC EDGAR](https://github.com/stefanoamorelli/sec-edgar-mcp)** - (by Stefano Amorelli) A community Model Context Protocol Server to access financial filings and data through the U.S. Securities and Exchange Commission ([SEC](https://www.sec.gov/)) `Electronic Data Gathering, Analysis, and Retrieval` ([EDGAR](https://www.sec.gov/submit-filings/about-edgar)) database\n- **[SEO MCP](https://github.com/cnych/seo-mcp)** - A free SEO tool MCP (Model Control Protocol) service based on Ahrefs data. Includes features such as backlinks, keyword ideas, and more. by [claudemcp](https://www.claudemcp.com/servers/seo-mcp).\n- **[Serper](https://github.com/garylab/serper-mcp-server)** - An MCP server that performs Google searches using [Serper](https://serper.dev).\n- **[ServiceNow](https://github.com/osomai/servicenow-mcp)** - An MCP server to interact with a ServiceNow instance\n- **[ShaderToy](https://github.com/wilsonchenghy/ShaderToy-MCP)** - This MCP server lets LLMs to interact with the ShaderToy API, allowing LLMs to learn from compute shaders examples and enabling them to create complex GLSL shaders that they are previously not capable of.\n- **[ShareSeer](https://github.com/shareseer/shareseer-mcp-server)** - MCP to Access SEC filings, financials & insider trading data in real time using [ShareSeer](https://shareseer.com)\n- **[Shell](https://github.com/sonirico/mcp-shell)** - Give hands to AI. MCP server to run shell commands securely, auditably, and on demand\n- **[Shodan MCP](https://github.com/Hexix23/shodan-mcp)** - MCP server to interact with [Shodan](https://www.shodan.io/)\n- **[Shopify](https://github.com/GeLi2001/shopify-mcp)** - MCP to interact with Shopify API including order, product, customers and so on.\n- **[Shopify Storefront](https://github.com/QuentinCody/shopify-storefront-mcp-server)** - Unofficial MCP server that allows AI agents to discover Shopify storefronts and interact with them to fetch products, collections, and other store data through the Storefront API.\n- **[Simple Loki MCP](https://github.com/ghrud92/simple-loki-mcp)** - A simple MCP server to query Loki logs using logcli.\n- **[Siri Shortcuts](https://github.com/dvcrn/mcp-server-siri-shortcuts)** - MCP to interact with Siri Shortcuts on macOS. Exposes all Shortcuts as MCP tools.\n- **[Skyvern](https://github.com/Skyvern-AI/skyvern/tree/main/integrations/mcp)** - MCP to let Claude / Windsurf / Cursor / your LLM control the browser\n- **[Slack](https://github.com/korotovsky/slack-mcp-server)** - The most powerful MCP server for Slack Workspaces. This integration supports both Stdio and SSE transports, proxy settings and does not require any permissions or bots being created or approved by Workspace admins 😏.\n- **[Slack](https://github.com/zencoderai/slack-mcp-server)** - Slack MCP server which supports both stdio and Streamable HTTP transports. Extended from the original Anthropic's implementation which is now [archived](https://github.com/modelcontextprotocol/servers-archived/tree/main/src/slack)\n- **[Slidespeak](https://github.com/SlideSpeak/slidespeak-mcp)** - Create PowerPoint presentations using the [Slidespeak](https://slidespeak.com/) API.\n- **[Smartlead](https://github.com/jean-technologies/smartlead-mcp-server-local)** - MCP to connect to Smartlead. Additional, tooling, functionality, and connection to workflow automation platforms also available.\n- **[Snowflake](https://github.com/Snowflake-Labs/mcp)** - Open-source MCP server for Snowflake from official Snowflake-Labs supports prompting Cortex Agents, querying structured & unstructured data, object management, SQL execution, semantic view querying, and more. RBAC, fine-grained CRUD controls, and all authentication methods supported.\n- **[Snowflake](https://github.com/isaacwasserman/mcp-snowflake-server)** - This MCP server enables LLMs to interact with Snowflake databases, allowing for secure and controlled data operations.\n- **[Snowflake Cortex MCP Server](https://github.com/thisisbhanuj/Snowflake-Cortex-MCP-Server)** -This Snowflake MCP server provides tooling for Snowflake Cortex AI features, bringing these capabilities to the MCP ecosystem. When connected to an MCP Client (e.g. Claude for Desktop, fast-agent, Agentic Orchestration Framework), users can leverage these Cortex AI features.\n- **[SoccerDataAPI](https://github.com/yeonupark/mcp-soccer-data)** - This MCP server provides real-time football match data based on the SoccerDataAPI.\n- **[Solana Agent Kit](https://github.com/sendaifun/solana-agent-kit/tree/main/examples/agent-kit-mcp-server)** - This MCP server enables LLMs to interact with the Solana blockchain with help of Solana Agent Kit by SendAI, allowing for 40+ protocol actions and growing\n- **[Solr MCP](https://github.com/mjochum64/mcp-solr-search)** - This MCP server offers a basic functionality to perform a search on Solr servers.\n- **[Solver](https://github.com/szeider/mcp-solver)** - Solves constraint satisfaction and optimization problems .\n- **[Solvitor](https://github.com/Adeptus-Innovatio/solvitor-mcp)** – Solvitor MCP server provides tools to access reverse engineering tools that help developers extract IDL files from closed - source Solana smart contracts and decompile them.\n- **[Sourcerer](https://github.com/st3v3nmw/sourcerer-mcp)** - MCP for semantic code search & navigation that reduces token waste.\n- **[Specbridge](https://github.com/TBosak/specbridge)** - Easily turn your OpenAPI specs into MCP Tools.\n- **[Splunk](https://github.com/jkosik/mcp-server-splunk)** - Golang MCP server for Splunk (lists saved searches, alerts, indexes, macros...). Supports SSE and STDIO.\n- **[Spotify](https://github.com/varunneal/spotify-mcp)** - This MCP allows an LLM to play and use Spotify.\n- **[Spring Initializr](https://github.com/hpalma/springinitializr-mcp)** - This MCP allows an LLM to create Spring Boot projects with custom configurations. Instead of manually visiting start.spring.io, you can now ask your AI assistant to generate projects with specific dependencies, Java versions, and project structures.\n- **[Squad AI](https://github.com/the-basilisk-ai/squad-mcp)** – Product‑discovery and strategy platform integration. Create, query and update opportunities, solutions, outcomes, requirements and feedback from any MCP‑aware LLM.\n- **[SSH](https://github.com/AiondaDotCom/mcp-ssh)** - Agent for managing and controlling SSH connections.\n- **[SSH](https://github.com/classfang/ssh-mcp-server)** - An MCP server that can execute SSH commands remotely, upload files, download files, and so on.\n- **[SSH MCP Server](https://github.com/sinjab/mcp_ssh)** - A production-ready Model Context Protocol server for SSH automation with background execution, file transfers, and comprehensive timeout protection. Features structured output, progress tracking, and enterprise-grade testing (87% coverage).\n- **[sslmon](https://github.com/firesh/sslmon-mcp)** - Domain/HTTPS/SSL domain registration information and SSL certificate monitoring capabilities. Query domain registration and expiration information, and SSL certificate information and validity status for any domain.\n- **[Standard Korean Dictionary](https://github.com/privetin/stdict)** - Search the dictionary using API\n- **[Star Wars](https://github.com/johnpapa/mcp-starwars)** -MCP Server for the SWAPI Star Wars API. The main goal of the project is to show how an MCP server can be used to interact with APIs.\n- **[Starknet MCP Server](https://github.com/mcpdotdirect/starknet-mcp-server)** - A comprehensive MCP server for interacting with the Starknet blockchain, providing tools for querying blockchain data, resolving StarknetIDs, and performing token transfers.\n- **[Starwind UI](https://github.com/Boston343/starwind-ui-mcp/)** - This MCP provides relevant commands, documentation, and other information to allow LLMs to take full advantage of Starwind UI's open source Astro components.\n- **[Stellar](https://github.com/syronlabs/stellar-mcp/)** - This MCP server enables LLMs to interact with the Stellar blockchain to create accounts, check address balances, analyze transactions, view transaction history, mint new assets, interact with smart contracts and much more.\n- **[Stitch AI](https://github.com/StitchAI/stitch-ai-mcp/)** - Knowledge management system for AI agents with memory space creation and retrieval capabilities.\n- **[Stockfish](https://github.com/sonirico/mcp-stockfish)** - MCP server connecting AI systems to Stockfish chess engine\n- **[Storybook](https://github.com/stefanoamorelli/storybook-mcp-server)** (by Stefano Amorelli) - Interact with Storybook component libraries, enabling component discovery, story management, prop inspection, and visual testing across different viewports.\n- **[Strava](https://github.com/r-huijts/strava-mcp)** - Connect to the Strava API to access activity data, athlete profiles, segments, and routes, enabling fitness tracking and analysis with Claude.\n- **[Strava API](https://github.com/tomekkorbak/strava-mcp-server)** - MCP server for Strava API to retrieve one's activities\n- **[Stripe](https://github.com/atharvagupta2003/mcp-stripe)** - This MCP allows integration with Stripe for handling payments, customers, and refunds.\n- **[Substack/Medium](https://github.com/jonathan-politzki/mcp-writer-substack)** - Connect Claude to your Substack/Medium writing, enabling semantic search and analysis of your published content.\n- **[System Health](https://github.com/thanhtung0201/mcp-remote-system-health)** - The MCP (Multi-Channel Protocol) System Health Monitoring is a robust, real-time monitoring solution designed to provide comprehensive health metrics and alerts for remote Linux servers.\n- **[SystemSage](https://github.com/Tarusharma1/SystemSage)** - A powerful, cross-platform system management and monitoring tool for Windows, Linux, and macOS.\n- **[Talk To Figma](https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp)** - This MCP server enables LLMs to interact with Figma, allowing them to read and modify designs programmatically.\n- **[Talk To Figma via Claude](https://github.com/gaganmanku96/talk-with-figma-claude)** - TMCP server that provides seamless Figma integration specifically for Claude Desktop, enabling design creation, modification, and real-time collaboration through natural language commands.\n- **[TAM MCP Server](https://github.com/gvaibhav/TAM-MCP-Server)** - Market research and business intelligence with TAM/SAM calculations and integration across 8 economic data sources: Alpha Vantage, BLS, Census Bureau, FRED, IMF, Nasdaq Data Link, OECD, and World Bank.\n- **[Tasks](https://github.com/flesler/mcp-tasks)** - An efficient task manager. Designed to minimize tool confusion and maximize LLM budget efficiency while providing powerful search, filtering, and organization capabilities across multiple file formats (Markdown, JSON, YAML)\n- **[Tavily search](https://github.com/RamXX/mcp-tavily)** - An MCP server for Tavily's search & news API, with explicit site inclusions/exclusions\n- **[TcpSocketMCP](https://github.com/SpaceyKasey/TcpSocketMCP/)** - A Model Context Protocol (MCP) server that provides raw TCP socket access, enabling AI models to interact directly with network services using raw TCP Sockets. Supports multiple concurrent connections, buffering of response data and triggering automatic responses.\n- **[TeamRetro](https://github.com/adepanges/teamretro-mcp-server)** - This MCP server allows LLMs to interact with TeamRetro, allowing LLMs to manage user, team, team member, retrospective, health check, action, agreement and fetch the reports.\n- **[Telegram](https://github.com/chigwell/telegram-mcp)** - An MCP server that provides paginated chat reading, message retrieval, and message sending capabilities for Telegram through Telethon integration.\n- **[Telegram-Client](https://github.com/chaindead/telegram-mcp)** - A Telegram API bridge that manages user data, dialogs, messages, drafts, read status, and more for seamless interactions.\n- **[Telegram-mcp-server](https://github.com/DLHellMe/telegram-mcp-server)** - Access Telegram channels and groups directly in Claude. Features dual-mode operation with API access (100x faster) or web scraping, unlimited post retrieval, and search functionality.\n- **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n- **[Tempo](https://github.com/scottlepp/tempo-mcp-server)** - An MCP server to query traces/spans from [Grafana Tempo](https://github.com/grafana/tempo).\n- **[Teradata](https://github.com/arturborycki/mcp-teradata)** - his MCP server enables LLMs to interact with Teradata databases. This MCP Server support tools and prompts for multi task data analytics\n- **[Terminal-Control](https://github.com/GongRzhe/terminal-controller-mcp)** - An MCP server that enables secure terminal command execution, directory navigation, and file system operations through a standardized interface.\n- **[Terraform-Cloud](https://github.com/severity1/terraform-cloud-mcp)** - An MCP server that integrates AI assistants with the Terraform Cloud API, allowing you to manage your infrastructure through natural conversation.\n- **[Tideways](https://github.com/abuhamza/tideways-mcp-server)** - A Model Context Protocol server that enables AI assistants to query Tideways performance monitoring data and provide conversational performance insights for PHP applications.\n- **[TFT-Match-Analyzer](https://github.com/GeLi2001/tft-mcp-server)** - MCP server for teamfight tactics match history & match details fetching, providing user the detailed context for every match.\n- **[Thales CDSP CAKM MCP Server](https://github.com/sanyambassi/thales-cdsp-cakm-mcp-server)** - An MCP server for the Thales CipherTrust Data Security Platform (CDSP) Cloud Key Management (CAKM) connector. This MCP server supports Ms SQL and Oracle databases.\n- **[Thales CDSP CRDP MCP Server](https://github.com/sanyambassi/thales-cdsp-crdp-mcp-server)** - A Model Context Protocol (MCP) server that allows interacting with the CipherTrust RestFul Data Protection (CRDP) data protection service.\n- **[Thales CipherTrust Manager MCP Server](https://github.com/sanyambassi/ciphertrust-manager-mcp-server)** - MCP server for Thales CipherTrust Manager integration, enabling secure key management and cryptographic operations.\n- **[thegraph-mcp](https://github.com/kukapay/thegraph-mcp)** - An MCP server that powers AI agents with indexed blockchain data from The Graph.\n- **[TheHive MCP Server](https://github.com/redwaysecurity/the-hive-mcp-server)** - An MCP server for [TheHive](https://strangebee.com/thehive/) Security Incident Response Platform.\n- **[Things3 MCP](https://github.com/urbanogardun/things3-mcp)** - Things3 task management integration for macOS with comprehensive TODO, project, and tag management.\n- **[Think MCP](https://github.com/Rai220/think-mcp)** - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in [Anthropic's article](https://www.anthropic.com/engineering/claude-think-tool).\n- **[Think Node MCP](https://github.com/abhinav-mangla/think-tool-mcp)** - Enhances any agent's reasoning capabilities by integrating the think-tools, as described in [Anthropic's article](https://www.anthropic.com/engineering/claude-think-tool). (Works with Node)\n- **[Ticketmaster](https://github.com/delorenj/mcp-server-ticketmaster)** - Search for events, venues, and attractions through the Ticketmaster Discovery API\n- **[Ticketmaster MCP Server](https://github.com/mochow13/ticketmaster-mcp-server)** - A Model Context Protocol (MCP) server implemented in Streamable HTTP transport that allows AI models to interact with the Ticketmaster Discovery API, enabling searching events, venues, and attractions.\n- **[TickTick](https://github.com/alexarevalo9/ticktick-mcp-server)** - A Model Context Protocol (MCP) server designed to integrate with the TickTick task management platform, enabling intelligent context-aware task operations and automation.\n- **[TigerGraph](https://github.com/custom-discoveries/TigerGraph_MCP)** - A community built MCP server that interacts with TigerGraph Graph Database.\n- **[tip.md](https://github.com/tipdotmd#-mcp-server-for-ai-assistants)** - An MCP server that enables AI assistants to interact with tip.md's crypto tipping functionality, allowing agents or supporters to tip registered developers directly from AI chat interfaces.\n- **[TMD Earthquake](https://github.com/amornpan/tmd-earthquake-server-1.0)** - 🌍 Real-time earthquake monitoring from Thai Meteorological Department. Features magnitude filtering, location-based search (Thai/English), today's events tracking, dangerous earthquake alerts, and comprehensive statistics. Covers regional and global seismic activities.\n- **[TMDB](https://github.com/Laksh-star/mcp-server-tmdb)** - This MCP server integrates with The Movie Database (TMDB) API to provide movie information, search capabilities, and recommendations.\n- **[Todoist](https://github.com/abhiz123/todoist-mcp-server)** - Interact with Todoist to manage your tasks.\n- **[Todos](https://github.com/tomelliot/todos-mcp)** - A practical todo list manager to use with your favourite chatbot.\n- **[token-minter-mcp](https://github.com/kukapay/token-minter-mcp)** - An MCP server providing tools for AI agents to mint ERC-20 tokens across multiple blockchains.\n- **[token-revoke-mcp](https://github.com/kukapay/token-revoke-mcp)** - An MCP server for checking and revoking ERC-20 token allowances across multiple blockchains.\n- **[Ton Blockchain MCP](https://github.com/devonmojito/ton-blockchain-mcp)** - An MCP server for interacting with Ton Blockchain.\n- **[TouchDesigner](https://github.com/8beeeaaat/touchdesigner-mcp)** - An MCP server for TouchDesigner, enabling interaction with TouchDesigner projects, nodes, and parameters.\n- **[Transcribe](https://github.com/transcribe-app/mcp-transcribe)** - An MCP server provides fast and reliable transcriptions for audio/video files and voice memos. It allows LLMs to interact with the text content of audio/video file.\n- **[Travel Planner](https://github.com/GongRzhe/TRAVEL-PLANNER-MCP-Server)** - Travel planning and itinerary management server integrating with Google Maps API for location search, place details, and route calculations.\n- **[Trello MCP Server](https://github.com/lioarce01/trello-mcp-server)** - An MCP server that interact with user Trello boards, modifying them with prompting.\n- **[Trino](https://github.com/tuannvm/mcp-trino)** - A high-performance Model Context Protocol (MCP) server for Trino implemented in Go.\n- **[Tripadvisor](https://github.com/pab1it0/tripadvisor-mcp)** - An MCP server that enables LLMs to interact with Tripadvisor API, supporting location data, reviews, and photos through standardized MCP interfaces\n- **[Triplyfy MCP](https://github.com/helpful-AIs/triplyfy-mcp)** - An MCP server that lets LLMs plan and manage itineraries with interactive maps in Triplyfy; manage itineraries, places and notes, and search/save flights.\n- **[TrueNAS Core MCP](https://github.com/vespo92/TrueNasCoreMCP)** - An MCP server for interacting with TrueNAS Core.\n- **[TuriX Computer Automation MCP](https://github.com/TurixAI/TuriX-CUA/tree/mac_mcp)** - MCP server for helping automation control your computer complete your pre-setting task.\n- **[Tyk API Management](https://github.com/TykTechnologies/tyk-dashboard-mcp)** - Chat with all of your organization's managed APIs and perform other API lifecycle operations, managing tokens, users, analytics, and more.\n- **[Typesense](https://github.com/suhail-ak-s/mcp-typesense-server)** - A Model Context Protocol (MCP) server implementation that provides AI models with access to Typesense search capabilities. This server enables LLMs to discover, search, and analyze data stored in Typesense collections.\n- **[UniFi Dream Machine](https://github.com/sabler/mcp-unifi)** An MCP server that gets your network telemetry from the UniFi Site Manager and your local UniFi router.\n- **[UniProt](https://github.com/QuentinCody/uniprot-mcp-server)** - Unofficial MCP server for UniProt, providing access to protein sequence data, functional annotations, taxonomic information, and cross-references for proteomics and bioinformatics research.\n- **[uniswap-poolspy-mcp](https://github.com/kukapay/uniswap-poolspy-mcp)** - An MCP server that tracks newly created liquidity pools on Uniswap across nine blockchain networks.\n- **[uniswap-trader-mcp](https://github.com/kukapay/uniswap-trader-mcp)** -An MCP server for AI agents to automate token swaps on Uniswap DEX across multiple blockchains.\n- **[Unity Catalog](https://github.com/ognis1205/mcp-server-unitycatalog)** - An MCP server that enables LLMs to interact with Unity Catalog AI, supporting CRUD operations on Unity Catalog Functions and executing them as MCP tools.\n- **[Unity Integration (Advanced)](https://github.com/quazaai/UnityMCPIntegration)** - Advanced Unity3d Game Engine MCP which supports ,Execution of Any Editor Related Code Directly Inside of Unity, Fetch Logs, Get Editor State and Allow File Access of the Project making it much more useful in Script Editing or asset creation.\n- **[Unity3d Game Engine](https://github.com/CoderGamester/mcp-unity)** - An MCP server that enables LLMs to interact with Unity3d Game Engine, supporting access to a variety of the Unit's Editor engine tools (e.g. Console Logs, Test Runner logs, Editor functions, hierarchy state, etc) and executing them as MCP tools or gather them as resources.\n- **[Universal MCP Servers](https://github.com/universal-mcp)** - A collection of MCP servers created using the [AgentR Universal MCP SDK](https://github.com/universal-mcp/universal-mcp).\n- **[Unleash Integration (Feature Toggle)](https://github.com/cuongtl1992/unleash-mcp)** - A Model Context Protocol (MCP) server implementation that integrates with Unleash Feature Toggle system. Provide a bridge between LLM applications and Unleash feature flag system\n- **[Upbit MCP Server](https://github.com/solangii/upbit-mcp-server)** – An MCP server that enables real - time access to cryptocurrency prices, market summaries, and asset listings from the Upbit exchange.\n- **[use_aws_mcp](https://github.com/runjivu/use_aws_mcp)** - amazon-q-cli's use_aws tool extracted into independent mcp, for general aws api usage.\n- **[User Feedback](https://github.com/mrexodia/user-feedback-mcp)** - Simple MCP Server to enable a human-in-the-loop workflow in tools like Cline and Cursor.\n- **[USPTO](https://github.com/riemannzeta/patent_mcp_server)** - MCP server for accessing United States Patent & Trademark Office data through its Open Data Protocol (ODP) API.\n- **[Vectara](https://github.com/vectara/vectara-mcp)** - Query Vectara's trusted RAG-as-a-service platform.\n- **[Vega-Lite](https://github.com/isaacwasserman/mcp-vegalite-server)** - Generate visualizations from fetched data using the VegaLite format and renderer.\n- **[Vertica](https://github.com/nolleh/mcp-vertica)** - Vertica database integration in Python with configurable access controls and schema inspection\n- **[Vibe Check](https://github.com/PV-Bhat/vibe-check-mcp-server)** - An MCP server leveraging an external oversight layer to \"vibe check\" agents, and also self-improve accuracy & user alignment over time. Prevents scope creep, code bloat, misalignment, misinterpretation, tunnel vision, and overcomplication.\n- **[Video Editor](https://github.com/burningion/video-editing-mcp)** - A Model Context Protocol Server to add, edit, and search videos with [Video Jungle](https://www.video-jungle.com/).\n- **[Video Still Capture](https://github.com/13rac1/videocapture-mcp)** - 📷 Capture video stills from an OpenCV-compatible webcam or other video source.\n- **[Virtual location (Google Street View,etc.)](https://github.com/mfukushim/map-traveler-mcp)** - Integrates Google Map, Google Street View, PixAI, Stability.ai, ComfyUI API and Bluesky to provide a virtual location simulation in LLM (written in Effect.ts)\n- **[VMware Fusion](https://github.com/yeahdongcn/vmware-fusion-mcp-server)** - Manage VMware Fusion virtual machines via the Fusion REST API.\n- **[VoiceMode](https://github.com/mbailey/voicemode)** - Enable voice conversations with Claude using any OpenAI-compatible STT/TTS service [getvoicemode.com](https://getvoicemode.com/)\n- **[Voice Status Report](https://github.com/tomekkorbak/voice-status-report-mcp-server)** - An MCP server that provides voice status updates using OpenAI's text-to-speech API, to be used with Cursor or Claude Code.\n- **[VolcEngine TOS](https://github.com/dinghuazhou/sample-mcp-server-tos)** - A sample MCP server for VolcEngine TOS that flexibly get objects from TOS.\n- **[Voyp](https://github.com/paulotaylor/voyp-mcp)** - VOYP MCP server for making calls using Artificial Intelligence.\n- **[vulnicheck](https://github.com/andrasfe/vulnicheck)** - Real-time Python package vulnerability scanner that checks dependencies against OSV and NVD databases, providing comprehensive security analysis with CVE details, lock file support, and actionable upgrade recommendations.\n- **[Wanaku MCP Router](https://github.com/wanaku-ai/wanaku/)** - The Wanaku MCP Router is a SSE-based MCP server that provides an extensible routing engine that allows integrating your enterprise systems with AI agents.\n- **[weather-mcp-server](https://github.com/devilcoder01/weather-mcp-server)** - Get real-time weather data for any location using weatherapi.\n- **[Web Search MCP](https://github.com/mrkrsl/web-search-mcp)** - A server that provides full web search, summaries and page extration for use with Local LLMs.\n- **[Webex](https://github.com/Kashyap-AI-ML-Solutions/webex-messaging-mcp-server)** - A Model Context Protocol (MCP) server that provides AI assistants with comprehensive access to Cisco Webex messaging capabilities.\n- **[Webflow](https://github.com/kapilduraphe/webflow-mcp-server)** - Interact with the Webflow APIs\n- **[webhook-mcp](https://github.com/noobnooc/webhook-mcp)** (by Nooc) - A Model Context Protocol (MCP) server that sends webhook notifications when called.\n- **[whale-tracker-mcp](https://github.com/kukapay/whale-tracker-mcp)**  -  A mcp server for tracking cryptocurrency whale transactions.\n- **[WhatsApp MCP Server](https://github.com/lharries/whatsapp-mcp)** - MCP server for your personal WhatsApp handling individuals, groups, searching and sending.\n- **[Whois MCP](https://github.com/bharathvaj-ganesan/whois-mcp)** - MCP server that performs whois lookup against domain, IP, ASN and TLD.\n- **[Wikidata MCP](https://github.com/zzaebok/mcp-wikidata)** - Wikidata MCP server that interact with Wikidata, by searching identifiers, extracting metadata, and executing sparql query.\n- **[Wikidata SPARQL](https://github.com/QuentinCody/wikidata-sparql-mcp-server)** - Unofficial REMOTE MCP server for Wikidata's SPARQL endpoint, providing access to structured knowledge data, entity relationships, and semantic queries for research and data analysis.\n- **[Wikifunctions](https://github.com/Fredibau/wikifunctions-mcp-fredibau)** - Allowing AI models to discover and execute functions from the WikiFunctions library.\n- **[Wikipedia MCP](https://github.com/Rudra-ravi/wikipedia-mcp)** - Access and search Wikipedia articles via MCP for AI-powered information retrieval.\n- **[WildFly MCP](https://github.com/wildfly-extras/wildfly-mcp)** - WildFly MCP server that enables LLM to interact with running WildFly servers (retrieve metrics, logs, invoke operations, ...).\n- **[Windows CLI](https://github.com/SimonB97/win-cli-mcp-server)** - MCP server for secure command-line interactions on Windows systems, enabling controlled access to PowerShell, CMD, and Git Bash shells.\n- **[Windsor](https://github.com/windsor-ai/windsor_mcp)** - Windsor MCP (Model Context Protocol) enables your LLM to query, explore, and analyze your full-stack business data integrated into Windsor.ai with zero SQL writing or custom scripting.\n- **[Wordle MCP](https://github.com/cr2007/mcp-wordle-python)** - MCP Server that gets the Wordle Solution for a particular date.\n- **[WordPress MCP](https://github.com/Automattic/wordpress-mcp)** - Make your WordPress site into a simple MCP server, exposing functionality to LLMs and AI agents.\n- **[Workflowy](https://github.com/danield137/mcp-workflowy)** - A server that interacts with [workflowy](https://workflowy.com/).\n- **[World Bank data API](https://github.com/anshumax/world_bank_mcp_server)** - A server that fetches data indicators available with the World Bank as part of their data API\n- **[Wren Engine](https://github.com/Canner/wren-engine)** - The Semantic Engine for Model Context Protocol(MCP) Clients and AI Agents\n- **[X (Twitter)](https://github.com/EnesCinr/twitter-mcp)** (by EnesCinr) - Interact with twitter API. Post tweets and search for tweets by query.\n- **[X (Twitter)](https://github.com/vidhupv/x-mcp)** (by vidhupv) - Create, manage and publish X/Twitter posts directly through Claude chat.\n- **[Xcode](https://github.com/r-huijts/xcode-mcp-server)** - MCP server that brings AI to your Xcode projects, enabling intelligent code assistance, file operations, project management, and automated development tasks.\n- **[Xcode-mcp-server](https://github.com/drewster99/xcode-mcp-server)** (by drewster99) - Best Xcode integration - ClaudeCode and Cursor can build your project *with* Xcode and see the same errors you do. Fast easy setup.\n- **[xcodebuild](https://github.com/ShenghaiWang/xcodebuild)**  - 🍎 Build iOS Xcode workspace/project and feed back errors to llm.\n- **[Xero-mcp-server](https://github.com/john-zhang-dev/xero-mcp)** - Enabling clients to interact with Xero system for streamlined accounting, invoicing, and business operations.\n- **[XiYan](https://github.com/XGenerationLab/xiyan_mcp_server)** - 🗄️ An MCP server that supports fetching data from a database using natural language queries, powered by XiyanSQL as the text-to-SQL LLM.\n- **[XMind](https://github.com/apeyroux/mcp-xmind)** - Read and search through your XMind directory containing XMind files.\n- **[Yahoo Finance](https://github.com/AgentX-ai/yahoo-finance-server)** - 📈 Lets your AI interact with Yahoo Finance to get comprehensive stock market data, news, financials, and more. Proxy supported.\n- **[yfinance](https://github.com/Adity-star/mcp-yfinance-server)** -💹The MCP YFinance Stock Server provides real-time and historical stock data in a standard format, powering dashboards, AI agents,and research tools with seamless financial insights.\n- **[YNAB](https://github.com/ChuckBryan/ynabmcpserver)** - A Model Context Protocol (MCP) server for integrating with YNAB (You Need A Budget), allowing AI assistants to securely access and analyze your financial data.\n- **[YouTrack](https://github.com/tonyzorin/youtrack-mcp)** - A Model Context Protocol (MCP) server implementation for JetBrains YouTrack, allowing AI assistants to interact with YouTrack issue tracking system.\n- **[YouTube](https://github.com/Klavis-AI/klavis/tree/main/mcp_servers/youtube)** - Extract Youtube video information (with proxies support).\n- **[YouTube](https://github.com/ZubeidHendricks/youtube-mcp-server)** - Comprehensive YouTube API integration for video management, Shorts creation, and analytics.\n- **[YouTube DLP](https://github.com/AgentX-ai/youtube-dlp-server)** - Retrieve video information, subtitles, and top comments with proxies.\n- **[YouTube MCP](https://github.com/aardeshir/youtube-mcp)** - Create playlists from song lists with OAuth2. Search videos, manage playlists, let AI curate your YouTube collections.\n- **[Youtube Uploader MCP](https://github.com/anwerj/youtube-uploader-mcp)** - AI‑powered YouTube uploader—no CLI, no YouTube Studio.\n- **[YouTube Video Summarizer](https://github.com/nabid-pf/youtube-video-summarizer-mcp)** - Summarize lengthy youtube videos.\n- **[yutu](https://github.com/eat-pray-ai/yutu)** - A fully functional MCP server and CLI for YouTube to automate YouTube operation.\n- **[ZapCap](https://github.com/bogdan01m/zapcap-mcp-server)** - MCP server for ZapCap API providing video caption and B-roll generation via natural language\n- **[Zettelkasten](https://github.com/joshylchen/zettelkasten)**- Comprehensive AI-powered knowledge management system implementing the Zettelkasten method. Features atomic note creation, full-text search, AI-powered CEQRC workflows (Capture→Explain→Question→Refine→Connect), intelligent link discovery, and multi-interface access (CLI, API, Web UI, MCP). Perfect for researchers, students, and knowledge workers.\n- **[ZincBind](https://github.com/QuentinCody/zincbind-mcp-server)** - Unofficial MCP server for ZincBind, providing access to a comprehensive database of zinc binding sites in proteins, structural coordination data, and metalloproteomics research information.\n- **[Zoom](https://github.com/Prathamesh0901/zoom-mcp-server/tree/main)** - Create, update, read and delete your zoom meetings.\n## 📚 Frameworks\n\nThese are high-level frameworks that make it easier to build MCP servers or clients.\n\n### For servers\n\n* **[Anubis MCP](https://github.com/zoedsoupe/anubis-mcp)** (Elixir) - A high-performance and high-level Model Context Protocol (MCP) implementation in Elixir. Think like \"Live View\" for MCP.\n* **[ModelFetch](https://github.com/phuctm97/modelfetch/)** (TypeScript) - Runtime-agnostic SDK to create and deploy MCP servers anywhere TypeScript/JavaScript runs\n* **[EasyMCP](https://github.com/zcaceres/easy-mcp/)** (TypeScript)\n* **[FastAPI to MCP auto generator](https://github.com/tadata-org/fastapi_mcp)** – A zero-configuration tool for automatically exposing FastAPI endpoints as MCP tools by **[Tadata](https://tadata.com/)**\n* **[FastMCP](https://github.com/punkpeye/fastmcp)** (TypeScript)\n* **[Foobara MCP Connector](https://github.com/foobara/mcp-connector)** - Easily expose Foobara commands written in Ruby as tools via MCP\n* **[Foxy Contexts](https://github.com/strowk/foxy-contexts)** – A library to build MCP servers in Golang by **[strowk](https://github.com/strowk)**\n* **[Higress MCP Server Hosting](https://github.com/alibaba/higress/tree/main/plugins/wasm-go/mcp-servers)** - A solution for hosting MCP Servers by extending the API Gateway (based on Envoy) with wasm plugins.\n* **[MCP Declarative Java SDK](https://github.com/codeboyzhou/mcp-declarative-java-sdk)** Annotation-driven MCP servers development with Java, no Spring Framework Required, minimize dependencies as much as possible.\n* **[MCP-Framework](https://mcp-framework.com)** Build MCP servers with elegance and speed in TypeScript. Comes with a CLI to create your project with `mcp create app`. Get started with your first server in under 5 minutes by **[Alex Andru](https://github.com/QuantGeekDev)**\n* **[MCP Plexus](https://github.com/Super-I-Tech/mcp_plexus)**: A secure, **multi-tenant** and Multi-user MCP python server framework built to integrate easily with external services via OAuth 2.1, offering scalable and robust solutions for managing complex AI applications.\n* **[mcp_sse (Elixir)](https://github.com/kEND/mcp_sse)** An SSE implementation in Elixir for rapidly creating MCP servers.\n* **[mxcp](https://github.com/raw-labs/mxcp)** (Python) - Open-source framework for building enterprise-grade MCP servers using just YAML, SQL, and Python, with built-in auth, monitoring, ETL and policy enforcement.\n* **[Next.js MCP Server Template](https://github.com/vercel-labs/mcp-for-next.js)** (Typescript) - A starter Next.js project that uses the MCP Adapter to allow MCP clients to connect and access resources.\n* **[PayMCP](https://github.com/blustAI/paymcp)** (Python & TypeScript) - Lightweight payments layer for MCP servers: turn tools into paid endpoints with a two-line decorator. [PyPI](https://pypi.org/project/paymcp/) · [npm](https://www.npmjs.com/package/paymcp) · [TS repo](https://github.com/blustAI/paymcp-ts)\n* **[Perl SDK](https://github.com/mojolicious/mojo-mcp)** - An SDK for building MCP servers and clients with the Perl programming language.\n* **[Quarkus MCP Server SDK](https://github.com/quarkiverse/quarkus-mcp-server)** (Java)\n- **[R mcptools](https://github.com/posit-dev/mcptools)** - An R SDK for creating R-based MCP servers and retrieving functionality from third-party MCP servers as R functions.\n* **[SAP ABAP MCP Server SDK](https://github.com/abap-ai/mcp)** - Build SAP ABAP based MCP servers. ABAP 7.52 based with 7.02 downport; runs on R/3 & S/4HANA on-premises, currently not cloud-ready.\n* **[Spring AI MCP Server](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-server-boot-starter-docs.html)** - Provides auto-configuration for setting up an MCP server in Spring Boot applications.\n* **[Template MCP Server](https://github.com/mcpdotdirect/template-mcp-server)** - A CLI tool to create a new Model Context Protocol server project with TypeScript support, dual transport options, and an extensible structure\n* **[AgentR Universal MCP SDK](https://github.com/universal-mcp/universal-mcp)** - A python SDK to build MCP Servers with inbuilt credential management by **[Agentr](https://agentr.dev/home)**\n* **[Vercel MCP Adapter](https://github.com/vercel/mcp-adapter)** (TypeScript) - A simple package to start serving an MCP server on most major JS meta-frameworks including Next, Nuxt, Svelte, and more.\n* **[PHP MCP Server](https://github.com/php-mcp/server)** (PHP) - Core PHP implementation for the Model Context Protocol (MCP) server\n\n### For clients\n\n* **[codemirror-mcp](https://github.com/marimo-team/codemirror-mcp)** - CodeMirror extension that implements the Model Context Protocol (MCP) for resource mentions and prompt commands\n* **[llm-analysis-assistant](https://github.com/xuzexin-hz/llm-analysis-assistant)** <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/xuzexin-hz/llm-analysis-assistant/refs/heads/main/src/llm_analysis_assistant/pages/html/imgs/favicon.ico\" alt=\"Langfuse Logo\" /> - A very streamlined mcp client that supports calling and monitoring stdio/sse/streamableHttp, and can also view request responses through the /logs page. It also supports monitoring and simulation of ollama/openai interface.\n* **[MCP-Agent](https://github.com/lastmile-ai/mcp-agent)** - A simple, composable framework to build agents using Model Context Protocol by **[LastMile AI](https://www.lastmileai.dev)**\n* **[Spring AI MCP Client](https://docs.spring.io/spring-ai/reference/api/mcp/mcp-client-boot-starter-docs.html)** - Provides auto-configuration for MCP client functionality in Spring Boot applications.\n* **[MCP CLI Client](https://github.com/vincent-pli/mcp-cli-host)** - A CLI host application that enables Large Language Models (LLMs) to interact with external tools through the Model Context Protocol (MCP).\n* **[OpenMCP Client](https://github.com/LSTM-Kirigaya/openmcp-client/)** - An all-in-one vscode/trae/cursor plugin for MCP server debugging. [Document](https://kirigaya.cn/openmcp/) & [OpenMCP SDK](https://kirigaya.cn/openmcp/sdk-tutorial/).\n* **[PHP MCP Client](https://github.com/php-mcp/client)** - Core PHP implementation for the Model Context Protocol (MCP) Client\n\n\n## 📚 Resources\n\nAdditional resources on MCP.\n\n- **[A2A-MCP Java Bridge](https://github.com/vishalmysore/a2ajava)** - A2AJava brings powerful A2A-MCP integration directly into your Java applications. It enables developers to annotate standard Java methods and instantly expose them as MCP Server, A2A-discoverable actions — with no boilerplate or service registration overhead.\n- **[AiMCP](https://www.aimcp.info)** - A collection of MCP clients&servers to find the right mcp tools by **[Hekmon](https://github.com/hekmon8)**\n- **[Awesome Crypto MCP Servers by badkk](https://github.com/badkk/awesome-crypto-mcp-servers)** - A curated list of MCP servers by **[Luke Fan](https://github.com/badkk)**\n- **[Awesome MCP Servers by appcypher](https://github.com/appcypher/awesome-mcp-servers)** - A curated list of MCP servers by **[Stephen Akinyemi](https://github.com/appcypher)**\n- **[Awesome MCP Servers by punkpeye](https://github.com/punkpeye/awesome-mcp-servers)** (**[website](https://glama.ai/mcp/servers)**) - A curated list of MCP servers by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Awesome MCP Servers by wong2](https://github.com/wong2/awesome-mcp-servers)** (**[website](https://mcpservers.org)**) - A curated list of MCP servers by **[wong2](https://github.com/wong2)**\n- **[Awesome Remote MCP Servers by JAW9C](https://github.com/jaw9c/awesome-remote-mcp-servers)** - A curated list of **remote** MCP servers, including their authentication support by **[JAW9C](https://github.com/jaw9c)**\n- **[Discord Server](https://glama.ai/mcp/discord)** – A community discord server dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[Discord Server (ModelContextProtocol)](https://discord.gg/jHEGxQu2a5)** – Connect with developers, share insights, and collaborate on projects in an active Discord community dedicated to the Model Context Protocol by **[Alex Andru](https://github.com/QuantGeekDev)**\n- <img height=\"12\" width=\"12\" src=\"https://raw.githubusercontent.com/klavis-ai/klavis/main/static/klavis-ai.png\" alt=\"Klavis Logo\" /> **[Klavis AI](https://www.klavis.ai)** - Open Source MCP Infra. Hosted MCP servers and MCP clients on Slack and Discord.\n- **[MCP Badges](https://github.com/mcpx-dev/mcp-badges)** – Quickly highlight your MCP project with clear, eye-catching badges, by **[Ironben](https://github.com/nanbingxyz)**\n- **[MCPRepository.com](https://mcprepository.com/)** - A repository that indexes and organizes all MCP servers for easy discovery.\n- **[mcp-cli](https://github.com/wong2/mcp-cli)** - A CLI inspector for the Model Context Protocol by **[wong2](https://github.com/wong2)**\n- **[mcp-dockmaster](https://mcp-dockmaster.com)** - An Open-Sourced UI to install and manage MCP servers for Windows, Linux and macOS.\n- **[mcp-get](https://mcp-get.com)** - Command line tool for installing and managing MCP servers by **[Michael Latman](https://github.com/michaellatman)**\n- **[mcp-guardian](https://github.com/eqtylab/mcp-guardian)** - GUI application + tools for proxying / managing control of MCP servers by **[EQTY Lab](https://eqtylab.io)**\n- **[MCP Linker](https://github.com/milisp/mcp-linker)** - A cross-platform Tauri GUI tool for one-click setup and management of MCP servers, supporting Claude Desktop, Cursor, Windsurf, VS Code, Cline, and Neovim.\n- **[mcp-manager](https://github.com/zueai/mcp-manager)** - Simple Web UI to install and manage MCP servers for Claude Desktop by **[Zue](https://github.com/zueai)**\n- **[MCP Marketplace Web Plugin](https://github.com/AI-Agent-Hub/mcp-marketplace)** MCP Marketplace is a small Web UX plugin to integrate with AI applications, Support various MCP Server API Endpoint (e.g pulsemcp.com/deepnlp.org and more). Allowing user to browse, paginate and select various MCP servers by different categories. [Pypi](https://pypi.org/project/mcp-marketplace) | [Maintainer](https://github.com/AI-Agent-Hub) | [Website](http://www.deepnlp.org/store/ai-agent/mcp-server)\n- **[mcp.natoma.ai](https://mcp.natoma.ai)** – A Hosted MCP Platform to discover, install, manage and deploy MCP servers by **[Natoma Labs](https://www.natoma.ai)**\n- **[mcp.run](https://mcp.run)** - A hosted registry and control plane to install & run secure + portable MCP Servers.\n- **[MCPHub](https://www.mcphub.com)** - Website to list high quality MCP servers and reviews by real users. Also provide online chatbot for popular LLM models with MCP server support.\n- **[MCP Router](https://mcp-router.net)** – Free Windows and macOS app that simplifies MCP management while providing seamless app authentication and powerful log visualization by **[MCP Router](https://github.com/mcp-router/mcp-router)**\n- **[MCP Servers Hub](https://github.com/apappascs/mcp-servers-hub)** (**[website](https://mcp-servers-hub-website.pages.dev/)**) - A curated list of MCP servers by **[apappascs](https://github.com/apappascs)**\n- **[MCPServers.com](https://mcpservers.com)** - A growing directory of high-quality MCP servers with clear setup guides for a variety of MCP clients. Built by the team behind the **[Highlight MCP client](https://highlightai.com/)**\n- **[MCP Servers Rating and User Reviews](http://www.deepnlp.org/store/ai-agent/mcp-server)** - Website to rate MCP servers, write authentic user reviews, and [search engine for agent & mcp](http://www.deepnlp.org/search/agent)\n- **[MCP Sky](https://bsky.app/profile/brianell.in/feed/mcp)** - Bluesky feed for MCP related news and discussion by **[@brianell.in](https://bsky.app/profile/brianell.in)**\n- **[MCP X Community](https://x.com/i/communities/1861891349609603310)** – A X community for MCP by **[Xiaoyi](https://x.com/chxy)**\n- **[MCPHub](https://github.com/Jeamee/MCPHub-Desktop)** – An Open Source macOS & Windows GUI Desktop app for discovering, installing and managing MCP servers by **[Jeamee](https://github.com/jeamee)**\n- **[mcpm](https://github.com/pathintegral-institute/mcpm.sh)** ([website](https://mcpm.sh)) - MCP Manager (MCPM) is a Homebrew-like service for managing Model Context Protocol (MCP) servers across clients by **[Pathintegral](https://github.com/pathintegral-institute)**\n- **[MCPVerse](https://mcpverse.dev)** - A portal for creating & hosting authenticated MCP servers and connecting to them securely.\n- **[MCP Servers Search](https://github.com/atonomus/mcp-servers-search)** - An MCP server that provides tools for querying and discovering available MCP servers from this list.\n- **[Search MCP Server](https://github.com/krzysztofkucmierz/search-mcp-server)** - Recommends the most relevant MCP servers based on the client's query by searching this README file.\n- **[MCPWatch](https://github.com/kapilduraphe/mcp-watch)** - A comprehensive security scanner for Model Context Protocol (MCP) servers that detects vulnerabilities and security issues in your MCP server implementations.\n- <img height=\"12\" width=\"12\" src=\"https://mkinf.io/favicon-lilac.png\" alt=\"mkinf Logo\" /> **[mkinf](https://mkinf.io)** - An Open Source registry of hosted MCP Servers to accelerate AI agent workflows.\n- **[Open-Sourced MCP Servers Directory](https://github.com/chatmcp/mcp-directory)** - A curated list of MCP servers by **[mcpso](https://mcp.so)**\n- <img height=\"12\" width=\"12\" src=\"https://opentools.com/favicon.ico\" alt=\"OpenTools Logo\" /> **[OpenTools](https://opentools.com)** - An open registry for finding, installing, and building with MCP servers by **[opentoolsteam](https://github.com/opentoolsteam)**\n- **[PulseMCP](https://www.pulsemcp.com)** ([API](https://www.pulsemcp.com/api)) - Community hub & weekly newsletter for discovering MCP servers, clients, articles, and news by **[Tadas Antanavicius](https://github.com/tadasant)**, **[Mike Coughlin](https://github.com/macoughl)**, and **[Ravina Patel](https://github.com/ravinahp)**\n- **[r/mcp](https://www.reddit.com/r/mcp)** – A Reddit community dedicated to MCP by **[Frank Fiegel](https://github.com/punkpeye)**\n- **[r/modelcontextprotocol](https://www.reddit.com/r/modelcontextprotocol)** – A Model Context Protocol community Reddit page - discuss ideas, get answers to your questions, network with like-minded people, and showcase your projects! by **[Alex Andru](https://github.com/QuantGeekDev)**\n- **[MCP.ing](https://mcp.ing/)** - A list of MCP services for discovering MCP servers in the community and providing a convenient search function for MCP services by **[iiiusky](https://github.com/iiiusky)**\n- **[MCP Hunt](https://mcp-hunt.com)** - Realtime platform for discovering trending MCP servers with momentum tracking, upvoting, and community discussions - like Product Hunt meets Reddit for MCP\n- **[Smithery](https://smithery.ai/)** - A registry of MCP servers to find the right tools for your LLM agents by **[Henry Mao](https://github.com/calclavia)**\n- **[Toolbase](https://gettoolbase.ai)** - Desktop application that manages tools and MCP servers with just a few clicks - no coding required by **[gching](https://github.com/gching)**\n- **[ToolHive](https://github.com/StacklokLabs/toolhive)** - A lightweight utility designed to simplify the deployment and management of MCP servers, ensuring ease of use, consistency, and security through containerization by **[StacklokLabs](https://github.com/StacklokLabs)**\n- **[NetMind](https://www.netmind.ai/AIServices)** - Access powerful AI services via simple APIs or MCP servers to supercharge your productivity.\n\n## 🚀 Getting Started\n\n### Using MCP Servers in this Repository\nTypeScript-based servers in this repository can be used directly with `npx`.\n\nFor example, this will start the [Memory](src/memory) server:\n```sh\nnpx -y @modelcontextprotocol/server-memory\n```\n\nPython-based servers in this repository can be used directly with [`uvx`](https://docs.astral.sh/uv/concepts/tools/) or [`pip`](https://pypi.org/project/pip/). `uvx` is recommended for ease of use and setup.\n\nFor example, this will start the [Git](src/git) server:\n```sh\n# With uvx\nuvx mcp-server-git\n\n# With pip\npip install mcp-server-git\npython -m mcp_server_git\n```\n\nFollow [these](https://docs.astral.sh/uv/getting-started/installation/) instructions to install `uv` / `uvx` and [these](https://pip.pypa.io/en/stable/installation/) to install `pip`.\n\n### Using an MCP Client\nHowever, running a server on its own isn't very useful, and should instead be configured into an MCP client. For example, here's the Claude Desktop configuration to use the above server:\n\n```json\n{\n  \"mcpServers\": {\n    \"memory\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-memory\"]\n    }\n  }\n}\n```\n\nAdditional examples of using the Claude Desktop as an MCP client might look like:\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-filesystem\", \"/path/to/allowed/files\"]\n    },\n    \"git\": {\n      \"command\": \"uvx\",\n      \"args\": [\"mcp-server-git\", \"--repository\", \"path/to/git/repo\"]\n    },\n    \"github\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-github\"],\n      \"env\": {\n        \"GITHUB_PERSONAL_ACCESS_TOKEN\": \"<YOUR_TOKEN>\"\n      }\n    },\n    \"postgres\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@modelcontextprotocol/server-postgres\", \"postgresql://localhost/mydb\"]\n    }\n  }\n}\n```\n\n## 🛠️ Creating Your Own Server\n\nInterested in creating your own MCP server? Visit the official documentation at [modelcontextprotocol.io](https://modelcontextprotocol.io/introduction) for comprehensive guides, best practices, and technical details on implementing MCP servers.\n\n## 🤝 Contributing\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information about contributing to this repository.\n\n## 🔒 Security\n\nSee [SECURITY.md](SECURITY.md) for reporting security vulnerabilities.\n\n## 📜 License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n\n## 💬 Community\n\n- [GitHub Discussions](https://github.com/orgs/modelcontextprotocol/discussions)\n\n## ⭐ Support\n\nIf you find MCP servers useful, please consider starring the repository and contributing new servers or improvements!\n\n---\n\nManaged by Anthropic, but built together with the community. The Model Context Protocol is open source and we encourage everyone to contribute their own servers and improvements!",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "protocol",
        "node",
        "protocol mcp",
        "context protocol",
        "modelcontextprotocol servers"
      ],
      "category": "file-management"
    },
    "nathanonn--mcp-url-fetcher": {
      "owner": "nathanonn",
      "name": "mcp-url-fetcher",
      "url": "https://github.com/nathanonn/mcp-url-fetcher",
      "imageUrl": "/freedevtools/mcp/pfp/nathanonn.webp",
      "description": "Fetch and transform web content from any URL into formats like HTML, JSON, Markdown, or plain text. This MCP server supports various input types and intelligently detects source formats for seamless content conversion.",
      "stars": 4,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-07-13T18:29:14Z",
      "readme_content": "# MCP URL Format Converter\n\nA Model Context Protocol (MCP) server that fetches content from any URL and converts it to your desired output format.\n\n## Overview\n\nMCP URL Format Converter provides tools for retrieving content from any web URL and transforming it into various formats (HTML, JSON, Markdown, or plain text), regardless of the original content type. It's designed to work with any MCP-compatible client, including Claude for Desktop, enabling LLMs to access, transform, and analyze web content in a consistent format.\n\n## Features\n\n- 🔄 **Format Conversion**: Transform any web content to HTML, JSON, Markdown, or plain text\n- 🌐 **Universal Input Support**: Handle websites, APIs, raw files, and more\n- 🔍 **Automatic Content Detection**: Intelligently identifies source format\n- 🧰 **Robust Library Support**: Uses industry-standard libraries:\n  - Cheerio for HTML parsing\n  - Marked for Markdown processing\n  - Fast-XML-Parser for XML handling\n  - CSVtoJSON for CSV conversion\n  - SanitizeHTML for security\n  - Turndown for HTML-to-Markdown conversion\n- 🔧 **Advanced Format Processing**:\n  - HTML parsing with metadata extraction\n  - JSON pretty-printing and structure preservation\n  - Markdown rendering with styling\n  - CSV-to-table conversion\n  - XML-to-JSON transformation\n- 📜 **History Tracking**: Maintains logs of recently fetched URLs\n- 🛡️ **Security Focus**: Content sanitization to prevent XSS attacks\n\n## Installation\n\n### Prerequisites\n\n- Node.js 16.x or higher\n- npm or yarn\n\n### Quick Start\n\n1. Clone the repository:\n\n   ```bash\n   git clone https://github.com/yourusername/mcp-url-converter.git\n   cd mcp-url-converter\n   ```\n\n2. Install dependencies:\n\n   ```bash\n   npm install\n   ```\n\n3. Build the project:\n\n   ```bash\n   npm run build\n   ```\n\n4. Run the server:\n   ```bash\n   npm start\n   ```\n\n## Integration with Claude for Desktop\n\n1. Open your Claude for Desktop configuration file:\n\n   - macOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\n   - Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n2. Add the URL converter server to your configuration:\n\n   ```json\n   {\n     \"mcpServers\": {\n       \"url-converter\": {\n         \"command\": \"node\",\n         \"args\": [\"/absolute/path/to/mcp-url-converter/build/index.js\"]\n       }\n     }\n   }\n   ```\n\n3. Restart Claude for Desktop\n\n## Available Tools\n\n### `fetch`\n\nFetches content from any URL and automatically detects the best output format.\n\n**Parameters:**\n\n- `url` (string, required): The URL to fetch content from\n- `format` (string, optional): Format to convert to (`auto`, `html`, `json`, `markdown`, `text`). Default: `auto`\n\n**Example:**\n\n```\nCan you fetch https://example.com and choose the best format to display it?\n```\n\n### `fetch-json`\n\nFetches content from any URL and converts it to JSON format.\n\n**Parameters:**\n\n- `url` (string, required): The URL to fetch content from\n- `prettyPrint` (boolean, optional): Whether to pretty-print the JSON. Default: `true`\n\n**Example:**\n\n```\nCan you fetch https://example.com and convert it to JSON format?\n```\n\n### `fetch-html`\n\nFetches content from any URL and converts it to HTML format.\n\n**Parameters:**\n\n- `url` (string, required): The URL to fetch content from\n- `extractText` (boolean, optional): Whether to extract text content only. Default: `false`\n\n**Example:**\n\n```\nCan you fetch https://api.example.com/users and convert it to HTML?\n```\n\n### `fetch-markdown`\n\nFetches content from any URL and converts it to Markdown format.\n\n**Parameters:**\n\n- `url` (string, required): The URL to fetch content from\n\n**Example:**\n\n```\nCan you fetch https://example.com and convert it to Markdown?\n```\n\n### `fetch-text`\n\nFetches content from any URL and converts it to plain text format.\n\n**Parameters:**\n\n- `url` (string, required): The URL to fetch content from\n\n**Example:**\n\n```\nCan you fetch https://example.com and convert it to plain text?\n```\n\n### `web-search` and `deep-research`\n\nThese tools provide interfaces to Perplexity search capabilities (when supported by the MCP host).\n\n## Available Resources\n\n### `recent-urls://list`\n\nReturns a list of recently fetched URLs with timestamps and output formats.\n\n**Example:**\n\n```\nWhat URLs have I fetched recently?\n```\n\n## Security\n\nThis server implements several security measures:\n\n- HTML sanitization using `sanitize-html` to prevent XSS attacks\n- Content validation before processing\n- Error handling and safe defaults\n- Input parameter validation with Zod\n- Safe output encoding\n\n## Testing\n\nYou can test the server using the MCP Inspector:\n\n```bash\nnpm run test\n```\n\n## Troubleshooting\n\n### Common Issues\n\n1. **Connection errors**: Verify that the URL is accessible and correctly formatted\n2. **Conversion errors**: Some complex content may not convert cleanly between formats\n3. **Cross-origin issues**: Some websites may block requests from unknown sources\n\n### Debug Mode\n\nFor additional debugging information, set the `DEBUG` environment variable:\n\n```bash\nDEBUG=mcp:* npm start\n```\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.\n\n## Acknowledgments\n\n- Built with the [Model Context Protocol](https://modelcontextprotocol.io/)\n- Uses modern, actively maintained libraries with security focus\n- Sanitization approach based on OWASP recommendations\n\n---\n\nLast updated: 29 March 2025\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "formats",
        "fetcher",
        "mcp url",
        "mcp server",
        "url formats"
      ],
      "category": "file-management"
    },
    "newbeb--clipboard-mcp": {
      "owner": "newbeb",
      "name": "clipboard-mcp",
      "url": "https://github.com/newbeb/clipboard-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/newbeb.webp",
      "description": "Access and retrieve content from the macOS clipboard in real-time, supporting text, images, and binary data. Enables integration with AI assistants for seamless interaction with clipboard contents.",
      "stars": 7,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T23:54:33Z",
      "readme_content": "# MacOS Clipboard MCP Server\n\nAn MCP server that provides access to the macOS clipboard via OSAScript. This tool allows AI assistants to see what content is on the user's clipboard, including text, images, and binary data.\n\n## Features\n\n- Retrieve content from the macOS clipboard\n- Supports multiple content types:\n  - Text\n  - Images (PNG)\n  - Raw binary data\n\n## Installation\n\n```bash\nbun install\n```\n\n## Usage\n\nTo start the server:\n\n```bash\nbun run start\n```\n\nFor development with hot reloading:\n\n```bash\nbun run dev\n```\n\nAlternative development modes:\n\n```bash\nbun run dev2      # Run with fastmcp dev\nbun run inspect   # Run with fastmcp inspector\nbun run mcp-cli   # Run with mcp-cli tool\n```\n\n## Implementation Notes\n\n- Uses AppleScript via the `osascript` command to interact with the macOS clipboard\n- Handles various clipboard content types\n- Content is returned with appropriate MIME types\n- The clipboard should always be checked on demand (not cached) as content can change between requests\n\n## Requirements\n\n- macOS operating system\n- Bun runtime\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "clipboard",
        "macos",
        "newbeb",
        "macos clipboard",
        "clipboard mcp",
        "newbeb clipboard"
      ],
      "category": "file-management"
    },
    "ngoiyaeric--mcp-filesystem-server": {
      "owner": "ngoiyaeric",
      "name": "mcp-filesystem-server",
      "url": "https://github.com/ngoiyaeric/mcp-filesystem-server",
      "imageUrl": "/freedevtools/mcp/pfp/ngoiyaeric.webp",
      "description": "Manage files and directories with operations like reading, writing, and organizing within specified directories. Securely perform file management tasks including searching and retrieving metadata.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-08T07:41:39Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@mark3labs/mcp-filesystem-server)](https://smithery.ai/server/@mark3labs/mcp-filesystem-server)\n\n# Filesystem MCP Server\n\nGo server implementing Model Context Protocol (MCP) for filesystem operations.\n\n## Features\n\n- Read/write files\n- Create/list/delete directories\n- Move files/directories\n- Search files\n- Get file metadata\n\n**Note**: The server will only allow operations within directories specified via `args`.\n\n## API\n\n### Resources\n\n- `file://system`: File system operations interface\n\n### Tools\n\n- **read_file**\n  - Read complete contents of a file\n  - Input: `path` (string)\n  - Reads complete file contents with UTF-8 encoding\n\n- **read_multiple_files**\n  - Read multiple files simultaneously\n  - Input: `paths` (string[])\n  - Failed reads won't stop the entire operation\n\n- **write_file**\n  - Create new file or overwrite existing (exercise caution with this)\n  - Inputs:\n    - `path` (string): File location\n    - `content` (string): File content\n\n- **create_directory**\n  - Create new directory or ensure it exists\n  - Input: `path` (string)\n  - Creates parent directories if needed\n  - Succeeds silently if directory exists\n\n- **list_directory**\n  - List directory contents with [FILE] or [DIR] prefixes\n  - Input: `path` (string)\n\n- **move_file**\n  - Move or rename files and directories\n  - Inputs:\n    - `source` (string)\n    - `destination` (string)\n  - Fails if destination exists\n\n- **search_files**\n  - Recursively search for files/directories\n  - Inputs:\n    - `path` (string): Starting directory\n    - `pattern` (string): Search pattern\n  - Case-insensitive matching\n  - Returns full paths to matches\n\n- **get_file_info**\n  - Get detailed file/directory metadata\n  - Input: `path` (string)\n  - Returns:\n    - Size\n    - Creation time\n    - Modified time\n    - Access time\n    - Type (file/directory)\n    - Permissions\n\n- **list_allowed_directories**\n  - List all directories the server is allowed to access\n  - No input required\n  - Returns:\n    - Directories that this server can read/write from\n\n## Usage with Claude Desktop\nInstall the server\n```bash\ngo install github.com/mark3labs/mcp-filesystem-server\n```\n\nAdd this to your `claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"filesystem\": {\n      \"command\": \"mcp-filesystem-server\",\n      \"args\": [\n        \"/Users/username/Desktop\",\n        \"/path/to/other/allowed/dir\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "files",
        "mcp",
        "file management",
        "mcp filesystem",
        "manage files"
      ],
      "category": "file-management"
    },
    "nibzard--daytona-mcp-interpreter": {
      "owner": "nibzard",
      "name": "daytona-mcp-interpreter",
      "url": "https://github.com/nibzard/daytona-mcp-interpreter",
      "imageUrl": "/freedevtools/mcp/pfp/nibzard.webp",
      "description": "Executes Python code and shell commands in isolated environments, providing file management capabilities and support for Git repository cloning and web previews.",
      "stars": 16,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-08-20T10:36:22Z",
      "readme_content": "# Daytona MCP Interpreter\n\nA Model Context Protocol server that provides Python code execution capabilities in ephemeral Daytona sandboxes.\n\n\n\n## Overview\n\nDaytona MCP Interpreter enables AI assistants like Claude to execute Python code and shell commands in secure, isolated environments. It implements the Model Context Protocol (MCP) standard to provide tools for:\n\n- Python code execution in sandboxed environments\n- Shell command execution\n- File management (upload/download)\n- Git repository cloning\n- Web preview generation for running servers\n\nAll execution happens in ephemeral Daytona workspaces that are automatically cleaned up after use.\n\n## Installation\n\n1. Install uv if you haven't already:\n```bash\ncurl -LsSf https://astral.sh/uv/install.sh | sh\n```\n\n2. Create and activate virtual environment.\n\nIf you have an existing env, deactivate and remove it first:\n```bash\ndeactivate\nrm -rf .venv\n```\n\nCreate and activate a new virtual environment:\n```bash\nuv venv\nsource .venv/bin/activate\n```\n\n(On Windows: `.venv\\Scripts\\activate`)\n\n3. Install dependencies:\n```bash\nuv add \"mcp[cli]\" pydantic python-dotenv \"daytona-sdk>=0.10.5\"\n```\n\n> Note: This project requires daytona-sdk version 0.10.5 or higher. Earlier versions have incompatible FileSystem API.\n\n## Environment Variables\n\nConfigure these environment variables for proper operation:\n\n- `MCP_DAYTONA_API_KEY`: Required API key for Daytona authentication\n- `MCP_DAYTONA_SERVER_URL`: Server URL (default: https://app.daytona.io/api)\n- `MCP_DAYTONA_TIMEOUT`: Request timeout in seconds (default: 180.0)\n- `MCP_DAYTONA_TARGET`: Target region (default: eu)\n- `MCP_VERIFY_SSL`: Enable SSL verification (default: false)\n\n## Development\n\nRun the server directly:\n```bash\nuv run src/daytona_mcp_interpreter/server.py\n```\n\nOr if uv is not in your path:\n```\n/Users/USER/.local/bin/uv run ~LOCATION/daytona-mcp-interpreter/src/daytona_mcp_interpreter/server.py\n```\n\nUse MCP Inspector to test the server:\n```bash\nnpx @modelcontextprotocol/inspector \\\n  uv \\\n  --directory . \\\n  run \\\n  src/daytona_mcp_interpreter/server.py\n```\n\nView logs:\n```\ntail -f /tmp/daytona-interpreter.log\n```\n\n## Integration with Claude Desktop\n\n[![Watch the demo video](https://img.youtube.com/vi/26m2MjY8a5c/maxresdefault.jpg)](https://youtu.be/26m2MjY8a5c)\n\n1. Configure in Claude Desktop (or other MCP-compatible clients):\n\nOn MacOS, edit: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows, edit: `%APPDATA%\\Claude\\claude_desktop_config.json`\n\n```json\n{\n    \"mcpServers\": {\n        \"daytona-interpreter\": {\n            \"command\": \"/Users/USER/.local/bin/uv\",\n            \"args\": [\n                \"--directory\",\n                \"/Users/USER/dev/daytona-mcp-interpreter\",\n                \"run\",\n                \"src/daytona_mcp_interpreter/server.py\"\n            ],\n            \"env\": {\n                \"PYTHONUNBUFFERED\": \"1\",\n                \"MCP_DAYTONA_API_KEY\": \"api_key\",\n                \"MCP_DAYTONA_SERVER_URL\": \"api_server_url\",\n                \"MCP_DAYTONA_TIMEOUT\": \"30.0\",\n                \"MCP_VERIFY_SSL\": \"false\",\n                \"PATH\": \"/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\"\n            }\n        }\n    }\n}\n```\n\n2. Restart Claude Desktop\n3. The Daytona Python interpreter tools will be available in Claude\n\n## Available Tools\n\n### Shell Exec\n\nExecutes shell commands in the Daytona workspace.\n\n```bash\n# Example: List files\nls -la\n\n# Example: Install a package\npip install pandas\n```\n\n### File Download\n\nDownloads files from the Daytona workspace with smart handling for large files.\n\n**Basic Usage:**\n```\nfile_download(file_path=\"/path/to/file.txt\")\n```\n\n**Advanced Usage:**\n```\n# Set custom file size limit\nfile_download(file_path=\"/path/to/large_file.csv\", max_size_mb=10.0)\n\n# Download partial content for large files\nfile_download(file_path=\"/path/to/large_file.csv\", download_option=\"download_partial\", chunk_size_kb=200)\n\n# Convert large file to text\nfile_download(file_path=\"/path/to/large_file.pdf\", download_option=\"convert_to_text\")\n\n# Compress file before downloading\nfile_download(file_path=\"/path/to/large_file.bin\", download_option=\"compress_file\")\n\n# Force download despite size\nfile_download(file_path=\"/path/to/large_file.zip\", download_option=\"force_download\")\n```\n\n### File Upload\n\nUploads files to the Daytona workspace. Supports both text and binary files.\n\n**Basic Usage:**\n```\n# Upload a text file\nfile_upload(file_path=\"/workspace/example.txt\", content=\"Hello, World!\")\n```\n\n**Advanced Usage:**\n```\n# Upload a text file with specific path\nfile_upload(\n    file_path=\"/workspace/data/config.json\",\n    content='{\"setting\": \"value\", \"enabled\": true}'\n)\n\n# Upload a binary file using base64 encoding\nimport base64\nwith open(\"local_image.png\", \"rb\") as f:\n    base64_content = base64.b64encode(f.read()).decode('utf-8')\n\nfile_upload(\n    file_path=\"/workspace/images/uploaded.png\",\n    content=base64_content,\n    encoding=\"base64\"\n)\n\n# Upload without overwriting existing files\nfile_upload(\n    file_path=\"/workspace/important.txt\",\n    content=\"New content\",\n    overwrite=False\n)\n```\n\n### Git Clone\n\nClones a Git repository into the Daytona workspace for analysis and code execution.\n\n**Basic Usage:**\n```\ngit_clone(repo_url=\"https://github.com/username/repository.git\")\n```\n\n**Advanced Usage:**\n```\n# Clone a specific branch\ngit_clone(\n    repo_url=\"https://github.com/username/repository.git\",\n    branch=\"develop\"\n)\n\n# Clone to a specific directory with full history\ngit_clone(\n    repo_url=\"https://github.com/username/repository.git\",\n    target_path=\"my_project\",\n    depth=0  # 0 means full history\n)\n\n# Clone with Git LFS support for repositories with large files\ngit_clone(\n    repo_url=\"https://github.com/username/large-files-repo.git\",\n    lfs=True\n)\n```\n\n### Web Preview\n\nGenerates a preview URL for web servers running inside the Daytona workspace.\n\n**Basic Usage:**\n```\n# Generate a preview link for a web server running on port 3000\nweb_preview(port=3000)\n```\n\n**Advanced Usage:**\n```\n# Generate a preview link with a descriptive name\nweb_preview(\n    port=8080,\n    description=\"React Development Server\"\n)\n\n# Generate a link without checking if server is running\nweb_preview(\n    port=5000,\n    check_server=False\n)\n```\n\n**Example:**\n```bash\n# First run a simple web server using Python via the shell\nshell_exec(command=\"python -m http.server 8000 &\")\n\n# Then generate a preview link for the server\nweb_preview(port=8000, description=\"Python HTTP Server\")\n```\n\n<a href=\"https://glama.ai/mcp/servers/hj7jlxkxpk\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/hj7jlxkxpk/badge\" alt=\"Daytona Python Interpreter MCP server\" /></a>\n[![smithery badge](https://smithery.ai/badge/@nkkko/daytona-mcp)](https://smithery.ai/server/@nkkko/daytona-mcp)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "python",
        "interpreter",
        "git",
        "mcp interpreter",
        "executes python",
        "file management"
      ],
      "category": "file-management"
    },
    "oakenai--mcp-edit-file-lines": {
      "owner": "oakenai",
      "name": "mcp-edit-file-lines",
      "url": "https://github.com/oakenai/mcp-edit-file-lines",
      "imageUrl": "/freedevtools/mcp/pfp/oakenai.webp",
      "description": "Make precise line-based edits to text files using string or regex pattern matching, including the ability to replace entire lines, specific text matches, and handle multiple edits with a preview function for safety.",
      "stars": 29,
      "forks": 5,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-02T05:55:40Z",
      "readme_content": "# Edit File Lines MCP Server\n\nA TypeScript-based MCP server that provides tools for making precise line-based edits to text files within allowed directories.\n\n## Features\n\n### Main Editing Tool\n\n#### `edit_file_lines`\nMake line-based edits to a file using string or regex pattern matching. Each edit can:\n- Replace entire lines\n- Replace specific text matches while preserving line formatting\n- Use regex patterns for complex matches\n- Handle multiple lines and multiple edits\n- Preview changes with dry run mode\n\nExample file (`src/components/App.tsx`):\n```typescript\n// Basic component with props\nconst Button = ({ color = \"blue\", size = \"md\" }) => {\n  return <button className={`btn-${color} size-${size}`}>Click me</button>;\n};\n\n// Component with multiple props and nested structure\nexport const Card = ({\n  title,\n  subtitle = \"Default subtitle\",\n  theme = \"light\",\n  size = \"lg\",\n}) => {\n  const cardClass = `card-${theme} size-${size}`;\n  \n  return (\n    <div className={cardClass}>\n      <h2>{title}</h2>\n      <p>{subtitle}</p>\n    </div>\n  );\n};\n\n// Constants and configurations\nconst THEME = {\n  light: { bg: \"#ffffff\", text: \"#000000\" },\n  dark: { bg: \"#000000\", text: \"#ffffff\" },\n};\n\nconst CONFIG = {\n  apiUrl: \"https://api.example.com\",\n  timeout: 5000,\n  retries: 3,\n};\n```\n\n### Example Use Cases\n\n1. Simple String Replacement\n```json\n{\n  \"p\": \"src/components/App.tsx\",\n  \"e\": [{\n    \"startLine\": 2,\n    \"endLine\": 2,\n    \"content\": \"primary\",\n    \"strMatch\": \"blue\"\n  }],\n  \"dryRun\": true\n}\n```\n\nOutput:\n```diff\nIndex: src/components/App.tsx\n===================================================================\n--- src/components/App.tsx        original\n+++ src/components/App.tsx        modified\n@@ -1,6 +1,6 @@\n // Basic component with props\n-const Button = ({ color = \"blue\", size = \"md\" }) => {\n+const Button = ({ color = \"primary\", size = \"md\" }) => {\n   return Click me;\n };\n \n // Component with multiple props and nested structure\n ```\n\nState ID: fcbf740a\nUse this ID with approve_edit to apply the changes.\n\n\n2. Multi-line Content with Preserved Structure  \n```json\n{\n  \"p\": \"src/components/App.tsx\",\n  \"e\": [{\n    \"startLine\": 16,\n    \"endLine\": 19,\n    \"content\": \"    <div className={cardClass}>\\n      <h2 className=\\\"title\\\">{title}</h2>\\n      <p className=\\\"subtitle\\\">{subtitle}</p>\\n    </div>\",\n    \"regexMatch\": \"<div[^>]*>[\\\\s\\\\S]*?</div>\"\n  }],\n  \"dryRun\": true\n}\n```\n\nOutput:\n```diff\nIndex: src/components/App.tsx\n===================================================================\n--- src/components/App.tsx        original\n+++ src/components/App.tsx        modified\n@@ -13,10 +13,10 @@\n   const cardClass = `card-${theme} size-${size}`;\n   \n   return (\n     <div className={cardClass}>\n-      <h2>{title}</h2>\n-      <p>{subtitle}</p>\n+      <h2 className=\"title\">{title}</h2>\n+      <p className=\"subtitle\">{subtitle}</p>\n     </div>\n   );\n };\n```\nState ID: f2ce973f\nUse this ID with approve_edit to apply the changes.\n\n\n3. Complex JSX Structure Modification\n```json\n{\n  \"p\": \"src/components/App.tsx\",\n  \"e\": [{\n    \"startLine\": 7,\n    \"endLine\": 12,\n    \"content\": \"export const Card = ({\\n  title,\\n  subtitle = \\\"New default\\\",\\n  theme = \\\"modern\\\",\\n  size = \\\"responsive\\\"\\n}) => {\",\n    \"regexMatch\": \"export const Card[\\\\s\\\\S]*?\\\\) => \\\\{\"\n  }],\n  \"dryRun\": true\n}\n```\n\nOutput:\n```diff\nIndex: src/components/App.tsx\n===================================================================\n--- src/components/App.tsx        original\n+++ src/components/App.tsx        modified\n@@ -5,11 +5,11 @@\n // Component with multiple props and nested structure\n export const Card = ({\n   title,\n-  subtitle = \"Default subtitle\",\n-  theme = \"light\",\n-  size = \"lg\",\n+  subtitle = \"New default\",\n+  theme = \"modern\",\n+  size = \"responsive\"\n }) => {\n   const cardClass = `card-${theme} size-${size}`;\n   \n   return (\n```   \nState ID: f1f1d27b\nUse this ID with approve_edit to apply the changes.\n\n\n4. Configuration Update with Whitespace Preservation\n```json\n{\n  \"p\": \"src/components/App.tsx\",\n  \"e\": [{\n    \"startLine\": 29,\n    \"endLine\": 32,\n    \"content\": \"const CONFIG = {\\n  baseUrl: \\\"https://api.newexample.com\\\",\\n  timeout: 10000,\\n  maxRetries: 5\",\n    \"regexMatch\": \"const CONFIG[\\\\s\\\\S]*?retries: \\\\d+\"\n  }],\n  \"dryRun\": true\n}\n```\n\nOutput:\n```diff\nIndex: src/components/App.tsx\n===================================================================\n--- src/components/App.tsx        original\n+++ src/components/App.tsx        modified\n@@ -26,8 +26,8 @@\n   dark: { bg: \"#000000\", text: \"#ffffff\" },\n };\n \n const CONFIG = {\n-  apiUrl: \"https://api.example.com\",\n-  timeout: 5000,\n-  retries: 3,\n+  baseUrl: \"https://api.newexample.com\",\n+  timeout: 10000,\n+  maxRetries: 5\n };\n```\nState ID: 20e93c34\nUse this ID with approve_edit to apply the changes.\n\n5. Flexible Whitespace Matching\n```json\n{\n  \"p\": \"src/components/App.tsx\",\n  \"e\": [{\n    \"startLine\": 9,\n    \"endLine\": 9,\n    \"content\": \"description\",\n    \"strMatch\": \"subtitle   =   \\\"Default subtitle\\\"\"  // Extra spaces are handled\n  }],\n  \"dryRun\": true\n}\n```\n\nOutput:\n```diff\nIndex: src/components/App.tsx\n===================================================================\n--- src/components/App.tsx        original\n+++ src/components/App.tsx        modified\n@@ -5,9 +5,9 @@\n // Component with multiple props and nested structure\n export const Card = ({\n   title,\n-  subtitle = \"Default subtitle\",\n+  description\n   theme = \"light\",\n   size = \"lg\",\n }) => {\n   const cardClass = `card-${theme} size-${size}`;\n```\n\n### Additional Tools\n\n#### `approve_edit`\nApply changes from a previous dry run of `edit_file_lines`. This tool provides a two-step editing process for safety. Here is an example workflow:\n\n1. First, make a dry run edit:\n```json \n{\n  \"p\": \"src/components/App.tsx\",\n  \"e\": [{\n    \"startLine\": 2,\n    \"endLine\": 2,\n    \"content\": \"primary\",\n    \"strMatch\": \"blue\"\n  }],\n  \"dryRun\": true\n}\n```\n\nOutput:\n```diff\nIndex: src/components/App.tsx\n===================================================================\n--- src/components/App.tsx        original\n+++ src/components/App.tsx        modified\n@@ -1,6 +1,6 @@\n // Basic component with props\n-const Button = ({ color = \"blue\", size = \"md\" }) => {\n+const Button = ({ color = \"primary\", size = \"md\" }) => {\n   return <button className={`btn-${color} size-${size}`}>Click me</button>;\n };\n ```\n\nState ID: fcbf740a\nUse this ID with approve_edit to apply the changes.\n\n\n2. Then, approve the changes using the state ID:\n```json\n{\n  \"stateId\": \"fcbf740a\"\n}\n```\n\nOutput:\n```diff\nIndex: src/components/App.tsx\n===================================================================\n--- src/components/App.tsx        original\n+++ src/components/App.tsx        modified\n@@ -1,6 +1,6 @@\n // Basic component with props\n-const Button = ({ color = \"blue\", size = \"md\" }) => {\n+const Button = ({ color = \"primary\", size = \"md\" }) => {\n   return <button className={`btn-${color} size-${size}`}>Click me</button>;\n };\n```\n\n3. Verify the changes:\n```json\n{\n  \"path\": \"src/components/App.tsx\",\n  \"lineNumbers\": [2],\n  \"context\": 1\n}\n```\n\nOutput:\n```\nLine 2:\n  1: // Basic component with props\n> 2: const Button = ({ color = \"primary\", size = \"md\" }) => {\n  3:   return <button className={`btn-${color} size-${size}`}>Click me</button>;\n```\n\nNote that state IDs expire after a short time for security. Attempting to use an expired or invalid state ID will result in an error:\n```json\n{\n  \"stateId\": \"invalid123\"\n}\n```\n\nOutput:\n```\nError: Invalid or expired state ID\n```\n\n#### `get_file_lines`\nInspect specific lines in a file with optional context lines. This tool is useful for verifying line content before making edits.\n\n```json\n{\n  \"path\": \"src/components/App.tsx\",\n  \"lineNumbers\": [1, 2, 3],\n  \"context\": 1\n}\n```\n\nOutput:\n```\nLine 1:\n> 1: // Basic component with props\n  2: const Button = ({ color = \"blue\", size = \"md\" }) => {\n\nLine 2:\n  1: // Basic component with props\n> 2: const Button = ({ color = \"blue\", size = \"md\" }) => {\n  3:   return Click me;\n\nLine 3:\n  2: const Button = ({ color = \"blue\", size = \"md\" }) => {\n> 3:   return Click me;\n  4: };\n```\n\n#### `search_file`\nSearch a file for text patterns or regular expressions to find specific line numbers and their surrounding context. This tool is particularly useful for locating the exact lines you want to edit with `edit_file_lines`.\n\nFeatures:\n- Simple text search with optional case sensitivity\n- Regular expression support\n- Whole word matching\n- Configurable context lines\n- Returns line numbers, content, and surrounding context with line numbers\n\nArguments:\n```typescript\n{\n  path: string;          // Path to the file to search\n  pattern: string;       // Search pattern (text or regex)\n  type?: \"text\" | \"regex\"; // Type of search (default: \"text\")\n  caseSensitive?: boolean; // Case-sensitive search (default: false)\n  contextLines?: number;   // Number of context lines (default: 2, max: 10)\n  maxMatches?: number;     // Maximum matches to return (default: 100)\n  wholeWord?: boolean;     // Match whole words only (default: false)\n  multiline?: boolean;     // Enable multiline regex mode (default: false)\n}\n```\n\nExample use cases:\n\n1. Simple text search:\n```json\n{\n  \"path\": \"src/components/App.tsx\",\n  \"pattern\": \"const\",\n  \"contextLines\": 2\n}\n```\n\nOutput:\n```\nFound 6 matches in 0.9ms:\nFile size: 0.7KB\n\nMatch 1: Line 2, Column 1\n----------------------------------------\n     1 | // Basic component with props\n>    2 | const Button = ({ color = \"blue\", size = \"md\" }) => {\n     3 |   return <button className={`btn-${color} size-${size}`}>Click me</button>;\n     4 | };\n\nMatch 2: Line 7, Column 8\n----------------------------------------\n     5 | \n     6 | // Component with multiple props and nested structure\n>    7 | export const Card = ({\n     8 |   title,\n     9 |   subtitle = \"Default subtitle\",\n\nMatch 3: Line 13, Column 3\n----------------------------------------\n    11 |   size = \"lg\",\n    12 | }) => {\n>   13 |   const cardClass = `card-${theme} size-${size}`;\n    14 |   \n    15 |   return (\n\nMatch 4: Line 23, Column 4\n----------------------------------------\n    21 | };\n    22 | \n>   23 | // Constants and configurations\n    24 | const THEME = {\n    25 |   light: { bg: \"#ffffff\", text: \"#000000\" },\n\nMatch 5: Line 24, Column 1\n----------------------------------------\n    22 | \n    23 | // Constants and configurations\n>   24 | const THEME = {\n    25 |   light: { bg: \"#ffffff\", text: \"#000000\" },\n    26 |   dark: { bg: \"#000000\", text: \"#ffffff\" },\n\nMatch 6: Line 29, Column 1\n----------------------------------------\n    27 | };\n    28 | \n>   29 | const CONFIG = {\n    30 |   apiUrl: \"https://api.example.com\",\n    31 |   timeout: 5000,\n```\n\n2. Case-sensitive whole word search:\n```json\n{\n  \"path\": \"src/components/App.tsx\",\n  \"pattern\": \"props\",\n  \"caseSensitive\": true,\n  \"wholeWord\": true,\n  \"contextLines\": 1\n}\n```\n\nOutput:\n```\nFound 2 matches in 0.7ms:\nFile size: 0.7KB\n\nMatch 1: Line 1, Column 25\n----------------------------------------\n>    1 | // Basic component with props\n     2 | const Button = ({ color = \"blue\", size = \"md\" }) => {\n\nMatch 2: Line 6, Column 28\n----------------------------------------\n     5 | \n>    6 | // Component with multiple props and nested structure\n     7 | export const Card = ({\n```\n\n3. Finding JSX components:\n```json\n{\n  \"path\": \"src/components/App.tsx\",\n  \"pattern\": \"<[A-Z]\\\\w+\\\\s\",\n  \"type\": \"regex\",\n  \"contextLines\": 1\n}\n```\n\nOutput:\n```\nFound 2 matches in 0.6ms:\nFile size: 0.7KB\n\nMatch 1: Line 3, Column 10\n----------------------------------------\n     2 | const Button = ({ color = \"blue\", size = \"md\" }) => {\n>    3 |   return <button className={`btn-${color} size-${size}`}>Click me</button>;\n     4 | };\n\nMatch 2: Line 16, Column 5\n----------------------------------------\n    15 |   return (\n>   16 |     <div className={cardClass}>\n    17 |       <h2>{title}</h2>\n```\n\nCommon workflows:\n\n1. Find then edit:\n```typescript\n// First, search for the line\n{\n  \"path\": \"src/config.ts\",\n  \"pattern\": \"API_URL\",\n  \"wholeWord\": true\n}\n\n// Then use the returned line number in edit_file_lines\n{\n  \"p\": \"src/config.ts\",\n  \"e\": [{\n    \"startLine\": 23,  // Line number from search result\n    \"endLine\": 23,\n    \"content\": \"export const API_URL = 'https://new-api.example.com';\"\n  }]\n}\n```\n\n2. Find all usages:\n```typescript\n{\n  \"path\": \"src/components/App.tsx\",\n  \"pattern\": \"\\\\buseMemo\\\\b\",\n  \"type\": \"regex\",\n  \"contextLines\": 2,\n  \"maxMatches\": 50\n}\n```\n\n3. Find specific prop patterns:\n```typescript\n{\n  \"path\": \"src/components/App.tsx\",\n  \"pattern\": \"className=['\\\"]([^'\\\"]+)['\\\"]\",\n  \"type\": \"regex\",\n  \"contextLines\": 1\n}\n```\n\n### Important Notes\n\n1. Whitespace Handling\n   - The tool intelligently handles whitespace in both string and regex matches\n   - Original indentation is preserved in replacements\n   - Multiple spaces between tokens are normalized for matching\n\n2. Pattern Matching\n   - String matches (`strMatch`) are whitespace-normalized\n   - Regex patterns (`regexMatch`) support look-ahead and look-behind\n   - Cannot use both `strMatch` and `regexMatch` in the same edit\n   - Overlapping regex patterns are detected and prevented\n\n3. Best Practices\n   - Always use dry run first to verify changes\n   - Review the diff output before approving changes\n   - Keep edit operations focused and atomic\n   - Use appropriate pattern matching for your use case\n\n\n## Development\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Testing\n\nRun the test suite:\n```bash\nnpm run test\n```\n\nAdditional testing utilities:\n\n#### Test Tools Script\nTest the MCP tools directly against sample files:\n```bash\nnpm run test:tools\n```\n\nThis script:\n- Resets test fixtures to a known state\n- Connects to the MCP server\n- Tests each tool in sequence:\n  - `get_file_lines`\n  - `edit_file_lines` (dry run)\n  - `approve_edit`\n- Shows the output of each operation\n- Verifies changes were applied correctly\n\n#### Reset Fixtures Script\nReset test fixtures to their original state:\n```bash\nnpm run reset:fixtures\n```\n\nUse this script to:\n- Reset test files to a known state before testing\n- Clean up after failed tests\n- Ensure consistent test environment\n- Create missing fixture directories\n\n## Usage\n\nThe server requires one or more allowed directories to be specified when starting:\n\n```bash\nnode build/index.js <allowed-directory> [additional-directories...]\n```\n\nAll file operations will be restricted to these directories for security.\n\n### Environment Variables\n\n- `MCP_EDIT_STATE_TTL`: Time-to-live in milliseconds for edit states (default: 60000). Edit states will expire after this duration and must be recreated.\n\n## Installation\n\nTo use with Claude Desktop, add the server config:\n\nOn MacOS: `~/Library/Application Support/Claude/claude_desktop_config.json`\nOn Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"edit-file-lines\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"/path/to/edit-file-lines/build/index.js\",\n        \"<allowed-directory>\"\n      ],\n      \"env\": {\n        \"MCP_EDIT_STATE_TTL\": \"300000\"  // Optional: Set custom TTL (in milliseconds)\n      }\n    }\n  }\n}\n```\n\n### Error Handling\n\nThe tool provides clear error messages for common issues:\n\n1. Match Not Found\n```\nError: No string match found for \"oldValue\" on line 5\n```\n\n2. Invalid Regex\n```\nError: Invalid regex pattern \"([\": Unterminated group\n```\n\n3. Multiple Edits on Same Line\n```\nError: Line 5 is affected by multiple edits\n```\n\n### Security Considerations\n\n- All file operations are restricted to explicitly allowed directories\n- Symlinks are validated to prevent escaping allowed directories\n- Parent directory traversal is prevented\n- Path normalization is performed for consistent security checks\n- Invalid line numbers and character positions are rejected\n- Line ending normalization ensures consistent behavior across platforms\n- Edit states expire after 60 seconds for security\n- Edit approvals require exact match of file path and edits\n\n### Debugging\n\nUse the Test Tools script to test the MCP tools directly against sample files. The [MCP Inspector](https://github.com/modelcontextprotocol/inspector) might help, but it currently does not support handing input that are not string values.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "file",
        "lines",
        "mcp",
        "edit file",
        "file lines",
        "edits text"
      ],
      "category": "file-management"
    },
    "onigeya--siyuan-mcp-server": {
      "owner": "onigeya",
      "name": "siyuan-mcp-server",
      "url": "https://github.com/onigeya/siyuan-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/onigeya.webp",
      "description": "Integrate with the SiYuan Note system to access and manage notebooks, documents, and content blocks while supporting SQL queries and various file operations.",
      "stars": 42,
      "forks": 8,
      "license": "ISC License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T12:46:53Z",
      "readme_content": "# SiYuan Note MCP Server\n[![smithery badge](https://smithery.ai/badge/@onigeya/siyuan-mcp-server)](https://smithery.ai/server/@onigeya/siyuan-mcp-server)\n\n一个 MCP 服务器实现，提供与思源笔记系统的集成，使 AI 模型能够访问和操作笔记数据。\n\nAn MCP server implementation that provides integration with the SiYuan Note system, enabling AI models to access and manipulate note data.\n\n## 功能特性 | Features\n\n* 笔记本管理 | Notebook Management\n* 文档操作 | Document Operations\n* 内容块控制 | Block Control\n* 文件和资源管理 | File and Asset Management\n* SQL 查询支持 | SQL Query Support\n* 属性管理 | Attribute Management\n* 导出和转换 | Export and Conversion\n* 系统功能 | System Functions\n\n## 命令列表 | Command List\n\n所有命令都支持使用 `help` 查询获取详细说明。例如：\n\nAll commands support detailed documentation via the `help` command. For example:\n\n```json\n{\n  \"type\": \"help\",\n  \"params\": {\n    \"type\": \"block.insertBlock\"\n  }\n}\n```\n\n### 资源管理 | Asset Management\n\n* `assets.uploadAssets` - 上传资源文件 | Upload assets\n\n### 属性管理 | Attribute Management\n\n* `attr.setBlockAttrs` - 设置块属性 | Set block attributes\n* `attr.getBlockAttrs` - 获取块属性 | Get block attributes\n\n### 内容块操作 | Block Operations\n\n* `block.insertBlock` - 插入内容块 | Insert a block\n* `block.updateBlock` - 更新内容块 | Update block content\n* `block.deleteBlock` - 删除内容块 | Delete a block\n* `block.moveBlock` - 移动内容块 | Move a block\n* `block.getBlockKramdown` - 获取块的 Markdown 内容 | Get block Kramdown content\n\n### 格式转换 | Format Conversion\n\n* `convert.pandoc` - 使用 Pandoc 转换内容 | Convert content using Pandoc\n\n### 导出功能 | Export Functions\n\n* `export.exportNotebook` - 导出笔记本 | Export notebook\n* `export.exportDoc` - 导出文档 | Export document\n\n### 文件操作 | File Operations\n\n* `file.getFile` - 获取文件内容 | Get file content\n* `file.putFile` - 写入文件内容 | Put file content\n* `file.removeFile` - 删除文件 | Remove file\n* `file.readDir` - 读取目录内容 | List files in directory\n\n### 文档树操作 | File Tree Operations\n\n* `filetree.createDocWithMd` - 使用 Markdown 创建文档 | Create document with Markdown\n* `filetree.renameDoc` - 重命名文档 | Rename document\n* `filetree.removeDoc` - 删除文档 | Remove document\n* `filetree.moveDocs` - 移动文档 | Move documents\n* `filetree.getHPathByPath` - 获取文档可读路径 | Get document HPath by path\n* `filetree.getHPathByID` - 通过 ID 获取文档可读路径 | Get document HPath by ID\n\n### 网络代理 | Network Proxy\n\n* `network.forwardProxy` - 网络请求代理 | Forward proxy request\n\n### 笔记本管理 | Notebook Management\n\n* `notebook.lsNotebooks` - 列出所有笔记本 | List all notebooks\n* `notebook.openNotebook` - 打开笔记本 | Open notebook\n* `notebook.closeNotebook` - 关闭笔记本 | Close notebook\n* `notebook.renameNotebook` - 重命名笔记本 | Rename notebook\n* `notebook.createNotebook` - 创建笔记本 | Create notebook\n* `notebook.removeNotebook` - 删除笔记本 | Remove notebook\n* `notebook.getNotebookConf` - 获取笔记本配置 | Get notebook configuration\n* `notebook.setNotebookConf` - 设置笔记本配置 | Set notebook configuration\n\n### 通知提醒 | Notifications\n\n* `notification.pushMsg` - 发送消息通知 | Push message notification\n* `notification.pushErrMsg` - 发送错误通知 | Push error message notification\n\n### 查询功能 | Query Functions\n\n* `query.sql` - 执行 SQL 查询 | Execute SQL query\n* `query.block` - 通过 ID 查询块 | Query block by ID\n\n### 搜索功能 | Search Functions\n\n* `search.fullTextSearch` - 全文搜索 | Full text search\n\n### SQL 查询 | SQL Query\n\n* `sql.sql` - 执行 SQL 查询 | Execute SQL query\n\n### 系统功能 | System Functions\n\n* `system.getBootProgress` - 获取启动进度 | Get boot progress\n* `system.getVersion` - 获取系统版本 | Get system version\n* `system.getCurrentTime` - 获取当前时间 | Get current time\n\n### 模板功能 | Template Functions\n\n* `template.renderTemplate` - 渲染模板 | Render template\n* `template.renderSprig` - 渲染 Sprig 模板 | Render Sprig template\n\n## 使用说明 | Usage\n\n### 环境变量配置 | Environment Variables\n\n服务器需要配置以下环境变量：\nThe server requires the following environment variables:\n\n* `SIYUAN_TOKEN` - 思源笔记 API 令牌（必需）| SiYuan Note API token (required)\n  * 在思源笔记设置 - 关于 中查看 | Check in SiYuan Note Settings - About\n  * 用于 API 认证 | Used for API authentication\n\n### 在 Claude Desktop 中使用 | Using in Claude Desktop\n\n将以下配置添加到 `claude_desktop_config.json`：\nAdd the following configuration to `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n    \"siyuan\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@onigeya/siyuan-mcp-server\"\n      ],\n      \"env\": {\n        \"SIYUAN_TOKEN\": \"your-siyuan-token\"\n      }\n    }\n  }\n}\n```\n\n### 本地运行 | Local Run\n\n1. 安装依赖 | Install dependencies:\n```bash\npnpm install\n```\n\n2. 设置环境变量 | Set environment variables:\n```bash\n# Windows\nset SIYUAN_TOKEN=your-siyuan-token\n\n# Linux/macOS\nexport SIYUAN_TOKEN=your-siyuan-token\n```\n\n3. 启动服务 | Start service:\n```bash\npnpm start\n```\n\n### Docker 运行 | Docker Run\n\n```bash\ndocker run --rm -i \\\n  -e SIYUAN_TOKEN=your-siyuan-token \\\n  mcp/siyuan\n```\n\n## 构建 | Build\n\n### 环境要求 | Requirements\n\n* Node.js >= 23.10.0\n* pnpm\n\n### 本地构建 | Local Build\n\n```bash\npnpm build\n```\n\n### Docker 构建 | Docker Build\n\n```bash\ndocker build -t mcp/siyuan .\n```\n\n## 许可证 | License\n\n本项目基于 ISC 许可证发布。这意味着你可以自由使用、修改和分发本软件，但需要遵守 ISC 许可证的条款和条件。详细信息请参见项目仓库中的 LICENSE 文件。\n\nThis project is released under the ISC License. This means you can freely use, modify, and distribute this software, subject to the terms and conditions of the ISC License. For detailed information, please refer to the LICENSE file in the project repository.\n\n## 相关资源 | Related Resources\n\n- [思源笔记 | SiYuan Note](https://github.com/siyuan-note/siyuan)\n- [Model Context Protocol](https://modelcontextprotocol.io/)\n- [思源笔记 API 文档 | SiYuan Note API Documentation](https://github.com/siyuan-note/siyuan/blob/master/API.md)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "siyuan",
        "documents",
        "file",
        "siyuan note",
        "file management",
        "siyuan mcp"
      ],
      "category": "file-management"
    },
    "owayo--mcp-src-tree": {
      "owner": "owayo",
      "name": "mcp-src-tree",
      "url": "https://github.com/owayo/mcp-src-tree",
      "imageUrl": "/freedevtools/mcp/pfp/owayo.webp",
      "description": "Generates a file tree of the specified directory's 'src' folder while adhering to rules defined in `.gitignore` to exclude certain files and directories. Represents the directory structure hierarchically in JSON format.",
      "stars": 0,
      "forks": 2,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-02-24T05:31:48Z",
      "readme_content": "# MCP Source Tree Server\n\n指定されたディレクトリ配下のファイルツリーを生成するMCPサーバーです。\n`.`で始まるディレクトリや`.gitignore` に記載された条件に従って、特定のファイルやディレクトリを除外します。\nClaudeに組み込むことで、Claudeがプロジェクトの構造を素早く確認でき、Claudeが編集すべきファイルを特定するのに役立ちます。\n\n<a href=\"https://glama.ai/mcp/servers/1igr60piqh\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/1igr60piqh/badge\" alt=\"Source Tree Server MCP server\" /></a>\n\n## 機能\n\n- 指定されたディレクトリ配下のファイルツリーをJSON形式で取得\n- `.gitignore` の条件に従ってファイル/ディレクトリを除外\n- ディレクトリ構造を階層的なJSONで表現\n\n## セットアップ\n\n### 必要条件\n\n- Python 3.10以上\n- uv\n\n### インストール\n\n```bash\n# uvのインストール\n$ curl -LsSf https://astral.sh/uv/install.sh | sh\n\n$ cd /path/to/mcp-src-tree\n# ライブラリのインストール\n$ uv sync\n```\n\n## Claude for Desktopでの設定\n\n`claude_desktop_config.json` に以下の設定を追加してください：\n\n```json\n{\n    \"mcpServers\": {\n        \"src-tree\": {\n            \"command\": \"uv\",\n            \"args\": [\n                \"--directory\",\n                \"/path/to/mcp-src-tree\",  # このプロジェクトディレクトリの絶対パスに書き換えてください\n                \"run\",\n                \"tree.py\"\n            ]\n        }\n    }\n}\n```\n\n## Claudeでの使用例\n\n指示するのはsrcの一つ上のルートディレクトリを指定してください。\n`.gitignore` を考慮する場合、ルートディレクトリ直下に `.gitignore` が存在することが前提です。\n`/Users/xxx/GitHub/xxx/ のソースツリーを確認してください` のように指示すると動作します\n\n以下のように応答します\n```\nはい、ソースツリーを確認させていただきます。\nプロジェクトの構造を確認しました。以下のような構成になっています：\nsrc/\n└── xxxx/\n    ├── __init__.py\n    ├── converter.py\n    ├── html_converter.py\n    ├── image_processor.py\n    ├── toc_analyzer.py\n    └── utils.py\n```\nこれにより、Claudeが素早くプロジェクトの構造を確認できます。\n\n## ファイル除外\n\n`.`で始まるディレクトリは自動的に除外されます。\n`.gitignore` に記載されているパターンに合致するファイルやディレクトリは、ツリーから自動的に除外されます。\n例えば、以下のような `.gitignore` の設定が有効です：\n\n```\n__pycache__/\nnode_modules/\n*.log\n```\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gitignore",
        "tree",
        "src",
        "src tree",
        "file tree",
        "directory src"
      ],
      "category": "file-management"
    },
    "pskill9--website-downloader": {
      "owner": "pskill9",
      "name": "website-downloader",
      "url": "https://github.com/pskill9/website-downloader",
      "imageUrl": "/freedevtools/mcp/pfp/pskill9.webp",
      "description": "Downloads entire websites for offline access, preserving the website structure and converting links for local use.",
      "stars": 139,
      "forks": 26,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-10-04T04:52:29Z",
      "readme_content": "# Website Downloader MCP Server\n\nThis MCP server provides a tool to download entire websites using wget. It preserves the website structure and converts links to work locally.\n\n<a href=\"https://glama.ai/mcp/servers/egcwr79vu2\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/egcwr79vu2/badge\" alt=\"Google Workspace Server MCP server\" /></a>\n\n## Prerequisites\n\nThe server requires `wget` to be installed on your system.\n\n### Installing wget\n\n#### macOS\nUsing Homebrew:\n```bash\nbrew install wget\n```\n\n#### Linux (Debian/Ubuntu)\n```bash\nsudo apt-get update\nsudo apt-get install wget\n```\n\n#### Linux (Red Hat/Fedora)\n```bash\nsudo dnf install wget\n```\n\n#### Windows\n1. Using [Chocolatey](https://chocolatey.org/):\n```bash\nchoco install wget\n```\n\n2. Or download the binary from: https://eternallybored.org/misc/wget/\n   - Download the latest wget.exe\n   - Place it in a directory that's in your PATH (e.g., C:\\Windows\\System32)\n\n## Usage\n\nThe server provides a tool called `download_website` with the following parameters:\n\n- `url` (required): The URL of the website to download\n- `outputPath` (optional): The directory where the website should be downloaded. Defaults to the current directory.\n- `depth` (optional): Maximum depth level for recursive downloading. Defaults to infinite. Set to 0 for just the specified page, 1 for direct links, etc.\n\n### Example\n\n```json\n{\n  \"url\": \"https://example.com\",\n  \"outputPath\": \"/path/to/output\",\n  \"depth\": 2  // Optional: Download up to 2 levels deep\n}\n```\n\n## Features\n\nThe website downloader:\n- Downloads recursively with infinite depth\n- Includes all page requisites (CSS, images, etc.)\n- Converts links to work locally\n- Adds appropriate extensions to files\n- Restricts downloads to the same domain\n- Preserves the website structure\n\n## Installation\n\n1. Build the server:\n```bash\nnpm install\nnpm run build\n```\n\n2. Add to MCP settings:\n```json\n{\n  \"mcpServers\": {\n    \"website-downloader\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/website-downloader/build/index.js\"]\n    }\n  }\n}\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "downloader",
        "pskill9",
        "downloads",
        "website downloader",
        "pskill9 website",
        "management pskill9"
      ],
      "category": "file-management"
    },
    "qing-turnaround--markitdown_mcp_server": {
      "owner": "qing-turnaround",
      "name": "markitdown_mcp_server",
      "url": "https://github.com/qing-turnaround/markitdown_mcp_server",
      "imageUrl": "/freedevtools/mcp/pfp/qing-turnaround.webp",
      "description": "Convert various file formats to Markdown using the MarkItDown utility. Process PDFs, Office documents, images, audio files, HTML, and more into a Markdown format for streamlined content handling.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-04-24T07:56:26Z",
      "readme_content": "# MarkItDown MCP Server\n\n[![smithery badge](https://smithery.ai/badge/@KorigamiK/markitdown_mcp_server)](https://smithery.ai/server/@KorigamiK/markitdown_mcp_server)\n\nA Model Context Protocol (MCP) server that converts various file formats to Markdown using the MarkItDown utility.\n\n<a href=\"https://glama.ai/mcp/servers/sbc6bljjg5\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/sbc6bljjg5/badge\" alt=\"MarkItDown Server MCP server\" /></a>\n\n## Supported Formats\n\n- PDF\n- PowerPoint\n- Word\n- Excel\n- Images (EXIF metadata and OCR)\n- Audio (EXIF metadata and speech transcription)\n- HTML\n- Text-based formats (CSV, JSON, XML)\n- ZIP files (iterates over contents)\n\n## Installation\n\n### Installing via Smithery\n\nTo install MarkItDown MCP Server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@KorigamiK/markitdown_mcp_server):\n\n```bash\nnpx -y @smithery/cli install @KorigamiK/markitdown_mcp_server --client claude\n```\n\n### Manual Installation\n\n1. Clone this repository\n2. Install dependencies:\n```bash\nuv install\n```\n\n## Usage\n\n### As MCP Server\n\nThe server can be integrated with any MCP client. Here are some examples:\n\n#### Zed Editor\n\nAdd the following to your `settings.json`:\n\n```json\n\"context_servers\": {\n  \"markitdown_mcp\": {\n    \"settings\": {},\n    \"command\": {\n      \"path\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/markitdown_mcp_server\",\n        \"run\",\n        \"markitdown\"\n      ]\n    }\n  }\n}\n```\n\n### Commands\n\nThe server responds to the following MCP commands:\n\n- `/md <file>` - Convert the specified file to Markdown\n\nExample:\n```bash\n/md document.pdf\n```\n\n## Supported MCP Clients\n\nWorks with any MCP-compliant client listed at [modelcontextprotocol.io/clients](https://modelcontextprotocol.io/clients), including:\n\n- Zed Editor\n- Any other MCP-compatible editors and tools\n\n## License\n\nMIT License. See [LICENSE](LICENSE) for details.\n\n## Acknowledgements\n\nhttps://github.com/microsoft/markitdown#readme\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "markitdown",
        "markdown",
        "markitdown_mcp_server",
        "formats markdown",
        "markitdown utility",
        "markdown format"
      ],
      "category": "file-management"
    },
    "qpd-v--mcp-delete": {
      "owner": "qpd-v",
      "name": "mcp-delete",
      "url": "https://github.com/qpd-v/mcp-delete",
      "imageUrl": "/freedevtools/mcp/pfp/qpd-v.webp",
      "description": "Provides file deletion capabilities, supporting both relative and absolute paths with smart path resolution and existence checks to ensure safe file removal.",
      "stars": 1,
      "forks": 6,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-03-05T22:05:32Z",
      "readme_content": "# @qpd-v/mcp-delete\n[![smithery badge](https://smithery.ai/badge/@qpd-v/mcp-delete)](https://smithery.ai/server/@qpd-v/mcp-delete)\n\nA Model Context Protocol (MCP) server that provides file deletion capabilities. This server allows AI assistants to safely delete files when needed, with support for both relative and absolute paths.\n\n## Features\n\n- Delete files using relative or absolute paths\n- Smart path resolution that tries multiple potential paths\n- Clear error messages with detailed path resolution information\n- Safe file existence checks before deletion\n- Works with Claude and other MCP-compatible AI assistants\n\n## Examples\n\n### Using with Claude Desktop\n\n\n### Using with VSCode Roo Cline Extension\n\n\n## Installation\n\n### Installing via Smithery\n\nTo install File Deletion for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@qpd-v/mcp-delete):\n\n```bash\nnpx -y @smithery/cli install @qpd-v/mcp-delete --client claude\n```\n\n### Manual Installation\n```bash\nnpx @qpd-v/mcp-delete\n```\n\nOr install globally:\n\n```bash\nnpm install -g @qpd-v/mcp-delete\n```\n\n## Configuration\n\n### Claude Desktop\n\nAdd the server configuration to your Claude Desktop config file:\n\nWindows:\n```json\n// %APPDATA%/Claude/claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n```\n\nMacOS:\n```json\n// ~/Library/Application Support/Claude/claude_desktop_config.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n}\n```\n\n### VSCode Extension\n\nAdd the server configuration to your Cline settings:\n\nWindows:\n```json\n// %APPDATA%/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n```\n\nMacOS:\n```json\n// ~/Library/Application Support/Code/User/globalStorage/rooveterinaryinc.roo-cline/settings/cline_mcp_settings.json\n{\n  \"mcpServers\": {\n    \"mcp-delete\": {\n      \"command\": \"npx\",\n      \"args\": [\"@qpd-v/mcp-delete\"]\n    }\n  }\n}\n}\n```\n\n## Available Tools\n\n### delete_file\n\nDeletes a file at the specified path.\n\nParameters:\n- `path` (string, required): Path to the file to delete (relative to working directory or absolute)\n\nExample usage in Claude:\n```\nYou can ask me to delete a file like this:\n\"Please delete the file example.txt\"\n\nI will use the delete_file tool to safely remove the file.\n```\n\n## Path Resolution\n\nThe server intelligently handles path resolution by trying multiple approaches:\n1. The exact path as provided\n2. Path relative to the current working directory\n3. Path relative to a specified base directory\n\nThis makes it more user-friendly as files can be referenced by relative paths and the server will attempt to locate them correctly.\n\n## Development\n\nClone the repository:\n```bash\ngit clone https://github.com/qpd-v/mcp-delete.git\ncd mcp-delete\n```\n\nInstall dependencies:\n```bash\nnpm install\n```\n\nBuild the server:\n```bash\nnpm run build\n```\n\nFor development with auto-rebuild:\n```bash\nnpm run watch\n```\n\n### Debugging\n\nSince MCP servers communicate over stdio, debugging can be challenging. Use the MCP Inspector for debugging:\n\n```bash\nnpm run inspector\n```\n\nThis will provide a URL to access debugging tools in your browser.\n\n## License\n\nMIT\n\n## Author\n\nqpd-v",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "qpd",
        "mcp",
        "removal",
        "file deletion",
        "mcp delete",
        "file removal"
      ],
      "category": "file-management"
    },
    "qpd-v--mcp-image-downloader": {
      "owner": "qpd-v",
      "name": "mcp-image-downloader",
      "url": "https://github.com/qpd-v/mcp-image-downloader",
      "imageUrl": "/freedevtools/mcp/pfp/qpd-v.webp",
      "description": "Provides tools for downloading images from URLs and performing basic image optimization tasks such as resizing, quality adjustment, and format conversion.",
      "stars": 11,
      "forks": 5,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:32:03Z",
      "readme_content": "# MCP Image Downloader\n\nAn MCP server that provides tools for downloading and optimizing images. Built using the Model Context Protocol (MCP), this server enables AI assistants to download images from URLs and perform basic image optimization tasks.\n\n## Features\n\n- Download images from URLs with proper error handling\n- Optimize images with options for:\n  - Resizing (maintaining aspect ratio)\n  - Quality adjustment (JPEG/WebP)\n  - Format conversion\n\n## Installation\n\n```bash\n# Clone the repository\ngit clone https://github.com/qpd-v/mcp-image-downloader.git\ncd mcp-image-downloader\n\n# Install dependencies\nnpm install\n\n# Build the project\nnpm run build\n```\n\n## Usage\n\n### As an MCP Server\n\nAdd the server to your MCP configuration (e.g., in Claude Desktop's config):\n\n```json\n{\n  \"mcpServers\": {\n    \"image-downloader\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-image-downloader/build/index.js\"]\n    }\n  }\n}\n```\n\n### Available Tools\n\n#### download_image\nDownloads an image from a URL to a specified path.\n\nParameters:\n- `url`: URL of the image to download\n- `outputPath`: Path where to save the image\n\n#### optimize_image\nCreates an optimized version of an image.\n\nParameters:\n- `inputPath`: Path to the input image\n- `outputPath`: Path where to save the optimized image\n- `width` (optional): Target width (maintains aspect ratio if only width is specified)\n- `height` (optional): Target height (maintains aspect ratio if only height is specified)\n- `quality` (optional): JPEG/WebP quality (1-100)\n\n## Development\n\n```bash\n# Run in development mode\nnpm run start\n\n# Build the project\nnpm run build\n```\n\n## Requirements\n\n- Node.js 16 or higher\n- NPM or compatible package manager\n\n## License\n\nMIT License - see the [LICENSE](LICENSE) file for details.\n\n## Author\n\nqpd-v\n\n## Version\n\n0.1.0 - Initial release",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "qpd",
        "downloader",
        "mcp",
        "image downloader",
        "downloading images",
        "mcp image"
      ],
      "category": "file-management"
    },
    "rishipradeep-think41--google-drive-mcp": {
      "owner": "rishipradeep-think41",
      "name": "google-drive-mcp",
      "url": "https://github.com/rishipradeep-think41/google-drive-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/rishipradeep-think41.webp",
      "description": "Integrate Google Drive functionalities with the Model Context Protocol (MCP) to facilitate file management, content retrieval, and permission handling. Access Google's Drive resources seamlessly from LLM applications through standardized tools.",
      "stars": 2,
      "forks": 8,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-07-11T00:35:40Z",
      "readme_content": "[![smithery badge](https://smithery.ai/badge/@rishipradeep-think41/google-drive-mcp)](https://smithery.ai/server/@rishipradeep-think41/google-drive-mcp)\n\n# Google Drive MCP Server\n\nGoogle Drive MCP Server is a stateless server that integrates Google Drive functionalities with the Model Context Protocol (MCP). It provides a suite of tools and resources to interact with Google Drive, enabling operations like file management, content retrieval, and permission handling through a standardized interface.\n\n## 🚀 Features\n\n- **Root Listing:** List top-level locations like \"My Drive\" and \"Shared with me\" using `drive_roots`.\n- **Folder Browsing:** List contents of any folder with `drive_folder_children`.\n- **File Metadata:** Retrieve detailed metadata for a file using `drive_file_metadata`.\n- **File Exporting:** Retrieve raw file content using `drive_file_content` (note: no built-in format conversion).\n- **File Uploading:** Create or update files with content using `drive_upload`.\n- **Text Appending:** Append plain text to existing text files using `drive_append_text`.\n- **File Deletion & Trash:** Move files to trash or delete them permanently with `drive_delete` and `drive_file_empty_trash`.\n- **Permission Management:** Add, update, remove, or list permissions for files/folders via `drive_share`, `drive_permission_update`, `drive_permission_delete`, etc.\n- **Commenting & Replies:** Add comments, reply to them, and list/delete comments or replies using tools like `drive_comment`, `drive_file_list_comments`, and related tools.\n- **Change Tracking:** Track changes in a user's Drive using `drive_changes`.\n- **File Search:** Search for files by name or other criteria using `drive_search`.\n\n🛠️ **Installation**\n\n1.  **Clone the Repository:**\n\n    ```bash\n    git clone [https://github.com/rishipradeep-think41/google-drive-mcp.git](https://github.com/rishipradeep-think41/google-drive-mcp.git)\n    cd google-drive-mcp\n    ```\n\n2.  **Install Dependencies:**\n\n    ```bash\n    npm install\n    ```\n\n3.  **Configure Environment Variables:**\n    Create a `.env` file in the root directory and add the following:\n\n    ```env\n    CLIENT_ID=your_google_client_id\n    CLIENT_SECRET=your_google_client_secret\n    REFRESH_TOKEN=your_google_refresh_token\n    PORT=8081\n    ```\n\n    Ensure you have a valid Google OAuth2 client and refresh token with appropriate Drive API scopes.\n\n4.  **Start the Server:**\n    ```bash\n    node index.js\n    ```\n    The server will start on `http://localhost:8081`.\n\n📚 **API Overview**\n\n**Resources**\n\n- `drive_roots`: Lists files in \"My Drive\" and \"Shared with me\".\n\n## Tool Categories\n\n### Basic Navigation & Information\n\n| Tool Name                 | Description                                |\n| ------------------------- | ------------------------------------------ |\n| `drive_roots`             | List roots (My Drive, Shared with me)      |\n| `drive_changes`           | List changes in Drive                      |\n| `drive_file_metadata`     | Get metadata of a file                     |\n| `drive_folder_children`   | List contents of a folder                  |\n| `drive_search`            | Search files in Google Drive               |\n| `drive_storage_quota`     | Get storage quota information for the user |\n| `drive_storage_breakdown` | Get storage usage breakdown by file type   |\n\n### File Content Operations\n\n| Tool Name            | Description                                         |\n| -------------------- | --------------------------------------------------- |\n| `drive_file_content` | Retrieve content of a Google Drive file             |\n| `drive_create`       | Create file or folder                               |\n| `drive_upload`       | Upload or update file content                       |\n| `drive_append_text`  | Append plain text to an existing text file in Drive |\n\n### File Management\n\n| Tool Name                | Description                                        |\n| ------------------------ | -------------------------------------------------- |\n| `drive_copy`             | Copy a file or folder to a new location            |\n| `drive_move`             | Move a file or folder to a different parent folder |\n| `drive_rename`           | Rename a file or folder                            |\n| `drive_delete`           | Trash or delete a file                             |\n| `drive_restore`          | Restore a file from the trash                      |\n| `drive_file_empty_trash` | Permanently delete all trashed files               |\n| `drive_star`             | Star or unstar a file or folder                    |\n| `drive_file_lock`        | Lock or unlock a file to prevent changes           |\n| `drive_shortcut_create`  | Create a shortcut to a file or folder              |\n\n### File Version Management\n\n| Tool Name               | Description                         |\n| ----------------------- | ----------------------------------- |\n| `drive_versions_list`   | List all versions of a file         |\n| `drive_versions_delete` | Delete a specific version of a file |\n\n### Permissions & Sharing\n\n| Tool Name                     | Description                                           |\n| ----------------------------- | ----------------------------------------------------- |\n| `drive_share`                 | Manage file permissions                               |\n| `drive_permissions_list`      | List all permissions of a file or folder              |\n| `drive_permission_update`     | Update a user's permission on a file or folder        |\n| `drive_permission_delete`     | Remove a user's access from a file or folder          |\n| `drive_permission_add_domain` | Share file or folder with everyone in a domain        |\n| `drive_permission_add_anyone` | Allow anyone with the link to access a file or folder |\n\n### Comments & Collaboration\n\n| Tool Name                     | Description                   |\n| ----------------------------- | ----------------------------- |\n| `drive_comment`               | Add a comment to a file       |\n| `drive_file_list_comments`    | List all comments on a file   |\n| `drive_file_delete_comment`   | Delete a comment from a file  |\n| `drive_file_reply_to_comment` | Reply to a comment on a file  |\n| `drive_file_list_replies`     | List all replies to a comment |\n| `drive_file_delete_reply`     | Delete a reply to a comment   |\n\n### Shared Drives (Team Drives)\n\n| Tool Name                   | Description                              |\n| --------------------------- | ---------------------------------------- |\n| `drive_shared_drives_list`  | List all accessible Shared Drives        |\n| `drive_shared_drive_get`    | Get metadata for a specific Shared Drive |\n| `drive_shared_drive_create` | Create a new Shared Drive                |\n| `drive_shared_drive_delete` | Delete a Shared Drive                    |\n| `drive_shared_drive_update` | Update a Shared Drive's metadata         |\n| `drive_shared_drive_files`  | List files in a Shared Drive             |\n\n### Batch Operations\n\n| Tool Name                        | Description                                         |\n| -------------------------------- | --------------------------------------------------- |\n| `drive_batch_get_metadata`       | Get metadata for multiple files in a single request |\n| `drive_batch_update_permissions` | Update permissions for multiple files at once       |\n| `drive_batch_delete`             | Delete multiple files or folders at once            |\n| `drive_batch_copy`               | Copy multiple files to a destination folder         |\n| `drive_batch_move`               | Move multiple files to a destination folder         |\n\n🔐 **Authentication**\n\nThe server uses OAuth2 for authentication with Google Drive. Ensure that the `CLIENT_ID`, `CLIENT_SECRET`, and `REFRESH_TOKEN` are correctly set in the `.env` file. These credentials should have the necessary scopes to access and modify files in Google Drive.\n\n🧪 **Testing**\n\nYou can test the endpoints using tools like MCPInspector. Ensure the server is running at `http://localhost:${port}`.\n\n🤝 **Contributing**\n\nContributions are welcome! Please fork the repository and submit a pull request for any enhancements or bug fixes.\n\n📄 **License**\n\nThis project is licensed under the [MIT License](LICENSE).\n\n📧 **Contact**\n\nFor any questions or feedback, please open an issue on the [GitHub repository](https://github.com/rishipradeep-think41/google-drive-mcp).\n\n---\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "mcp",
        "protocol",
        "file",
        "google drive",
        "drive mcp",
        "mcp facilitate"
      ],
      "category": "file-management"
    },
    "safurrier--mcp-filesystem": {
      "owner": "safurrier",
      "name": "mcp-filesystem",
      "url": "https://github.com/safurrier/mcp-filesystem",
      "imageUrl": "/freedevtools/mcp/pfp/safurrier.webp",
      "description": "Access and manipulate files securely with advanced search and editing capabilities, enabling efficient interaction with large files and filesystems. Supports partial reading, precise context control, token-efficient searches, and multi-file operations.",
      "stars": 49,
      "forks": 9,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-02T18:46:04Z",
      "readme_content": "# MCP Filesystem Server\n\n[![License](https://img.shields.io/github/license/safurrier/mcp-filesystem.svg)](https://github.com/safurrier/mcp-filesystem/blob/main/LICENSE)\n\nA powerful Model Context Protocol (MCP) server for filesystem operations optimized for intelligent interaction with large files and filesystems. It provides secure access to files and directories with smart context management to maximize efficiency when working with extensive data.\n\n## Why MCP-Filesystem?\n\n- **Smart Context Management**: Work efficiently with large files and filesystems\n  - Partial reading to focus only on relevant content\n  - Precise context control for finding exactly what you need\n  - Token-efficient search results with pagination\n  - Multi-file operations to reduce request overhead\n\n- **Intelligent File Operations**:\n  - Line-targeted reading with configurable context windows\n  - Advanced editing with content verification to prevent conflicts\n  - Fine-grained search capabilities that exceed standard grep\n  - Relative line references for precise file manipulation\n\n## Key Features\n\n- **Secure File Access**: Only allows operations within explicitly allowed directories\n- **Comprehensive Operations**: Full set of file system capabilities\n  - Standard operations (read, write, list, move, delete)\n  - Enhanced operations (tree visualization, duplicate finding, etc.)\n  - Advanced search with grep integration (uses ripgrep when available)\n    - Context control (like grep's -A/-B/-C options)\n    - Result pagination for large result sets\n  - Line-targeted operations with content verification and relative line numbers\n- **Performance Optimized**:\n  - Efficiently handles large files and directories\n  - Ripgrep integration for blazing fast searches\n  - Line-targeted operations to avoid loading entire files\n- **Comprehensive Testing**: 75+ tests with behavior-driven approach\n- **Cross-Platform**: Works on Windows, macOS, and Linux\n\n## Quickstart Guide\n\n### 1. Clone and Setup\n\nFirst, install uv if you haven't already:\n\n```bash\n# Install uv using the official installer\ncurl -fsSL https://raw.githubusercontent.com/astral-sh/uv/main/install.sh | bash\n\n# Or with pipx\npipx install uv\n```\n\nThen clone the repository and install dependencies:\n\n```bash\n# Clone the repository\ngit clone https://github.com/safurrier/mcp-filesystem.git\ncd mcp-filesystem\n\n# Install dependencies with uv\nuv pip sync requirements.txt requirements-dev.txt\n```\n\n### 2. Get Absolute Paths\n\nYou'll need absolute paths both for the repository location and any directories you want to access:\n\n```bash\n# Get the absolute path to the repository\nREPO_PATH=$(pwd)\necho \"Repository path: $REPO_PATH\"\n\n# Get absolute paths to directories you want to access\nrealpath ~/Documents\nrealpath ~/Downloads\n# Or on systems without realpath:\necho \"$(cd ~/Documents && pwd)\"\n```\n\n### 3. Configure Claude Desktop\n\nOpen your Claude Desktop configuration file:\n- On macOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\nAdd the following configuration (substitute your actual paths):\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-filesystem\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/absolute/path/to/mcp-filesystem\",\n        \"run\",\n        \"run_server.py\",\n        \"/absolute/path/to/dir1\",\n        \"/absolute/path/to/dir2\"\n      ]\n    }\n  }\n}\n```\n\n> **Important**: All paths must be absolute (full paths from root directory).\n> Use `realpath` or `pwd` to ensure you have the correct absolute paths.\n\n### 4. Restart Claude Desktop\n\nAfter saving your configuration, restart Claude Desktop for the changes to take effect.\n\n## Installation\n\n## Usage\n\n### Watch Server Logs\n\nYou can monitor the server logs from Claude Desktop with:\n\n```bash\n# On macOS\ntail -n 20 -f ~/Library/Logs/Claude/mcp-server-mcp-filesystem.log\n\n# On Windows (PowerShell)\nGet-Content -Path \"$env:APPDATA\\Claude\\Logs\\mcp-server-mcp-filesystem.log\" -Tail 20 -Wait\n```\n\nThis is particularly useful for debugging issues or seeing exactly what Claude is requesting.\n\n### Running the Server\n\nRun the server with access to specific directories:\n\n```bash\n# Using uv (recommended)\nuv run run_server.py /path/to/dir1 /path/to/dir2\n\n# Or using standard Python\npython run_server.py /path/to/dir1 /path/to/dir2\n\n# Example with actual paths\nuv run run_server.py /Users/username/Documents /Users/username/Downloads\n```\n\n#### Options\n\n- `--transport` or `-t`: Transport protocol (stdio or sse, default: stdio)\n- `--port` or `-p`: Port for SSE transport (default: 8000)\n- `--debug` or `-d`: Enable debug logging\n- `--version` or `-v`: Show version information\n\n### Using with MCP Inspector\n\nFor interactive testing and debugging with the MCP Inspector:\n\n```bash\n# Basic usage\nnpx @modelcontextprotocol/inspector uv run run_server.py /path/to/directory\n\n# With SSE transport\nnpx @modelcontextprotocol/inspector uv run run_server.py /path/to/directory --transport sse --port 8080\n\n# With debug output\nnpx @modelcontextprotocol/inspector uv run run_server.py /path/to/directory --debug\n```\n\nThis server has been built with the FastMCP SDK for better alignment with current MCP best practices. It uses an efficient component caching system and direct decorator pattern.\n\n## Claude Desktop Integration\n\nEdit your Claude Desktop config file to integrate MCP-Filesystem:\n\n**Config file location:**\n- On macOS: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-filesystem\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-filesystem/repo\",\n        \"run\",\n        \"run_server.py\"\n      ]\n    }\n  }\n}\n```\n\nTo allow access to specific directories, add them as additional arguments:\n\n```json\n{\n  \"mcpServers\": {\n    \"mcp-filesystem\": {\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/path/to/mcp-filesystem/repo\",\n        \"run\",\n        \"run_server.py\",\n        \"/Users/yourusername/Projects\",\n        \"/Users/yourusername/Documents\"\n      ]\n    }\n  }\n}\n```\n\n> Note: The `--directory` flag is important as it tells uv where to find the repository containing run_server.py. Replace `/path/to/mcp-filesystem/repo` with the actual path to where you cloned the repository on your system.\n\n## Development\n\n### Running Tests\n\n```bash\n# Run all tests\nuv run -m pytest tests/\n\n# Run specific test file\nuv run -m pytest tests/test_operations_unit.py\n\n# Run with coverage\nuv run -m pytest tests/ --cov=mcp_filesystem --cov-report=term-missing\n```\n\n### Code Style and Quality\n\n```bash\n# Format code\nuv run -m ruff format mcp_filesystem\n\n# Lint code\nuv run -m ruff check --fix mcp_filesystem\n\n# Type check\nuv run -m mypy mcp_filesystem\n\n# Run all checks\nuv run -m ruff format mcp_filesystem && \\\nuv run -m ruff check --fix mcp_filesystem && \\\nuv run -m mypy mcp_filesystem && \\\nuv run -m pytest tests --cov=mcp_filesystem\n```\n\n## Available Tools\n\n### Basic File Operations\n\n- **read_file**: Read the complete contents of a file\n- **read_multiple_files**: Read multiple files simultaneously\n- **write_file**: Create a new file or overwrite an existing file\n- **create_directory**: Create a new directory or ensure a directory exists\n- **list_directory**: Get a detailed listing of files and directories\n- **move_file**: Move or rename files and directories\n- **get_file_info**: Retrieve detailed metadata about a file or directory\n- **list_allowed_directories**: List directories the server is allowed to access\n\n### Line-Targeted Operations\n\n- **read_file_lines**: Read specific line ranges with offset/limit parameters\n- **edit_file_at_line**: Make precise edits with content verification and relative line numbers\n  - Support for content verification to prevent editing outdated content\n  - Relative line numbers for easier regional editing\n  - Multiple edit actions (replace, insert_before, insert_after, delete)\n- **head_file**: Read the first N lines of a text file\n- **tail_file**: Read the last N lines of a text file\n\n### Advanced Search\n\n- **grep_files**: Search for patterns in files with powerful options\n  - Ripgrep integration for performance (with Python fallback)\n  - Fine-grained context control (like grep's -A/-B/-C options)\n  - Result pagination for large search results\n  - RegEx support with case sensitivity and whole word options\n- **search_files**: Search for files matching patterns with content search\n- **directory_tree**: Get a recursive tree view of files and directories\n\n### Analytics and Reporting\n\n- **calculate_directory_size**: Calculate the total size of a directory\n- **find_duplicate_files**: Find duplicate files by comparing content\n- **compare_files**: Compare two text files and show differences\n- **find_large_files**: Find files larger than a specified size\n- **find_empty_directories**: Find empty directories\n\n## Usage Examples\n\n### Reading File Lines\n\n```\nTool: read_file_lines\nArguments: {\n  \"path\": \"/path/to/file.txt\",\n  \"offset\": 99,        # 0-based indexing (line 100)\n  \"limit\": 51,         # Read 51 lines\n  \"encoding\": \"utf-8\"  # Optional encoding\n}\n```\n\n### Searching for Content with Grep\n\n```\nTool: grep_files\nArguments: {\n  \"path\": \"/path/to/search\",\n  \"pattern\": \"function\\\\s+\\\\w+\\\\(\",\n  \"is_regex\": true,\n  \"context_before\": 2,       # Show 2 lines before each match (like grep -B)\n  \"context_after\": 5,        # Show 5 lines after each match (like grep -A)\n  \"include_patterns\": [\"*.js\", \"*.ts\"],\n  \"results_offset\": 0,       # Start from the first match\n  \"results_limit\": 20        # Show at most 20 matches\n}\n```\n\n### Line-Targeted Editing\n\n```\nTool: edit_file_at_line\nArguments: {\n  \"path\": \"/path/to/file.txt\",\n  \"line_edits\": [\n    {\n      \"line_number\": 15,\n      \"action\": \"replace\",\n      \"content\": \"This is the new content for line 15\\n\",\n      \"expected_content\": \"Original content of line 15\\n\" # Verify content before editing\n    },\n    {\n      \"line_number\": 20,\n      \"action\": \"delete\"\n    }\n  ],\n  \"offset\": 0,                           # Start considering lines from this offset\n  \"relative_line_numbers\": false,        # Whether line numbers are relative to offset\n  \"abort_on_verification_failure\": true, # Stop on verification failure\n  \"dry_run\": true                        # Preview changes without applying\n}\n```\n\n### Finding Duplicate Files\n\n```\nTool: find_duplicate_files\nArguments: {\n  \"path\": \"/path/to/search\",\n  \"recursive\": true,\n  \"min_size\": 1024,\n  \"format\": \"text\"\n}\n```\n\n## Efficient Workflow for Large Files and Filesystems\n\nMCP-Filesystem is designed for intelligent interaction with large files and complex filesystems:\n\n1. **Smart Context Discovery**\n   - Use `grep_files` to find exactly what you need with precise context control\n   - Fine-grained control over context lines before/after matches prevents token waste\n   - Paginate through large result sets efficiently without overwhelming token limits\n   - Ripgrep integration handles massive filesystems with millions of files and lines\n\n2. **Targeted Reading**\n   - Examine only relevant sections with `read_file_lines` using offset/limit\n   - Zero-based indexing with simple offset/limit parameters for precise content retrieval\n   - Control exactly how many lines to read to maximize token efficiency\n   - Read multiple files simultaneously to reduce round-trips\n\n3. **Precise Editing**\n   - Make targeted edits with `edit_file_at_line` with content verification\n   - Verify content hasn't changed before editing to prevent conflicts\n   - Use relative line numbers for regional editing in complex files\n   - Multiple edit actions in a single operation for complex changes\n   - Dry-run capability to preview changes before applying\n\n4. **Advanced Analysis**\n   - Use specialized tools like `find_duplicate_files` and `compare_files`\n   - Generate directory trees with `directory_tree` for quick navigation\n   - Identify problematic areas with `find_large_files` and `find_empty_directories`\n\nThis workflow is particularly valuable for AI-powered tools that need to work with large files and filesystems. For example, Claude and other advanced AI assistants can leverage these capabilities to efficiently navigate codebases, analyze log files, or work with any large text-based datasets while maintaining token efficiency.\n\n## Advantages Over Standard Filesystem MCP Servers\n\nUnlike basic filesystem MCP servers, MCP-Filesystem offers:\n\n1. **Token Efficiency**\n   - Smart line-targeted operations avoid loading entire files into context\n   - Pagination controls for large results prevent context overflow\n   - Precise grep with context controls (not just whole file searches)\n   - Multi-file reading reduces round-trip requests\n\n2. **Intelligent Editing**\n   - Content verification to prevent edit conflicts\n   - Line-targeted edits that don't require the entire file\n   - Relative line number support for easier regional editing\n   - Dry-run capability to preview changes before applying\n\n3. **Advanced Search**\n   - Ripgrep integration for massive filesystem performance\n   - Context-aware results (not just matches)\n   - Fine-grained control over what gets returned\n   - Pattern-based file finding with exclusion support\n\n4. **Additional Utilities**\n   - File comparison and deduplication\n   - Directory size calculation and analysis\n   - Empty directory identification\n   - Tree-based directory visualization\n\n5. **Security Focus**\n   - Robust path validation and sandboxing\n   - Protection against path traversal attacks\n   - Symlink validation and security\n   - Detailed error reporting without sensitive exposure\n\n## Known Issues and Limitations\n\n- **Path Resolution**: Always use absolute paths for the most consistent results. Relative paths might be interpreted relative to the server's working directory rather than the allowed directories.\n- **Performance**: For large directories, operations like `find_duplicate_files` or recusrive search might take significant time to complete.\n- **Permission Handling**: The server operates with the same permissions as the user running it. Make sure the server has appropriate permissions for the directories it needs to access.\n\n## Security\n\nThe server enforces strict path validation to prevent access outside allowed directories:\n\n- Only allows operations within explicitly allowed directories\n- Provides protection against path traversal attacks\n- Validates symlinks to ensure they don't point outside allowed directories\n- Returns meaningful error messages without exposing sensitive information\n\n## Performance Considerations\n\nFor best performance with grep functionality:\n\n- Install [ripgrep](https://github.com/BurntSushi/ripgrep#installation) (`rg`)\n- The server automatically uses ripgrep if available, with a Python fallback\n\n## License\n\n[MIT License](LICENSE)\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "filesystems",
        "files",
        "file management",
        "mcp filesystem",
        "files securely"
      ],
      "category": "file-management"
    },
    "samuelgursky--davinci-resolve-mcp": {
      "owner": "samuelgursky",
      "name": "davinci-resolve-mcp",
      "url": "https://github.com/samuelgursky/davinci-resolve-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/samuelgursky.webp",
      "description": "Connects AI coding assistants to DaVinci Resolve for managing video editing projects, timelines, and media through natural language queries. Enables seamless control and interaction within the DaVinci Resolve environment.",
      "stars": 321,
      "forks": 31,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-03T13:15:15Z",
      "readme_content": "# DaVinci Resolve MCP Server\n\n[![Version](https://img.shields.io/badge/version-1.3.8-blue.svg)](https://github.com/samuelgursky/davinci-resolve-mcp/releases)\n[![DaVinci Resolve](https://img.shields.io/badge/DaVinci%20Resolve-18.5+-darkred.svg)](https://www.blackmagicdesign.com/products/davinciresolve)\n[![Python](https://img.shields.io/badge/python-3.6+-green.svg)](https://www.python.org/downloads/)\n[![macOS](https://img.shields.io/badge/macOS-stable-brightgreen.svg)](https://www.apple.com/macos/)\n[![Windows](https://img.shields.io/badge/Windows-stable-brightgreen.svg)](https://www.microsoft.com/windows)\n[![License](https://img.shields.io/badge/license-MIT-blue.svg)](https://opensource.org/licenses/MIT)\n\nA Model Context Protocol (MCP) server that connects AI coding assistants (Cursor, Claude Desktop) to DaVinci Resolve, enabling them to query and control DaVinci Resolve through natural language.\n\n## Features\n\nFor a comprehensive list of implemented and planned features, see [docs/FEATURES.md](docs/FEATURES.md).\n\n## Requirements\n\n- **macOS** or **Windows** with DaVinci Resolve installed\n- **Python 3.6+**\n- DaVinci Resolve running in the background\n- (Optional) Node.js/npm for some features\n\n## Installation Guide\n\nFor detailed installation instructions, please see [INSTALL.md](INSTALL.md). This guide covers:\n- Prerequisites and system requirements\n- Step-by-step installation process\n- Configuration details\n- Common troubleshooting steps\n\n## Platform Support\n\n| Platform | Status | One-Step Install | Quick Start |\n|----------|--------|------------------|-------------|\n| macOS | ✅ Stable | `./install.sh` | `./run-now.sh` |\n| Windows | ✅ Stable | `install.bat` | `run-now.bat` |\n| Linux | ❌ Not supported | N/A | N/A |\n\n## Quick Start Guide\n\n### New One-Step Installation (Recommended)\n\nThe easiest way to get started is with our new unified installation script. This script does everything automatically:\n\n- Clone the repository:\n   ```bash\n   git clone https://github.com/samuelgursky/davinci-resolve-mcp.git\n   cd davinci-resolve-mcp\n   ```\n\n- Make sure DaVinci Resolve Studio is installed and running\n\n- Run the installation script:\n   **macOS/Linux:**\n   ```bash\n   ./install.sh\n   ```\n   \n   **Windows:**\n   ```batch\n   install.bat\n   ```\n\nThis will:\n1. Automatically detect the correct paths on your system\n2. Create a Python virtual environment\n3. Install the MCP SDK from the official repository\n4. Set up environment variables\n5. Configure Cursor/Claude integration \n6. Verify the installation is correct\n7. Optionally start the MCP server\n\n### Alternative Quick Start\n\nYou can also use the original quick start scripts:\n\n**Windows Users:**\n```bash\nrun-now.bat\n``` \n\n**macOS Users:**\n```bash\nchmod +x run-now.sh\n./run-now.sh\n```\n\n## Configuration\n\nFor configuration of DaVinci Resolve MCP with different AI assistant clients like Cursor or Claude, see the [config-templates](config-templates) directory.\n\n## Troubleshooting\n\nFor detailed troubleshooting guidance, refer to the [INSTALL.md](INSTALL.md#troubleshooting) file which contains solutions to common issues.\n\n### Common Issues\n\n#### Path Resolution\n- The installation scripts now use more robust path resolution, fixing issues with `run-now.sh` looking for files in the wrong locations\n- Always let the scripts determine the correct paths based on their location\n\n#### DaVinci Resolve Detection\n- We've improved the process detection to reliably find DaVinci Resolve regardless of how it appears in the process list\n- Make sure DaVinci Resolve is running before starting the MCP server\n\n#### Environment Variables\n- Make sure all required environment variables are set correctly\n- Review the log file at `scripts/cursor_resolve_server.log` for troubleshooting\n\n### Windows\n- Make sure to use forward slashes (/) in configuration files\n- Python must be installed and paths configured in configs\n- DaVinci Resolve must be running before starting the server\n\n### macOS\n- Make sure scripts have execute permissions\n- Check Console.app for any Python-related errors\n- Verify environment variables are set correctly\n- DaVinci Resolve must be running before starting the server\n\n## Support\n\nFor issues and feature requests, please use the GitHub issue tracker.\n\n## Launch Options\n\nAfter installation, you have several ways to start the server:\n\n### Client-Specific Launch Scripts\n\nThe repository includes dedicated scripts for launching with specific clients:\n\n```bash\n# For Cursor integration (macOS)\nchmod +x scripts/mcp_resolve-cursor_start\n./scripts/mcp_resolve-cursor_start\n\n# For Claude Desktop integration (macOS)\nchmod +x scripts/mcp_resolve-claude_start\n./scripts/mcp_resolve-claude_start\n```\n\nThese specialized scripts:\n- Set up the proper environment for each client\n- Verify DaVinci Resolve is running\n- Configure client-specific settings\n- Start the MCP server with appropriate parameters\n\n### Pre-Launch Check\n\nBefore connecting AI assistants, verify your environment is properly configured:\n\n```bash\n# On macOS\n./scripts/check-resolve-ready.sh\n\n# On Windows\n./scripts/check-resolve-ready.bat\n```\n\nThese scripts will:\n- Verify DaVinci Resolve is running (and offer to start it)\n- Check environment variables are properly set\n- Ensure the Python environment is configured correctly\n- Validate Cursor/Claude configuration\n- Optionally launch Cursor\n\n### Universal Launcher\n\nFor advanced users, our unified launcher provides full control over both Cursor and Claude Desktop servers:\n\n```bash\n# Make the script executable (macOS only)\nchmod +x scripts/mcp_resolve_launcher.sh\n\n# Run in interactive mode\n./scripts/mcp_resolve_launcher.sh\n\n# Or use command line options\n./scripts/mcp_resolve_launcher.sh --start-cursor    # Start Cursor server (uses mcp_resolve-cursor_start)\n./scripts/mcp_resolve_launcher.sh --start-claude    # Start Claude Desktop server (uses mcp_resolve-claude_start)\n./scripts/mcp_resolve_launcher.sh --start-both      # Start both servers\n./scripts/mcp_resolve_launcher.sh --stop-all        # Stop all running servers\n./scripts/mcp_resolve_launcher.sh --status          # Show server status\n```\n\nAdditional options:\n- Force mode (skip Resolve running check): `--force`\n- Project selection: `--project \"Project Name\"`\n\n## Full Installation\n\nFor a complete manual installation:\n\n1. Clone this repository:\n   ```bash\n   git clone https://github.com/samuelgursky/davinci-resolve-mcp.git\n   cd davinci-resolve-mcp\n   ```\n\n2. Create a Python virtual environment:\n   ```bash\n   # Create virtual environment\n   python -m venv venv\n   \n   # Activate it\n   # On macOS/Linux:\n   source venv/bin/activate\n   # On Windows:\n   venv\\Scripts\\activate\n   \n   # Install dependencies from requirements.txt\n   pip install -r requirements.txt\n   \n   # Alternatively, install MCP SDK directly\n   pip install git+https://github.com/modelcontextprotocol/python-sdk.git\n   ```\n\n3. Set up DaVinci Resolve scripting environment variables:\n\n   **For macOS**:\n   ```bash\n   export RESOLVE_SCRIPT_API=\"/Library/Application Support/Blackmagic Design/DaVinci Resolve/Developer/Scripting\"\n   export RESOLVE_SCRIPT_LIB=\"/Applications/DaVinci Resolve/DaVinci Resolve.app/Contents/Libraries/Fusion/fusionscript.so\"\n   export PYTHONPATH=\"$PYTHONPATH:$RESOLVE_SCRIPT_API/Modules/\"\n   ```\n\n   **For Windows**:\n   ```cmd\n   set RESOLVE_SCRIPT_API=C:\\ProgramData\\Blackmagic Design\\DaVinci Resolve\\Support\\Developer\\Scripting\n   set RESOLVE_SCRIPT_LIB=C:\\Program Files\\Blackmagic Design\\DaVinci Resolve\\fusionscript.dll\n   set PYTHONPATH=%PYTHONPATH%;%RESOLVE_SCRIPT_API%\\Modules\n   ```\n   \n   Alternatively, run the pre-launch check script which will set these for you:\n   ```\n   # On macOS\n   ./scripts/check-resolve-ready.sh\n   \n   # On Windows\n   ./scripts/check-resolve-ready.bat\n   ```\n\n4. Configure Cursor to use the server by creating a configuration file:\n\n   **For macOS** (`~/.cursor/mcp.json`):\n   ```json\n   {\n     \"mcpServers\": {\n       \"davinci-resolve\": {\n         \"name\": \"DaVinci Resolve MCP\",\n         \"command\": \"/path/to/your/venv/bin/python\",\n         \"args\": [\n           \"/path/to/your/davinci-resolve-mcp/src/main.py\"\n         ]\n       }\n     }\n   }\n   ```\n\n   **For Windows** (`%APPDATA%\\Cursor\\mcp.json`):\n   ```json\n   {\n     \"mcpServers\": {\n       \"davinci-resolve\": {\n         \"name\": \"DaVinci Resolve MCP\",\n         \"command\": \"C:\\\\path\\\\to\\\\venv\\\\Scripts\\\\python.exe\",\n         \"args\": [\"C:\\\\path\\\\to\\\\davinci-resolve-mcp\\\\src\\\\main.py\"]\n       }\n     }\n   }\n   ```\n\n5. Start the server using one of the client-specific scripts:\n   ```bash\n   # For Cursor\n   ./scripts/mcp_resolve-cursor_start\n   \n   # For Claude Desktop\n   ./scripts/mcp_resolve-claude_start\n   ```\n\n## Usage with AI Assistants\n\n### Using with Cursor\n\n1. Start the Cursor server using the dedicated script:\n   ```bash\n   ./scripts/mcp_resolve-cursor_start\n   ```\n   Or use the universal launcher:\n   ```bash\n   ./scripts/mcp_resolve_launcher.sh --start-cursor\n   ```\n\n2. Start Cursor and open a project.\n\n3. In Cursor's AI chat, you can now interact with DaVinci Resolve. Try commands like:\n   - \"What version of DaVinci Resolve is running?\"\n   - \"List all projects in DaVinci Resolve\"\n   - \"Create a new timeline called 'My Sequence'\"\n   - \"Add a marker at the current position\"\n\n### Using with Claude Desktop\n\n1. Create a `claude_desktop_config.json` file in your Claude Desktop configuration directory using the template in the `config-templates` directory.\n\n2. Run the Claude Desktop server using the dedicated script:\n   ```bash\n   ./scripts/mcp_resolve-claude_start\n   ```\n   Or use the universal launcher:\n   ```bash\n   ./scripts/mcp_resolve_launcher.sh --start-claude\n   ```\n\n3. In Claude Desktop, you can now interact with DaVinci Resolve using the same commands as with Cursor.\n\n## Available Features\n\n### General\n- Get DaVinci Resolve version\n- Get/switch current page (Edit, Color, Fusion, etc.)\n\n### Project Management\n- List available projects\n- Get current project name\n- Open project by name\n- Create new project\n- Save current project\n\n### Timeline Operations\n- List all timelines\n- Get current timeline info\n- Create new timeline\n- Switch to timeline by name\n- Add marker to timeline\n\n### Media Pool Operations\n- List media pool clips\n- Import media file\n- Create media bin\n- Add clip to timeline\n\n## Windows Support Notes\n\nWindows support is stable in v1.3.3 and should not require additional troubleshooting:\n- Ensure DaVinci Resolve is installed in the default location\n- Environment variables are properly set as described above\n- Windows paths may require adjustment based on your installation\n- For issues, please check the logs in the `logs/` directory\n\n## Troubleshooting\n\n### DaVinci Resolve Connection\nMake sure DaVinci Resolve is running before starting the server. If the server can't connect to Resolve, check that:\n\n1. Your environment variables are set correctly\n2. You have the correct paths for your DaVinci Resolve installation\n3. You have restarted your terminal after setting environment variables\n\n## Project Structure\n\n```\ndavinci-resolve-mcp/\n├── README.md               # This file\n├── docs/                   # Documentation\n│   ├── FEATURES.md         # Feature list and status\n│   ├── CHANGELOG.md        # Version history\n│   ├── VERSION.md          # Version information\n│   ├── TOOLS_README.md     # Tools documentation\n│   ├── PROJECT_MCP_SETUP.md # Project setup guide\n│   └── COMMIT_MESSAGE.txt  # Latest commit information\n├── config-templates/       # Configuration templates\n│   ├── sample_config.json  # Example configuration\n│   ├── cursor-mcp-example.json # Cursor config example\n│   └── mcp-project-template.json # MCP project template\n├── scripts/                # Utility scripts\n│   ├── tests/              # Test scripts\n│   │   ├── benchmark_server.py # Performance tests\n│   │   ├── test_improvements.py # Test scripts\n│   │   ├── test_custom_timeline.py # Timeline tests\n│   │   ├── create_test_timeline.py # Create test timeline\n│   │   ├── test-after-restart.sh # Test after restart (Unix)\n│   │   └── test-after-restart.bat # Test after restart (Windows)\n│   ├── batch_automation.py # Batch automation script\n│   ├── restart-server.sh   # Server restart script (Unix)\n│   ├── restart-server.bat  # Server restart script (Windows)\n│   ├── run-now.sh          # Quick start script (Unix)\n│   └── run-now.bat         # Quick start script (Windows)\n├── resolve_mcp_server.py   # Main server implementation\n├── src/                    # Source code\n│   ├── api/                # API implementation\n│   ├── features/           # Feature modules\n│   └── utils/              # Utility functions\n├── logs/                   # Log files\n├── tools/                  # Development tools\n├── assets/                 # Project assets\n└── examples/               # Example code\n```\n\n## License\n\nMIT\n\n## Acknowledgments\n\n- Blackmagic Design for DaVinci Resolve and its API\n- The MCP protocol team for enabling AI assistant integration\n\n## Author\n\nSamuel Gursky (samgursky@gmail.com)\n- GitHub: [github.com/samuelgursky](https://github.com/samuelgursky)\n\n## Future Plans\n\n- Windows and Linux support\n- Additional DaVinci Resolve features\n- Support for Claude Desktop\n\n## Development\n\nIf you'd like to contribute, please check the feature checklist in the repo and pick an unimplemented feature to work on. The code is structured with clear sections for different areas of functionality.\n\n## License\n\nMIT\n\n## Acknowledgments\n\n- Blackmagic Design for DaVinci Resolve and its API\n- The MCP protocol team for enabling AI assistant integration\n\n## Project Structure\n\nAfter cleanup, the project has the following structure:\n\n- `resolve_mcp_server.py` - The main MCP server implementation\n- `run-now.sh` - Quick start script that handles setup and runs the server\n- `setup.sh` - Complete setup script for installation\n- `check-resolve-ready.sh` - Pre-launch check to verify DaVinci Resolve is ready\n- `start-server.sh` - Script to start the server\n- `run-server.sh` - Simplified script to run the server directly\n\n**Key Directories:**\n- `src/` - Source code and modules\n- `assets/` - Project assets and resources\n- `logs/` - Log files directory\n- `scripts/` - Helper scripts\n\nWhen developing, it's recommended to use `./run-now.sh` which sets up the environment and launches the server in one step. \n\n## Changelog\n\nSee [docs/CHANGELOG.md](docs/CHANGELOG.md) for a detailed history of changes. \n\n### Cursor-Specific Setup\n\nWhen integrating with Cursor, follow these specific steps:\n\n1. Make sure DaVinci Resolve is running before starting Cursor\n\n2. Install required dependencies:\n   ```bash\n   # From the davinci-resolve-mcp directory:\n   pip install -r requirements.txt\n   ```\n   Note: This will install the MCP package and other dependencies automatically.\n\n3. Set up the MCP server configuration in Cursor:\n   \n   Create or edit `~/.cursor/mcp.json` on macOS (or `%USERPROFILE%\\.cursor\\mcp.json` on Windows):\n   \n   ```json\n   {\n     \"mcpServers\": {\n       \"davinci-resolve\": {\n         \"name\": \"DaVinci Resolve MCP\",\n         \"command\": \"/path/to/your/venv/bin/python\",\n         \"args\": [\n           \"/path/to/your/davinci-resolve-mcp/src/main.py\"\n         ]\n       }\n     }\n   }\n   ```\n   \n   **Important Notes:**\n   - Use `main.py` as the entry point (not `resolve_mcp_server.py`)\n   - Use absolute paths in the configuration\n\n4. Common issues:\n   - \"Client closed\" error: Check that paths are correct in mcp.json and dependencies are installed\n   - Connection problems: Make sure DaVinci Resolve is running before starting Cursor\n   - Environment variables: The main.py script will handle setting environment variables",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ai",
        "davinci",
        "coding",
        "davinci resolve",
        "assistants davinci",
        "ai coding"
      ],
      "category": "file-management"
    },
    "seanivore--mcp-file-preview": {
      "owner": "seanivore",
      "name": "mcp-file-preview",
      "url": "https://github.com/seanivore/mcp-file-preview",
      "imageUrl": "/freedevtools/mcp/pfp/seanivore.webp",
      "description": "Enables previewing and analyzing local HTML files, including capturing full-page screenshots and examining their structural elements such as headings, paragraphs, images, and links.",
      "stars": 22,
      "forks": 9,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:32:04Z",
      "readme_content": "# MCP File Preview Server\n\nA Model Context Protocol (MCP) server that provides HTML file preview and analysis capabilities. This server enables capturing full-page screenshots of local HTML files and analyzing their structure.\n\n## Features\n\n- **File Preview**: Capture full-page screenshots of HTML files with proper CSS styling\n- **Content Analysis**: Analyze HTML structure (headings, paragraphs, images, links)\n- **Local File Support**: Handle local file paths and resources\n- **Screenshot Management**: Save screenshots to a dedicated directory\n\n## Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/your-username/mcp-file-preview.git\ncd mcp-file-preview\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build the project:\n```bash\nnpm run build\n```\n\n## Configuration\n\nAdd the server to your Claude or Cline MCP settings:\n\n### Claude Desktop App\nAdd to `~/Library/Application Support/Claude/claude_desktop_config.json`:\n```json\n{\n  \"mcpServers\": {\n    \"file-preview\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-file-preview/build/index.js\"]\n    }\n  }\n}\n```\n\n### Cline VSCode Extension\nAdd to VSCode's MCP settings:\n```json\n{\n  \"mcpServers\": {\n    \"file-preview\": {\n      \"command\": \"node\",\n      \"args\": [\"/path/to/mcp-file-preview/build/index.js\"]\n    }\n  }\n}\n```\n\n## Usage\n\nThe server provides two main tools:\n\n### preview_file\nCaptures a screenshot and returns HTML content:\n```typescript\n<use_mcp_tool>\n<server_name>file-preview</server_name>\n<tool_name>preview_file</tool_name>\n<arguments>\n{\n  \"filePath\": \"/path/to/file.html\",\n  \"width\": 1024,  // optional\n  \"height\": 768   // optional\n}\n</arguments>\n</use_mcp_tool>\n```\n\nScreenshots are saved to `screenshots/` directory in the project folder.\n\n### analyze_content\nAnalyzes HTML structure:\n```typescript\n<use_mcp_tool>\n<server_name>file-preview</server_name>\n<tool_name>analyze_content</tool_name>\n<arguments>\n{\n  \"filePath\": \"/path/to/file.html\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\nReturns counts of:\n- Headings\n- Paragraphs\n- Images\n- Links\n\n## Development\n\n1. Install dependencies:\n```bash\nnpm install @modelcontextprotocol/sdk puppeteer typescript @types/node @types/puppeteer\n```\n\n2. Make changes in `src/`\n3. Build:\n```bash\nnpm run build\n```\n4. Test locally:\n```bash\nnpm run dev\n```\n\n## Implementation Details\n\nThe server uses the MCP SDK's Server class with proper initialization:\n\n```typescript\nthis.server = new Server(\n  // Metadata object\n  {\n    name: 'file-preview-server',\n    version: '0.1.0'\n  },\n  // Options object with capabilities\n  {\n    capabilities: {\n      tools: {\n        preview_file: {\n          description: 'Preview local HTML file and capture screenshot',\n          inputSchema: {\n            // ... schema definition\n          }\n        }\n      }\n    }\n  }\n);\n```\n\nKey points:\n- Server constructor takes separate metadata and options objects\n- Tools are declared in capabilities.tools\n- Each tool needs a description and inputSchema\n- Screenshots are saved to a local `screenshots/` directory\n\n## Debugging\n\n1. Use the MCP Inspector:\n```bash\nnpx @modelcontextprotocol/inspector\n```\n\n2. Connect with:\n   - Transport Type: STDIO\n   - Command: node\n   - Arguments: /path/to/build/index.js\n\n3. Check Claude OS logs if tools don't appear in the dropdown\n\n## Contributing\n\nPlease read [CONTRIBUTING.md](CONTRIBUTING.md) for details on our code of conduct and the process for submitting pull requests.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "previewing",
        "preview",
        "html",
        "file preview",
        "html files",
        "previewing analyzing"
      ],
      "category": "file-management"
    },
    "seekrays--seekchat": {
      "owner": "seekrays",
      "name": "seekchat",
      "url": "https://github.com/seekrays/seekchat",
      "imageUrl": "/freedevtools/mcp/pfp/seekrays.webp",
      "description": "An AI desktop assistant that automates tasks such as file management, data analysis, and code development while providing a modern interface with multi-language support.",
      "stars": 55,
      "forks": 9,
      "license": "Apache License 2.0",
      "language": "JavaScript",
      "updated_at": "2025-10-03T22:33:49Z",
      "readme_content": "# SeekChat\n\n<div align=\"center\">\n  \n  <h3>✨ A Sleek and Powerful AI Desktop Assistant ✨</h3>\n  <p>\n    <a href=\"https://www.seekrays.com/chat\" target=\"_blank\">Official Website</a> |\n    <a href=\"README_zh-cn.md\">中文文档</a>\n  </p>\n</div>\n\n\n[![Discord](https://img.shields.io/badge/Discord-Join%20Chat-blue?logo=discord&logoColor=white)](https://discord.gg/qcSXXmX9Gx)\n[![WeChat](https://img.shields.io/badge/WeChat-Join%20Group-brightgreen?logo=wechat&logoColor=white)](https://seekrays.com/chat/zh-cn/docs/contacts/)\n\nSeekChat supports MCP tool execution, enabling AI to directly control your computer and perform various tasks. Easily automate file management, data analysis, code development, and more, turning AI into a truly intelligent assistant.\n\n\n## ✨ Key Features\n\n- **Multiple AI Providers**: Support for various AI service providers\n- **MCP Tool Integration**: Support for [Model Context Protocol](https://github.com/mccpros/model-context-protocol) tools that enhance AI capabilities\n- **Local Storage**: Chat history is stored locally to protect your privacy\n- **Multi-language Support**: Available in English and Chinese\n- **Modern UI**: Simple and intuitive user interface\n\n## 🌠 Screenshots\n\n### Chat Interface\n\n\n### MCP Tool Settings\n\n\n## 📦 Installation\n\n### Download Pre-compiled Version\n\nVisit the [Releases](https://github.com/seekrays/seekchat/releases) page to download the latest pre-compiled version.\n\n### Build from Source\n\n```bash\n# Clone the repository\ngit clone https://github.com/seekrays/seekchat.git\ncd seekchat\n\n# Install dependencies\nnpm install\n\n# Run in development mode\nnpm run dev\n\n# Build for production\n# For macOS\nnpm run electron:build:mac\n\n# For Windows\nnpm run electron:build:win\n\n# For Linux\nnpm run electron:build:linux\n```\n\n\n## Community\n\n### Discord Community\nJoin our [Discord community](https://discord.gg/qcSXXmX9Gx) to get the latest updates and participate in product discussions.\n\n### WeChat Community\n![](https://seekrays.com/chat/images/qrcode_seekrays.jpg)\n\nAfter following our WeChat Official Account, send the message \"加群\" to join our WeChat community group and discuss with other users.\n\n## 🤝 Contributing\n\nPull Requests and Issues are welcome! If you have any suggestions or find a bug, please let us know.\n\n\n## 🙏 Acknowledgements\n\n- Thanks to all open-source project contributors\n- Thanks to the Electron and React communities\n- Special thanks to all users for their support and feedback",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "seekrays",
        "ai",
        "assistant",
        "ai desktop",
        "desktop assistant",
        "seekchat ai"
      ],
      "category": "file-management"
    },
    "sengokudaikon--aider-mcp-server": {
      "owner": "sengokudaikon",
      "name": "aider-mcp-server",
      "url": "https://github.com/sengokudaikon/aider-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/sengokudaikon.webp",
      "description": "Connects AI assistants to file editing capabilities for efficient project management, enabling users to edit, create, and manage files with integrated git status checks.",
      "stars": 34,
      "forks": 9,
      "license": "The Unlicense",
      "language": "Python",
      "updated_at": "2025-06-29T19:49:35Z",
      "readme_content": "# Aider MCP Server\n\nA Model Context Protocol (MCP) server that allows Claude and other MCP clients to connect to [Aider](https://github.com/paul-gauthier/aider) for efficient file editing capabilities.\n\n## Overview\n\nThis MCP server bridges the gap between AI assistants like Claude and Aider's powerful file editing capabilities. It provides a standardized interface through the Model Context Protocol, allowing Claude to:\n\n- Edit existing files using Aider's capabilities\n- Create new files with content\n- Extract code blocks from markdown text\n- Get git status information\n- Check Aider installation status\n- Access and use Aider's configuration system\n\n## Prerequisites\n\n- Python 3.8 or higher\n- Aider installed (`pip install aider-chat`)\n- An API key for OpenAI or Anthropic (depending on which model you want Aider to use)\n- Git repository for file editing\n\n## Installation\n\nYou can install the Aider MCP server in several ways:\n\n### Using UV (Recommended)\n\nIf you have [uv](https://github.com/astral-sh/uv) installed:\n\n```bash\n# Install uv if you don't have it\ncurl -fsSL https://astral.sh/uv/install.sh | bash\n\n# Run directly with uvx (no installation required)\nuvx aider-mcp\n```\n\n### Using PIP\n\n```bash\n# Install the package\npip install aider-mcp\n\n# Run the server\naider-mcp\n```\n\n## Usage\n\nThe Aider MCP server runs in MCP protocol mode over stdio by default, which is designed for direct integration with MCP clients like Claude Desktop and Cursor IDE.\n\n```bash\n# Run directly with uvx (recommended)\nuvx aider-mcp\n\n# With repository path specified\nuvx aider-mcp --repo-path=/path/to/your/repo\n\n# With custom Aider executable path\nuvx aider-mcp --aider-path=/path/to/aider\n\n# With environment variables\nREPO_PATH=/path/to/your/repo uvx aider-mcp\n```\n\n### Command Line Options\n\nYou can customize the server with these environment variables or command-line arguments:\n\n- `--aider-path`: Path to the Aider executable (default: \"aider\", automatically searches PATH)\n- `--repo-path`: Path to the git repository (default: current directory)\n- `--config-file`: Path to a custom Aider config file\n- `--env-file`: Path to a custom .env file\n- `--verbose`, `-v`: Enable verbose output\n\n## Client Configuration\n\n### Claude Desktop\n\nAdd this to your Claude Desktop configuration file:\n\n```json\n{\n  \"mcpServers\": {\n    \"aider-mcp\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"aider-mcp\",\n        \"--repo-path\", \"/path/to/your/repo\"\n      ]\n    }\n  }\n}\n```\n\n### Cursor IDE\n\nTo integrate with Cursor IDE:\n\n1. Open Cursor Settings\n2. Navigate to `Features` > `MCP Servers`\n3. Click `Add new MCP server`\n4. Enter this configuration:\n   ```\n   name: aider-mcp\n   type: command\n   command: uvx aider-mcp --repo-path=/path/to/your/repo\n   ```\n5. After configuring, ensure you're in Agent mode in the Composer to use MCP tools\n\n## Aider Configuration Support\n\nThis MCP server supports Aider's configuration system, allowing you to:\n\n1. Use configuration from `.aider.conf.yml` files in:\n   - Your home directory\n   - The git repository root\n   - The current directory\n   - A custom path specified with `--config-file`\n\n2. Use environment variables from `.env` files in:\n   - Your home directory\n   - The git repository root\n   - The current directory\n   - A custom path specified with `--env-file`\n\n3. Pass custom Aider options when editing files through the MCP tools.\n\n## Example Prompts for Claude\n\nOnce connected to Claude, you can use prompts like:\n\n- \"Edit my app.py file to add error handling to the main function\"\n- \"Create a new file called utils.py with helper functions for date formatting\"\n- \"Show me the current git status of the repository\"\n- \"Extract the Python code from this explanation and save it to a file\"\n\n## Available Tools\n\nThe MCP server provides these directory-based tools:\n\n- `edit_files`: Make targeted code changes in a specified directory \n  - Requires a directory path and detailed instructions\n  - Automatically accepts all proposed changes (uses `--yes-always`)\n  - Additional Aider options can be specified when needed\n\n- `create_files`: Create new files with content in a specified directory\n  - You can provide multiple files to create at once\n  - Optionally commit the new files to git\n\n- `git_status`: Get git status of a specified directory's repository\n  - Quick way to check for modified, added, deleted, and untracked files\n\n- `extract_code`: Extract code blocks from markdown or text\n  - Can optionally save extracted code blocks to files in a specified directory\n  - Preserves language information from code block markers\n\n- `aider_status`: Check Aider installation and environment status\n  - Verifies Aider is correctly installed and accessible\n  - Can check specific directories for configuration\n  - Reports on API keys and environment variables\n\n- `aider_config`: Get detailed Aider configuration information\n  - Shows which configuration files are being used\n  - Displays settings from all layers of configuration\n  - Reports available environment variables\n\n## Environment Variables\n\nThe server uses environment variables which can be set directly or through `.env` files:\n\n- `AIDER_PATH`: Path to the Aider executable\n- `REPO_PATH`: Path to the git repository\n- `AIDER_CONFIG_FILE`: Path to a custom Aider config file\n- `AIDER_ENV_FILE`: Path to a custom .env file\n- `AIDER_MCP_VERBOSE`: Enable verbose logging\n- `OPENAI_API_KEY`: Your OpenAI API key (if using GPT-4 with Aider)\n- `ANTHROPIC_API_KEY`: Your Anthropic API key (if using Claude with Aider)\n\n## Debugging\n\nYou can use the MCP inspector to debug the server:\n\n```bash\n# Test with MCP inspector\nnpx @modelcontextprotocol/inspector uvx aider-mcp\n\n# Test with specific repository path\nnpx @modelcontextprotocol/inspector uvx aider-mcp --repo-path=/path/to/your/repo\n\n# If running from Python package\nnpx @modelcontextprotocol/inspector python -m aider_mcp\n```\n\nThe inspector provides an interactive UI to:\n1. View available tools and their schemas\n2. Call tools with test parameters\n3. See the responses and debug issues\n\n## Development\n\nFor local development:\n\n```bash\ngit clone https://github.com/yourusername/aider-mcp-server.git\ncd aider-mcp-server\npip install -e .\n```\n\n## License\n\nUnlicense",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "git",
        "files",
        "mcp",
        "file management",
        "aider mcp",
        "integrated git"
      ],
      "category": "file-management"
    },
    "sergey-fintech--MCP": {
      "owner": "sergey-fintech",
      "name": "MCP",
      "url": "https://github.com/sergey-fintech/MCP",
      "imageUrl": "/freedevtools/mcp/pfp/sergey-fintech.webp",
      "description": "Search for files based on specified text fragments in their names, enabling efficient file retrieval based on keywords.",
      "stars": 0,
      "forks": 4,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-05T10:05:37Z",
      "readme_content": "# MCP Серверы\n\nЭтот репозиторий содержит два MCP (Model Context Protocol) сервера:\n1. File Finder MCP - для поиска файлов\n2. Whisper STT MCP - для преобразования речи в текст\n\n## File Finder MCP Server\n\nЭто сервер Model Context Protocol (MCP), который предоставляет функциональность поиска файлов. Он позволяет искать файлы, содержащие указанный текстовый фрагмент в их именах.\n\n### Предварительные требования\n\n- Node.js (версия 14 или выше)\n- npm (версия 6 или выше)\n- Python 3.6 или выше (для HTTP сервера)\n\n### Установка\n\n1. Клонируйте или скачайте этот репозиторий\n2. Перейдите в директорию проекта\n3. Установите зависимости:\n   ```\n   npm install\n   ```\n4. Соберите проект:\n   ```\n   npm run build\n   ```\n\n### Запуск сервера\n\nПроект предоставляет несколько вариантов запуска MCP сервера:\n\n#### Вариант 1: Прямой запуск MCP сервера\n\nВы можете запустить MCP сервер напрямую с помощью Node.js:\n\n```\nnpm start\n```\n\nили\n\n```\nnode build/index.js\n```\n\nЭто запустит сервер, и он будет ожидать JSON-RPC запросы на stdin/stdout.\n\n#### Вариант 2: Запуск HTTP сервера и MCP прокси\n\nЭтот вариант использует Python HTTP сервер и MCP прокси, который перенаправляет запросы к HTTP серверу:\n\n1. Сначала запустите HTTP сервер:\n   ```\n   npm run start:python\n   ```\n   или\n   ```\n   python main.py\n   ```\n\n2. Затем в другом терминале запустите MCP прокси:\n   ```\n   npm run start:http\n   ```\n   или\n   ```\n   node build/index-http.js\n   ```\n\n#### Вариант 3: Интеграция с VS Code (расширение Cline)\n\nДля интеграции сервера с VS Code и расширением Cline:\n\n1. Найдите файл настроек MCP:\n   - Windows: `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`\n   - macOS: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n   - Linux: `~/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n\n2. Добавьте следующую конфигурацию в объект `mcpServers` в файле настроек:\n\n```json\n\"file-finder-mcp\": {\n  \"command\": \"node\",\n  \"args\": [\"<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>/build/index.js\"],\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nДля использования HTTP прокси:\n\n```json\n\"file-finder-mcp-http\": {\n  \"command\": \"node\",\n  \"args\": [\"<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>/build/index-http.js\"],\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nЗамените `<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>` на фактический путь к директории вашего проекта.\n\n3. Перезапустите VS Code для загрузки обновленных настроек.\n\n### Доступные инструменты\n\nMCP сервер предоставляет один инструмент:\n\n- `search_files`: Ищет файлы, содержащие указанный фрагмент в их именах\n  - Параметры:\n    - `fragment` (строка, обязательный): Текстовый фрагмент для поиска в именах файлов\n\n### Пример использования\n\n```\n<use_mcp_tool>\n<server_name>file-finder-mcp</server_name>\n<tool_name>search_files</tool_name>\n<arguments>\n{\n  \"fragment\": \".py\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\nЭтот пример ищет все файлы, содержащие \".py\" в их именах.\n\n### HTTP сервер (main.py)\n\nВ корневой директории проекта находится файл `main.py`, который реализует HTTP сервер для поиска файлов. Этот сервер предоставляет REST API для поиска файлов, содержащих указанный фрагмент в их именах.\n\n#### Запуск HTTP сервера\n\n1. Перейдите в корневую директорию проекта\n2. Запустите сервер с помощью Python:\n   ```\n   python main.py\n   ```\n3. Сервер будет запущен на http://localhost:8080\n\n#### Использование API\n\nДля поиска файлов отправьте GET запрос на `/search` с параметром запроса `q`:\n\n```\nhttp://localhost:8080/search?q=.json\n```\n\nЭтот запрос вернет JSON-массив с информацией о всех файлах, содержащих \".json\" в их именах. Каждый элемент массива содержит следующие поля:\n- `name`: имя файла\n- `path`: абсолютный путь к файлу\n- `size`: размер файла в байтах\n- `created`: дата и время создания файла\n\nПример ответа:\n```json\n[\n    {\n        \"name\": \"package.json\",\n        \"path\": \"/absolute/path/to/package.json\",\n        \"size\": 1234,\n        \"created\": \"Wed Feb 26 17:00:00 2025\"\n    }\n]\n```\n\n## Whisper STT MCP Server\n\nЭто сервер Model Context Protocol (MCP), который предоставляет функциональность преобразования речи в текст с использованием библиотеки faster-whisper. Он позволяет транскрибировать аудиоданные в текст с автоматическим определением языка.\n\n### Предварительные требования\n\n- Node.js (версия 14 или выше)\n- npm (версия 6 или выше)\n- Python 3.6 или выше\n- faster-whisper (установите с помощью `pip install faster-whisper`)\n\n### Установка\n\n1. Клонируйте или скачайте этот репозиторий\n2. Перейдите в директорию проекта\n3. Установите зависимости:\n   ```\n   npm install\n   pip install faster-whisper\n   ```\n4. Соберите проект:\n   ```\n   npm run build\n   ```\n\n### Запуск сервера\n\nПроект предоставляет несколько вариантов запуска Whisper MCP сервера:\n\n#### Вариант 1: Прямой запуск MCP сервера\n\nВы можете запустить MCP сервер напрямую с помощью Node.js:\n\n```\nnpm run start:whisper\n```\n\nили\n\n```\nnode build/whisper-index.js\n```\n\nЭто запустит сервер, и он будет ожидать JSON-RPC запросы на stdin/stdout.\n\n#### Вариант 2: Запуск HTTP сервера и MCP прокси\n\nЭтот вариант использует Python HTTP сервер и MCP прокси, который перенаправляет запросы к HTTP серверу:\n\n1. Сначала запустите HTTP сервер:\n   ```\n   npm run start:whisper:python\n   ```\n   или\n   ```\n   python whisper_server.py\n   ```\n\n2. Затем в другом терминале запустите MCP прокси:\n   ```\n   npm run start:whisper:http\n   ```\n   или\n   ```\n   node build/whisper-index-http.js\n   ```\n\n#### Вариант 3: Интеграция с VS Code (расширение Cline)\n\nДля интеграции сервера с VS Code и расширением Cline:\n\n1. Найдите файл настроек MCP:\n   - Windows: `%APPDATA%\\Code\\User\\globalStorage\\saoudrizwan.claude-dev\\settings\\cline_mcp_settings.json`\n   - macOS: `~/Library/Application Support/Code/User/globalStorage/saoudrizwan.claude-dev/settings\\cline_mcp_settings.json`\n   - Linux: `~/.config/Code/User/globalStorage/saoudrizwan.claude-dev/settings/cline_mcp_settings.json`\n\n2. Добавьте следующую конфигурацию в объект `mcpServers` в файле настроек:\n\n```json\n\"whisper-stt-mcp\": {\n  \"command\": \"node\",\n  \"args\": [\"<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>/build/whisper-index.js\"],\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nДля использования HTTP прокси:\n\n```json\n\"whisper-stt-mcp-http\": {\n  \"command\": \"node\",\n  \"args\": [\"<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>/build/whisper-index-http.js\"],\n  \"disabled\": false,\n  \"autoApprove\": []\n}\n```\n\nЗамените `<ПОЛНЫЙ_ПУТЬ_К_ПРОЕКТУ>` на фактический путь к директории вашего проекта.\n\n3. Перезапустите VS Code для загрузки обновленных настроек.\n\n### Доступные инструменты\n\nMCP сервер предоставляет один инструмент:\n\n- `transcribe_audio`: Преобразует аудиоданные в текст с использованием faster-whisper\n  - Параметры:\n    - `audio_base64` (строка, обязательный): Аудиоданные в формате base64\n    - `language` (строка, необязательный): Код языка (например, \"en\", \"ru\"). Если не указан, язык будет определен автоматически.\n\n### Пример использования\n\n```\n<use_mcp_tool>\n<server_name>whisper-stt-mcp</server_name>\n<tool_name>transcribe_audio</tool_name>\n<arguments>\n{\n  \"audio_base64\": \"BASE64_ENCODED_AUDIO_DATA\",\n  \"language\": \"ru\"\n}\n</arguments>\n</use_mcp_tool>\n```\n\nЭтот пример преобразует аудиоданные в текст, предполагая, что аудио на русском языке.\n\n### HTTP сервер (whisper_server.py)\n\nВ корневой директории проекта находится файл `whisper_server.py`, который реализует HTTP сервер для преобразования речи в текст. Этот сервер предоставляет REST API для транскрибирования аудиоданных в текст.\n\n#### Запуск HTTP сервера\n\n1. Перейдите в корневую директорию проекта\n2. Запустите сервер с помощью Python:\n   ```\n   python whisper_server.py\n   ```\n3. Сервер будет запущен на http://localhost:8081\n\n#### Использование API\n\nДля транскрибирования аудио отправьте POST запрос на `/transcribe` с JSON-телом, содержащим:\n- `audio`: строка в формате base64, содержащая аудиоданные\n- `language` (необязательно): код языка (например, \"en\", \"ru\")\n\nПример запроса:\n```json\n{\n  \"audio\": \"BASE64_ENCODED_AUDIO_DATA\",\n  \"language\": \"ru\"\n}\n```\n\nОтвет будет содержать:\n- `text`: полный транскрибированный текст\n- `segments`: массив сегментов с временными метками\n- `language`: определенный язык\n- `language_probability`: вероятность определения языка\n\nПример ответа:\n```json\n{\n  \"text\": \"Это пример транскрибированного текста.\",\n  \"segments\": [\n    {\n      \"start\": 0.0,\n      \"end\": 2.5,\n      \"text\": \"Это пример\"\n    },\n    {\n      \"start\": 2.5,\n      \"end\": 4.0,\n      \"text\": \"транскрибированного текста.\"\n    }\n  ],\n  \"language\": \"ru\",\n  \"language_probability\": 0.98\n}\n```\n\n## Устранение неполадок\n\n- Если вы получаете ошибку \"No connection found for server\", убедитесь, что вы перезапустили VS Code после обновления настроек MCP.\n- Если сервер не отвечает, проверьте, что путь в настройках MCP правильный и указывает на собранный JavaScript файл.\n- Убедитесь, что сервер правильно собран, выполнив `npm run build` перед попыткой его использования.\n- Для использования HTTP прокси убедитесь, что соответствующий HTTP сервер запущен (на порту 8080 для file-finder или 8081 для whisper-stt).\n- Если возникают проблемы с faster-whisper, убедитесь, что библиотека правильно установлена и у вас есть необходимые зависимости для работы с GPU (если вы используете GPU).\n\n## Структура проекта\n\nНиже приведен список основных файлов проекта и их назначение:\n\n### Корневая директория\n- `src/index.ts` - Исходный код TypeScript MCP сервера для поиска файлов (прямая реализация)\n- `src/index-http.ts` - Исходный код TypeScript MCP прокси для HTTP сервера поиска файлов\n- `src/whisper-index.ts` - Исходный код TypeScript MCP сервера для преобразования речи в текст (прямая реализация)\n- `src/whisper-index-http.ts` - Исходный код TypeScript MCP прокси для HTTP сервера преобразования речи в текст\n- `build/index.js` - Скомпилированный JavaScript код MCP сервера для поиска файлов\n- `build/index-http.js` - Скомпилированный JavaScript код MCP прокси для поиска файлов\n- `build/whisper-index.js` - Скомпилированный JavaScript код MCP сервера для преобразования речи в текст\n- `build/whisper-index-http.js` - Скомпилированный JavaScript код MCP прокси для преобразования речи в текст\n- `tsconfig.json` - Конфигурация TypeScript\n- `package.json` - Описание пакета и зависимости\n- `main.py` - HTTP сервер на Python для поиска файлов\n- `whisper_server.py` - HTTP сервер на Python для преобразования речи в текст\n- `README.md` - Документация проекта (этот файл)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "retrieval",
        "search",
        "files",
        "file retrieval",
        "search files",
        "mcp search"
      ],
      "category": "file-management"
    },
    "shaike1--mcp-server-ssh": {
      "owner": "shaike1",
      "name": "mcp-server-ssh",
      "url": "https://github.com/shaike1/mcp-server-ssh",
      "imageUrl": "/freedevtools/mcp/pfp/shaike1.webp",
      "description": "Enable secure remote command execution and file operations through the SSH protocol, supporting both password and key-based authentication with detailed logging and progress tracking for file transfers.",
      "stars": 48,
      "forks": 11,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-09-24T20:36:34Z",
      "readme_content": "# MCP SSH Server\n\nA powerful SSH server implementation for Model Context Protocol (MCP). This server enables secure remote command execution and file operations through SSH protocol, supporting both password and key-based authentication.\n\n## Features\n\n- ✨ Secure SSH connection management\n- 🔑 Password and key-based authentication\n- 💻 Remote command execution\n- 📁 File operations (upload/download)\n- 📊 Progress tracking for file transfers\n- 🔐 Permission management\n- 📂 Directory operations\n- 🚀 Bulk file transfers\n- 📝 Detailed logging\n\n## Installation\n\n1. Install the package:\n```bash\nnpm install mcp-ssh\n```\n\n2. Add to your Claude desktop config (`claude_desktop_config.json`):\n```json\n{\n  \"mcpServers\": {\n    \"ssh\": {\n      \"command\": \"node\",\n      \"args\": [\"%APPDATA%/npm/node_modules/mcp-ssh/dist/server.js\"],\n      \"env\": {\n        \"SSH_PORT\": \"8889\",\n        \"SSH_LOG_LEVEL\": \"info\"\n      }\n    }\n  }\n}\n\n```\n\n## Usage\n\n### Password Authentication\n```powershell\n$body = @{\n    id = \"test\"\n    host = \"example.com\"\n    port = 22\n    username = \"user\"\n    password = \"pass123\"\n} | ConvertTo-Json\n\nInvoke-RestMethod -Uri \"http://localhost:8889/connect\" -Method Post -Body $body -ContentType \"application/json\"\n```\n\n### Key Authentication\n```powershell\n$body = @{\n    id = \"test\"\n    host = \"example.com\"\n    port = 22\n    username = \"user\"\n    privateKey = Get-Content ~/.ssh/id_rsa | Out-String\n    passphrase = \"optional-key-passphrase\"  # if your key is protected\n} | ConvertTo-Json\n\nInvoke-RestMethod -Uri \"http://localhost:8889/connect\" -Method Post -Body $body -ContentType \"application/json\"\n```\n\n### Execute Commands\n```powershell\n$execBody = @{\n    id = \"test\"\n    command = \"ls -la\"\n} | ConvertTo-Json\n\nInvoke-RestMethod -Uri \"http://localhost:8889/exec\" -Method Post -Body $execBody -ContentType \"application/json\"\n```\n\n### File Operations\n```powershell\n# Upload file\n$uploadForm = @{\n    file = Get-Item -Path \"localfile.txt\"\n    remotePath = \"/remote/path/file.txt\"\n}\nInvoke-RestMethod -Uri \"http://localhost:8889/upload/test\" -Method Post -Form $uploadForm\n\n# Download file\nInvoke-RestMethod -Uri \"http://localhost:8889/download/test?remotePath=/remote/path/file.txt\" -Method Get -OutFile \"downloaded.txt\"\n```\n\n### Directory Operations\n```powershell\n# List directory\nInvoke-RestMethod -Uri \"http://localhost:8889/ls/test?path=/remote/path\" -Method Get\n\n# Get connection status\nInvoke-RestMethod -Uri \"http://localhost:8889/status/test\" -Method Get\n```\n\n## Development\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/shaike1/mcp-server-ssh.git\ncd mcp-server-ssh\n```\n\n2. Install dependencies:\n```bash\nnpm install\n```\n\n3. Build:\n```bash\nnpm run build\n```\n\n4. Start server:\n```bash\nnpm start\n```\n\n## Environment Variables\n\n- `SSH_PORT`: Server port (default: 8889)\n- `SSH_LOG_LEVEL`: Logging level (default: info)\n\n## Contributing\n\n1. Fork the repository\n2. Create your feature branch (`git checkout -b feature/amazing-feature`)\n3. Commit your changes (`git commit -m 'Add some amazing feature'`)\n4. Push to the branch (`git push origin feature/amazing-feature`)\n5. Open a Pull Request\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ssh",
        "authentication",
        "mcp",
        "mcp server",
        "ssh protocol",
        "shaike1 mcp"
      ],
      "category": "file-management"
    },
    "sigoden--dufs": {
      "owner": "sigoden",
      "name": "dufs",
      "url": "https://github.com/sigoden/dufs",
      "imageUrl": "/freedevtools/mcp/pfp/sigoden.webp",
      "description": "A utility file server that simplifies file management tasks by providing functionalities for uploading, downloading, and controlling access to files. It also supports static file serving, resumable uploads, and WebDAV integration.",
      "stars": 8882,
      "forks": 454,
      "license": "Other",
      "language": "Rust",
      "updated_at": "2025-10-04T07:08:45Z",
      "readme_content": "# Dufs\n\n[![CI](https://github.com/sigoden/dufs/actions/workflows/ci.yaml/badge.svg)](https://github.com/sigoden/dufs/actions/workflows/ci.yaml)\n[![Crates](https://img.shields.io/crates/v/dufs.svg)](https://crates.io/crates/dufs)\n[![Docker Pulls](https://img.shields.io/docker/pulls/sigoden/dufs)](https://hub.docker.com/r/sigoden/dufs)\n\nDufs is a distinctive utility file server that supports static serving, uploading, searching, accessing control, webdav...\n\n![demo](https://user-images.githubusercontent.com/4012553/220513063-ff0f186b-ac54-4682-9af4-47a9781dee0d.png)\n\n## Features\n\n- Serve static files\n- Download folder as zip file\n- Upload files and folders (Drag & Drop)\n- Create/Edit/Search files\n- Resumable/partial uploads/downloads\n- Access control\n- Support https\n- Support webdav\n- Easy to use with curl\n\n## Install\n\n### With cargo\n\n```\ncargo install dufs\n```\n\n### With docker\n\n```\ndocker run -v `pwd`:/data -p 5000:5000 --rm sigoden/dufs /data -A\n```\n\n### With [Homebrew](https://brew.sh)\n\n```\nbrew install dufs\n```\n\n### Binaries on macOS, Linux, Windows\n\nDownload from [Github Releases](https://github.com/sigoden/dufs/releases), unzip and add dufs to your $PATH.\n\n## CLI\n\n```\nDufs is a distinctive utility file server - https://github.com/sigoden/dufs\n\nUsage: dufs [OPTIONS] [serve-path]\n\nArguments:\n  [serve-path]  Specific path to serve [default: .]\n\nOptions:\n  -c, --config <file>        Specify configuration file\n  -b, --bind <addrs>         Specify bind address or unix socket\n  -p, --port <port>          Specify port to listen on [default: 5000]\n      --path-prefix <path>   Specify a path prefix\n      --hidden <value>       Hide paths from directory listings, e.g. tmp,*.log,*.lock\n  -a, --auth <rules>         Add auth roles, e.g. user:pass@/dir1:rw,/dir2\n  -A, --allow-all            Allow all operations\n      --allow-upload         Allow upload files/folders\n      --allow-delete         Allow delete files/folders\n      --allow-search         Allow search files/folders\n      --allow-symlink        Allow symlink to files/folders outside root directory\n      --allow-archive        Allow download folders as archive file\n      --enable-cors          Enable CORS, sets `Access-Control-Allow-Origin: *`\n      --render-index         Serve index.html when requesting a directory, returns 404 if not found index.html\n      --render-try-index     Serve index.html when requesting a directory, returns directory listing if not found index.html\n      --render-spa           Serve SPA(Single Page Application)\n      --assets <path>        Set the path to the assets directory for overriding the built-in assets\n      --log-format <format>  Customize http log format\n      --log-file <file>      Specify the file to save logs to, other than stdout/stderr\n      --compress <level>     Set zip compress level [default: low] [possible values: none, low, medium, high]\n      --completions <shell>  Print shell completion script for <shell> [possible values: bash, elvish, fish, powershell, zsh]\n      --tls-cert <path>      Path to an SSL/TLS certificate to serve with HTTPS\n      --tls-key <path>       Path to the SSL/TLS certificate's private key\n  -h, --help                 Print help\n  -V, --version              Print version\n```\n\n## Examples\n\nServe current working directory in read-only mode\n\n```\ndufs\n```\n\nAllow all operations like upload/delete/search/create/edit...\n\n```\ndufs -A\n```\n\nOnly allow upload operation\n\n```\ndufs --allow-upload\n```\n\nServe a specific directory\n\n```\ndufs Downloads\n```\n\nServe a single file\n\n```\ndufs linux-distro.iso\n```\n\nServe a single-page application like react/vue\n\n```\ndufs --render-spa\n```\n\nServe a static website with index.html\n\n```\ndufs --render-index\n```\n\nRequire username/password\n\n```\ndufs -a admin:123@/:rw\n```\n\nListen on specific host:ip \n\n```\ndufs -b 127.0.0.1 -p 80\n```\n\nListen on unix socket\n```\ndufs -b /tmp/dufs.socket\n```\n\nUse https\n\n```\ndufs --tls-cert my.crt --tls-key my.key\n```\n\n## API\n\nUpload a file\n\n```sh\ncurl -T path-to-file http://127.0.0.1:5000/new-path/path-to-file\n```\n\nDownload a file\n```sh\ncurl http://127.0.0.1:5000/path-to-file           # download the file\ncurl http://127.0.0.1:5000/path-to-file?hash      # retrieve the sha256 hash of the file\n```\n\nDownload a folder as zip file\n\n```sh\ncurl -o path-to-folder.zip http://127.0.0.1:5000/path-to-folder?zip\n```\n\nDelete a file/folder\n\n```sh\ncurl -X DELETE http://127.0.0.1:5000/path-to-file-or-folder\n```\n\nCreate a directory\n\n```sh\ncurl -X MKCOL http://127.0.0.1:5000/path-to-folder\n```\n\nMove the file/folder to the new path\n\n```sh\ncurl -X MOVE http://127.0.0.1:5000/path -H \"Destination: http://127.0.0.1:5000/new-path\"\n```\n\nList/search directory contents\n\n```sh\ncurl http://127.0.0.1:5000?q=Dockerfile           # search for files, similar to `find -name Dockerfile`\ncurl http://127.0.0.1:5000?simple                 # output names only, similar to `ls -1`\ncurl http://127.0.0.1:5000?json                   # output paths in json format\n```\n\nWith authorization (Both basic or digest auth works)\n\n```sh\ncurl http://127.0.0.1:5000/file --user user:pass                 # basic auth\ncurl http://127.0.0.1:5000/file --user user:pass --digest        # digest auth\n```\n\nResumable downloads\n\n```sh\ncurl -C- -o file http://127.0.0.1:5000/file\n```\n\nResumable uploads\n\n```sh\nupload_offset=$(curl -I -s http://127.0.0.1:5000/file | tr -d '\\r' | sed -n 's/content-length: //p')\ndd skip=$upload_offset if=file status=none ibs=1 | \\\n  curl -X PATCH -H \"X-Update-Range: append\" --data-binary @- http://127.0.0.1:5000/file\n```\n\nHealth checks\n\n```sh\ncurl http://127.0.0.1:5000/__dufs__/health\n```\n\n<details>\n<summary><h2>Advanced Topics</h2></summary>\n\n### Access Control\n\nDufs supports account based access control. You can control who can do what on which path with `--auth`/`-a`.\n\n```\ndufs -a admin:admin@/:rw -a guest:guest@/\ndufs -a user:pass@/:rw,/dir1 -a @/\n```\n\n1. Use `@` to separate the account and paths. No account means anonymous user.\n2. Use `:` to separate the username and password of the account.\n3. Use `,` to separate paths.\n4. Use path suffix `:rw`/`:ro` set permissions: `read-write`/`read-only`. `:ro` can be omitted.\n\n- `-a admin:admin@/:rw`: `admin` has complete permissions for all paths.\n- `-a guest:guest@/`: `guest` has read-only permissions for all paths.\n- `-a user:pass@/:rw,/dir1`: `user` has read-write permissions for `/*`, has read-only permissions for `/dir1/*`.\n- `-a @/`: All paths is publicly accessible, everyone can view/download it.\n\n**Auth permissions are restricted by dufs global permissions.** If dufs does not enable upload permissions via `--allow-upload`, then the account will not have upload permissions even if it is granted `read-write`(`:rw`) permissions.\n\n#### Hashed Password\n\nDUFS supports the use of sha-512 hashed password.\n\nCreate hashed password:\n\n```sh\n$ openssl passwd -6 123456 # or `mkpasswd -m sha-512 123456`\n$6$tWMB51u6Kb2ui3wd$5gVHP92V9kZcMwQeKTjyTRgySsYJu471Jb1I6iHQ8iZ6s07GgCIO69KcPBRuwPE5tDq05xMAzye0NxVKuJdYs/\n```\n\nUse hashed password:\n\n```sh\ndufs -a 'admin:$6$tWMB51u6Kb2ui3wd$5gVHP92V9kZcMwQeKTjyTRgySsYJu471Jb1I6iHQ8iZ6s07GgCIO69KcPBRuwPE5tDq05xMAzye0NxVKuJdYs/@/:rw'\n```\n> The hashed password contains `$6`, which can expand to a variable in some shells, so you have to use **single quotes** to wrap it.\n\nTwo important things for hashed passwords:\n\n1. Dufs only supports sha-512 hashed passwords, so ensure that the password string always starts with `$6$`.\n2. Digest authentication does not function properly with hashed passwords.\n\n\n### Hide Paths\n\nDufs supports hiding paths from directory listings via option `--hidden <glob>,...`.\n\n```\ndufs --hidden .git,.DS_Store,tmp\n```\n\n> The glob used in --hidden only matches file and directory names, not paths. So `--hidden dir1/file` is invalid.\n\n```sh\ndufs --hidden '.*'                          # hidden dotfiles\ndufs --hidden '*/'                          # hidden all folders\ndufs --hidden '*.log,*.lock'                # hidden by exts\ndufs --hidden '*.log' --hidden '*.lock'\n```\n\n### Log Format\n\nDufs supports customize http log format with option `--log-format`.\n\nThe log format can use following variables.\n\n| variable     | description                                                               |\n| ------------ | ------------------------------------------------------------------------- |\n| $remote_addr | client address                                                            |\n| $remote_user | user name supplied with authentication                                    |\n| $request     | full original request line                                                |\n| $status      | response status                                                           |\n| $http_       | arbitrary request header field. examples: $http_user_agent, $http_referer |\n\n\nThe default log format is `'$remote_addr \"$request\" $status'`.\n```\n2022-08-06T06:59:31+08:00 INFO - 127.0.0.1 \"GET /\" 200\n```\n\nDisable http log\n```\ndufs --log-format=''\n```\n\nLog user-agent\n```\ndufs --log-format '$remote_addr \"$request\" $status $http_user_agent'\n```\n```\n2022-08-06T06:53:55+08:00 INFO - 127.0.0.1 \"GET /\" 200 Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/104.0.0.0 Safari/537.36\n```\n\nLog remote-user\n```\ndufs --log-format '$remote_addr $remote_user \"$request\" $status' -a /@admin:admin -a /folder1@user1:pass1\n```\n```\n2022-08-06T07:04:37+08:00 INFO - 127.0.0.1 admin \"GET /\" 200\n```\n\n## Environment variables\n\nAll options can be set using environment variables prefixed with `DUFS_`.\n\n```\n[serve-path]                DUFS_SERVE_PATH=\".\"\n    --config <file>         DUFS_CONFIG=config.yaml\n-b, --bind <addrs>          DUFS_BIND=0.0.0.0\n-p, --port <port>           DUFS_PORT=5000\n    --path-prefix <path>    DUFS_PATH_PREFIX=/dufs\n    --hidden <value>        DUFS_HIDDEN=tmp,*.log,*.lock\n-a, --auth <rules>          DUFS_AUTH=\"admin:admin@/:rw|@/\" \n-A, --allow-all             DUFS_ALLOW_ALL=true\n    --allow-upload          DUFS_ALLOW_UPLOAD=true\n    --allow-delete          DUFS_ALLOW_DELETE=true\n    --allow-search          DUFS_ALLOW_SEARCH=true\n    --allow-symlink         DUFS_ALLOW_SYMLINK=true\n    --allow-archive         DUFS_ALLOW_ARCHIVE=true\n    --enable-cors           DUFS_ENABLE_CORS=true\n    --render-index          DUFS_RENDER_INDEX=true\n    --render-try-index      DUFS_RENDER_TRY_INDEX=true\n    --render-spa            DUFS_RENDER_SPA=true\n    --assets <path>         DUFS_ASSETS=./assets\n    --log-format <format>   DUFS_LOG_FORMAT=\"\"\n    --log-file <file>       DUFS_LOG_FILE=./dufs.log\n    --compress <compress>   DUFS_COMPRESS=low\n    --tls-cert <path>       DUFS_TLS_CERT=cert.pem\n    --tls-key <path>        DUFS_TLS_KEY=key.pem\n```\n\n## Configuration File\n\nYou can specify and use the configuration file by selecting the option `--config <path-to-config.yaml>`.\n\nThe following are the configuration items:\n\n```yaml\nserve-path: '.'\nbind: 0.0.0.0\nport: 5000\npath-prefix: /dufs\nhidden:\n  - tmp\n  - '*.log'\n  - '*.lock'\nauth:\n  - admin:admin@/:rw\n  - user:pass@/src:rw,/share\n  - '@/'  # According to the YAML spec, quoting is required.\nallow-all: false\nallow-upload: true\nallow-delete: true\nallow-search: true\nallow-symlink: true\nallow-archive: true\nenable-cors: true\nrender-index: true\nrender-try-index: true\nrender-spa: true\nassets: ./assets/\nlog-format: '$remote_addr \"$request\" $status $http_user_agent'\nlog-file: ./dufs.log\ncompress: low\ntls-cert: tests/data/cert.pem\ntls-key: tests/data/key_pkcs1.pem\n```\n\n### Customize UI\n\nDufs allows users to customize the UI with your own assets.\n\n```\ndufs --assets my-assets-dir/\n```\n\n> If you only need to make slight adjustments to the current UI, you copy dufs's [assets](https://github.com/sigoden/dufs/tree/main/assets) directory and modify it accordingly. The current UI doesn't use any frameworks, just plain HTML/JS/CSS. As long as you have some basic knowledge of web development, it shouldn't be difficult to modify.\n\nYour assets folder must contains a `index.html` file.\n\n`index.html` can use the following placeholder variables to retrieve internal data.\n\n- `__INDEX_DATA__`: directory listing data\n- `__ASSETS_PREFIX__`: assets url prefix\n\n</details>\n\n## License\n\nCopyright (c) 2022-2024 dufs-developers.\n\ndufs is made available under the terms of either the MIT License or the Apache License 2.0, at your option.\n\nSee the LICENSE-APACHE and LICENSE-MIT files for license details.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "dufs",
        "files",
        "webdav",
        "dufs utility",
        "file management",
        "file server"
      ],
      "category": "file-management"
    },
    "sirusb--samtools_mcp": {
      "owner": "sirusb",
      "name": "samtools_mcp",
      "url": "https://github.com/sirusb/samtools_mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sirusb.webp",
      "description": "Provides tools for viewing, converting, sorting, indexing, and analyzing SAM/BAM/CRAM genomic files. Facilitates efficient bioinformatics workflows with region-specific analysis and statistics generation.",
      "stars": 0,
      "forks": 1,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-05-12T12:36:19Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/sirusb-samtools-mcp-badge.png)](https://mseep.ai/app/sirusb-samtools-mcp)\n\n# SAMtools MCP (Model Control Protocol)\n\nA Model Control Protocol implementation for SAMtools, providing a standardized interface for working with SAM/BAM/CRAM files.\n\n## Features\n\n- View and convert SAM/BAM/CRAM files\n- Sort alignment files\n- Index BAM/CRAM files\n- Generate statistics\n- Merge multiple BAM files\n- Calculate read depth\n- Index FASTA files\n- And more...\n\n### Core Capabilities\n- **File Format Support**: Handle SAM (text), BAM (binary), and CRAM (compressed) alignment files\n- **Format Conversion**: Convert between SAM, BAM, and CRAM formats seamlessly\n- **Region-Specific Analysis**: Extract and analyze specific genomic regions\n- **Flag-Based Filtering**: Filter reads based on SAM flags\n- **Performance Optimization**: Multi-threaded operations for sorting and merging\n- **Statistical Analysis**: Generate comprehensive alignment statistics\n\n### Tools Overview\n\n| Tool | Description | Key Features |\n|------|-------------|--------------|\n| `view` | View and convert alignment files | - Format conversion (SAM/BAM/CRAM)<br>- Region filtering<br>- Flag-based filtering<br>- Header manipulation |\n| `sort` | Sort alignment files | - Coordinate-based sorting<br>- Name-based sorting<br>- Memory per thread control<br>- Multi-threading support |\n| `index` | Index BAM/CRAM files | - BAI index generation<br>- CSI index support<br>- CRAM index creation |\n| `merge` | Merge multiple BAM/CRAM files | - Multi-file merging<br>- Thread-enabled processing<br>- Header reconciliation |\n| `depth` | Calculate read depth | - Per-base depth calculation<br>- Region-specific analysis<br>- Multi-file support |\n| `flagstat` | Generate alignment statistics | - Comprehensive flag statistics<br>- Quality checks<br>- Paired-end metrics |\n| `idxstats` | BAM/CRAM index statistics | - Reference sequence stats<br>- Mapped/unmapped counts<br>- Length information |\n| `faidx` | Index FASTA files | - FASTA indexing<br>- Region extraction<br>- Sequence retrieval |\n\n\n## Installation\n\n### Using Docker (Recommended)\n\nThe easiest way to use SAMtools MCP is through Docker:\n\n```bash\n# Pull the Docker image\ndocker pull nadhir/samtools-mcp:latest\n\n# Run the container\ndocker run -it --rm nadhir/samtools-mcp:latest\n\n# To process BAM files, mount a volume:\ndocker run -it --rm -v /path/to/your/bam/files:/data nadhir/samtools-mcp:latest\n```\n\n### Local Installation\n\n1. Clone the repository:\n```bash\ngit clone https://github.com/your-username/samtools_mcp.git\ncd samtools_mcp\n```\n\n2. Install dependencies:\n```bash\npip install uv\nuv pip install -r requirements.txt\n```\n\n## Configuration\n\n### MCP Server Configuration\n\nTo configure the MCP server to use the Docker image, add the following to your MCP configuration file:\n\n```json\n{\n  \"servers\": {\n    \"samtools\": {\n      \"type\": \"docker\",\n      \"image\": \"nadhir/samtools-mcp:latest\",\n      \"volumes\": [\n        {\n          \"source\": \"/path/to/your/data\",\n          \"target\": \"/data\"\n        }\n      ]\n    }\n  }\n}\n```\n\n### Local MCP Configuration\n\nTo configure the MCP to run using `uv`, add the following to your `~/.cursor/mcp.json`:\n\n```json\n{\n  \"samtools_mcp\": {\n    \"command\": \"uv\",\n    \"args\": [\"run\", \"--with\", \"fastmcp\", \"fastmcp\", \"run\", \"/path/to/samtools_mcp.py\"]\n  }\n}\n```\n\nReplace `/path/to/samtools_mcp.py` with the actual path to your `samtools_mcp.py` file.\n\n## Usage\n\n### Basic Commands\n\n1. View BAM file:\n```python\nfrom samtools_mcp import SamtoolsMCP\n\nmcp = SamtoolsMCP()\nresult = mcp.view(input_file=\"/data/example.bam\")\n```\n\n2. Sort BAM file:\n```python\nresult = mcp.sort(input_file=\"/data/example.bam\", output_file=\"/data/sorted.bam\")\n```\n\n3. Index BAM file:\n```python\nresult = mcp.index(input_file=\"/data/sorted.bam\")\n```\n\n### Advanced Usage\n\n1. View specific region with flags:\n```python\nresult = mcp.view(\n    input_file=\"/data/example.bam\",\n    region=\"chr1:1000-2000\",\n    flags_required=\"0x2\",\n    output_format=\"SAM\"\n)\n```\n\n2. Sort by read name:\n```python\nresult = mcp.sort(\n    input_file=\"/data/example.bam\",\n    output_file=\"/data/namesorted.bam\",\n    sort_by_name=True\n)\n```\n\n3. Calculate depth with multiple input files:\n```python\nresult = mcp.depth(\n    input_files=[\"/data/sample1.bam\", \"/data/sample2.bam\"],\n    region=\"chr1:1-1000000\"\n)\n```\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the LICENSE file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "bioinformatics",
        "samtools_mcp",
        "genomic",
        "genomic files",
        "cram genomic",
        "samtools_mcp provides"
      ],
      "category": "file-management"
    },
    "skydeckai--skydeckai-code": {
      "owner": "skydeckai",
      "name": "skydeckai-code",
      "url": "https://github.com/skydeckai/skydeckai-code",
      "imageUrl": "/freedevtools/mcp/pfp/skydeckai.webp",
      "description": "Provides tools for AI-driven development workflows, including file system operations, code analysis across multiple programming languages, code execution, and web content fetching with HTML-to-markdown conversion.",
      "stars": 74,
      "forks": 20,
      "license": "Apache License 2.0",
      "language": "Python",
      "updated_at": "2025-09-13T16:37:02Z",
      "readme_content": "[![MseeP.ai Security Assessment Badge](https://mseep.net/pr/skydeckai-code-badge.png)](https://mseep.ai/app/skydeckai-code)\n\n# SkyDeckAI Code\n\nAn MCP server that provides a comprehensive set of tools for AI-driven development workflows. Features include file system operations, code analysis using tree-sitter for multiple programming languages, code execution, web content fetching with HTML-to-markdown conversion, multi-engine web search, code content searching, and system information retrieval. Designed to enhance AI's capability to assist in software development tasks by providing direct access to both local and remote resources.\n\n# Formerly Known As MCP-Server-AIDD\n\nThis mcp server was formerly known as `mcp-server-aidd`. It was renamed to `skydeckai-code` to credit the team at [SkyDeck.ai](https://skydeck.ai) with creating this application along with [East Agile](https://eastagile.com). But more importantly we realized that the term AI Driven Development (AIDD) was just not catching on. People did not understand at a glance what it was about. And nor did LLMs. \"Code\" was far more intuitive. And linguistically intuitive is important in the world of agentic AI.\n\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/fe7a40fd-30c1-4767-84f9-d33bf997497e)\n\n## Installation\n\n```bash\n# Using uvx\nuvx skydeckai-code\n```\n\n## Claude Desktop Setup\n\nAdd to your `claude_desktop_config.json`:\n\n```json\n{\n    \"mcpServers\": {\n        \"skydeckai-code\": {\n            \"command\": \"uvx\",\n            \"args\": [\"skydeckai-code\"]\n        }\n    }\n}\n```\n\n## SkyDeck AI Helper App\n\nIf you're using MseeP AI Helper app, you can search for \"SkyDeckAI Code\" and install it.\n\n\n\n## Key Features\n\n-   File system operations (read, write, edit, move, copy, delete)\n-   Directory management and traversal\n-   Multi-language code analysis using tree-sitter\n-   Code content searching with regex pattern matching\n-   Multi-language code execution with safety measures\n-   Web content fetching from APIs and websites with HTML-to-markdown conversion\n-   Multi-engine web search with reliable fallback mechanisms\n-   Batch operations for parallel and serial tool execution\n-   Security controls with configurable workspace boundaries\n-   Screenshot and screen context tools\n-   Image handling tools\n\n## Available Tools (29)\n\n| Category         | Tool Name                  | Description                                  |\n| ---------------- | -------------------------- | -------------------------------------------- |\n| **File System**  | `get_allowed_directory`    | Get the current working directory path       |\n|                  | `update_allowed_directory` | Change the working directory                 |\n|                  | `create_directory`         | Create a new directory or nested directories |\n|                  | `write_file`               | Create or overwrite a file with new content  |\n|                  | `edit_file`                | Make line-based edits to a text file         |\n|                  | `read_file`                | Read the contents of one or more files       |\n|                  | `list_directory`           | Get listing of files and directories         |\n|                  | `move_file`                | Move or rename a file or directory           |\n|                  | `copy_file`                | Copy a file or directory to a new location   |\n|                  | `search_files`             | Search for files matching a name pattern     |\n|                  | `delete_file`              | Delete a file or empty directory             |\n|                  | `get_file_info`            | Get detailed file metadata                   |\n|                  | `directory_tree`           | Get a recursive tree view of directories     |\n|                  | `read_image_file`          | Read an image file as base64 data            |\n| **Code Tools**   | `codebase_mapper`          | Analyze code structure across files          |\n|                  | `search_code`              | Find text patterns in code files             |\n|                  | `execute_code`             | Run code in various languages                |\n|                  | `execute_shell_script`     | Run shell/bash scripts                       |\n| **Web Tools**    | `web_fetch`                | Get content from a URL                       |\n|                  | `web_search`               | Perform a web search                         |\n| **Screen Tools** | `capture_screenshot`       | Take a screenshot of screen or window        |\n|                  | `get_active_apps`          | List running applications                    |\n|                  | `get_available_windows`    | List all open windows                        |\n| **System**       | `get_system_info`          | Get detailed system information              |\n| **Utility**      | `batch_tools`              | Run multiple tool operations together        |\n|                  | `think`                    | Document reasoning without making changes    |\n| **Todo**         | `todo_read`                | Read current workspace todo list             |\n|                  | `todo_write`               | Replace entire todo list with validation     |\n|                  | `todo_update`              | Update specific todo item by ID              |\n\n## Detailed Tool Documentation\n\n### Basic File Operations\n\n| Tool          | Parameters                                                 | Returns                                       |\n| ------------- | ---------------------------------------------------------- | --------------------------------------------- |\n| read_file     | files: [{path: string, offset?: integer, limit?: integer}] | File content (single or multiple files)       |\n| write_file    | path: string, content: string                              | Success confirmation                          |\n| move_file     | source: string, destination: string                        | Success confirmation                          |\n| copy_file     | source: string, destination: string, recursive?: boolean   | Success confirmation                          |\n| delete_file   | path: string                                               | Success confirmation                          |\n| get_file_info | path: string                                               | File metadata (size, timestamps, permissions) |\n\n### Complex File Operations\n\n#### edit_file\n\nPattern-based file editing with preview support:\n\n```json\n{\n    \"path\": \"src/main.py\",\n    \"edits\": [\n        {\n            \"oldText\": \"def old_function():\",\n            \"newText\": \"def new_function():\"\n        }\n    ],\n    \"dryRun\": false,\n    \"options\": {\n        \"partialMatch\": true\n    }\n}\n```\n\nReturns: Diff of changes or preview in dry run mode.\n\n### Directory Operations\n\n| Tool                     | Parameters                                               | Returns                        |\n| ------------------------ | -------------------------------------------------------- | ------------------------------ |\n| get_allowed_directory    | none                                                     | Current allowed directory path |\n| update_allowed_directory | directory: string (absolute path)                        | Success confirmation           |\n| list_directory           | path: string                                             | Directory contents list        |\n| create_directory         | path: string                                             | Success confirmation           |\n| search_files             | pattern: string, path?: string, include_hidden?: boolean | Matching files list            |\n\nThe `search_files` tool searches for files by name pattern, while the `search_code` tool searches within file contents using regex. Use `search_files` when looking for files with specific names or extensions, and `search_code` when searching for specific text patterns inside files.\n\n#### directory_tree\n\nGenerates complete directory structure:\n\n```json\n{\n    \"path\": \"src\",\n    \"include_hidden\": false\n}\n```\n\nReturns: JSON tree structure of directory contents.\n\n### Code Analysis\n\n#### codebase_mapper\n\nAnalyzes source code structure:\n\n```json\n{\n    \"path\": \"src\"\n}\n```\n\nReturns:\n\n-   Classes and their methods\n-   Functions and parameters\n-   Module structure\n-   Code organization statistics\n-   Inheritance relationships\n\nSupported Languages:\n\n-   Python (.py)\n-   JavaScript (.js/.jsx, .mjs, .cjs)\n-   TypeScript (.ts/.tsx)\n-   Java (.java)\n-   C++ (.cpp, .hpp, .cc)\n-   Ruby (.rb, .rake)\n-   Go (.go)\n-   Rust (.rs)\n-   PHP (.php)\n-   C# (.cs)\n-   Kotlin (.kt, .kts)\n\n#### search_code\n\nFast content search tool using regular expressions:\n\n```json\n{\n    \"patterns\": [\"function\\\\s+\\\\w+\", \"class\\\\s+\\\\w+\"],\n    \"include\": \"*.js\",\n    \"exclude\": \"node_modules/**\",\n    \"max_results\": 50,\n    \"case_sensitive\": false,\n    \"path\": \"src\"\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|------|----------|-------------|\n| patterns | array of strings | Yes | List of regular expression patterns to search for in file contents |\n| include | string | No | File pattern to include (glob syntax, default: \"\\*\") |\n| exclude | string | No | File pattern to exclude (glob syntax, default: \"\") |\n| max_results | integer | No | Maximum results to return per pattern (default: 100) |\n| case_sensitive | boolean | No | Whether search is case-sensitive (default: false) |\n| path | string | No | Base directory to search from (default: \".\") |\n\n**Returns:**\nMatching lines grouped by file with line numbers, sorted by file modification time with newest files first.\n\nThis tool uses ripgrep when available for optimal performance, with a Python fallback implementation. It's ideal for finding specific code patterns like function declarations, imports, variable usages, or error handling.\n\n### System Information\n\n| Tool            | Parameters | Returns                      |\n| --------------- | ---------- | ---------------------------- |\n| get_system_info | none       | Comprehensive system details |\n\nReturns:\n\n```json\n{\n  \"working_directory\": \"/path/to/project\",\n  \"system\": {\n    \"os\", \"os_version\", \"architecture\", \"python_version\"\n  },\n  \"wifi_network\": \"MyWiFi\",\n  \"cpu\": {\n    \"physical_cores\", \"logical_cores\", \"total_cpu_usage\"\n  },\n  \"memory\": { \"total\", \"available\", \"used_percentage\" },\n  \"disk\": { \"total\", \"free\", \"used_percentage\" },\n  \"mac_details\": {  // Only present on macOS\n    \"model\": \"Mac mini\",\n    \"chip\": \"Apple M2\",\n    \"serial_number\": \"XXX\"\n  }\n}\n```\n\nProvides essential system information in a clean, readable format.\n\n### Screen Context and Image Tools\n\n#### get_active_apps\n\nReturns a list of currently active applications on the user's system.\n\n```json\n{\n    \"with_details\": true\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| with_details | boolean | No | Whether to include additional details about each application (default: false) |\n\n**Returns:**\n\n```json\n{\n    \"success\": true,\n    \"platform\": \"macos\",\n    \"app_count\": 12,\n    \"apps\": [\n        {\n            \"name\": \"Firefox\",\n            \"has_windows\": true,\n            \"window_count\": 3,\n            \"visible_windows\": [\n                { \"name\": \"GitHub - Mozilla Firefox\", \"width\": 1200, \"height\": 800 }\n            ]\n        },\n        {\n            \"name\": \"VSCode\",\n            \"has_windows\": true\n        }\n    ]\n}\n```\n\nThis tool provides valuable context about applications currently running on the user's system, which can help with providing more relevant assistance.\n\n#### get_available_windows\n\nReturns detailed information about all available windows currently displayed on the user's screen.\n\n```json\n{}\n```\n\n**Returns:**\n\n```json\n{\n    \"success\": true,\n    \"platform\": \"macos\",\n    \"count\": 8,\n    \"windows\": [\n        {\n            \"id\": 42,\n            \"title\": \"Document.txt - Notepad\",\n            \"app\": \"Notepad\",\n            \"visible\": true\n        },\n        {\n            \"title\": \"Terminal\",\n            \"app\": \"Terminal\",\n            \"visible\": true,\n            \"active\": true\n        }\n    ]\n}\n```\n\nThis tool helps understand what's visible on the user's screen and can be used for context-aware assistance.\n\n#### capture_screenshot\n\nCaptures a screenshot of the user's screen or a specific window.\n\n```json\n{\n    \"output_path\": \"screenshots/capture.png\",\n    \"capture_mode\": {\n        \"type\": \"named_window\",\n        \"window_name\": \"Visual Studio Code\"\n    }\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| output_path | string | No | Path where the screenshot should be saved (default: generated path) |\n| capture_mode | object | No | Specifies what to capture |\n| capture_mode.type | string | No | Type of screenshot: 'full', 'active_window', or 'named_window' (default: 'full') |\n| capture_mode.window_name | string | No | Name of window to capture (required when type is 'named_window') |\n\n**Returns:**\n\n```json\n{\n    \"success\": true,\n    \"path\": \"/path/to/screenshots/capture.png\"\n}\n```\n\nThis tool captures screenshots for visualization, debugging, or context-aware assistance.\n\n#### read_image_file\n\nReads an image file from the file system and returns its contents as a base64-encoded string.\n\n```json\n{\n    \"path\": \"images/logo.png\"\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| path | string | Yes | Path to the image file to read |\n| max_size | integer | No | Maximum file size in bytes (default: 100MB) |\n\n**Returns:**\nBase64-encoded image data that can be displayed or processed.\n\nThis tool supports common image formats like PNG, JPEG, GIF, and WebP, and automatically resizes images for optimal viewing.\n\n### Web Tools\n\n#### web_fetch\n\nFetches content from a URL and optionally saves it to a file.\n\n```json\n{\n    \"url\": \"https://api.github.com/users/octocat\",\n    \"headers\": {\n        \"Accept\": \"application/json\"\n    },\n    \"timeout\": 15,\n    \"save_to_file\": \"downloads/octocat.json\",\n    \"convert_html_to_markdown\": true\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| url | string | Yes | URL to fetch content from (http/https only) |\n| headers | object | No | Optional HTTP headers to include in the request |\n| timeout | integer | No | Maximum time to wait for response (default: 10s) |\n| save_to_file | string | No | Path to save response content (within allowed directory) |\n| convert_html_to_markdown | boolean | No | When true, converts HTML content to markdown for better readability (default: true) |\n\n**Returns:**\nResponse content as text with HTTP status code and size information. For binary content, returns metadata and saves to file if requested. When convert_html_to_markdown is enabled, HTML content is automatically converted to markdown format for better readability.\n\nThis tool can be used to access web APIs, fetch documentation, or download content from the web while respecting size limits (10MB max) and security constraints.\n\n#### web_search\n\nPerforms a robust web search using multiple search engines and returns concise, relevant results.\n\n```json\n{\n    \"query\": \"latest python release features\",\n    \"num_results\": 8,\n    \"convert_html_to_markdown\": true,\n    \"search_engine\": \"bing\"\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| query | string | Yes | The search query to process. Be specific for better results. |\n| num_results | integer | No | Maximum number of search results to return (default: 10, max: 20) |\n| convert_html_to_markdown | boolean | No | When true, content will be converted from HTML to markdown for better readability (default: true) |\n| search_engine | string | No | Specifies which search engine to use: \"auto\" (default), \"bing\", or \"duckduckgo\" |\n\n**Returns:**\nA list of search results formatted in markdown, including titles, URLs, and snippets for each result. Results are deduplicated and organized hierarchically for easy reading.\n\nThis tool uses a multi-engine approach that tries different search engines with various parsing strategies to ensure reliable results. You can specify a preferred engine, but some engines may block automated access, in which case the tool will fall back to alternative engines when \"auto\" is selected.\n\n### Utility Tools\n\n#### batch_tools\n\nExecute multiple tool invocations in a single request with parallel execution when possible.\n\n```json\n{\n    \"description\": \"Setup new project\",\n    \"sequential\": true,\n    \"invocations\": [\n        {\n            \"tool\": \"create_directory\",\n            \"arguments\": {\n                \"path\": \"src\"\n            }\n        },\n        {\n            \"tool\": \"write_file\",\n            \"arguments\": {\n                \"path\": \"README.md\",\n                \"content\": \"# New Project\\n\\nThis is a new project.\"\n            }\n        },\n        {\n            \"tool\": \"execute_shell_script\",\n            \"arguments\": {\n                \"script\": \"git init\"\n            }\n        }\n    ]\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| description | string | Yes | Short description of the batch operation |\n| sequential | boolean | No | Whether to run tools in sequence (default: false) |\n| invocations | array | Yes | List of tool invocations to execute |\n| invocations[].tool | string | Yes | Name of the tool to invoke |\n| invocations[].arguments | object | Yes | Arguments for the specified tool |\n\n**Returns:**\nCombined results from all tool invocations, grouped by tool with success/error status for each. Results are presented in the original invocation order with clear section headers.\n\nThis tool provides efficient execution of multiple operations in a single request. When `sequential` is false (default), tools are executed in parallel for better performance. When `sequential` is true, tools are executed in order, and if any tool fails, execution stops.\n\n**IMPORTANT**: All tools in the batch execute in the same working directory context. If a tool creates a directory and a subsequent tool needs to work inside that directory, you must either:\n\n1. Use paths relative to the current working directory (e.g., \"project/src\" rather than just \"src\"), or\n2. Include an explicit tool invocation to change directories using `update_allowed_directory`\n\n#### think\n\nA tool for complex reasoning and brainstorming without making changes to the repository.\n\n```json\n{\n    \"thought\": \"Let me analyze the performance issue in the codebase:\\n\\n## Root Cause Analysis\\n\\n1. The database query is inefficient because:\\n   - It doesn't use proper indexing\\n   - It fetches more columns than needed\\n   - The JOIN operation is unnecessarily complex\\n\\n## Potential Solutions\\n\\n1. **Add database indexes**:\\n   - Create an index on the user_id column\\n   - Create a composite index on (created_at, status)\\n\\n2. **Optimize the query**:\\n   - Select only necessary columns\\n   - Rewrite the JOIN using a subquery\\n   - Add LIMIT clause for pagination\\n\\n3. **Add caching layer**:\\n   - Cache frequent queries using Redis\\n   - Implement cache invalidation strategy\\n\\nAfter weighing the options, solution #2 seems to be the simplest to implement with the highest impact.\"\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| thought | string | Yes | Your detailed thoughts, analysis or reasoning process |\n\n**Returns:**\nYour thoughts formatted as markdown, with a note indicating this was a thinking exercise.\n\nThis tool is useful for thinking through complex problems, brainstorming solutions, or laying out implementation plans without making any actual changes. It's a great way to document your reasoning process, evaluate different approaches, or plan out a multi-step strategy before taking action.\n\n### Code Execution\n\n#### execute_code\n\nExecutes code in various programming languages with safety measures and restrictions.\n\n```json\n{\n    \"language\": \"python\",\n    \"code\": \"print('Hello, World!')\",\n    \"timeout\": 5\n}\n```\n\n**Supported Languages:**\n\n-   Python (python3)\n-   JavaScript (Node.js)\n-   Ruby\n-   PHP\n-   Go\n-   Rust\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| language | string | Yes | Programming language to use |\n| code | string | Yes | Code to execute |\n| timeout | integer | No | Maximum execution time (default: 5s) |\n\n**Requirements:**\n\n-   Respective language runtimes must be installed\n-   Commands must be available in system PATH\n-   Proper permissions for temporary file creation\n\n⚠️ **Security Warning:**\nThis tool executes arbitrary code on your system. Always:\n\n1. Review code thoroughly before execution\n2. Understand the code's purpose and expected outcome\n3. Never execute untrusted code\n4. Be aware of potential system impacts\n5. Monitor execution output\n\n#### execute_shell_script\n\nExecutes shell scripts (bash/sh) with safety measures and restrictions.\n\n```json\n{\n    \"script\": \"echo \\\"Current directory:\\\" && pwd\",\n    \"timeout\": 300\n}\n```\n\n**Parameters:**\n| Parameter | Type | Required | Description |\n|-----------|---------|----------|---------------------------------------|\n| script | string | Yes | Shell script to execute |\n| timeout | integer | No | Maximum execution time (default: 300s, max: 600s) |\n\n**Features:**\n\n-   Uses /bin/sh for maximum compatibility across systems\n-   Executes within the allowed directory\n-   Separate stdout and stderr output\n-   Proper error handling and timeout controls\n\n⚠️ **Security Warning:**\nThis tool executes arbitrary shell commands on your system. Always:\n\n1. Review the script thoroughly before execution\n2. Understand the script's purpose and expected outcome\n3. Never execute untrusted scripts\n4. Be aware of potential system impacts\n5. Monitor execution output\n\n### Todo Tools\n\nThe todo tools provide sequential task management capabilities for workspace-first development workflows. Tasks are executed in order without priority systems, ensuring structured progress through development phases.\n\n#### todo_read\n\nRead the current todo list for the workspace.\n\n```json\n{}\n```\n\n**Returns:**\n```json\n{\n  \"todos\": [\n    {\n      \"id\": \"abc123\",\n      \"content\": \"Implement user authentication\",\n      \"status\": \"in_progress\",\n      \"metadata\": {\n        \"custom_key\": \"custom_value\"\n      },\n      \"created_at\": \"2023-10-01T10:00:00Z\",\n      \"updated_at\": \"2023-10-01T11:30:00Z\"\n    }\n  ],\n  \"count\": 1,\n  \"workspace\": \"/path/to/workspace\"\n}\n```\n\n#### todo_write\n\nReplace the entire todo list for sequential execution workflow. Tasks are executed in array order, building upon previous work.\n\n```json\n{\n  \"todos\": [\n    {\n      \"id\": \"task1\",\n      \"content\": \"Set up database schema\",\n      \"status\": \"pending\"\n    },\n    {\n      \"id\": \"task2\", \n      \"content\": \"Create API endpoints\",\n      \"status\": \"pending\",\n      \"metadata\": {\n        \"custom_key\": \"custom_value\"\n      }\n    }\n  ]\n}\n```\n\n**Sequential Workflow Rules:**\n- Each todo must have unique ID\n- Only one task can be \"in_progress\" at a time (sequential execution)\n- Tasks execute in array order - no priority system\n- Required fields: id, content, status\n- Status values: \"pending\", \"in_progress\", \"completed\"\n- Workspace-first: Todo management is mandatory for all workspace operations\n\n#### todo_update\n\nUpdate a specific todo item by ID for sequential workflow progression.\n\n```json\n{\n  \"todo_id\": \"task1\",\n  \"updates\": {\n    \"status\": \"in_progress\",\n    \"metadata\": {\n        \"new_key\": \"new_value\"\n    }\n  }\n}\n```\n\n**Returns:**\n```json\n{\n  \"success\": true,\n  \"updated_todo\": {\n    \"id\": \"task1\",\n    \"content\": \"Set up database schema\",\n    \"status\": \"in_progress\",\n    \"updated_at\": \"2023-10-01T12:00:00Z\",\n    \"metadata\": {\n        \"new_key\": \"new_value\"\n    }\n  },\n  \"counts\": {\n    \"pending\": 1,\n    \"in_progress\": 1,\n    \"completed\": 0,\n    \"total\": 2\n  },\n  \"workspace\": \"/path/to/workspace\"\n}\n```\n\nThe todo system maintains separate sequential task lists for each workspace, enforcing mandatory usage for all workspace operations. Tasks execute in order, building upon previous work without priority-based scheduling.\n\n## Configuration\n\nConfiguration file: `~/.skydeckai_code/config.json`\n\n```json\n{\n    \"allowed_directory\": \"/path/to/workspace\"\n}\n```\n\n## Debugging\n\nUse MCP Inspector for debugging:\n\n```bash\nnpx @modelcontextprotocol/inspector run\n```\n\n## Security\n\n-   Operations restricted to configured allowed directory\n-   Path traversal prevention\n-   File permission preservation\n-   Safe operation handling\n\n## Upcoming Features\n\n-   GitHub tools:\n    -   PR Description Generator\n    -   Code Review\n    -   Actions Manager\n-   Pivotal Tracker tools:\n    -   Story Generator\n    -   Story Manager\n\n## Development Status\n\nCurrently in active development. Features and API may change.\n\n## License\n\nApache License 2.0 - see [LICENSE](LICENSE)\n\n[![Star History Chart](https://api.star-history.com/svg?repos=skydeckai/skydeckai-code&type=Date)](https://www.star-history.com/#skydeckai/skydeckai-code&Date)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "skydeckai",
        "programming",
        "code",
        "skydeckai code",
        "management skydeckai",
        "skydeckai skydeckai"
      ],
      "category": "file-management"
    },
    "slamdunkasaur--ru-heritage": {
      "owner": "slamdunkasaur",
      "name": "ru-heritage",
      "url": "https://github.com/slamdunkasaur/ru-heritage",
      "imageUrl": "/freedevtools/mcp/pfp/slamdunkasaur.webp",
      "description": "Downloads digitized books from the e-heritage.ru website and converts them into PDF format for easier access and archiving of historical literature.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-01-20T15:00:03Z",
      "readme_content": "# ru-heritage\nDownload digitised books from e-heritage.ru and save them as PDF\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "slamdunkasaur",
        "ru",
        "heritage",
        "slamdunkasaur ru",
        "ru heritage",
        "heritage ru"
      ],
      "category": "file-management"
    },
    "stippi--code-assistant": {
      "owner": "stippi",
      "name": "code-assistant",
      "url": "https://github.com/stippi/code-assistant",
      "imageUrl": "/freedevtools/mcp/pfp/stippi.webp",
      "description": "Assists with code-related tasks by exploring codebases, managing file contents, and providing insights through summarization. Facilitates interactive communication for effective code manipulation.",
      "stars": 101,
      "forks": 17,
      "license": "MIT License",
      "language": "Rust",
      "updated_at": "2025-10-03T00:45:37Z",
      "readme_content": "# Code Assistant\n\n[![CI](https://github.com/stippi/code-assistant/actions/workflows/build.yml/badge.svg)](https://github.com/stippi/code-assistant/actions/workflows/build.yml)\n\nAn AI coding assistant built in Rust that provides both command-line and graphical interfaces for autonomous code analysis and modification.\n\n## Key Features\n\n**Multi-Modal Tool Execution**: Adapts to different LLM capabilities with pluggable tool invocation modes - native function calling, XML-style tags, and triple-caret blocks - ensuring compatibility across various AI providers.\n\n**Real-Time Streaming Interface**: Advanced streaming processors parse and display tool invocations as they stream from the LLM, with smart filtering to prevent unsafe tool combinations.\n\n**Session-Based Project Management**: Each chat session is tied to a specific project and maintains persistent state, working memory, and draft messages with attachment support.\n\n**Multiple Interface Options**: Choose between a modern GUI built on Zed's GPUI framework, traditional terminal interface, or headless MCP server mode for integration with MCP clients such as Claude Desktop.\n\n**Intelligent Project Exploration**: Autonomously builds understanding of codebases through working memory that tracks file structures, dependencies, and project context.\n\n**Auto-Loaded Repository Guidance**: Automatically includes `AGENTS.md` (or `CLAUDE.md` fallback) from the project root in the assistant's system context to align behavior with repo-specific instructions.\n\n## Installation\n\n```bash\ngit clone https://github.com/stippi/code-assistant\ncd code-assistant\ncargo build --release\n```\n\nThe binary will be available at `target/release/code-assistant`.\n\n## Project Configuration\n\nCreate `~/.config/code-assistant/projects.json` to define available projects:\n\n```jsonc\n{\n  \"code-assistant\": {\n    \"path\": \"/Users/<username>/workspace/code-assistant\",\n    \"format_on_save\": {\n      \"**/*.rs\": \"cargo fmt\" // Formats all files in project, so make sure files are already formatted\n    }\n  },\n  \"my-project\": {\n    \"path\": \"/Users/<username>/workspace/my-project\",\n    \"format_on_save\": {\n      \"**/*.ts\": \"prettier --write {path}\" // If the formatter accepts a path, provide \"{path}\"\n    }\n  }\n}\n```\n\n### Format-on-Save Feature\n\nThe _optional_ `format_on_save` field allows automatic formatting of files after modifications. It maps file patterns (using glob syntax) to shell commands:\n- Files matching the glob patterns will be automatically formatted after being modified by the assistant\n- The tool parameters are updated to reflect the formatted content, keeping the LLM's mental model in sync\n- This prevents edit conflicts caused by auto-formatting\n\nSee [docs/format-on-save-feature.md](docs/format-on-save-feature.md) for detailed documentation.\n\n**Important Notes:**\n- When launching from a folder not in this configuration, a temporary project is created automatically\n- The assistant has access to the current project (including temporary ones) plus all configured projects\n- Each chat session is permanently associated with its initial project and folder - this cannot be changed later\n- Tool syntax (native/xml/caret) is also fixed per session at creation time\n- The LLM provider selected at startup is used for the entire application session (UI switching planned for future releases)\n\n## Usage\n\n### GUI Mode (Recommended)\n\n```bash\n# Start with graphical interface\ncode-assistant --ui\n\n# Start GUI with initial task\ncode-assistant --ui --task \"Analyze the authentication system\"\n```\n\n### Terminal Mode\n\n```bash\n# Basic usage\ncode-assistant --task \"Explain the purpose of this codebase\"\n\n# With specific provider and model\ncode-assistant --task \"Add error handling\" --provider openai --model gpt-5\n```\n\n### MCP Server Mode\n\n```bash\ncode-assistant server\n```\n\n## Configuration\n\n<details>\n<summary>Claude Desktop Integration</summary>\n\nConfigure in Claude Desktop settings (**Developer** tab → **Edit Config**):\n\n```jsonc\n{\n  \"mcpServers\": {\n    \"code-assistant\": {\n      \"command\": \"/path/to/code-assistant/target/release/code-assistant\",\n      \"args\": [\"server\"],\n      \"env\": {\n        \"PERPLEXITY_API_KEY\": \"pplx-...\", // optional, enables perplexity_ask tool\n        \"SHELL\": \"/bin/zsh\" // your login shell, required when configuring \"env\" here\n      }\n    }\n  }\n}\n```\n</details>\n\n<details>\n<summary>LLM Providers</summary>\n\n**Anthropic** (default):\n```bash\nexport ANTHROPIC_API_KEY=\"sk-ant-...\"\ncode-assistant --provider anthropic --model claude-sonnet-4-20250514\n```\n\n**OpenAI**:\n```bash\nexport OPENAI_API_KEY=\"sk-...\"\ncode-assistant --provider openai --model gpt-4o\n```\n\n**SAP AI Core**:\nCreate `~/.config/code-assistant/ai-core.json`:\n```json\n{\n  \"auth\": {\n    \"client_id\": \"<service-key-client-id>\",\n    \"client_secret\": \"<service-key-client-secret>\",\n    \"token_url\": \"https://<your-url>/oauth/token\",\n    \"api_base_url\": \"https://<your-url>/v2/inference\"\n  },\n  \"models\": {\n    \"claude-sonnet-4\": \"<deployment-id>\"\n  }\n}\n```\n\n**Ollama**:\n```bash\ncode-assistant --provider ollama --model llama2 --num-ctx 4096\n```\n\n**Other providers**: Vertex AI (Google), OpenRouter, Groq, MistralAI\n</details>\n\n<details>\n<summary>Advanced Options</summary>\n\n**Tool Syntax Modes**:\n- `--tool-syntax native`: Use the provider's built-in tool calling (most reliable, but streaming of parameters depends on provider)\n- `--tool-syntax xml`: XML-style tags for streaming of parameters\n- `--tool-syntax caret`: Triple-caret blocks for token-efficency and streaming of parameters\n\n**Session Recording**:\n```bash\n# Record session (Anthropic only)\ncode-assistant --record session.json --task \"Optimize database queries\"\n\n# Playback session\ncode-assistant --playback session.json --fast-playback\n```\n\n**Other Options**:\n- `--continue-task`: Resume from previous session state\n- `--use-diff-format`: Enable alternative diff format for file editing\n- `--verbose`: Enable detailed logging\n- `--base-url`: Custom API endpoint\n</details>\n\n## Architecture Highlights\n\nThe code-assistant features several innovative architectural decisions:\n\n**Adaptive Tool Syntax**: Automatically generates different system prompts and streaming processors based on the target LLM's capabilities, allowing the same core logic to work across providers with varying function calling support.\n\n**Smart Tool Filtering**: Real-time analysis of tool invocation patterns prevents logical errors like attempting to edit files before reading them, with the ability to truncate responses mid-stream when unsafe combinations are detected.\n\n**Multi-Threaded Streaming**: Sophisticated async architecture that handles real-time parsing of tool invocations while maintaining responsive UI updates and proper state management across multiple chat sessions.\n\n## Contributing\n\nContributions are welcome! The codebase demonstrates advanced patterns in async Rust, AI agent architecture, and cross-platform UI development.\n\n## Roadmap\n\nThis section is not really a roadmap, as the items are in no particular order.\nBelow are some topics that are likely the next focus.\n\n- **Block Replacing in Changed Files**: When streaming a tool use block, we already know the LLM attempts to use `replace_in_file` and we know in which file quite early.\n  If we also know this file has changed since the LLM last read it, we can block the attempt with an appropriate error message.\n- **Compact Tool Use Failures**: When the LLM produces an invalid tool call, or a mismatching search block, we should be able to strip the failed attempt from the message history, saving tokens.\n- **Improve UI**: There are various ways in which the UI can be improved.\n- **Add Memory Tools**: Add tools that facilitate building up a knowledge base useful work working in a given project.\n- **Security**: Ideally, the execution for all tools would run in some sort of sandbox that restricts access to the files in the project tracked by git.\n  Currently, the tools reject absolute paths, but do not check whether the relative paths point outside the project or try to access git-ignored files.\n  The `execute_command` tool runs a shell with the provided command line, which at the moment is completely unchecked.\n- **Fuzzy matching search blocks**: Investigate the benefit of fuzzy matching search blocks.\n  Currently, files are normalized (always `\\n` line endings, no trailing white space).\n  This increases the success rate of matching search blocks quite a bit, but certain ways of fuzzy matching might increase the success even more.\n  Failed matches introduce quite a bit of inefficiency, since they almost always trigger the LLM to re-read a file.\n  Even when the error output of the `replace_in_file` tool includes the complete file and tells the LLM *not* to re-read the file.\n- **Edit user messages**: Editing a user message should create a new branch in the session.\n  The user should still be able to toggle the active banches.\n- **Select in messages**: Allow to copy/paste from any message in the session.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "codebases",
        "code",
        "file",
        "code assistant",
        "stippi code",
        "exploring codebases"
      ],
      "category": "file-management"
    },
    "sunjoonkim--fclones": {
      "owner": "sunjoonkim",
      "name": "fclones",
      "url": "https://github.com/sunjoonkim/fclones",
      "imageUrl": "/freedevtools/mcp/pfp/sunjoonkim.webp",
      "description": "Efficiently find and remove duplicate files using a command line utility with advanced filtering and flexible removal options. It integrates with Unix tools and produces JSON output for easy use and inspection before deletion.",
      "stars": 0,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-03-01T07:41:22Z",
      "readme_content": "fclones\n===============================================\n**Efficient duplicate file finder and remover**\n\n[![CircleCI](https://circleci.com/gh/pkolaczk/fclones.svg?style=shield)](https://circleci.com/gh/pkolaczk/fclones)\n[![crates.io](https://img.shields.io/crates/v/fclones.svg)](https://crates.io/crates/fclones)\n[![Documentation](https://docs.rs/fclones/badge.svg)](https://docs.rs/fclones)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nThis is the repo for command line fclones and its core libraries.\nFor the desktop frontend, see [fclones-gui](https://github.com/pkolaczk/fclones-gui).\n\n---\n\n`fclones` is a command line utility that identifies groups of identical files and gets rid \nof the file copies you no longer need. It comes with plenty of configuration options for controlling\nthe search scope and offers many ways of removing duplicates. For maximum flexibility,\nit integrates well with other Unix utilities like `find` and it speaks JSON, so you have a lot\nof control over the search and cleanup process.\n\n`fclones` treats your data seriously. You can inspect and modify the list of duplicate files before removing them.\nThere is also a `--dry-run` option that can tell you exactly what changes on the file system would be made.\n\n`fclones` has been implemented in Rust with a strong focus on high performance on modern hardware. \nIt employs several optimization techniques not present in many other programs. \nIt adapts to the type of the hard drive, orders file operations by physical data placement on HDDs, \nscans directory tree in parallel and uses prefix compression of paths to reduce memory consumption when working \nwith millions of files. It is also friendly to page-cache and does not push out your data out of cache.\nAs a result, `fclones` easily outperforms many other popular duplicate finders by a wide margin \non either SSD or HDD storage.\n\n`fclones` is available on a wide variety of operating systems, but it works best on Linux. \n\n- [Features](#features)\n- [Demo](#demo)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Algorithm](#the-algorithm)\n- [Tuning](#tuning)\n- [Benchmarks](#benchmarks)\n\n## Features\n* Identifying groups of identical files\n  - finding duplicate files\n  - finding files with more than N replicas\n  - finding unique files\n  - finding files with fewer than N replicas\n* Advanced file selection for reducing the amount of data to process\n  - scanning multiple directory roots\n  - can work with a list of files piped directly from standard input\n  - recursive/non-recursive file selection\n  - recursion depth limit\n  - filtering names and paths by extended UNIX globs\n  - filtering names and paths by regular expressions\n  - filtering by min/max file size\n  - proper handling of symlinks and hardlinks\n* Removing redundant data\n  - removing, moving or replacing files with soft or hard links\n  - removing redundant file data using native copy-on-write (reflink) support on some file systems \n  - selecting files for removal by path or name patterns  \n  - prioritizing files to remove by creation, modification, last access time or nesting level\n* High performance\n  - parallel processing capability in all I/O and CPU heavy stages\n  - automatic tuning of parallelism and access strategy based on device type (SSD vs HDD)\n  - low memory footprint thanks to heavily optimized path representation\n  - variety of fast non-cryptographic and cryptographic hash functions up to 512 bits wide\n  - doesn't push data out of the page-cache (Linux-only)\n  - optional persistent caching of file hashes\n  - accurate progress reporting   \n* Variety of output formats for easy further processing of results  \n  - standard text format\n    - groups separated by group headers with file size and hash \n    - one path per line in a group  \n  - optional `fdupes` compatibility (no headers, no indent, groups separated by blank lines)    \n  - machine-readable formats: `CSV`, `JSON`\n\n### Limitations\nCopy-on-write file data deduplication (reflink) is not supported on Windows. \n\nSome optimisations are not available on platforms other than Linux:\n  - ordering of file accesses by physical placement\n  - page-cache drop-behind\n  \n## Demo\nLet's first create some files:\n\n    $ mkdir test\n    $ cd test\n    $ echo foo >foo1.txt\n    $ echo foo >foo2.txt\n    $ echo foo >foo3.txt\n    $ echo bar >bar1.txt\n    $ echo bar >bar2.txt\n\nNow let's identify the duplicates:\n\n    $ fclones group . >dupes.txt\n    [2021-06-05 18:21:33.358] fclones:  info: Started grouping\n    [2021-06-05 18:21:33.738] fclones:  info: Scanned 7 file entries\n    [2021-06-05 18:21:33.738] fclones:  info: Found 5 (20 B) files matching selection criteria\n    [2021-06-05 18:21:33.738] fclones:  info: Found 4 (16 B) candidates after grouping by size\n    [2021-06-05 18:21:33.738] fclones:  info: Found 4 (16 B) candidates after grouping by paths and file identifiers\n    [2021-06-05 18:21:33.739] fclones:  info: Found 3 (12 B) candidates after grouping by prefix\n    [2021-06-05 18:21:33.740] fclones:  info: Found 3 (12 B) candidates after grouping by suffix\n    [2021-06-05 18:21:33.741] fclones:  info: Found 3 (12 B) redundant files\n\n    $ cat dupes.txt\n    # Report by fclones 0.12.0\n    # Timestamp: 2021-06-05 18:21:33.741 +0200\n    # Command: fclones group .\n    # Found 2 file groups\n    # 12 B (12 B) in 3 redundant files can be removed\n    7d6ebf613bf94dfd976d169ff6ae02c3, 4 B (4 B) * 2:\n        /tmp/test/bar1.txt\n        /tmp/test/bar2.txt\n    6109f093b3fd5eb1060989c990d1226f, 4 B (4 B) * 3:\n        /tmp/test/foo1.txt\n        /tmp/test/foo2.txt\n        /tmp/test/foo3.txt\n\nFinally we can replace the duplicates by soft links:\n\n    $ fclones link --soft <dupes.txt \n    [2021-06-05 18:25:42.488] fclones:  info: Started deduplicating\n    [2021-06-05 18:25:42.493] fclones:  info: Processed 3 files and reclaimed 12 B space\n\n    $ ls -l\n    total 12\n    -rw-rw-r-- 1 pkolaczk pkolaczk   4 cze  5 18:19 bar1.txt\n    lrwxrwxrwx 1 pkolaczk pkolaczk  18 cze  5 18:25 bar2.txt -> /tmp/test/bar1.txt\n    -rw-rw-r-- 1 pkolaczk pkolaczk 382 cze  5 18:21 dupes.txt\n    -rw-rw-r-- 1 pkolaczk pkolaczk   4 cze  5 18:19 foo1.txt\n    lrwxrwxrwx 1 pkolaczk pkolaczk  18 cze  5 18:25 foo2.txt -> /tmp/test/foo1.txt\n    lrwxrwxrwx 1 pkolaczk pkolaczk  18 cze  5 18:25 foo3.txt -> /tmp/test/foo1.txt\n\n## Installation\nThe code has been thoroughly tested on Ubuntu Linux 21.10.\nOther systems like Windows or Mac OS X and other architectures may work. \nHelp test and/or port to other platforms is welcome.\nPlease report successes as well as failures.      \n\n### Official Packages\n[Snap store](https://snapcraft.io/fclones) (Linux):\n\n    snap install fclones\n\n[Homebrew](https://formulae.brew.sh/formula/fclones) (macOS and Linux)\n\n    brew install fclones\n\nInstallation packages and binaries for some platforms \nare also attached directly to [Releases](https://github.com/pkolaczk/fclones/releases).\n\n### Third-party Packages\n* [Arch Linux](https://aur.archlinux.org/packages/fclones/) \n* [Alpine Linux](https://pkgs.alpinelinux.org/package/edge/testing/x86_64/fclones)\n* [NixOS](https://search.nixos.org/packages?channel=unstable&show=fclones&from=0&size=50&sort=relevance&type=packages&query=fclones)\n\n### Building from Source \n[Install Rust Toolchain](https://www.rust-lang.org/tools/install) and then run:\n\n    cargo install fclones\n\nThe build will write the binary to `.cargo/bin/fclones`. \n\n## Usage\n\n`fclones` offers separate commands for finding and removing files. This way, you can inspect\nthe list of found files before applying any modifications to the file system. \n\n  - `group` – identifies groups of identical files and prints them to the standard output\n  - `remove` – removes redundant files earlier identified by `group`\n  - `link` – replaces redundant files with links (default: hard links)\n  - `dedupe` – does not remove any files, but deduplicates file data by using native copy-on-write capabilities of the file system (reflink) \n\n### Finding Files\n\nFind duplicate, unique, under-replicated or over-replicated files in the current directory, \nincluding subdirectories:\n\n    fclones group .\n    fclones group . --unique \n    fclones group . --rf-under 3\n    fclones group . --rf-over 3\n\nYou can search in multiple directories:\n\n    fclones group dir1 dir2 dir3\n\nBy default, hidden files and files matching patterns listed in `.gitignore` and `.fdignore` are\nignored. To search all files, use:\n\n    fclones group --no-ignore --hidden dir\n\nLimit the recursion depth:\n    \n    fclones group . --depth 1   # scan only files in the current dir, skip subdirs\n    fclones group * --depth 0   # similar as above in shells that expand `*` \n\nCaution: Versions up to 0.10 did not descend into directories by default.\nIn those old versions, add `-R` flag to enable recursive directory walking.\n\nFinding files that match across two directory trees, without matching identical files\nwithin each tree:\n\n    fclones group --isolate dir1 dir2\n\nFinding duplicate files of size at least 100 MB: \n\n    fclones group . -s 100M\n\nFilter by file name or path pattern:\n\n    fclones group . --name '*.jpg' '*.png' \n                \nRun `fclones` on files selected by `find` (note: this is likely slower than built-in filtering):\n\n    find . -name '*.c' | fclones group --stdin --depth 0\n\nFollow symbolic links, but don't escape out of the home folder:\n\n    fclones group . -L --path '/home/**'\n    \nExclude a part of the directory tree from the scan:\n\n    fclones group / --exclude '/dev/**' '/proc/**'\n\n### Removing Files\nTo remove duplicate files, move them to a different place or replace them by links, \nyou need to send the report produced by `fclones group` to the standard input \nof `fclones remove`, `fclones move` or `fclones link` command.\nThe report format is detected automatically. Currently, `default` and `json` report \nformats are supported. \n\nAssuming the list of duplicates has been saved in file `dupes.txt`, the following commands would remove\nthe redundant files: \n\n    fclones link <dupes.txt             # replace with hard links\n    fclones link -s <dupes.txt          # replace with symbolic links\n    fclones move target_dir <dupes.txt  # move to target_dir  \n    fclones remove <dupes.txt           # remove totally\n    \n\nIf you prefer to do everything at once without storing the list of groups in a file, you can pipe:\n\n    fclones group . | fclones link\n\nTo select the number of files to preserve, use the `-n`/`--rf-over` option.\nBy default, it is set to the value used when running `group` (which is 1 if it wasn't set explicitly). \nTo leave 2 replicas in each group, run: \n\n    fclones remove -n 2 <dupes.txt\n\nBy default, `fclones` follows the order of files specified in the input file. It keeps the files given at the beginning\nof each list, and removes / replaces the files given at the end of each list. It is possible to change that \norder by `--priority` option, for example:\n\n    fclones remove --priority newest <dupes.txt        # remove the newest replicas\n    fclones remove --priority oldest <dupes.txt        # remove the oldest replicas\n\nFor more priority options, see `fclones remove --help`.\n\nIt is also possible to restrict removing files to only files with names or paths matching a pattern:\n\n    fclones remove --name '*.jpg' <dupes.txt       # remove only jpg files\n    fclones remove --path '/trash/**' <dupes.txt   # remove only files in the /trash folder\n\nIf it is easier to specify a pattern for files which you do *not* want to remove, then use one of `keep` options:\n\n    fclones remove --keep-name '*.mov' <dupes.txt           # never remove mov files\n    fclones remove --keep-path '/important/**' <dupes.txt   # never remove files in the /important folder\n\nTo make sure you're not going to remove wrong files accidentally, use `--dry-run` option.\nThis option prints all the commands that would be executed, but it doesn't actually execute them:\n\n    fclones link --soft <dupes.txt --dry-run 2>/dev/null\n\n    mv /tmp/test/bar2.txt /tmp/test/bar2.txt.jkXswbsDxhqItPeOfCXsWN4d\n    ln -s /tmp/test/bar1.txt /tmp/test/bar2.txt\n    rm /tmp/test/bar2.txt.jkXswbsDxhqItPeOfCXsWN4d\n    mv /tmp/test/foo2.txt /tmp/test/foo2.txt.ze1hvhNjfre618TkRGUxJNzx\n    ln -s /tmp/test/foo1.txt /tmp/test/foo2.txt\n    rm /tmp/test/foo2.txt.ze1hvhNjfre618TkRGUxJNzx\n    mv /tmp/test/foo3.txt /tmp/test/foo3.txt.ttLAWO6YckczL1LXEsHfcEau\n    ln -s /tmp/test/foo1.txt /tmp/test/foo3.txt\n    rm /tmp/test/foo3.txt.ttLAWO6YckczL1LXEsHfcEau\n\n### Handling links\nFiles linked by symbolic links or hard links are not treated as duplicates.\nYou can change this behavior by setting the following flags:\n * When `--isolate` is set:\n   * links residing in different directory trees are treated as duplicates, \n   * links residing in the same directory tree are counted as a single replica.\n * When `--match-links` is set, fclones treats all linked files as duplicates.\n\nConsider the following directory structure, where all files are hard links sharing the same content:\n\n    dir1:\n      - file1\n      - file2\n    dir2:\n      - file3\n      - file4\n      \nBecause all files are essentially the same data, they will end up in the same file group, but\nthe actual number of replicas present in that file group will differ depending on the flags given:\n\n| Command                                 | Number of replicas | Group reported   | Files to remove     |\n|-----------------------------------------|--------------------|------------------|---------------------|\n| `fclones group dir1 dir2`               | 1                  | No               |                     |\n| `fclones group dir1 dir2 --isolate`     | 2                  | Yes              | file3, file4        | \n| `fclones group dir1 dir2 --match-links` | 4                  | Yes              | file2, file3, file4 |\n\n#### Symbolic links\nThe `group` command ignores symbolic links to files unless at least `--follow-links` \nor `--symbolic-links` flag is set. If only `--follow-links` is set, symbolic links to files\nare followed and resolved to their targets. \nIf `--symbolic-links` is set, symbolic links to files are not followed, \nbut treated as hard links and potentially reported in the output report.\nWhen both `--symbolic-links` and `--follow-links` are set, symbolic links to directories are followed,\nbut symbolic links to files are treated as hard links.\n\n**Caution**: Using `--match-links` together with `--symbolic-links` is very dangerous. \nIt is easy to end up deleting the only regular file you have, and to be left\nwith a bunch of orphan symbolic links. \n\n### Preprocessing Files\nUse `--transform` option to safely transform files by an external command.\nBy default, the transformation happens on a copy of file data, to avoid accidental data loss.\nNote that this option may significantly slow down processing of a huge number of files, \nbecause it invokes the external program for each file.\n\nThe following command will strip exif before matching duplicate jpg images:\n\n    fclones group . --name '*.jpg' -i --transform 'exiv2 -d a $IN' --in-place     \n    \n### Other    \n    \nList more options:\n    \n    fclones [command] -h      # short help\n    fclones [command] --help  # detailed help\n\n### Path Globbing\n`fclones` understands a subset of Bash Extended Globbing.\nThe following wildcards can be used:\n- `?`         matches any character except the directory separator\n- `[a-z]`     matches one of the characters or character ranges given in the square brackets\n- `[!a-z]`    matches any character that is not given in the square brackets\n- `*`         matches any sequence of characters except the directory separator\n- `**`        matches any sequence of characters including the directory separator\n- `{a,b}`     matches exactly one pattern from the comma-separated patterns given inside the curly brackets\n- `@(a|b)`    same as `{a,b}`\n- `?(a|b)`    matches at most one occurrence of the pattern inside the brackets\n- `+(a|b)`    matches at least occurrence of the patterns given inside the brackets\n- `*(a|b)`    matches any number of occurrences of the patterns given inside the brackets\n- `\\`         escapes wildcards on Unix-like systems, e.g. `\\?` would match `?` literally\n- `^`         escapes wildcards on Windows, e.g. `^?` would match `?` literally\n\n#### Caution\n\n* On Unix-like systems, when using globs, one must be very careful to avoid accidental expansion of globs by the shell.\n  In many cases having globs expanded by the shell instead of by `fclones` is not what you want. In such cases, you\n  need to quote the globs:\n    \n      fclones group . --name '*.jpg'       \n       \n* On Windows, the default shell doesn't remove quotes before passing the arguments to the program, \n  therefore you need to pass globs unquoted:\n  \n      fclones group . --name *.jpg\n      \n* On Windows, the default shell doesn't support path globbing, therefore wildcard characters such as * and ? used \n  in paths will be passed literally, and they are likely to create invalid paths. For example, the following \n  command that searches for duplicate files in the current directory in Bash, will likely fail in the default\n  Windows shell:\n  \n      fclones group *\n      \n  If you need path globbing, and your shell does not support it,\n  use the builtin path globbing provided by `--name` or `--path`.     \n                          \n## The Algorithm\nFiles are processed in several stages. Each stage except the last one is parallel, but \nthe previous stage must complete fully before the next one is started.\n1. Scan input files and filter files matching the selection criteria. Walk directories recursively if requested. \n   Follow symbolic links if requested. For files that match the selection criteria, read their size.\n2. Group collected files by size by storing them in a hash-map. Remove groups smaller than the desired lower-bound \n   (default 2). \n3. In each group, remove duplicate files with the same inode id. The same file could be reached through different\n   paths when hardlinks are present. This step can be optionally skipped.\n4. For each remaining file, compute a hash of a tiny block of initial data. Put files with different hashes \n   into separate groups. Prune result groups if needed. \n5. For each remaining file, compute a hash of a tiny block of data at the end of the file. \n   Put files with different hashes into separate groups. Prune small groups if needed.\n6. For each remaining file, compute a hash of the whole contents of the file. Note that for small files\n   we might have already computed a full contents hash in step 4, therefore these files can be safely\n   omitted. Same as in steps 4 and 5, split groups and remove the ones that are too small.\n7. Write report to the stdout.          \n    \nNote that there is no byte-by-byte comparison of files anywhere. All available hash functions are at least \n128-bit wide, and you don't need to worry about hash collisions. At 10<sup>15</sup> files, \nthe probability of collision is 0.000000001 when using a 128-bit hash, \nwithout taking into account the requirement for the files to also match by size.\n\n### Hashes\nYou can select the hash function with `--hash-fn` (default: `metro`).\nNon-cryptographic hashes are much more efficient than cryptographic, \nhowever you probably won't see much difference unless you're reading from a fast SSD or if file data is cached.\n\n| Hash function                                               | Hash width | Cryptographic | \n|-------------------------------------------------------------|------------|---------------|\n| [metro](http://www.jandrewrogers.com/2015/05/27/metrohash/) | 128-bit    | No            |\n| [xxhash3](https://cyan4973.github.io/xxHash/)               | 128-bit    | No            |\n| [blake3](https://github.com/BLAKE3-team/BLAKE3)             | 256-bit    | Yes           |         \n| [sha256](https://en.wikipedia.org/wiki/SHA-2)               | 256-bit    | Yes           | \n| [sha512](https://en.wikipedia.org/wiki/SHA-2)               | 512-bit    | Yes           | \n| [sha3-256](https://en.wikipedia.org/wiki/SHA-3)             | 256-bit    | Yes           |\n| [sha3-512](https://en.wikipedia.org/wiki/SHA-3)             | 512-bit    | Yes           |\n\n## Tuning\nThis section provides hints on getting the best performance from `fclones`.\n\n### Incremental Mode\nIf you expect to run `fclones group` more than once on the same set of files, \nyou might benefit from turning on the hash cache by adding the `--cache` flag:\n\n```\nfclones group --cache <dir>\n```\n\nCaching can dramatically improve grouping speed on subsequent runs of `fclones` at the expense of some additional\nstorage space needed for the cache. Caching also allows for resuming work quickly after interruption, so it is\nrecommended if you plan to run `fclones` on huge data sets.\n\nThe cache works as follows:\n- Each newly computed file hash is persisted in the cache together with some metadata of the file such as \n  its modification timestamp and length.\n- Whenever a file hash needs to be computed, it is first looked up in the cache. \n  The cached hash is used if the current metadata of the file strictly matches the metadata stored in the cache.  \n\nCached hashes are not invalidated by file moves because files are identified \nby their internal identifiers (inode identifiers on Unix), not by path names, and moves/renames typically preserve \nthose.   \n\nBeware that caching relies on file metadata to detect changes in file contents.\nThis might introduce some inaccuracies to the grouping process if a file modification timestamp and file length\nis not updated immediately whenever a file gets modified. \nMost file systems update the timestamps automatically on closing the file. Therefore, changed files that are held \nopen for a long time (e.g. by database systems) might be not noticed by `fclones group` and might use stale \ncached values.\n\nThe cache database is located in the standard cache directory of the user account. Typically, those are: \n* Linux: `$HOME/.cache/fclones`\n* macOS: `$HOME/Library/Caches/fclones`\n* Windows: `$HOME/AppData/Local/fclones`\n\n### Configuring Parallelism\nThe `--threads` parameter controls the sizes of the internal thread-pool(s). \nThis can be used to reduce parallelism level when you don't want `fclones` to \nimpact performance of your system too much, e.g. when you need to do some other work\nat the same time. We recommended reducing the parallelism level if you need\nto reduce memory usage. \n\nWhen using `fclones` up to version 0.6.x to deduplicate files of sizes of at least a few MBs each  \non spinning drives (HDD), it is recommended to set `--threads 1`, because accessing big files \nfrom multiple threads on HDD can be much slower than single-threaded access \n(YMMV, this is heavily OS-dependent, 2x-10x performance differences have been reported).\n \nSince version 0.7.0, fclones uses separate per-device thread-pools for final hashing \nand it will automatically tune the level of parallelism, memory buffer sizes and partial hashing sizes \nbased on the device type. These automatic settings can be overridden with `--threads` as well.\n\nThe following options can be passed to `--threads`. The more specific options override the less specific ones.\n- `main:<n>` – sets the size of the main thread-pool used for random I/O: directory tree scanning, \n   file metadata fetching and in-memory sorting/hashing.\n   These operations typically benefit from high parallelism level, even on spinning drives. \n   Unset by default, which means the pool will be configured to use all available CPU cores.\n- `dev:<device>:<r>,<s>` – sets the size of the thread-pool `r` used for random I/O and `s` used for \n   sequential I/O on the block device with the given name. The name of the device is OS-dependent. \n   Note this is not the same as the partition name or mount point.\n- `ssd:<r>,<s>` – sets the sizes of the thread-pools used for I/O on solid-state drives. Unset by default. \n- `hdd:<r>,<s>` – sets the sizes of the thread-pools used for I/O on spinning drives. \n   Defaults to `8,1`\n- `removable:<r>,<s>` –  sets the size of the thread-pools used for I/O \n   on removable devices (e.g. USB sticks). Defaults to `4,1`\n- `unknown:<r>,<s>` –  sets the size of the thread-pools used for I/O on devices of unknown type.\n   Sometimes the device type can't be determined e.g. if it is mounted as NAS.\n   Defaults to `4,1`\n- `default:<r>,<s>` – sets the pool sizes to be used by all unset options\n- `<r>,<s>` - same as `default:<r>,<s>`  \n- `<n>` - same as `default:<n>,<n>`\n\n### Examples\nTo limit the parallelism level for the main thread pool to 1:\n\n    fclones group <paths> --threads main:1  \n  \nTo limit the parallelism level for all I/O access for all SSD devices:\n\n    fclones group <paths> --threads ssd:1 \n\nTo set the parallelism level to the number of cores for random I/O access and to \n2 for sequential I/O access for `/dev/sda` block device:\n\n    fclones group <paths> --threads dev:/dev/sda:0,2 \n    \nMultiple `--threads` options can be given, separated by spaces:\n\n    fclones group <paths> --threads main:16 ssd:4 hdd:1,1     \n    \n    \n## Benchmarks\nDifferent duplicate finders were given a task to find duplicates in a large set of files. \nBefore each run, the system page cache was evicted with `echo 3 > /proc/sys/vm/drop_caches`.\n\n### SSD Benchmark\n- Model: Dell Precision 5520\n- CPU: Intel(R) Xeon(R) CPU E3-1505M v6 @ 3.00GHz\n- RAM: 32 GB\n- Storage: local NVMe SSD 512 GB \n- System: Ubuntu Linux 20.10, kernel 5.8.0-53-generic\n- Task: 1,460,720 paths, 316 GB of data       \n\nProgram                                                |  Version  | Language  | Time              | Peak Memory          \n-------------------------------------------------------|-----------|-----------|------------------:|--------------\nfclones                                                |  0.12.1   | Rust      |  0:34.59          | 266 MB\n[yadf](https://github.com/jRimbault/yadf)              |  0.15.2   | Rust      |  0:59.32          | 329 MB\n[czkawka](https://qarmin.github.io/czkawka/)           |  3.1.0    | Rust      |  2:09.00          | 1.4 GB\n[rmlint](https://github.com/sahib/rmlint)              |  2.9.0    | C, Python |  2:28.43          | 942 MB\n[jdupes](https://github.com/jbruchon/jdupes)           |  1.18.2   | C         |  5:01.91          | 332 MB\n[dupe-krill](https://github.com/kornelski/dupe-krill)  |  1.4.5    | Rust      |  5:09.52          | 706 MB\n[fdupes](https://github.com/adrianlopezroche/fdupes)   |  2.1.1    | C         |  5:46.19          | 342 MB\n[rdfind](https://github.com/pauldreik/rdfind)          |  1.4.1    | C++       |  5:53.07          | 496 MB\n[dupeguru](https://dupeguru.voltaicideas.net/)         |  4.1.1    | Python    |  7:49.89          | 1.4 GB\n[fdupes-java](https://github.com/cbismuth/fdupes-java) |  1.3.1    | Java      |  &gt; 20 minutes  | 4.2 GB    \n\n\n`fdupes-java` did not finish the test. I interrupted it after 20 minutes while\nit was still computing MD5 in stage 2/3. Unfortunately `fdupes-java` doesn't display\na useful progress bar, so it is not possible to estimate how long it would take.\n\n### HDD Benchmark \n- Model: Dell Precision M4600\n- CPU: Intel(R) Core(TM) i7-2760QM CPU @ 2.40GHz\n- RAM: 24 GB\n- System: Mint Linux 19.3, kernel 5.4.0-70-generic\n- Storage: Seagate Momentus 7200 RPM SATA drive, EXT4 filesystem  \n- Task: 51370 paths, 2 GB data, 6811 (471 MB) duplicate files\n\nCommands used:\n\n      /usr/bin/time -v fclones -R <file set root> \n      /usr/bin/time -v jdupes -R -Q <file set root>\n      /usr/bin/time -v fdupes -R <file set root>\n      /usr/bin/time -v rdfind <file set root>\n\nIn this benchmark, the page cache was dropped before each run.\n            \nProgram                                                |  Version  | Language | Threads |  Time           |  Peak Memory\n-------------------------------------------------------|-----------|----------|--------:|----------------:|-------------:\nfclones                                                |  0.9.1    | Rust     | 1       |   0:19.45       |  18.1 MB\n[rdfind](https://github.com/pauldreik/rdfind)          |  1.3.5    | C++      | 1       |   0:33.70       |  18.5 MB\n[yadf](https://github.com/jRimbault/yadf)              |  0.14.1   | Rust     |         |   1:11.69       |  22.9 MB\n[jdupes](https://github.com/jbruchon/jdupes)           |  1.9      | C        | 1       |   1:18.47       |  15.7 MB\n[fdupes](https://github.com/adrianlopezroche/fdupes)   |  1.6.1    | C        | 1       |   1:33.71       |  15.9 MB\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "sunjoonkim",
        "fclones",
        "unix",
        "duplicate files",
        "sunjoonkim fclones",
        "remove duplicate"
      ],
      "category": "file-management"
    },
    "sylphxltd--filesystem-mcp": {
      "owner": "sylphxltd",
      "name": "filesystem-mcp",
      "url": "https://github.com/sylphxltd/filesystem-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/sylphxltd.webp",
      "description": "Provides secure access to project files with capabilities for performing batch operations on files and directories. Facilitates efficient workflow management with a comprehensive set of filesystem tools.",
      "stars": 6,
      "forks": 2,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-10T06:26:46Z",
      "readme_content": "# Filesystem MCP Server (@sylphlab/filesystem-mcp)\n\n[![npm version](https://badge.fury.io/js/%40sylphlab%2Ffilesystem-mcp.svg)](https://badge.fury.io/js/%40sylphlab%2Ffilesystem-mcp)\n[![Docker Pulls](https://img.shields.io/docker/pulls/sylphlab/filesystem-mcp.svg)](https://hub.docker.com/r/sylphlab/filesystem-mcp)\n\n<!-- Add other badges like License, Build Status if applicable -->\n<a href=\"https://glama.ai/mcp/servers/@sylphlab/filesystem-mcp\">\n  \n</a>\n\n**Empower your AI agents (like Cline/Claude) with secure, efficient, and token-saving access to your project files.** This Node.js server implements the [Model Context Protocol (MCP)](https://docs.modelcontextprotocol.com/) to provide a robust set of filesystem tools, operating safely within a defined project root directory.\n\n## Installation\n\nThere are several ways to use the Filesystem MCP Server:\n\n**1. Recommended: `npx` (or `bunx`) via MCP Host Configuration**\n\nThe simplest way is via `npx` or `bunx`, configured directly in your MCP host environment (e.g., Roo/Cline's `mcp_settings.json`). This ensures you always use the latest version from npm without needing local installation or Docker.\n\n_Example (`npx`):_\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem-mcp\": {\n      \"command\": \"npx\",\n      \"args\": [\"@sylphlab/filesystem-mcp\"],\n      \"name\": \"Filesystem (npx)\"\n    }\n  }\n}\n```\n\n_Example (`bunx`):_\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem-mcp\": {\n      \"command\": \"bunx\",\n      \"args\": [\"@sylphlab/filesystem-mcp\"],\n      \"name\": \"Filesystem (bunx)\"\n    }\n  }\n}\n```\n\n**Important:** The server uses its own Current Working Directory (`cwd`) as the project root. Ensure your MCP Host (e.g., Cline/VSCode) is configured to launch the command with the `cwd` set to your active project's root directory.\n\n**2. Docker**\n\nUse the official Docker image for containerized environments.\n\n_Example MCP Host Configuration:_\n\n```json\n{\n  \"mcpServers\": {\n    \"filesystem-mcp\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"/path/to/your/project:/app\", // Mount your project to /app\n        \"sylphlab/filesystem-mcp:latest\"\n      ],\n      \"name\": \"Filesystem (Docker)\"\n    }\n  }\n}\n```\n\n**Remember to replace `/path/to/your/project` with the correct absolute path.**\n\n**3. Local Build (For Development)**\n\n1.  Clone: `git clone https://github.com/sylphlab/filesystem-mcp.git`\n2.  Install: `cd filesystem-mcp && pnpm install` (Using pnpm now)\n3.  Build: `pnpm run build`\n4.  Configure MCP Host:\n    ```json\n    {\n      \"mcpServers\": {\n        \"filesystem-mcp\": {\n          \"command\": \"node\",\n          \"args\": [\"/path/to/cloned/repo/filesystem-mcp/dist/index.js\"], // Updated build dir\n          \"name\": \"Filesystem (Local Build)\"\n        }\n      }\n    }\n    ```\n    **Note:** Launch the `node` command from the directory you intend as the project root.\n\n## Quick Start\n\nOnce the server is configured in your MCP host (see Installation), your AI agent can immediately start using the filesystem tools.\n\n_Example Agent Interaction (Conceptual):_\n\n```\nAgent: <use_mcp_tool>\n         <server_name>filesystem-mcp</server_name>\n         <tool_name>read_content</tool_name>\n         <arguments>{\"paths\": [\"src/index.ts\"]}</arguments>\n       </use_mcp_tool>\n\nServer Response: (Content of src/index.ts)\n```\n\n## Why Choose This Project?\n\n- **🛡️ Secure & Convenient Project Root Focus:** Operations confined to the project root (`cwd` at launch).\n- **⚡ Optimized & Consolidated Tools:** Batch operations reduce AI-server round trips, saving tokens and latency. Reliable results for each item in a batch.\n- **🚀 Easy Integration:** Quick setup via `npx`/`bunx`.\n- **🐳 Containerized Option:** Available as a Docker image.\n- **🔧 Comprehensive Functionality:** Covers a wide range of filesystem tasks.\n- **✅ Robust Validation:** Uses Zod schemas for argument validation.\n\n## Performance Advantages\n\n_(Placeholder: Add benchmark results and comparisons here, demonstrating advantages over alternative methods like individual shell commands.)_\n\n- **Batch Operations:** Significantly reduces overhead compared to single operations.\n- **Direct API Usage:** More efficient than spawning shell processes for each command.\n- _(Add specific benchmark data when available)_\n\n## Features\n\nThis server equips your AI agent with a powerful and efficient filesystem toolkit:\n\n- 📁 **Explore & Inspect (`list_files`, `stat_items`):** List files/directories (recursive, stats), get detailed status for multiple items.\n- 📄 **Read & Write Content (`read_content`, `write_content`):** Read/write/append multiple files, creates parent directories.\n- ✏️ **Precision Editing & Searching (`edit_file`, `search_files`, `replace_content`):** Surgical edits (insert, replace, delete) across multiple files with indentation preservation and diff output; regex search with context; multi-file search/replace.\n- 🏗️ **Manage Directories (`create_directories`):** Create multiple directories including intermediate parents.\n- 🗑️ **Delete Safely (`delete_items`):** Remove multiple files/directories recursively.\n- ↔️ **Move & Copy (`move_items`, `copy_items`):** Move/rename/copy multiple files/directories.\n- 🔒 **Control Permissions (`chmod_items`, `chown_items`):** Change POSIX permissions and ownership for multiple items.\n\n**Key Benefit:** All tools accepting multiple paths/operations process each item individually and return a detailed status report.\n\n## Design Philosophy\n\n_(Placeholder: Explain the core design principles.)_\n\n- **Security First:** Prioritize preventing access outside the project root.\n- **Efficiency:** Minimize communication overhead and token usage for AI interactions.\n- **Robustness:** Provide detailed results and error reporting for batch operations.\n- **Simplicity:** Offer a clear and consistent API via MCP.\n- **Standard Compliance:** Adhere strictly to the Model Context Protocol.\n\n## Comparison with Other Solutions\n\n_(Placeholder: Objectively compare with alternatives.)_\n\n| Feature/Aspect          | Filesystem MCP Server | Individual Shell Commands (via Agent) | Other Custom Scripts |\n| :---------------------- | :-------------------- | :------------------------------------ | :------------------- |\n| **Security**            | High (Root Confined)  | Low (Agent needs shell access)        | Variable             |\n| **Efficiency (Tokens)** | High (Batching)       | Low (One command per op)              | Variable             |\n| **Latency**             | Low (Direct API)      | High (Shell spawn overhead)           | Variable             |\n| **Batch Operations**    | Yes (Most tools)      | No                                    | Maybe                |\n| **Error Reporting**     | Detailed (Per item)   | Basic (stdout/stderr parsing)         | Variable             |\n| **Setup**               | Easy (npx/Docker)     | Requires secure shell setup           | Custom               |\n\n## Future Plans\n\n_(Placeholder: List upcoming features or improvements.)_\n\n- Explore file watching capabilities.\n- Investigate streaming support for very large files.\n- Enhance performance for specific operations.\n- Add more advanced filtering options for `list_files`.\n\n## Documentation\n\n_(Placeholder: Add link to the full documentation website once available.)_\n\nFull documentation, including detailed API references and examples, will be available at: [Link to Docs Site]\n\n## Contributing\n\nContributions are welcome! Please open an issue or submit a pull request on the [GitHub repository](https://github.com/sylphlab/filesystem-mcp).\n\n## License\n\nThis project is released under the [MIT License](LICENSE).\n\n---\n\n## Development\n\n1. Clone: `git clone https://github.com/sylphlab/filesystem-mcp.git`\n2. Install: `cd filesystem-mcp && pnpm install`\n3. Build: `pnpm run build` (compiles TypeScript to `dist/`)\n4. Watch: `pnpm run dev` (optional, recompiles on save)\n\n## Publishing (via GitHub Actions)\n\nThis repository uses GitHub Actions (`.github/workflows/publish.yml`) to automatically publish the package to [npm](https://www.npmjs.com/package/@sylphlab/filesystem-mcp) and build/push a Docker image to [Docker Hub](https://hub.docker.com/r/sylphlab/filesystem-mcp) on pushes of version tags (`v*.*.*`) to the `main` branch. Requires `NPM_TOKEN`, `DOCKERHUB_USERNAME`, and `DOCKERHUB_TOKEN` secrets configured in the GitHub repository settings.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filesystem",
        "sylphxltd",
        "files",
        "sylphxltd filesystem",
        "filesystem mcp",
        "filesystem tools"
      ],
      "category": "file-management"
    },
    "taha-ghadirian--FileManagerMcp": {
      "owner": "taha-ghadirian",
      "name": "FileManagerMcp",
      "url": "https://github.com/taha-ghadirian/FileManagerMcp",
      "imageUrl": "/freedevtools/mcp/pfp/taha-ghadirian.webp",
      "description": "Manage remote FTP files and directories through an intuitive interface, allowing users to upload, download, delete, and organize files recursively.",
      "stars": 9,
      "forks": 0,
      "license": "GNU General Public License v3.0",
      "language": "C#",
      "updated_at": "2025-09-18T18:08:46Z",
      "readme_content": "# File Manager MCP 📂\n\n[![License: GPL v3](https://img.shields.io/badge/License-GPLv3-blue.svg)](https://www.gnu.org/licenses/gpl-3.0)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/yourusername/FileManagerMcp/graphs/commit-activity)\n[![smithery badge](https://smithery.ai/badge/@taha-ghadirian/filemanagermcp)](https://smithery.ai/server/@taha-ghadirian/filemanagermcp)\n\nA powerful and user-friendly File Manager application that provides a modern interface for managing FTP file operations.\n\n> 🤖 **AI-Powered Development**: This project is a result of vibe coding through AI prompt engineering. The entire codebase was developed by collaborating with AI, showcasing the potential of modern AI-assisted development practices.\n\n## 🚀 Features\n\n- 📁 Browse and manage remote FTP directories\n- ⬆️ Upload files and directories\n- ⬇️ Download files and directories\n- 🗑️ Delete files and directories\n- 📝 Create new directories\n- 🔄 Recursive file operations support\n- 💻 Clean and intuitive user interface\n\n## 🚀 Usage\n\n### Using Smithery Hosted Service (Recommended) \n\n1. Visit [File Manager on smithery](https://smithery.ai/server/@taha-ghadirian/filemanagermcp)\n\n2. Create an account or sign in\n\n3. Connect using your preferred development environment:\n   - Visual Studio Code\n   - Cursor\n   - Any IDE or tool with MCP integration\n\n### Alternative: Local Installation\n\nIf you prefer running the application locally, follow these steps:\n\n1. Make sure you have the [.NET 9.0 SDK](https://dotnet.microsoft.com/en-us/download/dotnet/9.0) installed\n2. Follow the installation steps below to build and run the application\n\n### 🛠️ Build and Run Locally\n\n1. Clone the repository:\n   \n   HTTPS:\n   ```bash\n   git clone https://github.com/taha-ghadirian/FileManagerMcp.git\n   ```\n   \n   SSH:\n   ```bash\n   git clone git@github.com:taha-ghadirian/FileManagerMcp.git\n   ```\n\n   Then navigate to the project directory:\n   ```bash\n   cd FileManagerMcp\n   ```\n\n2. Install dependencies:\n```bash\ndotnet restore\n```\n\n3. Build the project:\n```bash\ndotnet build\n```\n\n4. Run the application in inspector:\n```bash\nnpx @modelcontextprotocol/inspector dotnet run\n```\n\n## 🔧 Configuration\n\nThe application uses environment variables for configuration. Here are the required environment variables:\n\n| Option | Description | Required | Default |\n|----------|-------------|----------|---------|\n| `ftpHost` | FTP server hostname or IP address | Yes | - |\n| `ftpUsername` | FTP account username | Yes | - |\n| `ftpPassword` | FTP account password | Yes | - |\n| `ftpPort` | FTP server port | No | 21 |\n\nYou can set these environment variables in several ways:\n\n1. Setting them inline when running the application:\n   ```bash\n   ftpHost=ftp.example.com ftpUsername=myuser ftpPassword=mypassword npx @modelcontextprotocol/inspector dotnet run\n   ```\n\n⚠️ **Security Note**: Never commit sensitive information like passwords to version control. Always use environment variables or secure secrets management for production deployments.\n\n\n## 🤝 Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n1. Fork the project\n2. Create your feature branch (`git checkout -b feature/AmazingFeature`)\n3. Commit your changes (`git commit -m 'Add some AmazingFeature'`)\n4. Push to the branch (`git push origin feature/AmazingFeature`)\n5. Open a Pull Request\n\n## 📝 License\n\nThis project is licensed under the GNU General Public License v3.0 - see the [LICENSE](LICENSE) file for details. This means:\n\n- You can freely use, modify, and distribute this software\n- If you modify and distribute this software, you must:\n  - Make your source code available\n  - License your modifications under GPL v3.0\n  - Document your changes\n  - Preserve the original copyright notices\n\n## 📞 Support\n\nIf you have any questions or need support, please open an issue in the GitHub repository.\n\n## ✨ Acknowledgments\n\n- Thanks to all contributors who have helped shape this project\n- Built with .NET and modern best practices\n\n---\n\nMade with ❤️ by Taha Ghadirian",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "filemanagermcp",
        "ftp",
        "files",
        "ghadirian filemanagermcp",
        "filemanagermcp manage",
        "ftp files"
      ],
      "category": "file-management"
    },
    "taxihabbel--parsemypdf": {
      "owner": "taxihabbel",
      "name": "parsemypdf",
      "url": "https://github.com/taxihabbel/parsemypdf",
      "imageUrl": "/freedevtools/mcp/pfp/taxihabbel.webp",
      "description": "Extract and analyze complex PDF documents using various tools to maintain document structure and efficiently extract tables, images, and mixed content. Specialized processors are available tailored to the complexity and content type of the PDFs.",
      "stars": 1,
      "forks": 0,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-08-13T22:52:33Z",
      "readme_content": "<div align=\"center\">\n<h1><a href=\"https://www.instagram.com/genieincodebottle/\"><img width=\"200\" src=\"https://github.com/genieincodebottle/generative-ai/blob/main/images/logo_genie_new.png\">&nbsp;</a></h1>\n</div>\n<div align=\"center\">\n    <a target=\"_blank\" href=\"https://www.youtube.com/@genieincodebottle\"><img src=\"https://img.shields.io/badge/YouTube-@genieincodebottle-blue\"></a>&nbsp;\n    <a target=\"_blank\" href=\"https://www.linkedin.com/in/rajesh-srivastava\"><img src=\"https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&logo=linkedin&style=social\"></a>&nbsp;\n    <a target=\"_blank\" href=\"https://www.instagram.com/genieincodebottle/\"><img src=\"https://img.shields.io/badge/@genieincodebottle-C13584?style=flat-square&labelColor=C13584&logo=instagram&logoColor=white&link=https://www.instagram.com/eduardopiresbr/\"></a>&nbsp;\n    <a target=\"_blank\" href=\"https://github.com/genieincodebottle/generative-ai/blob/main/GenAI_Roadmap.md\"><img src=\"https://img.shields.io/badge/style--5eba00.svg?label=GenAI Roadmap&logo=github&style=social\"></a>\n</div>\n\n#  \n\n# 📑 Complex PDF Parsing\n\nA comprehensive example codes for extracting content from PDFs\n\nAlso, check -> [Pdf Parsing Guide](https://github.com/genieincodebottle/parse-my-pdf/blob/main/pdf-parsing-guide.pdf)\n\n## 📌 Core Features\n\n### 📤 Content Extraction\n- Multiple extraction methods with different tools/libraries:\n  - Cloud-based: Claude 3.5 Sonnet, GPT-4 Vision, Unstructured.io\n  - Local: Llama 3.2 11B, Docling, PDFium\n  - Specialized: Camelot (tables), PDFMiner (text), PDFPlumber (mixed), PyPdf etc\n- Maintains document structure and formatting\n- Handles complex PDFs with mixed content including extracting image data\n\n\n## 📦 Implementation Options\n\n### 1. ☁️ Cloud-Based Methods\n- **Claude & Llama**: Excellent  for complex PDFs with mixed content\n- **GPT-4 Vision**: Excellent for visual content analysis\n- **Unstructured.io**: Advanced content partitioning and classification\n\n### 2. 🖥️ Local Methods\n- **Llama 3.2 11B Vision**: Image-based PDF processing\n- **Docling**: Excellent  for complex PDFs with mixed content\n- **PDFium**: High-fidelity processing using Chrome's PDF engine\n- **Camelot**: Specialized table extraction\n- **PDFMiner/PDFPlumber**: Basic text and layout extraction\n\n## 🔗 Dependencies\n\n### 📚 Core Libraries\n```bash\nlangchain_ollama\nlangchain_huggingface\nlangchain_community\nFAISS\npython-dotenv\n```\n\n### ⚙️ Implementation-Specific\n```bash\nanthropic        # Claude\nopenai           # GPT-4 Vision\ncamelot-py      # Table extraction\ndocling         # Text processing\npdf2image       # PDF conversion\npypdfium2       # PDFium processing\nboto3           # AWS Textract\n```\n\n## 🛠️ Setup\n\n1. Environment Variables\n```bash\nANTHROPIC_API_KEY=your_key_here    # For Claude\nOPENAI_API_KEY=your_key_here       # For OpenAI\nUNSTRUCTURED_API_KEY=your_key_here # For Unstructured.io\n```\n\n2. Install Dependencies\n```bash\npip install -r requirements.txt\n```\n\n3. Install Ollama & Models (for local processing)\n```bash\n# Install Ollama\ncurl https://ollama.ai/install.sh | sh\n\n# Pull required models\nollama pull llama3.1\nollama pull x/llama3.2-vision:11b\n```\n\n## 📈 Usage\n\n1. Place PDF files in `input/` directory\n\n## 📄 Example Complex Pdf placed in Input folder\n- **sample-1.pdf**: Standard tables\n- **sample-2.pdf**: Image-based simple tables\n- **sample-3.pdf**: Image-based complex tables\n- **sample-4.pdf**: Mixed content (text, tables, images)\n\n## 📝 Notes\n- System resources needed for local LLM operations\n- API keys required for cloud based implementations\n- Consider PDF complexity when choosing implementation\n- Ghostscript required for Camelot\n- Different processors suit different use cases\n  - Cloud: Complex documents, mixed content\n  - Local: Simple text, basic tables\n  - Specialized: Specific content types (tables, forms)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "parsemypdf",
        "pdfs",
        "pdf",
        "parsemypdf extract",
        "taxihabbel parsemypdf",
        "pdf documents"
      ],
      "category": "file-management"
    },
    "trafflux--pdf-reader-mcp": {
      "owner": "trafflux",
      "name": "pdf-reader-mcp",
      "url": "https://github.com/trafflux/pdf-reader-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/trafflux.webp",
      "description": "Extracts text from both local and online PDF files with robust error handling and standardized output. Supports various PDF formats and includes features for auto-detection of encoding and volume mounting.",
      "stars": 31,
      "forks": 8,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-10-02T09:42:50Z",
      "readme_content": "# PDF Reader MCP Server\n\nA Model Context Protocol (MCP) server that provides tools for reading and extracting text from PDF files, supporting both local files and URLs.\n\n## Author\n\nPhilip Van de Walker  \nEmail: philip.vandewalker@gmail.com  \nGitHub: https://github.com/trafflux\n\n## Features\n\n- Read text content from local PDF files\n- Read text content from PDF URLs\n- Error handling for corrupt or invalid PDFs\n- Volume mounting for accessing local PDFs\n- Auto-detection of PDF encoding\n- Standardized JSON output format\n\n## Installation\n\n1. Clone the repository:\n\n```bash\ngit clone https://github.com/trafflux/pdf-reader-mcp.git\ncd pdf-reader-mcp\n```\n\n2. Build the Docker image:\n\n```bash\ndocker build -t mcp/pdf-reader .\n```\n\n## Usage\n\n### Running the Server\n\nTo run the server with access to local PDF files:\n\n```bash\ndocker run -i --rm -v /path/to/pdfs:/pdfs mcp/pdf-reader\n```\n\nReplace `/path/to/pdfs` with the actual path to your PDF files directory.\n\nIf not using local PDF files:\n\n```bash\ndocker run -i --rm mcp/pdf-reader\n```\n\n### MCP Configuration\n\nAdd to your MCP settings configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"pdf-reader\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\",\n        \"/path/to/pdfs:/pdfs\",\n        \"mcp/pdf-reader\"\n      ],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\nWithout local file PDF files:\n\n```json\n{\n  \"mcpServers\": {\n    \"pdf-reader\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"mcp/pdf-reader\"],\n      \"disabled\": false,\n      \"autoApprove\": []\n    }\n  }\n}\n```\n\n### Available Tools\n\n1. `read_local_pdf`\n\n   - Purpose: Read text content from a local PDF file\n   - Input:\n     ```json\n     {\n       \"path\": \"/pdfs/document.pdf\"\n     }\n     ```\n   - Output:\n     ```json\n     {\n       \"success\": true,\n       \"data\": {\n         \"text\": \"Extracted content...\"\n       }\n     }\n     ```\n\n2. `read_pdf_url`\n   - Purpose: Read text content from a PDF URL\n   - Input:\n     ```json\n     {\n       \"url\": \"https://example.com/document.pdf\"\n     }\n     ```\n   - Output:\n     ```json\n     {\n       \"success\": true,\n       \"data\": {\n         \"text\": \"Extracted content...\"\n       }\n     }\n     ```\n\n## Error Handling\n\nThe server handles various error cases with clear error messages:\n\n- Invalid or corrupt PDF files\n- Missing files\n- Failed URL requests\n- Permission issues\n- Network connectivity problems\n\nError responses follow the format:\n\n```json\n{\n  \"success\": false,\n  \"error\": \"Detailed error message\"\n}\n```\n\n## Dependencies\n\n- Python 3.11+\n- PyPDF2: PDF parsing and text extraction\n- requests: HTTP client for fetching PDFs from URLs\n- MCP SDK: Model Context Protocol implementation\n\n## Project Structure\n\n```\n.\n├── Dockerfile          # Container configuration\n├── README.md          # This documentation\n├── requirements.txt   # Python dependencies\n└── src/\n    ├── __init__.py    # Package initialization\n    └── server.py      # Main server implementation\n```\n\n## License\n\nCopyright 2025 Philip Van de Walker\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## Contact\n\nFor questions, issues, or contributions, please contact Philip Van de Walker:\n\n- Email: philip.vandewalker@gmail.com\n- GitHub: https://github.com/trafflux\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pdf",
        "trafflux",
        "formats",
        "pdf reader",
        "trafflux pdf",
        "pdf formats"
      ],
      "category": "file-management"
    },
    "tuki0918--eagle-mcp-server": {
      "owner": "tuki0918",
      "name": "eagle-mcp-server",
      "url": "https://github.com/tuki0918/eagle-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/tuki0918.webp",
      "description": "Integrates with the Eagle app to manage and interact with digital assets through a standardized MCP interface, enabling operations such as folder and item management, metadata retrieval, and media handling.",
      "stars": 3,
      "forks": 1,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-22T11:24:54Z",
      "readme_content": "# Eagle MCP Server (Unofficial)\n\n> [!NOTE]\n> [Official MCP support is planned for Eagle v5 (public beta in Q1 2026)](https://eagle.cool/blog/post/eagle5-teaser)\n\n\n\nA Model Context Protocol (MCP) server for Eagle.\n\n<details>\n\n<summary>Supported file formats:</summary>\n\n- `JPG` / `JPEG`\n- `PNG`\n- `PDF`\n- `SVG`\n- `MP4`\n- `MP3`\n- `FBX`\n- `OBJ`\n- `EPS`\n- `TIF` / `TIFF`\n- `WebP`\n- `BMP`\n- `ICO`\n- `RAW`\n- etc\n\n</details>\n\n- Eagle: https://eagle.cool/<br />\n- Eagle API docs: https://api.eagle.cool/<br />\n\n## Requirements\n\n- Python 3.13\n- [uv](https://docs.astral.sh/uv/)\n\n## Prerequisites\n\nInstall the required dependencies:\n\n```bash\nuv sync\n```\n\n## Usage\n\n1. Launch the [Eagle](https://eagle.cool/) app.\n2. Launch this MCP server by running the following command:\n\n```bash\nuv run main.py\n```\n\n\n## Connecting to the MCP Server using Streamable HTTP\n\nExample config (Cursor editor recommended):\n\n```\n{\n  \"mcpServers\": {\n    \"eagle-mcp-server\": {\n      \"url\": \"http://localhost:8000/mcp\"\n    }\n  }\n}\n```\n\n## Tools\n\n| Supported | Eagle API endpoint | Operation ID | Enabled (default) | Category |\n|:----:|:---------------------------|:-------------------------|:----:|:------------|\n| ✅ | -               | `connect`                |  | MCP         |\n| ✅ | /api/application/info      | `get_application_info`   | ⚫︎ | Application |\n| ✅ | /api/folder/create         | `create_folder`          | ⚫︎ | Folder      |\n| ✅ | /api/folder/rename         | `rename_folder`          |  | Folder      |\n| ✅ | /api/folder/update         | `update_folder`          | ⚫︎ | Folder      |\n| ✅ | /api/folder/list           | `get_folder_list`        | ⚫︎ | Folder      |\n| ✅ | /api/folder/listRecent     | `get_folder_list_recent` |  | Folder      |\n| ✅ | /api/item/addFromURL       | `add_item_from_url`      |  | Item        |\n| ✅ | /api/item/addFromURLs      | `add_items_from_urls`    |  | Item        |\n| ✅ | /api/item/addFromPath      | `add_item_from_path`     | ⚫︎ | Item        |\n| ✅ | /api/item/addFromPaths     | `add_items_from_paths`   |  | Item        |\n| ✅ | /api/item/addBookmark      | `add_bookmark`           |  | Item        |\n| ✅ | /api/item/info             | `get_item_info`          | ⚫︎ | Item        |\n| ✅ | -           | `get_item_source`        | ⚫︎ | Item        |\n| ✅ | /api/item/thumbnail        | `get_item_thumbnail`     |  | Item        |\n| ✅ | /api/item/list             | `get_item_list`          | ⚫︎ | Item        |\n| ✅ | /api/item/moveToTrash      | `move_item_to_trash`     | ⚫︎ | Item        |\n| ✅ | /api/item/refreshPalette   | `refresh_item_palette`   |  | Item        |\n| ✅ | /api/item/refreshThumbnail | `refresh_item_thumbnail` |  | Item        |\n| ✅ | /api/item/update           | `update_item`            | ⚫︎ | Item        |\n| ✅ | /api/library/info          | `get_library_info`       | ⚫︎ | Library     |\n| ✅ | /api/library/history       | `get_library_history`    |  | Library     |\n| ✅ | /api/library/switch        | `switch_library`         |  | Library     |\n| ✅ | /api/library/icon          | `get_library_icon`       |  | Library     |\n\nMCP Server API docs: \n- https://tuki0918.github.io/eagle-mcp-server/\n- http://localhost:8000/redoc\n\n## Enabling Disabled Tools\n\nSome tools are disabled by default (shown as empty cells in the \"Enabled (default)\" column above). To enable these disabled tools:\n\n1. Locate the tool definition in the source code\n2. Remove the `tags=[\"Disabled\"]` line from the tool configuration\n3. Restart the MCP server\n\nThis will make the previously disabled tools available for use.\n\n## Use Cases\n\n### 1) Same Host (Recommended)\n\n```mermaid\nflowchart LR\n\n    subgraph 192.168.1.100\n        direction LR\n        \n        subgraph FileSystem [File System]\n        end\n        subgraph EagleApp [Eagle App<br/>localhost:41595]\n        end\n        subgraph MCPServer [MCP Server<br/>localhost:8000]\n        end\n        subgraph MCPClient [MCP Client]\n        end\n    end\n\n    EagleApp ==> MCPServer e1@==> MCPClient\n    MCPClient e2@==> MCPServer ==> EagleApp\n    EagleApp ==> FileSystem\n    FileSystem ==> EagleApp\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n```\n\n> [!TIP]\n> You have direct access to the filesystem.\n\n### 2) Other Host (MCP Client) + Same Host (MCP Server, Eagle App)\n\n```mermaid\nflowchart LR\n  \n    subgraph 192.168.1.100\n        subgraph FileSystem [File System]\n        end\n        subgraph EagleApp [Eagle App<br/>localhost:41595]\n        end\n        subgraph MCPServer [MCP Server<br/>localhost:8000]\n        end\n    end\n\n    subgraph 192.168.1.xxx\n        subgraph MCPClient [MCP Client]\n        end\n    end\n\n    EagleApp ==> MCPServer e1@==> MCPClient\n    MCPClient e2@==> MCPServer ==> EagleApp\n    EagleApp ==> FileSystem\n    FileSystem ==> EagleApp\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n```\n\n> [!WARNING]\n> You don't have access to the filesystem.\n\n### 3) Other Host\n\n```mermaid\nflowchart LR\n\n    subgraph 192.168.1.100\n        subgraph FileSystem [File System]\n        end\n        subgraph EagleApp [Eagle App<br/>localhost:41595]\n        end\n    end\n\n    subgraph 192.168.1.101\n        subgraph MCPServer [MCP Server<br/>localhost:8000]\n        end\n    end\n\n    subgraph 192.168.1.xxx\n        subgraph MCPClient [MCP Client]\n        end\n    end\n\n    EagleApp ==> MCPServer e1@==> MCPClient\n    MCPClient e2@==> MCPServer ==> EagleApp\n    EagleApp ==> FileSystem\n    FileSystem ==> EagleApp\n\n    e1@{ animate: true }\n    e2@{ animate: true }\n```\n\n> [!WARNING]\n> You don't have access to the filesystem.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "eagle",
        "mcp",
        "server",
        "eagle mcp",
        "integrates eagle",
        "mcp server"
      ],
      "category": "file-management"
    },
    "tuskermanshu--compress-mcp-server": {
      "owner": "tuskermanshu",
      "name": "compress-mcp-server",
      "url": "https://github.com/tuskermanshu/compress-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/tuskermanshu.webp",
      "description": "Provides file compression and decompression services that support multiple formats such as gzip, tar.gz, ZIP, and 7z, ensuring secure and efficient file processing. The server features strict parameter validation, detailed progress reporting, and precise error handling.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-08-26T01:55:01Z",
      "readme_content": "# Compress Files\n\n[![smithery badge](https://smithery.ai/badge/@tuskermanshu/compress-mcp-server)](https://smithery.ai/server/@tuskermanshu/compress-mcp-server)\n\n基于TypeScript和fastmcp框架实现的具有文件压缩和解压功能的MCP服务器。\n\n## 项目概述\n\n本项目使用Model Context Protocol (MCP)技术，结合fastmcp框架，实现一个可以提供文件压缩和解压缩服务的MCP服务器。服务器将能够接收客户端的压缩和解压缩请求，处理文件，并返回结果。\n\n## 技术栈\n\n- TypeScript\n- fastmcp\n- pnpm (包管理)\n- node-zlib (用于gzip压缩功能)\n- tar & tar-stream (用于文件夹压缩/解压)\n- jszip (用于ZIP格式支持)\n- node-7z (用于7z格式支持)\n- zod (用于参数验证)\n\n## 项目特点\n\n- 完全符合MCP规范的工具实现\n- 严格的参数验证和类型检查\n- 详细的进度报告\n- 精确的错误处理\n- 友好的用户反馈\n- 安全的文件处理（防止路径遍历攻击）\n- 多种压缩格式支持\n- 标准化的返回格式\n\n## 架构设计\n\n项目采用模块化、可扩展的架构，基于策略模式和工厂模式，使得添加新的压缩格式变得简单。\n\n### 核心组件\n\n1. **压缩处理器接口 (CompressionHandler)**：\n   - 定义了所有格式处理器必须实现的方法\n   - 包括压缩、解压和内容列表三个主要功能\n   - 提供格式检验和元数据访问方法\n\n2. **格式注册表 (FormatRegistry)**：\n   - 管理所有已注册的格式处理器\n   - 根据格式名称或文件扩展名查找对应处理器\n   - 支持动态注册新的处理器\n\n3. **统一压缩工具 (UnifiedCompressionTool)**：\n   - 提供单一工具入口\n   - 解析参数并路由到相应的处理器实例\n   - 标准化输入和输出\n\n4. **公共工具类 (CompressionUtils)**：\n   - 提供所有处理器共享的通用功能\n   - 处理路径规范化、文件存在检查等\n   - 格式化错误消息和操作结果\n\n### 扩展方式\n\n添加新的压缩格式只需要以下步骤：\n\n1. 创建新的格式处理器类，实现CompressionHandler接口\n2. 在主程序中注册新的处理器\n3. 无需修改统一工具接口或其他组件\n\n例如，添加新的RAR格式支持：\n\n```typescript\n// 1. 创建RAR处理器类\nclass RarHandler implements CompressionHandler {\n  // 实现必要的方法\n}\n\n// 2. 在注册函数中添加\nfunction registerHandlers() {\n  // 现有处理器\n  registry.register('gzip', new GzipHandler());\n  \n  // 添加新的RAR处理器\n  registry.register('rar', new RarHandler());\n}\n```\n\n### 架构优势\n\n1. **关注点分离** - 每个处理器只关心自己的格式实现\n2. **高度可扩展** - 轻松添加新的格式支持\n3. **代码复用** - 共享通用功能，减少重复代码\n4. **维护性好** - 修改一个格式不会影响其他格式\n5. **便于测试** - 可以单独测试每个组件\n\n## 实施步骤\n\n### 1. 项目初始化与环境搭建\n- [x] 创建项目目录\n- [x] 初始化pnpm项目\n- [x] 安装必要依赖(fastmcp, typescript等)\n- [x] 配置TypeScript\n\n### 2. 服务器基础架构设计\n- [x] 创建主服务器文件\n- [x] 配置服务器基本参数\n- [x] 设置服务器启动配置\n\n### 3. 压缩工具功能实现\n- [x] 设计压缩文件工具\n- [x] 实现单文件压缩功能\n- [x] 实现多文件/目录压缩功能\n- [x] 支持多种压缩格式(tar.gz, zip, 7z)\n\n### 4. 解压工具功能实现\n- [x] 设计解压文件工具\n- [x] 实现解压缩功能\n- [x] 添加解压路径选择功能\n\n### 5. 资源管理功能\n- [x] 实现压缩文件预览功能\n- [x] 实现压缩文件内容列表功能\n\n### 6. 用户交互优化\n- [x] 添加进度报告功能\n- [x] 实现错误处理机制\n- [x] 添加安全机制（路径验证等）\n- [x] 实现标准化返回格式\n\n### 7. MCP规范兼容性\n- [x] 更新工具输出格式以符合MCP规范\n- [x] 添加isError标识\n- [x] 标准化content字段\n- [x] 使用类型化的text返回\n\n### 8. 工具架构优化\n- [x] 重构为模块化架构\n- [x] 实现格式处理器接口\n- [x] 创建格式注册表\n- [x] 统一工具接口设计\n\n### 9. 测试与部署\n- [x] 基本功能测试\n- [ ] 编写单元测试\n- [ ] 进行集成测试\n- [ ] 优化性能\n- [ ] 准备部署文档\n\n## 当前进度\n\n目前已完成基本的服务器架构设计和主要功能实现，支持多种压缩格式。最新版本采用模块化、可扩展的架构，便于后续扩展和维护。\n\n### 支持的压缩格式:\n\n1. **gzip格式**：适用于单个文件压缩\n2. **tar.gz格式**：适用于文件夹压缩\n3. **ZIP格式**：通用的压缩格式，支持文件和文件夹\n4. **7z格式**：高压缩率格式，支持文件和文件夹\n\n所有工具都经过全面升级，具有以下功能：\n\n- 严格的参数验证和类型检查（使用zod）\n- 安全的文件路径处理（防止路径遍历攻击）\n- 详细的进度报告（支持实时进度百分比）\n- 精确的错误处理和友好的错误信息\n- 标准化的MCP返回格式\n\n## 目录结构\n\n```\nsrc/\n├── handlers/               # 各种格式的具体处理器实现\n│   ├── gzip-handler.ts     # GZIP格式处理器\n│   ├── tar-gz-handler.ts   # TAR.GZ格式处理器\n│   ├── zip-handler.ts      # ZIP格式处理器\n│   └── 7z-handler.ts       # 7Z格式处理器\n├── interfaces/             # 接口定义\n│   └── compression-handler.ts # 压缩处理器接口\n├── registry/               # 处理器注册表\n│   └── format-registry.ts  # 格式注册表实现\n├── tools/                  # MCP工具定义\n│   ├── unified-compression.ts # 统一压缩工具\n│   └── legacy/             # 旧版工具（保持兼容）\n├── utils/                  # 通用工具类\n│   └── compression-utils.ts # 压缩相关通用功能\n└── index.ts                # 主入口点\n```\n\n## 下一步计划\n\n1. 完成其他格式处理器的实现\n2. 优化压缩和解压性能\n3. 添加更多格式支持（如rar等）\n4. 实现流式处理以支持更大文件\n5. 添加文件加密/解密功能\n6. 编写测试用例\n7. 发布至NPM\n\n## 安装方法\n\n### Installing via Smithery\n\nTo install 压缩功能服务器 for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@tuskermanshu/compress-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @tuskermanshu/compress-mcp-server --client claude\n```\n\n### Manual Installation\n1. 克隆本仓库\n```bash\ngit clone <仓库地址>\ncd zip-mcp-server\n```\n\n2. 安装依赖\n```bash\npnpm install\n```\n\n3. 构建项目\n```bash\npnpm build\n```\n\n4. 运行服务器\n```bash\n# 直接启动\npnpm start\n\n# 开发模式\npnpm dev\n\n# 使用MCP Inspector测试\npnpm inspect\n```\n\n## 可用工具\n\n### 统一压缩工具（推荐使用）\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `compression` | 统一的压缩/解压/列表工具，支持多种格式 | operation, format, sourcePath, outputDirectory, outputFileName, compressionLevel, stripComponents, previewLength |\n\n### 原版独立工具（已弃用）\n\n| 工具名称 | 描述 | 主要参数 |\n|---------|------|---------|\n| `zip` | 压缩单个文件为gzip格式 | sourceFilePath, outputDirectory, outputFileName, compressionLevel |\n| `unzip` | 解压gzip格式的文件 | sourceFilePath, outputDirectory, outputFileName |\n| `list-zip-contents` | 列出压缩文件的内容预览 | sourceFilePath, previewLength |\n| `zip-folder` | 压缩文件夹为tar.gz格式 | sourceFolderPath, outputDirectory, outputFileName, compressionLevel |\n| `unzip-folder` | 解压tar.gz格式的压缩文件夹 | sourceArchivePath, outputDirectory, stripComponents |\n| `zip-archive` | 使用ZIP格式压缩文件或文件夹 | sourcePath, outputDirectory, outputFileName, compressionLevel |\n| `7z-archive` | 使用7z格式压缩文件或文件夹 | sourcePath, outputDirectory, outputFileName, compressionLevel |\n\n## 支持的压缩格式\n\n| 格式 | 特点 | 适用场景 |\n|------|------|---------|\n| gzip (.gz) | 单文件压缩，速度快 | 单个文本文件，日志文件等 |\n| tar.gz | 保留目录结构，Unix/Linux常用 | 文件夹压缩，特别是在Unix/Linux系统 |\n| ZIP (.zip) | 通用格式，兼容性好 | 跨平台场景，需要分享给Windows用户 |\n| 7z (.7z) | 高压缩比 | 大文件压缩，需要更高压缩率 |\n\n## 统一压缩工具详细说明\n\n新版本采用统一的压缩工具接口，提供一致的用户体验和更简单的接口。\n\n### compression (统一压缩工具)\n\n一站式工具，支持多种压缩格式和操作，包括压缩、解压和查看文件内容。\n\n参数：\n- `operation`: 操作类型（必需）\n  - `compress`: 压缩文件或文件夹\n  - `decompress`: 解压文件\n  - `list`: 列出压缩文件内容\n- `format`: 压缩格式（必需）\n  - `gzip`: 单文件压缩格式\n  - `tar.gz`: 文件夹压缩格式\n  - `zip`: 通用ZIP压缩格式\n  - `7z`: 高压缩比7z格式\n- `sourcePath`: 源文件或文件夹路径（必需）\n- `outputDirectory`: 输出目录，默认为源文件/文件夹所在目录\n- `outputFileName`: 输出文件名，默认基于源名称和格式自动生成\n- `compressionLevel`: 压缩级别(1-9)，默认为6\n- `stripComponents`: 解压时忽略的目录层级数量（仅用于解压tar.gz）\n- `previewLength`: 列出内容时的预览长度（字节数），默认为1000\n\n## 扩展指南\n\n### 添加新的压缩格式\n\n1. 在`src/handlers`目录下创建新的处理器类文件，例如`rar-handler.ts`\n2. 实现`CompressionHandler`接口的所有方法\n3. 在`src/index.ts`中的`registerHandlers`函数中注册新的处理器\n\n```typescript\n// src/handlers/rar-handler.ts\nexport class RarHandler implements CompressionHandler {\n  // 实现所有必要的接口方法\n}\n\n// src/index.ts\nfunction registerHandlers() {\n  // ...其他处理器\n  registry.register('rar', new RarHandler());\n}\n```\n\n不需要修改任何其他代码，统一工具会自动支持新的格式。\n\n## 使用示例\n\n使用Claude或其他支持MCP的工具连接到本服务器后，可以使用以下示例命令：\n\n### 使用统一工具压缩文件(gzip):\n```\ncompression工具可以处理多种压缩格式，例如:\n{\n  \"operation\": \"compress\",\n  \"format\": \"gzip\",\n  \"sourcePath\": \"/path/to/file.txt\",\n  \"compressionLevel\": 6\n}\n```\n\n### 使用统一工具压缩文件夹(tar.gz):\n```\ncompression工具可以处理文件夹压缩:\n{\n  \"operation\": \"compress\",\n  \"format\": \"tar.gz\",\n  \"sourcePath\": \"/path/to/folder\",\n  \"compressionLevel\": 9\n}\n```\n\n### 使用统一工具解压ZIP文件:\n```\ncompression工具可以解压多种格式:\n{\n  \"operation\": \"decompress\",\n  \"format\": \"zip\",\n  \"sourcePath\": \"/path/to/archive.zip\",\n  \"outputDirectory\": \"/path/to/output\"\n}\n```\n\n### 使用统一工具查看7z文件内容:\n```\ncompression工具可以列出压缩文件内容:\n{\n  \"operation\": \"list\",\n  \"format\": \"7z\",\n  \"sourcePath\": \"/path/to/archive.7z\"\n}\n```\n\n## 版本历史\n\n### v2.1.0\n- 重构为模块化、可扩展架构\n- 实现格式处理器接口设计\n- 创建格式注册表\n- 改进错误处理和进度报告\n\n### v2.0.0\n- 重构为统一压缩工具接口\n- 支持一致的参数结构\n- 改进错误处理和进度报告\n\n### v1.0.0\n- 初始版本\n- 支持多种独立的压缩和解压工具\n\n## 安全说明\n\n本项目实现了多种安全机制：\n\n1. **路径验证** - 防止路径遍历攻击，确保用户不能访问系统上的任意文件\n2. **参数验证** - 使用zod库进行严格的输入验证\n3. **错误处理** - 捕获所有可能的错误并提供友好的提示，不泄露系统信息\n4. **文件名安全检查** - 确保文件名不包含路径分隔符\n\n## 贡献指南\n\n欢迎对本项目做出贡献！请fork项目，创建分支，提交变更后发起pull request。\n\n## 许可证\n\nMIT许可证 ",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gzip",
        "compression",
        "compress",
        "compress mcp",
        "file compression",
        "formats gzip"
      ],
      "category": "file-management"
    },
    "video-creator--ffmpeg-mcp": {
      "owner": "video-creator",
      "name": "ffmpeg-mcp",
      "url": "https://github.com/video-creator/ffmpeg-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/video-creator.webp",
      "description": "Enables local video search, trimming, stitching, and playback through conversational commands using ffmpeg. Provides tools for finding, clipping, concatenating, and playing video files on macOS platforms.",
      "stars": 84,
      "forks": 14,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-10-04T04:24:05Z",
      "readme_content": "# FFmpeg-MCP\nUsing ffmpeg command line to achieve an mcp server, can be very convenient, through the dialogue to achieve the local video search, tailoring, stitching, playback and other functions\n\n<a href=\"https://glama.ai/mcp/servers/@video-creator/ffmpeg-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@video-creator/ffmpeg-mcp/badge\" alt=\"FFmpeg-Server MCP server\" />\n</a>\n\n## Support Tools\nThe server implements the following tools: <br/>\n- `find_video_path`\n  The parameters are directory and file name, file name can be complete, or is not suffixed, recursive search in the directory, return the full path\n- `get_video_info`\n  The parameters are video path, return the video info, linkes duration/fps/codec/width/height.\n- `clip_video`\n  The parameter is the file path, start time, end time or duration, and returns the trimmed file path\n- `concat_videos`\n  The parameters are the list of files, the output path, and if the video elements in the list of files, such as width, height, frame rate, etc., are consistent, quick mode synthesis is automatically used\n- `play_video`\n  Play video/audio with ffplay, support many format, like mov/mp4/avi/mkv/3gp, video_path: video path speed: play rate loop: play count\n- `overlay_video`\n  Two video overlay. <br/>\n  background_video: backgroud video path <br/>\n  overlay_video: front video path <br/>\n  output_path: output video path<br/>\n  position: relative location<br/>\n  dx: x offset<br/>\n  dy: y offset<br/>\n- `scale_video`\n  Video scale. <br/>\n  video_path: in video path <br/>\n  width: out video width, -2 keep aspect <br/>\n  height: out video height, -2 keep aspect <br/>\n  output_path: output video path <br/>\n- `extract_frames_from_video`\n  Extract images from a video.<br/>\n  Parameters: <br/>\n  video_path (str): The path to the video.<br/>\n  fps (int): Extract one frame every specified number of seconds. If set to 0, extract all frames; if set to 1, extract one frame per second.<br/>\n  output_folder (str): The directory where the images will be saved.<br/>\n  format (int): The format of the extracted images; 0: PNG, 1: JPG, 2: WEBP.<br/>\n  total_frames (int): The maximum number of frames to extract. If set to 0, there is no limit<br/>\n<br/>\nMore features are coming\n\n## Installation procedure\n1. Download project\n```\ngit clone  https://github.com/video-creator/ffmpeg-mcp.git\ncd ffmpeg-mcp\nuv sync\n```\n\n2. Configuration in Cline\n```\n{\n  \"mcpServers\": {\n    \"ffmpeg-mcp\": {\n      \"autoApprove\": [],\n      \"disabled\": false,\n      \"timeout\": 60,\n      \"command\": \"uv\",\n      \"args\": [\n        \"--directory\",\n        \"/Users/xxx/Downloads/ffmpeg-mcp\",\n        \"run\",\n        \"ffmpeg-mcp\"\n      ],\n      \"transportType\": \"stdio\"\n    }\n  }\n}\n```\nNote: the value:`/Users/XXX/Downloads/ffmpeg` in args  need to replace the actual download ffmpeg-mcp directory\n\n## Supported platforms\nCurrently, only macos platforms are supported, including ARM64 or x86_64",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ffmpeg",
        "mcp",
        "macos",
        "ffmpeg mcp",
        "ffmpeg provides",
        "creator ffmpeg"
      ],
      "category": "file-management"
    },
    "vini1994--mcp": {
      "owner": "vini1994",
      "name": "mcp",
      "url": "https://github.com/vini1994/mcp",
      "imageUrl": "/freedevtools/mcp/pfp/null.webp",
      "description": "Manage files on remote FTP, SFTP, and SSH servers, enabling browsing, uploading, downloading, and modifying files and directories seamlessly. Supports multiple simultaneous connections for efficient server management.",
      "stars": 0,
      "forks": 0,
      "license": "Unknown",
      "language": "Unknown",
      "updated_at": "",
      "readme_content": "",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "ftp",
        "sftp",
        "mcp",
        "remote ftp",
        "ftp sftp",
        "files remote"
      ],
      "category": "file-management"
    },
    "w-jeon--mcp-framework": {
      "owner": "w-jeon",
      "name": "mcp-framework",
      "url": "https://github.com/w-jeon/mcp-framework",
      "imageUrl": "/freedevtools/mcp/pfp/w-jeon.webp",
      "description": "This framework enables the creation of custom tools for interaction with large language models, facilitating web content retrieval and various file handling capabilities. It automates the processing of PDF, Word, and Excel documents for enhanced productivity.",
      "stars": 3,
      "forks": 0,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-06-12T10:49:14Z",
      "readme_content": "# MCP开发框架\n[![smithery badge](https://smithery.ai/badge/@aigo666/mcp-framework)](https://smithery.ai/server/@aigo666/mcp-framework)\n\n一个强大的MCP（Model Context Protocol）开发框架，用于创建与大语言模型交互的自定义工具。该框架提供了一套完整的工具集，可以轻松地扩展Cursor IDE的功能，实现网页内容获取、文件处理（PDF、Word、Excel）等高级功能。\n\n## 主要功能\n\n本框架提供了以下核心功能：\n\n### 1. 综合文件处理\n\n使用`file`工具可以自动识别文件类型并选择合适的处理方式，支持PDF、Word和Excel文件。\n\n- **用法**: `file /path/to/document`\n- **支持格式**: \n  - PDF文件 (.pdf)\n  - Word文档 (.doc, .docx)\n  - Excel文件 (.xls, .xlsx, .xlsm)\n- **参数**: `file_path` - 文件的本地路径\n- **返回**: 根据文件类型返回相应的处理结果\n\n### 2. PDF文档处理\n\n使用`pdf`工具可以处理PDF文档，支持两种处理模式：\n\n- **用法**: `pdf /path/to/document.pdf [mode]`\n- **参数**: \n  - `file_path` - PDF文件的本地路径\n  - `mode` - 处理模式（可选）：\n    - `quick` - 快速预览模式，仅提取文本内容\n    - `full` - 完整解析模式，提取文本和图片内容（默认）\n- **返回**: \n  - 快速预览模式：文档的文本内容\n  - 完整解析模式：文档的文本内容和图片\n- **特点**: \n  - 使用PyMuPDF提供高质量的文本提取和图像处理\n  - 自动处理大型文件\n  - 支持图片提取和保存\n\n### 3. Word文档解析\n\n使用`word`工具可以解析Word文档，提取文本、表格和图片信息。\n\n- **用法**: `word /path/to/document.docx`\n- **功能**: 解析Word文档并提取文本内容、表格和图片信息\n- **参数**: `file_path` - Word文档的本地路径\n- **返回**: 文档的文本内容、表格和图片信息\n- **特点**: 使用python-docx库提供高质量的文本和表格提取\n\n### 4. Excel文件处理\n\n使用`excel`工具可以解析Excel文件，提供完整的表格数据和结构信息。\n\n- **用法**: `excel /path/to/spreadsheet.xlsx`\n- **功能**: 解析Excel文件的所有工作表\n- **参数**: `file_path` - Excel文件的本地路径\n- **返回**: \n  - 文件基本信息（文件名、工作表数量）\n  - 每个工作表的详细信息：\n    - 行数和列数\n    - 列名列表\n    - 完整的表格数据\n- **特点**: \n  - 使用pandas和openpyxl提供高质量的表格数据处理\n  - 支持多工作表处理\n  - 自动处理数据类型转换\n\n### 5. 网页内容获取\n\n使用`url`工具可以获取任何网页的内容。\n\n- **用法**: `url https://example.com`\n- **参数**: `url` - 要获取内容的网站URL\n- **返回**: 网页的文本内容\n- **特点**: \n  - 完整的HTTP错误处理\n  - 超时管理\n  - 自动编码处理\n\n## 技术特点\n\n本框架采用了多种技术来优化文件处理性能：\n\n1. **智能文件类型识别**\n   - 自动根据文件扩展名选择合适的处理工具\n   - 提供统一的文件处理接口\n\n2. **高效的文档处理**\n   - PDF处理：支持快速预览和完整解析两种模式\n   - Word处理：精确提取文本、表格和图片\n   - Excel处理：高效处理大型表格数据\n\n3. **内存优化**\n   - 使用临时文件管理大型文件\n   - 自动清理临时资源\n   - 分块处理大型文档\n\n4. **错误处理**\n   - 完整的异常捕获和处理\n   - 详细的错误信息反馈\n   - 优雅的失败处理机制\n\n## 文档处理技术细节\n\n### PDF处理\n\n1. **多层次处理策略**:\n   - 首先尝试使用PyMuPDF（fitz）提取内容（速度快、准确度高）\n   - 如果失败，回退到PymuPDF4llm（专为大语言模型优化）\n   - 最后尝试PyPDF2作为最终备用方案\n\n2. **性能优化**:\n   - 限制处理的最大页数（完整模式: 30页，快速模式: 50页）\n   - 图片处理优化（DPI调整、大小限制）\n   - 多线程处理加速\n\n3. **错误处理**:\n   - 详细的错误信息和提示\n   - 备用处理方法，确保服务稳定性\n   - 超时保护机制（5分钟超时设置）\n\n### Word文档处理\n\n1. **文档结构解析**:\n   - 提取文档属性（标题、作者、创建时间等）\n   - 段落内容提取，保留原始格式\n   - 表格转换为Markdown格式\n\n2. **图片信息**:\n   - 提供文档中图片的数量信息\n   - 图片引用关系识别\n\n## 项目结构\n\n本框架采用模块化设计，便于扩展和维护：\n\n```\nmcp_tool/\n├── tools/\n│   ├── __init__.py        # 定义工具基类和注册器\n│   ├── loader.py          # 工具加载器，自动加载所有工具\n│   ├── file_tool.py       # 综合文件处理工具\n│   ├── pdf_tool.py        # PDF解析工具\n│   ├── word_tool.py       # Word文档解析工具\n│   ├── excel_tool.py      # Excel文件处理工具\n│   └── url_tool.py        # URL工具实现\n├── __init__.py\n├── __main__.py\n└── server.py              # MCP服务器实现\n```\n\n## 开发指南\n\n### 如何开发新工具\n\n1. 在`tools`目录下创建一个新的Python文件，如`your_tool.py`\n2. 导入必要的依赖和基类\n3. 创建一个继承自`BaseTool`的工具类\n4. 使用`@ToolRegistry.register`装饰器注册工具\n5. 实现工具的`execute`方法\n\n### 工具模板示例\n\n```python\nimport mcp.types as types\nfrom . import BaseTool, ToolRegistry\n\n@ToolRegistry.register\nclass YourTool(BaseTool):\n    \"\"\"您的工具描述\"\"\"\n    name = \"your_tool_name\"  # 工具的唯一标识符\n    description = \"您的工具描述\"  # 工具的描述信息，将显示给用户\n    input_schema = {\n        \"type\": \"object\",\n        \"required\": [\"param1\"],  # 必需的参数\n        \"properties\": {\n            \"param1\": {\n                \"type\": \"string\",\n                \"description\": \"参数1的描述\",\n            },\n            \"param2\": {\n                \"type\": \"integer\",\n                \"description\": \"参数2的描述（可选）\",\n            }\n        },\n    }\n  \n    async def execute(self, arguments: dict) -> list[types.TextContent | types.ImageContent | types.EmbeddedResource]:\n        \"\"\"执行工具逻辑\"\"\"\n        # 参数验证\n        if \"param1\" not in arguments:\n            return [types.TextContent(\n                type=\"text\",\n                text=\"Error: Missing required argument 'param1'\"\n            )]\n          \n        # 获取参数\n        param1 = arguments[\"param1\"]\n        param2 = arguments.get(\"param2\", 0)  # 获取可选参数，提供默认值\n      \n        # 执行工具逻辑\n        result = f\"处理参数: {param1}, {param2}\"\n      \n        # 返回结果\n        return [types.TextContent(\n            type=\"text\",\n            text=result\n        )]\n```\n\n## 部署指南\n\n### Docker部署（推荐）\n\n1. 初始设置：\n```bash\n# 克隆仓库\ngit clone https://github.com/your-username/mcp-framework.git\ncd mcp-framework\n\n# 创建环境文件\ncp .env.example .env\n```\n\n2. 使用Docker Compose：\n```bash\n# 构建并启动\ndocker compose up --build -d\n\n# 查看日志\ndocker compose logs -f\n\n# 管理容器\ndocker compose ps\ndocker compose pause\ndocker compose unpause\ndocker compose down\n```\n\n3. 访问服务：\n- SSE端点: http://localhost:8000/sse\n\n4. Cursor IDE配置：\n- 设置 → 功能 → 添加MCP服务器\n- 类型: \"sse\"\n- URL: `http://localhost:8000/sse`\n\n### 传统Python部署\n\n1. 安装系统依赖：\n```bash\n# Ubuntu/Debian\nsudo apt-get update\nsudo apt-get install -y poppler-utils tesseract-ocr tesseract-ocr-chi-sim\n\n# macOS\nbrew install poppler tesseract tesseract-lang\n\n# Windows\n# 1. 下载并安装Tesseract: https://github.com/UB-Mannheim/tesseract/wiki\n# 2. 将Tesseract添加到系统PATH\n```\n\n2. 安装Python依赖：\n```bash\n# 创建虚拟环境\npython -m venv venv\nsource venv/bin/activate  # Linux/Mac\n# 或\n.\\venv\\Scripts\\activate  # Windows\n\n# 安装依赖\npip install -r requirements.txt\n```\n\n3. 启动服务：\n```bash\npython -m mcp_tool\n```\n\n## 配置\n\n### 环境变量\n\n在`.env`文件中配置：\n\n- `MCP_SERVER_PORT`: 服务器端口（默认: 8000）\n- `MCP_SERVER_HOST`: 绑定地址（默认: 0.0.0.0）\n- `DEBUG`: 调试模式（默认: false）\n- `MCP_USER_AGENT`: 自定义User-Agent\n\n## 依赖项\n\n主要依赖：\n- `mcp`: Model Context Protocol实现\n- `PyMuPDF`: PDF文档处理\n- `python-docx`: Word文档处理\n- `pandas`和`openpyxl`: Excel文件处理\n- `httpx`: 异步HTTP客户端\n- `anyio`: 异步I/O支持\n- `click`: 命令行接口\n\n## 贡献指南\n\n1. Fork仓库\n2. 创建功能分支 (`git checkout -b feature/amazing-feature`)\n3. 提交更改 (`git commit -m 'Add some amazing feature'`)\n4. 推送到分支 (`git push origin feature/amazing-feature`)\n5. 打开Pull Request\n\n## 许可证\n\n本项目采用MIT许可证 - 详情请参阅[LICENSE](LICENSE)文件。\n\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "framework",
        "documents",
        "file",
        "file management",
        "mcp framework",
        "file handling"
      ],
      "category": "file-management"
    },
    "w-jeon--mcp-gdrive": {
      "owner": "w-jeon",
      "name": "mcp-gdrive",
      "url": "https://github.com/w-jeon/mcp-gdrive",
      "imageUrl": "/freedevtools/mcp/pfp/w-jeon.webp",
      "description": "Integrates with Google Drive to enable the listing, reading, and searching of files, supporting various file types and converting Google Workspace documents into usable formats. Facilitates seamless access to file management features within applications.",
      "stars": 0,
      "forks": 3,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-03-12T04:07:04Z",
      "readme_content": "# Google Drive server\n\nThis MCP server integrates with Google Drive to allow listing, reading, and searching over files.\n\n## Components\n\n### Tools\n\n- **search**\n  - Search for files in Google Drive\n  - Input: `query` (string): Search query\n  - Returns file names and MIME types of matching files\n\n### Resources\n\nThe server provides access to Google Drive files:\n\n- **Files** (`gdrive:///<file_id>`)\n  - Supports all file types\n  - Google Workspace files are automatically exported:\n    - Docs → Markdown\n    - Sheets → CSV\n    - Presentations → Plain text\n    - Drawings → PNG\n  - Other files are provided in their native format\n\n## Getting started\n\n1. [Create a new Google Cloud project](https://console.cloud.google.com/projectcreate)\n2. [Enable the Google Drive API](https://console.cloud.google.com/workspace-api/products)\n3. [Configure an OAuth consent screen](https://console.cloud.google.com/apis/credentials/consent) (\"internal\" is fine for testing)\n4. Add OAuth scope `https://www.googleapis.com/auth/drive.readonly`\n5. [Create an OAuth Client ID](https://console.cloud.google.com/apis/credentials/oauthclient) for application type \"Desktop App\"\n6. Download the JSON file of your client's OAuth keys\n7. Rename the key file to `gcp-oauth.keys.json` and place into the root of this repo (i.e. `servers/gcp-oauth.keys.json`)\n\nMake sure to build the server with either `npm run build` or `npm run watch`.\n\n### Authentication\n\nTo authenticate and save credentials:\n\n1. Run the server with the `auth` argument: `node ./dist auth`\n2. This will open an authentication flow in your system browser\n3. Complete the authentication process\n4. Credentials will be saved in the root of this repo (i.e. `servers/.gdrive-server-credentials.json`)\n\n### Usage with Desktop App\n\nTo integrate this server with the desktop app, add the following to your app's server configuration:\n\n#### Docker\n\nAuthentication:\n\nAssuming you have completed setting up the OAuth application on Google Cloud, you can now auth the server with the following command, replacing `/path/to/gcp-oauth.keys.json` with the path to your OAuth keys file:\n\n```bash\ndocker run -i --rm --mount type=bind,source=/path/to/gcp-oauth.keys.json,target=/gcp-oauth.keys.json -v mcp-gdrive:/gdrive-server -e GDRIVE_OAUTH_PATH=/gcp-oauth.keys.json -e \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\" -p 3000:3000 mcp/gdrive auth\n```\n\nThe command will print the URL to open in your browser. Open this URL in your browser and complete the authentication process. The credentials will be saved in the `mcp-gdrive` volume.\n\nOnce authenticated, you can use the server in your app's server configuration:\n\n```json\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"docker\",\n      \"args\": [\"run\", \"-i\", \"--rm\", \"-v\", \"mcp-gdrive:/gdrive-server\", \"-e\", \"GDRIVE_CREDENTIALS_PATH=/gdrive-server/credentials.json\", \"mcp/gdrive\"]\n    }\n  }\n}\n```\n\n#### NPX\n\n```json\n{\n  \"mcpServers\": {\n    \"gdrive\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@modelcontextprotocol/server-gdrive\"\n      ]\n    }\n  }\n}\n```\n\n## License\n\nThis MCP server is licensed under the MIT License. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the project repository.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "gdrive",
        "files",
        "documents",
        "google drive",
        "gdrive integrates",
        "mcp gdrive"
      ],
      "category": "file-management"
    },
    "webconsulting--mcp-server-wsl-filesystem": {
      "owner": "webconsulting",
      "name": "mcp-server-wsl-filesystem",
      "url": "https://github.com/webconsulting/mcp-server-wsl-filesystem",
      "imageUrl": "/freedevtools/mcp/pfp/webconsulting.webp",
      "description": "Facilitates efficient filesystem operations within Windows Subsystem for Linux (WSL) environments, enabling access, reading, writing, and management of files and directories across multiple WSL distributions. Optimizes file listing and search tasks, particularly in performance-sensitive applications.",
      "stars": 10,
      "forks": 4,
      "license": "MIT License",
      "language": "JavaScript",
      "updated_at": "2025-09-12T09:12:32Z",
      "readme_content": "> ⚠️ **IMPORTANT INFORMATION:**  \n> The original [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) can already access WSL files by simply using the network path `\\\\wsl.localhost\\DistributionName` as a parameter in the configuration.  \n> Example:\n> \n> ```json\n> {\n>   \"mcpServers\": {\n>     \"filesystem\": {\n>       \"command\": \"npx\",\n>       \"args\": [\n>         \"-y\",\n>         \"@modelcontextprotocol/server-filesystem\",\n>         \"\\\\\\\\wsl.localhost\\\\Debian\",\n>         \"C:\\\\path\\\\to\\\\other\\\\allowed\\\\dir\"\n>       ]\n>     }\n>   }\n> }\n> ```\n>\n> However, this project offers an **alternative implementation specifically optimized for WSL Linux distributions**.\n>\n> While the official server works by recursively walking directories using Node.js’s `fs` module, this implementation leverages **native Linux commands inside WSL** (such as `find`, `grep`, etc.), making **file listing and content search operations significantly faster**.\n>\n> This can be especially useful when dealing with large directory trees or when search performance is critical.\n>\n> So while the native network path may be simpler for many use cases, this project remains **a valuable solution** for WSL users looking for **better performance** or more **custom control** over the indexing and searching logic.\n\n---\n\n# Filesystem MCP Server for WSL\n\n[![npm version](https://img.shields.io/npm/v/mcp-server-wsl-filesystem.svg)](https://www.npmjs.com/package/mcp-server-wsl-filesystem)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\nNode.js server implementing the Model Context Protocol (MCP), specifically designed for filesystem operations in Windows Subsystem for Linux (WSL).  \nThis project is a fork of the original [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) but completely reimagined for WSL environments.  \nUnlike the original project, which handles generic file operations, this version focuses exclusively on seamless interaction between Windows and Linux distributions under WSL.  \nBoth projects are compatible and can run in parallel on the same system.\n\n## Features\n\n- Access any WSL distribution from Windows\n- Read/write files in WSL from Windows host\n- Create/list/delete directories in WSL\n- Move files/directories across WSL filesystem\n- Search files within WSL \n- Get file metadata from the WSL filesystem\n- Support for multiple WSL distributions\n\n**Note**: The server only allows operations within directories specified via `args`.\n\n---\n\n## API\n\n### Resources\n\n- `wsl -d <distrib>`: Command for operations on WSL distributions\n\n### Tools\n\n- **read_file**\n  - Read complete contents of a file from WSL\n  - Input: `path` (string)\n  - Reads content as UTF-8 text\n\n- **read_file_by_parts**\n  - Read large files in parts of approximately 95,000 characters\n  - Inputs:\n    - `path` (string)\n    - `part_number` (positive integer: 1, 2, 3, etc.)\n  - Features:\n    - Part 1 starts from the beginning of the file\n    - Subsequent parts align to line boundaries (max 300 character adjustment)\n    - Returns error with actual file size if requested part doesn't exist\n    - Useful for files too large to read in one operation\n\n- **read_multiple_files**\n  - Read multiple files simultaneously from WSL\n  - Input: `paths` (string[])\n  - Failed reads won't stop the entire operation\n\n- **write_file**\n  - Create or overwrite a file in WSL (use with caution)\n  - Inputs:\n    - `path` (string)\n    - `content` (string)\n\n- **edit_file**\n  - Selective edits with advanced pattern matching and formatting\n  - Inputs:\n    - `path` (string)\n    - `edits` (array of `{ oldText, newText }`)\n    - `dryRun` (boolean, optional)\n  - Features:\n    - Multi-line matching\n    - Indentation preservation\n    - Git-style diff preview\n    - Non-destructive dry run mode\n\n- **create_directory**\n  - Create or ensure the existence of a directory in WSL\n  - Input: `path` (string)\n\n- **list_directory**\n  - List directory contents with `[FILE]` or `[DIR]` prefixes\n  - Input: `path` (string)\n\n- **directory_tree**\n  - Recursive JSON tree view of contents\n  - Input: `path` (string)\n\n- **move_file**\n  - Move or rename files/directories\n  - Inputs:\n    - `source` (string)\n    - `destination` (string)\n\n- **search_files**\n  - Recursively search by name\n  - Inputs:\n    - `path` (string)\n    - `pattern` (string)\n    - `excludePatterns` (string[], optional)\n\n- **search_in_files**\n  - Search for text patterns within files recursively\n  - Inputs:\n    - `path` (string) - root directory to search\n    - `pattern` (string) - text or regex pattern to find\n    - `caseInsensitive` (boolean, optional) - case-insensitive search\n    - `isRegex` (boolean, optional) - treat pattern as regex\n    - `includePatterns` (string[], optional) - file patterns to include (e.g., *.js)\n    - `excludePatterns` (string[], optional) - file patterns to exclude\n    - `maxResults` (number, optional, default: 1000) - maximum results to return\n    - `contextLines` (number, optional, default: 0) - lines of context before/after\n  - Features:\n    - Handles all special characters (apostrophes, quotes, $, backslashes)\n    - Supports plain text and regular expression searches\n    - Shows matching lines with file paths and line numbers\n    - Automatically excludes .git, node_modules, .svn, .hg directories\n    - Can show context lines around matches\n\n- **get_file_info**\n  - Detailed metadata\n  - Input: `path` (string)\n  - Returns: size, timestamps, type, permissions\n\n- **list_allowed_directories**\n  - Lists all directories accessible to the server\n\n- **list_wsl_distributions**\n  - Lists available distributions and shows the active one\n\n---\n\n## Requirements\n\n- [Windows Subsystem for Linux (WSL)](https://learn.microsoft.com/en-us/windows/wsl/install) properly configured\n- At least one Linux distribution installed in WSL\n\n**For Claude Desktop users:**  \nNo additional installation required — just configure your `claude_desktop_config.json`.\n\n**NPM Package:**  \nThe package is available on npm: [mcp-server-wsl-filesystem](https://www.npmjs.com/package/mcp-server-wsl-filesystem)\n\n**For development:**\n\n- [Node.js](https://nodejs.org/en/download/) (v18.0.0 or higher)\n- TypeScript (included as a dev dependency)\n\n### Installing Node.js on Windows\n\n1. Download the installer from [nodejs.org](https://nodejs.org/en/download/)\n2. Run it and follow the instructions\n3. Check versions:\n\n```bash\nnode --version\nnpm --version\n```\n\n## Usage\n\nBefore running the server, you need to build the TypeScript project:\n```bash\nnpm install\nnpm run build\n```\n\nRun the server by specifying which WSL distribution to use (optional) and which directories to expose:\n\n```bash\nnode dist/index.js [--distro=distribution_name] <allowed_directory> [additional_directories...]\n```\n\nIf no distribution is specified, the default WSL distribution will be used.\n\n### Examples\n\nAccess Ubuntu-20.04 distribution:\n```bash\nnode dist/index.js --distro=Ubuntu-20.04 /home/user/documents\n```\n\nUse default distribution:\n```bash\nnode dist/index.js /home/user/documents\n```\n\n## Usage with Claude Desktop\n\nAdd this to your `claude_desktop_config.json`:\n\n### Option 1: Using a specific WSL distribution\n\n```json\n{\n  \"mcpServers\": {\n    \"wsl-filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-server-wsl-filesystem\",\n        \"--distro=Ubuntu-20.04\",\n        \"/home/user/documents\"\n      ]\n    }\n  }\n}\n```\n\n### Option 2: Using the default WSL distribution\n\n```json\n{\n  \"mcpServers\": {\n    \"wsl-filesystem\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"mcp-server-wsl-filesystem\",\n        \"/home/user/documents\"\n      ]\n    }\n  }\n}\n```\n\nIn the second example, the system will use your default WSL distribution without you needing to specify it.\n\n## Differences from original project\n\nThis fork adapts the original Filesystem MCP Server to work with WSL by:\n\n1. Replacing direct Node.js filesystem calls with WSL command executions\n2. Adding support for selecting specific WSL distributions\n3. Implementing path translation between Windows and Linux formats\n4. Enhancing file content handling for cross-platform compatibility\n5. Adding specialized tools for WSL management\n\n## License\n\nThis project is a fork of the original [Filesystem MCP Server](https://github.com/modelcontextprotocol/servers/blob/main/src/filesystem) created by the Model Context Protocol team.\n\nThis MCP server for WSL is licensed under the MIT License, following the original project's license. This means you are free to use, modify, and distribute the software, subject to the terms and conditions of the MIT License. For more details, please see the LICENSE file in the original project repository.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "wsl",
        "filesystem",
        "files",
        "wsl filesystem",
        "server wsl",
        "linux wsl"
      ],
      "category": "file-management"
    },
    "wesnermichel--nexus-mcp-claude-desktop-server": {
      "owner": "wesnermichel",
      "name": "nexus-mcp-claude-desktop-server",
      "url": "https://github.com/wesnermichel/nexus-mcp-claude-desktop-server",
      "imageUrl": "/freedevtools/mcp/pfp/wesnermichel.webp",
      "description": "Connects Claude Desktop to VSCode, allowing file reading and writing within projects. It facilitates directory management and provides security controls for path accessibility.",
      "stars": 8,
      "forks": 4,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-07-30T19:21:50Z",
      "readme_content": "# Nexus MCP Bridge for VSCode\n\nA lightweight bridge extension that lets Claude Desktop connect to your VSCode workspace via Model Context Protocol (MCP).\n\n## Features\n\n- **Minimal Memory Footprint**: Designed to be lightweight and efficient\n- **Automatic Startup**: Can start automatically when VSCode launches\n- **Status Bar Integration**: Easily see and control the bridge status\n- **File System Access**: Enables Claude to read and write files in your workspace\n- **Directory Management**: Create directories and list contents\n- **Security Controls**: Configure which paths are accessible\n\n## Why Use This Bridge?\n\nIf you're using Claude Desktop with VSCode, this bridge allows you to:\n\n1. **Reduce Memory Usage**: Lightweight and efficient\n2. **Stay in VSCode**: No need to context switch between applications\n3. **Protect Your System**: Only expose directories you explicitly allow\n\n## Installation\n\n1. Install the extension from the VSIX file\n2. Configure your settings (optional)\n3. The bridge will start automatically if configured, or you can start it manually\n\n## Setup for Claude Desktop\n\nIn Claude Desktop, configure your `claude_desktop_config.json` file:\n\n```json\n{\n  \"mcpServers\": {\n    \"nexus-bridge\": {\n      \"url\": \"http://localhost:3000/mcp\",\n      \"disabled\": false,\n      \"alwaysAllow\": [\n        \"get_system_info\",\n        \"read_file\",\n        \"write_file\",\n        \"create_directory\",\n        \"list_directory\",\n        \"get_project_status\"\n      ]\n    }\n  }\n}\n```\n\n## Configuration\n\nYou can configure the extension in your VSCode settings:\n\n```json\n{\n  \"nexusMcpBridge.port\": 3000,\n  \"nexusMcpBridge.startOnLaunch\": true,\n  \"nexusMcpBridge.allowedPaths\": [\n    \"/path/to/your/project\",\n    \"/path/to/another/project\"\n  ]\n}\n```\n\n## Commands\n\n- **Start Nexus MCP Bridge**: Start the MCP server\n- **Stop Nexus MCP Bridge**: Stop the MCP server\n- **Toggle Nexus MCP Bridge**: Toggle the server on/off (via status bar)\n\n## About \n\nA lightweight VSCode extension for connecting with Claude Desktop via MCP.\n\ngithub.com/wesnermichel\n\n## License\n\nMIT# nexus-mcp-claude-desktop-server\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "vscode",
        "file",
        "directory",
        "desktop vscode",
        "vscode allowing",
        "file management"
      ],
      "category": "file-management"
    },
    "wonderwhy-er--DesktopCommanderMCP": {
      "owner": "wonderwhy-er",
      "name": "DesktopCommanderMCP",
      "url": "https://github.com/wonderwhy-er/DesktopCommanderMCP",
      "imageUrl": "/freedevtools/mcp/pfp/wonderwhy-er.webp",
      "description": "Execute terminal commands, manage processes, and perform advanced file editing tasks, including text replacements and file rewrites. Enhance development workflows by automating repetitive tasks and running processes efficiently.",
      "stars": 4611,
      "forks": 511,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-04T08:03:00Z",
      "readme_content": "# Desktop Commander MCP\n### Search, update, manage files and run terminal commands with AI\n\n[![npm downloads](https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander)](https://www.npmjs.com/package/@wonderwhy-er/desktop-commander)\n[![Trust Score](https://archestra.ai/mcp-catalog/api/badge/quality/wonderwhy-er/DesktopCommanderMCP)](https://archestra.ai/mcp-catalog/wonderwhy-er__desktopcommandermcp)\n[![smithery badge](https://smithery.ai/badge/@wonderwhy-er/desktop-commander)](https://smithery.ai/server/@wonderwhy-er/desktop-commander)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://www.buymeacoffee.com/wonderwhyer)\n\n\n[![Discord](https://img.shields.io/badge/Join%20Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/kQ27sNnZr7)\n\n\nWork with code and text, run processes, and automate tasks, going far beyond other AI editors - without API token costs.\n\n\n\n\n<a href=\"https://glama.ai/mcp/servers/zempur9oh4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zempur9oh4/badge\" alt=\"Desktop Commander MCP\" />\n</a>\n\n## Table of Contents\n- [Features](#features)\n- [How to install](#how-to-install)\n- [Getting Started](#getting-started)\n- [Usage](#usage)\n- [Handling Long-Running Commands](#handling-long-running-commands)\n- [Work in Progress and TODOs](#roadmap)\n- [Sponsors and Supporters](#support-desktop-commander)\n- [Website](#website)\n- [Media](#media)\n- [Testimonials](#testimonials)\n- [Frequently Asked Questions](#frequently-asked-questions)\n- [Contributing](#contributing)\n- [License](#license)\n\nAll of your AI development tools in one place.\nDesktop Commander puts all dev tools in one chat.\nExecute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP). Built on top of [MCP Filesystem Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to provide additional search and replace file editing capabilities.\n\n## Features\n\n- **Enhanced terminal commands with interactive process control**\n- **Execute code in memory (Python, Node.js, R) without saving files**\n- **Instant data analysis - just ask to analyze CSV/JSON files**\n- **Interact with running processes (SSH, databases, development servers)**\n- Execute terminal commands with output streaming\n- Command timeout and background execution support\n- Process management (list and kill processes)\n- Session management for long-running commands\n- Server configuration management:\n  - Get/set configuration values\n  - Update multiple settings at once\n  - Dynamic configuration changes without server restart\n- Full filesystem operations:\n  - Read/write files\n  - Create/list directories\n  - Move files/directories\n  - Search files\n  - Get file metadata\n  - **Negative offset file reading**: Read from end of files using negative offset values (like Unix tail)\n- Code editing capabilities:\n  - Surgical text replacements for small changes\n  - Full file rewrites for major changes\n  - Multiple file support\n  - Pattern-based replacements\n  - vscode-ripgrep based recursive code or text search in folders\n- Comprehensive audit logging:\n  - All tool calls are automatically logged\n  - Log rotation with 10MB size limit\n  - Detailed timestamps and arguments\n\n## How to install\n\nDesktop Commander offers multiple installation methods to fit different user needs and technical requirements.\n\n> **📋 Update & Uninstall Information:** Before choosing an installation option, note that **only Options 1, 2, 3, and 6 have automatic updates**. Options 4 and 5 require manual updates. See the sections below for update and uninstall instructions for each option.\n\n### Option 1: Install through npx ⭐ **Auto-Updates** **Requires Node.js**\nJust run this in terminal:\n```\nnpx @wonderwhy-er/desktop-commander@latest setup\n```\n\nFor debugging mode (allows Node.js inspector connection):\n```\nnpx @wonderwhy-er/desktop-commander@latest setup --debug\n```\n\n**Command line options during setup:**\n- `--debug`: Enable debugging mode for Node.js inspector\n- `--no-onboarding`: Disable onboarding prompts for new users\n\nRestart Claude if running.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Run the setup command again  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove`\n\n### Option 2: Using bash script installer (macOS) ⭐ **Auto-Updates** **Installs Node.js if needed**\nFor macOS users, you can use our automated bash installer which will check your Node.js version, install it if needed, and automatically configure Desktop Commander:\n```\ncurl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install.sh | bash\n```\nThis script handles all dependencies and configuration automatically for a seamless setup experience.\n\n**✅ Auto-Updates:** Yes - requires manual updates  \n**🔄 Manual Update:** Re-run the bash installer command above  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove`\n\n### Option 3: Installing via Smithery ⭐ **Auto-Updates** **Requires Node.js**\n\nTo install Desktop Commander for Claude Desktop via [Smithery](https://smithery.ai/server/@wonderwhy-er/desktop-commander):\n\n1. **Visit the Smithery page:** https://smithery.ai/server/@wonderwhy-er/desktop-commander\n2. **Login to Smithery** if you haven't already\n3. **Select your client** (Claude Desktop) on the right side\n4. **Install with the provided key** that appears after selecting your client\n5. **Restart Claude Desktop**\n\nThe old command-line installation method is no longer supported. Please use the web interface above for the most reliable installation experience.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Visit the Smithery page and reinstall  \n\n### Option 4: Add to claude_desktop_config manually ⭐ **Auto-Updates** **Requires Node.js**\nAdd this entry to your claude_desktop_config.json:\n\n- On Mac: `~/Library/Application\\ Support/Claude/claude_desktop_config.json`\n- On Windows: `%APPDATA%\\Claude\\claude_desktop_config.json`\n- On Linux: `~/.config/Claude/claude_desktop_config.json`\n\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander@latest\"\n      ]\n    }\n  }\n}\n```\nRestart Claude if running.\n\n**✅ Auto-Updates:** Yes - automatically updates when you restart Claude  \n**🔄 Manual Update:** Run the setup command again  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove` or  remove the \"desktop-commander\" entry from your claude_desktop_config.json file\n\n### ### Option 5: Checkout locally ❌ **Manual Updates** **Requires Node.js** ❌ **Manual Updates** **Requires Node.js**\n1. Clone and build:\n```bash\ngit clone https://github.com/wonderwhy-er/DesktopCommanderMCP.git\ncd DesktopCommanderMCP\nnpm run setup\n```\nRestart Claude if running.\n\nThe setup command will:\n- Install dependencies\n- Build the server\n- Configure Claude's desktop app\n- Add MCP servers to Claude's config if needed\n\n**❌ Auto-Updates:** No - requires manual git updates  \n**🔄 Manual Update:** `cd DesktopCommanderMCP && git pull && npm run setup`  \n**🗑️ Uninstall:** Run `npx @wonderwhy-er/desktop-commander@latest remove` or remove the cloned directory and remove MCP server entry from Claude config\n\n### Option 6: Docker Installation 🐳 ⭐ **Auto-Updates** **No Node.js Required**\n\nPerfect for users who want complete or partial isolation or don't have Node.js installed. Desktop Commander runs in a sandboxed Docker container with a persistent work environment.\n\n#### Prerequisites\n- [Docker Desktop](https://www.docker.com/products/docker-desktop/) installed **and running**\n- Claude Desktop app installed\n\n**Important:** Make sure Docker Desktop is fully started before running the installer.\n\n#### Automated Installation (Recommended)\n\n**macOS/Linux:**\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh)\n```\n\n**Windows PowerShell:**\n```powershell\n# Download and run the installer (one-liner)\niex ((New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'))\n```\n\nThe automated installer will:\n- Check Docker installation\n- Pull the latest Docker image \n- Prompt you to select folders for mounting\n- Configure Claude Desktop automatically\n- Restart Claude if possible\n\n#### How Docker Persistence Works\nDesktop Commander creates a persistent work environment that remembers everything between sessions:\n- **Your development tools**: Any software you install (Node.js, Python, databases, etc.) stays installed\n- **Your configurations**: Git settings, SSH keys, shell preferences, and other personal configs are preserved  \n- **Your work files**: Projects and files in the workspace area persist across restarts\n- **Package caches**: Downloaded packages and dependencies are cached for faster future installs\n\nThink of it like having your own dedicated development computer that never loses your setup, but runs safely isolated from your main system.\n\n#### Manual Docker Configuration\n\nIf you prefer manual setup, add this to your claude_desktop_config.json:\n\n**Basic setup (no file access):**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n**With folder mounting:**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\",\n        \"-i\",\n        \"--rm\",\n        \"-v\", \"/Users/username/Desktop:/mnt/desktop\",\n        \"-v\", \"/Users/username/Documents:/mnt/documents\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n**Advanced folder mounting:**\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander-in-docker\": {\n      \"command\": \"docker\",\n      \"args\": [\n        \"run\", \"-i\", \"--rm\",\n        \"-v\", \"dc-system:/usr\",\n        \"-v\", \"dc-home:/root\", \n        \"-v\", \"dc-workspace:/workspace\",\n        \"-v\", \"dc-packages:/var\",\n        \"-v\", \"/Users/username/Projects:/mnt/Projects\",\n        \"-v\", \"/Users/username/Downloads:/mnt/Downloads\",\n        \"mcp/desktop-commander:latest\"\n      ]\n    }\n  }\n}\n```\n\n#### Docker Benefits\n✅ **Controlled Isolation:** Runs in sandboxed environment with persistent development state\n✅ **No Node.js Required:** Everything included in the container\n✅ **Cross-Platform:** Same experience on all operating systems\n✅ **Persistent Environment:** Your tools, files, configs, and work survives restarts\n\n**✅ Auto-Updates:** Yes - `latest` tag automatically gets newer versions  \n**🔄 Manual Update:** `docker pull mcp/desktop-commander:latest` then restart Claude  \n\n#### Docker Management Commands\n\n**macOS/Linux:**\n\nCheck installation status:\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --status\n```\n\nReset all persistent data (removes all installed tools and configs):\n```bash\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --reset\n```\n\n**Windows PowerShell:**\n\nCheck status:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Status\n```\n\nReset all data:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Reset\n```\n\nShow help:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -Help\n```\n\nVerbose output:\n```powershell\n$script = (New-Object System.Net.WebClient).DownloadString('https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.ps1'); & ([ScriptBlock]::Create(\"$script\")) -VerboseOutput\n```  \n\n#### Troubleshooting Docker Installation\nIf you broke the Docker container or need a fresh start:\n```bash\n# Reset and reinstall from scratch\nbash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh) --reset && bash <(curl -fsSL https://raw.githubusercontent.com/wonderwhy-er/DesktopCommanderMCP/refs/heads/main/install-docker.sh)\n```\nThis will completely reset your persistent environment and reinstall everything fresh with exception of not touching mounted folders\n\n## Updating & Uninstalling Desktop Commander\n\n### Automatic Updates (Options 1, 2, 3, 4 & 6)\n**Options 1 (npx), Option 2 (bash installer), 3 (Smithery), 4 (manual config), and 6 (Docker)** automatically update to the latest version whenever you restart Claude. No manual intervention needed.\n\n### Manual Updates (Option 5)\n- **Option 5 (local checkout):** `cd DesktopCommanderMCP && git pull && npm run setup`\n\n### Uninstalling Desktop Commander\n#### 🤖 Automatic Uninstallation (Recommended)\n\nThe easiest way to completely remove Desktop Commander:\n\n```bash\nnpx @wonderwhy-er/desktop-commander@latest remove\n```\n\nThis automatic uninstaller will:\n- ✅ Remove Desktop Commander from Claude's MCP server configuration\n- ✅ Create a backup of your Claude config before making changes\n- ✅ Provide guidance for complete package removal\n- ✅ Restore from backup if anything goes wrong\n\n#### 🔧 Manual Uninstallation\n\nIf the automatic uninstaller doesn't work or you prefer manual removal:\n\n##### Remove from Claude Configuration\n\n1. **Locate your Claude Desktop config file:**\n  - **macOS:** `~/Library/Application Support/Claude/claude_desktop_config.json`\n  - **Windows:** `%APPDATA%\\Claude\\claude_desktop_config.json`\n  - **Linux:** `~/.config/Claude/claude_desktop_config.json`\n\n2. **Edit the config file:**\n  - Open the file in a text editor\n  - Find and remove the `\"desktop-commander\"` entry from the `\"mcpServers\"` section\n  - Save the file\n\n  **Example - Remove this section:**\n  ```json\n  {\n      \"desktop-commander\": {\n        \"command\": \"npx\",\n        \"args\": [\"@wonderwhy-er/desktop-commander@latest\"]\n      }\n  }\n  ```\n\nClose and restart Claude Desktop to complete the removal.\n\n#### 🆘 Troubleshooting\n\n**If automatic uninstallation fails:**\n- Use manual uninstallation as a fallback\n\n**If Claude won't start after uninstalling:**\n- Restore the backup config file created by the uninstaller\n- Or manually fix the JSON syntax in your claude_desktop_config.json\n\n**Need help?**\n- Join our Discord community: https://discord.com/invite/kQ27sNnZr7\n\n## Getting Started\n\nOnce Desktop Commander is installed and Claude Desktop is restarted, you're ready to supercharge your Claude experience!\n\n### 🚀 New User Onboarding\n\nDesktop Commander includes intelligent onboarding to help you discover what's possible:\n\n**For New Users:** When you're just getting started (fewer than 10 successful commands), Claude will automatically offer helpful getting-started guidance and practical tutorials after you use Desktop Commander successfully.\n\n**Request Help Anytime:** You can ask for onboarding assistance at any time by simply saying:\n- *\"Help me get started with Desktop Commander\"*\n- *\"Show me Desktop Commander examples\"* \n- *\"What can I do with Desktop Commander?\"*\n\nClaude will then show you beginner-friendly tutorials and examples, including:\n- 📁 Organizing your Downloads folder automatically\n- 📊 Analyzing CSV/Excel files with Python\n- ⚙️ Setting up GitHub Actions CI/CD\n- 🔍 Exploring and understanding codebases\n- 🤖 Running interactive development environments\n\n## Usage\n\nThe server provides a comprehensive set of tools organized into several categories:\n\n### Available Tools\n\n| Category | Tool | Description |\n|----------|------|-------------|\n| **Configuration** | `get_config` | Get the complete server configuration as JSON (includes blockedCommands, defaultShell, allowedDirectories, fileReadLineLimit, fileWriteLineLimit, telemetryEnabled) |\n| | `set_config_value` | Set a specific configuration value by key. Available settings: <br>• `blockedCommands`: Array of shell commands that cannot be executed<br>• `defaultShell`: Shell to use for commands (e.g., bash, zsh, powershell)<br>• `allowedDirectories`: Array of filesystem paths the server can access for file operations (⚠️ terminal commands can still access files outside these directories)<br>• `fileReadLineLimit`: Maximum lines to read at once (default: 1000)<br>• `fileWriteLineLimit`: Maximum lines to write at once (default: 50)<br>• `telemetryEnabled`: Enable/disable telemetry (boolean) |\n| **Terminal** | `start_process` | Start programs with smart detection of when they're ready for input |\n| | `interact_with_process` | Send commands to running programs and get responses |\n| | `read_process_output` | Read output from running processes |\n| | `force_terminate` | Force terminate a running terminal session |\n| | `list_sessions` | List all active terminal sessions |\n| | `list_processes` | List all running processes with detailed information |\n| | `kill_process` | Terminate a running process by PID |\n| **Filesystem** | `read_file` | Read contents from local filesystem or URLs with line-based pagination (supports positive/negative offset and length parameters) |\n| | `read_multiple_files` | Read multiple files simultaneously |\n| | `write_file` | Write file contents with options for rewrite or append mode (uses configurable line limits) |\n| | `create_directory` | Create a new directory or ensure it exists |\n| | `list_directory` | Get detailed recursive listing of files and directories (supports depth parameter, default depth=2) |\n| | `move_file` | Move or rename files and directories |\n| | `start_search` | Start streaming search for files by name or content patterns (unified ripgrep-based search) |\n| | `get_more_search_results` | Get paginated results from active search with offset support |\n| | `stop_search` | Stop an active search gracefully |\n| | `list_searches` | List all active search sessions |\n| | `get_file_info` | Retrieve detailed metadata about a file or directory |\n| **Text Editing** | `edit_block` | Apply targeted text replacements with enhanced prompting for smaller edits (includes character-level diff feedback) |\n| **Analytics** | `get_usage_stats` | Get usage statistics for your own insight |\n| | `get_recent_tool_calls` | Get recent tool call history with arguments and outputs for debugging and context recovery |\n| | `give_feedback_to_desktop_commander` | Open feedback form in browser to provide feedback to Desktop Commander Team |\n\n### Quick Examples\n\n**Data Analysis:**\n```\n\"Analyze sales.csv and show top customers\" → Claude runs Python code in memory\n```\n\n**Remote Access:**\n```\n\"SSH to my server and check disk space\" → Claude maintains SSH session\n```\n\n**Development:**\n```\n\"Start Node.js and test this API\" → Claude runs interactive Node session\n```\n\n### Tool Usage Examples\n\nSearch/Replace Block Format:\n```\nfilepath.ext\n<<<<<<< SEARCH\ncontent to find\n=======\nnew content\n>>>>>>> REPLACE\n```\n\nExample:\n```\nsrc/main.js\n<<<<<<< SEARCH\nconsole.log(\"old message\");\n=======\nconsole.log(\"new message\");\n>>>>>>> REPLACE\n```\n\n### Enhanced Edit Block Features\n\nThe `edit_block` tool includes several enhancements for better reliability:\n\n1. **Improved Prompting**: Tool descriptions now emphasize making multiple small, focused edits rather than one large change\n2. **Fuzzy Search Fallback**: When exact matches fail, it performs fuzzy search and provides detailed feedback\n3. **Character-level Diffs**: Shows exactly what's different using `{-removed-}{+added+}` format\n4. **Multiple Occurrence Support**: Can replace multiple instances with `expected_replacements` parameter\n5. **Comprehensive Logging**: All fuzzy searches are logged for analysis and debugging\n\nWhen a search fails, you'll see detailed information about the closest match found, including similarity percentage, execution time, and character differences. All these details are automatically logged for later analysis using the fuzzy search log tools.\n\n### Docker Support\n\n### 🐳 Isolated Environment Usage\n\nDesktop Commander can be run in Docker containers for **complete isolation from your host system**, providing **zero risk to your computer**. This is perfect for testing, development, or when you want complete sandboxing.\n\n### Installation Instructions\n\n1. **Install Docker for Windows/Mac**\n   - Download and install Docker Desktop from [docker.com](https://www.docker.com/products/docker-desktop/)\n\n2. **Get Desktop Commander Docker Configuration**\n   - Visit: https://hub.docker.com/mcp/server/desktop-commander/manual\n   - **Option A:** Use the provided terminal command for automated setup\n   - **Option B:** Click \"Standalone\" to get the config JSON and add it manually to your Claude Desktop config\n \n\n3. **Mount Your Machine Folders (Coming Soon)**\n   - Instructions on how to mount your local directories into the Docker container will be provided soon\n   - This will allow you to work with your files while maintaining complete isolation\n\n### Benefits of Docker Usage\n- **Complete isolation** from your host system\n- **Consistent environment** across different machines\n- **Easy cleanup** - just remove the container when done\n- **Perfect for testing** new features or configurations\n\n## URL Support\n- `read_file` can now fetch content from both local files and URLs\n- Example: `read_file` with `isUrl: true` parameter to read from web resources\n- Handles both text and image content from remote sources\n- Images (local or from URLs) are displayed visually in Claude's interface, not as text\n- Claude can see and analyze the actual image content\n- Default 30-second timeout for URL requests\n\n## Fuzzy Search Log Analysis (npm scripts)\n\nThe fuzzy search logging system includes convenient npm scripts for analyzing logs outside of the MCP environment:\n\n```bash\n# View recent fuzzy search logs\nnpm run logs:view -- --count 20\n\n# Analyze patterns and performance\nnpm run logs:analyze -- --threshold 0.8\n\n# Export logs to CSV or JSON\nnpm run logs:export -- --format json --output analysis.json\n\n# Clear all logs (with confirmation)\nnpm run logs:clear\n```\n\nFor detailed documentation on these scripts, see [scripts/README.md](scripts/README.md).\n\n## Fuzzy Search Logs\n\nDesktop Commander includes comprehensive logging for fuzzy search operations in the `edit_block` tool. When an exact match isn't found, the system performs a fuzzy search and logs detailed information for analysis.\n\n### What Gets Logged\n\nEvery fuzzy search operation logs:\n- **Search and found text**: The text you're looking for vs. what was found\n- **Similarity score**: How close the match is (0-100%)\n- **Execution time**: How long the search took\n- **Character differences**: Detailed diff showing exactly what's different\n- **File metadata**: Extension, search/found text lengths\n- **Character codes**: Specific character codes causing differences\n\n### Log Location\n\nLogs are automatically saved to:\n- **macOS/Linux**: `~/.claude-server-commander-logs/fuzzy-search.log`\n- **Windows**: `%USERPROFILE%\\.claude-server-commander-logs\\fuzzy-search.log`\n\n### What You'll Learn\n\nThe fuzzy search logs help you understand:\n1. **Why exact matches fail**: Common issues like whitespace differences, line endings, or character encoding\n2. **Performance patterns**: How search complexity affects execution time\n3. **File type issues**: Which file extensions commonly have matching problems\n4. **Character encoding problems**: Specific character codes that cause diffs\n\n## Audit Logging\n\nDesktop Commander now includes comprehensive logging for all tool calls:\n\n### What Gets Logged\n- Every tool call is logged with timestamp, tool name, and arguments (sanitized for privacy)\n- Logs are rotated automatically when they reach 10MB in size\n\n### Log Location\nLogs are saved to:\n- **macOS/Linux**: `~/.claude-server-commander/claude_tool_call.log`\n- **Windows**: `%USERPROFILE%\\.claude-server-commander\\claude_tool_call.log`\n\nThis audit trail helps with debugging, security monitoring, and understanding how Claude is interacting with your system.\n\n## Handling Long-Running Commands\n\nFor commands that may take a while:\n\n## Configuration Management\n\n### ⚠️ Important Security Warnings\n\n> **For comprehensive security information and vulnerability reporting**: See [SECURITY.md](SECURITY.md)\n\n1. **Known security limitations**: Directory restrictions and command blocking can be bypassed through various methods including symlinks, command substitution, and absolute paths or code execution\n\n2. **Always change configuration in a separate chat window** from where you're doing your actual work. Claude may sometimes attempt to modify configuration settings (like `allowedDirectories`) if it encounters filesystem access restrictions.\n\n3. **The `allowedDirectories` setting currently only restricts filesystem operations**, not terminal commands. Terminal commands can still access files outside allowed directories.\n\n4. **For production security**: Use the [Docker installation](#option-6-docker-installation-🐳-⭐-auto-updates-no-nodejs-required) which provides complete isolation from your host system.\n\n### Configuration Tools\n\nYou can manage server configuration using the provided tools:\n\n```javascript\n// Get the entire config\nget_config({})\n\n// Set a specific config value\nset_config_value({ \"key\": \"defaultShell\", \"value\": \"/bin/zsh\" })\n\n// Set multiple config values using separate calls\nset_config_value({ \"key\": \"defaultShell\", \"value\": \"/bin/bash\" })\nset_config_value({ \"key\": \"allowedDirectories\", \"value\": [\"/Users/username/projects\"] })\n```\n\nThe configuration is saved to `config.json` in the server's working directory and persists between server restarts.\n\n#### Understanding fileWriteLineLimit\n\nThe `fileWriteLineLimit` setting controls how many lines can be written in a single `write_file` operation (default: 50 lines). This limit exists for several important reasons:\n\n**Why the limit exists:**\n- **AIs are wasteful with tokens**: Instead of doing two small edits in a file, AIs may decide to rewrite the whole thing. We're trying to force AIs to do things in smaller changes as it saves time and tokens\n- **Claude UX message limits**: There are limits within one message and hitting \"Continue\" does not really work. What we're trying here is to make AI work in smaller chunks so when you hit that limit, multiple chunks have succeeded and that work is not lost - it just needs to restart from the last chunk\n\n**Setting the limit:**\n```javascript\n// You can set it to thousands if you want\nset_config_value({ \"key\": \"fileWriteLineLimit\", \"value\": 1000 })\n\n// Or keep it smaller to force more efficient behavior\nset_config_value({ \"key\": \"fileWriteLineLimit\", \"value\": 25 })\n```\n\n**Maximum value**: You can set it to thousands if you want - there's no technical restriction.\n\n**Best practices**:\n- Keep the default (50) to encourage efficient AI behavior and avoid token waste\n- The system automatically suggests chunking when limits are exceeded\n- Smaller chunks mean less work lost when Claude hits message limits\n\n### Best Practices\n\n1. **Create a dedicated chat for configuration changes**: Make all your config changes in one chat, then start a new chat for your actual work.\n\n2. **Be careful with empty `allowedDirectories`**: Setting this to an empty array (`[]`) grants access to your entire filesystem for file operations.\n\n3. **Use specific paths**: Instead of using broad paths like `/`, specify exact directories you want to access.\n\n4. **Always verify configuration after changes**: Use `get_config({})` to confirm your changes were applied correctly.\n\n## Command Line Options\n\nDesktop Commander supports several command line options for customizing behavior:\n\n### Disable Onboarding\n\nBy default, Desktop Commander shows helpful onboarding prompts to new users (those with fewer than 10 tool calls). You can disable this behavior:\n\n```bash\n# Disable onboarding for this session\nnode dist/index.js --no-onboarding\n\n# Or if using npm scripts\nnpm run start:no-onboarding\n\n# For npx installations, modify your claude_desktop_config.json:\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander@latest\",\n        \"--no-onboarding\"\n      ]\n    }\n  }\n}\n```\n\n**When onboarding is automatically disabled:**\n- When the MCP client name is set to \"desktop-commander\"\n- When using the `--no-onboarding` flag\n- After users have used onboarding prompts or made 10+ tool calls\n\n**Debug information:**\nThe server will log when onboarding is disabled: `\"Onboarding disabled via --no-onboarding flag\"`\n\n## Using Different Shells\n\nYou can specify which shell to use for command execution:\n\n```javascript\n// Using default shell (bash or system default)\nexecute_command({ \"command\": \"echo $SHELL\" })\n\n// Using zsh specifically\nexecute_command({ \"command\": \"echo $SHELL\", \"shell\": \"/bin/zsh\" })\n\n// Using bash specifically\nexecute_command({ \"command\": \"echo $SHELL\", \"shell\": \"/bin/bash\" })\n```\n\nThis allows you to use shell-specific features or maintain consistent environments across commands.\n\n1. `execute_command` returns after timeout with initial output\n2. Command continues in background\n3. Use `read_output` with PID to get new output\n4. Use `force_terminate` to stop if needed\n\n## Debugging\n\nIf you need to debug the server, you can install it in debug mode:\n\n```bash\n# Using npx\nnpx @wonderwhy-er/desktop-commander@latest setup --debug\n\n# Or if installed locally\nnpm run setup:debug\n```\n\nThis will:\n1. Configure Claude to use a separate \"desktop-commander\" server\n2. Enable Node.js inspector protocol with `--inspect-brk=9229` flag\n3. Pause execution at the start until a debugger connects\n4. Enable additional debugging environment variables\n\nTo connect a debugger:\n- In Chrome, visit `chrome://inspect` and look for the Node.js instance\n- In VS Code, use the \"Attach to Node Process\" debug configuration\n- Other IDEs/tools may have similar \"attach\" options for Node.js debugging\n\nImportant debugging notes:\n- The server will pause on startup until a debugger connects (due to the `--inspect-brk` flag)\n- If you don't see activity during debugging, ensure you're connected to the correct Node.js process\n- Multiple Node processes may be running; connect to the one on port 9229\n- The debug server is identified as \"desktop-commander-debug\" in Claude's MCP server list\n\nTroubleshooting:\n- If Claude times out while trying to use the debug server, your debugger might not be properly connected\n- When properly connected, the process will continue execution after hitting the first breakpoint\n- You can add additional breakpoints in your IDE once connected\n\n## Model Context Protocol Integration\n\nThis project extends the MCP Filesystem Server to enable:\n- Local server support in Claude Desktop\n- Full system command execution\n- Process management\n- File operations\n- Code editing with search/replace blocks\n\nCreated as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us\n\n## DONE\n- **20-05-2025 v0.1.40 Release** - Added audit logging for all tool calls, improved line-based file operations, enhanced edit_block with better prompting for smaller edits, added explicit telemetry opt-out prompting \n- **05-05-2025 Fuzzy Search Logging** - Added comprehensive logging system for fuzzy search operations with detailed analysis tools, character-level diffs, and performance metrics to help debug edit_block failures\n- **29-04-2025 Telemetry Opt Out through configuration** - There is now setting to disable telemetry in config, ask in chat\n- **23-04-2025 Enhanced edit functionality** - Improved format, added fuzzy search and multi-occurrence replacements, should fail less and use edit block more often\n- **16-04-2025 Better configurations** - Improved settings for allowed paths, commands and shell environments\n- **14-04-2025 Windows environment fixes** - Resolved issues specific to Windows platforms\n- **14-04-2025 Linux improvements** - Enhanced compatibility with various Linux distributions\n- **12-04-2025 Better allowed directories and blocked commands** - Improved security and path validation for file read/write and terminal command restrictions.\nTerminal still can access files ignoring allowed directories.\n- **11-04-2025 Shell configuration** - Added ability to configure preferred shell for command execution\n- **07-04-2025 Added URL support** - `read_file` command can now fetch content from URLs\n- **28-03-2025 Fixed \"Watching /\" JSON error** - Implemented custom stdio transport to handle non-JSON messages and prevent server crashes\n- **25-03-2025 Better code search** ([merged](https://github.com/wonderwhy-er/ClaudeServerCommander/pull/17)) - Enhanced code exploration with context-aware results\n\n## Roadmap\n\nThe following features are currently being explored:\n\n- **Support for WSL** - Windows Subsystem for Linux integration\n- **Support for SSH** - Remote server command execution\n- **Better file support for formats like CSV/PDF**\n- **Terminal sandboxing for Mac/Linux/Windows for better security**\n- **File reading modes** - For example, allow reading HTML as plain text or markdown\n- **Interactive shell support** - ssh, node/python repl\n- **Improve large file reading and writing**\n\n## Support Desktop Commander\n\n<div align=\"center\">\n  <h3>📢 SUPPORT THIS PROJECT</h3>\n  <p><strong>Desktop Commander MCP is free and open source, but needs your support to thrive!</strong></p>\n  \n  <div style=\"background-color: #f8f9fa; padding: 15px; border-radius: 10px; margin: 20px 0; border: 2px solid #007bff;\">\n    <p>Our philosophy is simple: we don't want you to pay for it if you're not successful. But if Desktop Commander contributes to your success, please consider contributing to ours.</p>\n    <p><strong>Ways to support:</strong></p>\n    <ul style=\"list-style-type: none; padding: 0;\">\n      <li>🌟 <a href=\"https://github.com/sponsors/wonderwhy-er\"><strong>GitHub Sponsors</strong></a> - Recurring support</li>\n      <li>☕ <a href=\"https://www.buymeacoffee.com/wonderwhyer\"><strong>Buy Me A Coffee</strong></a> - One-time contributions</li>\n      <li>💖 <a href=\"https://www.patreon.com/c/EduardsRuzga\"><strong>Patreon</strong></a> - Become a patron and support us monthly</li>\n      <li>⭐ <a href=\"https://github.com/wonderwhy-er/DesktopCommanderMCP\"><strong>Star on GitHub</strong></a> - Help others discover the project</li>\n    </ul>\n  </div>\n</div>\n\n\n### ❤️ Supporters Hall of Fame\n\nGenerous supporters are featured here. Thank you for helping make this project possible!\n\n<div align=\"center\">\n<table>\n  <tr>\n    <td align=\"center\">\n      <a href=\"https://github.com/jonrichards\">\n        <img src=\"https://github.com/jonrichards.png\" width=\"100px;\" alt=\"Jon Richards\"/>\n        <br />\n        <sub><b>Jon Richards</b></sub>\n      </a>\n    </td>\n    <td align=\"center\">\n      <a href=\"https://github.com/stepanic\">\n        <img src=\"https://github.com/stepanic.png\" width=\"100px;\" alt=\"Matija Stepanic\"/>\n        <br />\n        <sub><b>Matija Stepanic</b></sub>\n      </a>\n    </td>\n  </tr>\n</table>\n</div>\n\n<details>\n  <summary><strong>Why your support matters</strong></summary>\n  <p>Your support allows us to:</p>\n  <ul>\n    <li>Continue active development and maintenance</li>\n    <li>Add new features and integrations</li>\n    <li>Improve compatibility across platforms</li>\n    <li>Provide better documentation and examples</li>\n    <li>Build a stronger community around the project</li>\n  </ul>\n</details>\n\n## Website\n\nVisit our official website at [https://desktopcommander.app/](https://desktopcommander.app/) for the latest information, documentation, and updates.\n\n## Media\n\nLearn more about this project through these resources:\n\n### Article\n[Claude with MCPs replaced Cursor & Windsurf. How did that happen?](https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96) - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.\n\n### Video\n[Claude Desktop Commander Video Tutorial](https://www.youtube.com/watch?v=ly3bed99Dy8) - Watch how to set up and use the Commander effectively.\n\n### Publication at AnalyticsIndiaMag\n[\nThis Developer Ditched Windsurf, Cursor Using Claude with MCPs](https://analyticsindiamag.com/ai-features/this-developer-ditched-windsurf-cursor-using-claude-with-mcps/)\n\n### Community\nJoin our [Discord server](https://discord.gg/kQ27sNnZr7) to get help, share feedback, and connect with other users.\n\n## Testimonials\n\n[![It's a life saver! I paid Claude + Cursor currently which I always feel it's kind of duplicated. This solves the problem ultimately. I am so happy. Thanks so much. Plus today Claude has added the web search support. With this MCP + Internet search, it writes the code with the latest updates. It's so good when Cursor doesn't work sometimes or all the fast requests are used.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img.png) https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n)\n\n[![This is the first comment I've ever left on a youtube video, THANK YOU! I've been struggling to update an old Flutter app in Cursor from an old pre null-safety version to a current version and implemented null-safety using Claude 3.7. I got most of the way but had critical BLE errors that I spent days trying to resolve with no luck. I tried Augment Code but it didn't get it either. I implemented your MCP in Claude desktop and was able to compare the old and new codebase fully, accounting for the updates in the code, and fix the issues in a couple of hours. A word of advice to people trying this, be sure to stage changes and commit when appropriate to be able to undo unwanted changes. Amazing!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_1.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg\n)\n\n[![Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes losing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost.\nAlso this is much more than code editing it is much more thank you for great video!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_2.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg)\n\n[![it is a great tool, thank you, I like using it, as it gives claude an ability to do surgical edits, making it more like a human developer.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_3.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg)\n\n[![You sir are my hero. You've pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven't looked back since.\nClaude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I'm not lol.\n33\n1](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_4.png)\nhttps://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e](https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e)\n\nIf you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.\n\nWe welcome contributions from the community! Whether you've found a bug, have a feature request, or want to contribute code, here's how you can help:\n\n- **Found a bug?** Open an issue at [github.com/wonderwhy-er/DesktopCommanderMCP/issues](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues)\n- **Have a feature idea?** Submit a feature request in the issues section\n- **Want to contribute code?** Fork the repository, create a branch, and submit a pull request\n- **Questions or discussions?** Start a discussion in the GitHub Discussions tab\n\nAll contributions, big or small, are greatly appreciated!\n\nIf you find this tool valuable for your workflow, please consider [supporting the project](https://www.buymeacoffee.com/wonderwhyer).\n\n## Frequently Asked Questions\n\nHere are answers to some common questions. For a more comprehensive FAQ, see our [detailed FAQ document](FAQ.md).\n\n### What is Desktop Commander?\nIt's an MCP tool that enables Claude Desktop to access your file system and terminal, turning Claude into a versatile assistant for coding, automation, codebase exploration, and more.\n\n### How is this different from Cursor/Windsurf?\nUnlike IDE-focused tools, Claude Desktop Commander provides a solution-centric approach that works with your entire OS, not just within a coding environment. Claude reads files in full rather than chunking them, can work across multiple projects simultaneously, and executes changes in one go rather than requiring constant review.\n\n### Do I need to pay for API credits?\nNo. This tool works with Claude Desktop's standard Pro subscription ($20/month), not with API calls, so you won't incur additional costs beyond the subscription fee.\n\n### Does Desktop Commander automatically update?\nYes, when installed through npx or Smithery, Desktop Commander automatically updates to the latest version when you restart Claude. No manual update process is needed.\n\n### What are the most common use cases?\n- Exploring and understanding complex codebases\n- Generating diagrams and documentation\n- Automating tasks across your system\n- Working with multiple projects simultaneously\n- Making surgical code changes with precise control\n\n### I'm having trouble installing or using the tool. Where can I get help?\nJoin our [Discord server](https://discord.gg/kQ27sNnZr7) for community support, check the [GitHub issues](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues) for known problems, or review the [full FAQ](FAQ.md) for troubleshooting tips. You can also visit our [website FAQ section](https://desktopcommander.app#faq) for a more user-friendly experience. If you encounter a new issue, please consider [opening a GitHub issue](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues/new) with details about your problem.\n\n### How do I report security vulnerabilities?\nPlease create a [GitHub Issue](https://github.com/wonderwhy-er/DesktopCommanderMCP/issues) with detailed information about any security vulnerabilities you discover. See our [Security Policy](SECURITY.md) for complete guidelines on responsible disclosure.\n\n## Data Collection & Privacy\n\nDesktop Commander collects limited anonymous telemetry data to help improve the tool. No personal information, file contents, file paths, or command arguments are collected.\n\n### Usage Analytics (Local Only)\n- **Local usage statistics** are always collected and stored locally on your machine for functionality and the `get_usage_stats` tool\n- Use the `get_usage_stats` tool to view your personal usage patterns, success rates, and performance metrics\n- **This data is NOT sent anywhere** - it remains on your computer for your personal insights\n\n### Feedback System\n- Use the `give_feedback_to_desktop_commander` tool to provide feedback about Desktop Commander\n- Opens a browser-based feedback form to send suggestions and feedback to the development team\n- Only basic usage statistics (tool call count, days using, platform) are pre-filled to provide context but you can remove them\n\n### External Telemetry Opt-Out\nExternal telemetry (sent to analytics services) is enabled by default but can be disabled:\n\n1. Open the chat and simply ask:\n   **\"Disable telemetry\"**\n2. The chatbot will update your settings automatically.\n\n**Note:** This only disables external telemetry. Local usage analytics remain active for tool functionality but is not share externally\n\nFor complete details about data collection, please see our [Privacy Policy](https://legal.desktopcommander.app/privacy_desktop_commander_mcp).\n\n## Verifications\n[![Verified on MseeP](https://mseep.ai/badge.svg)](https://mseep.ai/app/25ff7a06-58bc-40b8-bd79-ebb715140f1a)\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "desktopcommandermcp",
        "commands",
        "workflows",
        "file management",
        "file editing",
        "commands manage"
      ],
      "category": "file-management"
    },
    "xoy8n--webp-converter": {
      "owner": "xoy8n",
      "name": "webp-converter",
      "url": "https://github.com/xoy8n/webp-converter",
      "imageUrl": "/freedevtools/mcp/pfp/xoy8n.webp",
      "description": "A server that converts image files such as PNG, JPG, and JPEG to WebP format, supporting both single and batch conversions. It allows configuration of quality settings and provides detailed conversion reports.",
      "stars": 0,
      "forks": 0,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-06-19T01:34:07Z",
      "readme_content": "# WebP Conversion MCP Server\n\nThis project is a Model Context Protocol (MCP) server that converts image files to WebP format.\n\n## Features\n\n- Convert PNG, JPG, and JPEG files to WebP\n- Support for single image or batch image conversion\n- Option to configure quality and lossless compression\n- Option to keep original files\n- Provides a detailed report of the conversion result\n\n### Installation & Execution\n\n```bash\nnpx -y @xoy8n/webp-converter@latest\n```\n\n### Cursor mcp.json Configuration\n\n```json\n{\n  \"mcpServers\": {\n    \"webp-converter\": {\n      \"command\": \"npx\",\n      \"args\": [\"-y\", \"@xoy8n/webp-converter@latest\"]\n    }\n  }\n}\n```\n\n## MCP Tool List\n\n### 1. convert_to_webp\n\nConverts a single image file to WebP format.\n\n**Parameters:**\n\n- `image_path`: Path to the image file to convert\n- `base_path`: Base directory path\n- `quality`: WebP quality setting (default: 95)\n- `lossless`: Whether to use lossless compression (default: false)\n- `keep_original`: Whether to retain the original file (default: false)\n\n**Returns:**\n\n- Conversion success status\n- Input/output file paths\n- File size before/after conversion\n- Applied quality and compression settings\n\n### 2. batch_convert_to_webp\n\nConverts multiple image files to WebP format in one go.\n\n**Parameters:**\n\n- `image_paths`: Array of paths to image files to convert\n- `base_path`: Base directory path (optional)\n- `quality`: WebP quality setting (default: 95)\n- `lossless`: Whether to use lossless compression (default: false)\n- `keep_original`: Whether to retain the original files (default: false)\n\n**Returns:**\n\n- Array of conversion results for each image file\n\n## How to Use\n\n1. Select the image files you want to convert.\n2. Run the `convert_to_webp` or `batch_convert_to_webp` command via the MCP tools.\n3. Check the conversion results.\n\n## License\n\nMIT\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "webp",
        "jpeg",
        "converter",
        "webp converter",
        "jpeg webp",
        "webp format"
      ],
      "category": "file-management"
    },
    "xraywu--mcp-pdf-extraction-server": {
      "owner": "xraywu",
      "name": "mcp-pdf-extraction-server",
      "url": "https://github.com/xraywu/mcp-pdf-extraction-server",
      "imageUrl": "/freedevtools/mcp/pfp/xraywu.webp",
      "description": "Extracts text from PDF files using advanced reading and OCR capabilities. Supports content retrieval from specified pages or entire documents for seamless integration into applications.",
      "stars": 18,
      "forks": 9,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-14T15:12:13Z",
      "readme_content": "# PDF Extraction MCP Server (Claude Code Fork)\n\nMCP server to extract contents from PDF files, with fixes for Claude Code CLI installation.\n\nThis fork includes critical fixes for installing and running the server with Claude Code (the CLI version).\n\n## What's Different in This Fork\n\n1. **Added `__main__.py`** - Enables the package to be run as a module with `python -m pdf_extraction`\n2. **Claude Code specific instructions** - Clear installation steps that work with Claude Code CLI\n3. **Tested installation process** - Verified working with `claude mcp add` command\n\n## Components\n\n### Tools\n\nThe server implements one tool:\n- **extract-pdf-contents**: Extract contents from a local PDF file\n  - Takes `pdf_path` as a required string argument (local file path)\n  - Takes `pages` as an optional string argument (comma-separated page numbers, supports negative indexing like `-1` for last page)\n  - Supports both PDF text extraction and OCR for scanned documents\n\n## Installation for Claude Code CLI\n\n### Prerequisites\n\n- Python 3.11 or higher\n- pip or conda\n- Claude Code CLI installed (`claude` command)\n\n### Step 1: Clone and Install\n\n```bash\n# Clone this fork\ngit clone https://github.com/lh/mcp-pdf-extraction-server.git\ncd mcp-pdf-extraction-server\n\n# Install in development mode\npip install -e .\n```\n\n### Step 2: Find the Installed Command\n\n```bash\n# Check where pdf-extraction was installed\nwhich pdf-extraction\n# Example output: /opt/homebrew/Caskroom/miniconda/base/bin/pdf-extraction\n```\n\n### Step 3: Add to Claude Code\n\n```bash\n# Add the server using the full path from above\nclaude mcp add pdf-extraction /opt/homebrew/Caskroom/miniconda/base/bin/pdf-extraction\n\n# Verify it was added\nclaude mcp list\n```\n\n### Step 4: Use in Claude\n\n```bash\n# Start a new Claude session\nclaude\n\n# In Claude, type:\n/mcp\n\n# You should see:\n# MCP Server Status\n# • pdf-extraction: connected\n```\n\n## Usage Example\n\nOnce connected, you can ask Claude to extract PDF contents:\n\n```\n\"Can you extract the content from the PDF at /path/to/document.pdf?\"\n\n\"Extract pages 1-3 and the last page from /path/to/document.pdf\"\n```\n\n## Troubleshooting\n\n### Server Not Connecting\n\n1. Make sure you started a NEW Claude session after adding the server\n2. Verify the command path is correct: `ls -la $(which pdf-extraction)`\n3. Test the command directly (it should hang waiting for input): `pdf-extraction`\n\n### Module Not Found Errors\n\nIf you get Python import errors:\n1. Make sure you're using the same Python environment where you installed the package\n2. Try using the full Python path: `claude mcp add pdf-extraction /path/to/python -m pdf_extraction`\n\n### Installation Issues\n\nIf `pip install -e .` fails:\n1. Make sure you have Python 3.11+: `python --version`\n2. Try creating a fresh virtual environment:\n   ```bash\n   python -m venv venv\n   source venv/bin/activate  # On Windows: venv\\Scripts\\activate\n   pip install -e .\n   ```\n\n## For Claude Desktop Users\n\nThis fork is specifically for Claude Code CLI. If you're using Claude Desktop (the GUI app), please refer to the [original repository](https://github.com/xraywu/mcp-pdf-extraction-server) for installation instructions.\n\n## Dependencies\n\n- mcp>=1.2.0\n- pypdf2>=3.0.1\n- pytesseract>=0.3.10 (for OCR support)\n- Pillow>=10.0.0\n- pydantic>=2.10.1,<3.0.0\n- pymupdf>=1.24.0\n\n## Contributing\n\nContributions are welcome! The main change in this fork is the addition of `__main__.py` to make the package runnable as a module.\n\n## License\n\nSame as the original repository.\n\n## Credits\n\nOriginal server by [@xraywu](https://github.com/xraywu)\nClaude Code fixes by [@lh](https://github.com/lh)",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "pdf",
        "ocr",
        "documents",
        "pdf extraction",
        "text pdf",
        "pdf files"
      ],
      "category": "file-management"
    },
    "yzfly--mcp-excel-server": {
      "owner": "yzfly",
      "name": "mcp-excel-server",
      "url": "https://github.com/yzfly/mcp-excel-server",
      "imageUrl": "/freedevtools/mcp/pfp/yzfly.webp",
      "description": "Manage and analyze Excel files, including reading, writing, and visualizing data. Perform statistical analysis and data quality assessments to enhance data manipulation and insights.",
      "stars": 72,
      "forks": 14,
      "license": "No License",
      "language": "Python",
      "updated_at": "2025-09-30T14:55:08Z",
      "readme_content": "# Excel MCP Server\n\nAn MCP server that provides comprehensive Excel file management and data analysis capabilities.\n\n## Features\n\n- **Excel File Operations**\n  - Read multiple Excel formats (XLSX, XLS, CSV, TSV, JSON)\n  - Write and update Excel files\n  - Get file information and sheet names\n\n- **Data Analysis**\n  - Summary statistics and descriptive analysis\n  - Data quality assessment\n  - Pivot tables\n  - Filtering and querying data\n\n- **Visualization**\n  - Generate charts and plots from Excel data\n  - Create data previews\n  - Export visualizations as images\n\n## Installation\n\n1. Create a new Python environment (recommended):\n\n```bash\n# Using uv (recommended)\nuv init excel-mcp-server\ncd excel-mcp-server\nuv venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n\n# Or using pip\npython -m venv .venv\nsource .venv/bin/activate  # On Windows: .venv\\Scripts\\activate\n```\n\n2. Install dependencies:\n\n```bash\n# Using uv\nuv pip install -e .\n```\n\n## Integration with Claude Desktop\n\n1. Install [Claude Desktop](https://claude.ai/download)\n2. Open Settings and go to the Developer tab\n3. Edit `claude_desktop_config.json`:\n\n```json\n{\n  \"mcpServers\": {\n      \"command\": \"uvx\",\n      \"args\": [\n        \"mcp-excel-server\"\n      ],\n      \"env\": {\n        \"PYTHONPATH\": \"/path/to/your/python\"\n      }\n  }\n}\n```\n\n## Available Tools\n\n### File Reading\n- `read_excel`: Read Excel files\n- `get_excel_info`: Get file details\n- `get_sheet_names`: List worksheet names\n\n### Data Analysis\n- `analyze_excel`: Perform statistical analysis\n- `filter_excel`: Filter data by conditions\n- `pivot_table`: Create pivot tables\n- `data_summary`: Generate comprehensive data summary\n\n### Data Visualization\n- `export_chart`: Generate charts\n  - Supports line charts, bar charts, scatter plots, histograms\n\n### File Operations\n- `write_excel`: Write new Excel files\n- `update_excel`: Update existing Excel files\n\n## Available Resources\n\n- `excel://{file_path}`: Get file content\n- `excel://{file_path}/info`: Get file structure information\n- `excel://{file_path}/preview`: Generate data preview image\n\n## Prompt Templates\n\n- `analyze_excel_data`: Guided template for Excel data analysis\n- `create_chart`: Help create data visualizations\n- `data_cleaning`: Assist with data cleaning\n\n## Usage Examples\n\n- \"Analyze my sales_data.xlsx file\"\n- \"Create a bar chart for product_sales.csv\"\n- \"Filter employees over 30 in employees.xlsx\"\n- \"Generate a pivot table of department sales\"\n\n## Security Considerations\n\n- Read files only from specified paths\n- Limit file size\n- Prevent accidental file overwriting\n- Strictly control data transformation operations\n\n## Dependencies\n\n- pandas\n- numpy\n- matplotlib\n- seaborn\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "excel",
        "yzfly",
        "files",
        "excel server",
        "excel files",
        "mcp excel"
      ],
      "category": "file-management"
    },
    "zanetworker--mcp-docling": {
      "owner": "zanetworker",
      "name": "mcp-docling",
      "url": "https://github.com/zanetworker/mcp-docling",
      "imageUrl": "/freedevtools/mcp/pfp/zanetworker.webp",
      "description": "Convert documents to markdown, extract tables, and process multiple files efficiently for enhanced document processing capabilities.",
      "stars": 18,
      "forks": 8,
      "license": "MIT License",
      "language": "Python",
      "updated_at": "2025-09-25T02:42:51Z",
      "readme_content": "# MCP Docling Server\n\nAn MCP server that provides document processing capabilities using the Docling library.\n\n## Installation\n\nYou can install the package using pip:\n\n```bash\npip install -e .\n```\n\n## Usage\n\nStart the server using either stdio (default) or SSE transport:\n\n```bash\n# Using stdio transport (default)\nmcp-server-lls\n\n# Using SSE transport on custom port\nmcp-server-lls --transport sse --port 8000\n```\n\nIf you're using uv, you can run the server directly without installing:\n\n```bash\n# Using stdio transport (default)\nuv run mcp-server-lls\n\n# Using SSE transport on custom port\nuv run mcp-server-lls --transport sse --port 8000\n```\n\n## Available Tools\n\nThe server exposes the following tools:\n\n1. **convert_document**: Convert a document from a URL or local path to markdown format\n   - `source`: URL or local file path to the document (required)\n   - `enable_ocr`: Whether to enable OCR for scanned documents (optional, default: false)\n   - `ocr_language`: List of language codes for OCR, e.g. [\"en\", \"fr\"] (optional)\n\n2. **convert_document_with_images**: Convert a document and extract embedded images\n   - `source`: URL or local file path to the document (required)\n   - `enable_ocr`: Whether to enable OCR for scanned documents (optional, default: false)\n   - `ocr_language`: List of language codes for OCR (optional)\n\n3. **extract_tables**: Extract tables from a document as structured data\n   - `source`: URL or local file path to the document (required)\n\n4. **convert_batch**: Process multiple documents in batch mode\n   - `sources`: List of URLs or file paths to documents (required)\n   - `enable_ocr`: Whether to enable OCR for scanned documents (optional, default: false)\n   - `ocr_language`: List of language codes for OCR (optional)\n\n5. **qna_from_document**: Create a Q&A document from a URL or local path to YAML format\n   - `source`: URL or local file path to the document (required)\n   - `no_of_qnas`: Number of expected Q&As (optional, default: 5)\n   - **Note**: This tool requires IBM Watson X credentials to be set as environment variables:\n     - `WATSONX_PROJECT_ID`: Your Watson X project ID\n     - `WATSONX_APIKEY`: Your IBM Cloud API key\n     - `WATSONX_URL`: The Watson X API URL (default: https://us-south.ml.cloud.ibm.com)\n\n6. **get_system_info**: Get information about system configuration and acceleration status\n\n## Example with Llama Stack\n\n\nhttps://github.com/user-attachments/assets/8ad34e50-cbf7-4ec8-aedd-71c42a5de0a1\n\n\nYou can use this server with [Llama Stack](https://github.com/meta-llama/llama-stack) to provide document processing capabilities to your LLM applications. Make sure you have a running Llama Stack server, then configure your `INFERENCE_MODEL`\n\n```python\nfrom llama_stack_client.lib.agents.agent import Agent\nfrom llama_stack_client.lib.agents.event_logger import EventLogger\nfrom llama_stack_client.types.agent_create_params import AgentConfig\nfrom llama_stack_client.types.shared_params.url import URL\nfrom llama_stack_client import LlamaStackClient\nimport os\n\n# Set your model ID\nmodel_id = os.environ[\"INFERENCE_MODEL\"]\nclient = LlamaStackClient(\n    base_url=f\"http://localhost:{os.environ.get('LLAMA_STACK_PORT', '8080')}\"\n)\n\n# Register MCP tools\nclient.toolgroups.register(\n    toolgroup_id=\"mcp::docling\",\n    provider_id=\"model-context-protocol\",\n    mcp_endpoint=URL(uri=\"http://0.0.0.0:8000/sse\"))\n\n# Define an agent with MCP toolgroup\nagent_config = AgentConfig(\n    model=model_id,\n    instructions=\"\"\"You are a helpful assistant with access to tools to manipulate documents.\nAlways use the appropriate tool when asked to process documents.\"\"\",\n    toolgroups=[\"mcp::docling\"],\n    tool_choice=\"auto\",\n    max_tool_calls=3,\n)\n\n# Create the agent\nagent = Agent(client, agent_config)\n\n# Create a session\nsession_id = agent.create_session(\"test-session\")\n\ndef _summary_and_qna(source: str):\n    # Define the prompt\n    run_turn(f\"Please convert the document at {source} to markdown and summarize its content.\")\n    run_turn(f\"Please generate a Q&A document with 3 items for source at {source} and display it in YAML format.\")\n\ndef _run_turn(prompt):\n    # Create a turn\n    response = agent.create_turn(\n        messages=[\n            {\n                \"role\": \"user\",\n                \"content\": prompt,\n            }\n        ],\n        session_id=session_id,\n    )\n\n    # Log the response\n    for log in EventLogger().log(response):\n        log.print()\n\n_summary_and_qna('https://arxiv.org/pdf/2004.07606')\n```\n\n## Caching\n\nThe server caches processed documents in `~/.cache/mcp-docling/` to improve performance for repeated requests.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "docling",
        "documents",
        "document",
        "document processing",
        "documents markdown",
        "convert documents"
      ],
      "category": "file-management"
    },
    "zcaceres--markdownify-mcp": {
      "owner": "zcaceres",
      "name": "markdownify-mcp",
      "url": "https://github.com/zcaceres/markdownify-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/zcaceres.webp",
      "description": "Converts various file types and web content into Markdown format, supporting multiple input types such as PDFs, images, and audio files.",
      "stars": 2168,
      "forks": 178,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-10-03T16:23:43Z",
      "readme_content": "# Markdownify MCP Server\n\n> Help! I need someone with a Windows computer to help me add support for Markdownify-MCP on Windows. PRs exist but I cannot test them. Post [here](https://github.com/zcaceres/markdownify-mcp/issues/18) if interested.\n\n\n\nMarkdownify is a Model Context Protocol (MCP) server that converts various file types and web content to Markdown format. It provides a set of tools to transform PDFs, images, audio files, web pages, and more into easily readable and shareable Markdown text.\n\n<a href=\"https://glama.ai/mcp/servers/bn5q4b0ett\"><img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/bn5q4b0ett/badge\" alt=\"Markdownify Server MCP server\" /></a>\n\n## Features\n\n- Convert multiple file types to Markdown:\n  - PDF\n  - Images\n  - Audio (with transcription)\n  - DOCX\n  - XLSX\n  - PPTX\n- Convert web content to Markdown:\n  - YouTube video transcripts\n  - Bing search results\n  - General web pages\n- Retrieve existing Markdown files\n\n## Getting Started\n\n1. Clone this repository\n2. Install dependencies:\n   ```\n   pnpm install\n   ```\n\nNote: this will also install `uv` and related Python depdencies.\n\n3. Build the project:\n   ```\n   pnpm run build\n   ```\n4. Start the server:\n   ```\n   pnpm start\n   ```\n\n## Development\n\n- Use `pnpm run dev` to start the TypeScript compiler in watch mode\n- Modify `src/server.ts` to customize server behavior\n- Add or modify tools in `src/tools.ts`\n\n## Usage with Desktop App\n\nTo integrate this server with a desktop app, add the following to your app's server configuration:\n\n```js\n{\n  \"mcpServers\": {\n    \"markdownify\": {\n      \"command\": \"node\",\n      \"args\": [\n        \"{ABSOLUTE PATH TO FILE HERE}/dist/index.js\"\n      ],\n      \"env\": {\n        // By default, the server will use the default install location of `uv`\n        \"UV_PATH\": \"/path/to/uv\"\n      }\n    }\n  }\n}\n```\n\n## Available Tools\n\n- `youtube-to-markdown`: Convert YouTube videos to Markdown\n- `pdf-to-markdown`: Convert PDF files to Markdown\n- `bing-search-to-markdown`: Convert Bing search results to Markdown\n- `webpage-to-markdown`: Convert web pages to Markdown\n- `image-to-markdown`: Convert images to Markdown with metadata\n- `audio-to-markdown`: Convert audio files to Markdown with transcription\n- `docx-to-markdown`: Convert DOCX files to Markdown\n- `xlsx-to-markdown`: Convert XLSX files to Markdown\n- `pptx-to-markdown`: Convert PPTX files to Markdown\n- `get-markdown-file`: Retrieve an existing Markdown file. File extension must end with: *.md, *.markdown.\n  \n  OPTIONAL: set `MD_SHARE_DIR` env var to restrict the directory from which files can be retrieved, e.g. `MD_SHARE_DIR=[SOME_PATH] pnpm run start` \n\n## Contributing\n\nContributions are welcome! Please feel free to submit a Pull Request.\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "markdownify",
        "markdown",
        "mcp",
        "markdownify mcp",
        "zcaceres markdownify",
        "content markdown"
      ],
      "category": "file-management"
    },
    "zhanyiwp--DesktopCommanderMCP": {
      "owner": "zhanyiwp",
      "name": "DesktopCommanderMCP",
      "url": "https://github.com/zhanyiwp/DesktopCommanderMCP",
      "imageUrl": "/freedevtools/mcp/pfp/zhanyiwp.webp",
      "description": "Execute terminal commands and manage processes on a local computer. Features include advanced file editing capabilities and real-time output streaming to enhance development tasks.",
      "stars": 2,
      "forks": 1,
      "license": "MIT License",
      "language": "",
      "updated_at": "2025-05-14T08:01:01Z",
      "readme_content": "# Desktop Commander MCP\n\n\n[![npm downloads](https://img.shields.io/npm/dw/@wonderwhy-er/desktop-commander)](https://www.npmjs.com/package/@wonderwhy-er/desktop-commander)\n[![smithery badge](https://smithery.ai/badge/@wonderwhy-er/desktop-commander)](https://smithery.ai/server/@wonderwhy-er/desktop-commander)\n[![Buy Me A Coffee](https://img.shields.io/badge/Buy%20Me%20A%20Coffee-support-yellow.svg)](https://www.buymeacoffee.com/wonderwhyer)\n\n[![Discord](https://img.shields.io/badge/Join%20Discord-5865F2?style=for-the-badge&logo=discord&logoColor=white)](https://discord.gg/kQ27sNnZr7)\n\nShort version. Two key things. Terminal commands and diff based file editing.\n\n![Desktop Commander MCP](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/logo.png)\n\n<a href=\"https://glama.ai/mcp/servers/zempur9oh4\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/zempur9oh4/badge\" alt=\"Claude Desktop Commander MCP server\" />\n</a>\n\n## Table of Contents\n- [Features](#features)\n- [Installation](#installation)\n- [Usage](#usage)\n- [Handling Long-Running Commands](#handling-long-running-commands)\n- [Work in Progress and TODOs](#work-in-progress-and-todos)\n- [Media links](#media)\n- [Testimonials](#testimonials)\n- [Contributing](#contributing)\n- [License](#license)\n\nThis is server that allows Claude desktop app to execute long-running terminal commands on your computer and manage processes through Model Context Protocol (MCP) + Built on top of [MCP Filesystem Server](https://github.com/modelcontextprotocol/servers/tree/main/src/filesystem) to provide additional search and replace file editing capabilities .\n\n## Features\n\n- Execute terminal commands with output streaming\n- Command timeout and background execution support\n- Process management (list and kill processes)\n- Session management for long-running commands\n- Full filesystem operations:\n  - Read/write files\n  - Create/list directories\n  - Move files/directories\n  - Search files\n  - Get file metadata\n  - Code editing capabilities:\n  - Surgical text replacements for small changes\n  - Full file rewrites for major changes\n  - Multiple file support\n  - Pattern-based replacements\n  - vscode-ripgrep based recursive code or text search in folders\n\n## Installation\nFirst, ensure you've downloaded and installed the [Claude Desktop app](https://claude.ai/download) and you have [npm installed](https://docs.npmjs.com/downloading-and-installing-node-js-and-npm).\n\n### Option 1: Installing via Smithery\n\nTo install Desktop Commander for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@wonderwhy-er/desktop-commander):\n\n```bash\nnpx -y @smithery/cli install @wonderwhy-er/desktop-commander --client claude\n```\n\n### Option 2: Install trough npx\nJust run this in terminal\n```\nnpx @wonderwhy-er/desktop-commander setup\n```\nRestart Claude if running\n\n### Option 3: Add to claude_desktop_config by hand\nAdd this entry to your claude_desktop_config.json (on Mac, found at ~/Library/Application\\ Support/Claude/claude_desktop_config.json):\n```json\n{\n  \"mcpServers\": {\n    \"desktop-commander\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@wonderwhy-er/desktop-commander\"\n      ]\n    }\n  }\n}\n```\nRestart Claude if running\n\n### Option 4: Checkout locally\n1. Clone and build:\n```bash\ngit clone https://github.com/wonderwhy-er/ClaudeComputerCommander.git\ncd ClaudeComputerCommander\nnpm run setup\n```\nRestart Claude if running\n\nThe setup command will:\n- Install dependencies\n- Build the server\n- Configure Claude's desktop app\n- Add MCP servers to Claude's config if needed\n\n## Usage\n\nThe server provides these tool categories:\n\n### Terminal Tools\n- `execute_command`: Run commands with configurable timeout\n- `read_output`: Get output from long-running commands\n- `force_terminate`: Stop running command sessions\n- `list_sessions`: View active command sessions\n- `list_processes`: View system processes\n- `kill_process`: Terminate processes by PID\n- `block_command`/`unblock_command`: Manage command blacklist\n\n### Filesystem Tools\n- `read_file`/`write_file`: File operations\n- `create_directory`/`list_directory`: Directory management  \n- `move_file`: Move/rename files\n- `search_files`: Pattern-based file search\n- `get_file_info`: File metadata\n- `code_search`: Recursive ripgrep based text and code search\n\n### Edit Tools\n- `edit_block`: Apply surgical text replacements (best for changes <20% of file size)\n- `write_file`: Complete file rewrites (best for large changes >20% or when edit_block fails)\n\nSearch/Replace Block Format:\n```\nfilepath.ext\n<<<<<<< SEARCH\nexisting code to replace\n=======\nnew code to insert\n>>>>>>> REPLACE\n```\n\nExample:\n```\nsrc/main.js\n<<<<<<< SEARCH\nconsole.log(\"old message\");\n=======\nconsole.log(\"new message\");\n>>>>>>> REPLACE\n```\n\n## Handling Long-Running Commands\n\nFor commands that may take a while:\n\n1. `execute_command` returns after timeout with initial output\n2. Command continues in background\n3. Use `read_output` with PID to get new output\n4. Use `force_terminate` to stop if needed\n\n## Model Context Protocol Integration\n\nThis project extends the MCP Filesystem Server to enable:\n- Local server support in Claude Desktop\n- Full system command execution\n- Process management\n- File operations\n- Code editing with search/replace blocks\n\nCreated as part of exploring Claude MCPs: https://youtube.com/live/TlbjFDbl5Us\n\n## DONE\n- **25-03-2025 Better code search** ([merged](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/17)) - Enhanced code exploration with context-aware results\n\n## Work in Progress and TODOs\n\nThe following features are currently being developed or planned:\n\n- **Better configurations** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/16)) - Improved settings for allowed paths, commands and shell environment\n- **Windows environment fixes** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/13)) - Resolving issues specific to Windows platforms\n- **Linux improvements** ([in progress](https://github.com/wonderwhy-er/ClaudeDesktopCommander/pull/12)) - Enhancing compatibility with various Linux distributions\n- **Support for WSL** - Windows Subsystem for Linux integration\n- **Support for SSH** - Remote server command execution\n- **Installation troubleshooting guide** - Comprehensive help for setup issues\n\n## Website\n\nVisit our official website at [https://desktopcommander.app/](https://desktopcommander.app/) for the latest information, documentation, and updates.\n\n## Media\nLearn more about this project through these resources:\n\n### Article\n[Claude with MCPs replaced Cursor & Windsurf. How did that happen?](https://wonderwhy-er.medium.com/claude-with-mcps-replaced-cursor-windsurf-how-did-that-happen-c1d1e2795e96) - A detailed exploration of how Claude with Model Context Protocol capabilities is changing developer workflows.\n\n### Video\n[Claude Desktop Commander Video Tutorial](https://www.youtube.com/watch?v=ly3bed99Dy8) - Watch how to set up and use the Commander effectively.\n\n### Publication at AnalyticsIndiaMag\n[\nThis Developer Ditched Windsurf, Cursor Using Claude with MCPs](https://analyticsindiamag.com/ai-features/this-developer-ditched-windsurf-cursor-using-claude-with-mcps/)\n\n### Community\nJoin our [Discord server](https://discord.gg/7cbccwRp) to get help, share feedback, and connect with other users.\n\n## Testimonials\n\n[![It's a life saver! I paid Claude + Cursor currently which I always feel it's kind of duplicated. This solves the problem ultimately. I am so happy. Thanks so much. Plus today Claude has added the web search support. With this MCP + Internet search, it writes the code with the latest updates. It's so good when Cursor doesn't work sometimes or all the fast requests are used.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img.png) https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyyBt6_ShdDX_rIOad4AaABAg\n)\n\n[![This is the first comment I've ever left on a youtube video, THANK YOU! I've been struggling to update an old Flutter app in Cursor from an old pre null-safety version to a current version and implemented null-safety using Claude 3.7. I got most of the way but had critical BLE errors that I spent days trying to resolve with no luck. I tried Augment Code but it didn't get it either. I implemented your MCP in Claude desktop and was able to compare the old and new codebase fully, accounting for the updates in the code, and fix the issues in a couple of hours. A word of advice to people trying this, be sure to stage changes and commit when appropriate to be able to undo unwanted changes. Amazing!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_1.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgztdHvDMqTb9jiqnf54AaABAg\n)\n\n[![Great! I just used Windsurf, bought license a week ago, for upgrading old fullstack socket project and it works many times good or ok but also many times runs away in cascade and have to revert all changes loosing hundereds of cascade tokens. In just a week down to less than 100 tokens and do not want to buy only 300 tokens for 10$. This Claude MCP ,bought claude Pro finally needed but wanted very good reason to also have next to ChatGPT, and now can code as much as I want not worrying about token cost.\nAlso this is much more than code editing it is much more thank you for great video!](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_2.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=UgyQFTmYLJ4VBwIlmql4AaABAg)\n\n[![it is a great tool, thank you, I like using it, as it gives claude an ability to do surgical edits, making it more like a human developer.](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_3.png)\nhttps://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg](https://www.youtube.com/watch?v=ly3bed99Dy8&lc=Ugy4-exy166_Ma7TH-h4AaABAg)\n\n[![You sir are my hero. You've pretty much summed up and described my experiences of late, much better than I could have. Cursor and Windsurf both had me frustrated to the point where I was almost yelling at my computer screen. Out of whimsy, I thought to myself why not just ask Claude directly, and haven't looked back since.\nClaude first to keep my sanity in check, then if necessary, engage with other IDEs, frameworks, etc. I thought I was the only one, glad to see I'm not lol.\n33\n1](https://raw.githubusercontent.com/wonderwhy-er/ClaudeComputerCommander/main/testemonials/img_4.png)\nhttps://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e](https://medium.com/@pharmx/you-sir-are-my-hero-62cff5836a3e)\n\n## Contributing\n\nIf you find this project useful, please consider giving it a ⭐ star on GitHub! This helps others discover the project and encourages further development.\n\nWe welcome contributions from the community! Whether you've found a bug, have a feature request, or want to contribute code, here's how you can help:\n\n- **Found a bug?** Open an issue at [github.com/wonderwhy-er/ClaudeComputerCommander/issues](https://github.com/wonderwhy-er/ClaudeComputerCommander/issues)\n- **Have a feature idea?** Submit a feature request in the issues section\n- **Want to contribute code?** Fork the repository, create a branch, and submit a pull request\n- **Questions or discussions?** Start a discussion in the GitHub Discussions tab\n\nAll contributions, big or small, are greatly appreciated!\n\nIf you find this tool valuable for your workflow, please consider [supporting the project](https://www.buymeacoffee.com/wonderwhyer).\n\n## License\n\nMIT",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "desktopcommandermcp",
        "commands",
        "terminal",
        "zhanyiwp desktopcommandermcp",
        "file management",
        "commands manage"
      ],
      "category": "file-management"
    },
    "zhiwei5576--excel-mcp-server": {
      "owner": "zhiwei5576",
      "name": "excel-mcp-server",
      "url": "https://github.com/zhiwei5576/excel-mcp-server",
      "imageUrl": "/freedevtools/mcp/pfp/zhiwei5576.webp",
      "description": "Read, write, and analyze Excel files while seamlessly managing data through various functionalities, including accessing multiple worksheets and exporting structure information.",
      "stars": 41,
      "forks": 7,
      "license": "MIT License",
      "language": "TypeScript",
      "updated_at": "2025-09-06T02:32:45Z",
      "readme_content": "# Excel MCP Server\n[![npm](https://img.shields.io/npm/v/@zhiweixu/excel-mcp-server)](https://www.npmjs.com/package/@zhiweixu/excel-mcp-server)\n[![smithery badge](https://smithery.ai/badge/@zhiwei5576/excel-mcp-server)](https://smithery.ai/server/@zhiwei5576/excel-mcp-server)\n[简体中文](./README_CN.md) | English\n\nExcel file processing server based on Model Context Protocol (MCP), providing functionalities for reading, writing, and analyzing Excel files.\n\n## Features\n\n- 📖 Read Excel Files\n\n  - Get worksheet list\n  - Read specific worksheet data\n  - Read all worksheets data\n\n- ✍️ Write Excel Files\n\n  - Create new Excel files\n  - Write to specific worksheet\n  - Support multiple worksheets\n\n- 🔍 Analyze Excel Structure\n\n  - Analyze worksheet structure\n  - Export structure to new file\n\n- 💾 Cache Management\n\n  - Automatic file content caching\n  - Scheduled cache cleanup\n  - Manual cache clearing\n\n- 📝 Log Management\n  - Automatic operation logging\n  - Periodic log cleanup\n\n## Installation\n\n### Installing via Smithery\n\nTo install excel-mcp-server for Claude Desktop automatically via [Smithery](https://smithery.ai/server/@zhiwei5576/excel-mcp-server):\n\n```bash\nnpx -y @smithery/cli install @zhiwei5576/excel-mcp-server --client claude\n```\n\n### Installing Manually\nInstalling via NPM\nexcel-mcp-server can be automatically installed by adding the following configuration to the MCP servers configuration.\n\nWindows Platform:\n\n```bash\n{\n  \"mcpServers\": {\n    \"excel\": {\n        \"command\": \"cmd\",\n        \"args\": [\"/c\", \"npx\", \"--yes\", \"@zhiweixu/excel-mcp-server\"],\n        \"env\": {\n            \"LOG_PATH\": \"[set an accessible absolute path]\",\n            \"CACHE_MAX_AGE\": \"1\",\n            \"CACHE_CLEANUP_INTERVAL\": \"4\",\n            \"LOG_RETENTION_DAYS\": \"7\",\n            \"LOG_CLEANUP_INTERVAL\": \"24\"\n        }\n    }\n}\n```\n\nOther Platforms:\n\n```bash\n{\n  \"mcpServers\": {\n    \"excel\": {\n        \"command\": \"npx\",\n        \"args\": [\"--yes\", \"@zhiweixu/excel-mcp-server\"],\n        \"env\": {\n            \"LOG_PATH\": \"[set an accessible absolute path]\",\n            \"CACHE_MAX_AGE\": \"1\",\n            \"CACHE_CLEANUP_INTERVAL\": \"4\",\n            \"LOG_RETENTION_DAYS\": \"7\",\n            \"LOG_CLEANUP_INTERVAL\": \"24\"\n        }\n    }\n}\n```\nNote: LOG_PATH is optional. If not set, logs will be stored in the 'logs' folder under the application root directory.other arguments are optional.\n\n## API Tools\n\n### Structure Tools\n\n1. analyzeExcelStructure\n   - Function: Get Excel file structure including sheet list and column headers in JSON format\n   - Parameters:\n     - fileAbsolutePath: Absolute path of the Excel file\n     - headerRows: Number of header rows (default: 1)\n\n2. exportExcelStructure\n   - Function: Export Excel file structure (sheets and headers) to a new Excel template file\n   - Parameters:\n     - sourceFilePath: Source Excel file path\n     - targetFilePath: Target Excel file path\n     - headerRows: Number of header rows (default: 1)\n\n### Read Tools\n\n1. readSheetNames\n   - Function: Get all sheet names from the Excel file\n   - Parameters:\n     - fileAbsolutePath: Absolute path of the Excel file\n\n2. readDataBySheetName\n   - Function: Get data from a specific sheet in the Excel file\n   - Parameters:\n     - fileAbsolutePath: Absolute path of the Excel file\n     - sheetName: Name of the sheet to read\n     - headerRow: Header row number (default: 1)\n     - dataStartRow: Data start row number (default: 2)\n\n3. readSheetData\n   - Function: Get data from all sheets in the Excel file\n   - Parameters:\n     - fileAbsolutePath: Absolute path of the Excel file\n     - headerRow: Header row number (default: 1)\n     - dataStartRow: Data start row number (default: 2)\n\n### Write Tools\n\n1. writeDataBySheetName\n   - Function: Write data to a specific sheet in the Excel file (overwrites if sheet exists)\n   - Parameters:\n     - fileAbsolutePath: Absolute path of the Excel file\n     - sheetName: Name of the sheet to write\n     - data: Array of data to write\n\n2. writeSheetData\n   - Function: Create a new Excel file with provided data\n   - Parameters:\n     - fileAbsolutePath: Absolute path for the new Excel file\n     - data: Object containing multiple sheet data\n\n### Cache Tools\n\n1. clearFileCache\n   - Function: Clear cached data for the specified Excel file\n   - Parameters:\n     - fileAbsolutePath: Absolute path of the Excel file to clear from cache\n\n## Configuration\n\n### Environment Variables\n\n- `LOG_PATH`: Log files storage path\n  - Optional\n  - Default: 'logs' folder under application root directory\n\n- `CACHE_MAX_AGE`: Cache expiration time (hours)\n  - Optional\n  - Default: 1\n\n- `CACHE_CLEANUP_INTERVAL`: Cache cleanup interval (hours)\n  - Optional\n  - Default: 4\n\n- `LOG_RETENTION_DAYS`: Log retention days\n  - Optional\n  - Default: 7\n\n- `LOG_CLEANUP_INTERVAL`: Log cleanup interval (hours)\n  - Optional\n  - Default: 24\n\n### Default Configuration\n\n- Cache Configuration\n  - Cache expiration time: 1 hour\n  - Cache cleanup interval: 4 hours\n\n- Log Configuration\n  - Log retention days: 7 days\n  - Cleanup interval: 24 hours\n\n## Dependencies\n\n- @modelcontextprotocol/sdk: ^1.7.0\n- xlsx: ^0.18.5\n- typescript: ^5.8.2\n\n## Development Dependencies\n\n- @types/node: ^22.13.10\n- nodemon: ^3.1.9\n- ts-node: ^10.9.2\n\n## License\n\nThis project is licensed under the MIT License. This means you are free to:\n\n- Use the software for commercial or non-commercial purposes\n- Modify the source code\n- Distribute original or modified code\n  Requirements:\n\n- Retain the original copyright notice\n- No liability can be claimed against the authors for software use\n  For detailed license information,please see the [LICENSE](./LICENSE) file.\n",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "excel",
        "worksheets",
        "files",
        "excel files",
        "zhiwei5576 excel",
        "worksheets exporting"
      ],
      "category": "file-management"
    },
    "zhixiaoqiang--desktop-image-manager-mcp": {
      "owner": "zhixiaoqiang",
      "name": "desktop-image-manager-mcp",
      "url": "https://github.com/zhixiaoqiang/desktop-image-manager-mcp",
      "imageUrl": "/freedevtools/mcp/pfp/zhixiaoqiang.webp",
      "description": "Manage and optimize desktop images by counting, viewing, and compressing image files in formats like JPG, PNG, and WebP. Customizable quality settings enhance efficiency in image management tasks.",
      "stars": 3,
      "forks": 2,
      "license": "No License",
      "language": "JavaScript",
      "updated_at": "2025-07-19T08:01:56Z",
      "readme_content": "# Desktop Image Manager MCP Server\n\n基于 Model Context Protocol (MCP) 开发的桌面图片管理服务器，提供图片文件统计、查看和压缩功能。\n\n<a href=\"https://glama.ai/mcp/servers/@zhixiaoqiang/desktop-image-manager-mcp\">\n  <img width=\"380\" height=\"200\" src=\"https://glama.ai/mcp/servers/@zhixiaoqiang/desktop-image-manager-mcp/badge\" alt=\"Desktop Image Manager Server MCP server\" />\n</a>\n\n## 操作示例：\n[![示例图片](https://github.com/zhixiaoqiang/desktop-image-manager-mcp/blob/main/assets/example.png?raw=true)](https://claude.ai/share/0ffbad1e-502e-4188-b008-0bb966acf06d)\n[https://claude.ai/share/0ffbad1e-502e-4188-b008-0bb966acf06d](https://claude.ai/share/0ffbad1e-502e-4188-b008-0bb966acf06d)\n\n## 功能特性\n\n- 统计桌面图片数量：快速获取桌面上的图片文件总数\n- 获取图片列表：列出桌面上所有图片文件的名称\n- 图片压缩：支持压缩 JPG、PNG、WebP 等格式的图片文件，可自定义压缩质量\n\n## 实现提示\n\n让 Trae 引用 `./demand.md` 进行功能代码生成，简化版如下\n\n```plaintext\n... （这里是已经引入的 domain knowledge）\n\n打造一个 MCP 服务器，它能够：\n- 功能：\n  - 统计当前桌面上的图片文件数量\n  - 获取对应文件的名称\n  - 支持压缩图片\n\n要求：\n- 不需要给出 prompt 和 resource 相关代码。\n- 你可以假设我的桌面路径为 /Users/{username}/Desktop\n```\n\n## 支持的图片格式\n\n- JPG/JPEG\n- PNG\n- GIF\n- BMP\n- WebP\n- TIFF\n- SVG\n\n## 环境要求\n\n- Node.js >= 16\n- pnpm >= 8\n\n## 安装\n\n```bash\n# 克隆项目\ngit clone <repository-url>\ncd desktop-image-manager\n\n# 安装依赖\npnpm install\n```\n\n## 开发\n\n```bash\n# 启动开发服务器\npnpm dev\n```\n\n## 构建和运行\n```bash\n# 构建项目\npnpm build\n\n# 运行服务器\npnpm start\n```\n\n## 调试\n\n```bash\n# 调试 MCP 服务\npnpm inspector\n```\n\n## MCP 工具使用说明\n### 1. 统计桌面图片数量\n```bash\n# 构建项目\npnpm build\n\n# 运行服务器\npnpm start\n```\n\n### 2. 获取图片列表\n```typescript\n// 工具名称: list-desktop-images\n// 参数: 无\nawait client.callTool({\n  name: \"list-desktop-images\"\n});\n```\n\n### 3. 压缩图片\n```typescript\n// 工具名称: compress-image\n// 参数:\n// - fileName: 要压缩的图片文件名\n// - quality: 压缩质量 (1-100)，默认 80\n// - outputName: 输出文件名（可选）\nawait client.callTool({\n  name: \"compress-image\",\n  arguments: {\n    fileName: \"example.jpg\",\n    quality: 75,\n    outputName: \"example-compressed.jpg\"\n  }\n});\n```\n\n## 开发\n\n```bash\n# 启动开发服务器\npnpm dev\n```\n\n## 安装\n使用 Claude Desktop 添加如下配置 config:\n\nMacOS: ~/Library/Application Support/Claude/claude_desktop_config.json Windows: %APPDATA%/Claude/claude_desktop_config.json\n\n```json\n{\n  \"desktop-image-manager\": {\n      \"command\": \"npx\",\n      \"args\": [\n        \"-y\",\n        \"@jzone-mcp/desktop-image-manager-mcp\"\n      ]\n    }\n}\n```\n\n## 注意事项\n1. 确保有足够的桌面访问权限\n2. 大文件压缩可能需要较长时间\n3. 压缩后的文件默认保存在桌面，文件名会添加 \"-compressed\" 后缀\n## 技术栈\n- TypeScript\n- MCP SDK\n- Sharp (图片处理)\n- fs-extra (文件操作)\n- zod (参数验证)\n\n## 许可证\nMIT License\n```plaintext\n这个 README 文件包含了项目的主要信息、安装说明、使用方法和注意事项。如果您需要添加或修改任何内容，请告诉我。\n```",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "jpg",
        "png",
        "images",
        "image manager",
        "image management",
        "desktop images"
      ],
      "category": "file-management"
    },
    "zxfgds--mcp-toolkit": {
      "owner": "zxfgds",
      "name": "mcp-toolkit",
      "url": "https://github.com/zxfgds/mcp-toolkit",
      "imageUrl": "/freedevtools/mcp/pfp/zxfgds.webp",
      "description": "Interact with local systems, databases, and external services through file operations, database management, and GitHub integration. Perform secure and efficient commands and transactions to enhance AI applications with real-world capabilities.",
      "stars": 1,
      "forks": 1,
      "license": "No License",
      "language": "TypeScript",
      "updated_at": "2025-05-05T00:45:07Z",
      "readme_content": "# MCP Toolkit\n\nEnglish | [中文](README_zh.md)\n\n## Overview\n\nMCP Toolkit is a comprehensive Model Context Protocol (MCP) server implementation that provides a rich set of tools for AI assistants to interact with the local system, files, databases, and external services. It's designed to extend AI capabilities with real-world interactions while maintaining security and control.\n\n## Features\n\n- **File System Operations**\n  - Read and write files\n  - Create and delete directories\n  - Search files with regex patterns\n  - List directory contents\n  - Extract code definitions\n\n- **Database Integration**\n  - MySQL support\n  - PostgreSQL support\n  - Redis support\n  - Transaction management\n  - Parameterized queries\n\n- **GitHub Integration**\n  - Repository management\n  - Code search\n  - File operations\n  - Tree structure analysis\n\n- **Web Capabilities**\n  - Web page content extraction\n  - Brave search integration\n  - HTTP request handling\n  - Proxy support\n\n- **System Tools**\n  - Command execution\n  - Everything search integration\n  - Stack trace analysis\n  - Logging system\n\n## Installation\n\n```bash\nnpm install mcp-toolkit\n```\n\n## Configuration\n\nCreate a `config.json` file in your project:\n\n```json\n{\n  \"workspace\": {\n    \"rootPath\": \"/path/to/workspace\",\n    \"allowedPaths\": [\"/allowed/path1\", \"/allowed/path2\"]\n  },\n  \"network\": {\n    \"proxy\": \"http://proxy-server:port\"  // Optional\n  },\n  \"database\": {\n    \"mysql\": {\n      \"host\": \"localhost\",\n      \"port\": 3306,\n      \"user\": \"user\",\n      \"password\": \"password\",\n      \"database\": \"dbname\"\n    }\n    // Similar configuration for PostgreSQL and Redis\n  }\n}\n```\n\n## Usage\n\n```typescript\nimport { Server } from 'mcp-toolkit';\n\nconst server = new Server({\n  configPath: './config.json'\n});\n\nserver.start();\n```\n\n## Tool Details\n\n### File Operation Tools\n- `read_file`: Read file contents, supports text and binary files\n- `write_to_file`: Write or create files\n- `apply_diff`: Apply differential modifications to files\n- `insert_content`: Insert content at specified positions\n- `search_and_replace`: Search and replace file contents\n- `list_files`: List directory contents\n- `search_files`: Search files using regex\n- `list_code_definition_names`: Extract code definitions\n\n### Database Tools\n- `db_connect`: Connect to databases (MySQL/PostgreSQL/Redis)\n- `db_query`: Execute database queries\n- `db_begin_transaction`: Start transaction\n- `db_commit_transaction`: Commit transaction\n- `db_rollback_transaction`: Rollback transaction\n- `db_close`: Close database connection\n\n### GitHub Tools\n- `github_ls`: List repository contents\n- `github_tree`: Display repository tree structure\n- `github_search_repo`: Search repositories\n- `github_search_code`: Search code\n- `github_cat`: View file contents\n- `github_list_repos`: List user repositories\n- `github_create_repo`: Create repository\n- `github_update_repo`: Update repository settings\n- `github_delete_repo`: Delete repository\n\n### Web Tools\n- `read_webpage`: Extract webpage content\n- `brave_search`: Use Brave search\n- `http_request`: Send HTTP requests\n\n### System Tools\n- `execute_command`: Execute system commands\n- `everything_search`: Local file search\n- `logger`: Logging\n- `get_stack_trace`: Stack trace analysis\n\n## Security\n\n- Configurable workspace restrictions\n- Command execution controls\n- Database access management\n- Token-based authentication for external services\n\n## Contributing\n\nContributions are welcome! Please read our [Contributing Guidelines](CONTRIBUTING.md) for details.\n\n## License\n\nMIT License",
      "npm_url": "",
      "npm_downloads": 0,
      "keywords": [
        "zxfgds",
        "toolkit",
        "mcp",
        "management zxfgds",
        "mcp toolkit",
        "zxfgds mcp"
      ],
      "category": "file-management"
    }
  }
}